[
    {
        "owner": {
            "account_id": 7444343,
            "reputation": 5765,
            "user_id": 5994461,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/aab1d1f8d1313f4c0b943d6666f89522?s=256&d=identicon&r=PG",
            "display_name": "user5994461",
            "link": "https:\/\/stackoverflow.com\/users\/5994461\/user5994461"
        },
        "is_accepted": false,
        "score": 39,
        "last_activity_date": 1688387214,
        "last_edit_date": 1688387214.0,
        "creation_date": 1637237423,
        "answer_id": 70019592,
        "question_id": 2051192,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "**Disclaimer: egg is an abandoned format of python package, the tools to use eggs no longer exist.**\r\n\r\nAn egg is a python package. It&#39;s a zip archive containing python source files and\/or compiled libraries. \r\n\r\nThe format is not well specified about what it must contain or how to make packages for different versions of python and different operating systems, that&#39;s one of the reasons it was replaced.\r\n\r\nThe format appeared around 2004 and was in-use until the mid 2010s, it&#39;s been completely replaced by `wheels` and `pip install`. \r\n\r\nEggs were installed by the command `easy_install`. The command was removed in setuptools v58.3 (year 2021). You can no longer use eggs.\r\n\r\nIf you see anything that mentions `easy_install` or `egg`, be it any stack overflow answers or tutorials, it is seriously obsolete. \r\n\r\nRecommend this longer answer https:\/\/stackoverflow.com\/a\/68897551\/5994461 for an in-depth history of python packaging. It&#39;s going over pip and wheels and eggs and much more.\r\n\r\nUpdate: As of July 2023 the official python package repository pypi.org [no longer accepts upload of .egg packages.][1]\r\n\r\n\r\n  [1]: https:\/\/blog.pypi.org\/posts\/2023-06-26-deprecate-egg-uploads\/",
        "body": "<p><strong>Disclaimer: egg is an abandoned format of python package, the tools to use eggs no longer exist.<\/strong><\/p>\n<p>An egg is a python package. It's a zip archive containing python source files and\/or compiled libraries.<\/p>\n<p>The format is not well specified about what it must contain or how to make packages for different versions of python and different operating systems, that's one of the reasons it was replaced.<\/p>\n<p>The format appeared around 2004 and was in-use until the mid 2010s, it's been completely replaced by <code>wheels<\/code> and <code>pip install<\/code>.<\/p>\n<p>Eggs were installed by the command <code>easy_install<\/code>. The command was removed in setuptools v58.3 (year 2021). You can no longer use eggs.<\/p>\n<p>If you see anything that mentions <code>easy_install<\/code> or <code>egg<\/code>, be it any stack overflow answers or tutorials, it is seriously obsolete.<\/p>\n<p>Recommend this longer answer <a href=\"https:\/\/stackoverflow.com\/a\/68897551\/5994461\">https:\/\/stackoverflow.com\/a\/68897551\/5994461<\/a> for an in-depth history of python packaging. It's going over pip and wheels and eggs and much more.<\/p>\n<p>Update: As of July 2023 the official python package repository pypi.org <a href=\"https:\/\/blog.pypi.org\/posts\/2023-06-26-deprecate-egg-uploads\/\" rel=\"noreferrer\">no longer accepts upload of .egg packages.<\/a><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 22212,
            "reputation": 4675,
            "user_id": 54567,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/8eaeb92fb3cd3a8d81968bac86bf22ed?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "meteore",
            "link": "https:\/\/stackoverflow.com\/users\/54567\/meteore"
        },
        "is_accepted": false,
        "score": 38,
        "last_activity_date": 1351851360,
        "last_edit_date": null,
        "creation_date": 1351851360,
        "answer_id": 13193256,
        "question_id": 13187778,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "You can use the `to_records` method, but have to play around a bit with the dtypes if they are not what you want from the get go. In my case, having copied your DF from a string, the index type is string (represented by an `object` dtype in pandas):\r\n\r\n    In [102]: df\r\n    Out[102]: \r\n    label    A    B    C\r\n    ID                  \r\n    1      NaN  0.2  NaN\r\n    2      NaN  NaN  0.5\r\n    3      NaN  0.2  0.5\r\n    4      0.1  0.2  NaN\r\n    5      0.1  0.2  0.5\r\n    6      0.1  NaN  0.5\r\n    7      0.1  NaN  NaN\r\n    \r\n    In [103]: df.index.dtype\r\n    Out[103]: dtype(&#39;object&#39;)\r\n    In [104]: df.to_records()\r\n    Out[104]: \r\n    rec.array([(1, nan, 0.2, nan), (2, nan, nan, 0.5), (3, nan, 0.2, 0.5),\r\n           (4, 0.1, 0.2, nan), (5, 0.1, 0.2, 0.5), (6, 0.1, nan, 0.5),\r\n           (7, 0.1, nan, nan)], \r\n          dtype=[(&#39;index&#39;, &#39;|O8&#39;), (&#39;A&#39;, &#39;&lt;f8&#39;), (&#39;B&#39;, &#39;&lt;f8&#39;), (&#39;C&#39;, &#39;&lt;f8&#39;)])\r\n    In [106]: df.to_records().dtype\r\n    Out[106]: dtype([(&#39;index&#39;, &#39;|O8&#39;), (&#39;A&#39;, &#39;&lt;f8&#39;), (&#39;B&#39;, &#39;&lt;f8&#39;), (&#39;C&#39;, &#39;&lt;f8&#39;)])\r\n\r\nConverting the recarray dtype does not work for me, but one can do this in Pandas already:\r\n\r\n    In [109]: df.index = df.index.astype(&#39;i8&#39;)\r\n    In [111]: df.to_records().view([(&#39;ID&#39;, &#39;&lt;i8&#39;), (&#39;A&#39;, &#39;&lt;f8&#39;), (&#39;B&#39;, &#39;&lt;f8&#39;), (&#39;C&#39;, &#39;&lt;f8&#39;)])\r\n    Out[111]:\r\n    rec.array([(1, nan, 0.2, nan), (2, nan, nan, 0.5), (3, nan, 0.2, 0.5),\r\n           (4, 0.1, 0.2, nan), (5, 0.1, 0.2, 0.5), (6, 0.1, nan, 0.5),\r\n           (7, 0.1, nan, nan)], \r\n          dtype=[(&#39;ID&#39;, &#39;&lt;i8&#39;), (&#39;A&#39;, &#39;&lt;f8&#39;), (&#39;B&#39;, &#39;&lt;f8&#39;), (&#39;C&#39;, &#39;&lt;f8&#39;)])\r\n\r\nNote that Pandas does not set the name of the index properly (to `ID`) in the exported record array (a bug?), so we profit from the type conversion to also correct for that. \r\n\r\nAt the moment Pandas has only 8-byte integers, `i8`, and floats, `f8` (see this [issue](https:\/\/github.com\/pydata\/pandas\/issues\/622)).\r\n\r\n",
        "body": "<p>You can use the <code>to_records<\/code> method, but have to play around a bit with the dtypes if they are not what you want from the get go. In my case, having copied your DF from a string, the index type is string (represented by an <code>object<\/code> dtype in pandas):<\/p>\n\n<pre><code>In [102]: df\nOut[102]: \nlabel    A    B    C\nID                  \n1      NaN  0.2  NaN\n2      NaN  NaN  0.5\n3      NaN  0.2  0.5\n4      0.1  0.2  NaN\n5      0.1  0.2  0.5\n6      0.1  NaN  0.5\n7      0.1  NaN  NaN\n\nIn [103]: df.index.dtype\nOut[103]: dtype('object')\nIn [104]: df.to_records()\nOut[104]: \nrec.array([(1, nan, 0.2, nan), (2, nan, nan, 0.5), (3, nan, 0.2, 0.5),\n       (4, 0.1, 0.2, nan), (5, 0.1, 0.2, 0.5), (6, 0.1, nan, 0.5),\n       (7, 0.1, nan, nan)], \n      dtype=[('index', '|O8'), ('A', '&lt;f8'), ('B', '&lt;f8'), ('C', '&lt;f8')])\nIn [106]: df.to_records().dtype\nOut[106]: dtype([('index', '|O8'), ('A', '&lt;f8'), ('B', '&lt;f8'), ('C', '&lt;f8')])\n<\/code><\/pre>\n\n<p>Converting the recarray dtype does not work for me, but one can do this in Pandas already:<\/p>\n\n<pre><code>In [109]: df.index = df.index.astype('i8')\nIn [111]: df.to_records().view([('ID', '&lt;i8'), ('A', '&lt;f8'), ('B', '&lt;f8'), ('C', '&lt;f8')])\nOut[111]:\nrec.array([(1, nan, 0.2, nan), (2, nan, nan, 0.5), (3, nan, 0.2, 0.5),\n       (4, 0.1, 0.2, nan), (5, 0.1, 0.2, 0.5), (6, 0.1, nan, 0.5),\n       (7, 0.1, nan, nan)], \n      dtype=[('ID', '&lt;i8'), ('A', '&lt;f8'), ('B', '&lt;f8'), ('C', '&lt;f8')])\n<\/code><\/pre>\n\n<p>Note that Pandas does not set the name of the index properly (to <code>ID<\/code>) in the exported record array (a bug?), so we profit from the type conversion to also correct for that. <\/p>\n\n<p>At the moment Pandas has only 8-byte integers, <code>i8<\/code>, and floats, <code>f8<\/code> (see this <a href=\"https:\/\/github.com\/pydata\/pandas\/issues\/622\">issue<\/a>).<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1688258,
            "reputation": 1708,
            "user_id": 1551116,
            "user_type": "registered",
            "accept_rate": 83,
            "profile_image": "https:\/\/i.stack.imgur.com\/PvfaN.jpg?s=256&g=1",
            "display_name": "James Bradbury",
            "link": "https:\/\/stackoverflow.com\/users\/1551116\/james-bradbury"
        },
        "is_accepted": false,
        "score": 38,
        "last_activity_date": 1413388057,
        "last_edit_date": 1495535499.0,
        "creation_date": 1413388057,
        "answer_id": 26386738,
        "question_id": 6468397,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "For [Python][1]:\r\n\r\n    import sys\r\n    sys.version\r\n\r\nFor Django (as mentioned by others here):\r\n\r\n    import django\r\n    django.get_version()\r\n\r\nThe potential problem with simply checking the version, is that versions get upgraded and so the code can go out of date. You want to make sure that &#39;1.7&#39; &lt; &#39;1.7.1&#39; &lt; &#39;1.7.5&#39; &lt; &#39;1.7.10&#39;. A normal string comparison would fail in the last comparison:\r\n\r\n    &gt;&gt;&gt; &#39;1.7.5&#39; &lt; &#39;1.7.10&#39;\r\n    False\r\n\r\nThe solution is to use [StrictVersion from distutils][2].\r\n\r\n    &gt;&gt;&gt; from distutils.version import StrictVersion\r\n    &gt;&gt;&gt; StrictVersion(&#39;1.7.5&#39;) &lt; StrictVersion(&#39;1.7.10&#39;)\r\n    True\r\n\r\n\r\n  [1]: https:\/\/stackoverflow.com\/q\/1093322\/1551116\r\n  [2]: https:\/\/stackoverflow.com\/a\/6972866\/1551116",
        "body": "<p>For <a href=\"https:\/\/stackoverflow.com\/q\/1093322\/1551116\">Python<\/a>:<\/p>\n\n<pre><code>import sys\nsys.version\n<\/code><\/pre>\n\n<p>For Django (as mentioned by others here):<\/p>\n\n<pre><code>import django\ndjango.get_version()\n<\/code><\/pre>\n\n<p>The potential problem with simply checking the version, is that versions get upgraded and so the code can go out of date. You want to make sure that '1.7' &lt; '1.7.1' &lt; '1.7.5' &lt; '1.7.10'. A normal string comparison would fail in the last comparison:<\/p>\n\n<pre><code>&gt;&gt;&gt; '1.7.5' &lt; '1.7.10'\nFalse\n<\/code><\/pre>\n\n<p>The solution is to use <a href=\"https:\/\/stackoverflow.com\/a\/6972866\/1551116\">StrictVersion from distutils<\/a>.<\/p>\n\n<pre><code>&gt;&gt;&gt; from distutils.version import StrictVersion\n&gt;&gt;&gt; StrictVersion('1.7.5') &lt; StrictVersion('1.7.10')\nTrue\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 13359844,
            "reputation": 1181,
            "user_id": 9642259,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/awHgj.jpg?s=256&g=1",
            "display_name": "jameshollisandrew",
            "link": "https:\/\/stackoverflow.com\/users\/9642259\/jameshollisandrew"
        },
        "is_accepted": false,
        "score": 38,
        "last_activity_date": 1673475497,
        "last_edit_date": 1673475497.0,
        "creation_date": 1586498922,
        "answer_id": 61134895,
        "question_id": 4289331,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "To catch different patterns it is helpful to query with different patterns. \r\n\r\n## Setup all the patterns that catch different number patterns of interest:\r\n\r\n - To find commas, e.g. 12,300 or 12,300.00\r\n```\r\nr&#39;[\\d]+[.,\\d]+&#39;      \r\n```\r\n- To find floats, e.g. 0.123 or .123\r\n```\r\nr&#39;[\\d]*[.][\\d]+&#39;     \r\n```\r\n - To find integers, e.g. 123\r\n```\r\nr&#39;[\\d]+&#39;\r\n```\r\n\r\n## Combine with pipe ( `|` ) into one pattern with multiple _or conditionals_. \r\n*(Note: Put complex patterns first else simple patterns will return chunks of the complex catch instead of the complex catch returning the full catch).*\r\n\r\n    p = &#39;[\\d]+[.,\\d]+|[\\d]*[.][\\d]+|[\\d]+&#39;\r\n\r\nBelow, we&#39;ll confirm a pattern is present with `re.search()`, then return an iterable list of catches. Finally, we&#39;ll print each catch using bracket notation to subselect the match object return value from the match object.\r\n\r\n    s = &#39;he33llo 42 I\\&#39;m a 32 string 30 444.4 12,001&#39;\r\n\r\n    if re.search(p, s) is not None:\r\n        for catch in re.finditer(p, s):\r\n            print(catch[0]) # catch is a match object\r\n\r\nReturns:\r\n\r\n\r\n    33\r\n    42\r\n    32\r\n    30\r\n    444.4\r\n    12,001",
        "body": "<p>To catch different patterns it is helpful to query with different patterns.<\/p>\n<h2>Setup all the patterns that catch different number patterns of interest:<\/h2>\n<ul>\n<li>To find commas, e.g. 12,300 or 12,300.00<\/li>\n<\/ul>\n<pre><code>r'[\\d]+[.,\\d]+'      \n<\/code><\/pre>\n<ul>\n<li>To find floats, e.g. 0.123 or .123<\/li>\n<\/ul>\n<pre><code>r'[\\d]*[.][\\d]+'     \n<\/code><\/pre>\n<ul>\n<li>To find integers, e.g. 123<\/li>\n<\/ul>\n<pre><code>r'[\\d]+'\n<\/code><\/pre>\n<h2>Combine with pipe ( <code>|<\/code> ) into one pattern with multiple <em>or conditionals<\/em>.<\/h2>\n<p><em>(Note: Put complex patterns first else simple patterns will return chunks of the complex catch instead of the complex catch returning the full catch).<\/em><\/p>\n<pre><code>p = '[\\d]+[.,\\d]+|[\\d]*[.][\\d]+|[\\d]+'\n<\/code><\/pre>\n<p>Below, we'll confirm a pattern is present with <code>re.search()<\/code>, then return an iterable list of catches. Finally, we'll print each catch using bracket notation to subselect the match object return value from the match object.<\/p>\n<pre><code>s = 'he33llo 42 I\\'m a 32 string 30 444.4 12,001'\n\nif re.search(p, s) is not None:\n    for catch in re.finditer(p, s):\n        print(catch[0]) # catch is a match object\n<\/code><\/pre>\n<p>Returns:<\/p>\n<pre><code>33\n42\n32\n30\n444.4\n12,001\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2120004,
            "reputation": 1868,
            "user_id": 1883468,
            "user_type": "registered",
            "accept_rate": 87,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/591746a250d5f03ab2de686d59c9ffa9?s=256&d=identicon&r=PG",
            "display_name": "Harry M",
            "link": "https:\/\/stackoverflow.com\/users\/1883468\/harry-m"
        },
        "is_accepted": false,
        "score": 38,
        "last_activity_date": 1587603870,
        "last_edit_date": null,
        "creation_date": 1587603870,
        "answer_id": 61377627,
        "question_id": 9252543,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "In my case, I was working in a Jupyter notebook and this was happening due the import already being cached from when I had defined the class\/function inside my working file. \r\n\r\nI restarted my Jupyter kernel and the error disappeared.",
        "body": "<p>In my case, I was working in a Jupyter notebook and this was happening due the import already being cached from when I had defined the class\/function inside my working file. <\/p>\n\n<p>I restarted my Jupyter kernel and the error disappeared.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4137782,
            "reputation": 11,
            "user_id": 3394017,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/da9698e8a415128bad4ca9c6abea4829?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "thaumkid",
            "link": "https:\/\/stackoverflow.com\/users\/3394017\/thaumkid"
        },
        "is_accepted": false,
        "score": 37,
        "last_activity_date": 1394648783,
        "last_edit_date": 1394648783.0,
        "creation_date": 1394218684,
        "answer_id": 22258455,
        "question_id": 6964392,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Just for fun. The following is a more &#39;native&#39; Haskell implementation:\r\n\r\n&lt;!-- language: lang-hs --&gt;\r\n\r\n    import Control.Applicative\r\n    import Control.Monad\r\n    import Data.Either\r\n    import Math.NumberTheory.Powers.Squares\r\n    \r\n    isInt :: RealFrac c =&gt; c -&gt; Bool\r\n    isInt = (==) &lt;$&gt; id &lt;*&gt; fromInteger . round\r\n    \r\n    intSqrt :: (Integral a) =&gt; a -&gt; Int\r\n    --intSqrt = fromIntegral . floor . sqrt . fromIntegral\r\n    intSqrt = fromIntegral . integerSquareRoot&#39;\r\n    \r\n    factorize :: Int -&gt; [Int]\r\n    factorize 1 = []\r\n    factorize n = first : factorize (quot n first)\r\n      where first = (!! 0) $ [a | a &lt;- [2..intSqrt n], rem n a == 0] ++ [n]\r\n    \r\n    factorize2 :: Int -&gt; [(Int,Int)]\r\n    factorize2 = foldl (\\ls@((val,freq):xs) y -&gt; if val == y then (val,freq+1):xs else (y,1):ls) [(0,0)] . factorize\r\n    \r\n    numDivisors :: Int -&gt; Int\r\n    numDivisors = foldl (\\acc (_,y) -&gt; acc * (y+1)) 1 &lt;$&gt; factorize2\r\n    \r\n    nextTriangleNumber :: (Int,Int) -&gt; (Int,Int)\r\n    nextTriangleNumber (n,acc) = (n+1,acc+n+1)\r\n    \r\n    forward :: Int -&gt; (Int, Int) -&gt; Either (Int, Int) (Int, Int)\r\n    forward k val@(n,acc) = if numDivisors acc &gt; k then Left val else Right (nextTriangleNumber val)\r\n    \r\n    problem12 :: Int -&gt; (Int, Int)\r\n    problem12 n = (!!0) . lefts . scanl (&gt;&gt;=) (forward n (1,1)) . repeat . forward $ n\r\n    \r\n    main = do\r\n      let (n,val) = problem12 1000\r\n      print val\r\n\r\nUsing `ghc -O3`, this consistently runs in 0.55-0.58 seconds on my machine (1.73GHz Core i7).\r\n\r\nA more efficient factorCount function for the C version:\r\n\r\n    int factorCount (int n)\r\n    {\r\n      int count = 1;\r\n      int candidate,tmpCount;\r\n      while (n % 2 == 0) {\r\n        count++;\r\n        n \/= 2;\r\n      }\r\n        for (candidate = 3; candidate &lt; n &amp;&amp; candidate * candidate &lt; n; candidate += 2)\r\n        if (n % candidate == 0) {\r\n          tmpCount = 1;\r\n          do {\r\n            tmpCount++;\r\n            n \/= candidate;\r\n          } while (n % candidate == 0);\r\n           count*=tmpCount;\r\n          }\r\n      if (n &gt; 1)\r\n        count *= 2;\r\n      return count;\r\n    }\r\n\r\nChanging longs to ints in main, using `gcc -O3 -lm`, this consistently runs in 0.31-0.35 seconds.\r\n\r\nBoth can be made to run even faster if you take advantage of the fact that the nth triangle number = n*(n+1)\/2, and n and (n+1) have completely disparate prime factorizations, so the number of factors of each half can be multiplied to find the number of factors of the whole. The following:\r\n\r\n    int main ()\r\n    {\r\n      int triangle = 0,count1,count2 = 1;\r\n      do {\r\n        count1 = count2;\r\n        count2 = ++triangle % 2 == 0 ? factorCount(triangle+1) : factorCount((triangle+1)\/2);\r\n      } while (count1*count2 &lt; 1001);\r\n      printf (&quot;%lld\\n&quot;, ((long long)triangle)*(triangle+1)\/2);\r\n    }\r\n\r\nwill reduce the c code run time to 0.17-0.19 seconds, and it can handle much larger searches -- greater than 10000 factors takes about 43 seconds on my machine. I leave a similar haskell speedup to the interested reader.",
        "body": "<p>Just for fun. The following is a more 'native' Haskell implementation:<\/p>\n\n<pre class=\"lang-hs prettyprint-override\"><code>import Control.Applicative\nimport Control.Monad\nimport Data.Either\nimport Math.NumberTheory.Powers.Squares\n\nisInt :: RealFrac c =&gt; c -&gt; Bool\nisInt = (==) &lt;$&gt; id &lt;*&gt; fromInteger . round\n\nintSqrt :: (Integral a) =&gt; a -&gt; Int\n--intSqrt = fromIntegral . floor . sqrt . fromIntegral\nintSqrt = fromIntegral . integerSquareRoot'\n\nfactorize :: Int -&gt; [Int]\nfactorize 1 = []\nfactorize n = first : factorize (quot n first)\n  where first = (!! 0) $ [a | a &lt;- [2..intSqrt n], rem n a == 0] ++ [n]\n\nfactorize2 :: Int -&gt; [(Int,Int)]\nfactorize2 = foldl (\\ls@((val,freq):xs) y -&gt; if val == y then (val,freq+1):xs else (y,1):ls) [(0,0)] . factorize\n\nnumDivisors :: Int -&gt; Int\nnumDivisors = foldl (\\acc (_,y) -&gt; acc * (y+1)) 1 &lt;$&gt; factorize2\n\nnextTriangleNumber :: (Int,Int) -&gt; (Int,Int)\nnextTriangleNumber (n,acc) = (n+1,acc+n+1)\n\nforward :: Int -&gt; (Int, Int) -&gt; Either (Int, Int) (Int, Int)\nforward k val@(n,acc) = if numDivisors acc &gt; k then Left val else Right (nextTriangleNumber val)\n\nproblem12 :: Int -&gt; (Int, Int)\nproblem12 n = (!!0) . lefts . scanl (&gt;&gt;=) (forward n (1,1)) . repeat . forward $ n\n\nmain = do\n  let (n,val) = problem12 1000\n  print val\n<\/code><\/pre>\n\n<p>Using <code>ghc -O3<\/code>, this consistently runs in 0.55-0.58 seconds on my machine (1.73GHz Core i7).<\/p>\n\n<p>A more efficient factorCount function for the C version:<\/p>\n\n<pre><code>int factorCount (int n)\n{\n  int count = 1;\n  int candidate,tmpCount;\n  while (n % 2 == 0) {\n    count++;\n    n \/= 2;\n  }\n    for (candidate = 3; candidate &lt; n &amp;&amp; candidate * candidate &lt; n; candidate += 2)\n    if (n % candidate == 0) {\n      tmpCount = 1;\n      do {\n        tmpCount++;\n        n \/= candidate;\n      } while (n % candidate == 0);\n       count*=tmpCount;\n      }\n  if (n &gt; 1)\n    count *= 2;\n  return count;\n}\n<\/code><\/pre>\n\n<p>Changing longs to ints in main, using <code>gcc -O3 -lm<\/code>, this consistently runs in 0.31-0.35 seconds.<\/p>\n\n<p>Both can be made to run even faster if you take advantage of the fact that the nth triangle number = n*(n+1)\/2, and n and (n+1) have completely disparate prime factorizations, so the number of factors of each half can be multiplied to find the number of factors of the whole. The following:<\/p>\n\n<pre><code>int main ()\n{\n  int triangle = 0,count1,count2 = 1;\n  do {\n    count1 = count2;\n    count2 = ++triangle % 2 == 0 ? factorCount(triangle+1) : factorCount((triangle+1)\/2);\n  } while (count1*count2 &lt; 1001);\n  printf (\"%lld\\n\", ((long long)triangle)*(triangle+1)\/2);\n}\n<\/code><\/pre>\n\n<p>will reduce the c code run time to 0.17-0.19 seconds, and it can handle much larger searches -- greater than 10000 factors takes about 43 seconds on my machine. I leave a similar haskell speedup to the interested reader.<\/p>\n",
        "community_owned_date": 1394304167.0
    },
    {
        "owner": {
            "account_id": 2747566,
            "reputation": 580,
            "user_id": 2367672,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/UwsIz.png?s=256&g=1",
            "display_name": "xxyzzy",
            "link": "https:\/\/stackoverflow.com\/users\/2367672\/xxyzzy"
        },
        "is_accepted": false,
        "score": 37,
        "last_activity_date": 1404812903,
        "last_edit_date": null,
        "creation_date": 1404812903,
        "answer_id": 24628710,
        "question_id": 5067604,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "I keep this handy utility nearby:\r\n\r\n    import inspect\r\n    myself = lambda: inspect.stack()[1][3]\r\n\r\n\r\nUsage:\r\n\r\n    myself()\r\n",
        "body": "<p>I keep this handy utility nearby:<\/p>\n\n<pre><code>import inspect\nmyself = lambda: inspect.stack()[1][3]\n<\/code><\/pre>\n\n<p>Usage:<\/p>\n\n<pre><code>myself()\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 321537,
            "reputation": 1896,
            "user_id": 640408,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/c931f8481e4b454e62ec99af979c5cbf?s=256&d=identicon&r=PG",
            "display_name": "Ardavan",
            "link": "https:\/\/stackoverflow.com\/users\/640408\/ardavan"
        },
        "is_accepted": false,
        "score": 37,
        "last_activity_date": 1416201445,
        "last_edit_date": null,
        "creation_date": 1416201445,
        "answer_id": 26965993,
        "question_id": 1641219,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "As correctly mentioned by many of the comments above, let&#39;s not forget the main goal of Access Modifiers: To help users of code understand what is supposed to change and what is supposed not to. When you see a private field you don&#39;t mess around with it. So it&#39;s mostly syntactic sugar which is easily achieved in Python by the _ and __.",
        "body": "<p>As correctly mentioned by many of the comments above, let's not forget the main goal of Access Modifiers: To help users of code understand what is supposed to change and what is supposed not to. When you see a private field you don't mess around with it. So it's mostly syntactic sugar which is easily achieved in Python by the _ and __.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2107667,
            "reputation": 1049,
            "user_id": 1873626,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/mxmpA.jpg?s=256&g=1",
            "display_name": "Vitaly Gordon",
            "link": "https:\/\/stackoverflow.com\/users\/1873626\/vitaly-gordon"
        },
        "is_accepted": false,
        "score": 37,
        "last_activity_date": 1561820411,
        "last_edit_date": 1561820411.0,
        "creation_date": 1504245673,
        "answer_id": 45994104,
        "question_id": 261638,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Use [Cython][1]. It will compile your modules to high-performant C files, which can then be compiled to native binary libraries. This is basically un-reversable, compared to .pyc bytecode!\r\n\r\nI&#39;ve written a detailed article on how to set up Cython for a Python project, check it out:\r\n\r\n**[Protecting Python Sources With Cython][2]**\r\n\r\n\r\n  [1]: http:\/\/cython.org\/\r\n  [2]: https:\/\/medium.com\/@xpl\/protecting-python-sources-using-cython-dcd940bb188e",
        "body": "<p>Use <a href=\"http:\/\/cython.org\/\" rel=\"noreferrer\">Cython<\/a>. It will compile your modules to high-performant C files, which can then be compiled to native binary libraries. This is basically un-reversable, compared to .pyc bytecode!<\/p>\n\n<p>I've written a detailed article on how to set up Cython for a Python project, check it out:<\/p>\n\n<p><strong><a href=\"https:\/\/medium.com\/@xpl\/protecting-python-sources-using-cython-dcd940bb188e\" rel=\"noreferrer\">Protecting Python Sources With Cython<\/a><\/strong><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 11394,
            "reputation": 85363,
            "user_id": 21945,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/631470ecb1d4fe8bd3be6d7e0dfe4449?s=256&d=identicon&r=PG",
            "display_name": "mhawke",
            "link": "https:\/\/stackoverflow.com\/users\/21945\/mhawke"
        },
        "is_accepted": false,
        "score": 36,
        "last_activity_date": 1509125667,
        "last_edit_date": 1509125667.0,
        "creation_date": 1224633992,
        "answer_id": 224020,
        "question_id": 222877,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Doesn&#39;t all of this assume that the base class is a new-style class?\r\n\r\n    class A:\r\n        def __init__(self):\r\n            print(&quot;A.__init__()&quot;)\r\n    \r\n    class B(A):\r\n        def __init__(self):\r\n            print(&quot;B.__init__()&quot;)\r\n            super(B, self).__init__()\r\n\r\nWill not work in Python 2. `class A` must be new-style, i.e: `class A(object)`",
        "body": "<p>Doesn't all of this assume that the base class is a new-style class?<\/p>\n\n<pre><code>class A:\n    def __init__(self):\n        print(\"A.__init__()\")\n\nclass B(A):\n    def __init__(self):\n        print(\"B.__init__()\")\n        super(B, self).__init__()\n<\/code><\/pre>\n\n<p>Will not work in Python 2. <code>class A<\/code> must be new-style, i.e: <code>class A(object)<\/code><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 15903,
            "reputation": 323649,
            "user_id": 34088,
            "user_type": "registered",
            "accept_rate": 77,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/8a4d6f03a8879432d8563aefbf48e787?s=256&d=identicon&r=PG",
            "display_name": "Aaron Digulla",
            "link": "https:\/\/stackoverflow.com\/users\/34088\/aaron-digulla"
        },
        "is_accepted": false,
        "score": 36,
        "last_activity_date": 1329743235,
        "last_edit_date": 1329743235.0,
        "creation_date": 1225801672,
        "answer_id": 261719,
        "question_id": 261638,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Is your employer aware that he can &quot;steal&quot; back any ideas that other people get from your code? I mean, if they can read your work, so can you theirs. Maybe looking at how you can benefit from the situation would yield a better return of your investment than fearing how much you could lose.\r\n\r\n[EDIT] Answer to Nick&#39;s comment:\r\n\r\nNothing gained and nothing lost. The customer has what he wants (and paid for it since he did the change himself). Since he doesn&#39;t release the change, it&#39;s as if it didn&#39;t happen for everyone else.\r\n\r\nNow if the customer sells the software, they have to change the copyright notice (which is illegal, so you can sue and will win -&gt; simple case).\r\n\r\nIf they don&#39;t change the copyright notice, the 2nd level customers will notice that the software comes from you original and wonder what is going on. Chances are that they will contact you and so you will learn about the reselling of your work.\r\n\r\nAgain we have two cases: The original customer sold only a few copies. That means they didn&#39;t make much money anyway, so why bother. Or they sold in volume. That means better chances for you to learn about what they do and do something about it.\r\n\r\nBut in the end, most companies try to comply to the law (once their reputation is ruined, it&#39;s much harder to do business). So they will not steal your work but work with you to improve it. So if you include the source (with a license that protects you from simple reselling), chances are that they will simply push back changes they made since that will make sure the change is in the next version and they don&#39;t have to maintain it. That&#39;s win-win: You get changes and they can make the change themselves if they really, desperately need it even if you&#39;re unwilling to include it in the official release.",
        "body": "<p>Is your employer aware that he can \"steal\" back any ideas that other people get from your code? I mean, if they can read your work, so can you theirs. Maybe looking at how you can benefit from the situation would yield a better return of your investment than fearing how much you could lose.<\/p>\n\n<p>[EDIT] Answer to Nick's comment:<\/p>\n\n<p>Nothing gained and nothing lost. The customer has what he wants (and paid for it since he did the change himself). Since he doesn't release the change, it's as if it didn't happen for everyone else.<\/p>\n\n<p>Now if the customer sells the software, they have to change the copyright notice (which is illegal, so you can sue and will win -> simple case).<\/p>\n\n<p>If they don't change the copyright notice, the 2nd level customers will notice that the software comes from you original and wonder what is going on. Chances are that they will contact you and so you will learn about the reselling of your work.<\/p>\n\n<p>Again we have two cases: The original customer sold only a few copies. That means they didn't make much money anyway, so why bother. Or they sold in volume. That means better chances for you to learn about what they do and do something about it.<\/p>\n\n<p>But in the end, most companies try to comply to the law (once their reputation is ruined, it's much harder to do business). So they will not steal your work but work with you to improve it. So if you include the source (with a license that protects you from simple reselling), chances are that they will simply push back changes they made since that will make sure the change is in the next version and they don't have to maintain it. That's win-win: You get changes and they can make the change themselves if they really, desperately need it even if you're unwilling to include it in the official release.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 118444,
            "reputation": 20546,
            "user_id": 309483,
            "user_type": "registered",
            "accept_rate": 88,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/d797538504a367f277d19bd8369e9a19?s=256&d=identicon&r=PG",
            "display_name": "Janus Troelsen",
            "link": "https:\/\/stackoverflow.com\/users\/309483\/janus-troelsen"
        },
        "is_accepted": false,
        "score": 36,
        "last_activity_date": 1678357326,
        "last_edit_date": 1678357326.0,
        "creation_date": 1330378506,
        "answer_id": 9472647,
        "question_id": 5607551,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Python 3:\r\n\r\n[`urllib.parse.quote_plus(string, safe=&#39;&#39;, encoding=None, errors=None)`](http:\/\/docs.python.org\/py3k\/library\/urllib.parse.html?highlight=urllib#urllib.parse.quote_plus)",
        "body": "<p>Python 3:<\/p>\n<p><a href=\"http:\/\/docs.python.org\/py3k\/library\/urllib.parse.html?highlight=urllib#urllib.parse.quote_plus\" rel=\"nofollow noreferrer\"><code>urllib.parse.quote_plus(string, safe='', encoding=None, errors=None)<\/code><\/a><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1797094,
            "reputation": 918,
            "user_id": 1636289,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/7It3n.gif?s=256&g=1",
            "display_name": "F1Rumors",
            "link": "https:\/\/stackoverflow.com\/users\/1636289\/f1rumors"
        },
        "is_accepted": false,
        "score": 36,
        "last_activity_date": 1451428851,
        "last_edit_date": 1451428851.0,
        "creation_date": 1436988484,
        "answer_id": 31439372,
        "question_id": 9835762,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "I came across this question whilst looking in to something related - and wonder why no-one offered a generator based solution?  Solving this problem would be:\r\n\r\n    &gt;&gt;&gt; print list(getDupes_9([1,2,3,2,1,5,6,5,5,5]))\r\n    [1, 2, 5]\r\nI was concerned with scalability, so tested several approaches, including naive items that work well on small lists, but scale horribly as lists get larger (note- would have been better to use timeit, but this is illustrative).\r\n\r\nI included @moooeeeep for comparison (it is impressively fast: fastest if the input list is completely random) and an itertools approach that is even faster again for mostly sorted lists...  Now includes pandas approach from @firelynx -- slow, but not horribly so, and simple. Note - sort\/tee\/zip approach is consistently fastest on my machine for large mostly ordered lists, moooeeeep is fastest for shuffled lists, but your mileage may vary.\r\n\r\n**Advantages**\r\n\r\n - very quick simple to test for &#39;any&#39; duplicates using the same code\r\n\r\n**Assumptions**\r\n\r\n - Duplicates should be reported once only\r\n - Duplicate order does not need to be preserved\r\n - Duplicate might be anywhere in the list\r\n\r\n---\r\nFastest solution, 1m entries:\r\n\r\n    def getDupes(c):\r\n\t\t\t&#39;&#39;&#39;sort\/tee\/izip&#39;&#39;&#39;\r\n\t\t\ta, b = itertools.tee(sorted(c))\r\n\t\t\tnext(b, None)\r\n\t\t\tr = None\r\n\t\t\tfor k, g in itertools.izip(a, b):\r\n\t\t\t\tif k != g: continue\r\n\t\t\t\tif k != r:\r\n\t\t\t\t\tyield k\r\n\t\t\t\t\tr = k\r\n\r\n---\r\n\r\n**Approaches tested**\r\n\r\n    import itertools\r\n\timport time\r\n\timport random\r\n\r\n\tdef getDupes_1(c):\r\n\t\t&#39;&#39;&#39;naive&#39;&#39;&#39;\r\n\t\tfor i in xrange(0, len(c)):\r\n\t\t\tif c[i] in c[:i]:\r\n\t\t\t\tyield c[i]\r\n\r\n\tdef getDupes_2(c):\r\n\t\t&#39;&#39;&#39;set len change&#39;&#39;&#39;\r\n\t\ts = set()\r\n\t\tfor i in c:\r\n\t\t\tl = len(s)\r\n\t\t\ts.add(i)\r\n\t\t\tif len(s) == l:\r\n\t\t\t\tyield i\r\n\r\n\tdef getDupes_3(c):\r\n\t\t&#39;&#39;&#39;in dict&#39;&#39;&#39;\r\n\t\td = {}\r\n\t\tfor i in c:\r\n\t\t\tif i in d:\r\n\t\t\t\tif d[i]:\r\n\t\t\t\t\tyield i\r\n\t\t\t\t\td[i] = False\r\n\t\t\telse:\r\n\t\t\t\td[i] = True\r\n\r\n\tdef getDupes_4(c):\r\n\t\t&#39;&#39;&#39;in set&#39;&#39;&#39;\r\n\t\ts,r = set(),set()\r\n\t\tfor i in c:\r\n\t\t\tif i not in s:\r\n\t\t\t\ts.add(i)\r\n\t\t\telif i not in r:\r\n\t\t\t\tr.add(i)\r\n\t\t\t\tyield i\r\n\r\n\tdef getDupes_5(c):\r\n\t\t&#39;&#39;&#39;sort\/adjacent&#39;&#39;&#39;\r\n\t\tc = sorted(c)\r\n\t\tr = None\r\n\t\tfor i in xrange(1, len(c)):\r\n\t\t\tif c[i] == c[i - 1]:\r\n\t\t\t\tif c[i] != r:\r\n\t\t\t\t\tyield c[i]\r\n\t\t\t\t\tr = c[i]\r\n\r\n\tdef getDupes_6(c):\r\n\t\t&#39;&#39;&#39;sort\/groupby&#39;&#39;&#39;\r\n\t\tdef multiple(x):\r\n\t\t\ttry:\r\n\t\t\t\tx.next()\r\n\t\t\t\tx.next()\r\n\t\t\t\treturn True\r\n\t\t\texcept:\r\n\t\t\t\treturn False\r\n\t\tfor k, g in itertools.ifilter(lambda x: multiple(x[1]), itertools.groupby(sorted(c))):\r\n\t\t\tyield k\r\n\r\n\tdef getDupes_7(c):\r\n\t\t&#39;&#39;&#39;sort\/zip&#39;&#39;&#39;\r\n\t\tc = sorted(c)\r\n\t\tr = None\r\n\t\tfor k, g in zip(c[:-1],c[1:]):\r\n\t\t\tif k == g:\r\n\t\t\t\tif k != r:\r\n\t\t\t\t\tyield k\r\n\t\t\t\t\tr = k\r\n\r\n\tdef getDupes_8(c):\r\n\t\t&#39;&#39;&#39;sort\/izip&#39;&#39;&#39;\r\n\t\tc = sorted(c)\r\n\t\tr = None\r\n\t\tfor k, g in itertools.izip(c[:-1],c[1:]):\r\n\t\t\tif k == g:\r\n\t\t\t\tif k != r:\r\n\t\t\t\t\tyield k\r\n\t\t\t\t\tr = k\r\n\r\n\tdef getDupes_9(c):\r\n\t\t&#39;&#39;&#39;sort\/tee\/izip&#39;&#39;&#39;\r\n\t\ta, b = itertools.tee(sorted(c))\r\n\t\tnext(b, None)\r\n\t\tr = None\r\n\t\tfor k, g in itertools.izip(a, b):\r\n\t\t\tif k != g: continue\r\n\t\t\tif k != r:\r\n\t\t\t\tyield k\r\n\t\t\t\tr = k\r\n\r\n\tdef getDupes_a(l):\r\n\t\t&#39;&#39;&#39;moooeeeep&#39;&#39;&#39;\r\n\t\tseen = set()\r\n\t\tseen_add = seen.add\r\n\t\t# adds all elements it doesn&#39;t know yet to seen and all other to seen_twice\r\n\t\tfor x in l:\r\n\t\t\tif x in seen or seen_add(x):\r\n\t\t\t\tyield x\r\n\r\n\tdef getDupes_b(x):\r\n\t\t&#39;&#39;&#39;iter*\/sorted&#39;&#39;&#39;\r\n\t\tx = sorted(x)\r\n\t\tdef _matches():\r\n\t\t\tfor k,g in itertools.izip(x[:-1],x[1:]):\r\n\t\t\t\tif k == g:\r\n\t\t\t\t\tyield k\r\n\t\tfor k, n in itertools.groupby(_matches()):\r\n\t\t\tyield k\r\n\r\n\tdef getDupes_c(a):\r\n\t\t&#39;&#39;&#39;pandas&#39;&#39;&#39;\r\n\t\timport pandas as pd\r\n\t\tvc = pd.Series(a).value_counts()\r\n\t\ti = vc[vc &gt; 1].index\r\n\t\tfor _ in i:\r\n\t\t\tyield _\r\n\r\n\tdef hasDupes(fn,c):\r\n\t\ttry:\r\n\t\t\tif fn(c).next(): return True    # Found a dupe\r\n\t\texcept StopIteration:\r\n\t\t\tpass\r\n\t\treturn False\r\n\r\n\tdef getDupes(fn,c):\r\n\t\treturn list(fn(c))\r\n\r\n\tSTABLE = True\r\n\tif STABLE:\r\n\t\tprint &#39;Finding FIRST then ALL duplicates, single dupe of &quot;nth&quot; placed element in 1m element array&#39;\r\n\telse:\r\n\t\tprint &#39;Finding FIRST then ALL duplicates, single dupe of &quot;n&quot; included in randomised 1m element array&#39;\r\n\tfor location in (50,250000,500000,750000,999999):\r\n\t\tfor test in (getDupes_2, getDupes_3, getDupes_4, getDupes_5, getDupes_6,\r\n\t\t\t\t\t getDupes_8, getDupes_9, getDupes_a, getDupes_b, getDupes_c):\r\n\t\t\tprint &#39;Test %-15s:%10d - &#39;%(test.__doc__ or test.__name__,location),\r\n\t\t\tdeltas = []\r\n\t\t\tfor FIRST in (True,False):\r\n\t\t\t\tfor i in xrange(0, 5):\r\n\t\t\t\t\tc = range(0,1000000)\r\n\t\t\t\t\tif STABLE:\r\n\t\t\t\t\t\tc[0] = location\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tc.append(location)\r\n\t\t\t\t\t\trandom.shuffle(c)\r\n\t\t\t\t\tstart = time.time()\r\n\t\t\t\t\tif FIRST:\r\n\t\t\t\t\t\tprint &#39;.&#39; if location == test(c).next() else &#39;!&#39;,\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tprint &#39;.&#39; if [location] == list(test(c)) else &#39;!&#39;,\r\n\t\t\t\t\tdeltas.append(time.time()-start)\r\n\t\t\t\tprint &#39; -- %0.3f  &#39;%(sum(deltas)\/len(deltas)),\r\n\t\t\tprint\r\n\t\tprint\r\n\r\n\r\nThe results for the &#39;all dupes&#39; test were consistent, finding &quot;first&quot; duplicate then &quot;all&quot; duplicates in this array:\r\n\r\n    Finding FIRST then ALL duplicates, single dupe of &quot;nth&quot; placed element in 1m element array\r\n\tTest set len change :    500000 -  . . . . .  -- 0.264   . . . . .  -- 0.402  \r\n\tTest in dict        :    500000 -  . . . . .  -- 0.163   . . . . .  -- 0.250  \r\n\tTest in set         :    500000 -  . . . . .  -- 0.163   . . . . .  -- 0.249  \r\n\tTest sort\/adjacent  :    500000 -  . . . . .  -- 0.159   . . . . .  -- 0.229  \r\n\tTest sort\/groupby   :    500000 -  . . . . .  -- 0.860   . . . . .  -- 1.286  \r\n\tTest sort\/izip      :    500000 -  . . . . .  -- 0.165   . . . . .  -- 0.229  \r\n\tTest sort\/tee\/izip  :    500000 -  . . . . .  -- 0.145   . . . . .  -- 0.206  *\r\n\tTest moooeeeep      :    500000 -  . . . . .  -- 0.149   . . . . .  -- 0.232  \r\n\tTest iter*\/sorted   :    500000 -  . . . . .  -- 0.160   . . . . .  -- 0.221  \r\n\tTest pandas         :    500000 -  . . . . .  -- 0.493   . . . . .  -- 0.499  \r\n\r\nWhen the lists are shuffled first, the price of the sort becomes apparent - the efficiency drops noticeably and the @moooeeeep approach dominates, with set &amp; dict approaches being similar but lessor performers:\r\n\r\n    Finding FIRST then ALL duplicates, single dupe of &quot;n&quot; included in randomised 1m element array\r\n    Test set len change :    500000 -  . . . . .  -- 0.321   . . . . .  -- 0.473  \r\n    Test in dict        :    500000 -  . . . . .  -- 0.285   . . . . .  -- 0.360  \r\n    Test in set         :    500000 -  . . . . .  -- 0.309   . . . . .  -- 0.365  \r\n    Test sort\/adjacent  :    500000 -  . . . . .  -- 0.756   . . . . .  -- 0.823  \r\n    Test sort\/groupby   :    500000 -  . . . . .  -- 1.459   . . . . .  -- 1.896  \r\n    Test sort\/izip      :    500000 -  . . . . .  -- 0.786   . . . . .  -- 0.845  \r\n    Test sort\/tee\/izip  :    500000 -  . . . . .  -- 0.743   . . . . .  -- 0.804  \r\n    Test moooeeeep      :    500000 -  . . . . .  -- 0.234   . . . . .  -- 0.311  *\r\n    Test iter*\/sorted   :    500000 -  . . . . .  -- 0.776   . . . . .  -- 0.840  \r\n    Test pandas         :    500000 -  . . . . .  -- 0.539   . . . . .  -- 0.540  \r\n",
        "body": "<p>I came across this question whilst looking in to something related - and wonder why no-one offered a generator based solution?  Solving this problem would be:<\/p>\n\n<pre><code>&gt;&gt;&gt; print list(getDupes_9([1,2,3,2,1,5,6,5,5,5]))\n[1, 2, 5]\n<\/code><\/pre>\n\n<p>I was concerned with scalability, so tested several approaches, including naive items that work well on small lists, but scale horribly as lists get larger (note- would have been better to use timeit, but this is illustrative).<\/p>\n\n<p>I included @moooeeeep for comparison (it is impressively fast: fastest if the input list is completely random) and an itertools approach that is even faster again for mostly sorted lists...  Now includes pandas approach from @firelynx -- slow, but not horribly so, and simple. Note - sort\/tee\/zip approach is consistently fastest on my machine for large mostly ordered lists, moooeeeep is fastest for shuffled lists, but your mileage may vary.<\/p>\n\n<p><strong>Advantages<\/strong><\/p>\n\n<ul>\n<li>very quick simple to test for 'any' duplicates using the same code<\/li>\n<\/ul>\n\n<p><strong>Assumptions<\/strong><\/p>\n\n<ul>\n<li>Duplicates should be reported once only<\/li>\n<li>Duplicate order does not need to be preserved<\/li>\n<li>Duplicate might be anywhere in the list<\/li>\n<\/ul>\n\n<hr>\n\n<p>Fastest solution, 1m entries:<\/p>\n\n<pre><code>def getDupes(c):\n        '''sort\/tee\/izip'''\n        a, b = itertools.tee(sorted(c))\n        next(b, None)\n        r = None\n        for k, g in itertools.izip(a, b):\n            if k != g: continue\n            if k != r:\n                yield k\n                r = k\n<\/code><\/pre>\n\n<hr>\n\n<p><strong>Approaches tested<\/strong><\/p>\n\n<pre><code>import itertools\nimport time\nimport random\n\ndef getDupes_1(c):\n    '''naive'''\n    for i in xrange(0, len(c)):\n        if c[i] in c[:i]:\n            yield c[i]\n\ndef getDupes_2(c):\n    '''set len change'''\n    s = set()\n    for i in c:\n        l = len(s)\n        s.add(i)\n        if len(s) == l:\n            yield i\n\ndef getDupes_3(c):\n    '''in dict'''\n    d = {}\n    for i in c:\n        if i in d:\n            if d[i]:\n                yield i\n                d[i] = False\n        else:\n            d[i] = True\n\ndef getDupes_4(c):\n    '''in set'''\n    s,r = set(),set()\n    for i in c:\n        if i not in s:\n            s.add(i)\n        elif i not in r:\n            r.add(i)\n            yield i\n\ndef getDupes_5(c):\n    '''sort\/adjacent'''\n    c = sorted(c)\n    r = None\n    for i in xrange(1, len(c)):\n        if c[i] == c[i - 1]:\n            if c[i] != r:\n                yield c[i]\n                r = c[i]\n\ndef getDupes_6(c):\n    '''sort\/groupby'''\n    def multiple(x):\n        try:\n            x.next()\n            x.next()\n            return True\n        except:\n            return False\n    for k, g in itertools.ifilter(lambda x: multiple(x[1]), itertools.groupby(sorted(c))):\n        yield k\n\ndef getDupes_7(c):\n    '''sort\/zip'''\n    c = sorted(c)\n    r = None\n    for k, g in zip(c[:-1],c[1:]):\n        if k == g:\n            if k != r:\n                yield k\n                r = k\n\ndef getDupes_8(c):\n    '''sort\/izip'''\n    c = sorted(c)\n    r = None\n    for k, g in itertools.izip(c[:-1],c[1:]):\n        if k == g:\n            if k != r:\n                yield k\n                r = k\n\ndef getDupes_9(c):\n    '''sort\/tee\/izip'''\n    a, b = itertools.tee(sorted(c))\n    next(b, None)\n    r = None\n    for k, g in itertools.izip(a, b):\n        if k != g: continue\n        if k != r:\n            yield k\n            r = k\n\ndef getDupes_a(l):\n    '''moooeeeep'''\n    seen = set()\n    seen_add = seen.add\n    # adds all elements it doesn't know yet to seen and all other to seen_twice\n    for x in l:\n        if x in seen or seen_add(x):\n            yield x\n\ndef getDupes_b(x):\n    '''iter*\/sorted'''\n    x = sorted(x)\n    def _matches():\n        for k,g in itertools.izip(x[:-1],x[1:]):\n            if k == g:\n                yield k\n    for k, n in itertools.groupby(_matches()):\n        yield k\n\ndef getDupes_c(a):\n    '''pandas'''\n    import pandas as pd\n    vc = pd.Series(a).value_counts()\n    i = vc[vc &gt; 1].index\n    for _ in i:\n        yield _\n\ndef hasDupes(fn,c):\n    try:\n        if fn(c).next(): return True    # Found a dupe\n    except StopIteration:\n        pass\n    return False\n\ndef getDupes(fn,c):\n    return list(fn(c))\n\nSTABLE = True\nif STABLE:\n    print 'Finding FIRST then ALL duplicates, single dupe of \"nth\" placed element in 1m element array'\nelse:\n    print 'Finding FIRST then ALL duplicates, single dupe of \"n\" included in randomised 1m element array'\nfor location in (50,250000,500000,750000,999999):\n    for test in (getDupes_2, getDupes_3, getDupes_4, getDupes_5, getDupes_6,\n                 getDupes_8, getDupes_9, getDupes_a, getDupes_b, getDupes_c):\n        print 'Test %-15s:%10d - '%(test.__doc__ or test.__name__,location),\n        deltas = []\n        for FIRST in (True,False):\n            for i in xrange(0, 5):\n                c = range(0,1000000)\n                if STABLE:\n                    c[0] = location\n                else:\n                    c.append(location)\n                    random.shuffle(c)\n                start = time.time()\n                if FIRST:\n                    print '.' if location == test(c).next() else '!',\n                else:\n                    print '.' if [location] == list(test(c)) else '!',\n                deltas.append(time.time()-start)\n            print ' -- %0.3f  '%(sum(deltas)\/len(deltas)),\n        print\n    print\n<\/code><\/pre>\n\n<p>The results for the 'all dupes' test were consistent, finding \"first\" duplicate then \"all\" duplicates in this array:<\/p>\n\n<pre><code>Finding FIRST then ALL duplicates, single dupe of \"nth\" placed element in 1m element array\nTest set len change :    500000 -  . . . . .  -- 0.264   . . . . .  -- 0.402  \nTest in dict        :    500000 -  . . . . .  -- 0.163   . . . . .  -- 0.250  \nTest in set         :    500000 -  . . . . .  -- 0.163   . . . . .  -- 0.249  \nTest sort\/adjacent  :    500000 -  . . . . .  -- 0.159   . . . . .  -- 0.229  \nTest sort\/groupby   :    500000 -  . . . . .  -- 0.860   . . . . .  -- 1.286  \nTest sort\/izip      :    500000 -  . . . . .  -- 0.165   . . . . .  -- 0.229  \nTest sort\/tee\/izip  :    500000 -  . . . . .  -- 0.145   . . . . .  -- 0.206  *\nTest moooeeeep      :    500000 -  . . . . .  -- 0.149   . . . . .  -- 0.232  \nTest iter*\/sorted   :    500000 -  . . . . .  -- 0.160   . . . . .  -- 0.221  \nTest pandas         :    500000 -  . . . . .  -- 0.493   . . . . .  -- 0.499  \n<\/code><\/pre>\n\n<p>When the lists are shuffled first, the price of the sort becomes apparent - the efficiency drops noticeably and the @moooeeeep approach dominates, with set &amp; dict approaches being similar but lessor performers:<\/p>\n\n<pre><code>Finding FIRST then ALL duplicates, single dupe of \"n\" included in randomised 1m element array\nTest set len change :    500000 -  . . . . .  -- 0.321   . . . . .  -- 0.473  \nTest in dict        :    500000 -  . . . . .  -- 0.285   . . . . .  -- 0.360  \nTest in set         :    500000 -  . . . . .  -- 0.309   . . . . .  -- 0.365  \nTest sort\/adjacent  :    500000 -  . . . . .  -- 0.756   . . . . .  -- 0.823  \nTest sort\/groupby   :    500000 -  . . . . .  -- 1.459   . . . . .  -- 1.896  \nTest sort\/izip      :    500000 -  . . . . .  -- 0.786   . . . . .  -- 0.845  \nTest sort\/tee\/izip  :    500000 -  . . . . .  -- 0.743   . . . . .  -- 0.804  \nTest moooeeeep      :    500000 -  . . . . .  -- 0.234   . . . . .  -- 0.311  *\nTest iter*\/sorted   :    500000 -  . . . . .  -- 0.776   . . . . .  -- 0.840  \nTest pandas         :    500000 -  . . . . .  -- 0.539   . . . . .  -- 0.540  \n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5272788,
            "reputation": 469,
            "user_id": 4210571,
            "user_type": "registered",
            "profile_image": "https:\/\/graph.facebook.com\/751745360\/picture?type=large",
            "display_name": "Mudit Verma",
            "link": "https:\/\/stackoverflow.com\/users\/4210571\/mudit-verma"
        },
        "is_accepted": false,
        "score": 36,
        "last_activity_date": 1504674720,
        "last_edit_date": 1504674720.0,
        "creation_date": 1450359140,
        "answer_id": 34335873,
        "question_id": 9663562,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "`__call__` makes the instance of a class callable. \r\nWhy would it be required?  \r\n\r\nTechnically `__init__` is called once by `__new__` when object is created, so that it can be initialized. \r\n\r\nBut there are many scenarios where you might want to redefine your object, say you are done with your object, and may find a need for a new object. With `__call__` you can redefine the same object as if it were new. \r\n\r\nThis is just one case, there can be many more. \r\n",
        "body": "<p><code>__call__<\/code> makes the instance of a class callable. \nWhy would it be required?  <\/p>\n\n<p>Technically <code>__init__<\/code> is called once by <code>__new__<\/code> when object is created, so that it can be initialized. <\/p>\n\n<p>But there are many scenarios where you might want to redefine your object, say you are done with your object, and may find a need for a new object. With <code>__call__<\/code> you can redefine the same object as if it were new. <\/p>\n\n<p>This is just one case, there can be many more. <\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 48872,
            "reputation": 11000,
            "user_id": 145349,
            "user_type": "registered",
            "accept_rate": 87,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/ae23b47de29112b26cccb1a1e51ad3e4?s=256&d=identicon&r=PG",
            "display_name": "fjsj",
            "link": "https:\/\/stackoverflow.com\/users\/145349\/fjsj"
        },
        "is_accepted": false,
        "score": 36,
        "last_activity_date": 1523727530,
        "last_edit_date": 1523727530.0,
        "creation_date": 1513358693,
        "answer_id": 47837132,
        "question_id": 39980323,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Update:\r\nGuido van Rossum [announced on the mailing list](https:\/\/mail.python.org\/pipermail\/python-dev\/2017-December\/151283.html) that as of Python 3.7 `dict`s in all Python implementations must preserve insertion order.",
        "body": "<p>Update:\nGuido van Rossum <a href=\"https:\/\/mail.python.org\/pipermail\/python-dev\/2017-December\/151283.html\" rel=\"noreferrer\">announced on the mailing list<\/a> that as of Python 3.7 <code>dict<\/code>s in all Python implementations must preserve insertion order.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1213939,
            "reputation": 11849,
            "user_id": 1181911,
            "user_type": "registered",
            "accept_rate": 82,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/72ae7dcebbde5909755f0a6a1ab17ba8?s=256&d=identicon&r=PG",
            "display_name": "Sam",
            "link": "https:\/\/stackoverflow.com\/users\/1181911\/sam"
        },
        "is_accepted": false,
        "score": 36,
        "last_activity_date": 1526947549,
        "last_edit_date": null,
        "creation_date": 1526947549,
        "answer_id": 50458037,
        "question_id": 47068709,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "# CPU optimization with GPU\r\nThere are performance gains you can get by installing TensorFlow from the source even if you have a GPU and use it for training and inference.  The reason is that some TF operations only have CPU implementation and cannot run on your GPU.\r\n\r\nAlso, there are some performance enhancement tips that makes good use of your CPU.  [TensorFlow&#39;s performance guide][pg] recommends the following:\r\n\r\n&gt; Placing input pipeline operations on the CPU can significantly improve performance. Utilizing the CPU for the input pipeline frees the GPU to focus on training.\r\n\r\nFor best performance, you should write your code to utilize your CPU and GPU to work in tandem, and not dump it all on your GPU if you have one. \r\n Having your TensorFlow binaries optimized for your CPU could pay off hours of saved running time and you have to do it once.\r\n\r\n\r\n\r\n\r\n[pg]: https:\/\/www.tensorflow.org\/performance\/performance_guide\r\n",
        "body": "<h1>CPU optimization with GPU<\/h1>\n\n<p>There are performance gains you can get by installing TensorFlow from the source even if you have a GPU and use it for training and inference.  The reason is that some TF operations only have CPU implementation and cannot run on your GPU.<\/p>\n\n<p>Also, there are some performance enhancement tips that makes good use of your CPU.  <a href=\"https:\/\/www.tensorflow.org\/performance\/performance_guide\" rel=\"noreferrer\">TensorFlow's performance guide<\/a> recommends the following:<\/p>\n\n<blockquote>\n  <p>Placing input pipeline operations on the CPU can significantly improve performance. Utilizing the CPU for the input pipeline frees the GPU to focus on training.<\/p>\n<\/blockquote>\n\n<p>For best performance, you should write your code to utilize your CPU and GPU to work in tandem, and not dump it all on your GPU if you have one. \n Having your TensorFlow binaries optimized for your CPU could pay off hours of saved running time and you have to do it once.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 142572,
            "reputation": 36257,
            "user_id": 350351,
            "user_type": "registered",
            "accept_rate": 85,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/b1a41bbf4677c8961237c4d147e764d6?s=256&d=identicon&r=PG",
            "display_name": "Daenyth",
            "link": "https:\/\/stackoverflow.com\/users\/350351\/daenyth"
        },
        "is_accepted": false,
        "score": 35,
        "last_activity_date": 1578414643,
        "last_edit_date": 1578414643.0,
        "creation_date": 1306356709,
        "answer_id": 6130787,
        "question_id": 6130768,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Use [`dict.get`](http:\/\/docs.python.org\/library\/stdtypes.html#dict.get)\r\n\r\nReturns the value for key if key is in the dictionary, else default. If default is not given, it defaults to None, so that this method never raises a KeyError.\r\n\r\n",
        "body": "<p>Use <a href=\"http:\/\/docs.python.org\/library\/stdtypes.html#dict.get\" rel=\"noreferrer\"><code>dict.get<\/code><\/a><\/p>\n\n<p>Returns the value for key if key is in the dictionary, else default. If default is not given, it defaults to None, so that this method never raises a KeyError.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 322859,
            "reputation": 3895,
            "user_id": 642511,
            "user_type": "registered",
            "accept_rate": 71,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/19207a4322fa32cad703208d457673e3?s=256&d=identicon&r=PG",
            "display_name": "dusktreader",
            "link": "https:\/\/stackoverflow.com\/users\/642511\/dusktreader"
        },
        "is_accepted": false,
        "score": 35,
        "last_activity_date": 1575541599,
        "last_edit_date": 1575541599.0,
        "creation_date": 1306356724,
        "answer_id": 6130791,
        "question_id": 6130768,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "You should use the `get()` method from the `dict` class\r\n\r\n    d = {}\r\n    r = d.get(&#39;missing_key&#39;, None)\r\n\r\nThis will result in `r == None`.  If the key isn&#39;t found in the dictionary, the get function returns the second argument.",
        "body": "<p>You should use the <code>get()<\/code> method from the <code>dict<\/code> class<\/p>\n\n<pre><code>d = {}\nr = d.get('missing_key', None)\n<\/code><\/pre>\n\n<p>This will result in <code>r == None<\/code>.  If the key isn't found in the dictionary, the get function returns the second argument.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 113371,
            "reputation": 100018,
            "user_id": 298607,
            "user_type": "registered",
            "accept_rate": 88,
            "profile_image": "https:\/\/i.stack.imgur.com\/DVW9g.jpg?s=256&g=1",
            "display_name": "dawg",
            "link": "https:\/\/stackoverflow.com\/users\/298607\/dawg"
        },
        "is_accepted": false,
        "score": 35,
        "last_activity_date": 1418832804,
        "last_edit_date": 1418832804.0,
        "creation_date": 1336199397,
        "answer_id": 10459488,
        "question_id": 10458437,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "You asked: &#39;Are there any applicable differences between dict.items() and dict.iteritems()&#39;\r\n\r\nThis may help (for Python 2.x):\r\n\r\n\r\n    &gt;&gt;&gt; d={1:&#39;one&#39;,2:&#39;two&#39;,3:&#39;three&#39;}\r\n    &gt;&gt;&gt; type(d.items())\r\n    &lt;type &#39;list&#39;&gt;\r\n    &gt;&gt;&gt; type(d.iteritems())\r\n    &lt;type &#39;dictionary-itemiterator&#39;&gt;\r\n\r\nYou can see that `d.items()` returns a list of tuples of the key, value pairs and `d.iteritems()` returns a dictionary-itemiterator.\r\n\r\nAs a list, d.items() is slice-able:\r\n\r\n    &gt;&gt;&gt; l1=d.items()[0]\r\n    &gt;&gt;&gt; l1\r\n    (1, &#39;one&#39;)   # an unordered value!\r\n\r\nBut would not have an `__iter__` method:\r\n\r\n    &gt;&gt;&gt; next(d.items())\r\n    Traceback (most recent call last):\r\n      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\r\n    TypeError: list object is not an iterator\r\n\r\nAs an iterator, d.iteritems() is **not** slice-able:\r\n\r\n    &gt;&gt;&gt; i1=d.iteritems()[0]\r\n    Traceback (most recent call last):\r\n      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\r\n    TypeError: &#39;dictionary-itemiterator&#39; object is not subscriptable\r\n\r\nBut does have `__iter__`:\r\n\r\n    &gt;&gt;&gt; next(d.iteritems())\r\n    (1, &#39;one&#39;)               # an unordered value!\r\n  \r\n\r\nSo the items themselves are same -- the container delivering the items are different. One is a list, the other an iterator (depending on the Python version...) \r\n\r\nSo the applicable differences between dict.items() and dict.iteritems() are the same as the applicable differences between a list and an iterator. \r\n",
        "body": "<p>You asked: 'Are there any applicable differences between dict.items() and dict.iteritems()'<\/p>\n\n<p>This may help (for Python 2.x):<\/p>\n\n<pre><code>&gt;&gt;&gt; d={1:'one',2:'two',3:'three'}\n&gt;&gt;&gt; type(d.items())\n&lt;type 'list'&gt;\n&gt;&gt;&gt; type(d.iteritems())\n&lt;type 'dictionary-itemiterator'&gt;\n<\/code><\/pre>\n\n<p>You can see that <code>d.items()<\/code> returns a list of tuples of the key, value pairs and <code>d.iteritems()<\/code> returns a dictionary-itemiterator.<\/p>\n\n<p>As a list, d.items() is slice-able:<\/p>\n\n<pre><code>&gt;&gt;&gt; l1=d.items()[0]\n&gt;&gt;&gt; l1\n(1, 'one')   # an unordered value!\n<\/code><\/pre>\n\n<p>But would not have an <code>__iter__<\/code> method:<\/p>\n\n<pre><code>&gt;&gt;&gt; next(d.items())\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: list object is not an iterator\n<\/code><\/pre>\n\n<p>As an iterator, d.iteritems() is <strong>not<\/strong> slice-able:<\/p>\n\n<pre><code>&gt;&gt;&gt; i1=d.iteritems()[0]\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: 'dictionary-itemiterator' object is not subscriptable\n<\/code><\/pre>\n\n<p>But does have <code>__iter__<\/code>:<\/p>\n\n<pre><code>&gt;&gt;&gt; next(d.iteritems())\n(1, 'one')               # an unordered value!\n<\/code><\/pre>\n\n<p>So the items themselves are same -- the container delivering the items are different. One is a list, the other an iterator (depending on the Python version...) <\/p>\n\n<p>So the applicable differences between dict.items() and dict.iteritems() are the same as the applicable differences between a list and an iterator. <\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1510415,
            "reputation": 2092,
            "user_id": 1412689,
            "user_type": "registered",
            "accept_rate": 80,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/591e95e607966eb156388e578a5e06e0?s=256&d=identicon&r=PG",
            "display_name": "Andr&#233;",
            "link": "https:\/\/stackoverflow.com\/users\/1412689\/andr%c3%a9"
        },
        "is_accepted": false,
        "score": 35,
        "last_activity_date": 1349289542,
        "last_edit_date": null,
        "creation_date": 1349289542,
        "answer_id": 12714734,
        "question_id": 5420789,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "For Python 3 you should use `sudo apt-get install libpq-dev python3-dev` under Debian.",
        "body": "<p>For Python 3 you should use <code>sudo apt-get install libpq-dev python3-dev<\/code> under Debian.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1258414,
            "reputation": 1685,
            "user_id": 1217371,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/4e9fc858d619ac2783c44e081641cca9?s=256&d=identicon&r=PG",
            "display_name": "Connie Hilarides",
            "link": "https:\/\/stackoverflow.com\/users\/1217371\/connie-hilarides"
        },
        "is_accepted": false,
        "score": 35,
        "last_activity_date": 1381553329,
        "last_edit_date": 1381553329.0,
        "creation_date": 1381553023,
        "answer_id": 19330617,
        "question_id": 6964392,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Your Haskell implementation could be greatly sped up by using some functions from Haskell packages.\r\nIn this case I used primes, which is just installed with &#39;cabal install primes&#39; ;)\r\n\r\n    import Data.Numbers.Primes\r\n    import Data.List\r\n\r\n    triangleNumbers = scanl1 (+) [1..]\r\n    nDivisors n = product $ map ((+1) . length) (group (primeFactors n))\r\n    answer = head $ filter ((&gt; 500) . nDivisors) triangleNumbers\r\n\r\n    main :: IO ()\r\n    main = putStrLn $ &quot;First triangle number to have over 500 divisors: &quot; ++ (show answer)\r\n\r\nTimings:\r\n\r\nYour original program:\r\n\r\n    PS&gt; measure-command { bin\\012_slow.exe }\r\n\r\n    TotalSeconds      : 16.3807409\r\n    TotalMilliseconds : 16380.7409\r\n\r\nImproved implementation\r\n\r\n    PS&gt; measure-command { bin\\012.exe }\r\n\r\n    TotalSeconds      : 0.0383436\r\n    TotalMilliseconds : 38.3436\r\n\r\nAs you can see, this one runs in 38 milliseconds on the same machine where yours ran in 16 seconds :)\r\n\r\nCompilation commands:\r\n\r\n    ghc -O2 012.hs -o bin\\012.exe\r\n    ghc -O2 012_slow.hs -o bin\\012_slow.exe",
        "body": "<p>Your Haskell implementation could be greatly sped up by using some functions from Haskell packages.\nIn this case I used primes, which is just installed with 'cabal install primes' ;)<\/p>\n\n<pre><code>import Data.Numbers.Primes\nimport Data.List\n\ntriangleNumbers = scanl1 (+) [1..]\nnDivisors n = product $ map ((+1) . length) (group (primeFactors n))\nanswer = head $ filter ((&gt; 500) . nDivisors) triangleNumbers\n\nmain :: IO ()\nmain = putStrLn $ \"First triangle number to have over 500 divisors: \" ++ (show answer)\n<\/code><\/pre>\n\n<p>Timings:<\/p>\n\n<p>Your original program:<\/p>\n\n<pre><code>PS&gt; measure-command { bin\\012_slow.exe }\n\nTotalSeconds      : 16.3807409\nTotalMilliseconds : 16380.7409\n<\/code><\/pre>\n\n<p>Improved implementation<\/p>\n\n<pre><code>PS&gt; measure-command { bin\\012.exe }\n\nTotalSeconds      : 0.0383436\nTotalMilliseconds : 38.3436\n<\/code><\/pre>\n\n<p>As you can see, this one runs in 38 milliseconds on the same machine where yours ran in 16 seconds :)<\/p>\n\n<p>Compilation commands:<\/p>\n\n<pre><code>ghc -O2 012.hs -o bin\\012.exe\nghc -O2 012_slow.hs -o bin\\012_slow.exe\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5659368,
            "reputation": 6644,
            "user_id": 4477461,
            "user_type": "registered",
            "accept_rate": 62,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/d6ab32929180c1c2e352ff59212c2d17?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "Jobin",
            "link": "https:\/\/stackoverflow.com\/users\/4477461\/jobin"
        },
        "is_accepted": false,
        "score": 35,
        "last_activity_date": 1454999194,
        "last_edit_date": null,
        "creation_date": 1454999194,
        "answer_id": 35285296,
        "question_id": 9663562,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "    &gt;&gt;&gt; class A:\r\n    ... \tdef __init__(self):\r\n    ... \t\tprint &quot;From init ... &quot;\r\n    ... \r\n    &gt;&gt;&gt; a = A()\r\n    From init ... \r\n    &gt;&gt;&gt; a()\r\n    Traceback (most recent call last):\r\n      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\r\n    AttributeError: A instance has no __call__ method\r\n    &gt;&gt;&gt; \r\n    &gt;&gt;&gt; class B:\r\n    ... \tdef __init__(self):\r\n    ... \t\tprint &quot;From init ... &quot;\r\n    ... \tdef __call__(self):\r\n    ... \t\tprint &quot;From call ... &quot;\r\n    ... \r\n    &gt;&gt;&gt; b = B()\r\n    From init ... \r\n    &gt;&gt;&gt; b()\r\n    From call ... \r\n    &gt;&gt;&gt; ",
        "body": "<pre><code>&gt;&gt;&gt; class A:\n...     def __init__(self):\n...         print \"From init ... \"\n... \n&gt;&gt;&gt; a = A()\nFrom init ... \n&gt;&gt;&gt; a()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nAttributeError: A instance has no __call__ method\n&gt;&gt;&gt; \n&gt;&gt;&gt; class B:\n...     def __init__(self):\n...         print \"From init ... \"\n...     def __call__(self):\n...         print \"From call ... \"\n... \n&gt;&gt;&gt; b = B()\nFrom init ... \n&gt;&gt;&gt; b()\nFrom call ... \n&gt;&gt;&gt; \n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 6367564,
            "reputation": 1869,
            "user_id": 4941102,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/IpX9J.jpg?s=256&g=1",
            "display_name": "mamal",
            "link": "https:\/\/stackoverflow.com\/users\/4941102\/mamal"
        },
        "is_accepted": false,
        "score": 35,
        "last_activity_date": 1668996011,
        "last_edit_date": 1668996011.0,
        "creation_date": 1596098211,
        "answer_id": 63169309,
        "question_id": 47071256,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Use this code in terminal:\r\n\r\n    python -m pip install --upgrade PACKAGE_NAME\r\n\r\nFor example I want update `pip` package:\r\n\r\n    python -m pip install --upgrade pip\r\n\r\nMore examples:\r\n\r\n    python -m pip install --upgrade selenium\r\n    python -m pip install --upgrade requests\r\n    ...\r\n\r\n",
        "body": "<p>Use this code in terminal:<\/p>\n<pre><code>python -m pip install --upgrade PACKAGE_NAME\n<\/code><\/pre>\n<p>For example I want update <code>pip<\/code> package:<\/p>\n<pre><code>python -m pip install --upgrade pip\n<\/code><\/pre>\n<p>More examples:<\/p>\n<pre><code>python -m pip install --upgrade selenium\npython -m pip install --upgrade requests\n...\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 8083,
            "reputation": 367240,
            "user_id": 14343,
            "user_type": "registered",
            "accept_rate": 78,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/75e9a11371cbe1566607180863efdf4c?s=256&d=identicon&r=PG",
            "display_name": "Ned Batchelder",
            "link": "https:\/\/stackoverflow.com\/users\/14343\/ned-batchelder"
        },
        "is_accepted": false,
        "score": 34,
        "last_activity_date": 1318720162,
        "last_edit_date": null,
        "creation_date": 1318720162,
        "answer_id": 7781271,
        "question_id": 7781260,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "I don&#39;t know exactly what you are doing, but `float(&quot;inf&quot;)` gives you a float Infinity, which is greater than any other number.",
        "body": "<p>I don't know exactly what you are doing, but <code>float(\"inf\")<\/code> gives you a float Infinity, which is greater than any other number.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 7203950,
            "reputation": 441,
            "user_id": 5500240,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/509a47301c0757fa05199f0c5147adb9?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "Alon Galor",
            "link": "https:\/\/stackoverflow.com\/users\/5500240\/alon-galor"
        },
        "is_accepted": false,
        "score": 34,
        "last_activity_date": 1485164768,
        "last_edit_date": 1485164768.0,
        "creation_date": 1446065767,
        "answer_id": 33401452,
        "question_id": 13842088,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "This is the only thing that worked for me!\r\n\r\n    df.loc[&#39;C&#39;, &#39;x&#39;] = 10\r\n\r\nLearn more about `.loc` [here][1].\r\n\r\n\r\n  [1]: http:\/\/pandas.pydata.org\/pandas-docs\/stable\/indexing.html#indexing-view-versus-copy",
        "body": "<p>This is the only thing that worked for me!<\/p>\n\n<pre><code>df.loc['C', 'x'] = 10\n<\/code><\/pre>\n\n<p>Learn more about <code>.loc<\/code> <a href=\"http:\/\/pandas.pydata.org\/pandas-docs\/stable\/indexing.html#indexing-view-versus-copy\" rel=\"noreferrer\">here<\/a>.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 3340023,
            "reputation": 3341,
            "user_id": 2806499,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/ba6565572419ca58dfed2ff025aa123b?s=256&d=identicon&r=PG",
            "display_name": "Arun V Jose",
            "link": "https:\/\/stackoverflow.com\/users\/2806499\/arun-v-jose"
        },
        "is_accepted": false,
        "score": 34,
        "last_activity_date": 1528971864,
        "last_edit_date": 1528971864.0,
        "creation_date": 1477937684,
        "answer_id": 40348063,
        "question_id": 427102,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Slug is a URL friendly short label for specific content. It only contain Letters, Numbers, Underscores or Hyphens. Slugs are commonly save with the respective content and it pass as a URL string.\r\n\r\n\r\nSlug can create using SlugField\r\n\r\nEx:\r\n\r\n    class Article(models.Model):\r\n        title = models.CharField(max_length=100)\r\n        slug = models.SlugField(max_length=100)\r\n\r\n\r\nIf you want to use title as slug, django has a simple function called `slugify`\r\n\r\n    from django.template.defaultfilters import slugify\r\n    \r\n    class Article(models.Model):\r\n        title = models.CharField(max_length=100)\r\n\r\n        def slug(self):\r\n            return slugify(self.title)\r\n\r\nIf it needs uniqueness, add `unique=True` in slug field.\r\n\r\nfor instance, from the previous example:\r\n\r\n    class Article(models.Model):\r\n        title = models.CharField(max_length=100)\r\n        slug = models.SlugField(max_length=100, unique=True)\r\n\r\nAre you lazy to do slug process ? don&#39;t worry, this plugin will help you.\r\n[django-autoslug][1]\r\n\r\n\r\n  [1]: https:\/\/github.com\/neithere\/django-autoslug\r\n",
        "body": "<p>Slug is a URL friendly short label for specific content. It only contain Letters, Numbers, Underscores or Hyphens. Slugs are commonly save with the respective content and it pass as a URL string.<\/p>\n\n<p>Slug can create using SlugField<\/p>\n\n<p>Ex:<\/p>\n\n<pre><code>class Article(models.Model):\n    title = models.CharField(max_length=100)\n    slug = models.SlugField(max_length=100)\n<\/code><\/pre>\n\n<p>If you want to use title as slug, django has a simple function called <code>slugify<\/code><\/p>\n\n<pre><code>from django.template.defaultfilters import slugify\n\nclass Article(models.Model):\n    title = models.CharField(max_length=100)\n\n    def slug(self):\n        return slugify(self.title)\n<\/code><\/pre>\n\n<p>If it needs uniqueness, add <code>unique=True<\/code> in slug field.<\/p>\n\n<p>for instance, from the previous example:<\/p>\n\n<pre><code>class Article(models.Model):\n    title = models.CharField(max_length=100)\n    slug = models.SlugField(max_length=100, unique=True)\n<\/code><\/pre>\n\n<p>Are you lazy to do slug process ? don't worry, this plugin will help you.\n<a href=\"https:\/\/github.com\/neithere\/django-autoslug\" rel=\"noreferrer\">django-autoslug<\/a><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4724138,
            "reputation": 4312,
            "user_id": 3821287,
            "user_type": "registered",
            "accept_rate": 73,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/e9b4d2c7beaf2da62660c69677df561d?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "Lucas P.",
            "link": "https:\/\/stackoverflow.com\/users\/3821287\/lucas-p"
        },
        "is_accepted": false,
        "score": 34,
        "last_activity_date": 1544712570,
        "last_edit_date": null,
        "creation_date": 1544712570,
        "answer_id": 53764457,
        "question_id": 20845213,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "As others have stated, if you don&#39;t want to save the index column in the first place, you can use `df.to_csv(&#39;processed.csv&#39;, index=False)`\r\n\r\n\r\nHowever, since the data you will usually use, have some sort of index themselves, let&#39;s say a &#39;timestamp&#39; column, I would keep the index and load the data using it.\r\n\r\nSo, to save the indexed data, first set their index and then save the DataFrame:\r\n    \r\n    df.set_index(&#39;timestamp&#39;)\r\n    df.to_csv(&#39;processed.csv&#39;)\r\n\r\nAfterwards, you can either read the data with the index:\r\n\r\n    pd.read_csv(&#39;processed.csv&#39;, index_col=&#39;timestamp&#39;)\r\n\r\nor read the data, and then set the index:\r\n\r\n    pd.read_csv(&#39;filename.csv&#39;)\r\n    pd.set_index(&#39;column_name&#39;)\r\n\r\n",
        "body": "<p>As others have stated, if you don't want to save the index column in the first place, you can use <code>df.to_csv('processed.csv', index=False)<\/code><\/p>\n\n<p>However, since the data you will usually use, have some sort of index themselves, let's say a 'timestamp' column, I would keep the index and load the data using it.<\/p>\n\n<p>So, to save the indexed data, first set their index and then save the DataFrame:<\/p>\n\n<pre><code>df.set_index('timestamp')\ndf.to_csv('processed.csv')\n<\/code><\/pre>\n\n<p>Afterwards, you can either read the data with the index:<\/p>\n\n<pre><code>pd.read_csv('processed.csv', index_col='timestamp')\n<\/code><\/pre>\n\n<p>or read the data, and then set the index:<\/p>\n\n<pre><code>pd.read_csv('filename.csv')\npd.set_index('column_name')\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 6321039,
            "reputation": 386303,
            "user_id": 4909087,
            "user_type": "registered",
            "accept_rate": 97,
            "profile_image": "https:\/\/i.stack.imgur.com\/Zcszo.png?s=256&g=1",
            "display_name": "cs95",
            "link": "https:\/\/stackoverflow.com\/users\/4909087\/cs95"
        },
        "is_accepted": false,
        "score": 34,
        "last_activity_date": 1558507677,
        "last_edit_date": 1558507677.0,
        "creation_date": 1545280396,
        "answer_id": 53862445,
        "question_id": 29530232,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "# Super Simple Syntax: `df.isna().any(axis=None)`\r\n\r\n[Starting from v0.23.2](https:\/\/pandas.pydata.org\/pandas-docs\/version\/0.23.4\/whatsnew.html#logical-reductions-over-entire-dataframe), you can use [`DataFrame.isna`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.isna.html) + [`DataFrame.any(axis=None)`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.any.html) where `axis=None` specifies logical reduction over the entire DataFrame.\r\n    \r\n\r\n\r\n&lt;!- -&gt;\r\n \r\n    # Setup\r\n    df = pd.DataFrame({&#39;A&#39;: [1, 2, np.nan], &#39;B&#39; : [np.nan, 4, 5]})\r\n    df\r\n         A    B\r\n    0  1.0  NaN\r\n    1  2.0  4.0\r\n    2  NaN  5.0\r\n\r\n&lt;!_ -&gt;\r\n\r\n    df.isna()\r\n    \r\n           A      B\r\n    0  False   True\r\n    1  False  False\r\n    2   True  False\r\n\r\n    df.isna().any(axis=None)\r\n    # True\r\n\r\n---\r\n\r\n# Useful Alternatives\r\n\r\n**[`numpy.isnan`](https:\/\/docs.scipy.org\/doc\/numpy-1.15.1\/reference\/generated\/numpy.isnan.html)**    \r\nAnother performant option if you&#39;re running older versions of pandas.\r\n\r\n\r\n    np.isnan(df.values)\r\n\r\n    array([[False,  True],\r\n           [False, False],\r\n           [ True, False]])\r\n\r\n    np.isnan(df.values).any()\r\n    # True\r\n\r\nAlternatively, check the sum:\r\n\r\n    np.isnan(df.values).sum()\r\n    # 2\r\n\r\n    np.isnan(df.values).sum() &gt; 0\r\n    # True\r\n\r\n\r\n**[`Series.hasnans`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.Series.hasnans.html#pandas-series-hasnans)**    \r\nYou can also iteratively call `Series.hasnans`. For example, to check if a single column has NaNs, \r\n\r\n    df[&#39;A&#39;].hasnans\r\n    # True\r\n\r\nAnd to check if _any_ column has NaNs, you can use a comprehension with `any` (which is a short-circuiting operation).\r\n\r\n    any(df[c].hasnans for c in df)\r\n    # True\r\n\r\nThis is actually _very_ fast.",
        "body": "<h1>Super Simple Syntax: <code>df.isna().any(axis=None)<\/code><\/h1>\n\n<p><a href=\"https:\/\/pandas.pydata.org\/pandas-docs\/version\/0.23.4\/whatsnew.html#logical-reductions-over-entire-dataframe\" rel=\"noreferrer\">Starting from v0.23.2<\/a>, you can use <a href=\"https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.isna.html\" rel=\"noreferrer\"><code>DataFrame.isna<\/code><\/a> + <a href=\"https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.any.html\" rel=\"noreferrer\"><code>DataFrame.any(axis=None)<\/code><\/a> where <code>axis=None<\/code> specifies logical reduction over the entire DataFrame.<\/p>\n\n<p><\/p>\n\n<pre><code># Setup\ndf = pd.DataFrame({'A': [1, 2, np.nan], 'B' : [np.nan, 4, 5]})\ndf\n     A    B\n0  1.0  NaN\n1  2.0  4.0\n2  NaN  5.0\n<\/code><\/pre>\n\n<p><\/p>\n\n<pre><code>df.isna()\n\n       A      B\n0  False   True\n1  False  False\n2   True  False\n\ndf.isna().any(axis=None)\n# True\n<\/code><\/pre>\n\n<hr>\n\n<h1>Useful Alternatives<\/h1>\n\n<p><strong><a href=\"https:\/\/docs.scipy.org\/doc\/numpy-1.15.1\/reference\/generated\/numpy.isnan.html\" rel=\"noreferrer\"><code>numpy.isnan<\/code><\/a><\/strong><br>\nAnother performant option if you're running older versions of pandas.<\/p>\n\n<pre><code>np.isnan(df.values)\n\narray([[False,  True],\n       [False, False],\n       [ True, False]])\n\nnp.isnan(df.values).any()\n# True\n<\/code><\/pre>\n\n<p>Alternatively, check the sum:<\/p>\n\n<pre><code>np.isnan(df.values).sum()\n# 2\n\nnp.isnan(df.values).sum() &gt; 0\n# True\n<\/code><\/pre>\n\n<p><strong><a href=\"https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.Series.hasnans.html#pandas-series-hasnans\" rel=\"noreferrer\"><code>Series.hasnans<\/code><\/a><\/strong><br>\nYou can also iteratively call <code>Series.hasnans<\/code>. For example, to check if a single column has NaNs, <\/p>\n\n<pre><code>df['A'].hasnans\n# True\n<\/code><\/pre>\n\n<p>And to check if <em>any<\/em> column has NaNs, you can use a comprehension with <code>any<\/code> (which is a short-circuiting operation).<\/p>\n\n<pre><code>any(df[c].hasnans for c in df)\n# True\n<\/code><\/pre>\n\n<p>This is actually <em>very<\/em> fast.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1416,
            "reputation": 29122,
            "user_id": 1891,
            "user_type": "registered",
            "accept_rate": 80,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/c40d475927f7a86639ec54aa32517572?s=256&d=identicon&r=PG",
            "display_name": "Jay Conrod",
            "link": "https:\/\/stackoverflow.com\/users\/1891\/jay-conrod"
        },
        "is_accepted": false,
        "score": 33,
        "last_activity_date": 1508590564,
        "last_edit_date": 1508590564.0,
        "creation_date": 1247266371,
        "answer_id": 1112352,
        "question_id": 1112343,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "You can handle &lt;kbd&gt;CTRL&lt;\/kbd&gt;+&lt;kbd&gt;C&lt;\/kbd&gt; by catching the `KeyboardInterrupt` exception. You can implement any clean-up code in the exception handler.",
        "body": "<p>You can handle <kbd>CTRL<\/kbd>+<kbd>C<\/kbd> by catching the <code>KeyboardInterrupt<\/code> exception. You can implement any clean-up code in the exception handler.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2630713,
            "reputation": 4479,
            "user_id": 2276738,
            "user_type": "registered",
            "accept_rate": 25,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/8c8e77bea2d486a91856109361a72c01?s=256&d=identicon&r=PG",
            "display_name": "saimadhu.polamuri",
            "link": "https:\/\/stackoverflow.com\/users\/2276738\/saimadhu-polamuri"
        },
        "is_accepted": false,
        "score": 33,
        "last_activity_date": 1611428801,
        "last_edit_date": 1611428801.0,
        "creation_date": 1426571548,
        "answer_id": 29092176,
        "question_id": 464864,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "You can generate all combinations of a list in Python using this simple code:\r\n\r\n    import itertools\r\n    \r\n    a = [1,2,3,4]\r\n    for i in xrange(0,len(a)+1):\r\n       print list(itertools.combinations(a,i))\r\n\r\nResult would be:\r\n\r\n    [()]\r\n    [(1,), (2,), (3,), (4,)]\r\n    [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]\r\n    [(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]\r\n    [(1, 2, 3, 4)]\r\n",
        "body": "<p>You can generate all combinations of a list in Python using this simple code:<\/p>\n<pre><code>import itertools\n\na = [1,2,3,4]\nfor i in xrange(0,len(a)+1):\n   print list(itertools.combinations(a,i))\n<\/code><\/pre>\n<p>Result would be:<\/p>\n<pre><code>[()]\n[(1,), (2,), (3,), (4,)]\n[(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]\n[(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]\n[(1, 2, 3, 4)]\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 454788,
            "reputation": 6021,
            "user_id": 852592,
            "user_type": "registered",
            "accept_rate": 88,
            "profile_image": "https:\/\/i.stack.imgur.com\/O5IeE.jpg?s=256&g=1",
            "display_name": "Lenar Hoyt",
            "link": "https:\/\/stackoverflow.com\/users\/852592\/lenar-hoyt"
        },
        "is_accepted": false,
        "score": 33,
        "last_activity_date": 1462487705,
        "last_edit_date": null,
        "creation_date": 1462487705,
        "answer_id": 37061405,
        "question_id": 7781260,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "There is an infinity in the NumPy library: `from numpy import inf`. To get negative infinity one can simply write `-inf`.",
        "body": "<p>There is an infinity in the NumPy library: <code>from numpy import inf<\/code>. To get negative infinity one can simply write <code>-inf<\/code>.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4364666,
            "reputation": 1398,
            "user_id": 5364318,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/5231599dbf97be7e44d8641da9dd1c12?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "Reck",
            "link": "https:\/\/stackoverflow.com\/users\/5364318\/reck"
        },
        "is_accepted": false,
        "score": 33,
        "last_activity_date": 1606415984,
        "last_edit_date": 1606415984.0,
        "creation_date": 1520930983,
        "answer_id": 49251780,
        "question_id": 5893163,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "There are 5 cases for using the underscore in Python.\r\n\r\n 1. For storing the value of last expression in interpreter.\r\n\r\n 2. For ignoring the specific values. (so-called \u201cI don\u2019t care\u201d)\r\n\r\n 3. To give special meanings and functions to name of variables or functions.\r\n \r\n 4. To use as \u2018internationalization (i18n)\u2019 or \u2018localization (l10n)\u2019 functions.\r\n\r\n 5. To separate the digits of number literal value.\r\n\r\n[Here](https:\/\/hackernoon.com\/understanding-the-underscore-of-python-309d1a029edc) is a nice article with examples by [mingrammer](https:\/\/hackernoon.com\/@mingrammer).",
        "body": "<p>There are 5 cases for using the underscore in Python.<\/p>\n<ol>\n<li><p>For storing the value of last expression in interpreter.<\/p>\n<\/li>\n<li><p>For ignoring the specific values. (so-called \u201cI don\u2019t care\u201d)<\/p>\n<\/li>\n<li><p>To give special meanings and functions to name of variables or functions.<\/p>\n<\/li>\n<li><p>To use as \u2018internationalization (i18n)\u2019 or \u2018localization (l10n)\u2019 functions.<\/p>\n<\/li>\n<li><p>To separate the digits of number literal value.<\/p>\n<\/li>\n<\/ol>\n<p><a href=\"https:\/\/hackernoon.com\/understanding-the-underscore-of-python-309d1a029edc\" rel=\"noreferrer\">Here<\/a> is a nice article with examples by <a href=\"https:\/\/hackernoon.com\/@mingrammer\" rel=\"noreferrer\">mingrammer<\/a>.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4310764,
            "reputation": 1137,
            "user_id": 3521881,
            "user_type": "registered",
            "accept_rate": 75,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/db5a549e5c7629c5a62516bad8323793?s=256&d=identicon&r=PG",
            "display_name": "Natacha",
            "link": "https:\/\/stackoverflow.com\/users\/3521881\/natacha"
        },
        "is_accepted": false,
        "score": 33,
        "last_activity_date": 1677686693,
        "last_edit_date": 1677686693.0,
        "creation_date": 1540664460,
        "answer_id": 53024983,
        "question_id": 16729574,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "I needed the value of one cell, selected by column and index names.\r\nThis solution worked for me:\r\n\r\n`df.loc[1,:].values[0]`",
        "body": "<p>I needed the value of one cell, selected by column and index names.\nThis solution worked for me:<\/p>\n<p><code>df.loc[1,:].values[0]<\/code><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 11844243,
            "reputation": 341,
            "user_id": 8667185,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/f2a2d7eb93a0ffbfac6e7d848badd288?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "Fledias weh",
            "link": "https:\/\/stackoverflow.com\/users\/8667185\/fledias-weh"
        },
        "is_accepted": false,
        "score": 33,
        "last_activity_date": 1612540210,
        "last_edit_date": 1612540210.0,
        "creation_date": 1612526675,
        "answer_id": 66062975,
        "question_id": 18171739,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "This is a more general script approach for the stated question.\r\n\r\n    import pandas as pd\r\n\r\n    encoding_list = [&#39;ascii&#39;, &#39;big5&#39;, &#39;big5hkscs&#39;, &#39;cp037&#39;, &#39;cp273&#39;, &#39;cp424&#39;, &#39;cp437&#39;, &#39;cp500&#39;, &#39;cp720&#39;, &#39;cp737&#39;\r\n                     , &#39;cp775&#39;, &#39;cp850&#39;, &#39;cp852&#39;, &#39;cp855&#39;, &#39;cp856&#39;, &#39;cp857&#39;, &#39;cp858&#39;, &#39;cp860&#39;, &#39;cp861&#39;, &#39;cp862&#39;\r\n                     , &#39;cp863&#39;, &#39;cp864&#39;, &#39;cp865&#39;, &#39;cp866&#39;, &#39;cp869&#39;, &#39;cp874&#39;, &#39;cp875&#39;, &#39;cp932&#39;, &#39;cp949&#39;, &#39;cp950&#39;\r\n                     , &#39;cp1006&#39;, &#39;cp1026&#39;, &#39;cp1125&#39;, &#39;cp1140&#39;, &#39;cp1250&#39;, &#39;cp1251&#39;, &#39;cp1252&#39;, &#39;cp1253&#39;, &#39;cp1254&#39;\r\n                     , &#39;cp1255&#39;, &#39;cp1256&#39;, &#39;cp1257&#39;, &#39;cp1258&#39;, &#39;euc_jp&#39;, &#39;euc_jis_2004&#39;, &#39;euc_jisx0213&#39;, &#39;euc_kr&#39;\r\n                     , &#39;gb2312&#39;, &#39;gbk&#39;, &#39;gb18030&#39;, &#39;hz&#39;, &#39;iso2022_jp&#39;, &#39;iso2022_jp_1&#39;, &#39;iso2022_jp_2&#39;\r\n                     , &#39;iso2022_jp_2004&#39;, &#39;iso2022_jp_3&#39;, &#39;iso2022_jp_ext&#39;, &#39;iso2022_kr&#39;, &#39;latin_1&#39;, &#39;iso8859_2&#39;\r\n                     , &#39;iso8859_3&#39;, &#39;iso8859_4&#39;, &#39;iso8859_5&#39;, &#39;iso8859_6&#39;, &#39;iso8859_7&#39;, &#39;iso8859_8&#39;, &#39;iso8859_9&#39;\r\n                     , &#39;iso8859_10&#39;, &#39;iso8859_11&#39;, &#39;iso8859_13&#39;, &#39;iso8859_14&#39;, &#39;iso8859_15&#39;, &#39;iso8859_16&#39;, &#39;johab&#39;\r\n                     , &#39;koi8_r&#39;, &#39;koi8_t&#39;, &#39;koi8_u&#39;, &#39;kz1048&#39;, &#39;mac_cyrillic&#39;, &#39;mac_greek&#39;, &#39;mac_iceland&#39;, &#39;mac_latin2&#39;\r\n                     , &#39;mac_roman&#39;, &#39;mac_turkish&#39;, &#39;ptcp154&#39;, &#39;shift_jis&#39;, &#39;shift_jis_2004&#39;, &#39;shift_jisx0213&#39;, &#39;utf_32&#39;\r\n                     , &#39;utf_32_be&#39;, &#39;utf_32_le&#39;, &#39;utf_16&#39;, &#39;utf_16_be&#39;, &#39;utf_16_le&#39;, &#39;utf_7&#39;, &#39;utf_8&#39;, &#39;utf_8_sig&#39;]\r\n\r\n    for encoding in encoding_list:\r\n        worked = True\r\n        try:\r\n            df = pd.read_csv(path, encoding=encoding, nrows=5)\r\n        except:\r\n            worked = False\r\n        if worked:\r\n            print(encoding, &#39;:\\n&#39;, df.head())\r\n\r\nOne starts with all the standard encodings available for the python version (in this case 3.7 [python 3.7 standard encodings][1]).\r\nA usable python list of the standard encodings for the different python version is provided here: [Helpful Stack overflow answer][2]\r\n\r\n \r\nTrying each encoding on a small chunk of the data;\r\nonly printing the working encoding.\r\nThe output is directly obvious.\r\nThis output also addresses the problem that an encoding like &#39;latin1&#39; that runs through with ought any error, does not necessarily produce the wanted outcome.\r\n\r\n\r\nIn case of the question, I would try this approach specific for problematic `CSV` file and then maybe try to use the found working encoding for all others.\r\n\r\n\r\n\r\n  [1]: https:\/\/docs.python.org\/3.7\/library\/codecs.html#standard-encodings\r\n  [2]: https:\/\/stackoverflow.com\/a\/25584253\/8667185",
        "body": "<p>This is a more general script approach for the stated question.<\/p>\n<pre><code>import pandas as pd\n\nencoding_list = ['ascii', 'big5', 'big5hkscs', 'cp037', 'cp273', 'cp424', 'cp437', 'cp500', 'cp720', 'cp737'\n                 , 'cp775', 'cp850', 'cp852', 'cp855', 'cp856', 'cp857', 'cp858', 'cp860', 'cp861', 'cp862'\n                 , 'cp863', 'cp864', 'cp865', 'cp866', 'cp869', 'cp874', 'cp875', 'cp932', 'cp949', 'cp950'\n                 , 'cp1006', 'cp1026', 'cp1125', 'cp1140', 'cp1250', 'cp1251', 'cp1252', 'cp1253', 'cp1254'\n                 , 'cp1255', 'cp1256', 'cp1257', 'cp1258', 'euc_jp', 'euc_jis_2004', 'euc_jisx0213', 'euc_kr'\n                 , 'gb2312', 'gbk', 'gb18030', 'hz', 'iso2022_jp', 'iso2022_jp_1', 'iso2022_jp_2'\n                 , 'iso2022_jp_2004', 'iso2022_jp_3', 'iso2022_jp_ext', 'iso2022_kr', 'latin_1', 'iso8859_2'\n                 , 'iso8859_3', 'iso8859_4', 'iso8859_5', 'iso8859_6', 'iso8859_7', 'iso8859_8', 'iso8859_9'\n                 , 'iso8859_10', 'iso8859_11', 'iso8859_13', 'iso8859_14', 'iso8859_15', 'iso8859_16', 'johab'\n                 , 'koi8_r', 'koi8_t', 'koi8_u', 'kz1048', 'mac_cyrillic', 'mac_greek', 'mac_iceland', 'mac_latin2'\n                 , 'mac_roman', 'mac_turkish', 'ptcp154', 'shift_jis', 'shift_jis_2004', 'shift_jisx0213', 'utf_32'\n                 , 'utf_32_be', 'utf_32_le', 'utf_16', 'utf_16_be', 'utf_16_le', 'utf_7', 'utf_8', 'utf_8_sig']\n\nfor encoding in encoding_list:\n    worked = True\n    try:\n        df = pd.read_csv(path, encoding=encoding, nrows=5)\n    except:\n        worked = False\n    if worked:\n        print(encoding, ':\\n', df.head())\n<\/code><\/pre>\n<p>One starts with all the standard encodings available for the python version (in this case 3.7 <a href=\"https:\/\/docs.python.org\/3.7\/library\/codecs.html#standard-encodings\" rel=\"noreferrer\">python 3.7 standard encodings<\/a>).\nA usable python list of the standard encodings for the different python version is provided here: <a href=\"https:\/\/stackoverflow.com\/a\/25584253\/8667185\">Helpful Stack overflow answer<\/a><\/p>\n<p>Trying each encoding on a small chunk of the data;\nonly printing the working encoding.\nThe output is directly obvious.\nThis output also addresses the problem that an encoding like 'latin1' that runs through with ought any error, does not necessarily produce the wanted outcome.<\/p>\n<p>In case of the question, I would try this approach specific for problematic <code>CSV<\/code> file and then maybe try to use the found working encoding for all others.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 25075,
            "reputation": 8866,
            "user_id": 64206,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/cebc9b2556584de902449716133f36ec?s=256&d=identicon&r=PG",
            "display_name": "tgray",
            "link": "https:\/\/stackoverflow.com\/users\/64206\/tgray"
        },
        "is_accepted": false,
        "score": 32,
        "last_activity_date": 1530191279,
        "last_edit_date": 1530191279.0,
        "creation_date": 1237829363,
        "answer_id": 674399,
        "question_id": 674304,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "To quote the [documentation][1]:\r\n\r\n&gt; Typical implementations create a new instance of the class by invoking\r\n&gt; the superclass&#39;s \\_\\_new\\_\\_() method using &quot;super(currentclass,\r\n&gt; cls).\\_\\_new\\_\\_(cls[, ...])&quot;with appropriate arguments and then\r\n&gt; modifying the newly-created instance as necessary before returning it.\r\n&gt; \r\n&gt; ...\r\n&gt; \r\n&gt; If \\_\\_new\\_\\_() does not return an instance of cls, then the new\r\n&gt; instance&#39;s \\_\\_init\\_\\_() method will not be invoked.\r\n&gt; \r\n&gt; \\_\\_new\\_\\_() is intended mainly to allow subclasses of immutable\r\n&gt; types (like int, str, or tuple) to customize instance creation.\r\n\r\n  [1]: https:\/\/docs.python.org\/3\/reference\/datamodel.html#object.__new__",
        "body": "<p>To quote the <a href=\"https:\/\/docs.python.org\/3\/reference\/datamodel.html#object.__new__\" rel=\"noreferrer\">documentation<\/a>:<\/p>\n\n<blockquote>\n  <p>Typical implementations create a new instance of the class by invoking\n  the superclass's __new__() method using \"super(currentclass,\n  cls).__new__(cls[, ...])\"with appropriate arguments and then\n  modifying the newly-created instance as necessary before returning it.<\/p>\n  \n  <p>...<\/p>\n  \n  <p>If __new__() does not return an instance of cls, then the new\n  instance's __init__() method will not be invoked.<\/p>\n  \n  <p>__new__() is intended mainly to allow subclasses of immutable\n  types (like int, str, or tuple) to customize instance creation.<\/p>\n<\/blockquote>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 192828,
            "reputation": 7525,
            "user_id": 434193,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/10f6c9d84191bcbe69ce41177087c4d7?s=256&d=identicon&r=PG",
            "display_name": "gsbabil",
            "link": "https:\/\/stackoverflow.com\/users\/434193\/gsbabil"
        },
        "is_accepted": false,
        "score": 32,
        "last_activity_date": 1442611053,
        "last_edit_date": 1442611053.0,
        "creation_date": 1285309359,
        "answer_id": 3784679,
        "question_id": 1267869,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Just making any of the parameters for division in floating-point format also produces the output in floating-point.\r\n\r\nExample:\r\n\r\n    &gt;&gt;&gt; 4.0\/3\r\n    1.3333333333333333\r\n\r\nor,\r\n\r\n    &gt;&gt;&gt; 4 \/ 3.0\r\n    1.3333333333333333\r\n\r\nor, \r\n\r\n    &gt;&gt;&gt; 4 \/ float(3)\r\n    1.3333333333333333\r\n\r\nor, \r\n\r\n    &gt;&gt;&gt; float(4) \/ 3\r\n    1.3333333333333333\r\n\r\n",
        "body": "<p>Just making any of the parameters for division in floating-point format also produces the output in floating-point.<\/p>\n\n<p>Example:<\/p>\n\n<pre><code>&gt;&gt;&gt; 4.0\/3\n1.3333333333333333\n<\/code><\/pre>\n\n<p>or,<\/p>\n\n<pre><code>&gt;&gt;&gt; 4 \/ 3.0\n1.3333333333333333\n<\/code><\/pre>\n\n<p>or, <\/p>\n\n<pre><code>&gt;&gt;&gt; 4 \/ float(3)\n1.3333333333333333\n<\/code><\/pre>\n\n<p>or, <\/p>\n\n<pre><code>&gt;&gt;&gt; float(4) \/ 3\n1.3333333333333333\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 3851954,
            "reputation": 32922,
            "user_id": 3191896,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/6fc00a9f26f72f578da0456b75443e5c?s=256&d=identicon&r=PG",
            "display_name": "Jossef Harush Kadouri",
            "link": "https:\/\/stackoverflow.com\/users\/3191896\/jossef-harush-kadouri"
        },
        "is_accepted": false,
        "score": 32,
        "last_activity_date": 1675236044,
        "last_edit_date": 1675236044.0,
        "creation_date": 1439650827,
        "answer_id": 32025948,
        "question_id": 1112343,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "# Yet Another Snippet\r\n\r\nReferred `main` as the main function and `exit_gracefully` as the &lt;kbd&gt;Ctrl&lt;\/kbd&gt;+&lt;kbd&gt;C&lt;\/kbd&gt; handler\r\n\r\n    if __name__ == &#39;__main__&#39;:\r\n        try:\r\n            main()\r\n        except KeyboardInterrupt:\r\n            pass\r\n        finally:\r\n            exit_gracefully()\r\n",
        "body": "<h1>Yet Another Snippet<\/h1>\n<p>Referred <code>main<\/code> as the main function and <code>exit_gracefully<\/code> as the <kbd>Ctrl<\/kbd>+<kbd>C<\/kbd> handler<\/p>\n<pre><code>if __name__ == '__main__':\n    try:\n        main()\n    except KeyboardInterrupt:\n        pass\n    finally:\n        exit_gracefully()\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 8513984,
            "reputation": 2651,
            "user_id": 6383130,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/Dxerz.jpg?s=256&g=1",
            "display_name": "Heapify",
            "link": "https:\/\/stackoverflow.com\/users\/6383130\/heapify"
        },
        "is_accepted": false,
        "score": 32,
        "last_activity_date": 1504920669,
        "last_edit_date": 1504920669.0,
        "creation_date": 1504919667,
        "answer_id": 46126307,
        "question_id": 2776829,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Everybody has a really nice and verbose answer with examples and I really appreciate it. I just wanted to give a short few lines answer for people who are still not quite clear conceptually:\r\n\r\n*If you create your own iterator, it is a little bit involved - you have \r\nto create a class and at least implement the iter and the next methods. But what if you don&#39;t want to go through this hassle and want to quickly create an iterator. Fortunately, Python provides a short-cut way to defining an iterator. All you need to do is define a function with at least 1 call to yield and now when you call that function it will return &quot;**something**&quot; which will act like an iterator (you can call next method and use it in a for loop). This **something** has a name in Python called Generator*\r\n\r\nHope that clarifies a bit.\r\n\r\n",
        "body": "<p>Everybody has a really nice and verbose answer with examples and I really appreciate it. I just wanted to give a short few lines answer for people who are still not quite clear conceptually:<\/p>\n\n<p><em>If you create your own iterator, it is a little bit involved - you have \nto create a class and at least implement the iter and the next methods. But what if you don't want to go through this hassle and want to quickly create an iterator. Fortunately, Python provides a short-cut way to defining an iterator. All you need to do is define a function with at least 1 call to yield and now when you call that function it will return \"<strong>something<\/strong>\" which will act like an iterator (you can call next method and use it in a for loop). This <strong>something<\/strong> has a name in Python called Generator<\/em><\/p>\n\n<p>Hope that clarifies a bit.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1952177,
            "reputation": 1870,
            "user_id": 1756039,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/VyfZr.jpg?s=256&g=1",
            "display_name": "Wilson Wu",
            "link": "https:\/\/stackoverflow.com\/users\/1756039\/wilson-wu"
        },
        "is_accepted": false,
        "score": 32,
        "last_activity_date": 1534343863,
        "last_edit_date": null,
        "creation_date": 1534343863,
        "answer_id": 51860835,
        "question_id": 5998245,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Just sample code:\r\n\r\n    import time\r\n    timestamp = int(time.time()*1000.0)\r\n\r\nOutput:\r\n1534343781311\r\n",
        "body": "<p>Just sample code:<\/p>\n\n<pre><code>import time\ntimestamp = int(time.time()*1000.0)\n<\/code><\/pre>\n\n<p>Output:\n1534343781311<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 6404,
            "reputation": 11778,
            "user_id": 2601671,
            "user_type": "registered",
            "accept_rate": 77,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/9e7a8b29723c6d38e1b1a1f245c27b4c?s=256&d=identicon&r=PG",
            "display_name": "Trenton",
            "link": "https:\/\/stackoverflow.com\/users\/2601671\/trenton"
        },
        "is_accepted": false,
        "score": 32,
        "last_activity_date": 1542093950,
        "last_edit_date": null,
        "creation_date": 1542093950,
        "answer_id": 53275862,
        "question_id": 4435169,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Python 3.6 gives us [f-strings][1], which are a delight:\r\n\r\n    var1 = &quot;foo&quot;\r\n    var2 = &quot;bar&quot;\r\n    var3 = f&quot;{var1}{var2}&quot;\r\n    print(var3)                       # prints foobar\r\n\r\nYou can do most anything inside the curly braces\r\n\r\n    print(f&quot;1 + 1 == {1 + 1}&quot;)        # prints 1 + 1 == 2\r\n    \r\n\r\n \r\n\r\n\r\n  [1]: https:\/\/docs.python.org\/3\/whatsnew\/3.6.html#whatsnew36-pep498",
        "body": "<p>Python 3.6 gives us <a href=\"https:\/\/docs.python.org\/3\/whatsnew\/3.6.html#whatsnew36-pep498\" rel=\"noreferrer\">f-strings<\/a>, which are a delight:<\/p>\n\n<pre><code>var1 = \"foo\"\nvar2 = \"bar\"\nvar3 = f\"{var1}{var2}\"\nprint(var3)                       # prints foobar\n<\/code><\/pre>\n\n<p>You can do most anything inside the curly braces<\/p>\n\n<pre><code>print(f\"1 + 1 == {1 + 1}\")        # prints 1 + 1 == 2\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5420294,
            "reputation": 926,
            "user_id": 4314136,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/7917ca7b8c183fe3b242991919457fdd?s=256&d=identicon&r=PG",
            "display_name": "Brad123",
            "link": "https:\/\/stackoverflow.com\/users\/4314136\/brad123"
        },
        "is_accepted": false,
        "score": 32,
        "last_activity_date": 1673668174,
        "last_edit_date": 1673668174.0,
        "creation_date": 1555989690,
        "answer_id": 55803849,
        "question_id": 1841565,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Python will convert the number to a float. Simply calling float first then converting that to an int will work:\r\n`output = int(float(input))`",
        "body": "<p>Python will convert the number to a float. Simply calling float first then converting that to an int will work:\n<code>output = int(float(input))<\/code><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 10047978,
            "reputation": 4400,
            "user_id": 7428659,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/9Jg2f.jpg?s=256&g=1",
            "display_name": "Miladiouss",
            "link": "https:\/\/stackoverflow.com\/users\/7428659\/miladiouss"
        },
        "is_accepted": false,
        "score": 32,
        "last_activity_date": 1557204980,
        "last_edit_date": null,
        "creation_date": 1557204980,
        "answer_id": 56015781,
        "question_id": 13842088,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "To set values, use:\r\n\r\n    df.at[0, &#39;clm1&#39;] = 0\r\n\r\n - The fastest recommended method for setting variables.\r\n - `set_value`, `ix` have been deprecated.\r\n - No warning, unlike `iloc` and `loc`\r\n\r\n",
        "body": "<p>To set values, use:<\/p>\n\n<pre><code>df.at[0, 'clm1'] = 0\n<\/code><\/pre>\n\n<ul>\n<li>The fastest recommended method for setting variables.<\/li>\n<li><code>set_value<\/code>, <code>ix<\/code> have been deprecated.<\/li>\n<li>No warning, unlike <code>iloc<\/code> and <code>loc<\/code><\/li>\n<\/ul>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 18096884,
            "reputation": 7269,
            "user_id": 13155046,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/44dc61d7ce44f1c1df872b480243c5a1?s=256&d=identicon&r=PG",
            "display_name": "Milovan Toma\u0161evi\u0107",
            "link": "https:\/\/stackoverflow.com\/users\/13155046\/milovan-toma%c5%a1evi%c4%87"
        },
        "is_accepted": false,
        "score": 32,
        "last_activity_date": 1612133764,
        "last_edit_date": 1612133764.0,
        "creation_date": 1597057157,
        "answer_id": 63338866,
        "question_id": 14058453,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "For more detailed explanations - great documentation at that [link][1].\r\nFor example: It&#39;s easy, you only need to set up two loggers.  \r\n\r\n```py\r\nimport sys\r\nimport logging\r\n\r\nlogger = logging.getLogger(&#39;&#39;)\r\nlogger.setLevel(logging.DEBUG)\r\nfh = logging.FileHandler(&#39;my_log_info.log&#39;)\r\nsh = logging.StreamHandler(sys.stdout)\r\nformatter = logging.Formatter(&#39;[%(asctime)s] %(levelname)s [%(filename)s.%(funcName)s:%(lineno)d] %(message)s&#39;, datefmt=&#39;%a, %d %b %Y %H:%M:%S&#39;)\r\nfh.setFormatter(formatter)\r\nsh.setFormatter(formatter)\r\nlogger.addHandler(fh)\r\nlogger.addHandler(sh)\r\n\r\ndef hello_logger():\r\n    logger.info(&quot;Hello info&quot;)\r\n    logger.critical(&quot;Hello critical&quot;)\r\n    logger.warning(&quot;Hello warning&quot;)\r\n    logger.debug(&quot;Hello debug&quot;)\r\n\r\nif __name__ == &quot;__main__&quot;:\r\n    print(hello_logger())\r\n```\r\n\r\nOutput - terminal:\r\n```sh\r\n[Mon, 10 Aug 2020 12:44:25] INFO [TestLoger.py.hello_logger:15] Hello info\r\n[Mon, 10 Aug 2020 12:44:25] CRITICAL [TestLoger.py.hello_logger:16] Hello critical\r\n[Mon, 10 Aug 2020 12:44:25] WARNING [TestLoger.py.hello_logger:17] Hello warning\r\n[Mon, 10 Aug 2020 12:44:25] DEBUG [TestLoger.py.hello_logger:18] Hello debug\r\nNone\r\n```\r\n\r\nOutput - in file:\r\n\r\n[![log in file][2]][2]\r\n    \r\n***\r\n### UPDATE: color terminal\r\n\r\nPackage:\r\n```sh\r\npip install colorlog\r\n```\r\n\r\nCode:\r\n\r\n```py\r\nimport sys\r\nimport logging\r\nimport colorlog\r\n\r\nlogger = logging.getLogger(&#39;&#39;)\r\nlogger.setLevel(logging.DEBUG)\r\nfh = logging.FileHandler(&#39;my_log_info.log&#39;)\r\nsh = logging.StreamHandler(sys.stdout)\r\nformatter = logging.Formatter(&#39;[%(asctime)s] %(levelname)s [%(filename)s.%(funcName)s:%(lineno)d] %(message)s&#39;, datefmt=&#39;%a, %d %b %Y %H:%M:%S&#39;)\r\nfh.setFormatter(formatter)\r\nsh.setFormatter(colorlog.ColoredFormatter(&#39;%(log_color)s [%(asctime)s] %(levelname)s [%(filename)s.%(funcName)s:%(lineno)d] %(message)s&#39;, datefmt=&#39;%a, %d %b %Y %H:%M:%S&#39;))\r\nlogger.addHandler(fh)\r\nlogger.addHandler(sh)\r\n\r\ndef hello_logger():\r\n    logger.info(&quot;Hello info&quot;)\r\n    logger.critical(&quot;Hello critical&quot;)\r\n    logger.warning(&quot;Hello warning&quot;)\r\n    logger.debug(&quot;Hello debug&quot;)\r\n    logger.error(&quot;Error message&quot;)\r\n\r\nif __name__ == &quot;__main__&quot;:\r\n    hello_logger()\r\n```\r\n\r\noutput:\r\n[![enter image description here][3]][3]\r\n\r\n### Recommendation:\r\n\r\n[Complete logger configuration][4] from `INI` file, which also includes setup for `stdout` and `debug.log`:\r\n- `handler_file`\r\n   - `level=WARNING`\r\n- `handler_screen`\r\n   - `level=DEBUG`\r\n\r\n\r\n  [1]: https:\/\/docs.python.org\/3\/howto\/logging.html\r\n  [2]: https:\/\/i.stack.imgur.com\/edeFh.png\r\n  [3]: https:\/\/i.stack.imgur.com\/Q5gAi.png\r\n  [4]: https:\/\/stackoverflow.com\/questions\/38537905\/set-logging-levels\/65975273#65975273",
        "body": "<p>For more detailed explanations - great documentation at that <a href=\"https:\/\/docs.python.org\/3\/howto\/logging.html\" rel=\"noreferrer\">link<\/a>.\nFor example: It's easy, you only need to set up two loggers.<\/p>\n<pre class=\"lang-py prettyprint-override\"><code>import sys\nimport logging\n\nlogger = logging.getLogger('')\nlogger.setLevel(logging.DEBUG)\nfh = logging.FileHandler('my_log_info.log')\nsh = logging.StreamHandler(sys.stdout)\nformatter = logging.Formatter('[%(asctime)s] %(levelname)s [%(filename)s.%(funcName)s:%(lineno)d] %(message)s', datefmt='%a, %d %b %Y %H:%M:%S')\nfh.setFormatter(formatter)\nsh.setFormatter(formatter)\nlogger.addHandler(fh)\nlogger.addHandler(sh)\n\ndef hello_logger():\n    logger.info(&quot;Hello info&quot;)\n    logger.critical(&quot;Hello critical&quot;)\n    logger.warning(&quot;Hello warning&quot;)\n    logger.debug(&quot;Hello debug&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    print(hello_logger())\n<\/code><\/pre>\n<p>Output - terminal:<\/p>\n<pre class=\"lang-sh prettyprint-override\"><code>[Mon, 10 Aug 2020 12:44:25] INFO [TestLoger.py.hello_logger:15] Hello info\n[Mon, 10 Aug 2020 12:44:25] CRITICAL [TestLoger.py.hello_logger:16] Hello critical\n[Mon, 10 Aug 2020 12:44:25] WARNING [TestLoger.py.hello_logger:17] Hello warning\n[Mon, 10 Aug 2020 12:44:25] DEBUG [TestLoger.py.hello_logger:18] Hello debug\nNone\n<\/code><\/pre>\n<p>Output - in file:<\/p>\n<p><a href=\"https:\/\/i.stack.imgur.com\/edeFh.png\" rel=\"noreferrer\"><img src=\"https:\/\/i.stack.imgur.com\/edeFh.png\" alt=\"log in file\" \/><\/a><\/p>\n<hr \/>\n<h3>UPDATE: color terminal<\/h3>\n<p>Package:<\/p>\n<pre class=\"lang-sh prettyprint-override\"><code>pip install colorlog\n<\/code><\/pre>\n<p>Code:<\/p>\n<pre class=\"lang-py prettyprint-override\"><code>import sys\nimport logging\nimport colorlog\n\nlogger = logging.getLogger('')\nlogger.setLevel(logging.DEBUG)\nfh = logging.FileHandler('my_log_info.log')\nsh = logging.StreamHandler(sys.stdout)\nformatter = logging.Formatter('[%(asctime)s] %(levelname)s [%(filename)s.%(funcName)s:%(lineno)d] %(message)s', datefmt='%a, %d %b %Y %H:%M:%S')\nfh.setFormatter(formatter)\nsh.setFormatter(colorlog.ColoredFormatter('%(log_color)s [%(asctime)s] %(levelname)s [%(filename)s.%(funcName)s:%(lineno)d] %(message)s', datefmt='%a, %d %b %Y %H:%M:%S'))\nlogger.addHandler(fh)\nlogger.addHandler(sh)\n\ndef hello_logger():\n    logger.info(&quot;Hello info&quot;)\n    logger.critical(&quot;Hello critical&quot;)\n    logger.warning(&quot;Hello warning&quot;)\n    logger.debug(&quot;Hello debug&quot;)\n    logger.error(&quot;Error message&quot;)\n\nif __name__ == &quot;__main__&quot;:\n    hello_logger()\n<\/code><\/pre>\n<p>output:\n<a href=\"https:\/\/i.stack.imgur.com\/Q5gAi.png\" rel=\"noreferrer\"><img src=\"https:\/\/i.stack.imgur.com\/Q5gAi.png\" alt=\"enter image description here\" \/><\/a><\/p>\n<h3>Recommendation:<\/h3>\n<p><a href=\"https:\/\/stackoverflow.com\/questions\/38537905\/set-logging-levels\/65975273#65975273\">Complete logger configuration<\/a> from <code>INI<\/code> file, which also includes setup for <code>stdout<\/code> and <code>debug.log<\/code>:<\/p>\n<ul>\n<li><code>handler_file<\/code>\n<ul>\n<li><code>level=WARNING<\/code><\/li>\n<\/ul>\n<\/li>\n<li><code>handler_screen<\/code>\n<ul>\n<li><code>level=DEBUG<\/code><\/li>\n<\/ul>\n<\/li>\n<\/ul>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 17260,
            "reputation": 28375,
            "user_id": 38426,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/3a844ba1f9259dee35f88f4d46db84dc?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "BobbyShaftoe",
            "link": "https:\/\/stackoverflow.com\/users\/38426\/bobbyshaftoe"
        },
        "is_accepted": false,
        "score": 31,
        "last_activity_date": 1231476970,
        "last_edit_date": null,
        "creation_date": 1231476970,
        "answer_id": 427111,
        "question_id": 427102,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "From [here][1].\r\n&gt; \u201cSlug\u201d is a newspaper term, but what\r\n&gt; it means here is the final bit of the\r\n&gt; URL. For example, a post with the\r\n&gt; title, \u201cA bit about Django\u201d would\r\n&gt; become, \u201cbit-about-django\u201d\r\n&gt; automatically (you can, of course,\r\n&gt; change it easily if you don\u2019t like the\r\n&gt; auto-generated slug).\r\n\r\n\r\n  [1]: http:\/\/jeffcroft.com\/blog\/2006\/may\/02\/django-non-programmers\/",
        "body": "<p>From <a href=\"http:\/\/jeffcroft.com\/blog\/2006\/may\/02\/django-non-programmers\/\" rel=\"noreferrer\">here<\/a>.<\/p>\n\n<blockquote>\n  <p>\u201cSlug\u201d is a newspaper term, but what\n  it means here is the final bit of the\n  URL. For example, a post with the\n  title, \u201cA bit about Django\u201d would\n  become, \u201cbit-about-django\u201d\n  automatically (you can, of course,\n  change it easily if you don\u2019t like the\n  auto-generated slug).<\/p>\n<\/blockquote>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 29027,
            "reputation": 371,
            "user_id": 78087,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/242516374f22a2c1c531c57ed8702144?s=256&d=identicon&r=PG",
            "display_name": "to-chomik",
            "link": "https:\/\/stackoverflow.com\/users\/78087\/to-chomik"
        },
        "is_accepted": false,
        "score": 31,
        "last_activity_date": 1534253677,
        "last_edit_date": 1534253677.0,
        "creation_date": 1237048806,
        "answer_id": 646213,
        "question_id": 645312,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "If you want solution with httplib2 to be oneliner consider instantiating anonymous Http object\r\n\r\n    import httplib2\r\n    resp, content = httplib2.Http().request(&quot;http:\/\/example.com\/foo\/bar&quot;)\r\n\r\n",
        "body": "<p>If you want solution with httplib2 to be oneliner consider instantiating anonymous Http object<\/p>\n\n<pre><code>import httplib2\nresp, content = httplib2.Http().request(\"http:\/\/example.com\/foo\/bar\")\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 64085,
            "reputation": 5312,
            "user_id": 189362,
            "user_type": "registered",
            "accept_rate": 88,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/9c6d00b551a9fd315eab154e0670e412?s=256&d=identicon&r=PG",
            "display_name": "Bjorn",
            "link": "https:\/\/stackoverflow.com\/users\/189362\/bjorn"
        },
        "is_accepted": false,
        "score": 31,
        "last_activity_date": 1541862253,
        "last_edit_date": 1541862253.0,
        "creation_date": 1298301661,
        "answer_id": 5067696,
        "question_id": 5067604,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "I guess `inspect` is the best way to do this. For example:\r\n\r\n    import inspect\r\n    def bar():\r\n        print(&quot;My name is&quot;, inspect.stack()[0][3])",
        "body": "<p>I guess <code>inspect<\/code> is the best way to do this. For example:<\/p>\n\n<pre><code>import inspect\ndef bar():\n    print(\"My name is\", inspect.stack()[0][3])\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 7618245,
            "reputation": 743,
            "user_id": 5776975,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/i.stack.imgur.com\/2cbxK.jpg?s=256&g=1",
            "display_name": "Angie Alejo",
            "link": "https:\/\/stackoverflow.com\/users\/5776975\/angie-alejo"
        },
        "is_accepted": false,
        "score": 31,
        "last_activity_date": 1463600562,
        "last_edit_date": 1592644375.0,
        "creation_date": 1463600562,
        "answer_id": 37308766,
        "question_id": 2812520,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "It worked for me in windows this way:\n\n 1. I changed the name of python files python.py and pythonw.exe to python3.py pythonw3.py \n\n 2. Then I just ran this command in the prompt:\n\n    `python3 -m pip install package`\n\n",
        "body": "<p>It worked for me in windows this way:<\/p>\n<ol>\n<li><p>I changed the name of python files python.py and pythonw.exe to python3.py pythonw3.py<\/p>\n<\/li>\n<li><p>Then I just ran this command in the prompt:<\/p>\n<p><code>python3 -m pip install package<\/code><\/p>\n<\/li>\n<\/ol>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 3591451,
            "reputation": 468,
            "user_id": 2997408,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/222d8b41058c36da221e460e3bcb8d02?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "Jamie Doyle",
            "link": "https:\/\/stackoverflow.com\/users\/2997408\/jamie-doyle"
        },
        "is_accepted": false,
        "score": 31,
        "last_activity_date": 1524484276,
        "last_edit_date": null,
        "creation_date": 1524484276,
        "answer_id": 49980432,
        "question_id": 13187778,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "It seems like `df.to_records()` will work for you. The exact feature you&#39;re looking for [was requested][1] and `to_records` pointed to as an alternative.\r\n\r\nI tried this out locally using your example, and that call yields something very similar to the output you were looking for:\r\n\r\n    rec.array([(1, nan, 0.2, nan), (2, nan, nan, 0.5), (3, nan, 0.2, 0.5),\r\n           (4, 0.1, 0.2, nan), (5, 0.1, 0.2, 0.5), (6, 0.1, nan, 0.5),\r\n           (7, 0.1, nan, nan)],\r\n          dtype=[(u&#39;ID&#39;, &#39;&lt;i8&#39;), (u&#39;A&#39;, &#39;&lt;f8&#39;), (u&#39;B&#39;, &#39;&lt;f8&#39;), (u&#39;C&#39;, &#39;&lt;f8&#39;)])\r\n\r\nNote that this is a `recarray` rather than an `array`. You could move the result in to regular numpy array by calling its constructor as `np.array(df.to_records())`.\r\n\r\n\r\n  [1]: https:\/\/github.com\/pandas-dev\/pandas\/issues\/16561 ",
        "body": "<p>It seems like <code>df.to_records()<\/code> will work for you. The exact feature you're looking for <a href=\"https:\/\/github.com\/pandas-dev\/pandas\/issues\/16561\" rel=\"noreferrer\">was requested<\/a> and <code>to_records<\/code> pointed to as an alternative.<\/p>\n\n<p>I tried this out locally using your example, and that call yields something very similar to the output you were looking for:<\/p>\n\n<pre><code>rec.array([(1, nan, 0.2, nan), (2, nan, nan, 0.5), (3, nan, 0.2, 0.5),\n       (4, 0.1, 0.2, nan), (5, 0.1, 0.2, 0.5), (6, 0.1, nan, 0.5),\n       (7, 0.1, nan, nan)],\n      dtype=[(u'ID', '&lt;i8'), (u'A', '&lt;f8'), (u'B', '&lt;f8'), (u'C', '&lt;f8')])\n<\/code><\/pre>\n\n<p>Note that this is a <code>recarray<\/code> rather than an <code>array<\/code>. You could move the result in to regular numpy array by calling its constructor as <code>np.array(df.to_records())<\/code>.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 3436275,
            "reputation": 1326,
            "user_id": 2879341,
            "user_type": "registered",
            "accept_rate": 75,
            "profile_image": "https:\/\/i.stack.imgur.com\/v3RHH.jpg?s=256&g=1",
            "display_name": "Sidon",
            "link": "https:\/\/stackoverflow.com\/users\/2879341\/sidon"
        },
        "is_accepted": false,
        "score": 31,
        "last_activity_date": 1692962678,
        "last_edit_date": 1692962678.0,
        "creation_date": 1531419899,
        "answer_id": 51312242,
        "question_id": 4289331,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "I was looking for a solution to remove strings&#39; masks, specifically from Brazilian phones numbers, this post not answered but inspired me. This is my solution:\r\n\r\n    &gt;&gt;&gt; phone_number = &#39;+55(11)8715-9877&#39;\r\n    &gt;&gt;&gt; &#39;&#39;.join([n for n in phone_number if n.isdigit()])\r\n    &#39;551187159877&#39;\r\n\r\n",
        "body": "<p>I was looking for a solution to remove strings' masks, specifically from Brazilian phones numbers, this post not answered but inspired me. This is my solution:<\/p>\n<pre><code>&gt;&gt;&gt; phone_number = '+55(11)8715-9877'\n&gt;&gt;&gt; ''.join([n for n in phone_number if n.isdigit()])\n'551187159877'\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 42191,
            "reputation": 6442,
            "user_id": 122851,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/f78d901dc19d54f6d05abf17e3e2c462?s=256&d=identicon&r=PG",
            "display_name": "sunqiang",
            "link": "https:\/\/stackoverflow.com\/users\/122851\/sunqiang"
        },
        "is_accepted": false,
        "score": 30,
        "last_activity_date": 1407080731,
        "last_edit_date": 1407080731.0,
        "creation_date": 1247266579,
        "answer_id": 1112363,
        "question_id": 1112343,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "From Python&#39;s [documentation][1]:\r\n\r\n&lt;!-- language: python --&gt;\r\n\r\n    import signal\r\n    import time\r\n    \r\n    def handler(signum, frame):\r\n        print &#39;Here you go&#39;\r\n    \r\n    signal.signal(signal.SIGINT, handler)\r\n    \r\n    time.sleep(10) # Press Ctrl+c here\r\n\r\n\r\n  [1]: http:\/\/docs.python.org\/library\/signal.html",
        "body": "<p>From Python's <a href=\"http:\/\/docs.python.org\/library\/signal.html\" rel=\"noreferrer\">documentation<\/a>:<\/p>\n\n<pre class=\"lang-py prettyprint-override\"><code>import signal\nimport time\n\ndef handler(signum, frame):\n    print 'Here you go'\n\nsignal.signal(signal.SIGINT, handler)\n\ntime.sleep(10) # Press Ctrl+c here\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 680,
            "reputation": 961801,
            "user_id": 893,
            "user_type": "registered",
            "accept_rate": 84,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/747ffa5da3538e66840ebc0548b8fd58?s=256&d=identicon&r=PG",
            "display_name": "Greg Hewgill",
            "link": "https:\/\/stackoverflow.com\/users\/893\/greg-hewgill"
        },
        "is_accepted": false,
        "score": 30,
        "last_activity_date": 1250078512,
        "last_edit_date": 1250078512.0,
        "creation_date": 1250078060,
        "answer_id": 1265709,
        "question_id": 1265665,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "Use a regular expression:\r\n\r\n    import re\r\n    def RepresentsInt(s):\r\n        return re.match(r&quot;[-+]?\\d+$&quot;, s) is not None\r\n\r\nIf you must accept decimal fractions also:\r\n\r\n    def RepresentsInt(s):\r\n        return re.match(r&quot;[-+]?\\d+(\\.0*)?$&quot;, s) is not None\r\n\r\nFor improved performance if you&#39;re doing this often, compile the regular expression only once using `re.compile()`.",
        "body": "<p>Use a regular expression:<\/p>\n\n<pre><code>import re\ndef RepresentsInt(s):\n    return re.match(r\"[-+]?\\d+$\", s) is not None\n<\/code><\/pre>\n\n<p>If you must accept decimal fractions also:<\/p>\n\n<pre><code>def RepresentsInt(s):\n    return re.match(r\"[-+]?\\d+(\\.0*)?$\", s) is not None\n<\/code><\/pre>\n\n<p>For improved performance if you're doing this often, compile the regular expression only once using <code>re.compile()<\/code>.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 50123,
            "reputation": 365613,
            "user_id": 149392,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/7a561ec0875fcbbe3066ea8fe288ec77?s=256&d=identicon&r=PG",
            "display_name": "sepp2k",
            "link": "https:\/\/stackoverflow.com\/users\/149392\/sepp2k"
        },
        "is_accepted": false,
        "score": 30,
        "last_activity_date": 1676319800,
        "last_edit_date": 1676319800.0,
        "creation_date": 1274969581,
        "answer_id": 2921872,
        "question_id": 2921847,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "In a function call, the single star turns a list into separate arguments (e.g. `zip(*x)` is the same as `zip(x1, x2, x3)` given `x=[x1,x2,x3]`) and the double star turns a dictionary into separate keyword arguments (e.g. `f(**k)` is the same as `f(x=my_x, y=my_y)` given `k = {&#39;x&#39;:my_x, &#39;y&#39;:my_y}`.\r\n\r\nIn a function definition, it&#39;s the other way around: the single star turns an arbitrary number of arguments into a list, and the double start turns an arbitrary number of keyword arguments into a dictionary. E.g. `def foo(*x)` means &quot;foo takes an arbitrary number of arguments and they will be accessible through `x` (i.e. if the user calls `foo(1,2,3)`, `x` will be `(1, 2, 3)`)&quot; and `def bar(**k)` means &quot;bar takes an arbitrary number of keyword arguments and they will be accessible through `k` (i.e. if the user calls `bar(x=42, y=23)`, `k` will be `{&#39;x&#39;: 42, &#39;y&#39;: 23}`)&quot;.",
        "body": "<p>In a function call, the single star turns a list into separate arguments (e.g. <code>zip(*x)<\/code> is the same as <code>zip(x1, x2, x3)<\/code> given <code>x=[x1,x2,x3]<\/code>) and the double star turns a dictionary into separate keyword arguments (e.g. <code>f(**k)<\/code> is the same as <code>f(x=my_x, y=my_y)<\/code> given <code>k = {'x':my_x, 'y':my_y}<\/code>.<\/p>\n<p>In a function definition, it's the other way around: the single star turns an arbitrary number of arguments into a list, and the double start turns an arbitrary number of keyword arguments into a dictionary. E.g. <code>def foo(*x)<\/code> means &quot;foo takes an arbitrary number of arguments and they will be accessible through <code>x<\/code> (i.e. if the user calls <code>foo(1,2,3)<\/code>, <code>x<\/code> will be <code>(1, 2, 3)<\/code>)&quot; and <code>def bar(**k)<\/code> means &quot;bar takes an arbitrary number of keyword arguments and they will be accessible through <code>k<\/code> (i.e. if the user calls <code>bar(x=42, y=23)<\/code>, <code>k<\/code> will be <code>{'x': 42, 'y': 23}<\/code>)&quot;.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 33994,
            "reputation": 105360,
            "user_id": 95612,
            "user_type": "registered",
            "accept_rate": 80,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/e2166d0ea599ad4b0c57054b55f0600f?s=256&d=identicon&r=PG",
            "display_name": "Jochen Ritzel",
            "link": "https:\/\/stackoverflow.com\/users\/95612\/jochen-ritzel"
        },
        "is_accepted": false,
        "score": 30,
        "last_activity_date": 1475590446,
        "last_edit_date": 1475590446.0,
        "creation_date": 1281535370,
        "answer_id": 3459112,
        "question_id": 3459098,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Itertools has a function just for that:\r\n\r\n    import itertools\r\n    it = itertools.repeat(e,n)\r\n\r\nOf course `itertools` gives you a iterator instead of a list. `[e] * n` gives you a list, but, depending on what you will do with those sequences, the `itertools` variant can be much more efficient.",
        "body": "<p>Itertools has a function just for that:<\/p>\n\n<pre><code>import itertools\nit = itertools.repeat(e,n)\n<\/code><\/pre>\n\n<p>Of course <code>itertools<\/code> gives you a iterator instead of a list. <code>[e] * n<\/code> gives you a list, but, depending on what you will do with those sequences, the <code>itertools<\/code> variant can be much more efficient.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 392235,
            "reputation": 2874,
            "user_id": 753382,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/83bf61e125add4ede96b648cbc7c255b?s=256&d=identicon&r=PG",
            "display_name": "Suor",
            "link": "https:\/\/stackoverflow.com\/users\/753382\/suor"
        },
        "is_accepted": false,
        "score": 30,
        "last_activity_date": 1478251340,
        "last_edit_date": 1478251340.0,
        "creation_date": 1401917491,
        "answer_id": 24047936,
        "question_id": 3420122,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "You can do that with [project](http:\/\/funcy.readthedocs.org\/en\/latest\/colls.html#project) function from my [funcy](https:\/\/github.com\/Suor\/funcy) library:\r\n\r\n    from funcy import project\r\n    small_dict = project(big_dict, keys)\r\n\r\nAlso take a look at [select_keys](http:\/\/funcy.readthedocs.org\/en\/latest\/colls.html#select_keys).",
        "body": "<p>You can do that with <a href=\"http:\/\/funcy.readthedocs.org\/en\/latest\/colls.html#project\" rel=\"noreferrer\">project<\/a> function from my <a href=\"https:\/\/github.com\/Suor\/funcy\" rel=\"noreferrer\">funcy<\/a> library:<\/p>\n\n<pre><code>from funcy import project\nsmall_dict = project(big_dict, keys)\n<\/code><\/pre>\n\n<p>Also take a look at <a href=\"http:\/\/funcy.readthedocs.org\/en\/latest\/colls.html#select_keys\" rel=\"noreferrer\">select_keys<\/a>.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 18341,
            "reputation": 1369,
            "user_id": 41957,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/55df09e9496d2ad1af00dffcf0b6938e?s=256&d=identicon&r=PG",
            "display_name": "chnrxn",
            "link": "https:\/\/stackoverflow.com\/users\/41957\/chnrxn"
        },
        "is_accepted": false,
        "score": 30,
        "last_activity_date": 1425132241,
        "last_edit_date": 1425132241.0,
        "creation_date": 1424883237,
        "answer_id": 28724886,
        "question_id": 25981703,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "The most straightforward way I&#39;ve found, is to download and use the &quot;DigiCert High Assurance EV Root CA&quot; from DigiCert at https:\/\/www.digicert.com\/digicert-root-certificates.htm#roots\r\n\r\nYou can visit https:\/\/pypi.python.org\/ to verify the cert issuer by clicking on the lock icon in the address bar, or increase your geek cred by using openssl:\r\n\r\n    $ openssl s_client -connect pypi.python.org:443\r\n    CONNECTED(00000003)\r\n    depth=1 \/C=US\/O=DigiCert Inc\/OU=www.digicert.com\/CN=DigiCert SHA2 Extended Validation Server CA\r\n    verify error:num=20:unable to get local issuer certificate\r\n    verify return:0\r\n    ---\r\n    Certificate chain\r\n     0 s:\/businessCategory=Private Organization\/1.3.6.1.4.1.311.60.2.1.3=US\/1.3.6.1.4.1.311.60.2.1.2=Delaware\/serialNumber=3359300\/street=16 Allen Rd\/postalCode=03894-4801\/C=US\/ST=NH\/L=Wolfeboro,\/O=Python Software Foundation\/CN=www.python.org\r\n       i:\/C=US\/O=DigiCert Inc\/OU=www.digicert.com\/CN=DigiCert SHA2 Extended Validation Server CA\r\n     1 s:\/C=US\/O=DigiCert Inc\/OU=www.digicert.com\/CN=DigiCert SHA2 Extended Validation Server CA\r\n       i:\/C=US\/O=DigiCert Inc\/OU=www.digicert.com\/CN=DigiCert High Assurance EV Root CA\r\n\r\nThe last CN value in the certificate chain is the name of the CA that you need to download.\r\n\r\nFor a one-off effort, do the following:\r\n\r\n 1. Download the [CRT][1] from DigiCert\r\n 2. Convert the CRT to PEM format\r\n 3. Export the PIP_CERT environment variable to the path of the PEM file\r\n\r\n(the last line assumes you are using the bash shell) before running pip.\r\n\r\n    curl -sO http:\/\/cacerts.digicert.com\/DigiCertHighAssuranceEVRootCA.crt \r\n    openssl x509 -inform DES -in DigiCertHighAssuranceEVRootCA.crt -out DigiCertHighAssuranceEVRootCA.pem -text\r\n    export PIP_CERT=`pwd`\/DigiCertHighAssuranceEVRootCA.pem\r\n\r\nTo make this re-usable, put DigiCertHighAssuranceEVRootCA.crt somewhere common and export PIP_CERT accordingly in your ~\/.bashrc.\r\n\r\n\r\n  [1]: http:\/\/cacerts.digicert.com\/DigiCertHighAssuranceEVRootCA.crt",
        "body": "<p>The most straightforward way I've found, is to download and use the \"DigiCert High Assurance EV Root CA\" from DigiCert at <a href=\"https:\/\/www.digicert.com\/digicert-root-certificates.htm#roots\">https:\/\/www.digicert.com\/digicert-root-certificates.htm#roots<\/a><\/p>\n\n<p>You can visit <a href=\"https:\/\/pypi.python.org\/\">https:\/\/pypi.python.org\/<\/a> to verify the cert issuer by clicking on the lock icon in the address bar, or increase your geek cred by using openssl:<\/p>\n\n<pre><code>$ openssl s_client -connect pypi.python.org:443\nCONNECTED(00000003)\ndepth=1 \/C=US\/O=DigiCert Inc\/OU=www.digicert.com\/CN=DigiCert SHA2 Extended Validation Server CA\nverify error:num=20:unable to get local issuer certificate\nverify return:0\n---\nCertificate chain\n 0 s:\/businessCategory=Private Organization\/1.3.6.1.4.1.311.60.2.1.3=US\/1.3.6.1.4.1.311.60.2.1.2=Delaware\/serialNumber=3359300\/street=16 Allen Rd\/postalCode=03894-4801\/C=US\/ST=NH\/L=Wolfeboro,\/O=Python Software Foundation\/CN=www.python.org\n   i:\/C=US\/O=DigiCert Inc\/OU=www.digicert.com\/CN=DigiCert SHA2 Extended Validation Server CA\n 1 s:\/C=US\/O=DigiCert Inc\/OU=www.digicert.com\/CN=DigiCert SHA2 Extended Validation Server CA\n   i:\/C=US\/O=DigiCert Inc\/OU=www.digicert.com\/CN=DigiCert High Assurance EV Root CA\n<\/code><\/pre>\n\n<p>The last CN value in the certificate chain is the name of the CA that you need to download.<\/p>\n\n<p>For a one-off effort, do the following:<\/p>\n\n<ol>\n<li>Download the <a href=\"http:\/\/cacerts.digicert.com\/DigiCertHighAssuranceEVRootCA.crt\">CRT<\/a> from DigiCert<\/li>\n<li>Convert the CRT to PEM format<\/li>\n<li>Export the PIP_CERT environment variable to the path of the PEM file<\/li>\n<\/ol>\n\n<p>(the last line assumes you are using the bash shell) before running pip.<\/p>\n\n<pre><code>curl -sO http:\/\/cacerts.digicert.com\/DigiCertHighAssuranceEVRootCA.crt \nopenssl x509 -inform DES -in DigiCertHighAssuranceEVRootCA.crt -out DigiCertHighAssuranceEVRootCA.pem -text\nexport PIP_CERT=`pwd`\/DigiCertHighAssuranceEVRootCA.pem\n<\/code><\/pre>\n\n<p>To make this re-usable, put DigiCertHighAssuranceEVRootCA.crt somewhere common and export PIP_CERT accordingly in your ~\/.bashrc.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 43047,
            "reputation": 12747,
            "user_id": 125663,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/i.stack.imgur.com\/FZi2z.jpg?s=256&g=1",
            "display_name": "Alice Purcell",
            "link": "https:\/\/stackoverflow.com\/users\/125663\/alice-purcell"
        },
        "is_accepted": false,
        "score": 30,
        "last_activity_date": 1668601831,
        "last_edit_date": 1668601831.0,
        "creation_date": 1429308682,
        "answer_id": 29710273,
        "question_id": 855759,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Try-except-else is great for combining [the EAFP pattern][] with [duck-typing][]:\r\n\r\n    try:\r\n      cs = x.cleanupSet\r\n    except AttributeError:\r\n      pass\r\n    else:\r\n      for v in cs:\r\n        v.cleanup()\r\n\r\nYou might think this na&#239;ve code is fine:\r\n\r\n    try:\r\n      for v in x.cleanupSet:\r\n        v.clenaup()\r\n    except AttributeError:\r\n      pass\r\n\r\nThis is a great way of accidentally hiding severe bugs in your code. I typo-ed `cleanup` there, but the `AttributeError` that would let me know is being swallowed. Worse, what if I&#39;d written it correctly, but the cleanup method was occasionally being passed a user type that had a misnamed attribute, causing it to silently fail half-way through and leave a file unclosed? Good luck debugging that one.\r\n\r\n[the EAFP pattern]: https:\/\/docs.python.org\/2\/glossary.html#term-eafp\r\n[duck-typing]: https:\/\/docs.python.org\/2\/glossary.html#term-duck-typing\r\n",
        "body": "<p>Try-except-else is great for combining <a href=\"https:\/\/docs.python.org\/2\/glossary.html#term-eafp\" rel=\"nofollow noreferrer\">the EAFP pattern<\/a> with <a href=\"https:\/\/docs.python.org\/2\/glossary.html#term-duck-typing\" rel=\"nofollow noreferrer\">duck-typing<\/a>:<\/p>\n<pre><code>try:\n  cs = x.cleanupSet\nexcept AttributeError:\n  pass\nelse:\n  for v in cs:\n    v.cleanup()\n<\/code><\/pre>\n<p>You might think this na\u00efve code is fine:<\/p>\n<pre><code>try:\n  for v in x.cleanupSet:\n    v.clenaup()\nexcept AttributeError:\n  pass\n<\/code><\/pre>\n<p>This is a great way of accidentally hiding severe bugs in your code. I typo-ed <code>cleanup<\/code> there, but the <code>AttributeError<\/code> that would let me know is being swallowed. Worse, what if I'd written it correctly, but the cleanup method was occasionally being passed a user type that had a misnamed attribute, causing it to silently fail half-way through and leave a file unclosed? Good luck debugging that one.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 3020435,
            "reputation": 1874,
            "user_id": 2561618,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/e23313aa2cf030b1ec2ed44793178801?s=256&d=identicon&r=PG",
            "display_name": "aaveg",
            "link": "https:\/\/stackoverflow.com\/users\/2561618\/aaveg"
        },
        "is_accepted": false,
        "score": 30,
        "last_activity_date": 1545416722,
        "last_edit_date": 1545416722.0,
        "creation_date": 1435534187,
        "answer_id": 31105868,
        "question_id": 23294658,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Though the accepted answer is amazing. I would also like to share a quick hack for this problem. (This takes care of the negative age problem as well.) \r\n\r\n    f=lambda age: (age.isdigit() and ((int(age)&gt;=18  and &quot;Can vote&quot; ) or &quot;Cannot vote&quot;)) or \\\r\n    f(input(&quot;invalid input. Try again\\nPlease enter your age: &quot;))\r\n    print(f(input(&quot;Please enter your age: &quot;)))\r\n\r\nP.S. This code is for python 3.x.",
        "body": "<p>Though the accepted answer is amazing. I would also like to share a quick hack for this problem. (This takes care of the negative age problem as well.) <\/p>\n\n<pre><code>f=lambda age: (age.isdigit() and ((int(age)&gt;=18  and \"Can vote\" ) or \"Cannot vote\")) or \\\nf(input(\"invalid input. Try again\\nPlease enter your age: \"))\nprint(f(input(\"Please enter your age: \")))\n<\/code><\/pre>\n\n<p>P.S. This code is for python 3.x.<\/p>\n",
        "community_owned_date": 1435534187.0
    },
    {
        "owner": {
            "account_id": 193260,
            "reputation": 1643,
            "user_id": 434888,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/b527f16640a1f3d18204c23d635b90d7?s=256&d=identicon&r=PG",
            "display_name": "Gino",
            "link": "https:\/\/stackoverflow.com\/users\/434888\/gino"
        },
        "is_accepted": false,
        "score": 30,
        "last_activity_date": 1437755754,
        "last_edit_date": null,
        "creation_date": 1437755754,
        "answer_id": 31615605,
        "question_id": 5067604,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "This is actually derived from the other answers to the question.\r\n\r\nHere&#39;s my take:\r\n\r\n    import sys\r\n    \r\n    # for current func name, specify 0 or no argument.\r\n    # for name of caller of current func, specify 1.\r\n    # for name of caller of caller of current func, specify 2. etc.\r\n    currentFuncName = lambda n=0: sys._getframe(n + 1).f_code.co_name\r\n    \r\n    \r\n    def testFunction():\r\n        print &quot;You are in function:&quot;, currentFuncName()\r\n        print &quot;This function&#39;s caller was:&quot;, currentFuncName(1)    \r\n\r\n    \r\n    def invokeTest():\r\n        testFunction()\r\n        \r\n    \r\n    invokeTest()\r\n    \r\n    # end of file\r\n\r\nThe likely advantage of this version over using inspect.stack() is that it should be thousands of times faster [see Alex Melihoff&#39;s post and timings regarding using sys._getframe() versus using inspect.stack() ].",
        "body": "<p>This is actually derived from the other answers to the question.<\/p>\n\n<p>Here's my take:<\/p>\n\n<pre><code>import sys\n\n# for current func name, specify 0 or no argument.\n# for name of caller of current func, specify 1.\n# for name of caller of caller of current func, specify 2. etc.\ncurrentFuncName = lambda n=0: sys._getframe(n + 1).f_code.co_name\n\n\ndef testFunction():\n    print \"You are in function:\", currentFuncName()\n    print \"This function's caller was:\", currentFuncName(1)    \n\n\ndef invokeTest():\n    testFunction()\n\n\ninvokeTest()\n\n# end of file\n<\/code><\/pre>\n\n<p>The likely advantage of this version over using inspect.stack() is that it should be thousands of times faster [see Alex Melihoff's post and timings regarding using sys._getframe() versus using inspect.stack() ].<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 203326,
            "reputation": 30259,
            "user_id": 450917,
            "user_type": "registered",
            "accept_rate": 60,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/e09fd547c9c17163d34a1e97ed744639?s=256&d=identicon&r=PG",
            "display_name": "Gringo Suave",
            "link": "https:\/\/stackoverflow.com\/users\/450917\/gringo-suave"
        },
        "is_accepted": false,
        "score": 30,
        "last_activity_date": 1666211372,
        "last_edit_date": 1666211372.0,
        "creation_date": 1453500639,
        "answer_id": 34956791,
        "question_id": 983354,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "**Cross Platform, Python 2\/3 code:**\r\n\r\n    # import sys, os\r\n\r\n    def wait_key():\r\n        &#39;&#39;&#39; Wait for a key press on the console and return it. &#39;&#39;&#39;\r\n        result = None\r\n        if os.name == &#39;nt&#39;:\r\n            import msvcrt\r\n            result = msvcrt.getwch()\r\n        else:\r\n            import termios\r\n            fd = sys.stdin.fileno()\r\n\r\n            oldterm = termios.tcgetattr(fd)\r\n            newattr = termios.tcgetattr(fd)\r\n            newattr[3] = newattr[3] &amp; ~termios.ICANON &amp; ~termios.ECHO\r\n            termios.tcsetattr(fd, termios.TCSANOW, newattr)\r\n\r\n            try:\r\n                result = sys.stdin.read(1)\r\n            except IOError:\r\n                pass\r\n            finally:\r\n                termios.tcsetattr(fd, termios.TCSAFLUSH, oldterm)\r\n\r\n        return result\r\n\r\n\r\nI removed the fctl\/non-blocking stuff because it was giving `IOError`s and I didn&#39;t need it.  I&#39;m using this code specifically because I want it to block.  ;)\r\n\r\n**Addendum:**\r\n\r\nI implemented this in a package on PyPI with a lot of other goodies called [console](https:\/\/pypi.org\/project\/console\/):\r\n\r\n    &gt;&gt;&gt; from console.utils import wait_key\r\n\r\n    &gt;&gt;&gt; wait_key()\r\n    &#39;h&#39;\r\n\r\n",
        "body": "<p><strong>Cross Platform, Python 2\/3 code:<\/strong><\/p>\n<pre><code># import sys, os\n\ndef wait_key():\n    ''' Wait for a key press on the console and return it. '''\n    result = None\n    if os.name == 'nt':\n        import msvcrt\n        result = msvcrt.getwch()\n    else:\n        import termios\n        fd = sys.stdin.fileno()\n\n        oldterm = termios.tcgetattr(fd)\n        newattr = termios.tcgetattr(fd)\n        newattr[3] = newattr[3] &amp; ~termios.ICANON &amp; ~termios.ECHO\n        termios.tcsetattr(fd, termios.TCSANOW, newattr)\n\n        try:\n            result = sys.stdin.read(1)\n        except IOError:\n            pass\n        finally:\n            termios.tcsetattr(fd, termios.TCSAFLUSH, oldterm)\n\n    return result\n<\/code><\/pre>\n<p>I removed the fctl\/non-blocking stuff because it was giving <code>IOError<\/code>s and I didn't need it.  I'm using this code specifically because I want it to block.  ;)<\/p>\n<p><strong>Addendum:<\/strong><\/p>\n<p>I implemented this in a package on PyPI with a lot of other goodies called <a href=\"https:\/\/pypi.org\/project\/console\/\" rel=\"noreferrer\">console<\/a>:<\/p>\n<pre><code>&gt;&gt;&gt; from console.utils import wait_key\n\n&gt;&gt;&gt; wait_key()\n'h'\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 10128799,
            "reputation": 992,
            "user_id": 7483073,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/cf98d29c268b2874c51f9dc18ce0ab05?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "Hatatister",
            "link": "https:\/\/stackoverflow.com\/users\/7483073\/hatatister"
        },
        "is_accepted": false,
        "score": 30,
        "last_activity_date": 1681695976,
        "last_edit_date": 1681695976.0,
        "creation_date": 1530051819,
        "answer_id": 51052134,
        "question_id": 1641219,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Python does not have any private variables like C++ or Java does. You could access any member variable at any time if wanted, too. However, you don&#39;t need private variables in Python, because in Python it is not bad to expose your classes&#39; member variables. If you have the need to encapsulate a member variable, you can do this by using &quot;@property&quot; later on without breaking existing client code.\r\n\r\nIn Python, the single underscore &quot;_&quot; is used to indicate that a method or variable is not considered as part of the public API of a class and that this part of the API could change between different versions. You can use these methods and variables, but your code could break, if you use a newer version of this class.\r\n\r\nThe double underscore &quot;__&quot;  does not mean a &quot;private variable&quot;. You use it to define variables which are &quot;class local&quot; and which can not be easily overridden by subclasses. It mangles the variables name.\r\n\r\nFor example:\r\n\r\n    class A(object):\r\n        def __init__(self):\r\n            self.__foobar = None # Will be automatically mangled to self._A__foobar\r\n\r\n    class B(A):\r\n        def __init__(self):\r\n            self.__foobar = 1 # Will be automatically mangled to self._B__foobar\r\n\r\nself.__foobar&#39;s name is automatically mangled to self._A__foobar in class A. In class B it is mangled to self._B__foobar. So every subclass can define its own variable __foobar without overriding its parents variable(s). But nothing prevents you from accessing variables beginning with double underscores. However, name mangling prevents you from calling this variables \/methods incidentally.\r\n\r\nI strongly recommend you watch Raymond Hettinger&#39;s [Python&#39;s class development toolkit][1] from [PyCon][2] 2013, which gives a good example why and how you should use @property and &quot;__&quot;-instance variables (relevant section starts at [37min 16sec][3]).\r\n\r\nIf you have exposed public variables and you have the need to encapsulate them, then you can use @property. Therefore you can start with the simplest solution possible. You can leave member variables public unless you have a concrete reason to not do so. Here is an example:\r\n\r\n    class Distance:\r\n        def __init__(self, meter):\r\n            self.meter = meter\r\n\r\n\r\n    d = Distance(1.0)\r\n    print(d.meter)\r\n    # prints 1.0\r\n\r\n    class Distance:\r\n        def __init__(self, meter):\r\n            # Customer request: Distances must be stored in millimeters.\r\n            # Public available internals must be changed.\r\n            # This would break client code in C++.\r\n            # This is why you never expose public variables in C++ or Java.\r\n            # However, this is Python.\r\n            self.millimeter = meter * 1000\r\n\r\n        # In Python we have @property to the rescue.\r\n        @property\r\n        def meter(self):\r\n            return self.millimeter *0.001\r\n\r\n        @meter.setter\r\n        def meter(self, value):\r\n            self.millimeter = value * 1000\r\n\r\n    d = Distance(1.0)\r\n    print(d.meter)\r\n    # prints 1.0\r\n\r\n\r\n  [1]: https:\/\/www.youtube.com\/watch?v=HTLu2DFOdTg\r\n  [2]: https:\/\/en.wikipedia.org\/wiki\/Python_Conference\r\n  [3]: https:\/\/youtu.be\/HTLu2DFOdTg?t=2236",
        "body": "<p>Python does not have any private variables like C++ or Java does. You could access any member variable at any time if wanted, too. However, you don't need private variables in Python, because in Python it is not bad to expose your classes' member variables. If you have the need to encapsulate a member variable, you can do this by using &quot;@property&quot; later on without breaking existing client code.<\/p>\n<p>In Python, the single underscore &quot;_&quot; is used to indicate that a method or variable is not considered as part of the public API of a class and that this part of the API could change between different versions. You can use these methods and variables, but your code could break, if you use a newer version of this class.<\/p>\n<p>The double underscore &quot;__&quot;  does not mean a &quot;private variable&quot;. You use it to define variables which are &quot;class local&quot; and which can not be easily overridden by subclasses. It mangles the variables name.<\/p>\n<p>For example:<\/p>\n<pre><code>class A(object):\n    def __init__(self):\n        self.__foobar = None # Will be automatically mangled to self._A__foobar\n\nclass B(A):\n    def __init__(self):\n        self.__foobar = 1 # Will be automatically mangled to self._B__foobar\n<\/code><\/pre>\n<p>self.__foobar's name is automatically mangled to self._A__foobar in class A. In class B it is mangled to self._B__foobar. So every subclass can define its own variable __foobar without overriding its parents variable(s). But nothing prevents you from accessing variables beginning with double underscores. However, name mangling prevents you from calling this variables \/methods incidentally.<\/p>\n<p>I strongly recommend you watch Raymond Hettinger's <a href=\"https:\/\/www.youtube.com\/watch?v=HTLu2DFOdTg\" rel=\"noreferrer\">Python's class development toolkit<\/a> from <a href=\"https:\/\/en.wikipedia.org\/wiki\/Python_Conference\" rel=\"noreferrer\">PyCon<\/a> 2013, which gives a good example why and how you should use @property and &quot;__&quot;-instance variables (relevant section starts at <a href=\"https:\/\/youtu.be\/HTLu2DFOdTg?t=2236\" rel=\"noreferrer\">37min 16sec<\/a>).<\/p>\n<p>If you have exposed public variables and you have the need to encapsulate them, then you can use @property. Therefore you can start with the simplest solution possible. You can leave member variables public unless you have a concrete reason to not do so. Here is an example:<\/p>\n<pre><code>class Distance:\n    def __init__(self, meter):\n        self.meter = meter\n\n\nd = Distance(1.0)\nprint(d.meter)\n# prints 1.0\n\nclass Distance:\n    def __init__(self, meter):\n        # Customer request: Distances must be stored in millimeters.\n        # Public available internals must be changed.\n        # This would break client code in C++.\n        # This is why you never expose public variables in C++ or Java.\n        # However, this is Python.\n        self.millimeter = meter * 1000\n\n    # In Python we have @property to the rescue.\n    @property\n    def meter(self):\n        return self.millimeter *0.001\n\n    @meter.setter\n    def meter(self, value):\n        self.millimeter = value * 1000\n\nd = Distance(1.0)\nprint(d.meter)\n# prints 1.0\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 250071,
            "reputation": 481,
            "user_id": 3032173,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/R6nME.jpg?s=256&g=1",
            "display_name": "cad106uk",
            "link": "https:\/\/stackoverflow.com\/users\/3032173\/cad106uk"
        },
        "is_accepted": false,
        "score": 29,
        "last_activity_date": 1385380015,
        "last_edit_date": 1592644375.0,
        "creation_date": 1385380015,
        "answer_id": 20192278,
        "question_id": 5067604,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "I found a wrapper that will write the function name\n\n    from functools import wraps\n    \n    def tmp_wrap(func):\n        @wraps(func)\n        def tmp(*args, **kwargs):\n            print func.__name__\n            return func(*args, **kwargs)\n        return tmp\n    \n    @tmp_wrap\n    def my_funky_name():\n        print &quot;STUB&quot;\n    \n    my_funky_name()\n\nThis will print\n\n&gt; my_funky_name\n&gt;\n&gt; STUB\n\n",
        "body": "<p>I found a wrapper that will write the function name<\/p>\n<pre><code>from functools import wraps\n\ndef tmp_wrap(func):\n    @wraps(func)\n    def tmp(*args, **kwargs):\n        print func.__name__\n        return func(*args, **kwargs)\n    return tmp\n\n@tmp_wrap\ndef my_funky_name():\n    print &quot;STUB&quot;\n\nmy_funky_name()\n<\/code><\/pre>\n<p>This will print<\/p>\n<blockquote>\n<p>my_funky_name<\/p>\n<p>STUB<\/p>\n<\/blockquote>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1157148,
            "reputation": 23683,
            "user_id": 1484447,
            "user_type": "registered",
            "accept_rate": 40,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/a1aba4d4c415547864897dc6bc68ca46?s=256&d=identicon&r=PG",
            "display_name": "Ricky Sahu",
            "link": "https:\/\/stackoverflow.com\/users\/1484447\/ricky-sahu"
        },
        "is_accepted": false,
        "score": 29,
        "last_activity_date": 1455119995,
        "last_edit_date": 1455119995.0,
        "creation_date": 1455118986,
        "answer_id": 35319592,
        "question_id": 44778,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "`&quot;,&quot;.join(l)` will not work for all cases. I&#39;d suggest using the csv module with StringIO\r\n\r\n    import StringIO\r\n    import csv\r\n\r\n    l = [&#39;list&#39;,&#39;of&#39;,&#39;[&quot;&quot;&quot;crazy&quot;quotes&quot;and\\&#39;&#39;,123,&#39;other things&#39;]\r\n\r\n    line = StringIO.StringIO()\r\n    writer = csv.writer(line)\r\n    writer.writerow(l)\r\n    csvcontent = line.getvalue()\r\n    # &#39;list,of,&quot;[&quot;&quot;&quot;&quot;&quot;&quot;crazy&quot;&quot;quotes&quot;&quot;and\\&#39;&quot;,123,other things\\r\\n&#39;\r\n\r\n",
        "body": "<p><code>\",\".join(l)<\/code> will not work for all cases. I'd suggest using the csv module with StringIO<\/p>\n\n<pre><code>import StringIO\nimport csv\n\nl = ['list','of','[\"\"\"crazy\"quotes\"and\\'',123,'other things']\n\nline = StringIO.StringIO()\nwriter = csv.writer(line)\nwriter.writerow(l)\ncsvcontent = line.getvalue()\n# 'list,of,\"[\"\"\"\"\"\"crazy\"\"quotes\"\"and\\'\",123,other things\\r\\n'\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 3515521,
            "reputation": 5321,
            "user_id": 2939061,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/NoM9S.gif?s=256&g=1",
            "display_name": "quasoft",
            "link": "https:\/\/stackoverflow.com\/users\/2939061\/quasoft"
        },
        "is_accepted": false,
        "score": 29,
        "last_activity_date": 1486715639,
        "last_edit_date": 1486715639.0,
        "creation_date": 1476036627,
        "answer_id": 39946882,
        "question_id": 2812520,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Other answers show how to use pip with both 2.X and 3.X Python, but does not show **how to handle the case of multiple Python distributions (eg. original Python and Anaconda Python)**.\r\n\r\nI have a total of 3 Python versions: original Python 2.7 and Python 3.5 and Anaconda Python 3.5.\r\n\r\nHere is how I install a package into:\r\n\r\n1. Original **Python 3.5**:\r\n\r\n        \/usr\/bin\/python3 -m pip install python-daemon\r\n\r\n2. Original **Python 2.7**:\r\n\r\n        \/usr\/bin\/python -m pip install python-daemon\r\n\r\n3. **Anaconda Python 3.5**:\r\n\r\n        python3 -m pip install python-daemon\r\n\r\n   or\r\n\r\n        pip3 install python-daemon\r\n\r\n   Simpler, as Anaconda overrides original Python binaries in user environment.\r\n\r\n   *Of course, installing in anaconda should be done with `conda` command, this is just an example.*\r\n\r\n------\r\n\r\nAlso, make sure that pip is installed for that specific python.You might need to manually install pip. This works in Ubuntu 16.04:\r\n\r\n    sudo apt-get install python-pip \r\n\r\nor\r\n\r\n    sudo apt-get install python3-pip\r\n",
        "body": "<p>Other answers show how to use pip with both 2.X and 3.X Python, but does not show <strong>how to handle the case of multiple Python distributions (eg. original Python and Anaconda Python)<\/strong>.<\/p>\n\n<p>I have a total of 3 Python versions: original Python 2.7 and Python 3.5 and Anaconda Python 3.5.<\/p>\n\n<p>Here is how I install a package into:<\/p>\n\n<ol>\n<li><p>Original <strong>Python 3.5<\/strong>:<\/p>\n\n<pre><code>\/usr\/bin\/python3 -m pip install python-daemon\n<\/code><\/pre><\/li>\n<li><p>Original <strong>Python 2.7<\/strong>:<\/p>\n\n<pre><code>\/usr\/bin\/python -m pip install python-daemon\n<\/code><\/pre><\/li>\n<li><p><strong>Anaconda Python 3.5<\/strong>:<\/p>\n\n<pre><code>python3 -m pip install python-daemon\n<\/code><\/pre>\n\n<p>or<\/p>\n\n<pre><code>pip3 install python-daemon\n<\/code><\/pre>\n\n<p>Simpler, as Anaconda overrides original Python binaries in user environment.<\/p>\n\n<p><em>Of course, installing in anaconda should be done with <code>conda<\/code> command, this is just an example.<\/em><\/p><\/li>\n<\/ol>\n\n<hr>\n\n<p>Also, make sure that pip is installed for that specific python.You might need to manually install pip. This works in Ubuntu 16.04:<\/p>\n\n<pre><code>sudo apt-get install python-pip \n<\/code><\/pre>\n\n<p>or<\/p>\n\n<pre><code>sudo apt-get install python3-pip\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 144356,
            "reputation": 55214,
            "user_id": 353337,
            "user_type": "registered",
            "accept_rate": 75,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/500a1e2e864ae08f386afde2cd21add0?s=256&d=identicon&r=PG",
            "display_name": "Nico Schl&#246;mer",
            "link": "https:\/\/stackoverflow.com\/users\/353337\/nico-schl%c3%b6mer"
        },
        "is_accepted": false,
        "score": 29,
        "last_activity_date": 1694147131,
        "last_edit_date": 1694147131.0,
        "creation_date": 1495526339,
        "answer_id": 44129039,
        "question_id": 2474015,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "I benchmarked the main answers using [perfplot](https:\/\/github.com\/nschloe\/perfplot) (a pet project of mine) on Python 3.11 and it turns out that \r\n\r\n```python\r\nvalues.index(min(values))\r\n```\r\n\r\nis the fastest (lower is better):\r\n\r\n[![enter image description here][1]][1]\r\n\r\nunless your array is already a numpy array.\r\n\r\n---\r\n\r\nCode for generating the plot:\r\n\r\n```python\r\nimport numpy as np\r\nimport operator\r\nimport perfplot\r\n\r\n\r\ndef min_enumerate(a):\r\n    return min(enumerate(a), key=lambda x: x[1])[0]\r\n\r\ndef min_enumerate_itemgetter(a):\r\n    min_index, min_value = min(enumerate(a), key=operator.itemgetter(1))\r\n    return min_index\r\n\r\ndef getitem(a):\r\n    return min(range(len(a)), key=a.__getitem__)\r\n\r\ndef np_argmin(a):\r\n    return np.argmin(a)\r\n\r\ndef index_min(a):\r\n    return a.index(min(a))\r\n\r\n\r\nb = perfplot.bench(\r\n    setup=lambda n: np.random.rand(n).tolist(),\r\n    kernels=[\r\n        min_enumerate,\r\n        min_enumerate_itemgetter,\r\n        getitem,\r\n        np_argmin,\r\n        index_min,\r\n    ],\r\n    labels = [\r\n        &quot;key=lambda x: x[1]&quot;,\r\n        &quot;key=itemgetter(1)&quot;,\r\n        &quot;key=.__getitem__&quot;,\r\n        &quot;np.argmin()&quot;,\r\n        &quot;.index()&quot;\r\n    ],\r\n    xlabel=&quot;len(list)&quot;,\r\n    n_range=[2**k for k in range(20)],\r\n)\r\nb.show()\r\n```\r\n\r\n\r\n  [1]: https:\/\/i.stack.imgur.com\/T5KJB.png",
        "body": "<p>I benchmarked the main answers using <a href=\"https:\/\/github.com\/nschloe\/perfplot\" rel=\"nofollow noreferrer\">perfplot<\/a> (a pet project of mine) on Python 3.11 and it turns out that<\/p>\n<pre class=\"lang-py prettyprint-override\"><code>values.index(min(values))\n<\/code><\/pre>\n<p>is the fastest (lower is better):<\/p>\n<p><a href=\"https:\/\/i.stack.imgur.com\/T5KJB.png\" rel=\"nofollow noreferrer\"><img src=\"https:\/\/i.stack.imgur.com\/T5KJB.png\" alt=\"enter image description here\" \/><\/a><\/p>\n<p>unless your array is already a numpy array.<\/p>\n<hr \/>\n<p>Code for generating the plot:<\/p>\n<pre class=\"lang-py prettyprint-override\"><code>import numpy as np\nimport operator\nimport perfplot\n\n\ndef min_enumerate(a):\n    return min(enumerate(a), key=lambda x: x[1])[0]\n\ndef min_enumerate_itemgetter(a):\n    min_index, min_value = min(enumerate(a), key=operator.itemgetter(1))\n    return min_index\n\ndef getitem(a):\n    return min(range(len(a)), key=a.__getitem__)\n\ndef np_argmin(a):\n    return np.argmin(a)\n\ndef index_min(a):\n    return a.index(min(a))\n\n\nb = perfplot.bench(\n    setup=lambda n: np.random.rand(n).tolist(),\n    kernels=[\n        min_enumerate,\n        min_enumerate_itemgetter,\n        getitem,\n        np_argmin,\n        index_min,\n    ],\n    labels = [\n        &quot;key=lambda x: x[1]&quot;,\n        &quot;key=itemgetter(1)&quot;,\n        &quot;key=.__getitem__&quot;,\n        &quot;np.argmin()&quot;,\n        &quot;.index()&quot;\n    ],\n    xlabel=&quot;len(list)&quot;,\n    n_range=[2**k for k in range(20)],\n)\nb.show()\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 50397,
            "reputation": 4991,
            "user_id": 150340,
            "user_type": "registered",
            "accept_rate": 94,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/a367f00d21bc986d5f74f6b56dabddb6?s=256&d=identicon&r=PG",
            "display_name": "c089",
            "link": "https:\/\/stackoverflow.com\/users\/150340\/c089"
        },
        "is_accepted": false,
        "score": 28,
        "last_activity_date": 1283258429,
        "last_edit_date": 1283258429.0,
        "creation_date": 1249458823,
        "answer_id": 1231745,
        "question_id": 1231688,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "There are [several][1] sources on the net suggesting a hack by reinstalling the package with the -m option and then just removing the .egg file in lib\/ and the binaries in bin\/. Also, discussion about this setuptools issue can be found on the python bug tracker as setuptools [issue 21][2].\r\n\r\nEdit: Added the link to the python bugtracker.\r\n\r\n\r\n  [1]: http:\/\/thingsilearned.com\/2009\/04\/13\/easy_install-uninstalling\/\r\n  [2]: http:\/\/bugs.python.org\/setuptools\/issue21",
        "body": "<p>There are <a href=\"http:\/\/thingsilearned.com\/2009\/04\/13\/easy_install-uninstalling\/\" rel=\"noreferrer\">several<\/a> sources on the net suggesting a hack by reinstalling the package with the -m option and then just removing the .egg file in lib\/ and the binaries in bin\/. Also, discussion about this setuptools issue can be found on the python bug tracker as setuptools <a href=\"http:\/\/bugs.python.org\/setuptools\/issue21\" rel=\"noreferrer\">issue 21<\/a>.<\/p>\n\n<p>Edit: Added the link to the python bugtracker.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 82403,
            "reputation": 6456,
            "user_id": 231717,
            "user_type": "registered",
            "accept_rate": 87,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/f2ce03022468943e97f3381c61fd8601?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "smerlin",
            "link": "https:\/\/stackoverflow.com\/users\/231717\/smerlin"
        },
        "is_accepted": false,
        "score": 28,
        "last_activity_date": 1445947936,
        "last_edit_date": 1445947936.0,
        "creation_date": 1261501678,
        "answer_id": 1947766,
        "question_id": 166506,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "im using following module:\r\n\r\n    #!\/usr\/bin\/python\r\n    # module for getting the lan ip address of the computer\r\n    \r\n    import os\r\n    import socket\r\n    \r\n    if os.name != &quot;nt&quot;:\r\n    \timport fcntl\r\n    \timport struct\r\n    \tdef get_interface_ip(ifname):\r\n    \t\ts = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\r\n    \t\treturn socket.inet_ntoa(fcntl.ioctl(\r\n    \t\t\t\ts.fileno(),\r\n    \t\t\t\t0x8915,  # SIOCGIFADDR\r\n    \t\t\t\tstruct.pack(&#39;256s&#39;, bytes(ifname[:15], &#39;utf-8&#39;))\r\n    \t\t\t\t# Python 2.7: remove the second argument for the bytes call\r\n    \t\t\t)[20:24])\r\n    \t\t\t\r\n    def get_lan_ip():\r\n    \tip = socket.gethostbyname(socket.gethostname())\r\n    \tif ip.startswith(&quot;127.&quot;) and os.name != &quot;nt&quot;:\r\n    \t\tinterfaces = [&quot;eth0&quot;,&quot;eth1&quot;,&quot;eth2&quot;,&quot;wlan0&quot;,&quot;wlan1&quot;,&quot;wifi0&quot;,&quot;ath0&quot;,&quot;ath1&quot;,&quot;ppp0&quot;]\r\n    \t\tfor ifname in interfaces:\r\n    \t\t\ttry:\r\n    \t\t\t\tip = get_interface_ip(ifname)\r\n    \t\t\t\tbreak;\r\n    \t\t\texcept IOError:\r\n    \t\t\t\tpass\r\n    \treturn ip\r\n\r\nTested with windows and linux (and doesnt require additional modules for those)\r\nintended for use on systems which are in a single IPv4 based LAN.\r\n\r\nThe fixed list of interface names does not work for recent linux versions, which have adopted the systemd v197 change regarding predictable interface names as pointed out by [Alexander][1].\r\nIn such cases, you need to manually replace the list with the interface names on your system, or use another solution like [netifaces][2].\r\n\r\n\r\n  [1]: https:\/\/stackoverflow.com\/questions\/166506\/finding-local-ip-addresses-using-pythons-stdlib\/1947766?noredirect=1#comment35654143_1947766\r\n  [2]: http:\/\/alastairs-place.net\/projects\/netifaces\/",
        "body": "<p>im using following module:<\/p>\n\n<pre><code>#!\/usr\/bin\/python\n# module for getting the lan ip address of the computer\n\nimport os\nimport socket\n\nif os.name != \"nt\":\n    import fcntl\n    import struct\n    def get_interface_ip(ifname):\n        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n        return socket.inet_ntoa(fcntl.ioctl(\n                s.fileno(),\n                0x8915,  # SIOCGIFADDR\n                struct.pack('256s', bytes(ifname[:15], 'utf-8'))\n                # Python 2.7: remove the second argument for the bytes call\n            )[20:24])\n\ndef get_lan_ip():\n    ip = socket.gethostbyname(socket.gethostname())\n    if ip.startswith(\"127.\") and os.name != \"nt\":\n        interfaces = [\"eth0\",\"eth1\",\"eth2\",\"wlan0\",\"wlan1\",\"wifi0\",\"ath0\",\"ath1\",\"ppp0\"]\n        for ifname in interfaces:\n            try:\n                ip = get_interface_ip(ifname)\n                break;\n            except IOError:\n                pass\n    return ip\n<\/code><\/pre>\n\n<p>Tested with windows and linux (and doesnt require additional modules for those)\nintended for use on systems which are in a single IPv4 based LAN.<\/p>\n\n<p>The fixed list of interface names does not work for recent linux versions, which have adopted the systemd v197 change regarding predictable interface names as pointed out by <a href=\"https:\/\/stackoverflow.com\/questions\/166506\/finding-local-ip-addresses-using-pythons-stdlib\/1947766?noredirect=1#comment35654143_1947766\">Alexander<\/a>.\nIn such cases, you need to manually replace the list with the interface names on your system, or use another solution like <a href=\"http:\/\/alastairs-place.net\/projects\/netifaces\/\" rel=\"noreferrer\">netifaces<\/a>.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 55277,
            "reputation": 568,
            "user_id": 165478,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/4kQEj.jpg?s=256&g=1",
            "display_name": "Jim",
            "link": "https:\/\/stackoverflow.com\/users\/165478\/jim"
        },
        "is_accepted": false,
        "score": 28,
        "last_activity_date": 1530912503,
        "last_edit_date": 1530912503.0,
        "creation_date": 1385604502,
        "answer_id": 20256491,
        "question_id": 3420122,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "This one liner lambda should work:\r\n\r\n    dictfilt = lambda x, y: dict([ (i,x[i]) for i in x if i in set(y) ])\r\n\r\nHere&#39;s an example:\r\n\r\n    my_dict = {&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4}\r\n    wanted_keys = (&quot;c&quot;,&quot;d&quot;)\r\n    \r\n    # run it\r\n    In [10]: dictfilt(my_dict, wanted_keys)\r\n    Out[10]: {&#39;c&#39;: 3, &#39;d&#39;: 4}\r\n        \r\nIt&#39;s a basic list comprehension iterating over your dict keys (i in x) and outputs a list of tuple (key,value) pairs if the key lives in your desired key list (y). A dict() wraps the whole thing to output as a dict object.\r\n",
        "body": "<p>This one liner lambda should work:<\/p>\n\n<pre><code>dictfilt = lambda x, y: dict([ (i,x[i]) for i in x if i in set(y) ])\n<\/code><\/pre>\n\n<p>Here's an example:<\/p>\n\n<pre><code>my_dict = {\"a\":1,\"b\":2,\"c\":3,\"d\":4}\nwanted_keys = (\"c\",\"d\")\n\n# run it\nIn [10]: dictfilt(my_dict, wanted_keys)\nOut[10]: {'c': 3, 'd': 4}\n<\/code><\/pre>\n\n<p>It's a basic list comprehension iterating over your dict keys (i in x) and outputs a list of tuple (key,value) pairs if the key lives in your desired key list (y). A dict() wraps the whole thing to output as a dict object.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2303653,
            "reputation": 34788,
            "user_id": 2023392,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/65e1ee6b43149bbfb6d80ce8edb6e425?s=256&d=identicon&r=PG",
            "display_name": "radtek",
            "link": "https:\/\/stackoverflow.com\/users\/2023392\/radtek"
        },
        "is_accepted": false,
        "score": 28,
        "last_activity_date": 1487806198,
        "last_edit_date": 1487806198.0,
        "creation_date": 1416496465,
        "answer_id": 27042998,
        "question_id": 5420789,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "This is what worked for me (On RHEL, CentOS:\r\n\r\n    sudo yum install postgresql postgresql-devel python-devel\r\n\r\nAnd now include the path to your postgresql binary dir with you pip install:\r\n\r\n    sudo PATH=$PATH:\/usr\/pgsql-9.3\/bin\/ pip install psycopg2\r\n\r\nMake sure to include the correct path. Thats all :)\r\n\r\nUPDATE: For python 3, please install `python3-devel` instead of `python-devel`",
        "body": "<p>This is what worked for me (On RHEL, CentOS:<\/p>\n\n<pre><code>sudo yum install postgresql postgresql-devel python-devel\n<\/code><\/pre>\n\n<p>And now include the path to your postgresql binary dir with you pip install:<\/p>\n\n<pre><code>sudo PATH=$PATH:\/usr\/pgsql-9.3\/bin\/ pip install psycopg2\n<\/code><\/pre>\n\n<p>Make sure to include the correct path. Thats all :)<\/p>\n\n<p>UPDATE: For python 3, please install <code>python3-devel<\/code> instead of <code>python-devel<\/code><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4788652,
            "reputation": 8636,
            "user_id": 3868428,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/76b73c0812c4020a568e76caa4cee676?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "JoeCondron",
            "link": "https:\/\/stackoverflow.com\/users\/3868428\/joecondron"
        },
        "is_accepted": false,
        "score": 28,
        "last_activity_date": 1425568826,
        "last_edit_date": null,
        "creation_date": 1425568826,
        "answer_id": 28881373,
        "question_id": 13331698,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "The method you are looking for is Series.combine. \r\nHowever, it seems some care has to be taken around datatypes. \r\nIn your example, you would (as I did when testing the answer) naively call \r\n    \r\n    df[&#39;col_3&#39;] = df.col_1.combine(df.col_2, func=get_sublist)\r\n\r\nHowever, this throws the error: \r\n\r\n    ValueError: setting an array element with a sequence.\r\n\r\nMy best guess is that it seems to expect the result to be of the same type as the series calling the method (df.col_1 here). However, the following works:\r\n\r\n    df[&#39;col_3&#39;] = df.col_1.astype(object).combine(df.col_2, func=get_sublist)\r\n\r\n    df\r\n\r\n       ID\tcol_1\tcol_2\tcol_3\r\n    0\t1\t0\t1\t[a, b]\r\n    1\t2\t2\t4\t[c, d, e]\r\n    2\t3\t3\t5\t[d, e, f]\r\n",
        "body": "<p>The method you are looking for is Series.combine. \nHowever, it seems some care has to be taken around datatypes. \nIn your example, you would (as I did when testing the answer) naively call <\/p>\n\n<pre><code>df['col_3'] = df.col_1.combine(df.col_2, func=get_sublist)\n<\/code><\/pre>\n\n<p>However, this throws the error: <\/p>\n\n<pre><code>ValueError: setting an array element with a sequence.\n<\/code><\/pre>\n\n<p>My best guess is that it seems to expect the result to be of the same type as the series calling the method (df.col_1 here). However, the following works:<\/p>\n\n<pre><code>df['col_3'] = df.col_1.astype(object).combine(df.col_2, func=get_sublist)\n\ndf\n\n   ID   col_1   col_2   col_3\n0   1   0   1   [a, b]\n1   2   2   4   [c, d, e]\n2   3   3   5   [d, e, f]\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 7778158,
            "reputation": 289,
            "user_id": 5885544,
            "user_type": "registered",
            "profile_image": "https:\/\/graph.facebook.com\/10101646806737996\/picture?type=large",
            "display_name": "Robert Geiger",
            "link": "https:\/\/stackoverflow.com\/users\/5885544\/robert-geiger"
        },
        "is_accepted": false,
        "score": 28,
        "last_activity_date": 1454624204,
        "last_edit_date": null,
        "creation_date": 1454624204,
        "answer_id": 35212740,
        "question_id": 18039057,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "I had this problem as well but perhaps for a different reason. I had some trailing commas in my CSV that were adding an additional column that pandas was attempting to read. Using the following works but it simply ignores the bad lines:\r\n\r\n    data = pd.read_csv(&#39;file1.csv&#39;, error_bad_lines=False)\r\n\r\nIf you want to keep the lines an ugly kind of hack for handling the errors is to do something like the following:\r\n\r\n    line     = []\r\n    expected = []\r\n    saw      = []     \r\n    cont     = True \r\n\r\n    while cont == True:     \r\n        try:\r\n            data = pd.read_csv(&#39;file1.csv&#39;,skiprows=line)\r\n            cont = False\r\n        except Exception as e:    \r\n            errortype = e.message.split(&#39;.&#39;)[0].strip()                                \r\n            if errortype == &#39;Error tokenizing data&#39;:                        \r\n               cerror      = e.message.split(&#39;:&#39;)[1].strip().replace(&#39;,&#39;,&#39;&#39;)\r\n               nums        = [n for n in cerror.split(&#39; &#39;) if str.isdigit(n)]\r\n               expected.append(int(nums[0]))\r\n               saw.append(int(nums[2]))\r\n               line.append(int(nums[1])-1)\r\n             else:\r\n               cerror      = &#39;Unknown&#39;\r\n               print &#39;Unknown Error - 222&#39;\r\n    \r\n    if line != []:\r\n        # Handle the errors however you want\r\n\r\nI proceeded to write a script to reinsert the lines into the DataFrame since the bad lines will be given by the variable &#39;line&#39; in the above code. This can all be avoided by simply using the csv reader. Hopefully the pandas developers can make it easier to deal with this situation in the future.",
        "body": "<p>I had this problem as well but perhaps for a different reason. I had some trailing commas in my CSV that were adding an additional column that pandas was attempting to read. Using the following works but it simply ignores the bad lines:<\/p>\n\n<pre><code>data = pd.read_csv('file1.csv', error_bad_lines=False)\n<\/code><\/pre>\n\n<p>If you want to keep the lines an ugly kind of hack for handling the errors is to do something like the following:<\/p>\n\n<pre><code>line     = []\nexpected = []\nsaw      = []     \ncont     = True \n\nwhile cont == True:     \n    try:\n        data = pd.read_csv('file1.csv',skiprows=line)\n        cont = False\n    except Exception as e:    \n        errortype = e.message.split('.')[0].strip()                                \n        if errortype == 'Error tokenizing data':                        \n           cerror      = e.message.split(':')[1].strip().replace(',','')\n           nums        = [n for n in cerror.split(' ') if str.isdigit(n)]\n           expected.append(int(nums[0]))\n           saw.append(int(nums[2]))\n           line.append(int(nums[1])-1)\n         else:\n           cerror      = 'Unknown'\n           print 'Unknown Error - 222'\n\nif line != []:\n    # Handle the errors however you want\n<\/code><\/pre>\n\n<p>I proceeded to write a script to reinsert the lines into the DataFrame since the bad lines will be given by the variable 'line' in the above code. This can all be avoided by simply using the csv reader. Hopefully the pandas developers can make it easier to deal with this situation in the future.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 916291,
            "reputation": 1187,
            "user_id": 949028,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/98b73c08b0fab02d483f2e9e0aca03f2?s=256&d=identicon&r=PG",
            "display_name": "Andreas Schuh",
            "link": "https:\/\/stackoverflow.com\/users\/949028\/andreas-schuh"
        },
        "is_accepted": false,
        "score": 28,
        "last_activity_date": 1491645120,
        "last_edit_date": null,
        "creation_date": 1491645120,
        "answer_id": 43292557,
        "question_id": 2356501,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "I am surprised nobody suggested\r\n\r\n    (numerator + denominator - 1) \/\/ denominator\r\n\r\nfor integer division with rounding up. Used to be the common way for C\/C++\/CUDA (cf. `divup`)",
        "body": "<p>I am surprised nobody suggested<\/p>\n\n<pre><code>(numerator + denominator - 1) \/\/ denominator\n<\/code><\/pre>\n\n<p>for integer division with rounding up. Used to be the common way for C\/C++\/CUDA (cf. <code>divup<\/code>)<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5678635,
            "reputation": 2135,
            "user_id": 4490749,
            "user_type": "registered",
            "profile_image": "https:\/\/lh6.googleusercontent.com\/-cPNVE6ny0kc\/AAAAAAAAAAI\/AAAAAAAADoI\/uL7LzHaAjuk\/photo.jpg?sz=256",
            "display_name": "Alex Fortin",
            "link": "https:\/\/stackoverflow.com\/users\/4490749\/alex-fortin"
        },
        "is_accepted": false,
        "score": 28,
        "last_activity_date": 1538441254,
        "last_edit_date": 1592644375.0,
        "creation_date": 1506360206,
        "answer_id": 46410817,
        "question_id": 25981703,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "To solve this problem once and for all, you can verify that you have a `pip.conf` file.\n\nThis is where your `pip.conf` should be, according to the [documentation][1]:\n\n&gt; On Unix the default configuration file is: `$HOME\/.config\/pip\/pip.conf` which respects the XDG_CONFIG_HOME environment variable.\n&gt;\n&gt; On macOS the configuration file is `$HOME\/Library\/Application Support\/pip\/pip.conf` if directory `$HOME\/Library\/Application Support\/pip` exists else `$HOME\/.config\/pip\/pip.conf`\n&gt;\n&gt; On Windows the configuration file is `%APPDATA%\\pip\\pip.ini`.\n\n  [1]: https:\/\/pip.pypa.io\/en\/stable\/user_guide\/#config-file\n\n**Inside a virtualenv:**\n\n&gt; On Unix and macOS the file is `$VIRTUAL_ENV\/pip.conf`\n&gt;\n&gt; On Windows the file is: `%VIRTUAL_ENV%\\pip.ini`\n\n\nYour `pip.conf` should look like:\n\n    [global]\n    trusted-host = pypi.python.org\n\n`pip install linkchecker` installed `linkchecker` without complains after I created the `pip.conf` file.",
        "body": "<p>To solve this problem once and for all, you can verify that you have a <code>pip.conf<\/code> file.<\/p>\n<p>This is where your <code>pip.conf<\/code> should be, according to the <a href=\"https:\/\/pip.pypa.io\/en\/stable\/user_guide\/#config-file\" rel=\"noreferrer\">documentation<\/a>:<\/p>\n<blockquote>\n<p>On Unix the default configuration file is: <code>$HOME\/.config\/pip\/pip.conf<\/code> which respects the XDG_CONFIG_HOME environment variable.<\/p>\n<p>On macOS the configuration file is <code>$HOME\/Library\/Application Support\/pip\/pip.conf<\/code> if directory <code>$HOME\/Library\/Application Support\/pip<\/code> exists else <code>$HOME\/.config\/pip\/pip.conf<\/code><\/p>\n<p>On Windows the configuration file is <code>%APPDATA%\\pip\\pip.ini<\/code>.<\/p>\n<\/blockquote>\n<p><strong>Inside a virtualenv:<\/strong><\/p>\n<blockquote>\n<p>On Unix and macOS the file is <code>$VIRTUAL_ENV\/pip.conf<\/code><\/p>\n<p>On Windows the file is: <code>%VIRTUAL_ENV%\\pip.ini<\/code><\/p>\n<\/blockquote>\n<p>Your <code>pip.conf<\/code> should look like:<\/p>\n<pre><code>[global]\ntrusted-host = pypi.python.org\n<\/code><\/pre>\n<p><code>pip install linkchecker<\/code> installed <code>linkchecker<\/code> without complains after I created the <code>pip.conf<\/code> file.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 9646706,
            "reputation": 4817,
            "user_id": 7159205,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/3173d051eb09447aa590006fa5672b66?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "g10guang",
            "link": "https:\/\/stackoverflow.com\/users\/7159205\/g10guang"
        },
        "is_accepted": false,
        "score": 28,
        "last_activity_date": 1511186366,
        "last_edit_date": null,
        "creation_date": 1511186366,
        "answer_id": 47393778,
        "question_id": 9252543,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "&gt; To make logic clear is very important. This problem appear, because the reference become a dead loop.\r\n\r\nIf you don&#39;t want to change the logic, you can put the some import statement which caused ImportError to the other position of file, for example the end.\r\n\r\n# a.py\r\n\r\n    from test.b import b2\r\n    \r\n    def a1():\r\n        print(&#39;a1&#39;)\r\n        b2()\r\n\r\n\r\n# b.py\r\n\r\n    from test.a import a1\r\n    \r\n    def b1():\r\n        print(&#39;b1&#39;)\r\n        a1()\r\n    \r\n    def b2():\r\n        print(&#39;b2&#39;)\r\n    \r\n    if __name__ == &#39;__main__&#39;:\r\n        b1()\r\n\r\n\r\n&gt; You will get Import Error: `ImportError: cannot import name &#39;a1&#39;`\r\n\r\nBut if we change the position of from test.b import b2 in A like below:\r\n\r\n# a.py\r\n\r\n    def a1():\r\n        print(&#39;a1&#39;)\r\n        b2()\r\n    \r\n    from test.b import b2\r\n\r\nAnd the we can get what we want:\r\n\r\n    b1\r\n    a1\r\n    b2",
        "body": "<blockquote>\n  <p>To make logic clear is very important. This problem appear, because the reference become a dead loop.<\/p>\n<\/blockquote>\n\n<p>If you don't want to change the logic, you can put the some import statement which caused ImportError to the other position of file, for example the end.<\/p>\n\n<h1>a.py<\/h1>\n\n<pre><code>from test.b import b2\n\ndef a1():\n    print('a1')\n    b2()\n<\/code><\/pre>\n\n<h1>b.py<\/h1>\n\n<pre><code>from test.a import a1\n\ndef b1():\n    print('b1')\n    a1()\n\ndef b2():\n    print('b2')\n\nif __name__ == '__main__':\n    b1()\n<\/code><\/pre>\n\n<blockquote>\n  <p>You will get Import Error: <code>ImportError: cannot import name 'a1'<\/code><\/p>\n<\/blockquote>\n\n<p>But if we change the position of from test.b import b2 in A like below:<\/p>\n\n<h1>a.py<\/h1>\n\n<pre><code>def a1():\n    print('a1')\n    b2()\n\nfrom test.b import b2\n<\/code><\/pre>\n\n<p>And the we can get what we want:<\/p>\n\n<pre><code>b1\na1\nb2\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 47682,
            "reputation": 5920,
            "user_id": 141343,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/cd567e38a4811d91289d721566127dd3?s=256&d=identicon&r=PG",
            "display_name": "Denis Malinovsky",
            "link": "https:\/\/stackoverflow.com\/users\/141343\/denis-malinovsky"
        },
        "is_accepted": false,
        "score": 27,
        "last_activity_date": 1381549996,
        "last_edit_date": null,
        "creation_date": 1381549996,
        "answer_id": 19330332,
        "question_id": 7781260,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Another, less convenient, way to do it is to use [`Decimal`](http:\/\/docs.python.org\/2\/library\/decimal.html) class:\r\n\r\n    from decimal import Decimal\r\n    pos_inf = Decimal(&#39;Infinity&#39;)\r\n    neg_inf = Decimal(&#39;-Infinity&#39;)",
        "body": "<p>Another, less convenient, way to do it is to use <a href=\"http:\/\/docs.python.org\/2\/library\/decimal.html\" rel=\"noreferrer\"><code>Decimal<\/code><\/a> class:<\/p>\n\n<pre><code>from decimal import Decimal\npos_inf = Decimal('Infinity')\nneg_inf = Decimal('-Infinity')\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 49071,
            "reputation": 8690,
            "user_id": 145976,
            "user_type": "registered",
            "accept_rate": 40,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/ff3f0e2ec877feb3800049999f289021?s=256&d=identicon&r=PG",
            "display_name": "Charlie",
            "link": "https:\/\/stackoverflow.com\/users\/145976\/charlie"
        },
        "is_accepted": false,
        "score": 27,
        "last_activity_date": 1483478749,
        "last_edit_date": 1483478749.0,
        "creation_date": 1405316161,
        "answer_id": 24730081,
        "question_id": 5607551,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Try this:\r\n\r\n    urllib.pathname2url(stringToURLEncode)\r\n\r\n`urlencode` won&#39;t work because it only works on dictionaries. `quote_plus` didn&#39;t produce the correct output.",
        "body": "<p>Try this:<\/p>\n\n<pre><code>urllib.pathname2url(stringToURLEncode)\n<\/code><\/pre>\n\n<p><code>urlencode<\/code> won't work because it only works on dictionaries. <code>quote_plus<\/code> didn't produce the correct output.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 82808,
            "reputation": 8282,
            "user_id": 232571,
            "user_type": "registered",
            "accept_rate": 60,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/19597bf4ea8879e5210d6e6025e17111?s=256&d=identicon&r=PG",
            "display_name": "GrantJ",
            "link": "https:\/\/stackoverflow.com\/users\/232571\/grantj"
        },
        "is_accepted": false,
        "score": 27,
        "last_activity_date": 1411455146,
        "last_edit_date": null,
        "creation_date": 1411455146,
        "answer_id": 25988702,
        "question_id": 1653970,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "If you&#39;re using the ordered set to maintain a sorted order, consider using a sorted set implementation from PyPI. The [sortedcontainers][1] module provides a [SortedSet][2] for just this purpose. Some benefits: pure-Python, fast-as-C implementations, 100% unit test coverage, hours of stress testing.\r\n\r\nInstalling from PyPI is easy with pip:\r\n\r\n    pip install sortedcontainers\r\n\r\nNote that if you can&#39;t `pip install`, simply pull down the sortedlist.py and sortedset.py files from the [open-source repository][3].\r\n\r\nOnce installed you can simply:\r\n\r\n    from sortedcontainers import SortedSet\r\n    help(SortedSet)\r\n\r\nThe sortedcontainers module also maintains a [performance comparison][4] with several alternative implementations.\r\n\r\nFor the comment that asked about Python&#39;s bag data type, there&#39;s alternatively a [SortedList][5] data type which can be used to efficiently implement a bag.\r\n\r\n\r\n  [1]: http:\/\/www.grantjenks.com\/docs\/sortedcontainers\/\r\n  [2]: http:\/\/www.grantjenks.com\/docs\/sortedcontainers\/sortedset.html\r\n  [3]: https:\/\/github.com\/grantjenks\/sorted_containers\r\n  [4]: http:\/\/www.grantjenks.com\/docs\/sortedcontainers\/performance.html\r\n  [5]: http:\/\/www.grantjenks.com\/docs\/sortedcontainers\/sortedlist.html",
        "body": "<p>If you're using the ordered set to maintain a sorted order, consider using a sorted set implementation from PyPI. The <a href=\"http:\/\/www.grantjenks.com\/docs\/sortedcontainers\/\">sortedcontainers<\/a> module provides a <a href=\"http:\/\/www.grantjenks.com\/docs\/sortedcontainers\/sortedset.html\">SortedSet<\/a> for just this purpose. Some benefits: pure-Python, fast-as-C implementations, 100% unit test coverage, hours of stress testing.<\/p>\n\n<p>Installing from PyPI is easy with pip:<\/p>\n\n<pre><code>pip install sortedcontainers\n<\/code><\/pre>\n\n<p>Note that if you can't <code>pip install<\/code>, simply pull down the sortedlist.py and sortedset.py files from the <a href=\"https:\/\/github.com\/grantjenks\/sorted_containers\">open-source repository<\/a>.<\/p>\n\n<p>Once installed you can simply:<\/p>\n\n<pre><code>from sortedcontainers import SortedSet\nhelp(SortedSet)\n<\/code><\/pre>\n\n<p>The sortedcontainers module also maintains a <a href=\"http:\/\/www.grantjenks.com\/docs\/sortedcontainers\/performance.html\">performance comparison<\/a> with several alternative implementations.<\/p>\n\n<p>For the comment that asked about Python's bag data type, there's alternatively a <a href=\"http:\/\/www.grantjenks.com\/docs\/sortedcontainers\/sortedlist.html\">SortedList<\/a> data type which can be used to efficiently implement a bag.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 22370,
            "reputation": 158397,
            "user_id": 55075,
            "user_type": "registered",
            "accept_rate": 76,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/8bbc94977312d285045b2412257b6cb8?s=256&d=identicon&r=PG",
            "display_name": "kenorb",
            "link": "https:\/\/stackoverflow.com\/users\/55075\/kenorb"
        },
        "is_accepted": false,
        "score": 27,
        "last_activity_date": 1580205687,
        "last_edit_date": 1580205687.0,
        "creation_date": 1472045440,
        "answer_id": 39124754,
        "question_id": 25981703,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "You&#39;ve the following possibilities to solve issue with `CERTIFICATE_VERIFY_FAILED`:\r\n\r\n- Use HTTP instead of HTTPS (e.g. `--index-url=http:\/\/pypi.python.org\/simple\/`).\r\n- Use `--cert &lt;trusted.pem&gt;` or `CA_BUNDLE` variable to specify alternative CA bundle.\r\n\r\n  E.g. you can go to failing URL from web-browser and import root certificate into your system.\r\n\r\n- Run `python -c &quot;import ssl; print(ssl.get_default_verify_paths())&quot;` to check the current one (validate if exists).\r\n- OpenSSL has a pair of environments (`SSL_CERT_DIR`, `SSL_CERT_FILE`) which can be used to specify different certificate database&lt;sup&gt;[PEP-476][1]&lt;\/sup&gt;.\r\n- Use `--trusted-host &lt;hostname&gt;` to mark the host as trusted.\r\n- In Python use `verify=False` for `requests.get` (see: [SSL Cert Verification][2]).\r\n- Use `--proxy &lt;proxy&gt;` to avoid certificate checks.\r\n\r\nRead more at: [TLS\/SSL wrapper for socket objects - Verifying certificates][3].\r\n\r\n\r\n  [1]: https:\/\/www.python.org\/dev\/peps\/pep-0476\/#trust-database\r\n  [2]: http:\/\/docs.python-requests.org\/en\/latest\/user\/advanced\/#ssl-cert-verification\r\n  [3]: https:\/\/docs.python.org\/2\/library\/ssl.html",
        "body": "<p>You've the following possibilities to solve issue with <code>CERTIFICATE_VERIFY_FAILED<\/code>:<\/p>\n\n<ul>\n<li>Use HTTP instead of HTTPS (e.g. <code>--index-url=http:\/\/pypi.python.org\/simple\/<\/code>).<\/li>\n<li><p>Use <code>--cert &lt;trusted.pem&gt;<\/code> or <code>CA_BUNDLE<\/code> variable to specify alternative CA bundle.<\/p>\n\n<p>E.g. you can go to failing URL from web-browser and import root certificate into your system.<\/p><\/li>\n<li><p>Run <code>python -c \"import ssl; print(ssl.get_default_verify_paths())\"<\/code> to check the current one (validate if exists).<\/p><\/li>\n<li>OpenSSL has a pair of environments (<code>SSL_CERT_DIR<\/code>, <code>SSL_CERT_FILE<\/code>) which can be used to specify different certificate database<sup><a href=\"https:\/\/www.python.org\/dev\/peps\/pep-0476\/#trust-database\" rel=\"noreferrer\">PEP-476<\/a><\/sup>.<\/li>\n<li>Use <code>--trusted-host &lt;hostname&gt;<\/code> to mark the host as trusted.<\/li>\n<li>In Python use <code>verify=False<\/code> for <code>requests.get<\/code> (see: <a href=\"http:\/\/docs.python-requests.org\/en\/latest\/user\/advanced\/#ssl-cert-verification\" rel=\"noreferrer\">SSL Cert Verification<\/a>).<\/li>\n<li>Use <code>--proxy &lt;proxy&gt;<\/code> to avoid certificate checks.<\/li>\n<\/ul>\n\n<p>Read more at: <a href=\"https:\/\/docs.python.org\/2\/library\/ssl.html\" rel=\"noreferrer\">TLS\/SSL wrapper for socket objects - Verifying certificates<\/a>.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 22906,
            "reputation": 19410,
            "user_id": 56974,
            "user_type": "registered",
            "accept_rate": 93,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/6e5af3c3c57bdcf3e5fe1e7a1269a0e7?s=256&d=identicon&r=PG",
            "display_name": "Michael Ekoka",
            "link": "https:\/\/stackoverflow.com\/users\/56974\/michael-ekoka"
        },
        "is_accepted": false,
        "score": 27,
        "last_activity_date": 1473269608,
        "last_edit_date": null,
        "creation_date": 1473269608,
        "answer_id": 39376081,
        "question_id": 222877,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "When calling `super()` to resolve to a parent&#39;s version of a classmethod, instance method, or staticmethod, we want to pass the current class whose scope we are in as the first argument, to indicate which parent&#39;s scope we&#39;re trying to resolve to, and as a second argument the object of interest to indicate which object we&#39;re trying to apply that scope to.\r\n\r\nConsider a class hierarchy `A`, `B`, and `C` where each class is the parent of the one following it, and `a`, `b`, and `c` respective instances of each.\r\n\r\n    super(B, b) \r\n    # resolves to the scope of B&#39;s parent i.e. A \r\n    # and applies that scope to b, as if b was an instance of A\r\n\r\n    super(C, c) \r\n    # resolves to the scope of C&#39;s parent i.e. B\r\n    # and applies that scope to c\r\n\r\n    super(B, c) \r\n    # resolves to the scope of B&#39;s parent i.e. A \r\n    # and applies that scope to c\r\n\r\n\r\n\r\nUsing `super` with a staticmethod\r\n----------------------------------\r\n\r\ne.g. using `super()` from within the `__new__()` method\r\n\r\n    class A(object):\r\n        def __new__(cls, *a, **kw):\r\n            # ...\r\n            # whatever you want to specialize or override here\r\n            # ...\r\n            \r\n            return super(A, cls).__new__(cls, *a, **kw)\r\n\r\nExplanation: \r\n\r\n1- even though it&#39;s usual for `__new__()` to take as its first param a reference to the calling class, it is *not* implemented in Python as a classmethod, but rather a staticmethod. That is, a reference to a class has to be passed explicitly as the first argument when calling `__new__()` directly:\r\n\r\n    # if you defined this\r\n    class A(object):\r\n        def __new__(cls):\r\n            pass\r\n\r\n    # calling this would raise a TypeError due to the missing argument\r\n    A.__new__()\r\n\r\n    # whereas this would be fine\r\n    A.__new__(A)\r\n\r\n2- when calling `super()` to get to the parent class we pass the child class `A` as its first argument, then we pass a reference to the object of interest, in this case it&#39;s the class reference that was passed when `A.__new__(cls)` was called. In most cases it also happens to be a reference to the child class. In some situations it might not be, for instance in the case of multiple generation inheritances.\r\n\r\n    super(A, cls)\r\n\r\n3- since as a general rule `__new__()` is a staticmethod, `super(A, cls).__new__` will also return a staticmethod and needs to be supplied all arguments explicitly, including the reference to the object of insterest, in this case `cls`.\r\n\r\n    super(A, cls).__new__(cls, *a, **kw)\r\n\r\n4- doing the same thing without `super`\r\n\r\n    class A(object):\r\n        def __new__(cls, *a, **kw):\r\n            # ...\r\n            # whatever you want to specialize or override here\r\n            # ...\r\n            \r\n            return object.__new__(cls, *a, **kw)\r\n    \r\n\r\nUsing `super` with an instance method\r\n-------------------------------------\r\n\r\ne.g. using `super()` from within `__init__()`\r\n\r\n    class A(object): \r\n        def __init__(self, *a, **kw):\r\n            # ...\r\n            # you make some changes here\r\n            # ...\r\n\r\n            super(A, self).__init__(*a, **kw)\r\n\r\nExplanation:\r\n\r\n1- `__init__` is an instance method, meaning that it takes as its first argument a reference to an instance. When called directly from the instance, the reference is passed implicitly, that is you don&#39;t need to specify it:\r\n\r\n\r\n    # you try calling `__init__()` from the class without specifying an instance\r\n    # and a TypeError is raised due to the expected but missing reference\r\n    A.__init__() # TypeError ...\r\n\r\n    # you create an instance\r\n    a = A()\r\n\r\n    # you call `__init__()` from that instance and it works\r\n    a.__init__()\r\n\r\n    # you can also call `__init__()` with the class and explicitly pass the instance \r\n    A.__init__(a)\r\n\r\n2- when calling `super()` within `__init__()` we pass the child class as the first argument and the object of interest as a second argument, which in general is a reference to an instance of the child class.\r\n\r\n    super(A, self)\r\n\r\n\r\n3- The call `super(A, self)` returns a proxy that will resolve the scope and apply it to `self` as if it&#39;s now an instance of the parent class. Let&#39;s call that proxy `s`. Since `__init__()` is an instance method the call `s.__init__(...)` will implicitly pass a reference of `self` as the first argument to the parent&#39;s `__init__()`.\r\n\r\n4- to do the same without `super` we need to pass a reference to an instance explicitly to the parent&#39;s version of `__init__()`.\r\n\r\n    class A(object): \r\n        def __init__(self, *a, **kw):\r\n            # ...\r\n            # you make some changes here\r\n            # ...\r\n\r\n            object.__init__(self, *a, **kw)\r\n\r\n\r\nUsing `super` with a classmethod\r\n--------------------------------\r\n\r\n    class A(object):\r\n        @classmethod\r\n        def alternate_constructor(cls, *a, **kw):\r\n            print &quot;A.alternate_constructor called&quot;\r\n            return cls(*a, **kw)\r\n            \r\n    class B(A):\r\n        @classmethod\r\n        def alternate_constructor(cls, *a, **kw):\r\n            # ...\r\n            # whatever you want to specialize or override here\r\n            # ...\r\n\r\n            print &quot;B.alternate_constructor called&quot;\r\n            return super(B, cls).alternate_constructor(*a, **kw)\r\n\r\nExplanation:\r\n\r\n1- A classmethod can be called from the class directly and takes as its first parameter a reference to the class. \r\n    \r\n    # calling directly from the class is fine,\r\n    # a reference to the class is passed implicitly\r\n    a = A.alternate_constructor()\r\n    b = B.alternate_constructor()\r\n\r\n2- when calling `super()` within a classmethod to resolve to its parent&#39;s version of it, we want to pass the current child class as the first argument to indicate which parent&#39;s scope we&#39;re trying to resolve to, and the object of interest as the second argument to indicate which object we want to apply that scope to, which in general is a reference to the child class itself or one of its subclasses.\r\n\r\n    super(B, cls_or_subcls)\r\n\r\n3- The call `super(B, cls)` resolves to the scope of `A` and applies it to `cls`. Since `alternate_constructor()` is a classmethod the call `super(B, cls).alternate_constructor(...)` will implicitly pass a reference of `cls` as the first argument to `A`&#39;s version of `alternate_constructor()`\r\n\r\n    super(B, cls).alternate_constructor()\r\n\r\n4- to do the same without using `super()` you would need to get a reference to the *unbound* version of `A.alternate_constructor()` (i.e. the explicit version of the function). Simply doing this would not work:\r\n\r\n    class B(A):\r\n        @classmethod\r\n        def alternate_constructor(cls, *a, **kw):\r\n            # ...\r\n            # whatever you want to specialize or override here\r\n            # ...\r\n\r\n            print &quot;B.alternate_constructor called&quot;\r\n            return A.alternate_constructor(cls, *a, **kw)\r\n\r\nThe above would not work because the `A.alternate_constructor()` method takes an implicit reference to `A` as its first argument. The `cls` being passed here would be its second argument.\r\n\r\n    class B(A):\r\n        @classmethod\r\n        def alternate_constructor(cls, *a, **kw):\r\n            # ...\r\n            # whatever you want to specialize or override here\r\n            # ...\r\n\r\n            print &quot;B.alternate_constructor called&quot;\r\n            # first we get a reference to the unbound \r\n            # `A.alternate_constructor` function \r\n            unbound_func = A.alternate_constructor.im_func\r\n            # now we call it and pass our own `cls` as its first argument\r\n            return unbound_func(cls, *a, **kw)\r\n",
        "body": "<p>When calling <code>super()<\/code> to resolve to a parent's version of a classmethod, instance method, or staticmethod, we want to pass the current class whose scope we are in as the first argument, to indicate which parent's scope we're trying to resolve to, and as a second argument the object of interest to indicate which object we're trying to apply that scope to.<\/p>\n\n<p>Consider a class hierarchy <code>A<\/code>, <code>B<\/code>, and <code>C<\/code> where each class is the parent of the one following it, and <code>a<\/code>, <code>b<\/code>, and <code>c<\/code> respective instances of each.<\/p>\n\n<pre><code>super(B, b) \n# resolves to the scope of B's parent i.e. A \n# and applies that scope to b, as if b was an instance of A\n\nsuper(C, c) \n# resolves to the scope of C's parent i.e. B\n# and applies that scope to c\n\nsuper(B, c) \n# resolves to the scope of B's parent i.e. A \n# and applies that scope to c\n<\/code><\/pre>\n\n<h2>Using <code>super<\/code> with a staticmethod<\/h2>\n\n<p>e.g. using <code>super()<\/code> from within the <code>__new__()<\/code> method<\/p>\n\n<pre><code>class A(object):\n    def __new__(cls, *a, **kw):\n        # ...\n        # whatever you want to specialize or override here\n        # ...\n\n        return super(A, cls).__new__(cls, *a, **kw)\n<\/code><\/pre>\n\n<p>Explanation: <\/p>\n\n<p>1- even though it's usual for <code>__new__()<\/code> to take as its first param a reference to the calling class, it is <em>not<\/em> implemented in Python as a classmethod, but rather a staticmethod. That is, a reference to a class has to be passed explicitly as the first argument when calling <code>__new__()<\/code> directly:<\/p>\n\n<pre><code># if you defined this\nclass A(object):\n    def __new__(cls):\n        pass\n\n# calling this would raise a TypeError due to the missing argument\nA.__new__()\n\n# whereas this would be fine\nA.__new__(A)\n<\/code><\/pre>\n\n<p>2- when calling <code>super()<\/code> to get to the parent class we pass the child class <code>A<\/code> as its first argument, then we pass a reference to the object of interest, in this case it's the class reference that was passed when <code>A.__new__(cls)<\/code> was called. In most cases it also happens to be a reference to the child class. In some situations it might not be, for instance in the case of multiple generation inheritances.<\/p>\n\n<pre><code>super(A, cls)\n<\/code><\/pre>\n\n<p>3- since as a general rule <code>__new__()<\/code> is a staticmethod, <code>super(A, cls).__new__<\/code> will also return a staticmethod and needs to be supplied all arguments explicitly, including the reference to the object of insterest, in this case <code>cls<\/code>.<\/p>\n\n<pre><code>super(A, cls).__new__(cls, *a, **kw)\n<\/code><\/pre>\n\n<p>4- doing the same thing without <code>super<\/code><\/p>\n\n<pre><code>class A(object):\n    def __new__(cls, *a, **kw):\n        # ...\n        # whatever you want to specialize or override here\n        # ...\n\n        return object.__new__(cls, *a, **kw)\n<\/code><\/pre>\n\n<h2>Using <code>super<\/code> with an instance method<\/h2>\n\n<p>e.g. using <code>super()<\/code> from within <code>__init__()<\/code><\/p>\n\n<pre><code>class A(object): \n    def __init__(self, *a, **kw):\n        # ...\n        # you make some changes here\n        # ...\n\n        super(A, self).__init__(*a, **kw)\n<\/code><\/pre>\n\n<p>Explanation:<\/p>\n\n<p>1- <code>__init__<\/code> is an instance method, meaning that it takes as its first argument a reference to an instance. When called directly from the instance, the reference is passed implicitly, that is you don't need to specify it:<\/p>\n\n<pre><code># you try calling `__init__()` from the class without specifying an instance\n# and a TypeError is raised due to the expected but missing reference\nA.__init__() # TypeError ...\n\n# you create an instance\na = A()\n\n# you call `__init__()` from that instance and it works\na.__init__()\n\n# you can also call `__init__()` with the class and explicitly pass the instance \nA.__init__(a)\n<\/code><\/pre>\n\n<p>2- when calling <code>super()<\/code> within <code>__init__()<\/code> we pass the child class as the first argument and the object of interest as a second argument, which in general is a reference to an instance of the child class.<\/p>\n\n<pre><code>super(A, self)\n<\/code><\/pre>\n\n<p>3- The call <code>super(A, self)<\/code> returns a proxy that will resolve the scope and apply it to <code>self<\/code> as if it's now an instance of the parent class. Let's call that proxy <code>s<\/code>. Since <code>__init__()<\/code> is an instance method the call <code>s.__init__(...)<\/code> will implicitly pass a reference of <code>self<\/code> as the first argument to the parent's <code>__init__()<\/code>.<\/p>\n\n<p>4- to do the same without <code>super<\/code> we need to pass a reference to an instance explicitly to the parent's version of <code>__init__()<\/code>.<\/p>\n\n<pre><code>class A(object): \n    def __init__(self, *a, **kw):\n        # ...\n        # you make some changes here\n        # ...\n\n        object.__init__(self, *a, **kw)\n<\/code><\/pre>\n\n<h2>Using <code>super<\/code> with a classmethod<\/h2>\n\n<pre><code>class A(object):\n    @classmethod\n    def alternate_constructor(cls, *a, **kw):\n        print \"A.alternate_constructor called\"\n        return cls(*a, **kw)\n\nclass B(A):\n    @classmethod\n    def alternate_constructor(cls, *a, **kw):\n        # ...\n        # whatever you want to specialize or override here\n        # ...\n\n        print \"B.alternate_constructor called\"\n        return super(B, cls).alternate_constructor(*a, **kw)\n<\/code><\/pre>\n\n<p>Explanation:<\/p>\n\n<p>1- A classmethod can be called from the class directly and takes as its first parameter a reference to the class. <\/p>\n\n<pre><code># calling directly from the class is fine,\n# a reference to the class is passed implicitly\na = A.alternate_constructor()\nb = B.alternate_constructor()\n<\/code><\/pre>\n\n<p>2- when calling <code>super()<\/code> within a classmethod to resolve to its parent's version of it, we want to pass the current child class as the first argument to indicate which parent's scope we're trying to resolve to, and the object of interest as the second argument to indicate which object we want to apply that scope to, which in general is a reference to the child class itself or one of its subclasses.<\/p>\n\n<pre><code>super(B, cls_or_subcls)\n<\/code><\/pre>\n\n<p>3- The call <code>super(B, cls)<\/code> resolves to the scope of <code>A<\/code> and applies it to <code>cls<\/code>. Since <code>alternate_constructor()<\/code> is a classmethod the call <code>super(B, cls).alternate_constructor(...)<\/code> will implicitly pass a reference of <code>cls<\/code> as the first argument to <code>A<\/code>'s version of <code>alternate_constructor()<\/code><\/p>\n\n<pre><code>super(B, cls).alternate_constructor()\n<\/code><\/pre>\n\n<p>4- to do the same without using <code>super()<\/code> you would need to get a reference to the <em>unbound<\/em> version of <code>A.alternate_constructor()<\/code> (i.e. the explicit version of the function). Simply doing this would not work:<\/p>\n\n<pre><code>class B(A):\n    @classmethod\n    def alternate_constructor(cls, *a, **kw):\n        # ...\n        # whatever you want to specialize or override here\n        # ...\n\n        print \"B.alternate_constructor called\"\n        return A.alternate_constructor(cls, *a, **kw)\n<\/code><\/pre>\n\n<p>The above would not work because the <code>A.alternate_constructor()<\/code> method takes an implicit reference to <code>A<\/code> as its first argument. The <code>cls<\/code> being passed here would be its second argument.<\/p>\n\n<pre><code>class B(A):\n    @classmethod\n    def alternate_constructor(cls, *a, **kw):\n        # ...\n        # whatever you want to specialize or override here\n        # ...\n\n        print \"B.alternate_constructor called\"\n        # first we get a reference to the unbound \n        # `A.alternate_constructor` function \n        unbound_func = A.alternate_constructor.im_func\n        # now we call it and pass our own `cls` as its first argument\n        return unbound_func(cls, *a, **kw)\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4786896,
            "reputation": 531,
            "user_id": 3867094,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/831dfad63995d02997858e101f6134f9?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "Y.Y",
            "link": "https:\/\/stackoverflow.com\/users\/3867094\/y-y"
        },
        "is_accepted": false,
        "score": 27,
        "last_activity_date": 1498439681,
        "last_edit_date": null,
        "creation_date": 1498439681,
        "answer_id": 44752000,
        "question_id": 3420122,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Code 1:\r\n\r\n    dict = { key: key * 10 for key in range(0, 100) }\r\n    d1 = {}\r\n    for key, value in dict.items():\r\n        if key % 2 == 0:\r\n            d1[key] = value\r\n\r\nCode 2:\r\n\r\n    dict = { key: key * 10 for key in range(0, 100) }\r\n    d2 = {key: value for key, value in dict.items() if key % 2 == 0}\r\n\r\n\r\nCode 3:\r\n\r\n    dict = { key: key * 10 for key in range(0, 100) }\r\n    d3 = { key: dict[key] for key in dict.keys() if key % 2 == 0}\r\n\r\n\r\nAll pieced of code performance are measured with timeit using number=1000, and collected 1000 times for each piece of code. \r\n\r\n[![enter image description here][1]][1]\r\n\r\nFor python 3.6 the performance of three ways of filter dict keys almost the same. For python 2.7 code 3 is slightly faster.\r\n\r\n\r\n  [1]: https:\/\/i.stack.imgur.com\/xqsJC.png",
        "body": "<p>Code 1:<\/p>\n\n<pre><code>dict = { key: key * 10 for key in range(0, 100) }\nd1 = {}\nfor key, value in dict.items():\n    if key % 2 == 0:\n        d1[key] = value\n<\/code><\/pre>\n\n<p>Code 2:<\/p>\n\n<pre><code>dict = { key: key * 10 for key in range(0, 100) }\nd2 = {key: value for key, value in dict.items() if key % 2 == 0}\n<\/code><\/pre>\n\n<p>Code 3:<\/p>\n\n<pre><code>dict = { key: key * 10 for key in range(0, 100) }\nd3 = { key: dict[key] for key in dict.keys() if key % 2 == 0}\n<\/code><\/pre>\n\n<p>All pieced of code performance are measured with timeit using number=1000, and collected 1000 times for each piece of code. <\/p>\n\n<p><a href=\"https:\/\/i.stack.imgur.com\/xqsJC.png\" rel=\"noreferrer\"><img src=\"https:\/\/i.stack.imgur.com\/xqsJC.png\" alt=\"enter image description here\"><\/a><\/p>\n\n<p>For python 3.6 the performance of three ways of filter dict keys almost the same. For python 2.7 code 3 is slightly faster.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 3478608,
            "reputation": 888,
            "user_id": 2911244,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/KtQnN.jpg?s=256&g=1",
            "display_name": "Rajesh Prasad Yadav",
            "link": "https:\/\/stackoverflow.com\/users\/2911244\/rajesh-prasad-yadav"
        },
        "is_accepted": false,
        "score": 27,
        "last_activity_date": 1535829137,
        "last_edit_date": null,
        "creation_date": 1535829137,
        "answer_id": 52131348,
        "question_id": 7023052,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Check whether the particular port is open on the server to serve the client or not? \r\n\r\nin Ubuntu or Linux distro\r\n\r\n    sudo ufw enable\r\n    sudo ufw allow 5000\/tcp \/\/allow the server to handle the request on port 5000\r\n\r\n\r\nConfigure the application to handle remote requests\r\n\r\n \r\n\r\n\r\n    app.run(host=&#39;0.0.0.0&#39; , port=5000)\r\n    \r\n\r\n    python3 app.py &amp; #run application in background\r\n\r\n\r\n\r\n",
        "body": "<p>Check whether the particular port is open on the server to serve the client or not? <\/p>\n\n<p>in Ubuntu or Linux distro<\/p>\n\n<pre><code>sudo ufw enable\nsudo ufw allow 5000\/tcp \/\/allow the server to handle the request on port 5000\n<\/code><\/pre>\n\n<p>Configure the application to handle remote requests<\/p>\n\n<pre><code>app.run(host='0.0.0.0' , port=5000)\n\n\npython3 app.py &amp; #run application in background\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 9640511,
            "reputation": 4099,
            "user_id": 7154924,
            "user_type": "registered",
            "accept_rate": 86,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/8c111adcdb9a53d603a68e9fc1c1b8ac?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "flow2k",
            "link": "https:\/\/stackoverflow.com\/users\/7154924\/flow2k"
        },
        "is_accepted": false,
        "score": 27,
        "last_activity_date": 1593288176,
        "last_edit_date": 1593288176.0,
        "creation_date": 1565560533,
        "answer_id": 57453898,
        "question_id": 29980798,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "In a Python interpreter or script, you can do\r\n\r\n    import site\r\n    site.getsitepackages() # List of global package locations\r\n\r\nand\r\n\r\n    site.getusersitepackages() # String for user-specific package location\r\n\r\nFor locations third-party packages (those not in the core Python distribution) are installed to.\r\n\r\nOn my [Homebrew][1]-installed Python on macOS, the former outputs\r\n\r\n`[&#39;\/usr\/local\/Cellar\/python\/3.7.4\/Frameworks\/Python.framework\/Versions\/3.7\/lib\/python3.7\/site-packages&#39;]`,\r\n\r\nwhich canonicalizes to the same path output by `pip show`, as mentioned in a previous answer:\r\n\r\n    $ readlink -f \/usr\/local\/Cellar\/python\/3.7.4\/Frameworks\/Python.framework\/Versions\/3.7\/lib\/python3.7\/site-packages\r\n    \/usr\/local\/lib\/python3.7\/site-packages\r\n\r\nReference: https:\/\/docs.python.org\/3\/library\/site.html#site.getsitepackages\r\n\r\n  [1]: https:\/\/en.wikipedia.org\/wiki\/Homebrew_%28package_management_software%29\r\n\r\n\r\n\r\n\r\n",
        "body": "<p>In a Python interpreter or script, you can do<\/p>\n<pre><code>import site\nsite.getsitepackages() # List of global package locations\n<\/code><\/pre>\n<p>and<\/p>\n<pre><code>site.getusersitepackages() # String for user-specific package location\n<\/code><\/pre>\n<p>For locations third-party packages (those not in the core Python distribution) are installed to.<\/p>\n<p>On my <a href=\"https:\/\/en.wikipedia.org\/wiki\/Homebrew_%28package_management_software%29\" rel=\"noreferrer\">Homebrew<\/a>-installed Python on macOS, the former outputs<\/p>\n<p><code>['\/usr\/local\/Cellar\/python\/3.7.4\/Frameworks\/Python.framework\/Versions\/3.7\/lib\/python3.7\/site-packages']<\/code>,<\/p>\n<p>which canonicalizes to the same path output by <code>pip show<\/code>, as mentioned in a previous answer:<\/p>\n<pre><code>$ readlink -f \/usr\/local\/Cellar\/python\/3.7.4\/Frameworks\/Python.framework\/Versions\/3.7\/lib\/python3.7\/site-packages\n\/usr\/local\/lib\/python3.7\/site-packages\n<\/code><\/pre>\n<p>Reference: <a href=\"https:\/\/docs.python.org\/3\/library\/site.html#site.getsitepackages\" rel=\"noreferrer\">https:\/\/docs.python.org\/3\/library\/site.html#site.getsitepackages<\/a><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 13525136,
            "reputation": 963,
            "user_id": 9757174,
            "user_type": "registered",
            "profile_image": "https:\/\/lh3.googleusercontent.com\/-WorxcVs8R58\/AAAAAAAAAAI\/AAAAAAAABjg\/cqL7op3pI6k\/photo.jpg?sz=256",
            "display_name": "Prakhar Rathi",
            "link": "https:\/\/stackoverflow.com\/users\/9757174\/prakhar-rathi"
        },
        "is_accepted": false,
        "score": 27,
        "last_activity_date": 1645816131,
        "last_edit_date": 1645816131.0,
        "creation_date": 1590039591,
        "answer_id": 61927975,
        "question_id": 18171739,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Please try to add\r\n\r\n```python\r\nimport pandas as pd\r\ndf = pd.read_csv(&#39;file.csv&#39;, encoding=&#39;unicode_escape&#39;)\r\n```\r\nThis will help. Worked for me. Also, make sure you&#39;re using the correct delimiter and column names.\r\n\r\nYou can start with loading just 1000 rows to load the file quickly. ",
        "body": "<p>Please try to add<\/p>\n<pre class=\"lang-py prettyprint-override\"><code>import pandas as pd\ndf = pd.read_csv('file.csv', encoding='unicode_escape')\n<\/code><\/pre>\n<p>This will help. Worked for me. Also, make sure you're using the correct delimiter and column names.<\/p>\n<p>You can start with loading just 1000 rows to load the file quickly.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 3441,
            "reputation": 10139,
            "user_id": 4966,
            "user_type": "registered",
            "accept_rate": 62,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/929fba6f82f04811b09c16df239bbb21?s=256&d=identicon&r=PG",
            "display_name": "Tony Meyer",
            "link": "https:\/\/stackoverflow.com\/users\/4966\/tony-meyer"
        },
        "is_accepted": false,
        "score": 26,
        "last_activity_date": 1331439781,
        "last_edit_date": 1331439781.0,
        "creation_date": 1221122036,
        "answer_id": 56041,
        "question_id": 56011,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "If the string you have contains one, then you should use the other.  For example, `&quot;You&#39;re able to do this&quot;`, or `&#39;He said &quot;Hi!&quot;&#39;`.  Other than that, you should simply be as consistent as you can (within a module, within a package, within a project, within an organisation).\r\n\r\nIf your code is going to be read by people who work with C\/C++ (or if you switch between those languages and Python), then using `&#39;&#39;` for single-character strings, and `&quot;&quot;` for longer strings might help ease the transition.  (Likewise for following other languages where they are not interchangeable).\r\n\r\nThe Python code I&#39;ve seen in the wild tends to favour `&quot;` over `&#39;`, but only slightly.  The one exception is that `&quot;&quot;&quot;these&quot;&quot;&quot;` are much more common than `&#39;&#39;&#39;these&#39;&#39;&#39;`, from what I have seen.",
        "body": "<p>If the string you have contains one, then you should use the other.  For example, <code>\"You're able to do this\"<\/code>, or <code>'He said \"Hi!\"'<\/code>.  Other than that, you should simply be as consistent as you can (within a module, within a package, within a project, within an organisation).<\/p>\n\n<p>If your code is going to be read by people who work with C\/C++ (or if you switch between those languages and Python), then using <code>''<\/code> for single-character strings, and <code>\"\"<\/code> for longer strings might help ease the transition.  (Likewise for following other languages where they are not interchangeable).<\/p>\n\n<p>The Python code I've seen in the wild tends to favour <code>\"<\/code> over <code>'<\/code>, but only slightly.  The one exception is that <code>\"\"\"these\"\"\"<\/code> are much more common than <code>'''these'''<\/code>, from what I have seen.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 8319,
            "reputation": 6351,
            "user_id": 14942,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/b525bd392fda602f8ff8377e271cb662?s=256&d=identicon&r=PG",
            "display_name": "Tim Lesher",
            "link": "https:\/\/stackoverflow.com\/users\/14942\/tim-lesher"
        },
        "is_accepted": false,
        "score": 26,
        "last_activity_date": 1572398416,
        "last_edit_date": 1572398416.0,
        "creation_date": 1233869405,
        "answer_id": 518039,
        "question_id": 518021,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Just use `len(arr)`:\r\n\r\n\r\n\r\n    &gt;&gt;&gt; import array\r\n    &gt;&gt;&gt; arr = array.array(&#39;i&#39;)\r\n    &gt;&gt;&gt; arr.append(&#39;2&#39;)\r\n    &gt;&gt;&gt; arr.__len__()\r\n    1\r\n    &gt;&gt;&gt; len(arr)\r\n    1\r\n    ",
        "body": "<p>Just use <code>len(arr)<\/code>:<\/p>\n\n<pre><code>&gt;&gt;&gt; import array\n&gt;&gt;&gt; arr = array.array('i')\n&gt;&gt;&gt; arr.append('2')\n&gt;&gt;&gt; arr.__len__()\n1\n&gt;&gt;&gt; len(arr)\n1\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1369709,
            "reputation": 1043,
            "user_id": 1305287,
            "user_type": "registered",
            "accept_rate": 76,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/0fad4b1d61926064609dc5392c6729e9?s=256&d=identicon&r=PG",
            "display_name": "Neil_UK",
            "link": "https:\/\/stackoverflow.com\/users\/1305287\/neil-uk"
        },
        "is_accepted": false,
        "score": 26,
        "last_activity_date": 1690550053,
        "last_edit_date": 1690550053.0,
        "creation_date": 1423140842,
        "answer_id": 28344513,
        "question_id": 9979970,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "The easiest way I found to &#39;get&#39; what the for\/else did, and more importantly, when to use it, was to concentrate on where the break statement jumps to. The For\/else construct is a single block. The break jumps out of the block, and so jumps &#39;over&#39; the else clause. If the contents of the else clause simply followed the for clause, it would never be jumped over, and so the equivalent logic would have to be provided by putting it in an if. This has been said before, but not quite in these words, so it may help somebody else. Try running the following code fragment. I&#39;m wholeheartedly in favour of the &#39;no break&#39; comment for clarity.\r\n\r\n    for a in range(3):\r\n        print(a)\r\n        if a==4: # change value to force break or not\r\n            break\r\n    else: #no break  +10 for whoever thought of this decoration\r\n        print(&#39;for completed OK&#39;)\r\n\r\n    print(&#39;statement after for loop&#39;)\r\n\r\nEDIT - I notice this question is still running\r\n\r\nSecond better thoughts ...\r\n\r\nThe &#39;no break&#39; comment is a negative. It&#39;s so much easier to understand a positive assertion, and that is that the `for` iterable was exhausted.\r\n\r\n    for a in range(3):\r\n        print(a)\r\n        if a==4: # change value to force break or not\r\n            print(&#39;ending for loop with a break&#39;)\r\n            break\r\n    else: # when iterable exhausted  \r\n        print(&#39;ending for loop as iterable exhausted&#39;)\r\n\r\n    print(&#39;for loop ended one way or another&#39;)\r\n\r\nThat also reinforces this interpretation\r\n\r\n    if iterable_supplies_a_value:\r\n        run_the_for_with_that_value\r\n    else:\r\n        do_something_else\r\n",
        "body": "<p>The easiest way I found to 'get' what the for\/else did, and more importantly, when to use it, was to concentrate on where the break statement jumps to. The For\/else construct is a single block. The break jumps out of the block, and so jumps 'over' the else clause. If the contents of the else clause simply followed the for clause, it would never be jumped over, and so the equivalent logic would have to be provided by putting it in an if. This has been said before, but not quite in these words, so it may help somebody else. Try running the following code fragment. I'm wholeheartedly in favour of the 'no break' comment for clarity.<\/p>\n<pre><code>for a in range(3):\n    print(a)\n    if a==4: # change value to force break or not\n        break\nelse: #no break  +10 for whoever thought of this decoration\n    print('for completed OK')\n\nprint('statement after for loop')\n<\/code><\/pre>\n<p>EDIT - I notice this question is still running<\/p>\n<p>Second better thoughts ...<\/p>\n<p>The 'no break' comment is a negative. It's so much easier to understand a positive assertion, and that is that the <code>for<\/code> iterable was exhausted.<\/p>\n<pre><code>for a in range(3):\n    print(a)\n    if a==4: # change value to force break or not\n        print('ending for loop with a break')\n        break\nelse: # when iterable exhausted  \n    print('ending for loop as iterable exhausted')\n\nprint('for loop ended one way or another')\n<\/code><\/pre>\n<p>That also reinforces this interpretation<\/p>\n<pre><code>if iterable_supplies_a_value:\n    run_the_for_with_that_value\nelse:\n    do_something_else\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 6304107,
            "reputation": 7462,
            "user_id": 9039646,
            "user_type": "registered",
            "accept_rate": 91,
            "profile_image": "https:\/\/i.stack.imgur.com\/UOOny.jpg?s=256&g=1",
            "display_name": "DINA TAKLIT",
            "link": "https:\/\/stackoverflow.com\/users\/9039646\/dina-taklit"
        },
        "is_accepted": false,
        "score": 26,
        "last_activity_date": 1556551993,
        "last_edit_date": null,
        "creation_date": 1556551993,
        "answer_id": 55906526,
        "question_id": 13842088,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "`.iat\/.at` is the good solution.\r\nSupposing you have this simple data_frame: \r\n\r\n       A   B   C\r\n    0  1   8   4 \r\n    1  3   9   6\r\n    2  22 33  52\r\n\r\nif we want to modify the value of the cell `[0,&quot;A&quot;]` u can use one of those solution : \r\n\r\n 1. `df.iat[0,0] = 2`\r\n 2. `df.at[0,&#39;A&#39;] = 2`\r\n\r\nAnd here is a complete example how to use `iat` to get and set a value of cell : \r\n\r\n    def prepossessing(df):\r\n      for index in range(0,len(df)): \r\n          df.iat[index,0] = df.iat[index,0] * 2\r\n      return df\r\n\r\n y_train before : \r\n\r\n        0\r\n    0\t54\r\n    1\t15\r\n    2\t15\r\n    3\t8\r\n    4\t31\r\n    5\t63\r\n    6\t11\r\n\r\ny_train after calling prepossessing function that `iat` to change to multiply the value of each cell by 2: \r\n\r\n         0\r\n    0\t108\r\n    1\t30\r\n    2\t30\r\n    3\t16\r\n    4\t62\r\n    5\t126\r\n    6\t22\r\n\r\n   ",
        "body": "<p><code>.iat\/.at<\/code> is the good solution.\nSupposing you have this simple data_frame: <\/p>\n\n<pre><code>   A   B   C\n0  1   8   4 \n1  3   9   6\n2  22 33  52\n<\/code><\/pre>\n\n<p>if we want to modify the value of the cell <code>[0,\"A\"]<\/code> u can use one of those solution : <\/p>\n\n<ol>\n<li><code>df.iat[0,0] = 2<\/code><\/li>\n<li><code>df.at[0,'A'] = 2<\/code><\/li>\n<\/ol>\n\n<p>And here is a complete example how to use <code>iat<\/code> to get and set a value of cell : <\/p>\n\n<pre><code>def prepossessing(df):\n  for index in range(0,len(df)): \n      df.iat[index,0] = df.iat[index,0] * 2\n  return df\n<\/code><\/pre>\n\n<p>y_train before : <\/p>\n\n<pre><code>    0\n0   54\n1   15\n2   15\n3   8\n4   31\n5   63\n6   11\n<\/code><\/pre>\n\n<p>y_train after calling prepossessing function that <code>iat<\/code> to change to multiply the value of each cell by 2: <\/p>\n\n<pre><code>     0\n0   108\n1   30\n2   30\n3   16\n4   62\n5   126\n6   22\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 558204,
            "reputation": 1342,
            "user_id": 920739,
            "user_type": "registered",
            "accept_rate": 80,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/cc4f81e982c7c71f5729c630450c3491?s=256&d=identicon&r=PG",
            "display_name": "Peter",
            "link": "https:\/\/stackoverflow.com\/users\/920739\/peter"
        },
        "is_accepted": false,
        "score": 26,
        "last_activity_date": 1643685909,
        "last_edit_date": 1643685909.0,
        "creation_date": 1560275337,
        "answer_id": 56549221,
        "question_id": 36456920,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "If you have the same method name in two different classes and you just want to run one of them, this works:\r\n\r\n    pytest tests.py -k &quot;TestClassName and test_method_name&quot;",
        "body": "<p>If you have the same method name in two different classes and you just want to run one of them, this works:<\/p>\n<pre><code>pytest tests.py -k &quot;TestClassName and test_method_name&quot;\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4564466,
            "reputation": 64839,
            "user_id": 3705840,
            "user_type": "registered",
            "accept_rate": 97,
            "profile_image": "https:\/\/i.stack.imgur.com\/a7ybc.png?s=256&g=1",
            "display_name": "lmiguelvargasf",
            "link": "https:\/\/stackoverflow.com\/users\/3705840\/lmiguelvargasf"
        },
        "is_accepted": false,
        "score": 26,
        "last_activity_date": 1666451842,
        "last_edit_date": 1666451842.0,
        "creation_date": 1594232294,
        "answer_id": 62801181,
        "question_id": 23337471,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "There are two ways to handle exceptions in `pytest`:\r\n\r\n1. Using `pytest.raises` to write assertions about raised exceptions\r\n2. Using `@pytest.mark.xfail`\r\n\r\n### 1. Using `pytest.raises`\r\n\r\nFrom [the docs][1]:\r\n\r\n&gt; In order to write assertions about raised exceptions, you can use `pytest.raises` as a context manager\r\n\r\n**Examples:**\r\n\r\n*Asserting just an exception:*\r\n\r\n```python\r\nimport pytest\r\n\r\n\r\ndef test_zero_division():\r\n    with pytest.raises(ZeroDivisionError):\r\n        1 \/ 0\r\n```\r\n\r\n`with pytest.raises(ZeroDivisionError)` says that whatever is\r\nin the next block of code should raise a `ZeroDivisionError` exception. If no exception is raised, the test fails. If the test raises a different exception, it fails.\r\n\r\n\r\n*If you need to have access to the actual exception info:*\r\n\r\n```python\r\nimport pytest\r\n\r\ndef f():\r\n    f()\r\n\r\ndef test_recursion_depth():\r\n    with pytest.raises(RuntimeError) as excinfo:\r\n        f()\r\n    assert &quot;maximum recursion&quot; in str(excinfo.value)\r\n```\r\n\r\n`excinfo` is a `ExceptionInfo` instance, which is a wrapper around the actual exception raised. The main attributes of interest are `.type`, `.value` and `.traceback`.\r\n\r\n### 2. Using `@pytest.mark.xfail`\r\n\r\nIt is also possible to specify a `raises` argument to `pytest.mark.xfail`.\r\n\r\n```python\r\nimport pytest\r\n\r\n@pytest.mark.xfail(raises=IndexError)\r\ndef test_f():\r\n    l = [1, 2, 3]\r\n    l[10]\r\n```\r\n\r\n`@pytest.mark.xfail(raises=IndexError)` says that whatever is\r\nin the next block of code should raise an `IndexError` exception. If an `IndexError` is raised, test is marked as `xfailed (x)`. If no exception is raised, the test is marked as `xpassed (X)`. If the test raises a different exception, it fails.\r\n\r\n&gt; **Notes:**\r\n&gt;\r\n&gt; * Using `pytest.raises` is likely to be better for cases where you are testing exceptions your own code is deliberately raising, whereas using `@pytest.mark.xfail` with a check function is probably better for something like documenting unfixed bugs or bugs in dependencies.\r\n&gt;\r\n&gt; * You can pass a `match` keyword parameter to the context-manager (`pytest.raises`) to test that a regular expression matches on the string representation of an exception. ([see more][1])\r\n\r\n\r\n  [1]: https:\/\/docs.pytest.org\/en\/stable\/assert.html#assertions-about-expected-exceptions\r\n",
        "body": "<p>There are two ways to handle exceptions in <code>pytest<\/code>:<\/p>\n<ol>\n<li>Using <code>pytest.raises<\/code> to write assertions about raised exceptions<\/li>\n<li>Using <code>@pytest.mark.xfail<\/code><\/li>\n<\/ol>\n<h3>1. Using <code>pytest.raises<\/code><\/h3>\n<p>From <a href=\"https:\/\/docs.pytest.org\/en\/stable\/assert.html#assertions-about-expected-exceptions\" rel=\"noreferrer\">the docs<\/a>:<\/p>\n<blockquote>\n<p>In order to write assertions about raised exceptions, you can use <code>pytest.raises<\/code> as a context manager<\/p>\n<\/blockquote>\n<p><strong>Examples:<\/strong><\/p>\n<p><em>Asserting just an exception:<\/em><\/p>\n<pre class=\"lang-py prettyprint-override\"><code>import pytest\n\n\ndef test_zero_division():\n    with pytest.raises(ZeroDivisionError):\n        1 \/ 0\n<\/code><\/pre>\n<p><code>with pytest.raises(ZeroDivisionError)<\/code> says that whatever is\nin the next block of code should raise a <code>ZeroDivisionError<\/code> exception. If no exception is raised, the test fails. If the test raises a different exception, it fails.<\/p>\n<p><em>If you need to have access to the actual exception info:<\/em><\/p>\n<pre class=\"lang-py prettyprint-override\"><code>import pytest\n\ndef f():\n    f()\n\ndef test_recursion_depth():\n    with pytest.raises(RuntimeError) as excinfo:\n        f()\n    assert &quot;maximum recursion&quot; in str(excinfo.value)\n<\/code><\/pre>\n<p><code>excinfo<\/code> is a <code>ExceptionInfo<\/code> instance, which is a wrapper around the actual exception raised. The main attributes of interest are <code>.type<\/code>, <code>.value<\/code> and <code>.traceback<\/code>.<\/p>\n<h3>2. Using <code>@pytest.mark.xfail<\/code><\/h3>\n<p>It is also possible to specify a <code>raises<\/code> argument to <code>pytest.mark.xfail<\/code>.<\/p>\n<pre class=\"lang-py prettyprint-override\"><code>import pytest\n\n@pytest.mark.xfail(raises=IndexError)\ndef test_f():\n    l = [1, 2, 3]\n    l[10]\n<\/code><\/pre>\n<p><code>@pytest.mark.xfail(raises=IndexError)<\/code> says that whatever is\nin the next block of code should raise an <code>IndexError<\/code> exception. If an <code>IndexError<\/code> is raised, test is marked as <code>xfailed (x)<\/code>. If no exception is raised, the test is marked as <code>xpassed (X)<\/code>. If the test raises a different exception, it fails.<\/p>\n<blockquote>\n<p><strong>Notes:<\/strong><\/p>\n<ul>\n<li><p>Using <code>pytest.raises<\/code> is likely to be better for cases where you are testing exceptions your own code is deliberately raising, whereas using <code>@pytest.mark.xfail<\/code> with a check function is probably better for something like documenting unfixed bugs or bugs in dependencies.<\/p>\n<\/li>\n<li><p>You can pass a <code>match<\/code> keyword parameter to the context-manager (<code>pytest.raises<\/code>) to test that a regular expression matches on the string representation of an exception. (<a href=\"https:\/\/docs.pytest.org\/en\/stable\/assert.html#assertions-about-expected-exceptions\" rel=\"noreferrer\">see more<\/a>)<\/p>\n<\/li>\n<\/ul>\n<\/blockquote>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1085180,
            "reputation": 34389,
            "user_id": 1081043,
            "user_type": "registered",
            "accept_rate": 72,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/ce01465deb2032903f0c1b86bc3f431e?s=256&d=identicon&r=PG",
            "display_name": "wisbucky",
            "link": "https:\/\/stackoverflow.com\/users\/1081043\/wisbucky"
        },
        "is_accepted": false,
        "score": 26,
        "last_activity_date": 1630606160,
        "last_edit_date": null,
        "creation_date": 1630606160,
        "answer_id": 69035259,
        "question_id": 29980798,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "The safest way is to call `pip` through the specific `python` that you are executing. If you run `pip show pip` directly, it may be calling a different `pip` than the one that `python` is calling. Examples:\r\n\r\n```\r\n$ python -m pip show pip\r\n$ python3 -m pip show pip\r\n$ \/usr\/bin\/python -m pip show pip\r\n$ \/usr\/local\/bin\/python3 -m pip show pip\r\n```\r\n\r\nHere&#39;s an example showing how they can differ:\r\n\r\n```sh\r\n$ pip show pip\r\n\r\nLocation: \/usr\/local\/lib\/python3.9\/site-packages\r\n\r\n$ python -m pip show pip\r\n\r\nLocation: \/Library\/Python\/2.7\/site-packages\r\n```\r\n\r\n",
        "body": "<p>The safest way is to call <code>pip<\/code> through the specific <code>python<\/code> that you are executing. If you run <code>pip show pip<\/code> directly, it may be calling a different <code>pip<\/code> than the one that <code>python<\/code> is calling. Examples:<\/p>\n<pre><code>$ python -m pip show pip\n$ python3 -m pip show pip\n$ \/usr\/bin\/python -m pip show pip\n$ \/usr\/local\/bin\/python3 -m pip show pip\n<\/code><\/pre>\n<p>Here's an example showing how they can differ:<\/p>\n<pre class=\"lang-sh prettyprint-override\"><code>$ pip show pip\n\nLocation: \/usr\/local\/lib\/python3.9\/site-packages\n\n$ python -m pip show pip\n\nLocation: \/Library\/Python\/2.7\/site-packages\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 878708,
            "reputation": 338,
            "user_id": 116819,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/90abafeda5c691059eda47dab2397144?s=256&d=identicon&r=PG",
            "display_name": "Adam",
            "link": "https:\/\/stackoverflow.com\/users\/116819\/adam"
        },
        "is_accepted": false,
        "score": 25,
        "last_activity_date": 1564435279,
        "last_edit_date": 1564435279.0,
        "creation_date": 1262468130,
        "answer_id": 1992942,
        "question_id": 842059,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "These might work.  I don&#39;t know how they behave when running as a service.  They aren&#39;t portable, but that&#39;s what `os.name` and `if`statements are for.\r\n\r\n    win32api.GetUserName()\r\n\r\n    win32api.GetUserNameEx(...) \r\n\r\nSee:\r\nhttp:\/\/timgolden.me.uk\/python\/win32_how_do_i\/get-the-owner-of-a-file.html",
        "body": "<p>These might work.  I don't know how they behave when running as a service.  They aren't portable, but that's what <code>os.name<\/code> and <code>if<\/code>statements are for.<\/p>\n\n<pre><code>win32api.GetUserName()\n\nwin32api.GetUserNameEx(...) \n<\/code><\/pre>\n\n<p>See:\n<a href=\"http:\/\/timgolden.me.uk\/python\/win32_how_do_i\/get-the-owner-of-a-file.html\" rel=\"noreferrer\">http:\/\/timgolden.me.uk\/python\/win32_how_do_i\/get-the-owner-of-a-file.html<\/a><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 53576,
            "reputation": 75610,
            "user_id": 160206,
            "user_type": "registered",
            "accept_rate": 80,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/9c9c2c5fc83c72e6dc9d78e06739bdbd?s=256&d=identicon&r=PG",
            "display_name": "Bj&#246;rn Pollex",
            "link": "https:\/\/stackoverflow.com\/users\/160206\/bj%c3%b6rn-pollex"
        },
        "is_accepted": false,
        "score": 25,
        "last_activity_date": 1306357224,
        "last_edit_date": null,
        "creation_date": 1306357224,
        "answer_id": 6130879,
        "question_id": 6130768,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "If you want a more transparent solution, you can subclass `dict` to get this behavior:\r\n\r\n    class NoneDict(dict):\r\n        def __getitem__(self, key):\r\n            return dict.get(self, key)\r\n\r\n    &gt;&gt;&gt; foo = NoneDict([(1,&quot;asdf&quot;), (2,&quot;qwerty&quot;)])\r\n    &gt;&gt;&gt; foo[1]\r\n    &#39;asdf&#39;\r\n    &gt;&gt;&gt; foo[2]\r\n    &#39;qwerty&#39;\r\n    &gt;&gt;&gt; foo[3] is None\r\n    True\r\n    ",
        "body": "<p>If you want a more transparent solution, you can subclass <code>dict<\/code> to get this behavior:<\/p>\n\n<pre><code>class NoneDict(dict):\n    def __getitem__(self, key):\n        return dict.get(self, key)\n\n&gt;&gt;&gt; foo = NoneDict([(1,\"asdf\"), (2,\"qwerty\")])\n&gt;&gt;&gt; foo[1]\n'asdf'\n&gt;&gt;&gt; foo[2]\n'qwerty'\n&gt;&gt;&gt; foo[3] is None\nTrue\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 18859,
            "reputation": 9043,
            "user_id": 43665,
            "user_type": "registered",
            "accept_rate": 76,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/b5797a86acd27838b156aaffa4f6bf81?s=256&d=identicon&r=PG",
            "display_name": "job",
            "link": "https:\/\/stackoverflow.com\/users\/43665\/job"
        },
        "is_accepted": false,
        "score": 25,
        "last_activity_date": 1490988056,
        "last_edit_date": 1490988056.0,
        "creation_date": 1306357774,
        "answer_id": 6130973,
        "question_id": 6130768,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "I usually use a [defaultdict][1] for situations like this. You supply a factory method that takes no arguments and creates a value when it sees a new key. It&#39;s more useful when you want to return something like an empty list on new keys ([see the examples][2]).\r\n\r\n    from collections import defaultdict\r\n    d = defaultdict(lambda: None)\r\n    print d[&#39;new_key&#39;]  # prints &#39;None&#39;\r\n\r\n\r\n  [1]: http:\/\/docs.python.org\/library\/collections.html#defaultdict-objects\r\n  [2]: http:\/\/docs.python.org\/library\/collections.html#defaultdict-examples",
        "body": "<p>I usually use a <a href=\"http:\/\/docs.python.org\/library\/collections.html#defaultdict-objects\" rel=\"noreferrer\">defaultdict<\/a> for situations like this. You supply a factory method that takes no arguments and creates a value when it sees a new key. It's more useful when you want to return something like an empty list on new keys (<a href=\"http:\/\/docs.python.org\/library\/collections.html#defaultdict-examples\" rel=\"noreferrer\">see the examples<\/a>).<\/p>\n\n<pre><code>from collections import defaultdict\nd = defaultdict(lambda: None)\nprint d['new_key']  # prints 'None'\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1091585,
            "reputation": 6239,
            "user_id": 1086127,
            "user_type": "registered",
            "accept_rate": 88,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/d2f536d7196ab0998c57df6a6203d441?s=256&d=identicon&r=PG",
            "display_name": "mgold",
            "link": "https:\/\/stackoverflow.com\/users\/1086127\/mgold"
        },
        "is_accepted": false,
        "score": 25,
        "last_activity_date": 1323885791,
        "last_edit_date": null,
        "creation_date": 1323885791,
        "answer_id": 8509424,
        "question_id": 3939361,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "The asker almost had it. Like most things in Python, the answer is simpler than you think.\r\n\r\n    &gt;&gt;&gt; line = &quot;H E?.LL!\/;O:: &quot;  \r\n    &gt;&gt;&gt; for char in &#39; ?.!\/;:&#39;:  \r\n    ...  line = line.replace(char,&#39;&#39;)  \r\n    ...\r\n    &gt;&gt;&gt; print line\r\n    HELLO\r\n\r\nYou don&#39;t have to do the nested if\/for loop thing, but you DO need to check each character individually.",
        "body": "<p>The asker almost had it. Like most things in Python, the answer is simpler than you think.<\/p>\n\n<pre><code>&gt;&gt;&gt; line = \"H E?.LL!\/;O:: \"  \n&gt;&gt;&gt; for char in ' ?.!\/;:':  \n...  line = line.replace(char,'')  \n...\n&gt;&gt;&gt; print line\nHELLO\n<\/code><\/pre>\n\n<p>You don't have to do the nested if\/for loop thing, but you DO need to check each character individually.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1204103,
            "reputation": 9557,
            "user_id": 1174169,
            "user_type": "registered",
            "accept_rate": 89,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/3922360d337191c351efce22bab37186?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "cod3monk3y",
            "link": "https:\/\/stackoverflow.com\/users\/1174169\/cod3monk3y"
        },
        "is_accepted": false,
        "score": 25,
        "last_activity_date": 1390689558,
        "last_edit_date": null,
        "creation_date": 1390689558,
        "answer_id": 21357173,
        "question_id": 3939361,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "For the inverse requirement of __only *allowing* certain characters__ in a string, you can use regular expressions with a set complement operator `[^ABCabc]`. For example, to remove everything except ascii letters, digits, and the hyphen:\r\n\r\n    &gt;&gt;&gt; import string\r\n    &gt;&gt;&gt; import re\r\n    &gt;&gt;&gt;\r\n    &gt;&gt;&gt; phrase = &#39;  There were &quot;nine&quot; (9) chick-peas in my pocket!!!      &#39;\r\n    &gt;&gt;&gt; allow = string.letters + string.digits + &#39;-&#39;\r\n    &gt;&gt;&gt; re.sub(&#39;[^%s]&#39; % allow, &#39;&#39;, phrase)\r\n    \r\n    &#39;Therewerenine9chick-peasinmypocket&#39;\r\n\r\nFrom [the python regular expression documentation](http:\/\/docs.python.org\/2\/library\/re.html):\r\n\r\n&gt; Characters that are not within a range can be matched by complementing\r\n&gt; the set. If the first character of the set is `&#39;^&#39;`, all the characters\r\n&gt; that are not in the set will be matched. For example, `[^5]` will match\r\n&gt; any character except &#39;5&#39;, and `[^^]` will match any character except\r\n&gt; `&#39;^&#39;`. `^` has no special meaning if it\u2019s not the first character in the\r\n&gt; set.",
        "body": "<p>For the inverse requirement of <strong>only <em>allowing<\/em> certain characters<\/strong> in a string, you can use regular expressions with a set complement operator <code>[^ABCabc]<\/code>. For example, to remove everything except ascii letters, digits, and the hyphen:<\/p>\n\n<pre><code>&gt;&gt;&gt; import string\n&gt;&gt;&gt; import re\n&gt;&gt;&gt;\n&gt;&gt;&gt; phrase = '  There were \"nine\" (9) chick-peas in my pocket!!!      '\n&gt;&gt;&gt; allow = string.letters + string.digits + '-'\n&gt;&gt;&gt; re.sub('[^%s]' % allow, '', phrase)\n\n'Therewerenine9chick-peasinmypocket'\n<\/code><\/pre>\n\n<p>From <a href=\"http:\/\/docs.python.org\/2\/library\/re.html\">the python regular expression documentation<\/a>:<\/p>\n\n<blockquote>\n  <p>Characters that are not within a range can be matched by complementing\n  the set. If the first character of the set is <code>'^'<\/code>, all the characters\n  that are not in the set will be matched. For example, <code>[^5]<\/code> will match\n  any character except '5', and <code>[^^]<\/code> will match any character except\n  <code>'^'<\/code>. <code>^<\/code> has no special meaning if it\u2019s not the first character in the\n  set.<\/p>\n<\/blockquote>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4096362,
            "reputation": 1085,
            "user_id": 3363026,
            "user_type": "registered",
            "accept_rate": 54,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/cc636894add08d7d03feb5ab5ee9dea0?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "timeislove",
            "link": "https:\/\/stackoverflow.com\/users\/3363026\/timeislove"
        },
        "is_accepted": false,
        "score": 25,
        "last_activity_date": 1661109720,
        "last_edit_date": 1661109720.0,
        "creation_date": 1393551611,
        "answer_id": 22084504,
        "question_id": 16729574,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "It looks like changes after pandas 10.1 or 13.1.\r\n\r\nI upgraded from 10.1 to 13.1. Before, *[iloc][1]* is not available.\r\n\r\nNow with 13.1, `iloc[0][&#39;label&#39;]` gets a single value array rather than a scalar.\r\n\r\nLike this:\r\n\r\n    lastprice = stock.iloc[-1][&#39;Close&#39;]\r\n\r\nOutput:\r\n\r\n```lang-none\r\ndate\r\n2014-02-26 118.2\r\nname:Close, dtype: float64\r\n```\r\n\r\n  [1]: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.iloc.html\r\n\r\n",
        "body": "<p>It looks like changes after pandas 10.1 or 13.1.<\/p>\n<p>I upgraded from 10.1 to 13.1. Before, <em><a href=\"https:\/\/pandas.pydata.org\/pandas-docs\/stable\/reference\/api\/pandas.DataFrame.iloc.html\" rel=\"nofollow noreferrer\">iloc<\/a><\/em> is not available.<\/p>\n<p>Now with 13.1, <code>iloc[0]['label']<\/code> gets a single value array rather than a scalar.<\/p>\n<p>Like this:<\/p>\n<pre><code>lastprice = stock.iloc[-1]['Close']\n<\/code><\/pre>\n<p>Output:<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>date\n2014-02-26 118.2\nname:Close, dtype: float64\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 324735,
            "reputation": 4969,
            "user_id": 645491,
            "user_type": "registered",
            "accept_rate": 88,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/833761cd202c03e01ac63c55021a4eec?s=256&d=identicon&r=PG",
            "display_name": "TrinitronX",
            "link": "https:\/\/stackoverflow.com\/users\/645491\/trinitronx"
        },
        "is_accepted": false,
        "score": 25,
        "last_activity_date": 1412320154,
        "last_edit_date": null,
        "creation_date": 1412320154,
        "answer_id": 26174655,
        "question_id": 16584552,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Since pip `v1.5`, (released Jan 1 2014: [CHANGELOG][1], [PR][2]) you may also specify a subdirectory of a git repo to contain your module.  The syntax looks like this:\r\n\r\n    pip install -e git+https:\/\/git.repo\/some_repo.git#egg=my_subdir_pkg&amp;subdirectory=my_subdir_pkg # install a python package from a repo subdirectory\r\n\r\n\r\nNote: As a pip module author, ideally you&#39;d probably want to publish your module in it&#39;s own top-level repo if you can. Yet this feature is helpful for some pre-existing repos that contain python modules in subdirectories.  You might be forced to install them this way if they are not published to pypi too.\r\n\r\n[1]: https:\/\/github.com\/pypa\/pip\/blob\/develop\/CHANGES.txt\r\n[2]: https:\/\/github.com\/pypa\/pip\/pull\/1215\r\n[3]: http:\/\/stackoverflow.com\/a\/19516714\/645491",
        "body": "<p>Since pip <code>v1.5<\/code>, (released Jan 1 2014: <a href=\"https:\/\/github.com\/pypa\/pip\/blob\/develop\/CHANGES.txt\" rel=\"noreferrer\">CHANGELOG<\/a>, <a href=\"https:\/\/github.com\/pypa\/pip\/pull\/1215\" rel=\"noreferrer\">PR<\/a>) you may also specify a subdirectory of a git repo to contain your module.  The syntax looks like this:<\/p>\n\n<pre><code>pip install -e git+https:\/\/git.repo\/some_repo.git#egg=my_subdir_pkg&amp;subdirectory=my_subdir_pkg # install a python package from a repo subdirectory\n<\/code><\/pre>\n\n<p>Note: As a pip module author, ideally you'd probably want to publish your module in it's own top-level repo if you can. Yet this feature is helpful for some pre-existing repos that contain python modules in subdirectories.  You might be forced to install them this way if they are not published to pypi too.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1236595,
            "reputation": 6871,
            "user_id": 1200070,
            "user_type": "registered",
            "accept_rate": 40,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/fac3638809c035e031624cfc119497a8?s=256&d=identicon&r=PG",
            "display_name": "mircealungu",
            "link": "https:\/\/stackoverflow.com\/users\/1200070\/mircealungu"
        },
        "is_accepted": false,
        "score": 25,
        "last_activity_date": 1431031975,
        "last_edit_date": null,
        "creation_date": 1431031975,
        "answer_id": 30111421,
        "question_id": 7023052,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "If your `cool` app has it&#39;s configuration loaded from an external file, like in the following example, then don&#39;t forget to update the corresponding config file with HOST=&quot;0.0.0.0&quot;\r\n\r\n    cool.app.run(\r\n        host=cool.app.config.get(&quot;HOST&quot;, &quot;localhost&quot;),\r\n        port=cool.app.config.get(&quot;PORT&quot;, 9000)\r\n    )            \r\n\r\n",
        "body": "<p>If your <code>cool<\/code> app has it's configuration loaded from an external file, like in the following example, then don't forget to update the corresponding config file with HOST=\"0.0.0.0\"<\/p>\n\n<pre><code>cool.app.run(\n    host=cool.app.config.get(\"HOST\", \"localhost\"),\n    port=cool.app.config.get(\"PORT\", 9000)\n)            \n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "user_type": "does_not_exist",
            "display_name": "user3078690"
        },
        "is_accepted": false,
        "score": 25,
        "last_activity_date": 1482208147,
        "last_edit_date": null,
        "creation_date": 1482208147,
        "answer_id": 41234915,
        "question_id": 464864,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "I thought I would add this function for those seeking an answer without importing itertools or any other extra libraries.\r\n\r\n    def powerSet(items):\r\n        &quot;&quot;&quot;\r\n        Power set generator: get all possible combinations of a list\u2019s elements\r\n\r\n        Input:\r\n            items is a list\r\n        Output:\r\n            returns 2**n combination lists one at a time using a generator \r\n   \r\n        Reference: edx.org 6.00.2x Lecture 2 - Decision Trees and dynamic programming\r\n        &quot;&quot;&quot;\r\n\r\n        N = len(items)\r\n        # enumerate the 2**N possible combinations\r\n        for i in range(2**N):\r\n            combo = []\r\n            for j in range(N):\r\n                # test bit jth of integer i\r\n                if (i &gt;&gt; j) % 2 == 1:\r\n                    combo.append(items[j])\r\n            yield combo\r\n\r\nSimple Yield Generator Usage:\r\n\r\n    for i in powerSet([1,2,3,4]):\r\n        print (i, &quot;, &quot;,  end=&quot;&quot;)\r\n\r\nOutput from Usage example above:\r\n\r\n\r\n&gt; [] ,  [1] , [2] , [1, 2] , [3] , [1, 3] , [2, 3] , [1, 2, 3] , [4] ,\r\n&gt; [1, 4] ,  [2, 4] , [1, 2, 4] , [3, 4] , [1, 3, 4] , [2, 3, 4] , [1, 2,\r\n&gt; 3, 4] ,\r\n\r\n",
        "body": "<p>I thought I would add this function for those seeking an answer without importing itertools or any other extra libraries.<\/p>\n\n<pre><code>def powerSet(items):\n    \"\"\"\n    Power set generator: get all possible combinations of a list\u2019s elements\n\n    Input:\n        items is a list\n    Output:\n        returns 2**n combination lists one at a time using a generator \n\n    Reference: edx.org 6.00.2x Lecture 2 - Decision Trees and dynamic programming\n    \"\"\"\n\n    N = len(items)\n    # enumerate the 2**N possible combinations\n    for i in range(2**N):\n        combo = []\n        for j in range(N):\n            # test bit jth of integer i\n            if (i &gt;&gt; j) % 2 == 1:\n                combo.append(items[j])\n        yield combo\n<\/code><\/pre>\n\n<p>Simple Yield Generator Usage:<\/p>\n\n<pre><code>for i in powerSet([1,2,3,4]):\n    print (i, \", \",  end=\"\")\n<\/code><\/pre>\n\n<p>Output from Usage example above:<\/p>\n\n<blockquote>\n  <p>[] ,  [1] , [2] , [1, 2] , [3] , [1, 3] , [2, 3] , [1, 2, 3] , [4] ,\n  [1, 4] ,  [2, 4] , [1, 2, 4] , [3, 4] , [1, 3, 4] , [2, 3, 4] , [1, 2,\n  3, 4] ,<\/p>\n<\/blockquote>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 481416,
            "reputation": 356200,
            "user_id": 895245,
            "user_type": "registered",
            "accept_rate": 49,
            "profile_image": "https:\/\/i.stack.imgur.com\/5Powi.jpg?s=256&g=1",
            "display_name": "Ciro Santilli OurBigBook.com",
            "link": "https:\/\/stackoverflow.com\/users\/895245\/ciro-santilli-ourbigbook-com"
        },
        "is_accepted": false,
        "score": 25,
        "last_activity_date": 1598964822,
        "last_edit_date": 1598964822.0,
        "creation_date": 1485646845,
        "answer_id": 41916112,
        "question_id": 3323001,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "**`resource.setrlimit` must also be used to increase the stack size and prevent segfault**\r\n\r\nThe Linux kernel [limits the stack of processes](https:\/\/unix.stackexchange.com\/questions\/145557\/how-does-stack-allocation-work-in-linux\/239323#239323).\r\n\r\nPython stores local variables on the stack of the interpreter, and so recursion takes up stack space of the interpreter.\r\n\r\nIf the Python interpreter tries to go over the stack limit, the Linux kernel makes it segmentation fault.\r\n\r\nThe stack limit size is controlled with the `getrlimit` and `setrlimit` system calls.\r\n\r\nPython offers access to those system calls through the `resource` module.\r\n    \r\n`sys.setrecursionlimit` mentioned e.g. at https:\/\/stackoverflow.com\/a\/3323013\/895245 only increases the limit that the Python interpreter self imposes on its own stack size, but it does not touch the limit imposed by the Linux kernel on the Python process.\r\n\r\nExample program:\r\n\r\nmain.py\r\n\r\n    import resource\r\n    import sys\r\n    \r\n    print resource.getrlimit(resource.RLIMIT_STACK)\r\n    print sys.getrecursionlimit()\r\n    print\r\n    \r\n    # Will segfault without this line.\r\n    resource.setrlimit(resource.RLIMIT_STACK, [0x10000000, resource.RLIM_INFINITY])\r\n    sys.setrecursionlimit(0x100000)\r\n    \r\n    def f(i):\r\n        print i\r\n        sys.stdout.flush()\r\n        f(i + 1)\r\n    f(0)\r\n\r\nOf course, if you keep increasing `setrlimit`, your RAM will eventually run out, which will either slow your computer to a halt due to swap madness, or kill Python via the [OOM Killer](https:\/\/stackoverflow.com\/questions\/7880784\/what-is-rss-and-vsz-in-linux-memory-management\/57453334#57453334).\r\n\r\nFrom bash, you can see and set the stack limit (in kb) with:\r\n\r\n    ulimit -s\r\n    ulimit -s 10000\r\n\r\nThe default value for me is 8Mb.\r\n\r\nSee also:\r\n\r\n- https:\/\/stackoverflow.com\/questions\/5061582\/setting-stacksize-in-a-python-script\r\n- https:\/\/stackoverflow.com\/questions\/2917210\/python-what-is-the-hard-recursion-limit-for-linux-mac-and-windows\r\n\r\nTested on Ubuntu 16.10, Python 2.7.12.\r\n",
        "body": "<p><strong><code>resource.setrlimit<\/code> must also be used to increase the stack size and prevent segfault<\/strong><\/p>\n<p>The Linux kernel <a href=\"https:\/\/unix.stackexchange.com\/questions\/145557\/how-does-stack-allocation-work-in-linux\/239323#239323\">limits the stack of processes<\/a>.<\/p>\n<p>Python stores local variables on the stack of the interpreter, and so recursion takes up stack space of the interpreter.<\/p>\n<p>If the Python interpreter tries to go over the stack limit, the Linux kernel makes it segmentation fault.<\/p>\n<p>The stack limit size is controlled with the <code>getrlimit<\/code> and <code>setrlimit<\/code> system calls.<\/p>\n<p>Python offers access to those system calls through the <code>resource<\/code> module.<\/p>\n<p><code>sys.setrecursionlimit<\/code> mentioned e.g. at <a href=\"https:\/\/stackoverflow.com\/a\/3323013\/895245\">https:\/\/stackoverflow.com\/a\/3323013\/895245<\/a> only increases the limit that the Python interpreter self imposes on its own stack size, but it does not touch the limit imposed by the Linux kernel on the Python process.<\/p>\n<p>Example program:<\/p>\n<p>main.py<\/p>\n<pre><code>import resource\nimport sys\n\nprint resource.getrlimit(resource.RLIMIT_STACK)\nprint sys.getrecursionlimit()\nprint\n\n# Will segfault without this line.\nresource.setrlimit(resource.RLIMIT_STACK, [0x10000000, resource.RLIM_INFINITY])\nsys.setrecursionlimit(0x100000)\n\ndef f(i):\n    print i\n    sys.stdout.flush()\n    f(i + 1)\nf(0)\n<\/code><\/pre>\n<p>Of course, if you keep increasing <code>setrlimit<\/code>, your RAM will eventually run out, which will either slow your computer to a halt due to swap madness, or kill Python via the <a href=\"https:\/\/stackoverflow.com\/questions\/7880784\/what-is-rss-and-vsz-in-linux-memory-management\/57453334#57453334\">OOM Killer<\/a>.<\/p>\n<p>From bash, you can see and set the stack limit (in kb) with:<\/p>\n<pre><code>ulimit -s\nulimit -s 10000\n<\/code><\/pre>\n<p>The default value for me is 8Mb.<\/p>\n<p>See also:<\/p>\n<ul>\n<li><a href=\"https:\/\/stackoverflow.com\/questions\/5061582\/setting-stacksize-in-a-python-script\">Setting stacksize in a python script<\/a><\/li>\n<li><a href=\"https:\/\/stackoverflow.com\/questions\/2917210\/python-what-is-the-hard-recursion-limit-for-linux-mac-and-windows\">What is the hard recursion limit for Linux, Mac and Windows?<\/a><\/li>\n<\/ul>\n<p>Tested on Ubuntu 16.10, Python 2.7.12.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4566798,
            "reputation": 59860,
            "user_id": 3707607,
            "user_type": "registered",
            "accept_rate": 71,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/6af07819191e479e05e35e37774fdbe0?s=256&d=identicon&r=PG",
            "display_name": "Ted Petrou",
            "link": "https:\/\/stackoverflow.com\/users\/3707607\/ted-petrou"
        },
        "is_accepted": false,
        "score": 25,
        "last_activity_date": 1508900072,
        "last_edit_date": null,
        "creation_date": 1508900072,
        "answer_id": 46923192,
        "question_id": 13331698,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Returning a list from `apply` is a dangerous operation as the resulting object is not guaranteed to be either a Series or a DataFrame. And exceptions might be raised in certain cases. Let&#39;s walk through a simple example:\r\n\r\n    df = pd.DataFrame(data=np.random.randint(0, 5, (5,3)),\r\n                      columns=[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])\r\n    df\r\n       a  b  c\r\n    0  4  0  0\r\n    1  2  0  1\r\n    2  2  2  2\r\n    3  1  2  2\r\n    4  3  0  0\r\n\r\nThere are three possible outcomes with returning a list from `apply`\r\n\r\n**1)** If the length of the returned list is not equal to the number of columns, then a Series of lists is returned.\r\n\r\n    df.apply(lambda x: list(range(2)), axis=1)  # returns a Series\r\n    0    [0, 1]\r\n    1    [0, 1]\r\n    2    [0, 1]\r\n    3    [0, 1]\r\n    4    [0, 1]\r\n    dtype: object\r\n\r\n**2)** When the length of the returned list is equal to the number of\r\n   columns then a DataFrame is returned and each column gets the\r\n   corresponding value in the list.\r\n\r\n\r\n    df.apply(lambda x: list(range(3)), axis=1) # returns a DataFrame\r\n       a  b  c\r\n    0  0  1  2\r\n    1  0  1  2\r\n    2  0  1  2\r\n    3  0  1  2\r\n    4  0  1  2\r\n\r\n**3)** If the length of the returned list equals the number of columns for the first row but has at least one row where the list has a different number of elements than number of columns a ValueError is raised.\r\n\r\n    i = 0\r\n    def f(x):\r\n        global i\r\n        if i == 0:\r\n            i += 1\r\n            return list(range(3))\r\n        return list(range(4))\r\n    \r\n    df.apply(f, axis=1) \r\n    ValueError: Shape of passed values is (5, 4), indices imply (5, 3)\r\n\r\n### Answering the problem without apply\r\nUsing `apply` with axis=1 is very slow. It is possible to get much better performance (especially on larger datasets) with basic iterative methods.\r\n\r\n**Create larger dataframe**  \r\n\r\n    df1 = df.sample(100000, replace=True).reset_index(drop=True)\r\n\r\n### Timings\r\n\r\n    # apply is slow with axis=1\r\n    %timeit df1.apply(lambda x: mylist[x[&#39;col_1&#39;]: x[&#39;col_2&#39;]+1], axis=1)\r\n    2.59 s &#177; 76.8 ms per loop (mean &#177; std. dev. of 7 runs, 1 loop each)\r\n\r\n    # zip - similar to @Thomas\r\n    %timeit [mylist[v1:v2+1] for v1, v2 in zip(df1.col_1, df1.col_2)]  \r\n    29.5 ms &#177; 534 &#181;s per loop (mean &#177; std. dev. of 7 runs, 10 loops each)\r\n\r\n@Thomas answer\r\n\r\n    %timeit list(map(get_sublist, df1[&#39;col_1&#39;],df1[&#39;col_2&#39;]))\r\n    34 ms &#177; 459 &#181;s per loop (mean &#177; std. dev. of 7 runs, 10 loops each)",
        "body": "<p>Returning a list from <code>apply<\/code> is a dangerous operation as the resulting object is not guaranteed to be either a Series or a DataFrame. And exceptions might be raised in certain cases. Let's walk through a simple example:<\/p>\n\n<pre><code>df = pd.DataFrame(data=np.random.randint(0, 5, (5,3)),\n                  columns=['a', 'b', 'c'])\ndf\n   a  b  c\n0  4  0  0\n1  2  0  1\n2  2  2  2\n3  1  2  2\n4  3  0  0\n<\/code><\/pre>\n\n<p>There are three possible outcomes with returning a list from <code>apply<\/code><\/p>\n\n<p><strong>1)<\/strong> If the length of the returned list is not equal to the number of columns, then a Series of lists is returned.<\/p>\n\n<pre><code>df.apply(lambda x: list(range(2)), axis=1)  # returns a Series\n0    [0, 1]\n1    [0, 1]\n2    [0, 1]\n3    [0, 1]\n4    [0, 1]\ndtype: object\n<\/code><\/pre>\n\n<p><strong>2)<\/strong> When the length of the returned list is equal to the number of\n   columns then a DataFrame is returned and each column gets the\n   corresponding value in the list.<\/p>\n\n<pre><code>df.apply(lambda x: list(range(3)), axis=1) # returns a DataFrame\n   a  b  c\n0  0  1  2\n1  0  1  2\n2  0  1  2\n3  0  1  2\n4  0  1  2\n<\/code><\/pre>\n\n<p><strong>3)<\/strong> If the length of the returned list equals the number of columns for the first row but has at least one row where the list has a different number of elements than number of columns a ValueError is raised.<\/p>\n\n<pre><code>i = 0\ndef f(x):\n    global i\n    if i == 0:\n        i += 1\n        return list(range(3))\n    return list(range(4))\n\ndf.apply(f, axis=1) \nValueError: Shape of passed values is (5, 4), indices imply (5, 3)\n<\/code><\/pre>\n\n<h3>Answering the problem without apply<\/h3>\n\n<p>Using <code>apply<\/code> with axis=1 is very slow. It is possible to get much better performance (especially on larger datasets) with basic iterative methods.<\/p>\n\n<p><strong>Create larger dataframe<\/strong>  <\/p>\n\n<pre><code>df1 = df.sample(100000, replace=True).reset_index(drop=True)\n<\/code><\/pre>\n\n<h3>Timings<\/h3>\n\n<pre><code># apply is slow with axis=1\n%timeit df1.apply(lambda x: mylist[x['col_1']: x['col_2']+1], axis=1)\n2.59 s \u00b1 76.8 ms per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n\n# zip - similar to @Thomas\n%timeit [mylist[v1:v2+1] for v1, v2 in zip(df1.col_1, df1.col_2)]  \n29.5 ms \u00b1 534 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\n<\/code><\/pre>\n\n<p>@Thomas answer<\/p>\n\n<pre><code>%timeit list(map(get_sublist, df1['col_1'],df1['col_2']))\n34 ms \u00b1 459 \u00b5s per loop (mean \u00b1 std. dev. of 7 runs, 10 loops each)\n<\/code><\/pre>\n",
        "community_owned_date": null
    }
]

[{"owner":{"account_id":6660,"reputation":29680,"user_id":11289,"user_type":"registered","accept_rate":75,"profile_image":"https:\/\/www.gravatar.com\/avatar\/a82922f943c2ed9dac3f2b00343a6a3b?s=256&d=identicon&r=PG","display_name":"Axeman","link":"https:\/\/stackoverflow.com\/users\/11289\/axeman"},"is_accepted":false,"score":2,"last_activity_date":1313079034,"last_edit_date":1313079034.0,"creation_date":1313078659,"answer_id":7029144,"question_id":7028145,"content_license":"CC BY-SA 3.0","body_markdown":"    my $k = each %h;\r\n\r\nHowever, you must remember to reset the iterator if you ever want to use it on the same hash again. Either another `each` will do it, or `keys` will, and if used in a scalar context, will avoid creating a list. So you can reset it with \r\n\r\n    scalar keys %h; \r\n    # OR\r\n    each %h;          # &lt;- gets the undef\r\n    my $k2 = each %h; # &lt;- gets the first key\r\n\r\nSo you could do it like this:\r\n\r\n    my $k = ( scalar keys %h, each %h );\r\n\r\nBut assuming it like reading JSON messages and stuff where you just want to read what&#39;s in the hash once and throw it away, it is probably the most succinct. However, if you want the variable right away, it&#39;s probably easier to do this: \r\n\r\n    my ( $k, $v ) = each %$simple_JSON_structure;\r\n","body":"<pre><code>my $k = each %h;\n<\/code><\/pre>\n\n<p>However, you must remember to reset the iterator if you ever want to use it on the same hash again. Either another <code>each<\/code> will do it, or <code>keys<\/code> will, and if used in a scalar context, will avoid creating a list. So you can reset it with <\/p>\n\n<pre><code>scalar keys %h; \n# OR\neach %h;          # &lt;- gets the undef\nmy $k2 = each %h; # &lt;- gets the first key\n<\/code><\/pre>\n\n<p>So you could do it like this:<\/p>\n\n<pre><code>my $k = ( scalar keys %h, each %h );\n<\/code><\/pre>\n\n<p>But assuming it like reading JSON messages and stuff where you just want to read what's in the hash once and throw it away, it is probably the most succinct. However, if you want the variable right away, it's probably easier to do this: <\/p>\n\n<pre><code>my ( $k, $v ) = each %$simple_JSON_structure;\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":307073,"reputation":749,"user_id":618177,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/242e679d375fad90f68a54ac098beb7f?s=256&d=identicon&r=PG","display_name":"Dale Gerdemann","link":"https:\/\/stackoverflow.com\/users\/618177\/dale-gerdemann"},"is_accepted":false,"score":2,"last_activity_date":1328266300,"last_edit_date":null,"creation_date":1328266300,"answer_id":9127437,"question_id":9114402,"content_license":"CC BY-SA 3.0","body_markdown":"Here&#39;s an O(N) solution with Foma-like pseudocode regular expressions over triples (for lcp, you have two inputs and an output). To keep it simple, I assume a binary alphabet {a,b}:\r\n\r\n    def match {a:a:a, b:b:b};\r\n    def mismatch {a:b:\u03b5, b:a:\u03b5};\r\n    def lcp match* \u222a (match* mismatch (\u03a3:\u03a3:\u03b5)*)\r\n\r\nNow you just need a language that implements multi-tape transducers.\r\n\r\n","body":"<p>Here's an O(N) solution with Foma-like pseudocode regular expressions over triples (for lcp, you have two inputs and an output). To keep it simple, I assume a binary alphabet {a,b}:<\/p>\n\n<pre><code>def match {a:a:a, b:b:b};\ndef mismatch {a:b:\u03b5, b:a:\u03b5};\ndef lcp match* \u222a (match* mismatch (\u03a3:\u03a3:\u03b5)*)\n<\/code><\/pre>\n\n<p>Now you just need a language that implements multi-tape transducers.<\/p>\n","community_owned_date":null},{"owner":{"account_id":289134,"reputation":372786,"user_id":589924,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/b2cf53d5a3d25f95c0db4e025aed4153?s=256&d=identicon&r=PG","display_name":"ikegami","link":"https:\/\/stackoverflow.com\/users\/589924\/ikegami"},"is_accepted":false,"score":2,"last_activity_date":1344565521,"last_edit_date":1344565521.0,"creation_date":1344401049,"answer_id":11857774,"question_id":11855652,"content_license":"CC BY-SA 3.0","body_markdown":"You think it&#39;s inconsistent because you think it replaces &quot;the empty string at pos 0&quot; when it&#39;s actually replacing &quot;the sequences of &#39;a&#39;s at pos 0&quot;. You shouldn&#39;t be surprised that the sequence is longer when the input is `a` as compared to `b`. \r\n\r\n`$_ = &quot;a&quot;; s\/a*\/e\/g`:\r\n\r\n1. Try at pos 0: Match 1 char at pos 0. Pos = 1.\r\n1. Try at pos 1: Match 0 char at pos 1. Pos = 1.\r\n1. Try at pos 1: &lt;s&gt;Match 0 char at pos 1.&lt;\/s&gt; Oops, already did that, so fail at that position. Pos = 2.\r\n\r\n`$_ = &quot;b&quot;; s\/a*\/e\/g`:\r\n\r\n1. Try at pos 0: Match 0 char at pos 0. Pos = 0.\r\n1. Try at pos 0: &lt;s&gt;Match 0 char at pos 0.&lt;\/s&gt; Oops, already did that, so fail at that position. Pos = 1.\r\n1. Try at pos 1: Match 0 char at pos 1. Pos = 1.\r\n1. Try at pos 1: &lt;s&gt;Match 0 char at pos 1.&lt;\/s&gt; Oops, already did that, so fail at that position. Pos = 2.\r\n\r\nIf you want to match an empty string at pos 0, you&#39;ll have to ask it to do so.\r\n\r\n    &gt;perl -E&quot;say &#39;a&#39; =~ s\/^|a*\/e\/gr;&quot;\r\n    eee\r\n    \r\n    &gt;perl -E&quot;say &#39;b&#39; =~ s\/^|a*\/e\/gr;&quot;\r\n    ebe\r\n","body":"<p>You think it's inconsistent because you think it replaces \"the empty string at pos 0\" when it's actually replacing \"the sequences of 'a's at pos 0\". You shouldn't be surprised that the sequence is longer when the input is <code>a<\/code> as compared to <code>b<\/code>. <\/p>\n\n<p><code>$_ = \"a\"; s\/a*\/e\/g<\/code>:<\/p>\n\n<ol>\n<li>Try at pos 0: Match 1 char at pos 0. Pos = 1.<\/li>\n<li>Try at pos 1: Match 0 char at pos 1. Pos = 1.<\/li>\n<li>Try at pos 1: <s>Match 0 char at pos 1.<\/s> Oops, already did that, so fail at that position. Pos = 2.<\/li>\n<\/ol>\n\n<p><code>$_ = \"b\"; s\/a*\/e\/g<\/code>:<\/p>\n\n<ol>\n<li>Try at pos 0: Match 0 char at pos 0. Pos = 0.<\/li>\n<li>Try at pos 0: <s>Match 0 char at pos 0.<\/s> Oops, already did that, so fail at that position. Pos = 1.<\/li>\n<li>Try at pos 1: Match 0 char at pos 1. Pos = 1.<\/li>\n<li>Try at pos 1: <s>Match 0 char at pos 1.<\/s> Oops, already did that, so fail at that position. Pos = 2.<\/li>\n<\/ol>\n\n<p>If you want to match an empty string at pos 0, you'll have to ask it to do so.<\/p>\n\n<pre><code>&gt;perl -E\"say 'a' =~ s\/^|a*\/e\/gr;\"\neee\n\n&gt;perl -E\"say 'b' =~ s\/^|a*\/e\/gr;\"\nebe\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":1786664,"reputation":21,"user_id":1628007,"user_type":"unregistered","profile_image":"https:\/\/www.gravatar.com\/avatar\/8cd00b67b3542c7dabb5323f1a44d95b?s=256&d=identicon&r=PG","display_name":"Viraj","link":"https:\/\/stackoverflow.com\/users\/1628007\/viraj"},"is_accepted":false,"score":2,"last_activity_date":1346079161,"last_edit_date":null,"creation_date":1346079161,"answer_id":12144409,"question_id":251705,"content_license":"CC BY-SA 3.0","body_markdown":"    perl Makefile.PL LIB=\/my\/perl_modules\/lib\/\r\n    make\r\n    make install\r\n    PERL5LIB=$PERL5LIB:\/my\/perl_modules\/lib\/\r\n    perl myperlcode.pl","body":"<pre><code>perl Makefile.PL LIB=\/my\/perl_modules\/lib\/\nmake\nmake install\nPERL5LIB=$PERL5LIB:\/my\/perl_modules\/lib\/\nperl myperlcode.pl\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":1841772,"reputation":7309,"user_id":1671032,"user_type":"registered","accept_rate":82,"profile_image":"https:\/\/i.stack.imgur.com\/FfJD4.jpg?s=256&g=1","display_name":"Galimov Albert","link":"https:\/\/stackoverflow.com\/users\/1671032\/galimov-albert"},"is_accepted":false,"score":2,"last_activity_date":1348258825,"last_edit_date":null,"creation_date":1348258825,"answer_id":12537646,"question_id":12521713,"content_license":"CC BY-SA 3.0","body_markdown":"    my @locale_list = `locale -a`;\r\n    chomp(@locale_list);","body":"<pre><code>my @locale_list = `locale -a`;\nchomp(@locale_list);\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":94247,"reputation":10455,"user_id":257418,"user_type":"registered","accept_rate":56,"profile_image":"https:\/\/i.stack.imgur.com\/97Mb4.png?s=256&g=1","display_name":"Lynn","link":"https:\/\/stackoverflow.com\/users\/257418\/lynn"},"is_accepted":false,"score":2,"last_activity_date":1370984336,"last_edit_date":null,"creation_date":1370984336,"answer_id":17053713,"question_id":17053666,"content_license":"CC BY-SA 3.0","body_markdown":"You could put the rest of your `if` block inside another `if` statement, like this:\r\n\r\n    if (some_condition) {\r\n        blah, blah, blah\r\n        if (!$some_other_condition) {\r\n            blah, blah, blah\r\n            ...\r\n        }\r\n    }","body":"<p>You could put the rest of your <code>if<\/code> block inside another <code>if<\/code> statement, like this:<\/p>\n\n<pre><code>if (some_condition) {\n    blah, blah, blah\n    if (!$some_other_condition) {\n        blah, blah, blah\n        ...\n    }\n}\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":391946,"reputation":4097,"user_id":752901,"user_type":"registered","accept_rate":53,"profile_image":"https:\/\/www.gravatar.com\/avatar\/b46e27c0e0e5e2e87193bb4037284be5?s=256&d=identicon&r=PG","display_name":"AlfredoVR","link":"https:\/\/stackoverflow.com\/users\/752901\/alfredovr"},"is_accepted":false,"score":2,"last_activity_date":1374981611,"last_edit_date":1374981611.0,"creation_date":1374964610,"answer_id":17903141,"question_id":17332808,"content_license":"CC BY-SA 3.0","body_markdown":"Many answers already to this question but i&#39;ll give it a shot for the confused newbie:\r\n\r\n    my $foo = 500;\r\n    my $bar = &#39;500&#39;;\r\n\r\nAs they are, for practical pourposes they are the &quot;same&quot;. The interesting part is when you use operators.\r\nFor example:\r\n\r\n    print $foo + 0;\r\n\r\n    output: 500\r\n\r\nThe &#39;+&#39; operator sees a number at its left and a number at its right, both decimals, hence the answer is 500 + 0 =&gt; 500\r\n\r\n    print $bar + 0;\r\n\r\n    output: 500\r\n\r\nSame output, the operator sees a string that looks like a decimal integer at its left, and a zero at its right, hence 500 + 0 =&gt; 500\r\n\r\nBut where are the differences?\r\nIt depends on the operator used. Operators decide what&#39;s going to happen. For example:\r\n\r\n    my $foo = &#39;128hello&#39;;\r\n    print $foo + 0;\r\n    output: 128\r\n\r\nIn this case it behaves like atoi() in C. It takes biggest numeric part starting from the left and uses it as a number. If there are no numbers it uses it as a 0.\r\n\r\nHow to deal with this in conditionals?\r\n\r\n    my $foo = &#39;0900&#39;;\r\n    my $bar = 900;\r\n    if( $foo == $bar)\r\n    {print &quot;ok!&quot;}\r\n    else\r\n    {print &quot;not ok!&quot;}\r\n\r\n    output: ok!\r\n\r\n== compares the numerical value in both variables.\r\nif you use warnings it will complain about using == with strings but it will still try to coerce.\r\n\r\n    my $foo = &#39;0900&#39;;\r\n    my $bar = 900;\r\n    if( $foo eq $bar)\r\n    {print &quot;ok!&quot;}\r\n    else\r\n    {print &quot;not ok!&quot;}\r\n\r\n    output: not ok!\r\n\r\neq compares strings for equality.\r\n","body":"<p>Many answers already to this question but i'll give it a shot for the confused newbie:<\/p>\n\n<pre><code>my $foo = 500;\nmy $bar = '500';\n<\/code><\/pre>\n\n<p>As they are, for practical pourposes they are the \"same\". The interesting part is when you use operators.\nFor example:<\/p>\n\n<pre><code>print $foo + 0;\n\noutput: 500\n<\/code><\/pre>\n\n<p>The '+' operator sees a number at its left and a number at its right, both decimals, hence the answer is 500 + 0 => 500<\/p>\n\n<pre><code>print $bar + 0;\n\noutput: 500\n<\/code><\/pre>\n\n<p>Same output, the operator sees a string that looks like a decimal integer at its left, and a zero at its right, hence 500 + 0 => 500<\/p>\n\n<p>But where are the differences?\nIt depends on the operator used. Operators decide what's going to happen. For example:<\/p>\n\n<pre><code>my $foo = '128hello';\nprint $foo + 0;\noutput: 128\n<\/code><\/pre>\n\n<p>In this case it behaves like atoi() in C. It takes biggest numeric part starting from the left and uses it as a number. If there are no numbers it uses it as a 0.<\/p>\n\n<p>How to deal with this in conditionals?<\/p>\n\n<pre><code>my $foo = '0900';\nmy $bar = 900;\nif( $foo == $bar)\n{print \"ok!\"}\nelse\n{print \"not ok!\"}\n\noutput: ok!\n<\/code><\/pre>\n\n<p>== compares the numerical value in both variables.\nif you use warnings it will complain about using == with strings but it will still try to coerce.<\/p>\n\n<pre><code>my $foo = '0900';\nmy $bar = 900;\nif( $foo eq $bar)\n{print \"ok!\"}\nelse\n{print \"not ok!\"}\n\noutput: not ok!\n<\/code><\/pre>\n\n<p>eq compares strings for equality.<\/p>\n","community_owned_date":null},{"owner":{"account_id":9417,"reputation":96497,"user_id":17389,"user_type":"registered","accept_rate":38,"profile_image":"https:\/\/www.gravatar.com\/avatar\/cd06d1314817ce946ab796af8750b56a?s=256&d=identicon&r=PG","display_name":"ysth","link":"https:\/\/stackoverflow.com\/users\/17389\/ysth"},"is_accepted":false,"score":2,"last_activity_date":1384671082,"last_edit_date":null,"creation_date":1384671082,"answer_id":20028050,"question_id":12521713,"content_license":"CC BY-SA 3.0","body_markdown":"http:\/\/perldoc.perl.org\/perllocale.html#Finding-locales:\r\n&gt; For locales available in your system, consult also setlocale(3) to see whether it leads to the list of available locales (search for the SEE ALSO section). If that fails, try the following command lines:\r\n\r\n    locale -a\r\n    nlsinfo\r\n    ls \/usr\/lib\/nls\/loc\r\n    ls \/usr\/lib\/locale\r\n    ls \/usr\/lib\/nls\r\n    ls \/usr\/share\/locale","body":"<p><a href=\"http:\/\/perldoc.perl.org\/perllocale.html#Finding-locales\" rel=\"nofollow\">http:\/\/perldoc.perl.org\/perllocale.html#Finding-locales<\/a>:<\/p>\n\n<blockquote>\n  <p>For locales available in your system, consult also setlocale(3) to see whether it leads to the list of available locales (search for the SEE ALSO section). If that fails, try the following command lines:<\/p>\n<\/blockquote>\n\n<pre><code>locale -a\nnlsinfo\nls \/usr\/lib\/nls\/loc\nls \/usr\/lib\/locale\nls \/usr\/lib\/nls\nls \/usr\/share\/locale\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":4109035,"reputation":21,"user_id":3372110,"user_type":"unregistered","profile_image":"https:\/\/www.gravatar.com\/avatar\/11179437550fae98a9ea610ecbd13701?s=256&d=identicon&r=PG","display_name":"dg546gs4d65","link":"https:\/\/stackoverflow.com\/users\/3372110\/dg546gs4d65"},"is_accepted":false,"score":2,"last_activity_date":1393805942,"last_edit_date":null,"creation_date":1393805942,"answer_id":22135580,"question_id":19161887,"content_license":"CC BY-SA 3.0","body_markdown":"If you call:  \r\n\r\n    $myinstance-&gt;myMethod(&quot;my_parameter&quot;);  \r\n\r\nis the same that doing:\r\n\r\n    myMethod($myinstance, &quot;my_parameter&quot;);  \r\n\r\nbut if you do: \r\n\r\n    myMethod(&quot;my_parameter&quot;);  \r\n\r\nonly &quot;my_parameter&quot; wil be passed.  \r\n\r\nTHEN if inside myMethod always you do : \r\n\r\n     $self = shift @_;  \r\n\r\n$self will be the object reference when myMethod id called from an object context  \r\nbut will be &quot;my_parameter&quot; when called from another method inside on a procedural way.  \r\nBe aware of this;","body":"<p>If you call:  <\/p>\n\n<pre><code>$myinstance-&gt;myMethod(\"my_parameter\");  \n<\/code><\/pre>\n\n<p>is the same that doing:<\/p>\n\n<pre><code>myMethod($myinstance, \"my_parameter\");  \n<\/code><\/pre>\n\n<p>but if you do: <\/p>\n\n<pre><code>myMethod(\"my_parameter\");  \n<\/code><\/pre>\n\n<p>only \"my_parameter\" wil be passed.  <\/p>\n\n<p>THEN if inside myMethod always you do : <\/p>\n\n<pre><code> $self = shift @_;  \n<\/code><\/pre>\n\n<p>$self will be the object reference when myMethod id called from an object context<br>\nbut will be \"my_parameter\" when called from another method inside on a procedural way.<br>\nBe aware of this;<\/p>\n","community_owned_date":null},{"owner":{"account_id":336472,"reputation":3671,"user_id":664132,"user_type":"registered","accept_rate":60,"profile_image":"https:\/\/www.gravatar.com\/avatar\/7be89889980d26e20445d0f13115af9f?s=256&d=identicon&r=PG","display_name":"basic6","link":"https:\/\/stackoverflow.com\/users\/664132\/basic6"},"is_accepted":false,"score":2,"last_activity_date":1552384760,"last_edit_date":1552384760.0,"creation_date":1396187770,"answer_id":22744816,"question_id":3435122,"content_license":"CC BY-SA 4.0","body_markdown":"The book &quot;Perl Best Practices&quot; recommends the use of `return;` instead of `return undef;` because the latter would return a one-element list in list context (the other answers already mention this). This would be a &quot;nasty bug&quot; according to the book.\r\n\r\nHowever, I think returning nothing can actually cause serious bugs (probably difficult to find), whereas calling a boolean function in list context seems rather simple to debug.\r\n\r\nSo I *always* return *something* (that evaluates to) false in my boolean functions (usually 0 for false and 1 for true).  \r\n(Yes, this would also return a one-element list in list context - so the comment in the book is technically right -, but then the actual error would be calling the boolean function in list context.)\r\n\r\nTo be clear, I still recommend the book. It offers a lot of good advice.  \r\nAnd I am referring to Chapter 9 (Subroutines), page 199\/200 (&quot;Use a bare return to return failure.&quot;) in the book &quot;Perl Best Practices&quot; by Damian Conway (O&#39;Reilly Media, Inc.), ISBN 978-0-596-00173-5. Not sure if there&#39;s another\/newer edition.\r\n\r\nSide note:  \r\nPerl seems to return an empty string when negating something. `my $foo = 5; return !$foo;` returns `q()`.\r\n","body":"<p>The book \"Perl Best Practices\" recommends the use of <code>return;<\/code> instead of <code>return undef;<\/code> because the latter would return a one-element list in list context (the other answers already mention this). This would be a \"nasty bug\" according to the book.<\/p>\n\n<p>However, I think returning nothing can actually cause serious bugs (probably difficult to find), whereas calling a boolean function in list context seems rather simple to debug.<\/p>\n\n<p>So I <em>always<\/em> return <em>something<\/em> (that evaluates to) false in my boolean functions (usually 0 for false and 1 for true).<br>\n(Yes, this would also return a one-element list in list context - so the comment in the book is technically right -, but then the actual error would be calling the boolean function in list context.)<\/p>\n\n<p>To be clear, I still recommend the book. It offers a lot of good advice.<br>\nAnd I am referring to Chapter 9 (Subroutines), page 199\/200 (\"Use a bare return to return failure.\") in the book \"Perl Best Practices\" by Damian Conway (O'Reilly Media, Inc.), ISBN 978-0-596-00173-5. Not sure if there's another\/newer edition.<\/p>\n\n<p>Side note:<br>\nPerl seems to return an empty string when negating something. <code>my $foo = 5; return !$foo;<\/code> returns <code>q()<\/code>.<\/p>\n","community_owned_date":null},{"owner":{"account_id":3252922,"reputation":61,"user_id":2742748,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/a6b33544983643871fdc57d187cdb043?s=256&d=identicon&r=PG","display_name":"Ron Abraham","link":"https:\/\/stackoverflow.com\/users\/2742748\/ron-abraham"},"is_accepted":false,"score":2,"last_activity_date":1414837785,"last_edit_date":1414837785.0,"creation_date":1414836490,"answer_id":26688145,"question_id":251705,"content_license":"CC BY-SA 3.0","body_markdown":"use `cpanm -l $DIR_NAME` option.\r\n","body":"<p>use <code>cpanm -l $DIR_NAME<\/code> option.<\/p>\n","community_owned_date":null},{"owner":{"account_id":5327241,"reputation":4621,"user_id":4248931,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/HijcJ.png?s=256&g=1","display_name":"serenesat","link":"https:\/\/stackoverflow.com\/users\/4248931\/serenesat"},"is_accepted":false,"score":2,"last_activity_date":1422950018,"last_edit_date":null,"creation_date":1422950018,"answer_id":28293880,"question_id":2415954,"content_license":"CC BY-SA 3.0","body_markdown":"Use backticks to store output in a variable\r\n\r\n    $output = `ls`;","body":"<p>Use backticks to store output in a variable<\/p>\n\n<pre><code>$output = `ls`;\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":125540,"reputation":191,"user_id":2323610,"user_type":"registered","accept_rate":11,"profile_image":"https:\/\/www.gravatar.com\/avatar\/3608b46ffb5cc26da39b03f9ac2e56da?s=256&d=identicon&r=PG","display_name":"froodley","link":"https:\/\/stackoverflow.com\/users\/2323610\/froodley"},"is_accepted":false,"score":2,"last_activity_date":1436832462,"last_edit_date":1436832462.0,"creation_date":1436823645,"answer_id":31393992,"question_id":22619917,"content_license":"CC BY-SA 3.0","body_markdown":"Dereferencing is treating a scalar as the &#39;address&#39; at which you can locate another variable (scalar, array, or hash) and its value.\n\nIn this case, $LOC{DESCRIPTION} is being interpreted as the address of another scalar, which is read into $comment.\n\nIn Perl,\n\n    my $str = &#39;some val&#39;;\n    my $ref = \\$str;\n    my $val = ${$ref};\n    my $same_val = $$ref;\n","body":"<p>Dereferencing is treating a scalar as the 'address' at which you can locate another variable (scalar, array, or hash) and its value.<\/p>\n\n<p>In this case, $LOC{DESCRIPTION} is being interpreted as the address of another scalar, which is read into $comment.<\/p>\n\n<p>In Perl,<\/p>\n\n<pre><code>my $str = 'some val';\nmy $ref = \\$str;\nmy $val = ${$ref};\nmy $same_val = $$ref;\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":468281,"reputation":14669,"user_id":874178,"user_type":"registered","accept_rate":76,"profile_image":"https:\/\/i.stack.imgur.com\/AdjGb.jpg?s=256&g=1","display_name":"sat","link":"https:\/\/stackoverflow.com\/users\/874178\/sat"},"is_accepted":false,"score":2,"last_activity_date":1445599112,"last_edit_date":1445599112.0,"creation_date":1445581866,"answer_id":33296126,"question_id":33294986,"content_license":"CC BY-SA 3.0","body_markdown":"You can use this `awk`,\r\n\r\n    awk &#39;BEGIN{file=&quot;content&quot;++i&quot;.txt&quot;} !NF{file=&quot;content&quot;++i&quot;.txt&quot;;next} {print &gt; file}&#39; yourfile\r\n\r\n(OR)\r\n\r\n    awk &#39;BEGIN{i++} !NF{++i;next} {print &gt; &quot;filename&quot;i&quot;.txt&quot;}&#39; yourfile\r\n\r\nMore readable format:\r\n\r\n    BEGIN {\r\n            file=&quot;content&quot;++i&quot;.txt&quot;\r\n    }\r\n    !NF {\r\n            file=&quot;content&quot;++i&quot;.txt&quot;;\r\n            next\r\n    }\r\n    {\r\n            print &gt; file\r\n    }","body":"<p>You can use this <code>awk<\/code>,<\/p>\n\n<pre><code>awk 'BEGIN{file=\"content\"++i\".txt\"} !NF{file=\"content\"++i\".txt\";next} {print &gt; file}' yourfile\n<\/code><\/pre>\n\n<p>(OR)<\/p>\n\n<pre><code>awk 'BEGIN{i++} !NF{++i;next} {print &gt; \"filename\"i\".txt\"}' yourfile\n<\/code><\/pre>\n\n<p>More readable format:<\/p>\n\n<pre><code>BEGIN {\n        file=\"content\"++i\".txt\"\n}\n!NF {\n        file=\"content\"++i\".txt\";\n        next\n}\n{\n        print &gt; file\n}\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":4955923,"reputation":6210,"user_id":3988526,"user_type":"registered","profile_image":"https:\/\/graph.facebook.com\/568589813\/picture?type=large","display_name":"George Vasiliou","link":"https:\/\/stackoverflow.com\/users\/3988526\/george-vasiliou"},"is_accepted":false,"score":2,"last_activity_date":1488962587,"last_edit_date":1495541871.0,"creation_date":1487123066,"answer_id":42239352,"question_id":42239179,"content_license":"CC BY-SA 3.0","body_markdown":"Can you give a try to `join`? Files must be sorted though...\r\n\r\n    $ cat d.txt\r\n    bar1\r\n    bar2\r\n    foo1\r\n    foo2\r\n    \r\n    $ cat e.txt\r\n    date1|bar1|number1\r\n    date2|bar2|number2\r\n    date3|bar3|number3\r\n    date1|foo1|number1\r\n    date2|foo2|number2\r\n    date3|foo3|number3\r\n\r\n    $ join --nocheck-order -11 -22 -t&#39;|&#39; -o 2.1 2.2 2.3 d.txt e.txt\r\n    date1|bar1|number1\r\n    date2|bar2|number2\r\n    date1|foo1|number1\r\n    date2|foo2|number2\r\n\r\n\r\nSmall Update:   \r\nBy using LC_ALL=C in front of join, things are really speed up as can be seen in the benchmark of [H&#229;kon H&#230;gland][1]\r\n\r\nPS1: I have my doubts if join can be faster than grep -f ...\r\n\r\n\r\n  [1]: https:\/\/stackoverflow.com\/questions\/42239179\/fastest-way-to-find-lines-of-a-text-file-from-another-larger-text-file-in-bash\/42370477#42370477","body":"<p>Can you give a try to <code>join<\/code>? Files must be sorted though...<\/p>\n\n<pre><code>$ cat d.txt\nbar1\nbar2\nfoo1\nfoo2\n\n$ cat e.txt\ndate1|bar1|number1\ndate2|bar2|number2\ndate3|bar3|number3\ndate1|foo1|number1\ndate2|foo2|number2\ndate3|foo3|number3\n\n$ join --nocheck-order -11 -22 -t'|' -o 2.1 2.2 2.3 d.txt e.txt\ndate1|bar1|number1\ndate2|bar2|number2\ndate1|foo1|number1\ndate2|foo2|number2\n<\/code><\/pre>\n\n<p>Small Update:<br>\nBy using LC_ALL=C in front of join, things are really speed up as can be seen in the benchmark of <a href=\"https:\/\/stackoverflow.com\/questions\/42239179\/fastest-way-to-find-lines-of-a-text-file-from-another-larger-text-file-in-bash\/42370477#42370477\">H\u00e5kon H\u00e6gland<\/a><\/p>\n\n<p>PS1: I have my doubts if join can be faster than grep -f ...<\/p>\n","community_owned_date":null},{"owner":{"account_id":4955923,"reputation":6210,"user_id":3988526,"user_type":"registered","profile_image":"https:\/\/graph.facebook.com\/568589813\/picture?type=large","display_name":"George Vasiliou","link":"https:\/\/stackoverflow.com\/users\/3988526\/george-vasiliou"},"is_accepted":false,"score":2,"last_activity_date":1488961884,"last_edit_date":1495541395.0,"creation_date":1488961884,"answer_id":42666456,"question_id":42239179,"content_license":"CC BY-SA 3.0","body_markdown":"Though this thread is over, but all grep-alike methods between two files are gathered in this post, why not to add this awk alternative, similar (or even improved) to the bounty winning Inian&#39;s awk solution:\r\n\r\n    awk &#39;NR==FNR{a[$0]=1;next}a[$2]&#39; patterns.txt FS=&quot;|&quot; datafile.txt &gt;matches.txt # For matches restricted on Field2 of datafile\r\n\r\nThis is equivalent to Inian awk `$2 in hash` solution but it could be even faster due to the fact that we don&#39;t ask awk to check if the whole hash array contains $2 of file2 - we just check if a[$2] has a value or not.\r\n\r\nWhile reading the first patterns file appart from creating the hash array we assign also a value.\r\n\r\nIf `$2` of datafile had been found before in patterns file, then `a[$2]` would have a value and thus will be printed because is not null.\r\n\r\nif `a[$2]` of datafile returns no value(null) this is translated to false =&gt; no printing. \r\n\r\nExtension to match any of the three fields of datafile:\r\n\r\n    awk &#39;NR==FNR{a[$0]=1;next}(a[$1] || a[$2] || a[$3])&#39; patterns.txt FS=&quot;|&quot; datafile.txt &gt;matches.txt. #Printed if any of the three fields of datafile match pattern.\r\n\r\nIn both cases, applying **LC_ALL=C** in front of awk, seems to speed things up.\r\n\r\nPS1: Offcourse this solution has also the pitfalls of all awk solutions. Is not a pattern matching. Is a direct \/ fixed matching between of the two files, like most of the solutions inhere.\r\n\r\nPS2: In my poor machine benchmark using the small benchmark files of [H&#229;kon H&#230;gland][1], i get about 20% better performance comparing to the `awk &#39;FNR==NR{hash[$1]; next}$2 in hash&#39; file1.txt FS=&#39;|&#39; file2.txt`   \r\n\r\n\r\n  [1]: https:\/\/stackoverflow.com\/questions\/42239179\/fastest-way-to-find-lines-of-a-text-file-from-another-larger-text-file-in-bash\/42370477#42370477","body":"<p>Though this thread is over, but all grep-alike methods between two files are gathered in this post, why not to add this awk alternative, similar (or even improved) to the bounty winning Inian's awk solution:<\/p>\n\n<pre><code>awk 'NR==FNR{a[$0]=1;next}a[$2]' patterns.txt FS=\"|\" datafile.txt &gt;matches.txt # For matches restricted on Field2 of datafile\n<\/code><\/pre>\n\n<p>This is equivalent to Inian awk <code>$2 in hash<\/code> solution but it could be even faster due to the fact that we don't ask awk to check if the whole hash array contains $2 of file2 - we just check if a[$2] has a value or not.<\/p>\n\n<p>While reading the first patterns file appart from creating the hash array we assign also a value.<\/p>\n\n<p>If <code>$2<\/code> of datafile had been found before in patterns file, then <code>a[$2]<\/code> would have a value and thus will be printed because is not null.<\/p>\n\n<p>if <code>a[$2]<\/code> of datafile returns no value(null) this is translated to false => no printing. <\/p>\n\n<p>Extension to match any of the three fields of datafile:<\/p>\n\n<pre><code>awk 'NR==FNR{a[$0]=1;next}(a[$1] || a[$2] || a[$3])' patterns.txt FS=\"|\" datafile.txt &gt;matches.txt. #Printed if any of the three fields of datafile match pattern.\n<\/code><\/pre>\n\n<p>In both cases, applying <strong>LC_ALL=C<\/strong> in front of awk, seems to speed things up.<\/p>\n\n<p>PS1: Offcourse this solution has also the pitfalls of all awk solutions. Is not a pattern matching. Is a direct \/ fixed matching between of the two files, like most of the solutions inhere.<\/p>\n\n<p>PS2: In my poor machine benchmark using the small benchmark files of <a href=\"https:\/\/stackoverflow.com\/questions\/42239179\/fastest-way-to-find-lines-of-a-text-file-from-another-larger-text-file-in-bash\/42370477#42370477\">H\u00e5kon H\u00e6gland<\/a>, i get about 20% better performance comparing to the <code>awk 'FNR==NR{hash[$1]; next}$2 in hash' file1.txt FS='|' file2.txt<\/code>   <\/p>\n","community_owned_date":null},{"owner":{"account_id":12245230,"reputation":43,"user_id":8937050,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/bebcffca82e3d4e65c3d709672d603ff?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"AJP","link":"https:\/\/stackoverflow.com\/users\/8937050\/ajp"},"is_accepted":false,"score":2,"last_activity_date":1638820438,"last_edit_date":1638820438.0,"creation_date":1510649901,"answer_id":47281442,"question_id":27179991,"content_license":"CC BY-SA 4.0","body_markdown":"Use this regex:\r\n\r\n`^(?!abc:|defg:)\\s*\\w+`\r\n\r\nThis will avoid line start with **&quot;abc:&quot;** and **&quot;defg:&quot;** as you want.\r\n\r\n","body":"<p>Use this regex:<\/p>\n<p><code>^(?!abc:|defg:)\\s*\\w+<\/code><\/p>\n<p>This will avoid line start with <strong>&quot;abc:&quot;<\/strong> and <strong>&quot;defg:&quot;<\/strong> as you want.<\/p>\n","community_owned_date":null},{"owner":{"account_id":4524737,"reputation":123,"user_id":3676932,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/OhKJr.jpg?s=256&g=1","display_name":"Gilles Maisonneuve","link":"https:\/\/stackoverflow.com\/users\/3676932\/gilles-maisonneuve"},"is_accepted":false,"score":2,"last_activity_date":1552510401,"last_edit_date":1552510401.0,"creation_date":1552509623,"answer_id":55150858,"question_id":2461472,"content_license":"CC BY-SA 4.0","body_markdown":"Beware about the answer of Eugene (can&#39;t comment on his answer), just above, that the syntax to exchange SDTOUT and STDERR is valid on Unixes (Unixen-like shells such as ksh, or bash I guess) but not under Windows CMD (error: `3&gt;&amp; was unexpected at this time.`).\r\n\r\nThe appropriate syntax under Windows CMD and Perl on Windows is:\r\n\r\n    perl -e &quot;$r=qx{nslookup 255.255.255.255 2&gt;&amp;1 1&gt;&amp;3 3&gt;&amp;2};\r\n\r\nNote that the command:\r\n\r\n    nslookup 255.255.255.255\r\n\r\nwill produce (something like) on STDOUT:\r\n\r\n    Server:  mymodem.lan\r\n    Address:  fd37:c01e:a880::1\r\n\r\nand on STDERR:\r\n\r\n    *** mymodem.lan can&#39;t find 255.255.255.255: Non-existent domain\r\n\r\n\r\n\r\nYou can test that this syntax works with the following CMD\/Perl syntax:\r\n\r\nFirst: \r\n\r\n    perl -e &quot;$r=qx{nslookup 255.255.255.255 2&gt;&amp;1 1&gt;&amp;3 3&gt;&amp;2}; $r=~s\/[\\n\\r]\/\/eg; print qq{on STDOUT qx result=[$r]};&quot;\r\n\r\nyou get: `Server:  mymodem.lan\r\nAddress:  fd37:c01e:a880::1\r\non STDOUT qx result=[*** mymodem.lan can&#39;t find 255.255.255.255: Non-existent domain]`\r\n\r\nThen\r\n\r\n    perl -e &quot;$r=qx{nslookup 255.255.255.255 2&gt;&amp;1 1&gt;&amp;3 3&gt;&amp;2}; $r=~s\/[\\n\\r]\/\/eg; print STDOUT qq{on STDOUT qx result=[$r]};&quot; 2&gt;&amp;1 1&gt;NUL:\r\n\r\nyou get: `Server:  mymodem.lan\r\nAddress:  fd37:c01e:a880::1`\r\n\r\nQED [fr:CQFD]\r\n\r\n\r\nNote that it is not possible to get BOTH stderr and stdout as returned string for a qx or backticks command. If you know for sure that the err text returned by your spawned command is of length N lines, you can still redirect STDERR to STDOUT like describe by Eugene and others but capture your qx returned text in an array instead of as scalar string. The STDERR flow will be returned into the array **before** the STDOUT so that the N first lines of your array are the SDTERR lines. Like:\r\n\r\n    @r=qx{nslookup 255.255.255.255 2&gt;&amp;1};\r\n    $r[0] is &quot;*** mymodem.lan can&#39;t find 255.255.255.255: Non-existent domain&quot;\r\n\r\nBut of course you must be sure that there ***is*** an err text on STDERR and of strictly N lines (stored in `@r[0..N-1]`). If not, the only solution is using temp files as described above.\r\n\r\n\r\n","body":"<p>Beware about the answer of Eugene (can't comment on his answer), just above, that the syntax to exchange SDTOUT and STDERR is valid on Unixes (Unixen-like shells such as ksh, or bash I guess) but not under Windows CMD (error: <code>3&gt;&amp; was unexpected at this time.<\/code>).<\/p>\n\n<p>The appropriate syntax under Windows CMD and Perl on Windows is:<\/p>\n\n<pre><code>perl -e \"$r=qx{nslookup 255.255.255.255 2&gt;&amp;1 1&gt;&amp;3 3&gt;&amp;2};\n<\/code><\/pre>\n\n<p>Note that the command:<\/p>\n\n<pre><code>nslookup 255.255.255.255\n<\/code><\/pre>\n\n<p>will produce (something like) on STDOUT:<\/p>\n\n<pre><code>Server:  mymodem.lan\nAddress:  fd37:c01e:a880::1\n<\/code><\/pre>\n\n<p>and on STDERR:<\/p>\n\n<pre><code>*** mymodem.lan can't find 255.255.255.255: Non-existent domain\n<\/code><\/pre>\n\n<p>You can test that this syntax works with the following CMD\/Perl syntax:<\/p>\n\n<p>First: <\/p>\n\n<pre><code>perl -e \"$r=qx{nslookup 255.255.255.255 2&gt;&amp;1 1&gt;&amp;3 3&gt;&amp;2}; $r=~s\/[\\n\\r]\/\/eg; print qq{on STDOUT qx result=[$r]};\"\n<\/code><\/pre>\n\n<p>you get: <code>Server:  mymodem.lan\nAddress:  fd37:c01e:a880::1\non STDOUT qx result=[*** mymodem.lan can't find 255.255.255.255: Non-existent domain]<\/code><\/p>\n\n<p>Then<\/p>\n\n<pre><code>perl -e \"$r=qx{nslookup 255.255.255.255 2&gt;&amp;1 1&gt;&amp;3 3&gt;&amp;2}; $r=~s\/[\\n\\r]\/\/eg; print STDOUT qq{on STDOUT qx result=[$r]};\" 2&gt;&amp;1 1&gt;NUL:\n<\/code><\/pre>\n\n<p>you get: <code>Server:  mymodem.lan\nAddress:  fd37:c01e:a880::1<\/code><\/p>\n\n<p>QED [fr:CQFD]<\/p>\n\n<p>Note that it is not possible to get BOTH stderr and stdout as returned string for a qx or backticks command. If you know for sure that the err text returned by your spawned command is of length N lines, you can still redirect STDERR to STDOUT like describe by Eugene and others but capture your qx returned text in an array instead of as scalar string. The STDERR flow will be returned into the array <strong>before<\/strong> the STDOUT so that the N first lines of your array are the SDTERR lines. Like:<\/p>\n\n<pre><code>@r=qx{nslookup 255.255.255.255 2&gt;&amp;1};\n$r[0] is \"*** mymodem.lan can't find 255.255.255.255: Non-existent domain\"\n<\/code><\/pre>\n\n<p>But of course you must be sure that there <strong><em>is<\/em><\/strong> an err text on STDERR and of strictly N lines (stored in <code>@r[0..N-1]<\/code>). If not, the only solution is using temp files as described above.<\/p>\n","community_owned_date":null},{"owner":{"account_id":6178838,"reputation":1011,"user_id":4814971,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/KzV61.jpg?s=256&g=1","display_name":"Jacques","link":"https:\/\/stackoverflow.com\/users\/4814971\/jacques"},"is_accepted":false,"score":2,"last_activity_date":1591073134,"last_edit_date":null,"creation_date":1591073134,"answer_id":62145004,"question_id":4006267,"content_license":"CC BY-SA 4.0","body_markdown":"As it has been mentioned you can use the traditional way with [eval](https:\/\/metacpan.org\/pod\/perlfunc#eval-EXPR), but if you want to use more elaborate exception trapping, including with exception objects, then I recommend using the try-catch-finally blocks.\r\nThere are quite a few perl modules that provide it such as [Nice::Try](https:\/\/metacpan.org\/pod\/Nice::Try) and [Syntax::Keyword::Try](https:\/\/metacpan.org\/pod\/Syntax::Keyword::Try), but [Syntax::Keyword::Try](https:\/\/metacpan.org\/pod\/Syntax::Keyword::Try) does not provide exception variable assignment or exception class catch like\r\n\r\n```\r\n  try\r\n  {\r\n    # something\r\n  }\r\n  catch( Exception $e )\r\n  {\r\n    # catch this in $e\r\n  }\r\n```\r\n\r\nFull disclosure: I am the developer of [Nice::Try](https:\/\/metacpan.org\/pod\/Nice::Try)\r\n","body":"<p>As it has been mentioned you can use the traditional way with <a href=\"https:\/\/metacpan.org\/pod\/perlfunc#eval-EXPR\" rel=\"nofollow noreferrer\">eval<\/a>, but if you want to use more elaborate exception trapping, including with exception objects, then I recommend using the try-catch-finally blocks.\nThere are quite a few perl modules that provide it such as <a href=\"https:\/\/metacpan.org\/pod\/Nice::Try\" rel=\"nofollow noreferrer\">Nice::Try<\/a> and <a href=\"https:\/\/metacpan.org\/pod\/Syntax::Keyword::Try\" rel=\"nofollow noreferrer\">Syntax::Keyword::Try<\/a>, but <a href=\"https:\/\/metacpan.org\/pod\/Syntax::Keyword::Try\" rel=\"nofollow noreferrer\">Syntax::Keyword::Try<\/a> does not provide exception variable assignment or exception class catch like<\/p>\n\n<pre><code>  try\n  {\n    # something\n  }\n  catch( Exception $e )\n  {\n    # catch this in $e\n  }\n<\/code><\/pre>\n\n<p>Full disclosure: I am the developer of <a href=\"https:\/\/metacpan.org\/pod\/Nice::Try\" rel=\"nofollow noreferrer\">Nice::Try<\/a><\/p>\n","community_owned_date":null},{"owner":{"account_id":18171979,"reputation":21,"user_id":13221464,"user_type":"registered","profile_image":"https:\/\/lh4.googleusercontent.com\/-rUgO_ZSODC8\/AAAAAAAAAAI\/AAAAAAAAAAA\/AAKWJJOFanehRFGM2uGHI6ChvBLGQNyAhQ\/photo.jpg?sz=256","display_name":"Gallu Xddd","link":"https:\/\/stackoverflow.com\/users\/13221464\/gallu-xddd"},"is_accepted":false,"score":2,"last_activity_date":1591780291,"last_edit_date":null,"creation_date":1591780291,"answer_id":62299834,"question_id":5376559,"content_license":"CC BY-SA 4.0","body_markdown":"Raku (Perl 6) has compatibility mode with Perl 5, so Perl 5 can be compiled to JVM and Parrot using Rakudo. I want LLVM for this!","body":"<p>Raku (Perl 6) has compatibility mode with Perl 5, so Perl 5 can be compiled to JVM and Parrot using Rakudo. I want LLVM for this!<\/p>\n","community_owned_date":null},{"owner":{"account_id":7926743,"reputation":217,"user_id":5985980,"user_type":"registered","accept_rate":0,"profile_image":"https:\/\/graph.facebook.com\/1039509692788914\/picture?type=large","display_name":"Suneeldatta Kolipakula","link":"https:\/\/stackoverflow.com\/users\/5985980\/suneeldatta-kolipakula"},"is_accepted":false,"score":2,"last_activity_date":1687585097,"last_edit_date":1687585097.0,"creation_date":1615450570,"answer_id":66578659,"question_id":12081818,"content_license":"CC BY-SA 4.0","body_markdown":"Execution of *next* statement will skip executing the rest of the statements in the loop for that particular iteration.\r\n\r\nStatements in the *continue* block will execute for each and every iteration, irrespective of whether the loop executed as usual or the loop needs to terminate the particular iteration by encountering the *next* statement.\r\n\r\nExample without *continue* block:\r\n\r\n\tmy $x=0;\r\n\twhile($x&lt;10)\r\n\t{\r\n\t\tif($x%2==0)\r\n\t\t{\r\n\t\t\t$x++; #incrementing x for next loop when the condition inside the if is satisfied.\r\n\t\t\tnext;\r\n\t\t}\r\n\t\tprint($x.&quot;\\n&quot;);\r\n\t\t$x++;  # incrementing x for the next loop \r\n\t}       \r\n\r\nIn the above example, the incrementation of x needs to be written 2 times. But if we use the continue statement which can hold the statements that need to be executed all the time we can increment x only one time inside the continue loop.\r\n\r\n\tmy $x=0;\r\n\twhile($x&lt;10)\r\n\t{\r\n\t\tif($x%2==0)\r\n\t\t{\r\n\t\t\tnext;\r\n\t\t}\r\n\t\tprint($x.&quot;\\n&quot;);\r\n\t}\r\n\tcontinue\r\n\t{\r\n\t\t\t$x++;\r\n\t}\r\n\r\noutput in both cases are 1,3,5,7,9","body":"<p>Execution of <em>next<\/em> statement will skip executing the rest of the statements in the loop for that particular iteration.<\/p>\n<p>Statements in the <em>continue<\/em> block will execute for each and every iteration, irrespective of whether the loop executed as usual or the loop needs to terminate the particular iteration by encountering the <em>next<\/em> statement.<\/p>\n<p>Example without <em>continue<\/em> block:<\/p>\n<pre><code>my $x=0;\nwhile($x&lt;10)\n{\n    if($x%2==0)\n    {\n        $x++; #incrementing x for next loop when the condition inside the if is satisfied.\n        next;\n    }\n    print($x.&quot;\\n&quot;);\n    $x++;  # incrementing x for the next loop \n}       \n<\/code><\/pre>\n<p>In the above example, the incrementation of x needs to be written 2 times. But if we use the continue statement which can hold the statements that need to be executed all the time we can increment x only one time inside the continue loop.<\/p>\n<pre><code>my $x=0;\nwhile($x&lt;10)\n{\n    if($x%2==0)\n    {\n        next;\n    }\n    print($x.&quot;\\n&quot;);\n}\ncontinue\n{\n        $x++;\n}\n<\/code><\/pre>\n<p>output in both cases are 1,3,5,7,9<\/p>\n","community_owned_date":null},{"owner":{"account_id":1158,"reputation":6461,"user_id":1539,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/1451fbaf7c12f9604b3c303d9a0fce3b?s=256&d=identicon&r=PG","display_name":"Ryan P","link":"https:\/\/stackoverflow.com\/users\/1539\/ryan-p"},"is_accepted":false,"score":1,"last_activity_date":1221652739,"last_edit_date":1221652739.0,"creation_date":1221618592,"answer_id":79295,"question_id":34920,"content_license":"CC BY-SA 2.5","body_markdown":"My goal in this question was to lock a file being used as a data store for several scripts. In the end I used similar code to the following (from Chris):\r\n\r\n    open (FILE, &#39;&gt;&gt;&#39;, test.dat&#39;) ; # open the file \r\n    flock FILE, 2; # try to lock the file \r\n    # do something with the file here \r\n    close(FILE); # close the file\r\n\r\nIn his example I removed the flock FILE, 8 as the close(FILE) performs this action as well. The real problem was when the script starts it has to hold the current counter, and when it ends it has to update the counter. This is where Perl has a problem, to read the file you:\r\n\r\n     open (FILE, &#39;&lt;&#39;, test.dat&#39;);\r\n     flock FILE, 2;\r\n\r\nNow I want to write out the results and since i want to overwrite the file I need to reopen and truncate which results in the following:\r\n\r\n     open (FILE, &#39;&gt;&#39;, test.dat&#39;); #single arrow truncates double appends\r\n     flock FILE, 2;\r\n\r\nIn this case the file is actually unlocked for a short period of time while the file is reopened. This demonstrates the case for the external lock file. If you are going to be changing contexts of the file, use a lock file. The modified code:\r\n\r\n    open (LOCK_FILE, &#39;&lt;&#39;, test.dat.lock&#39;) or die &quot;Could not obtain lock&quot;;\r\n    flock LOCK_FILE, 2;\r\n    open (FILE, &#39;&lt;&#39;, test.dat&#39;) or die &quot;Could not open file&quot;;\r\n    # read file\r\n    # ...\r\n    open (FILE, &#39;&gt;&#39;, test.dat&#39;) or die &quot;Could not reopen file&quot;;\r\n    #write file\r\n    close (FILE);\r\n    close (LOCK_FILE);","body":"<p>My goal in this question was to lock a file being used as a data store for several scripts. In the end I used similar code to the following (from Chris):<\/p>\n\n<pre><code>open (FILE, '&gt;&gt;', test.dat') ; # open the file \nflock FILE, 2; # try to lock the file \n# do something with the file here \nclose(FILE); # close the file\n<\/code><\/pre>\n\n<p>In his example I removed the flock FILE, 8 as the close(FILE) performs this action as well. The real problem was when the script starts it has to hold the current counter, and when it ends it has to update the counter. This is where Perl has a problem, to read the file you:<\/p>\n\n<pre><code> open (FILE, '&lt;', test.dat');\n flock FILE, 2;\n<\/code><\/pre>\n\n<p>Now I want to write out the results and since i want to overwrite the file I need to reopen and truncate which results in the following:<\/p>\n\n<pre><code> open (FILE, '&gt;', test.dat'); #single arrow truncates double appends\n flock FILE, 2;\n<\/code><\/pre>\n\n<p>In this case the file is actually unlocked for a short period of time while the file is reopened. This demonstrates the case for the external lock file. If you are going to be changing contexts of the file, use a lock file. The modified code:<\/p>\n\n<pre><code>open (LOCK_FILE, '&lt;', test.dat.lock') or die \"Could not obtain lock\";\nflock LOCK_FILE, 2;\nopen (FILE, '&lt;', test.dat') or die \"Could not open file\";\n# read file\n# ...\nopen (FILE, '&gt;', test.dat') or die \"Could not reopen file\";\n#write file\nclose (FILE);\nclose (LOCK_FILE);\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":9733,"reputation":99026,"user_id":18103,"user_type":"registered","accept_rate":68,"profile_image":"https:\/\/www.gravatar.com\/avatar\/f224e093f5d375d77316a1c4835bcfcc?s=256&d=identicon&r=PG","display_name":"skiphoppy","link":"https:\/\/stackoverflow.com\/users\/18103\/skiphoppy"},"is_accepted":false,"score":1,"last_activity_date":1262956965,"last_edit_date":1262956965.0,"creation_date":1222894777,"answer_id":159708,"question_id":154762,"content_license":"CC BY-SA 2.5","body_markdown":"I like [XML::TreeBuilder](http:\/\/search.cpan.org\/dist\/XML-TreeBuilder) because it fits the way I think.  Historically, I&#39;ve used it more for parsing than emitting.\r\n\r\nA few weeks after this question was posted, I had occasion to generate some XML from Perl.  I surveyed the other modules listed here, assuming one of them would work better than XML::TreeBuilder, but TreeBuilder was still the best choice for what I wanted.\r\n\r\nOne drawback was there is no way to represent processing instructions and declarations in an XML::TreeBuilder object.","body":"<p>I like <a href=\"http:\/\/search.cpan.org\/dist\/XML-TreeBuilder\" rel=\"nofollow noreferrer\">XML::TreeBuilder<\/a> because it fits the way I think.  Historically, I've used it more for parsing than emitting.<\/p>\n\n<p>A few weeks after this question was posted, I had occasion to generate some XML from Perl.  I surveyed the other modules listed here, assuming one of them would work better than XML::TreeBuilder, but TreeBuilder was still the best choice for what I wanted.<\/p>\n\n<p>One drawback was there is no way to represent processing instructions and declarations in an XML::TreeBuilder object.<\/p>\n","community_owned_date":null},{"owner":{"account_id":10864,"reputation":200163,"user_id":20713,"user_type":"registered","accept_rate":80,"profile_image":"https:\/\/www.gravatar.com\/avatar\/09b9758a4a83cc25547eb93891f19df7?s=256&d=identicon&r=PG","display_name":"ephemient","link":"https:\/\/stackoverflow.com\/users\/20713\/ephemient"},"is_accepted":false,"score":1,"last_activity_date":1223174876,"last_edit_date":null,"creation_date":1223174876,"answer_id":171391,"question_id":38345,"content_license":"CC BY-SA 2.5","body_markdown":"This is totally not an elegant solution, nor is it the best solution by any stretch of the imagination.  But it&#39;s fun!\r\n\r\n    package zip;\r\n    \r\n    sub TIEARRAY {\r\n        my ($class, @self) = @_;\r\n        bless \\@self, $class;\r\n    }\r\n    \r\n    sub FETCH {\r\n        my ($self, $index) = @_;\r\n        $self-&gt;[$index % @$self][$index \/ @$self];\r\n    }\r\n    \r\n    sub STORE {\r\n        my ($self, $index, $value) = @_;\r\n        $self-&gt;[$index % @$self][$index \/ @$self] = $value;\r\n    }\r\n    \r\n    sub FETCHSIZE {\r\n        my ($self) = @_;\r\n        my $size = 0;\r\n        @$_ &gt; $size and $size = @$_ for @$self;\r\n        $size * @$self;\r\n    }\r\n    \r\n    sub CLEAR {\r\n        my ($self) = @_;\r\n        @$_ = () for @$self;\r\n    }\r\n    \r\n    package main;\r\n    \r\n    my @a = qw(a b c d e f g);\r\n    my @b = 1 .. 7;\r\n    \r\n    tie my @c, zip =&gt; \\@a, \\@b;\r\n    \r\n    print &quot;@c\\n&quot;;  # ==&gt; a 1 b 2 c 3 d 4 e 5 f 6 g 7\r\n\r\nHow to handle `STORESIZE`\/`PUSH`\/`POP`\/`SHIFT`\/`UNSHIFT`\/`SPLICE` is an exercise left to the reader.","body":"<p>This is totally not an elegant solution, nor is it the best solution by any stretch of the imagination.  But it's fun!<\/p>\n\n<pre><code>package zip;\n\nsub TIEARRAY {\n    my ($class, @self) = @_;\n    bless \\@self, $class;\n}\n\nsub FETCH {\n    my ($self, $index) = @_;\n    $self-&gt;[$index % @$self][$index \/ @$self];\n}\n\nsub STORE {\n    my ($self, $index, $value) = @_;\n    $self-&gt;[$index % @$self][$index \/ @$self] = $value;\n}\n\nsub FETCHSIZE {\n    my ($self) = @_;\n    my $size = 0;\n    @$_ &gt; $size and $size = @$_ for @$self;\n    $size * @$self;\n}\n\nsub CLEAR {\n    my ($self) = @_;\n    @$_ = () for @$self;\n}\n\npackage main;\n\nmy @a = qw(a b c d e f g);\nmy @b = 1 .. 7;\n\ntie my @c, zip =&gt; \\@a, \\@b;\n\nprint \"@c\\n\";  # ==&gt; a 1 b 2 c 3 d 4 e 5 f 6 g 7\n<\/code><\/pre>\n\n<p>How to handle <code>STORESIZE<\/code>\/<code>PUSH<\/code>\/<code>POP<\/code>\/<code>SHIFT<\/code>\/<code>UNSHIFT<\/code>\/<code>SPLICE<\/code> is an exercise left to the reader.<\/p>\n","community_owned_date":null},{"owner":{"account_id":29074,"reputation":64398,"user_id":78259,"user_type":"registered","accept_rate":53,"profile_image":"https:\/\/www.gravatar.com\/avatar\/844c572938eaad1e44eb084fb39416f9?s=256&d=identicon&r=PG","display_name":"Chas. Owens","link":"https:\/\/stackoverflow.com\/users\/78259\/chas-owens"},"is_accepted":false,"score":1,"last_activity_date":1237394201,"last_edit_date":null,"creation_date":1237394201,"answer_id":659068,"question_id":658955,"content_license":"CC BY-SA 2.5","body_markdown":"If you need the maximum level of certainty that your module name will not conflict with someone else&#39;s you can take a page from Java&#39;s book: name the module with the name of the companies domain.  So if you work for Example, Inc. and their domain name is example.com, you would name your HTML parser module Com::Example::HTML::Parser or Example::Com::HTML::Parser.  The benefit of the first is that if you have multiple subunits they can all have their own name space, but the modules will still sort together:\r\n\r\n - Com::Example::Biz::FindCustomers\r\n - Com::Example::IT::ParseLogs\r\n - Com::Example::QA::TestServer\r\n\r\nbut it does look odd at first.","body":"<p>If you need the maximum level of certainty that your module name will not conflict with someone else's you can take a page from Java's book: name the module with the name of the companies domain.  So if you work for Example, Inc. and their domain name is example.com, you would name your HTML parser module Com::Example::HTML::Parser or Example::Com::HTML::Parser.  The benefit of the first is that if you have multiple subunits they can all have their own name space, but the modules will still sort together:<\/p>\n\n<ul>\n<li>Com::Example::Biz::FindCustomers<\/li>\n<li>Com::Example::IT::ParseLogs<\/li>\n<li>Com::Example::QA::TestServer<\/li>\n<\/ul>\n\n<p>but it does look odd at first.<\/p>\n","community_owned_date":null},{"owner":{"account_id":2715,"reputation":1678,"user_id":3817,"user_type":"registered","accept_rate":75,"profile_image":"https:\/\/www.gravatar.com\/avatar\/792b6087ed871435951f4dfdd8bb7dfe?s=256&d=identicon&r=PG","display_name":"RickMeasham","link":"https:\/\/stackoverflow.com\/users\/3817\/rickmeasham"},"is_accepted":false,"score":1,"last_activity_date":1238674150,"last_edit_date":null,"creation_date":1238674150,"answer_id":709448,"question_id":658955,"content_license":"CC BY-SA 2.5","body_markdown":"(I know this post is old, but as I&#39;ve had to sort this out in the past few months, I thought I&#39;d weigh in)\r\n\r\nAt work we decided that &#39;Local::&#39; felt too geographic. CompanyName:: had some problems for us too that aren&#39;t development related, I&#39;ll skip those, though I will say that CompanyName is long when you have to type it dozens of times.\r\n\r\nSo we settled on &#39;Our::&#39;. Sure, we&#39;re not &#39;CPAN Safe&#39; as there could be the day when we want to use a CPAN module with the Our:: prefix. But it feels nice.\r\n\r\nOur::Data is our Class::DBI module\r\nOur::App  is our generic app framework that does config handling and Getopt stuff\r\n\r\nNice to read and nice to type.","body":"<p>(I know this post is old, but as I've had to sort this out in the past few months, I thought I'd weigh in)<\/p>\n\n<p>At work we decided that 'Local::' felt too geographic. CompanyName:: had some problems for us too that aren't development related, I'll skip those, though I will say that CompanyName is long when you have to type it dozens of times.<\/p>\n\n<p>So we settled on 'Our::'. Sure, we're not 'CPAN Safe' as there could be the day when we want to use a CPAN module with the Our:: prefix. But it feels nice.<\/p>\n\n<p>Our::Data is our Class::DBI module\nOur::App  is our generic app framework that does config handling and Getopt stuff<\/p>\n\n<p>Nice to read and nice to type.<\/p>\n","community_owned_date":null},{"owner":{"account_id":34404,"reputation":82054,"user_id":97248,"user_type":"registered","accept_rate":91,"profile_image":"https:\/\/www.gravatar.com\/avatar\/d891ba8bd448f11617333f8642870262?s=256&d=identicon&r=PG","display_name":"pts","link":"https:\/\/stackoverflow.com\/users\/97248\/pts"},"is_accepted":false,"score":1,"last_activity_date":1240956449,"last_edit_date":1240956449.0,"creation_date":1240941026,"answer_id":799110,"question_id":797127,"content_license":"CC BY-SA 2.5","body_markdown":"Getting the program&#39;s exit status is not limited to `system()`. When you call `close(PIPE)`, it returns the exit status, and you can get the latest exit status for all 3 methods from `$?`.\r\n\r\nPlease also note that\r\n\r\n    readpipe(&#39;...&#39;)\r\n\r\nis the same as\r\n\r\n    `...`","body":"<p>Getting the program's exit status is not limited to <code>system()<\/code>. When you call <code>close(PIPE)<\/code>, it returns the exit status, and you can get the latest exit status for all 3 methods from <code>$?<\/code>.<\/p>\n\n<p>Please also note that<\/p>\n\n<pre><code>readpipe('...')\n<\/code><\/pre>\n\n<p>is the same as<\/p>\n\n<pre><code>`...`\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":39701,"reputation":1180,"user_id":114614,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/d908ff6ddcae3e0a1bde9394d887fe9a?s=256&d=identicon&r=PG","display_name":"Kevin","link":"https:\/\/stackoverflow.com\/users\/114614\/kevin"},"is_accepted":false,"score":1,"last_activity_date":1251210005,"last_edit_date":null,"creation_date":1251210005,"answer_id":1328602,"question_id":1328411,"content_license":"CC BY-SA 2.5","body_markdown":"I don&#39;t think `shift` is evil. The use of `shift` shows your willingness to actually name variables - instead of using `$_[0]`.\r\n\r\nPersonally, I use `shift` when there&#39;s only one parameter to a function. If I have more than one parameter, I&#39;ll use the list context.\r\n\r\n     my $result = decode($theString);\r\n\r\n     sub decode {\r\n       my $string = shift;\r\n     \r\n       ...\r\n     }\r\n\r\n     my $otherResult = encode($otherString, $format);\r\n\r\n     sub encode {\r\n       my ($string,$format) = @_;\r\n       ...\r\n     }","body":"<p>I don't think <code>shift<\/code> is evil. The use of <code>shift<\/code> shows your willingness to actually name variables - instead of using <code>$_[0]<\/code>.<\/p>\n\n<p>Personally, I use <code>shift<\/code> when there's only one parameter to a function. If I have more than one parameter, I'll use the list context.<\/p>\n\n<pre><code> my $result = decode($theString);\n\n sub decode {\n   my $string = shift;\n\n   ...\n }\n\n my $otherResult = encode($otherString, $format);\n\n sub encode {\n   my ($string,$format) = @_;\n   ...\n }\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":11593,"reputation":1196,"user_id":22422,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/35368ec874ab007b11ca9d557e3dc506?s=256&d=identicon&r=PG","display_name":"olle","link":"https:\/\/stackoverflow.com\/users\/22422\/olle"},"is_accepted":false,"score":1,"last_activity_date":1598455100,"last_edit_date":1598455100.0,"creation_date":1251217845,"answer_id":1329410,"question_id":1328411,"content_license":"CC BY-SA 4.0","body_markdown":"Perl::Critic is your friend here. It follows the &quot;standards&quot; set up in Damian Conway&#39;s book Perl Best Practices. Running it with --verbose 11 gives you an explanation on why things are bad. Not unpacking @_ first in your subs is a severity 4 (out of 5). E.g:\r\n\r\n    echo &#39;package foo; use warnings; use strict; sub quux { my foo= shift; my (bar,baz) = @_;};1;&#39; | perlcritic -4 --verbose 11\r\n    \r\n    Always unpack @_ first at line 1, near &#39;sub quux { my foo= shift; my (bar,baz) = @_;}&#39;.\r\n      Subroutines::RequireArgUnpacking (Severity: 4)\r\n        Subroutines that use `@_&#39; directly instead of unpacking the arguments to\r\n        local variables first have two major problems. First, they are very hard\r\n        to read. If you&#39;re going to refer to your variables by number instead of\r\n        by name, you may as well be writing assembler code! Second, `@_&#39;\r\n        contains aliases to the original variables! If you modify the contents\r\n        of a `@_&#39; entry, then you are modifying the variable outside of your\r\n        subroutine. For example:\r\n    \r\n           sub print_local_var_plus_one {\r\n               my ($var) = @_;\r\n               print ++$var;\r\n           }\r\n           sub print_var_plus_one {\r\n               print ++$_[0];\r\n           }\r\n    \r\n           my $x = 2;\r\n           print_local_var_plus_one($x); # prints &quot;3&quot;, $x is still 2\r\n           print_var_plus_one($x);       # prints &quot;3&quot;, $x is now 3 !\r\n           print $x;                     # prints &quot;3&quot;\r\n    \r\n        This is spooky action-at-a-distance and is very hard to debug if it&#39;s\r\n        not intentional and well-documented (like `chop&#39; or `chomp&#39;).\r\n    \r\n        An exception is made for the usual delegation idiom\r\n        `$object-&gt;SUPER::something( @_ )&#39;. Only `SUPER::&#39; and `NEXT::&#39; are\r\n        recognized (though this is configurable) and the argument list for the\r\n        delegate must consist only of `( @_ )&#39;.\r\n\r\n","body":"<p>Perl::Critic is your friend here. It follows the &quot;standards&quot; set up in Damian Conway's book Perl Best Practices. Running it with --verbose 11 gives you an explanation on why things are bad. Not unpacking @_ first in your subs is a severity 4 (out of 5). E.g:<\/p>\n<pre><code>echo 'package foo; use warnings; use strict; sub quux { my foo= shift; my (bar,baz) = @_;};1;' | perlcritic -4 --verbose 11\n\nAlways unpack @_ first at line 1, near 'sub quux { my foo= shift; my (bar,baz) = @_;}'.\n  Subroutines::RequireArgUnpacking (Severity: 4)\n    Subroutines that use `@_' directly instead of unpacking the arguments to\n    local variables first have two major problems. First, they are very hard\n    to read. If you're going to refer to your variables by number instead of\n    by name, you may as well be writing assembler code! Second, `@_'\n    contains aliases to the original variables! If you modify the contents\n    of a `@_' entry, then you are modifying the variable outside of your\n    subroutine. For example:\n\n       sub print_local_var_plus_one {\n           my ($var) = @_;\n           print ++$var;\n       }\n       sub print_var_plus_one {\n           print ++$_[0];\n       }\n\n       my $x = 2;\n       print_local_var_plus_one($x); # prints &quot;3&quot;, $x is still 2\n       print_var_plus_one($x);       # prints &quot;3&quot;, $x is now 3 !\n       print $x;                     # prints &quot;3&quot;\n\n    This is spooky action-at-a-distance and is very hard to debug if it's\n    not intentional and well-documented (like `chop' or `chomp').\n\n    An exception is made for the usual delegation idiom\n    `$object-&gt;SUPER::something( @_ )'. Only `SUPER::' and `NEXT::' are\n    recognized (though this is configurable) and the argument list for the\n    delegate must consist only of `( @_ )'.\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":1007,"reputation":33924,"user_id":1337,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/72de240484e389dbedb6a3e428b9f0c1?s=256&d=identicon&r=PG","display_name":"Brad Gilbert","link":"https:\/\/stackoverflow.com\/users\/1337\/brad-gilbert"},"is_accepted":false,"score":1,"last_activity_date":1251222492,"last_edit_date":null,"creation_date":1251222492,"answer_id":1329838,"question_id":1328411,"content_license":"CC BY-SA 2.5","body_markdown":"There is an optimization for list assignment.\r\n\r\n[list-bug-fix]: http:\/\/perldoc.perl.org\/perldelta.html#Selected-Bug-Fixes\r\n\r\nThe only reference I could find, is [this one][list-bug-fix].\r\n\r\n&gt; `5.10.0` inadvertently disabled an optimization, which caused a\r\n&gt; measurable performance drop in list\r\n&gt; assignment, such as is often used to\r\n&gt; assign function parameters from `@_` .\r\n&gt; The optimisation has been re-instated,\r\n&gt; and the performance regression fixed.\r\n\r\nThis is an example of the affected performance regression.\r\n\r\n    sub example{\r\n      my($arg1,$arg2,$arg3) = @_;\r\n    }","body":"<p>There is an optimization for list assignment.<\/p>\n\n<p>The only reference I could find, is <a href=\"http:\/\/perldoc.perl.org\/perldelta.html#Selected-Bug-Fixes\" rel=\"nofollow noreferrer\">this one<\/a>.<\/p>\n\n<blockquote>\n  <p><code>5.10.0<\/code> inadvertently disabled an optimization, which caused a\n  measurable performance drop in list\n  assignment, such as is often used to\n  assign function parameters from <code>@_<\/code> .\n  The optimisation has been re-instated,\n  and the performance regression fixed.<\/p>\n<\/blockquote>\n\n<p>This is an example of the affected performance regression.<\/p>\n\n<pre><code>sub example{\n  my($arg1,$arg2,$arg3) = @_;\n}\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":54369,"reputation":625,"user_id":162659,"user_type":"registered","accept_rate":75,"profile_image":"https:\/\/www.gravatar.com\/avatar\/0b5dda88ceaf2c74adb92a3776b2a9c1?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"PJ.","link":"https:\/\/stackoverflow.com\/users\/162659\/pj"},"is_accepted":false,"score":1,"last_activity_date":1604540154,"last_edit_date":1604540154.0,"creation_date":1252044323,"answer_id":1377480,"question_id":1037583,"content_license":"CC BY-SA 4.0","body_markdown":"Generally I use\r\n\r\n    perl -d\r\n\r\nfor debugging.\r\n\r\nYou can also use the *Eclipse Perl Integration* (EPIC) plug-in for Eclipse. It offers a rich debugging environment available and integrated with the EPIC Perl development environment. You can use it, and it is generally helpful.\r\n\r\n\r\n\r\n","body":"<p>Generally I use<\/p>\n<pre><code>perl -d\n<\/code><\/pre>\n<p>for debugging.<\/p>\n<p>You can also use the <em>Eclipse Perl Integration<\/em> (EPIC) plug-in for Eclipse. It offers a rich debugging environment available and integrated with the EPIC Perl development environment. You can use it, and it is generally helpful.<\/p>\n","community_owned_date":1252044323.0},{"owner":{"account_id":5303,"reputation":42286,"user_id":8457,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/cfc5e6808a7e7cf74768be0adc766452?s=256&d=identicon&r=PG","display_name":"jrockway","link":"https:\/\/stackoverflow.com\/users\/8457\/jrockway"},"is_accepted":false,"score":1,"last_activity_date":1254254385,"last_edit_date":1254254385.0,"creation_date":1254214937,"answer_id":1491399,"question_id":1490745,"content_license":"CC BY-SA 2.5","body_markdown":"I disagree that Perl is the best language for text processing.  Simple things are easy; to replace foo with bar:\r\n\r\n    $data =~ s\/foo\/bar\/g;\r\n\r\nHarder things are not simple, though.  Look at [Data::SExpression](http:\/\/search.cpan.org\/perldoc?Data::SExpression), for example.  It is a lot of code to do something very simple.\r\n\r\nAn similar implementation in Haskell with PArrow looks something like:\r\n\r\n\r\n    import Text.ParserCombinators.PArrow\r\n\r\n    data Atom = QuotedString String | Symbol String\r\n              deriving (Show, Eq)\r\n\r\n    data Sexp = Sexp [Sexp] | Atom Atom\r\n              deriving (Eq)\r\n\r\n\r\n    quotedString :: Char -&gt; Char -&gt; MD a Atom\r\n    quotedString quoteChar escapeChar = between q q inside &gt;&gt;^ QuotedString\r\n        where q = char quoteChar\r\n              inside = many $ (char escapeChar &gt;&gt;&gt; anyChar) &lt;+&gt; notChar quoteChar\r\n\r\n    doubleQuotedString, symbol :: MD a Atom\r\n    doubleQuotedString = quotedString &#39;&quot;&#39; &#39;\\\\&#39;\r\n    symbol = word &gt;&gt;^ Symbol\r\n\r\n    atom, sexp :: MD a Sexp\r\n    atom = (doubleQuotedString &lt;+&gt; symbol) &gt;&gt;^ Atom\r\n    sexp = atom &lt;+&gt; (between (char &#39;(&#39;) (char &#39;)&#39;) sexp&#39; &gt;&gt;^ Sexp)\r\n           where sexp&#39; = sepBy1 sexp spaces\r\n\r\nJust sayin&#39;.  Perl is not the end-all-and-be-all of text manipulation.  There are many reasons to prefer Perl to other languages, but parsing is not one of them.","body":"<p>I disagree that Perl is the best language for text processing.  Simple things are easy; to replace foo with bar:<\/p>\n\n<pre><code>$data =~ s\/foo\/bar\/g;\n<\/code><\/pre>\n\n<p>Harder things are not simple, though.  Look at <a href=\"http:\/\/search.cpan.org\/perldoc?Data::SExpression\" rel=\"nofollow noreferrer\">Data::SExpression<\/a>, for example.  It is a lot of code to do something very simple.<\/p>\n\n<p>An similar implementation in Haskell with PArrow looks something like:<\/p>\n\n<pre><code>import Text.ParserCombinators.PArrow\n\ndata Atom = QuotedString String | Symbol String\n          deriving (Show, Eq)\n\ndata Sexp = Sexp [Sexp] | Atom Atom\n          deriving (Eq)\n\n\nquotedString :: Char -&gt; Char -&gt; MD a Atom\nquotedString quoteChar escapeChar = between q q inside &gt;&gt;^ QuotedString\n    where q = char quoteChar\n          inside = many $ (char escapeChar &gt;&gt;&gt; anyChar) &lt;+&gt; notChar quoteChar\n\ndoubleQuotedString, symbol :: MD a Atom\ndoubleQuotedString = quotedString '\"' '\\\\'\nsymbol = word &gt;&gt;^ Symbol\n\natom, sexp :: MD a Sexp\natom = (doubleQuotedString &lt;+&gt; symbol) &gt;&gt;^ Atom\nsexp = atom &lt;+&gt; (between (char '(') (char ')') sexp' &gt;&gt;^ Sexp)\n       where sexp' = sepBy1 sexp spaces\n<\/code><\/pre>\n\n<p>Just sayin'.  Perl is not the end-all-and-be-all of text manipulation.  There are many reasons to prefer Perl to other languages, but parsing is not one of them.<\/p>\n","community_owned_date":null},{"owner":{"account_id":11844,"reputation":1322,"user_id":23048,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/c76da3846eb3fff027bc1ff373a4945f?s=256&d=identicon&r=PG","display_name":"MattG","link":"https:\/\/stackoverflow.com\/users\/23048\/mattg"},"is_accepted":false,"score":1,"last_activity_date":1254239104,"last_edit_date":null,"creation_date":1254239104,"answer_id":1493396,"question_id":1490745,"content_license":"CC BY-SA 2.5","body_markdown":"Perl was the go-to language for a long time. The problem is it can be pretty messy and difficult to maintain (some people can write Perl that avoids this, but it is very easy to wrote ugly code). I would not tell you to avoid Perl, but many have moved on to some modern alternatives.\r\n\r\nI would recommend learning one of the newer scripting languages such as Python or Ruby. Both will work very well for your needs, and can easily handle more difficult tasks later on. They&#39;re both quite nice to work in, after having written C and Perl for so long.\r\n\r\nIn short, Perl would be a good hammer for this nail. Python and Ruby would be nail-guns.","body":"<p>Perl was the go-to language for a long time. The problem is it can be pretty messy and difficult to maintain (some people can write Perl that avoids this, but it is very easy to wrote ugly code). I would not tell you to avoid Perl, but many have moved on to some modern alternatives.<\/p>\n\n<p>I would recommend learning one of the newer scripting languages such as Python or Ruby. Both will work very well for your needs, and can easily handle more difficult tasks later on. They're both quite nice to work in, after having written C and Perl for so long.<\/p>\n\n<p>In short, Perl would be a good hammer for this nail. Python and Ruby would be nail-guns.<\/p>\n","community_owned_date":null},{"owner":{"account_id":7105,"reputation":22469,"user_id":12195,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/29cb106071d163d703484e63839d89cb?s=256&d=identicon&r=PG","display_name":"draegtun","link":"https:\/\/stackoverflow.com\/users\/12195\/draegtun"},"is_accepted":false,"score":1,"last_activity_date":1317240469,"last_edit_date":1495541335.0,"creation_date":1258056857,"answer_id":1725062,"question_id":1723440,"content_license":"CC BY-SA 3.0","body_markdown":"Instead of using a regular expression you might prefer trying a grammar engine like:\r\n\r\n* [`Parse::RecDescent`][Parse::RecDescent]\r\n* [`Regexp::Grammars`][Regexp::Grammars]\r\n\r\nI&#39;ve given a snippet of a [Parse::ResDescent](https:\/\/stackoverflow.com\/questions\/160889\/emulation-of-lex-like-functionality-in-perl-or-python\/161977#161977) answer before on SO. However Regexp::Grammars looks very interesting and is influenced by [Perl6 rules &amp; grammars](http:\/\/en.wikipedia.org\/wiki\/Perl_6_rules).\r\n\r\nSo I thought I&#39;d have a crack at Regexp::Grammars ;-)\r\n\r\n    use strict;\r\n    use warnings;\r\n    use 5.010;\r\n\r\n    my $text = q{\r\n    Name=Value1\r\n    Name = Value2\r\n    Name=Value3  \r\n    };\r\n\r\n    my $grammar = do {\r\n        use Regexp::Grammars;\r\n        qr{\r\n            &lt;[VariableDeclare]&gt;*\r\n\r\n            &lt;rule: VariableDeclare&gt;\r\n                &lt;Var&gt; \\= &lt;Value&gt;\r\n\r\n            &lt;token: Var&gt;    Name\r\n\r\n            &lt;rule: Value&gt;   &lt;MATCH= ([\\w]+) &gt;\r\n        }xms;\r\n    };\r\n\r\n\r\n    if ( $text =~ $grammar ) {\r\n        my @Name_values = map { $_-&gt;{Value} } @{ $\/{VariableDeclare} };\r\n        say &quot;@Name_values&quot;;\r\n    }\r\n\r\nThe above code outputs `Value1 Value2 Value3`.  \r\n\r\nVery nice! The only caveat is that it requires Perl 5.10 and that it may be overkill for the example you provided ;-)\r\n\r\n\/I3az\/\r\n\r\n[Parse::RecDescent]:http:\/\/search.cpan.org\/dist\/Parse-RecDescent\/\r\n[Regexp::Grammars]:http:\/\/search.cpan.org\/dist\/Regexp-Grammars\/","body":"<p>Instead of using a regular expression you might prefer trying a grammar engine like:<\/p>\n\n<ul>\n<li><a href=\"http:\/\/search.cpan.org\/dist\/Parse-RecDescent\/\" rel=\"nofollow noreferrer\"><code>Parse::RecDescent<\/code><\/a><\/li>\n<li><a href=\"http:\/\/search.cpan.org\/dist\/Regexp-Grammars\/\" rel=\"nofollow noreferrer\"><code>Regexp::Grammars<\/code><\/a><\/li>\n<\/ul>\n\n<p>I've given a snippet of a <a href=\"https:\/\/stackoverflow.com\/questions\/160889\/emulation-of-lex-like-functionality-in-perl-or-python\/161977#161977\">Parse::ResDescent<\/a> answer before on SO. However Regexp::Grammars looks very interesting and is influenced by <a href=\"http:\/\/en.wikipedia.org\/wiki\/Perl_6_rules\" rel=\"nofollow noreferrer\">Perl6 rules &amp; grammars<\/a>.<\/p>\n\n<p>So I thought I'd have a crack at Regexp::Grammars ;-)<\/p>\n\n<pre><code>use strict;\nuse warnings;\nuse 5.010;\n\nmy $text = q{\nName=Value1\nName = Value2\nName=Value3  \n};\n\nmy $grammar = do {\n    use Regexp::Grammars;\n    qr{\n        &lt;[VariableDeclare]&gt;*\n\n        &lt;rule: VariableDeclare&gt;\n            &lt;Var&gt; \\= &lt;Value&gt;\n\n        &lt;token: Var&gt;    Name\n\n        &lt;rule: Value&gt;   &lt;MATCH= ([\\w]+) &gt;\n    }xms;\n};\n\n\nif ( $text =~ $grammar ) {\n    my @Name_values = map { $_-&gt;{Value} } @{ $\/{VariableDeclare} };\n    say \"@Name_values\";\n}\n<\/code><\/pre>\n\n<p>The above code outputs <code>Value1 Value2 Value3<\/code>.  <\/p>\n\n<p>Very nice! The only caveat is that it requires Perl 5.10 and that it may be overkill for the example you provided ;-)<\/p>\n\n<p>\/I3az\/<\/p>\n","community_owned_date":null},{"owner":{"account_id":5473,"reputation":130134,"user_id":2766176,"user_type":"registered","accept_rate":61,"profile_image":"https:\/\/www.gravatar.com\/avatar\/edd8638efe875601bfe394a8aea5b16d?s=256&d=identicon&r=PG","display_name":"brian d foy","link":"https:\/\/stackoverflow.com\/users\/2766176\/brian-d-foy"},"is_accepted":false,"score":1,"last_activity_date":1258057037,"last_edit_date":null,"creation_date":1258057037,"answer_id":1725074,"question_id":1723440,"content_license":"CC BY-SA 2.5","body_markdown":"Use a `Config::` module to read configuration data. For something simple like that, I might reach for [ConfigReader::Simple](http:\/\/search.cpan.org\/dist\/ConfigReader::Simple). It&#39;s nice to stay out of the weeds whenever you can.","body":"<p>Use a <code>Config::<\/code> module to read configuration data. For something simple like that, I might reach for <a href=\"http:\/\/search.cpan.org\/dist\/ConfigReader::Simple\" rel=\"nofollow noreferrer\">ConfigReader::Simple<\/a>. It's nice to stay out of the weeds whenever you can.<\/p>\n","community_owned_date":null},{"owner":{"account_id":56304,"reputation":117607,"user_id":168657,"user_type":"registered","accept_rate":92,"profile_image":"https:\/\/www.gravatar.com\/avatar\/f14e7610fca39322ebbf23530def15f8?s=256&d=identicon&r=PG","display_name":"mob","link":"https:\/\/stackoverflow.com\/users\/168657\/mob"},"is_accepted":false,"score":1,"last_activity_date":1264551665,"last_edit_date":null,"creation_date":1264551665,"answer_id":2143726,"question_id":2143554,"content_license":"CC BY-SA 2.5","body_markdown":"Each use of the `..` operator maintains its own state. Like Alex Brown said, you need to leave it in the false state when you leave the function. Maybe you could do something like:\r\n\r\n    sub search {\r\n      my $arr = shift;\r\n      grep { !( \/start\/ || $_ eq &quot;my magic reset string&quot; ..\r\n                \/never_exist\/ || $_ eq &quot;my magic reset string&quot; ) } \r\n          (@$arr, &quot;my magic reset string&quot;);\r\n    }\r\n\r\n","body":"<p>Each use of the <code>..<\/code> operator maintains its own state. Like Alex Brown said, you need to leave it in the false state when you leave the function. Maybe you could do something like:<\/p>\n\n<pre><code>sub search {\n  my $arr = shift;\n  grep { !( \/start\/ || $_ eq \"my magic reset string\" ..\n            \/never_exist\/ || $_ eq \"my magic reset string\" ) } \n      (@$arr, \"my magic reset string\");\n}\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":13147,"reputation":39789,"user_id":26227,"user_type":"registered","accept_rate":71,"profile_image":"https:\/\/i.stack.imgur.com\/UNGHL.png?s=256&g=1","display_name":"Paul Nathan","link":"https:\/\/stackoverflow.com\/users\/26227\/paul-nathan"},"is_accepted":false,"score":1,"last_activity_date":1264799519,"last_edit_date":null,"creation_date":1264799519,"answer_id":2165190,"question_id":2165161,"content_license":"CC BY-SA 2.5","body_markdown":"In C++ and C#, you can define types that can be thrown, with separate catch blocks that manage each type. Perl type systems have certain niggling issues related to RTTI and inheritance, according from what I read on chomatic&#39;s blog. \r\n\r\nI&#39;m not sure how other dynamic languages manage exceptions; both C++ and C# are static languages and that bears with it a certain power in the type system. \r\n\r\nThe *philosophical* problem is that Perl 5 exceptions are bolted on; they aren&#39;t built from the start of the language design as something integral to how Perl is written.","body":"<p>In C++ and C#, you can define types that can be thrown, with separate catch blocks that manage each type. Perl type systems have certain niggling issues related to RTTI and inheritance, according from what I read on chomatic's blog. <\/p>\n\n<p>I'm not sure how other dynamic languages manage exceptions; both C++ and C# are static languages and that bears with it a certain power in the type system. <\/p>\n\n<p>The <em>philosophical<\/em> problem is that Perl 5 exceptions are bolted on; they aren't built from the start of the language design as something integral to how Perl is written.<\/p>\n","community_owned_date":null},{"owner":{"account_id":71337,"reputation":26106,"user_id":206417,"user_type":"registered","accept_rate":71,"profile_image":"https:\/\/www.gravatar.com\/avatar\/448da181fc6df1794b855848b84f0be9?s=256&d=identicon&r=PG","display_name":"Dave Kirby","link":"https:\/\/stackoverflow.com\/users\/206417\/dave-kirby"},"is_accepted":false,"score":1,"last_activity_date":1264866449,"last_edit_date":1264866449.0,"creation_date":1264800891,"answer_id":2165316,"question_id":2165161,"content_license":"CC BY-SA 2.5","body_markdown":"It has been a looong time since I used Perl, so my memory may be fuzzy and\/or Perl may have improved, but from what I recall (in comparison with Python, which I use on a daily basis):\r\n\r\n1. since exceptions are a late addition, they are not consistently supported in the core libraries\r\n\r\n    *(Not true; they are not consistently supported in core libraries because the programmers that wrote those libraries don&#39;t like exceptions.)*\r\n\r\n2. there is no predefined hierarchy of exceptions - you can&#39;t catch a related group of exceptions by catching the base class\r\n\r\n3. there is no equivalent of try:... finally:... to define code that will be called regardless of whether an exception was raised or not, e.g. to free up resources.  \r\n\r\n    *(`finally` in Perl is largely unnecessary -- objects&#39; destructors run immediately after scope exit; not whenever there happens to be memory pressure.  So you can actually deallocate any non-memory resources in your destructor, and it will work sanely.)*\r\n\r\n4. (as far as I can tell) you can only throw strings - you can&#39;t throw objects that have additional information\r\n\r\n    *(Completely false.  `die $object` works just as well as `die $string`.)*\r\n\r\n5. you cant get a stack trace showing you where the exception was thrown - in python you get detailed information including the source code for each line in the call stack\r\n\r\n    *(False.  `perl -MCarp::Always` and enjoy.)*\r\n\r\n6. it is a butt-ugly kludge.\r\n\r\n    *(Subjective. It&#39;s implemented the same way in Perl as it is everywhere else.  It just uses differently-named keywords.)*","body":"<p>It has been a looong time since I used Perl, so my memory may be fuzzy and\/or Perl may have improved, but from what I recall (in comparison with Python, which I use on a daily basis):<\/p>\n\n<ol>\n<li><p>since exceptions are a late addition, they are not consistently supported in the core libraries<\/p>\n\n<p><em>(Not true; they are not consistently supported in core libraries because the programmers that wrote those libraries don't like exceptions.)<\/em><\/p><\/li>\n<li><p>there is no predefined hierarchy of exceptions - you can't catch a related group of exceptions by catching the base class<\/p><\/li>\n<li><p>there is no equivalent of try:... finally:... to define code that will be called regardless of whether an exception was raised or not, e.g. to free up resources.  <\/p>\n\n<p><em>(<code>finally<\/code> in Perl is largely unnecessary -- objects' destructors run immediately after scope exit; not whenever there happens to be memory pressure.  So you can actually deallocate any non-memory resources in your destructor, and it will work sanely.)<\/em><\/p><\/li>\n<li><p>(as far as I can tell) you can only throw strings - you can't throw objects that have additional information<\/p>\n\n<p><em>(Completely false.  <code>die $object<\/code> works just as well as <code>die $string<\/code>.)<\/em><\/p><\/li>\n<li><p>you cant get a stack trace showing you where the exception was thrown - in python you get detailed information including the source code for each line in the call stack<\/p>\n\n<p><em>(False.  <code>perl -MCarp::Always<\/code> and enjoy.)<\/em><\/p><\/li>\n<li><p>it is a butt-ugly kludge.<\/p>\n\n<p><em>(Subjective. It's implemented the same way in Perl as it is everywhere else.  It just uses differently-named keywords.)<\/em><\/p><\/li>\n<\/ol>\n","community_owned_date":null},{"owner":{"account_id":10100,"reputation":45581,"user_id":18914,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/7a20a39ae2ef47ae042a3eddd5b5bd19?s=256&d=identicon&r=PG","display_name":"Dave Sherohman","link":"https:\/\/stackoverflow.com\/users\/18914\/dave-sherohman"},"is_accepted":false,"score":1,"last_activity_date":1274720723,"last_edit_date":null,"creation_date":1274720723,"answer_id":2898743,"question_id":2897853,"content_license":"CC BY-SA 2.5","body_markdown":"You have two &quot;countof&quot; (pseudo-)operators, and I don&#39;t really see the difference between them.\r\n\r\nFrom the examples of &quot;the countof operator&quot;:\r\n\r\n    my $count = ()= f();              #$count is now 5\r\n    my $string = &quot;cat cat dog cat&quot;;\r\n    my $cats = ()= $string =~ \/cat\/g; #$cats is now 3\r\n\r\nFrom the examples of &quot;the goatse\/countof operator&quot;:\r\n\r\n    my $count =()= f();              #$count is now 5\r\n    my $string = &quot;cat cat dog cat&quot;;\r\n    my $cats =()= $string =~ \/cat\/g; #$cats is now 3\r\n\r\nBoth sets of examples are identical, modulo whitespace.  What is your reasoning for considering them to be two distinct pseudo-operators?","body":"<p>You have two \"countof\" (pseudo-)operators, and I don't really see the difference between them.<\/p>\n\n<p>From the examples of \"the countof operator\":<\/p>\n\n<pre><code>my $count = ()= f();              #$count is now 5\nmy $string = \"cat cat dog cat\";\nmy $cats = ()= $string =~ \/cat\/g; #$cats is now 3\n<\/code><\/pre>\n\n<p>From the examples of \"the goatse\/countof operator\":<\/p>\n\n<pre><code>my $count =()= f();              #$count is now 5\nmy $string = \"cat cat dog cat\";\nmy $cats =()= $string =~ \/cat\/g; #$cats is now 3\n<\/code><\/pre>\n\n<p>Both sets of examples are identical, modulo whitespace.  What is your reasoning for considering them to be two distinct pseudo-operators?<\/p>\n","community_owned_date":null},{"owner":{"account_id":9417,"reputation":96497,"user_id":17389,"user_type":"registered","accept_rate":38,"profile_image":"https:\/\/www.gravatar.com\/avatar\/cd06d1314817ce946ab796af8750b56a?s=256&d=identicon&r=PG","display_name":"ysth","link":"https:\/\/stackoverflow.com\/users\/17389\/ysth"},"is_accepted":false,"score":1,"last_activity_date":1284384978,"last_edit_date":null,"creation_date":1284384978,"answer_id":3700909,"question_id":3700069,"content_license":"CC BY-SA 2.5","body_markdown":"Pretty ugly, but if $ref is a complicated expression that you don&#39;t want to use in repeated exists tests:\r\n\r\n    if ( exists ${ ${ ${ $ref || {} }{A} || {} }{B} || {} }{key} ) {\r\n","body":"<p>Pretty ugly, but if $ref is a complicated expression that you don't want to use in repeated exists tests:<\/p>\n\n<pre><code>if ( exists ${ ${ ${ $ref || {} }{A} || {} }{B} || {} }{key} ) {\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":208980,"reputation":8156,"user_id":459780,"user_type":"registered","accept_rate":84,"profile_image":"https:\/\/www.gravatar.com\/avatar\/55b2cca3b7a11df3a961d57a68705503?s=256&d=identicon&r=PG","display_name":"Daniel Standage","link":"https:\/\/stackoverflow.com\/users\/459780\/daniel-standage"},"is_accepted":false,"score":1,"last_activity_date":1452960535,"last_edit_date":1452960535.0,"creation_date":1285623192,"answer_id":3808072,"question_id":2527170,"content_license":"CC BY-SA 3.0","body_markdown":"This seems to be a pretty comprehensive response. Perhaps one thing missing, however, is that most biologists (until recently, perhaps) don&#39;t have much programming experience at all. The learning curve for Perl is *much* lower than for compiled languages (like C or Java), and yet Perl still provides a ton of features when it comes to text processing. So what if it takes longer to run? Biologists can *definitely* handle that. Lab experiments routinely take one hour or more finish, so waiting a few extra minutes for that data processing to finish isn&#39;t going to kill them!\r\n\r\nJust note that I am talking here about biologists that program out of necessity. I understand that there are some very skilled programmers and computer scientists out there that use Perl as well, and these comments may not apply to them.\r\n","body":"<p>This seems to be a pretty comprehensive response. Perhaps one thing missing, however, is that most biologists (until recently, perhaps) don't have much programming experience at all. The learning curve for Perl is <em>much<\/em> lower than for compiled languages (like C or Java), and yet Perl still provides a ton of features when it comes to text processing. So what if it takes longer to run? Biologists can <em>definitely<\/em> handle that. Lab experiments routinely take one hour or more finish, so waiting a few extra minutes for that data processing to finish isn't going to kill them!<\/p>\n\n<p>Just note that I am talking here about biologists that program out of necessity. I understand that there are some very skilled programmers and computer scientists out there that use Perl as well, and these comments may not apply to them.<\/p>\n","community_owned_date":null},{"owner":{"account_id":75086,"reputation":11278,"user_id":215487,"user_type":"registered","accept_rate":87,"profile_image":"https:\/\/www.gravatar.com\/avatar\/e3e947cd5a0515d1eece902a29891750?s=256&d=identicon&r=PG","display_name":"Christopher Bottoms","link":"https:\/\/stackoverflow.com\/users\/215487\/christopher-bottoms"},"is_accepted":false,"score":1,"last_activity_date":1288287141,"last_edit_date":null,"creation_date":1288287141,"answer_id":4045568,"question_id":2897853,"content_license":"CC BY-SA 2.5","body_markdown":"How about the &quot;Boolean one-or-zero&quot; operator: `1&amp;!!` \r\n\r\nFor example:\r\n\r\n    my %result_of = (\r\n        &quot; 1&amp;!! &#39;0 but true&#39; &quot; =&gt; 1&amp;!! &#39;0 but true&#39;,\r\n        &quot; 1&amp;!! &#39;0&#39;          &quot; =&gt; 1&amp;!! &#39;0&#39;,\r\n        &quot; 1&amp;!! &#39;text&#39;       &quot; =&gt; 1&amp;!! &#39;text&#39;,\r\n        &quot; 1&amp;!! 0            &quot; =&gt; 1&amp;!! 0,\r\n        &quot; 1&amp;!! 1            &quot; =&gt; 1&amp;!! 1,\r\n        &quot; 1&amp;!! undef        &quot; =&gt; 1&amp;!! undef,\r\n    );\r\n    \r\n    for my $expression ( sort keys %result_of){\r\n        print &quot;$expression = &quot; . $result_of{$expression} . &quot;\\n&quot;;\r\n    }\r\n\r\ngives the following output:\r\n\r\n     1&amp;!! &#39;0 but true&#39;  = 1\r\n     1&amp;!! &#39;0&#39;           = 0\r\n     1&amp;!! &#39;text&#39;        = 1\r\n     1&amp;!! 0             = 0\r\n     1&amp;!! 1             = 1\r\n     1&amp;!! undef         = 0","body":"<p>How about the \"Boolean one-or-zero\" operator: <code>1&amp;!!<\/code> <\/p>\n\n<p>For example:<\/p>\n\n<pre><code>my %result_of = (\n    \" 1&amp;!! '0 but true' \" =&gt; 1&amp;!! '0 but true',\n    \" 1&amp;!! '0'          \" =&gt; 1&amp;!! '0',\n    \" 1&amp;!! 'text'       \" =&gt; 1&amp;!! 'text',\n    \" 1&amp;!! 0            \" =&gt; 1&amp;!! 0,\n    \" 1&amp;!! 1            \" =&gt; 1&amp;!! 1,\n    \" 1&amp;!! undef        \" =&gt; 1&amp;!! undef,\n);\n\nfor my $expression ( sort keys %result_of){\n    print \"$expression = \" . $result_of{$expression} . \"\\n\";\n}\n<\/code><\/pre>\n\n<p>gives the following output:<\/p>\n\n<pre><code> 1&amp;!! '0 but true'  = 1\n 1&amp;!! '0'           = 0\n 1&amp;!! 'text'        = 1\n 1&amp;!! 0             = 0\n 1&amp;!! 1             = 1\n 1&amp;!! undef         = 0\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":41067,"reputation":127534,"user_id":119280,"user_type":"registered","accept_rate":73,"profile_image":"https:\/\/www.gravatar.com\/avatar\/47b88555c03aad35b076726767fcfa35?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"DVK","link":"https:\/\/stackoverflow.com\/users\/119280\/dvk"},"is_accepted":false,"score":1,"last_activity_date":1288826705,"last_edit_date":null,"creation_date":1288826705,"answer_id":4092569,"question_id":4092348,"content_license":"CC BY-SA 2.5","body_markdown":"As per requests from the listeners, a non-pure-**regex** solution:\r\n\r\n    $s=&quot;D&quot; x 100; \r\n    $s=~s\/D\/rand().&quot; &quot;\/ge; \r\n    @s=split(\/ \/,$s);\r\n\r\n","body":"<p>As per requests from the listeners, a non-pure-<strong>regex<\/strong> solution:<\/p>\n\n<pre><code>$s=\"D\" x 100; \n$s=~s\/D\/rand().\" \"\/ge; \n@s=split(\/ \/,$s);\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":113371,"reputation":100018,"user_id":298607,"user_type":"registered","accept_rate":88,"profile_image":"https:\/\/i.stack.imgur.com\/DVW9g.jpg?s=256&g=1","display_name":"dawg","link":"https:\/\/stackoverflow.com\/users\/298607\/dawg"},"is_accepted":false,"score":1,"last_activity_date":1288881170,"last_edit_date":null,"creation_date":1288881170,"answer_id":4097695,"question_id":4092348,"content_license":"CC BY-SA 2.5","body_markdown":"Recursion:\r\n\r\n    #!\/usr\/bin\/perl\r\n    use warnings; use strict;\r\n    \r\n    my @rands;\r\n    my $i=1;\r\n    \r\n    sub push_rand {\r\n    \treturn if $#rands&gt;=99;\r\n    \tpush @rands, rand;\r\n    \tpush_rand();\r\n    }\r\n    \r\n    push_rand();\r\n    \r\n    for (@rands) { print &quot;$i: $_\\n&quot;; $i++; }","body":"<p>Recursion:<\/p>\n\n<pre><code>#!\/usr\/bin\/perl\nuse warnings; use strict;\n\nmy @rands;\nmy $i=1;\n\nsub push_rand {\n    return if $#rands&gt;=99;\n    push @rands, rand;\n    push_rand();\n}\n\npush_rand();\n\nfor (@rands) { print \"$i: $_\\n\"; $i++; }\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":56876,"reputation":44058,"user_id":170352,"user_type":"registered","accept_rate":94,"profile_image":"https:\/\/i.stack.imgur.com\/TFkh5.jpg?s=256&g=1","display_name":"Brandon Bertelsen","link":"https:\/\/stackoverflow.com\/users\/170352\/brandon-bertelsen"},"is_accepted":false,"score":1,"last_activity_date":1290143352,"last_edit_date":null,"creation_date":1290143352,"answer_id":4222267,"question_id":4155840,"content_license":"CC BY-SA 2.5","body_markdown":"Although you specified perl, there is a useful algorithm built into R that implements Levenshtein edit distances. \r\n\r\n    agrep()\r\n\r\nThis command also allows the use of any regular expression or pattern to match. I would recommend you look at it. http:\/\/stat.ethz.ch\/R-manual\/R-devel\/library\/base\/html\/agrep.html","body":"<p>Although you specified perl, there is a useful algorithm built into R that implements Levenshtein edit distances. <\/p>\n\n<pre><code>agrep()\n<\/code><\/pre>\n\n<p>This command also allows the use of any regular expression or pattern to match. I would recommend you look at it. <a href=\"http:\/\/stat.ethz.ch\/R-manual\/R-devel\/library\/base\/html\/agrep.html\" rel=\"nofollow\">http:\/\/stat.ethz.ch\/R-manual\/R-devel\/library\/base\/html\/agrep.html<\/a><\/p>\n","community_owned_date":null},{"owner":{"account_id":172270,"reputation":103,"user_id":400185,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/514963a1da1836826d2a4d06242942b8?s=256&d=identicon&r=PG","display_name":"angel_007","link":"https:\/\/stackoverflow.com\/users\/400185\/angel-007"},"is_accepted":false,"score":1,"last_activity_date":1299508946,"last_edit_date":null,"creation_date":1299508946,"answer_id":5221016,"question_id":5214543,"content_license":"CC BY-SA 2.5","body_markdown":"Just adding to the above answer, to draw an analogy with java ... \r\n\r\nMuch similar to Object.toString() in Java. Omni-present by default but could be over-ridden when required.","body":"<p>Just adding to the above answer, to draw an analogy with java ... <\/p>\n\n<p>Much similar to Object.toString() in Java. Omni-present by default but could be over-ridden when required.<\/p>\n","community_owned_date":null},{"owner":{"account_id":216196,"reputation":79164,"user_id":471272,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/i.stack.imgur.com\/jSlyx.gif?s=256&g=1","display_name":"tchrist","link":"https:\/\/stackoverflow.com\/users\/471272\/tchrist"},"is_accepted":false,"score":1,"last_activity_date":1306781641,"last_edit_date":1306781641.0,"creation_date":1306778887,"answer_id":6179461,"question_id":6172957,"content_license":"CC BY-SA 3.0","body_markdown":"&gt; `if (-f &lt;filename&gt; ) { ... }`\r\n\r\nIt seems that either I have misunderstood the question, or else everybody else has.\r\n\r\nFirst, let\u2019s make some assumptions.\r\n\r\n1. Let\u2019s assume that you haven\u2019t overloaded all the `-X` prefix unary operators (it\u2019s either all of them or none of them),\r\n\r\n2. Let\u2019s also assume that you haven\u2019t overloaded the `&lt;&gt;` circumfix iteration operator.\r\n\r\nAssuming that both of those two givens given above shoul hold, then the notation `&lt;filename&gt;` will do a `scalar readline(*filename)` \u2014 which depends on the value of `$\/` \u2014 and then pass that result back to the filetest operator for subsequent evaluation, usually but not necessarily by way of *stat*(2).  That means that you had best have a filehandle open by the name of `filename` for this to work, unless truly deep wizardry is involved.\r\n\r\nIf will also do this for `&lt;$filename&gt;`, except now `$filename` is an indirect handle instead of a direct one like `filename`.   Again, `$\/` is respected.  Using a filename proper for the filehandle associated with it is actually something I do all the term.  For example:\r\n\r\n    our $fn = &quot;\/etc\/termcap&quot;;\r\n    open($fn, &quot;&lt;&quot;, $fn) || die &quot;can&#39;t open $fn: $!&quot;;\r\n\r\nThat way the `warn` and `die` messages actually tell me the name of the file.  For example:\r\n\r\n    while (&lt;$fh&gt;) {\r\n         warn &quot;oops&quot; if whatever;\r\n    }\r\n\r\nwill tell me the line number and the name of the file at which I oopsted.\r\n\r\nNow, if the operand of the `&lt;\u22ef&gt;` deviates from the rules for allowed unbraced dative objects, that is, a bareword prefixed by zero or more dollar signs, then it is not the iteration operator but the wildcard burster.  This is true even without wildcards. It just has to violate Perl\u2019s famous **Rule of Datives**, and that then triggers the alternate \r\n\r\nThis means that *if and only if*  `filename` isn\u2019t a legal bareword with zero or more leading dollar signs \u2014 such as for example `\/etc\/termcap`, `\/tmp`, `*.[Cchy]`, `{,\/usr}\/bin\/c?`, or `~\/Documents` \u2014 then that familiar old conglobulation operator in the guide of the `File::Glob::bsd_glob` function is called instead, with exactly the sort of result you would expect of such a useful and commonly used function when supplied with the appropriate argument.\r\n\r\nHere are many examples that show answers to the sort of question the quoted portion above is actually asking:\r\n\r\n    use v5.10;  # for the say feature, but not needed for conglobulation\r\n    \r\n    if (-d &lt;~joebob&gt;                 ) { say &quot;joebob has a home&quot;                 }\r\n    if (-d &lt;~joebob\/.opera&gt;          ) { say &quot;joebob has an opera directory&quot;     }\r\n    if (-d &lt;~joebob\/.ssh&gt;            ) { say &quot;joebob has an ssh directory&quot;       }\r\n    \r\n    if ($n = grep {-e} &lt;~joebob\/.*rc&gt;) { say &quot;joebob has $n RC files&quot;            }\r\n    \r\n    if (-f &lt;~joebob\/.exrc&gt;           ) { say &quot;joebob has a vi config file&quot;       }\r\n    if (-f &lt;~joebob\/.profile&gt;        ) { say &quot;joebob has a sh profile&quot;           }\r\n    if (-f &lt;~joebob\/.bashrc&gt;         ) { say &quot;joebob has a bash config script&quot;   }\r\n    if (-f &lt;~joebob\/.cshrc&gt;          ) { say &quot;joebob has a csh config script&quot;    }\r\n    if (-f &lt;~joebob\/.log{in,out}*&gt;   ) { say &quot;joebob has csh login\/out scripts&quot;  }\r\n    \r\n    if (-S &lt;\/tmp\/.X*\/X*&gt;             ) { say &quot;I smell an X11 socket&quot;             }\r\n\r\n    if (-t STDIN &amp;&amp; -t STDOUT        ) { say &quot;smells pretty tty to me&quot;           } \r\n \r\n","body":"<blockquote>\n  <p><code>if (-f &lt;filename&gt; ) { ... }<\/code><\/p>\n<\/blockquote>\n\n<p>It seems that either I have misunderstood the question, or else everybody else has.<\/p>\n\n<p>First, let\u2019s make some assumptions.<\/p>\n\n<ol>\n<li><p>Let\u2019s assume that you haven\u2019t overloaded all the <code>-X<\/code> prefix unary operators (it\u2019s either all of them or none of them),<\/p><\/li>\n<li><p>Let\u2019s also assume that you haven\u2019t overloaded the <code>&lt;&gt;<\/code> circumfix iteration operator.<\/p><\/li>\n<\/ol>\n\n<p>Assuming that both of those two givens given above shoul hold, then the notation <code>&lt;filename&gt;<\/code> will do a <code>scalar readline(*filename)<\/code> \u2014 which depends on the value of <code>$\/<\/code> \u2014 and then pass that result back to the filetest operator for subsequent evaluation, usually but not necessarily by way of <em>stat<\/em>(2).  That means that you had best have a filehandle open by the name of <code>filename<\/code> for this to work, unless truly deep wizardry is involved.<\/p>\n\n<p>If will also do this for <code>&lt;$filename&gt;<\/code>, except now <code>$filename<\/code> is an indirect handle instead of a direct one like <code>filename<\/code>.   Again, <code>$\/<\/code> is respected.  Using a filename proper for the filehandle associated with it is actually something I do all the term.  For example:<\/p>\n\n<pre><code>our $fn = \"\/etc\/termcap\";\nopen($fn, \"&lt;\", $fn) || die \"can't open $fn: $!\";\n<\/code><\/pre>\n\n<p>That way the <code>warn<\/code> and <code>die<\/code> messages actually tell me the name of the file.  For example:<\/p>\n\n<pre><code>while (&lt;$fh&gt;) {\n     warn \"oops\" if whatever;\n}\n<\/code><\/pre>\n\n<p>will tell me the line number and the name of the file at which I oopsted.<\/p>\n\n<p>Now, if the operand of the <code>&lt;\u22ef&gt;<\/code> deviates from the rules for allowed unbraced dative objects, that is, a bareword prefixed by zero or more dollar signs, then it is not the iteration operator but the wildcard burster.  This is true even without wildcards. It just has to violate Perl\u2019s famous <strong>Rule of Datives<\/strong>, and that then triggers the alternate <\/p>\n\n<p>This means that <em>if and only if<\/em>  <code>filename<\/code> isn\u2019t a legal bareword with zero or more leading dollar signs \u2014 such as for example <code>\/etc\/termcap<\/code>, <code>\/tmp<\/code>, <code>*.[Cchy]<\/code>, <code>{,\/usr}\/bin\/c?<\/code>, or <code>~\/Documents<\/code> \u2014 then that familiar old conglobulation operator in the guide of the <code>File::Glob::bsd_glob<\/code> function is called instead, with exactly the sort of result you would expect of such a useful and commonly used function when supplied with the appropriate argument.<\/p>\n\n<p>Here are many examples that show answers to the sort of question the quoted portion above is actually asking:<\/p>\n\n<pre><code>use v5.10;  # for the say feature, but not needed for conglobulation\n\nif (-d &lt;~joebob&gt;                 ) { say \"joebob has a home\"                 }\nif (-d &lt;~joebob\/.opera&gt;          ) { say \"joebob has an opera directory\"     }\nif (-d &lt;~joebob\/.ssh&gt;            ) { say \"joebob has an ssh directory\"       }\n\nif ($n = grep {-e} &lt;~joebob\/.*rc&gt;) { say \"joebob has $n RC files\"            }\n\nif (-f &lt;~joebob\/.exrc&gt;           ) { say \"joebob has a vi config file\"       }\nif (-f &lt;~joebob\/.profile&gt;        ) { say \"joebob has a sh profile\"           }\nif (-f &lt;~joebob\/.bashrc&gt;         ) { say \"joebob has a bash config script\"   }\nif (-f &lt;~joebob\/.cshrc&gt;          ) { say \"joebob has a csh config script\"    }\nif (-f &lt;~joebob\/.log{in,out}*&gt;   ) { say \"joebob has csh login\/out scripts\"  }\n\nif (-S &lt;\/tmp\/.X*\/X*&gt;             ) { say \"I smell an X11 socket\"             }\n\nif (-t STDIN &amp;&amp; -t STDOUT        ) { say \"smells pretty tty to me\"           } \n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":50218,"reputation":4830,"user_id":149741,"user_type":"registered","accept_rate":65,"profile_image":"https:\/\/www.gravatar.com\/avatar\/aac13cee52b99246904c16288209b2a8?s=256&d=identicon&r=PG","display_name":"Terrence Brannon","link":"https:\/\/stackoverflow.com\/users\/149741\/terrence-brannon"},"is_accepted":false,"score":1,"last_activity_date":1396731313,"last_edit_date":1396731313.0,"creation_date":1308849853,"answer_id":6458114,"question_id":1917261,"content_license":"CC BY-SA 3.0","body_markdown":"Class::MOP on CPAN has a load_class method for this:\r\nhttp:\/\/metacpan.org\/pod\/Class::MOP","body":"<p>Class::MOP on CPAN has a load_class method for this:\n<a href=\"http:\/\/metacpan.org\/pod\/Class::MOP\" rel=\"nofollow\">http:\/\/metacpan.org\/pod\/Class::MOP<\/a><\/p>\n","community_owned_date":null},{"owner":{"user_type":"does_not_exist","display_name":"user554546"},"is_accepted":false,"score":1,"last_activity_date":1316563383,"last_edit_date":null,"creation_date":1316563383,"answer_id":7493199,"question_id":1703046,"content_license":"CC BY-SA 3.0","body_markdown":"Yes, I know that I&#39;m being a bit of a necromancer here, but...\r\n\r\nWhile all of these answers are excellent, I thought I&#39;d mention [Moose][1].  Moose makes constructors easy (`package Foo;use Moose;` automatically provides a constructor called `new` (although the name &quot;new&quot; can be overridden if you&#39;d like)) but [doesn&#39;t take away any configurability][2] if you need it.\r\n\r\nOnce I looked through the documentation for Moose (which is pretty good overall, and there are a lot more tutorial snippets around if you google appropriately), I never looked back.\r\n\r\n\r\n  [1]: http:\/\/search.cpan.org\/~doy\/Moose-2.0205\/lib\/Moose.pm\r\n  [2]: http:\/\/search.cpan.org\/dist\/Moose\/lib\/Moose\/Manual\/Construction.pod","body":"<p>Yes, I know that I'm being a bit of a necromancer here, but...<\/p>\n\n<p>While all of these answers are excellent, I thought I'd mention <a href=\"http:\/\/search.cpan.org\/~doy\/Moose-2.0205\/lib\/Moose.pm\" rel=\"nofollow\">Moose<\/a>.  Moose makes constructors easy (<code>package Foo;use Moose;<\/code> automatically provides a constructor called <code>new<\/code> (although the name \"new\" can be overridden if you'd like)) but <a href=\"http:\/\/search.cpan.org\/dist\/Moose\/lib\/Moose\/Manual\/Construction.pod\" rel=\"nofollow\">doesn't take away any configurability<\/a> if you need it.<\/p>\n\n<p>Once I looked through the documentation for Moose (which is pretty good overall, and there are a lot more tutorial snippets around if you google appropriately), I never looked back.<\/p>\n","community_owned_date":null},{"owner":{"account_id":120850,"reputation":5170,"user_id":313522,"user_type":"registered","accept_rate":56,"profile_image":"https:\/\/www.gravatar.com\/avatar\/e6dd88ec54643689069f97f0d52398ca?s=256&d=identicon&r=PG","display_name":"gorn","link":"https:\/\/stackoverflow.com\/users\/313522\/gorn"},"is_accepted":false,"score":1,"last_activity_date":1328212851,"last_edit_date":1328212851.0,"creation_date":1328210224,"answer_id":9118503,"question_id":9114402,"content_license":"CC BY-SA 3.0","body_markdown":"Inspired by ruakh&#39;s answer, here is the O(n) regexp solution:\r\n\r\n\r\n    &quot;$first \\0$second&quot; =~ m\/^(.*?)(.).*\\0\\1(?!\\2)\/s;\r\n\r\n*Notes:\r\n 1. neither string contains \\0\r\n 2. longest common prefix would be saved as $1\r\n 3. the space is important!*\r\n\r\n**Edit:** well it is not correct as rukach metions, but the idea is correct, but we should push regexp machine not to check the beginning letters repeatedly. The basic idea can be also rewritten in this perl oneliner.\r\n\r\n    perl -e &#39; $_=&quot;$first\\0$second\\n&quot;; while(s\/^(.)(.*?)\\0\\1\/\\2\\0\/gs) {print $1;}; &#39;\r\n\r\nI wonder if it can be incorporated back into regexp solution.","body":"<p>Inspired by ruakh's answer, here is the O(n) regexp solution:<\/p>\n\n<pre><code>\"$first \\0$second\" =~ m\/^(.*?)(.).*\\0\\1(?!\\2)\/s;\n<\/code><\/pre>\n\n<p><em>Notes:\n 1. neither string contains \\0\n 2. longest common prefix would be saved as $1\n 3. the space is important!<\/em><\/p>\n\n<p><strong>Edit:<\/strong> well it is not correct as rukach metions, but the idea is correct, but we should push regexp machine not to check the beginning letters repeatedly. The basic idea can be also rewritten in this perl oneliner.<\/p>\n\n<pre><code>perl -e ' $_=\"$first\\0$second\\n\"; while(s\/^(.)(.*?)\\0\\1\/\\2\\0\/gs) {print $1;}; '\n<\/code><\/pre>\n\n<p>I wonder if it can be incorporated back into regexp solution.<\/p>\n","community_owned_date":1328212851.0},{"owner":{"account_id":56304,"reputation":117607,"user_id":168657,"user_type":"registered","accept_rate":92,"profile_image":"https:\/\/www.gravatar.com\/avatar\/f14e7610fca39322ebbf23530def15f8?s=256&d=identicon&r=PG","display_name":"mob","link":"https:\/\/stackoverflow.com\/users\/168657\/mob"},"is_accepted":false,"score":1,"last_activity_date":1346106459,"last_edit_date":1495541453.0,"creation_date":1333644426,"answer_id":10032656,"question_id":2897853,"content_license":"CC BY-SA 3.0","body_markdown":"The `&lt;&lt; &gt;&gt;` operator, for [multi-line comments][1]:\r\n\r\n    &lt;&lt;q==q&gt;&gt;;\r\n        This is a\r\n        multiline\r\n        comment\r\n    q\r\n\r\n\r\n\r\n  [1]: https:\/\/stackoverflow.com\/questions\/5443121\/understanding-strange-perl-multiline-comment-mechanism","body":"<p>The <code>&lt;&lt; &gt;&gt;<\/code> operator, for <a href=\"https:\/\/stackoverflow.com\/questions\/5443121\/understanding-strange-perl-multiline-comment-mechanism\">multi-line comments<\/a>:<\/p>\n\n<pre><code>&lt;&lt;q==q&gt;&gt;;\n    This is a\n    multiline\n    comment\nq\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":1653998,"reputation":11,"user_id":1523990,"user_type":"unregistered","profile_image":"https:\/\/www.gravatar.com\/avatar\/daeaafb58826242f8de0d366463f3295?s=256&d=identicon&r=PG","display_name":"sean ur","link":"https:\/\/stackoverflow.com\/users\/1523990\/sean-ur"},"is_accepted":false,"score":1,"last_activity_date":1398620437,"last_edit_date":1398620437.0,"creation_date":1342193962,"answer_id":11473761,"question_id":34920,"content_license":"CC BY-SA 3.0","body_markdown":"Developed off of http:\/\/metacpan.org\/pod\/File::FcntlLock\r\n    \r\n    use Fcntl qw(:DEFAULT :flock :seek :Fcompat);\r\n    use File::FcntlLock;\r\n    sub acquire_lock {\r\n      my $fn = shift;\r\n      my $justPrint = shift || 0;\r\n      confess &quot;Too many args&quot; if defined shift;\r\n      confess &quot;Not enough args&quot; if !defined $justPrint;\r\n\r\n      my $rv = TRUE;\r\n      my $fh;\r\n      sysopen($fh, $fn, O_RDWR | O_CREAT) or LOGDIE &quot;failed to open: $fn: $!&quot;;\r\n      $fh-&gt;autoflush(1);\r\n      ALWAYS &quot;acquiring lock: $fn&quot;;\r\n      my $fs = new File::FcntlLock;\r\n      $fs-&gt;l_type( F_WRLCK );\r\n      $fs-&gt;l_whence( SEEK_SET );\r\n      $fs-&gt;l_start( 0 );\r\n      $fs-&gt;lock( $fh, F_SETLKW ) or LOGDIE  &quot;failed to get write lock: $fn:&quot; . $fs-&gt;error;\r\n      my $num = &lt;$fh&gt; || 0;\r\n      return ($fh, $num);\r\n    }\r\n\r\n    sub release_lock {\r\n      my $fn = shift;\r\n      my $fh = shift;\r\n      my $num = shift;\r\n      my $justPrint = shift || 0;\r\n\r\n      seek($fh, 0, SEEK_SET) or LOGDIE &quot;seek failed: $fn: $!&quot;;\r\n      print $fh &quot;$num\\n&quot; or LOGDIE &quot;write failed: $fn: $!&quot;;\r\n      truncate($fh, tell($fh)) or LOGDIE &quot;truncate failed: $fn: $!&quot;;\r\n      my $fs = new File::FcntlLock;\r\n      $fs-&gt;l_type(F_UNLCK);\r\n      ALWAYS &quot;releasing lock: $fn&quot;;\r\n      $fs-&gt;lock( $fh, F_SETLK ) or LOGDIE &quot;unlock failed: $fn: &quot; . $fs-&gt;error;\r\n      close($fh) or LOGDIE &quot;close failed: $fn: $!&quot;;\r\n    }\r\n","body":"<p>Developed off of <a href=\"http:\/\/metacpan.org\/pod\/File%3a%3aFcntlLock\" rel=\"nofollow\">http:\/\/metacpan.org\/pod\/File::FcntlLock<\/a><\/p>\n\n<pre><code>use Fcntl qw(:DEFAULT :flock :seek :Fcompat);\nuse File::FcntlLock;\nsub acquire_lock {\n  my $fn = shift;\n  my $justPrint = shift || 0;\n  confess \"Too many args\" if defined shift;\n  confess \"Not enough args\" if !defined $justPrint;\n\n  my $rv = TRUE;\n  my $fh;\n  sysopen($fh, $fn, O_RDWR | O_CREAT) or LOGDIE \"failed to open: $fn: $!\";\n  $fh-&gt;autoflush(1);\n  ALWAYS \"acquiring lock: $fn\";\n  my $fs = new File::FcntlLock;\n  $fs-&gt;l_type( F_WRLCK );\n  $fs-&gt;l_whence( SEEK_SET );\n  $fs-&gt;l_start( 0 );\n  $fs-&gt;lock( $fh, F_SETLKW ) or LOGDIE  \"failed to get write lock: $fn:\" . $fs-&gt;error;\n  my $num = &lt;$fh&gt; || 0;\n  return ($fh, $num);\n}\n\nsub release_lock {\n  my $fn = shift;\n  my $fh = shift;\n  my $num = shift;\n  my $justPrint = shift || 0;\n\n  seek($fh, 0, SEEK_SET) or LOGDIE \"seek failed: $fn: $!\";\n  print $fh \"$num\\n\" or LOGDIE \"write failed: $fn: $!\";\n  truncate($fh, tell($fh)) or LOGDIE \"truncate failed: $fn: $!\";\n  my $fs = new File::FcntlLock;\n  $fs-&gt;l_type(F_UNLCK);\n  ALWAYS \"releasing lock: $fn\";\n  $fs-&gt;lock( $fh, F_SETLK ) or LOGDIE \"unlock failed: $fn: \" . $fs-&gt;error;\n  close($fh) or LOGDIE \"close failed: $fn: $!\";\n}\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":8423,"reputation":736751,"user_id":15168,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/i.stack.imgur.com\/WtEI9.png?s=256&g=1","display_name":"Jonathan Leffler","link":"https:\/\/stackoverflow.com\/users\/15168\/jonathan-leffler"},"is_accepted":false,"score":1,"last_activity_date":1344383358,"last_edit_date":null,"creation_date":1344383358,"answer_id":11855725,"question_id":11855652,"content_license":"CC BY-SA 3.0","body_markdown":"Very curious.  Using Perl 5.12.1 on RHEL 5, the output is indeed as shown:\r\n\r\n    $ perl -e &#39;$_ = &quot;a&quot;; s\/a*\/e\/g; print &quot;$_\\n&quot;;&#39;\r\n    ee\r\n    $\r\n\r\nThe best guess (reason) I can come up with is that the `a*` first matches the `a`, yielding the first `e`, and then matches the empty string after the `a`, for the second `e`.  Let&#39;s try some variants:\r\n\r\n    $ perl -e &#39;$_ = &quot;a&quot;; s\/^a*\/e\/g; print &quot;$_\\n&quot;;&#39;\r\n    e\r\n    $ perl -e &#39;$_ = &quot;a&quot;; s\/a*$\/e\/g; print &quot;$_\\n&quot;;&#39;\r\n    ee\r\n    $ perl -e &#39;$_ = &quot;a&quot;; s\/a+\/e\/g; print &quot;$_\\n&quot;;&#39; \r\n    e\r\n    $\r\n\r\nThe first and third of these variations produce the answers I&#39;d expect.  The second does puzzle me, still.\r\n\r\n    $ perl -e &#39;$_ = &quot;a\\n&quot;; s\/a*\/e\/g; print &quot;$_\\n&quot;;&#39;\r\n    ee\r\n    e\r\n    $\r\n\r\nHmmm...","body":"<p>Very curious.  Using Perl 5.12.1 on RHEL 5, the output is indeed as shown:<\/p>\n\n<pre><code>$ perl -e '$_ = \"a\"; s\/a*\/e\/g; print \"$_\\n\";'\nee\n$\n<\/code><\/pre>\n\n<p>The best guess (reason) I can come up with is that the <code>a*<\/code> first matches the <code>a<\/code>, yielding the first <code>e<\/code>, and then matches the empty string after the <code>a<\/code>, for the second <code>e<\/code>.  Let's try some variants:<\/p>\n\n<pre><code>$ perl -e '$_ = \"a\"; s\/^a*\/e\/g; print \"$_\\n\";'\ne\n$ perl -e '$_ = \"a\"; s\/a*$\/e\/g; print \"$_\\n\";'\nee\n$ perl -e '$_ = \"a\"; s\/a+\/e\/g; print \"$_\\n\";' \ne\n$\n<\/code><\/pre>\n\n<p>The first and third of these variations produce the answers I'd expect.  The second does puzzle me, still.<\/p>\n\n<pre><code>$ perl -e '$_ = \"a\\n\"; s\/a*\/e\/g; print \"$_\\n\";'\nee\ne\n$\n<\/code><\/pre>\n\n<p>Hmmm...<\/p>\n","community_owned_date":null},{"owner":{"account_id":2286596,"reputation":11,"user_id":2010432,"user_type":"unregistered","profile_image":"https:\/\/www.gravatar.com\/avatar\/4c11386378a442612ab14ee7e93ce3c7?s=256&d=identicon&r=PG","display_name":"Matt","link":"https:\/\/stackoverflow.com\/users\/2010432\/matt"},"is_accepted":false,"score":1,"last_activity_date":1452960912,"last_edit_date":1452960912.0,"creation_date":1359106415,"answer_id":14518957,"question_id":2527170,"content_license":"CC BY-SA 3.0","body_markdown":"People missed out [DBI][1], the Perl abstract database interface that makes it really easy to work with bioinformatic databases.\r\n\r\nThere is also the [one-liner][2] angle. You can write something to reformat data in a single line in Perl and just use the `-pe` flag to embed that at the command line. Many people using [AWK][3] and [sed][4] moved to Perl. Even in full programs, file I\/O is incredibly easy and quick to write, and text transformation is expressive at a high level compared to any engineering language around. People who use Java or even Python for one-off text transformation are just too lazy to learn another language. Java especially has a high dependence on the [JVM][5] implementation and its I\/O performance.\r\n\r\nAt least you know how fast or slow Perl will be everywhere, slightly slower than C I\/O. Don&#39;t learn [grep][6], [cut][7], [sed][4], or [AWK][3]; just learn Perl as your command line tool, even if you don&#39;t produce large programs with it. Regarding CGI, Perl has plenty of better web frameworks such as [Catalyst][8] and [Mojolicious][9], but the mindshare definitely came from CGI and bioinformatics being one of the earliest heavy users of the Internet.\r\n\r\n  [1]: https:\/\/en.wikipedia.org\/wiki\/Perl_DBI\r\n  [2]: https:\/\/en.wikipedia.org\/wiki\/One-liner_program\r\n  [3]: http:\/\/en.wikipedia.org\/wiki\/AWK\r\n  [4]: http:\/\/en.wikipedia.org\/wiki\/Sed\r\n  [5]: http:\/\/en.wikipedia.org\/wiki\/Java_virtual_machine\r\n  [6]: http:\/\/en.wikipedia.org\/wiki\/Grep\r\n  [7]: https:\/\/en.wikipedia.org\/wiki\/Cut_%28Unix%29\r\n  [8]: https:\/\/en.wikipedia.org\/wiki\/Catalyst_%28software%29\r\n  [9]: https:\/\/en.wikipedia.org\/wiki\/Mojolicious\r\n","body":"<p>People missed out <a href=\"https:\/\/en.wikipedia.org\/wiki\/Perl_DBI\" rel=\"nofollow\">DBI<\/a>, the Perl abstract database interface that makes it really easy to work with bioinformatic databases.<\/p>\n\n<p>There is also the <a href=\"https:\/\/en.wikipedia.org\/wiki\/One-liner_program\" rel=\"nofollow\">one-liner<\/a> angle. You can write something to reformat data in a single line in Perl and just use the <code>-pe<\/code> flag to embed that at the command line. Many people using <a href=\"http:\/\/en.wikipedia.org\/wiki\/AWK\" rel=\"nofollow\">AWK<\/a> and <a href=\"http:\/\/en.wikipedia.org\/wiki\/Sed\" rel=\"nofollow\">sed<\/a> moved to Perl. Even in full programs, file I\/O is incredibly easy and quick to write, and text transformation is expressive at a high level compared to any engineering language around. People who use Java or even Python for one-off text transformation are just too lazy to learn another language. Java especially has a high dependence on the <a href=\"http:\/\/en.wikipedia.org\/wiki\/Java_virtual_machine\" rel=\"nofollow\">JVM<\/a> implementation and its I\/O performance.<\/p>\n\n<p>At least you know how fast or slow Perl will be everywhere, slightly slower than C I\/O. Don't learn <a href=\"http:\/\/en.wikipedia.org\/wiki\/Grep\" rel=\"nofollow\">grep<\/a>, <a href=\"https:\/\/en.wikipedia.org\/wiki\/Cut_%28Unix%29\" rel=\"nofollow\">cut<\/a>, <a href=\"http:\/\/en.wikipedia.org\/wiki\/Sed\" rel=\"nofollow\">sed<\/a>, or <a href=\"http:\/\/en.wikipedia.org\/wiki\/AWK\" rel=\"nofollow\">AWK<\/a>; just learn Perl as your command line tool, even if you don't produce large programs with it. Regarding CGI, Perl has plenty of better web frameworks such as <a href=\"https:\/\/en.wikipedia.org\/wiki\/Catalyst_%28software%29\" rel=\"nofollow\">Catalyst<\/a> and <a href=\"https:\/\/en.wikipedia.org\/wiki\/Mojolicious\" rel=\"nofollow\">Mojolicious<\/a>, but the mindshare definitely came from CGI and bioinformatics being one of the earliest heavy users of the Internet.<\/p>\n","community_owned_date":null},{"owner":{"account_id":378919,"reputation":10049,"user_id":731947,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/i.stack.imgur.com\/If34k.png?s=256&g=1","display_name":"CS\u1d60","link":"https:\/\/stackoverflow.com\/users\/731947\/cs%e1%b5%a0"},"is_accepted":false,"score":1,"last_activity_date":1365743245,"last_edit_date":1365743245.0,"creation_date":1365741864,"answer_id":15963226,"question_id":9114402,"content_license":"CC BY-SA 3.0","body_markdown":"Could be useful in some *remote* cases so here it goes:\r\n\r\nRegEx only solution in 3 steps (*couldn&#39;t create a RegEx in one go*):\r\n\r\nString A: `abcdef`  \r\nString B: `abcxef`\r\n\r\n- 1st pass: create RegEx from `String A` *(part 1)*:  \r\nMatch: `\/(.)\/g`  \r\nReplace: `\\1(`  \r\nResult: `a(b(c(d(e(f(`  \r\nExplained demo: http:\/\/regex101.com\/r\/aJ4pY7  \r\n\r\n- 2nd pass: create RegEx from `1st pass result`  \r\nMatch: `\/^(.\\()(?=(.*)$)|\\G.\\(\/g`  \r\nReplace: `\\1\\2)?+`  \r\nResult: `a(b(c(d(e(f()?+)?+)?+)?+)?+)?+`  \r\nExplained demo: http:\/\/regex101.com\/r\/xJ7bK7  \r\n\r\n- 3rd pass: test `String B` against RegEx created in `2nd pass`  \r\nMatch: `\/a(b(c(d(e(f()?+)?+)?+)?+)?+)?+\/`  \r\nResult: `abc` ([explained demo][1])\r\n\r\nAnd here&#39;s the *glorified* **one-liner** in PHP:  \r\n\r\n    preg_match(&#39;\/^&#39;.preg_replace(&#39;\/^(.\\()(?=(.*)$)|\\G.\\(\/&#39;,&#39;\\1\\2)?+&#39;,preg_replace(&#39;\/(.)\/&#39;,&#39;\\1(&#39;,$a)).&#39;\/&#39;,$b,$longest);\r\n\r\nCode live at: http:\/\/codepad.viper-7.com\/dCrqLa\r\n\r\n  [1]: http:\/\/regex101.com\/r\/hU8qG2","body":"<p>Could be useful in some <em>remote<\/em> cases so here it goes:<\/p>\n\n<p>RegEx only solution in 3 steps (<em>couldn't create a RegEx in one go<\/em>):<\/p>\n\n<p>String A: <code>abcdef<\/code><br>\nString B: <code>abcxef<\/code><\/p>\n\n<ul>\n<li><p>1st pass: create RegEx from <code>String A<\/code> <em>(part 1)<\/em>:<br>\nMatch: <code>\/(.)\/g<\/code><br>\nReplace: <code>\\1(<\/code><br>\nResult: <code>a(b(c(d(e(f(<\/code><br>\nExplained demo: <a href=\"http:\/\/regex101.com\/r\/aJ4pY7\" rel=\"nofollow\">http:\/\/regex101.com\/r\/aJ4pY7<\/a>  <\/p><\/li>\n<li><p>2nd pass: create RegEx from <code>1st pass result<\/code><br>\nMatch: <code>\/^(.\\()(?=(.*)$)|\\G.\\(\/g<\/code><br>\nReplace: <code>\\1\\2)?+<\/code><br>\nResult: <code>a(b(c(d(e(f()?+)?+)?+)?+)?+)?+<\/code><br>\nExplained demo: <a href=\"http:\/\/regex101.com\/r\/xJ7bK7\" rel=\"nofollow\">http:\/\/regex101.com\/r\/xJ7bK7<\/a>  <\/p><\/li>\n<li><p>3rd pass: test <code>String B<\/code> against RegEx created in <code>2nd pass<\/code><br>\nMatch: <code>\/a(b(c(d(e(f()?+)?+)?+)?+)?+)?+\/<\/code><br>\nResult: <code>abc<\/code> (<a href=\"http:\/\/regex101.com\/r\/hU8qG2\" rel=\"nofollow\">explained demo<\/a>)<\/p><\/li>\n<\/ul>\n\n<p>And here's the <em>glorified<\/em> <strong>one-liner<\/strong> in PHP:  <\/p>\n\n<pre><code>preg_match('\/^'.preg_replace('\/^(.\\()(?=(.*)$)|\\G.\\(\/','\\1\\2)?+',preg_replace('\/(.)\/','\\1(',$a)).'\/',$b,$longest);\n<\/code><\/pre>\n\n<p>Code live at: <a href=\"http:\/\/codepad.viper-7.com\/dCrqLa\" rel=\"nofollow\">http:\/\/codepad.viper-7.com\/dCrqLa<\/a><\/p>\n","community_owned_date":null},{"owner":{"account_id":3148119,"reputation":11,"user_id":2662183,"user_type":"unregistered","profile_image":"https:\/\/www.gravatar.com\/avatar\/542ba0313236cab2ea958eca1cfc62b7?s=256&d=identicon&r=PG","display_name":"Weeble","link":"https:\/\/stackoverflow.com\/users\/2662183\/weeble"},"is_accepted":false,"score":1,"last_activity_date":1375905664,"last_edit_date":null,"creation_date":1375905664,"answer_id":18112734,"question_id":844616,"content_license":"CC BY-SA 3.0","body_markdown":"    print(&quot;OK : 1 - CANCEL : 2\\n&quot;);\r\n    my $value = &lt;STDIN&gt;;\r\n    SWITCH: {\r\n        ($value == 1) &amp;&amp; last(SWITCH);\r\n        ($value == 2) &amp;&amp; do {print(&quot;Cancelled\\n&quot;); exit()};\r\n        print(&quot;??\\n&quot;);\r\n    }","body":"<pre><code>print(\"OK : 1 - CANCEL : 2\\n\");\nmy $value = &lt;STDIN&gt;;\nSWITCH: {\n    ($value == 1) &amp;&amp; last(SWITCH);\n    ($value == 2) &amp;&amp; do {print(\"Cancelled\\n\"); exit()};\n    print(\"??\\n\");\n}\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":3783535,"reputation":19,"user_id":3142262,"user_type":"unregistered","profile_image":"https:\/\/www.gravatar.com\/avatar\/eebef66501fe26245cb343112cd1f559?s=256&d=identicon&r=PG","display_name":"Zhugo","link":"https:\/\/stackoverflow.com\/users\/3142262\/zhugo"},"is_accepted":false,"score":1,"last_activity_date":1619554874,"last_edit_date":1619554874.0,"creation_date":1388246626,"answer_id":20816472,"question_id":863426,"content_license":"CC BY-SA 4.0","body_markdown":"    @people = qw( bob john linda ); \r\n    $n = @people; # The number 3\r\n    Print &quot; The number in the list is $n \\n&quot;; \r\n\r\nExpressions in Perl always return the appropriate value for their context.\r\n\r\nFor example, how about the \u201cname\u201d * of an array? In a list context, it gives the list of elements. But in a scalar context, it returns the number of elements in the array.\r\n\r\n","body":"<pre><code>@people = qw( bob john linda ); \n$n = @people; # The number 3\nPrint &quot; The number in the list is $n \\n&quot;; \n<\/code><\/pre>\n<p>Expressions in Perl always return the appropriate value for their context.<\/p>\n<p>For example, how about the \u201cname\u201d * of an array? In a list context, it gives the list of elements. But in a scalar context, it returns the number of elements in the array.<\/p>\n","community_owned_date":null},{"owner":{"account_id":1560429,"reputation":331,"user_id":1450404,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/0ed0fd4ac9c7555d051ed27e283774bf?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"Mark Lawrence","link":"https:\/\/stackoverflow.com\/users\/1450404\/mark-lawrence"},"is_accepted":false,"score":1,"last_activity_date":1413661426,"last_edit_date":1413661426.0,"creation_date":1411153001,"answer_id":25940666,"question_id":34920,"content_license":"CC BY-SA 3.0","body_markdown":"One alternative to the lock *file* approach is to use a lock *socket*. See [Lock::Socket][1] on CPAN for such an implementation. Usage is as simple as the following:\r\n\r\n    use Lock::Socket qw\/lock_socket\/;\r\n    my $lock = lock_socket(5197); # raises exception if lock already taken\r\n\r\n\r\nThere are a couple of advantages to using a socket:\r\n\r\n-  guaranteed (through the operating system) that no two applications will hold the same lock: there is no race condition.\r\n- guaranteed (again through the operating system) to clean up neatly when your process exits, so there are no stale locks to deal with.\r\n- relies on functionality that is well supported by anything that Perl runs on: no issues with flock(2) support on Win32 for example.\r\n\r\nThe obvious disadvantage is of course that the lock namespace is global. It is possible for a kind of denial-of-service if another process decides to lock the port you need.\r\n\r\n[disclosure: I am the author of the afor-mentioned module]\r\n\r\n  [1]: http:\/\/metacpan.org\/pod\/Lock::Socket","body":"<p>One alternative to the lock <em>file<\/em> approach is to use a lock <em>socket<\/em>. See <a href=\"http:\/\/metacpan.org\/pod\/Lock::Socket\" rel=\"nofollow\">Lock::Socket<\/a> on CPAN for such an implementation. Usage is as simple as the following:<\/p>\n\n<pre><code>use Lock::Socket qw\/lock_socket\/;\nmy $lock = lock_socket(5197); # raises exception if lock already taken\n<\/code><\/pre>\n\n<p>There are a couple of advantages to using a socket:<\/p>\n\n<ul>\n<li>guaranteed (through the operating system) that no two applications will hold the same lock: there is no race condition.<\/li>\n<li>guaranteed (again through the operating system) to clean up neatly when your process exits, so there are no stale locks to deal with.<\/li>\n<li>relies on functionality that is well supported by anything that Perl runs on: no issues with flock(2) support on Win32 for example.<\/li>\n<\/ul>\n\n<p>The obvious disadvantage is of course that the lock namespace is global. It is possible for a kind of denial-of-service if another process decides to lock the port you need.<\/p>\n\n<p>[disclosure: I am the author of the afor-mentioned module]<\/p>\n","community_owned_date":null},{"owner":{"account_id":1225248,"reputation":19789,"user_id":1190934,"user_type":"registered","accept_rate":60,"profile_image":"https:\/\/i.stack.imgur.com\/Ign26.jpg?s=256&g=1","display_name":"James Oravec","link":"https:\/\/stackoverflow.com\/users\/1190934\/james-oravec"},"is_accepted":false,"score":1,"last_activity_date":1411772044,"last_edit_date":null,"creation_date":1411772044,"answer_id":26069420,"question_id":2415954,"content_license":"CC BY-SA 3.0","body_markdown":"A quick and simple way to do this is to use `qx()` specifically for your example:\r\n\r\n`my $output = qx(ls 2&gt;&amp;1);` \r\n\r\nThe `2&gt;&amp;1` part is to capture both stdout and stderr.","body":"<p>A quick and simple way to do this is to use <code>qx()<\/code> specifically for your example:<\/p>\n\n<p><code>my $output = qx(ls 2&gt;&amp;1);<\/code> <\/p>\n\n<p>The <code>2&gt;&amp;1<\/code> part is to capture both stdout and stderr.<\/p>\n","community_owned_date":null},{"owner":{"account_id":4887112,"reputation":2375,"user_id":3939241,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/MEYTh.png?s=256&g=1","display_name":"Abecee","link":"https:\/\/stackoverflow.com\/users\/3939241\/abecee"},"is_accepted":false,"score":1,"last_activity_date":1638820326,"last_edit_date":1638820326.0,"creation_date":1417136107,"answer_id":27180552,"question_id":27179991,"content_license":"CC BY-SA 4.0","body_markdown":"\u2026 or we could have dropped the alternation from the original expression:\r\n\r\n    ^(?:(?!abc:)(?!defg:))\r\n","body":"<p>\u2026 or we could have dropped the alternation from the original expression:<\/p>\n<pre><code>^(?:(?!abc:)(?!defg:))\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":2550933,"reputation":12820,"user_id":2214695,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/dee2ef257601e05c5659f04de9cb7c67?s=256&d=identicon&r=PG","display_name":"oliv","link":"https:\/\/stackoverflow.com\/users\/2214695\/oliv"},"is_accepted":false,"score":1,"last_activity_date":1487325934,"last_edit_date":null,"creation_date":1487325934,"answer_id":42295002,"question_id":42239179,"content_license":"CC BY-SA 3.0","body_markdown":"A possible way is to use `python`:\r\n\r\n    $ cat test.py\r\n    import sys,re\r\n    \r\n    with open(sys.argv[1], &quot;r&quot;) as f1:\r\n        patterns = f1.read().splitlines() # read pattern from file1 without the trailing newline\r\n    \r\n    m = re.compile(&quot;|&quot;.join(patterns))    # create the regex\r\n    \r\n    with open(sys.argv[2], &quot;r&quot;) as f2:\r\n        for line in f2: \r\n            if m.search(line) : \r\n                print line,               # print line from file2 if this one matches the regex\r\n  \r\nand use it like this:\r\n\r\n    python test.py file1.txt file2.txt","body":"<p>A possible way is to use <code>python<\/code>:<\/p>\n\n<pre><code>$ cat test.py\nimport sys,re\n\nwith open(sys.argv[1], \"r\") as f1:\n    patterns = f1.read().splitlines() # read pattern from file1 without the trailing newline\n\nm = re.compile(\"|\".join(patterns))    # create the regex\n\nwith open(sys.argv[2], \"r\") as f2:\n    for line in f2: \n        if m.search(line) : \n            print line,               # print line from file2 if this one matches the regex\n<\/code><\/pre>\n\n<p>and use it like this:<\/p>\n\n<pre><code>python test.py file1.txt file2.txt\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":9322684,"reputation":1182,"user_id":6920976,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/a0f7208920e0af8e2f5d375860540889?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"User9102d82","link":"https:\/\/stackoverflow.com\/users\/6920976\/user9102d82"},"is_accepted":false,"score":1,"last_activity_date":1487348724,"last_edit_date":1487348724.0,"creation_date":1487348412,"answer_id":42302653,"question_id":42239179,"content_license":"CC BY-SA 3.0","body_markdown":"You can also use Perl for this:\r\n\r\n*Please note that this will hog memory and your machine\/server better has some.*\r\n\r\n**Sample Data:**\r\n\r\n    %_STATION@gaurav * \/root\/ga\/pl&gt; head file1.txt file2.txt\r\n    ==&gt; file1.txt &lt;==\r\n    foo1\r\n    foo2\r\n    ...\r\n    bar1\r\n    bar2\r\n    ...\r\n    \r\n    ==&gt; file2.txt &lt;==\r\n    date1|foo1|number1\r\n    date2|foo2|number2\r\n    date3|foo3|number3\r\n    ...\r\n    date1|bar1|number1\r\n    date2|bar2|number2\r\n    date3|bar3|number3\r\n    %_STATION@gaurav * \/root\/ga\/study\/pl&gt;\r\n\r\n**Script Output:** Script will produce **final** output  in a file named `output_comp`.\r\n\r\n    %_STATION@gaurav * \/root\/ga\/pl&gt; .\/comp.pl  file1.txt file2.txt ; cat output_comp\r\n    date1|bar1|number1\r\n    date2|bar2|number2\r\n    date2|foo2|number2\r\n    date1|foo1|number1\r\n    %_STATION@gaurav * \/root\/ga\/pl&gt;\r\n\r\n**Script:**\r\n\r\n    %_STATION@gaurav * \/root\/ga\/pl&gt; cat comp.pl\r\n    #!\/usr\/bin\/perl\r\n    \r\n    use strict ;\r\n    use warnings ;\r\n    use Data::Dumper ;\r\n    \r\n    my ($file1,$file2) = @ARGV ;\r\n    my $output = &quot;output_comp&quot; ;\r\n    my %hash ;    # This will store main comparison data.\r\n    my %tmp ;     # This will store already selected results, to be skipped.\r\n    (scalar @ARGV != 2 ? (print &quot;Need 2 files!\\n&quot;) : ()) ? exit 1 : () ;\r\n    \r\n    # Read all files at once and use their name as the key.\r\n    for (@ARGV) {\r\n      open FH, &quot;&lt;$_&quot; or die &quot;Cannot open $_\\n&quot; ;\r\n      while  (my $line = &lt;FH&gt;) {chomp $line ;$hash{$_}{$line} = &quot;$line&quot;}\r\n      close FH ;\r\n    }\r\n    \r\n    # Now we churn through the data and compare to generate\r\n    # the sorted output in the output file.\r\n    open FH, &quot;&gt;&gt;$output&quot; or die &quot;Cannot open outfile!\\n&quot; ;\r\n    foreach my $k1 (keys %{$hash{$file1}}){\r\n      foreach my $k2 (keys %{$hash{$file2}}){\r\n        if ($k1 =~ m\/^.+?$k2.+?$\/) {\r\n          if (!defined $tmp{&quot;$hash{$file2}{$k2}&quot;}) {\r\n            print FH &quot;$hash{$file2}{$k2}\\n&quot; ;\r\n            $tmp{&quot;$hash{$file2}{$k2}&quot;} = 1 ;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    close FH  ;\r\n    %_STATION@gaurav * \/root\/ga\/pl&gt;\r\n\r\nThanks.\r\n\r\n","body":"<p>You can also use Perl for this:<\/p>\n\n<p><em>Please note that this will hog memory and your machine\/server better has some.<\/em><\/p>\n\n<p><strong>Sample Data:<\/strong><\/p>\n\n<pre><code>%_STATION@gaurav * \/root\/ga\/pl&gt; head file1.txt file2.txt\n==&gt; file1.txt &lt;==\nfoo1\nfoo2\n...\nbar1\nbar2\n...\n\n==&gt; file2.txt &lt;==\ndate1|foo1|number1\ndate2|foo2|number2\ndate3|foo3|number3\n...\ndate1|bar1|number1\ndate2|bar2|number2\ndate3|bar3|number3\n%_STATION@gaurav * \/root\/ga\/study\/pl&gt;\n<\/code><\/pre>\n\n<p><strong>Script Output:<\/strong> Script will produce <strong>final<\/strong> output  in a file named <code>output_comp<\/code>.<\/p>\n\n<pre><code>%_STATION@gaurav * \/root\/ga\/pl&gt; .\/comp.pl  file1.txt file2.txt ; cat output_comp\ndate1|bar1|number1\ndate2|bar2|number2\ndate2|foo2|number2\ndate1|foo1|number1\n%_STATION@gaurav * \/root\/ga\/pl&gt;\n<\/code><\/pre>\n\n<p><strong>Script:<\/strong><\/p>\n\n<pre><code>%_STATION@gaurav * \/root\/ga\/pl&gt; cat comp.pl\n#!\/usr\/bin\/perl\n\nuse strict ;\nuse warnings ;\nuse Data::Dumper ;\n\nmy ($file1,$file2) = @ARGV ;\nmy $output = \"output_comp\" ;\nmy %hash ;    # This will store main comparison data.\nmy %tmp ;     # This will store already selected results, to be skipped.\n(scalar @ARGV != 2 ? (print \"Need 2 files!\\n\") : ()) ? exit 1 : () ;\n\n# Read all files at once and use their name as the key.\nfor (@ARGV) {\n  open FH, \"&lt;$_\" or die \"Cannot open $_\\n\" ;\n  while  (my $line = &lt;FH&gt;) {chomp $line ;$hash{$_}{$line} = \"$line\"}\n  close FH ;\n}\n\n# Now we churn through the data and compare to generate\n# the sorted output in the output file.\nopen FH, \"&gt;&gt;$output\" or die \"Cannot open outfile!\\n\" ;\nforeach my $k1 (keys %{$hash{$file1}}){\n  foreach my $k2 (keys %{$hash{$file2}}){\n    if ($k1 =~ m\/^.+?$k2.+?$\/) {\n      if (!defined $tmp{\"$hash{$file2}{$k2}\"}) {\n        print FH \"$hash{$file2}{$k2}\\n\" ;\n        $tmp{\"$hash{$file2}{$k2}\"} = 1 ;\n      }\n    }\n  }\n}\nclose FH  ;\n%_STATION@gaurav * \/root\/ga\/pl&gt;\n<\/code><\/pre>\n\n<p>Thanks.<\/p>\n","community_owned_date":null},{"owner":{"account_id":1821125,"reputation":1129,"user_id":2051109,"user_type":"registered","accept_rate":60,"profile_image":"https:\/\/www.gravatar.com\/avatar\/216009d45e1b8e34f936173142f0648f?s=256&d=identicon&r=PG","display_name":"BOC","link":"https:\/\/stackoverflow.com\/users\/2051109\/boc"},"is_accepted":false,"score":1,"last_activity_date":1487600255,"last_edit_date":null,"creation_date":1487600255,"answer_id":42346955,"question_id":42239179,"content_license":"CC BY-SA 3.0","body_markdown":"IMHO, grep is a good tool highly optimised for huge file2.txt but maybe not for so many patterns to search. I suggest to combine all the strings of file1.txt into a single huge regexp like \\|bar1|bar2|foo1|foo2\\|\r\n\r\n    echo  &#39;\\|&#39;$(paste -s -d &#39;|&#39; file1.txt)&#39;\\|&#39; &gt; regexp1.txt\r\n\r\n    grep -E -f regexp1.txt file2.txt &gt; file.matched\r\n\r\nAnd of course LANG=C may help.\r\nPlease give feedback or send your files so I can test myself.\r\n","body":"<p>IMHO, grep is a good tool highly optimised for huge file2.txt but maybe not for so many patterns to search. I suggest to combine all the strings of file1.txt into a single huge regexp like \\|bar1|bar2|foo1|foo2\\|<\/p>\n\n<pre><code>echo  '\\|'$(paste -s -d '|' file1.txt)'\\|' &gt; regexp1.txt\n\ngrep -E -f regexp1.txt file2.txt &gt; file.matched\n<\/code><\/pre>\n\n<p>And of course LANG=C may help.\nPlease give feedback or send your files so I can test myself.<\/p>\n","community_owned_date":null},{"owner":{"user_type":"does_not_exist","display_name":"user933161"},"is_accepted":false,"score":1,"last_activity_date":1487876671,"last_edit_date":null,"creation_date":1487876671,"answer_id":42424099,"question_id":42239179,"content_license":"CC BY-SA 3.0","body_markdown":"I would use SQLite3 :) Maybe in-memory database or whatever. Import the files and use SQL query.","body":"<p>I would use SQLite3 :) Maybe in-memory database or whatever. Import the files and use SQL query.<\/p>\n","community_owned_date":null},{"owner":{"account_id":3584092,"reputation":5011,"user_id":2991627,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/b1bf3f42fc00dd825eda62f1df4fa304?s=256&d=identicon&r=PG","display_name":"JJoao","link":"https:\/\/stackoverflow.com\/users\/2991627\/jjoao"},"is_accepted":false,"score":1,"last_activity_date":1488876565,"last_edit_date":1488876565.0,"creation_date":1488791518,"answer_id":42621587,"question_id":42239179,"content_license":"CC BY-SA 3.0","body_markdown":"Using **flex**:\r\n\r\n###1: build the flex processor:\r\n \r\n\r\n    $ awk &#39;NR==1{ printf &quot;%%%%\\n\\n.*\\\\|(%s&quot;,$0 } \r\n                { printf &quot;|%s&quot;,$0 } \r\n           END  { print &quot;)\\\\|.*\\\\n ECHO;\\n.*\\\\n ;\\n%%\\n&quot; }&#39; file1.txt &gt; a.fl\r\n\r\n###2: compile it  \r\n    $ flex -Ca -F a.fl ; cc -O lex.yy.c -lfl\r\n\r\n###3: and run \r\n    $ a.out &lt; file2.txt  &gt; out\r\n\r\nCompiling (cc ...) is a slow process; this approach will pay just for cases\r\nof stable file1.txt\r\n\r\n(In my machine) The times taken to run a search &quot;100 in 10_000_000&quot; test in this approach is 3 times faster than `LC_ALL=C fgrep...`","body":"<p>Using <strong>flex<\/strong>:<\/p>\n\n<h3>1: build the flex processor:<\/h3>\n\n<pre><code>$ awk 'NR==1{ printf \"%%%%\\n\\n.*\\\\|(%s\",$0 } \n            { printf \"|%s\",$0 } \n       END  { print \")\\\\|.*\\\\n ECHO;\\n.*\\\\n ;\\n%%\\n\" }' file1.txt &gt; a.fl\n<\/code><\/pre>\n\n<h3>2: compile it<\/h3>\n\n<pre><code>$ flex -Ca -F a.fl ; cc -O lex.yy.c -lfl\n<\/code><\/pre>\n\n<h3>3: and run<\/h3>\n\n<pre><code>$ a.out &lt; file2.txt  &gt; out\n<\/code><\/pre>\n\n<p>Compiling (cc ...) is a slow process; this approach will pay just for cases\nof stable file1.txt<\/p>\n\n<p>(In my machine) The times taken to run a search \"100 in 10_000_000\" test in this approach is 3 times faster than <code>LC_ALL=C fgrep...<\/code><\/p>\n","community_owned_date":null},{"owner":{"account_id":3776427,"reputation":9133,"user_id":5848200,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/a8072aaf76dcb4fe5027964252f16382?s=256&d=identicon&r=PG","display_name":"Grinnz","link":"https:\/\/stackoverflow.com\/users\/5848200\/grinnz"},"is_accepted":false,"score":1,"last_activity_date":1548701987,"last_edit_date":null,"creation_date":1548701987,"answer_id":54408586,"question_id":2415954,"content_license":"CC BY-SA 4.0","body_markdown":"Since it has not been mentioned by other answers yet, you can also use [Capture::Tiny](https:\/\/metacpan.org\/pod\/Capture::Tiny) to store any arbitrary STDOUT (and\/or STDERR) into a variable, including from the system command.\r\n\r\n    use strict;\r\n    use warnings;\r\n    use Capture::Tiny &#39;capture_stdout&#39;;\r\n    my ($stdout, $return) = capture_stdout { system &#39;ls&#39; };\r\n    # error checking for system return value required here","body":"<p>Since it has not been mentioned by other answers yet, you can also use <a href=\"https:\/\/metacpan.org\/pod\/Capture::Tiny\" rel=\"nofollow noreferrer\">Capture::Tiny<\/a> to store any arbitrary STDOUT (and\/or STDERR) into a variable, including from the system command.<\/p>\n\n<pre><code>use strict;\nuse warnings;\nuse Capture::Tiny 'capture_stdout';\nmy ($stdout, $return) = capture_stdout { system 'ls' };\n# error checking for system return value required here\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":11471810,"reputation":11,"user_id":8408390,"user_type":"registered","profile_image":"https:\/\/lh4.googleusercontent.com\/-V9c9F48DbtM\/AAAAAAAAAAI\/AAAAAAAABm4\/gOk4StNbmME\/photo.jpg?sz=256","display_name":"KuldeepSinh","link":"https:\/\/stackoverflow.com\/users\/8408390\/kuldeepsinh"},"is_accepted":false,"score":1,"last_activity_date":1553532155,"last_edit_date":1553532155.0,"creation_date":1553531156,"answer_id":55342317,"question_id":33294986,"content_license":"CC BY-SA 4.0","body_markdown":"In case you get &quot;too many open files&quot; error as follows...\r\n\r\n```\r\nawk: whatever-18.txt makes too many open files\r\n input record number 18, file file.txt\r\n source line number 1\r\n```\r\nYou may need to close newly created file, before creating a new one, as follows. \r\n```\r\nawk -v RS= &#39;{close(&quot;whatever-&quot; i &quot;.txt&quot;); i++}{print &gt; (&quot;whatever-&quot; i &quot;.txt&quot;)}&#39; file.txt\r\n```","body":"<p>In case you get \"too many open files\" error as follows...<\/p>\n\n<pre><code>awk: whatever-18.txt makes too many open files\n input record number 18, file file.txt\n source line number 1\n<\/code><\/pre>\n\n<p>You may need to close newly created file, before creating a new one, as follows. <\/p>\n\n<pre><code>awk -v RS= '{close(\"whatever-\" i \".txt\"); i++}{print &gt; (\"whatever-\" i \".txt\")}' file.txt\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":1734438,"reputation":36367,"user_id":1587329,"user_type":"registered","accept_rate":94,"profile_image":"https:\/\/i.stack.imgur.com\/UWmiP.png?s=256&g=1","display_name":"serv-inc","link":"https:\/\/stackoverflow.com\/users\/1587329\/serv-inc"},"is_accepted":false,"score":1,"last_activity_date":1568294750,"last_edit_date":null,"creation_date":1568294750,"answer_id":57907772,"question_id":251705,"content_license":"CC BY-SA 4.0","body_markdown":"[`perlbrew`][1] lets you use a local perl and installs it&#39;s packages to a local directory.\r\n\r\n    \\curl -L https:\/\/install.perlbrew.pl | bash\r\n    \r\n    perlbrew init  # put this in .bash_profile etc\r\n    \r\n    perlbrew install 5.27.11\r\n    \r\n    perlbrew switch 5.27.11\r\n\r\nSee also https:\/\/opensource.com\/article\/18\/7\/perlbrew.\r\n\r\n  [1]: https:\/\/perlbrew.pl","body":"<p><a href=\"https:\/\/perlbrew.pl\" rel=\"nofollow noreferrer\"><code>perlbrew<\/code><\/a> lets you use a local perl and installs it's packages to a local directory.<\/p>\n\n<pre><code>\\curl -L https:\/\/install.perlbrew.pl | bash\n\nperlbrew init  # put this in .bash_profile etc\n\nperlbrew install 5.27.11\n\nperlbrew switch 5.27.11\n<\/code><\/pre>\n\n<p>See also <a href=\"https:\/\/opensource.com\/article\/18\/7\/perlbrew\" rel=\"nofollow noreferrer\">https:\/\/opensource.com\/article\/18\/7\/perlbrew<\/a>.<\/p>\n","community_owned_date":null},{"owner":{"account_id":11276529,"reputation":11,"user_id":8270430,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/Nlt9B.png?s=256&g=1","display_name":"Loubregand","link":"https:\/\/stackoverflow.com\/users\/8270430\/loubregand"},"is_accepted":false,"score":1,"last_activity_date":1574960031,"last_edit_date":null,"creation_date":1574960031,"answer_id":59093430,"question_id":4155840,"content_license":"CC BY-SA 4.0","body_markdown":"Python regex module provide a way to do fuzzy matching within regexes:\r\n\r\nhttps:\/\/pypi.org\/project\/regex\/ (look for Approximate \u201cfuzzy\u201d matching)\r\n\r\n    The fuzziness of a regex item is specified between \u201c{\u201d and \u201c}\u201d after the item.\r\n    \r\n    Examples:\r\n    \r\n    foo match \u201cfoo\u201d exactly\r\n    (?:foo){i} match \u201cfoo\u201d, permitting insertions\r\n    (?:foo){d} match \u201cfoo\u201d, permitting deletions\r\n    (?:foo){s} match \u201cfoo\u201d, permitting substitutions\r\n    (?:foo){i,s} match \u201cfoo\u201d, permitting insertions and substitutions\r\n    (?:foo){e} match \u201cfoo\u201d, permitting errors\r\n    If a certain type of error is specified, then any type not specified will not be permitted.\r\n    \r\n    In the following examples I\u2019ll omit the item and write only the fuzziness:\r\n    \r\n    {d&lt;=3} permit at most 3 deletions, but no other types\r\n    {i&lt;=1,s&lt;=2} permit at most 1 insertion and at most 2 substitutions, but no deletions\r\n    {1&lt;=e&lt;=3} permit at least 1 and at most 3 errors\r\n    {i&lt;=2,d&lt;=2,e&lt;=3} permit at most 2 insertions, at most 2 deletions, at most 3 errors in total, but no substitutions\r\n\r\nSo you could write, eg:\r\n\r\n    import regex, pprint\r\n    \r\n    m = regex.compile( r&#39;(?:Assignor(, by mesne assignments,)? to (company name), a corporation of (state)){e}&#39;, regex.IGNORECASE ).match(&#39;ASSIGNOR, BY MESHS ASSIGN1IBNTS, TO ALUSCHALME&amp;S MANOTAC\/rURINGCOMPANY, A COBPOBATlOH OF DELAY\/ABE.&#39;)\r\n    \r\n    pprint.pprint(m)\r\n    pprint.pprint(m.groups())\r\n\r\nThis does not work right away, the result would be:\r\n\r\n    &lt;regex.Match object; span=(0, 71), match=&#39;ASSIGNOR, BY MESHS ASSIGN1IBNTS, TO ALUSCHALME&amp;S MANOTAC\/rURINGCOMPANY,&#39;, fuzzy_counts=(45, 0, 0)&gt;\r\n    (&#39;, BY MESHS ASSIGN1IBNTS&#39;, &#39; ALUSCHALME&amp;&#39;, &#39;PANY,&#39;)\r\n\r\nBut giving it some more tweaking (eg you could specify a maximum number of errors for each capture group) you should be able to reach you goal.\r\n","body":"<p>Python regex module provide a way to do fuzzy matching within regexes:<\/p>\n\n<p><a href=\"https:\/\/pypi.org\/project\/regex\/\" rel=\"nofollow noreferrer\">https:\/\/pypi.org\/project\/regex\/<\/a> (look for Approximate \u201cfuzzy\u201d matching)<\/p>\n\n<pre><code>The fuzziness of a regex item is specified between \u201c{\u201d and \u201c}\u201d after the item.\n\nExamples:\n\nfoo match \u201cfoo\u201d exactly\n(?:foo){i} match \u201cfoo\u201d, permitting insertions\n(?:foo){d} match \u201cfoo\u201d, permitting deletions\n(?:foo){s} match \u201cfoo\u201d, permitting substitutions\n(?:foo){i,s} match \u201cfoo\u201d, permitting insertions and substitutions\n(?:foo){e} match \u201cfoo\u201d, permitting errors\nIf a certain type of error is specified, then any type not specified will not be permitted.\n\nIn the following examples I\u2019ll omit the item and write only the fuzziness:\n\n{d&lt;=3} permit at most 3 deletions, but no other types\n{i&lt;=1,s&lt;=2} permit at most 1 insertion and at most 2 substitutions, but no deletions\n{1&lt;=e&lt;=3} permit at least 1 and at most 3 errors\n{i&lt;=2,d&lt;=2,e&lt;=3} permit at most 2 insertions, at most 2 deletions, at most 3 errors in total, but no substitutions\n<\/code><\/pre>\n\n<p>So you could write, eg:<\/p>\n\n<pre><code>import regex, pprint\n\nm = regex.compile( r'(?:Assignor(, by mesne assignments,)? to (company name), a corporation of (state)){e}', regex.IGNORECASE ).match('ASSIGNOR, BY MESHS ASSIGN1IBNTS, TO ALUSCHALME&amp;S MANOTAC\/rURINGCOMPANY, A COBPOBATlOH OF DELAY\/ABE.')\n\npprint.pprint(m)\npprint.pprint(m.groups())\n<\/code><\/pre>\n\n<p>This does not work right away, the result would be:<\/p>\n\n<pre><code>&lt;regex.Match object; span=(0, 71), match='ASSIGNOR, BY MESHS ASSIGN1IBNTS, TO ALUSCHALME&amp;S MANOTAC\/rURINGCOMPANY,', fuzzy_counts=(45, 0, 0)&gt;\n(', BY MESHS ASSIGN1IBNTS', ' ALUSCHALME&amp;', 'PANY,')\n<\/code><\/pre>\n\n<p>But giving it some more tweaking (eg you could specify a maximum number of errors for each capture group) you should be able to reach you goal.<\/p>\n","community_owned_date":null},{"owner":{"account_id":2707424,"reputation":4361,"user_id":2336725,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/20a0b96a26cf233d752469445595f872?s=256&d=identicon&r=PG","display_name":"Teepeemm","link":"https:\/\/stackoverflow.com\/users\/2336725\/teepeemm"},"is_accepted":false,"score":1,"last_activity_date":1657029296,"last_edit_date":null,"creation_date":1657029296,"answer_id":72870647,"question_id":8920477,"content_license":"CC BY-SA 4.0","body_markdown":"You can enter `f Module.pm` to tell the debugger to look at that particular module.  Once you&#39;ve done that, `b line_number` will stop at that line in `Module.pm`.\r\n\r\nOnce the original script has passed `use Module`, then `b subroutine` will stop at that subroutine.  The only catch here is that you can&#39;t make your first two debugger commands `f Module.pm; b subroutine` because when the script begins, it hasn&#39;t passed `use Module`, so Module.pm hasn&#39;t loaded yet, which means that perl can&#39;t see that `Module.pm` has `subroutine`.","body":"<p>You can enter <code>f Module.pm<\/code> to tell the debugger to look at that particular module.  Once you've done that, <code>b line_number<\/code> will stop at that line in <code>Module.pm<\/code>.<\/p>\n<p>Once the original script has passed <code>use Module<\/code>, then <code>b subroutine<\/code> will stop at that subroutine.  The only catch here is that you can't make your first two debugger commands <code>f Module.pm; b subroutine<\/code> because when the script begins, it hasn't passed <code>use Module<\/code>, so Module.pm hasn't loaded yet, which means that perl can't see that <code>Module.pm<\/code> has <code>subroutine<\/code>.<\/p>\n","community_owned_date":null},{"owner":{"account_id":1007,"reputation":33924,"user_id":1337,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/72de240484e389dbedb6a3e428b9f0c1?s=256&d=identicon&r=PG","display_name":"Brad Gilbert","link":"https:\/\/stackoverflow.com\/users\/1337\/brad-gilbert"},"is_accepted":false,"score":0,"last_activity_date":1218750353,"last_edit_date":1218750353.0,"creation_date":1218750078,"answer_id":11722,"question_id":3112,"content_license":"CC BY-SA 2.5","body_markdown":"I would re-factor the code inside the loop and then do\r\n\r\n\r\n    if( ref $results eq &#39;ARRAY&#39; ){\r\n        my_sub($result) for my $result (@$results);\r\n    }else{\r\n        my_sub($results);\r\n    }\r\n\r\nOf course I would only do that if the code in the loop was non-trivial.","body":"<p>I would re-factor the code inside the loop and then do<\/p>\n\n<pre><code>if( ref $results eq 'ARRAY' ){\n    my_sub($result) for my $result (@$results);\n}else{\n    my_sub($results);\n}\n<\/code><\/pre>\n\n<p>Of course I would only do that if the code in the loop was non-trivial.<\/p>\n","community_owned_date":null},{"owner":{"account_id":1346,"reputation":26106,"user_id":1797,"user_type":"registered","accept_rate":50,"profile_image":"https:\/\/www.gravatar.com\/avatar\/cb1bf19df48b9ff749fb4f71bed7e8eb?s=256&d=identicon&r=PG","display_name":"mk.","link":"https:\/\/stackoverflow.com\/users\/1797\/mk"},"is_accepted":false,"score":0,"last_activity_date":1220033795,"last_edit_date":null,"creation_date":1220033795,"answer_id":34928,"question_id":34920,"content_license":"CC BY-SA 2.5","body_markdown":"Use the [flock](http:\/\/perldoc.perl.org\/functions\/flock.html) Luke. \r\n\r\n**Edit:** [This](http:\/\/www.perlmonks.org\/?node_id=7058) is a good explanation.","body":"<p>Use the <a href=\"http:\/\/perldoc.perl.org\/functions\/flock.html\" rel=\"nofollow noreferrer\">flock<\/a> Luke. <\/p>\n\n<p><strong>Edit:<\/strong> <a href=\"http:\/\/www.perlmonks.org\/?node_id=7058\" rel=\"nofollow noreferrer\">This<\/a> is a good explanation.<\/p>\n","community_owned_date":null},{"owner":{"account_id":1406,"reputation":39702,"user_id":1879,"user_type":"registered","accept_rate":57,"profile_image":"https:\/\/i.stack.imgur.com\/mBv94.jpg?s=256&g=1","display_name":"Michael Ratanapintha","link":"https:\/\/stackoverflow.com\/users\/1879\/michael-ratanapintha"},"is_accepted":false,"score":0,"last_activity_date":1220033807,"last_edit_date":null,"creation_date":1220033807,"answer_id":34929,"question_id":34920,"content_license":"CC BY-SA 2.5","body_markdown":"flock creates Unix-style file locks, and is available on most OS&#39;s Perl runs on.  However flock&#39;s locks are advisory only.\r\n\r\nedit: emphasized that flock is portable","body":"<p>flock creates Unix-style file locks, and is available on most OS's Perl runs on.  However flock's locks are advisory only.<\/p>\n\n<p>edit: emphasized that flock is portable<\/p>\n","community_owned_date":null},{"owner":{"account_id":4985,"reputation":10283,"user_id":7780,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/bf9668c1ebea8ecea9f1ac4474236b5e?s=256&d=identicon&r=PG","display_name":"dsm","link":"https:\/\/stackoverflow.com\/users\/7780\/dsm"},"is_accepted":false,"score":0,"last_activity_date":1224091373,"last_edit_date":null,"creation_date":1224091373,"answer_id":205629,"question_id":205159,"content_license":"CC BY-SA 2.5","body_markdown":"I would recommend you have a look at [IPC::Open3][1]. It allows for far more control over the spawned process than system or the backticks do.\r\n\r\n  [1]: http:\/\/perldoc.perl.org\/IPC\/Open3.html","body":"<p>I would recommend you have a look at <a href=\"http:\/\/perldoc.perl.org\/IPC\/Open3.html\" rel=\"nofollow noreferrer\">IPC::Open3<\/a>. It allows for far more control over the spawned process than system or the backticks do.<\/p>\n","community_owned_date":null},{"owner":{"account_id":14115,"reputation":21,"user_id":28758,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/?s=256&d=identicon&r=PG","display_name":"JDrago","link":"https:\/\/stackoverflow.com\/users\/28758\/jdrago"},"is_accepted":false,"score":0,"last_activity_date":1224207010,"last_edit_date":null,"creation_date":1224207010,"answer_id":210841,"question_id":205159,"content_license":"CC BY-SA 2.5","body_markdown":"On Linux, I prefer find:\r\n\r\n    my @files = map { chomp; $_ } `find`;\r\n","body":"<p>On Linux, I prefer find:<\/p>\n\n<pre><code>my @files = map { chomp; $_ } `find`;\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":25722,"reputation":73090,"user_id":66353,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/b56a740041997df881354ef8c97496d7?s=256&d=identicon&r=PG","display_name":"Alan Haggai Alavi","link":"https:\/\/stackoverflow.com\/users\/66353\/alan-haggai-alavi"},"is_accepted":false,"score":0,"last_activity_date":1245840514,"last_edit_date":null,"creation_date":1245840514,"answer_id":1037633,"question_id":1037583,"content_license":"CC BY-SA 2.5","body_markdown":"Writing tests can mostly decrease debugging time, I think.","body":"<p>Writing tests can mostly decrease debugging time, I think.<\/p>\n","community_owned_date":null},{"owner":{"account_id":41447,"reputation":34749,"user_id":120457,"user_type":"registered","accept_rate":91,"profile_image":"https:\/\/www.gravatar.com\/avatar\/56abbd59ee5a0cd86c8c14a4664dd83e?s=256&d=identicon&r=PG","display_name":"joe","link":"https:\/\/stackoverflow.com\/users\/120457\/joe"},"is_accepted":false,"score":0,"last_activity_date":1247067311,"last_edit_date":null,"creation_date":1247067311,"answer_id":1098865,"question_id":1037583,"content_license":"CC BY-SA 2.5","body_markdown":"[Some Other methods][1] \r\n\r\n\r\n  [1]: http:\/\/cgi2.cs.rpi.edu\/~lallip\/perl\/fall05\/debugging.shtml\r\n\r\n    CGI::Dump\r\n    \r\n    Benchmark\r\n    \r\n    Command-line options \r\n    \r\n    __DATA__ &amp; &lt;DATA&gt; \r\n    \r\n    $.\r\n    \r\n    __FILE__ &amp; __LINE__ \r\n    \r\n    warn() &amp; die() ","body":"<p><a href=\"http:\/\/cgi2.cs.rpi.edu\/~lallip\/perl\/fall05\/debugging.shtml\" rel=\"nofollow noreferrer\">Some Other methods<\/a> <\/p>\n\n<pre><code>CGI::Dump\n\nBenchmark\n\nCommand-line options \n\n__DATA__ &amp; &lt;DATA&gt; \n\n$.\n\n__FILE__ &amp; __LINE__ \n\nwarn() &amp; die() \n<\/code><\/pre>\n","community_owned_date":1247067311.0},{"owner":{"account_id":10162,"reputation":923151,"user_id":19068,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/1d2d3229ed1961d2bd81853242493247?s=256&d=identicon&r=PG","display_name":"Quentin","link":"https:\/\/stackoverflow.com\/users\/19068\/quentin"},"is_accepted":false,"score":0,"last_activity_date":1251208389,"last_edit_date":null,"creation_date":1251208389,"answer_id":1328422,"question_id":1328411,"content_license":"CC BY-SA 2.5","body_markdown":"It isn&#39;t intrinsically evil, but using it to pull off the arguments of a subroutine one by one is comparatively slow and requires a greater number of lines of code.","body":"<p>It isn't intrinsically evil, but using it to pull off the arguments of a subroutine one by one is comparatively slow and requires a greater number of lines of code.<\/p>\n","community_owned_date":null},{"owner":{"user_type":"does_not_exist","display_name":"user173717"},"is_accepted":false,"score":0,"last_activity_date":1253019176,"last_edit_date":null,"creation_date":1253019176,"answer_id":1427007,"question_id":34920,"content_license":"CC BY-SA 2.5","body_markdown":"Here&#39;s my solution to reading and writing in one lock...\r\n\r\n    open (TST,&quot;+&lt; readwrite_test.txt&quot;) or die &quot;Cannot open file\\n$!&quot;;\r\n    flock(TST, LOCK_EX);\r\n    # Read the file:\r\n    @LINES=&lt;TST&gt;;\r\n    # Wipe the file:\r\n    seek(TST, 0, 0); truncate(TST, 0);\r\n    # Do something with the contents here:\r\n    push @LINES,&quot;grappig, he!\\n&quot;;\r\n    $LINES[3]=&quot;Gekke henkie!\\n&quot;;\r\n    # Write the file:\r\n    foreach $l (@LINES)\r\n    {\r\n       print TST $l;\r\n    }\r\n    close(TST) or die &quot;Cannot close file\\n$!&quot;;\r\n","body":"<p>Here's my solution to reading and writing in one lock...<\/p>\n\n<pre><code>open (TST,\"+&lt; readwrite_test.txt\") or die \"Cannot open file\\n$!\";\nflock(TST, LOCK_EX);\n# Read the file:\n@LINES=&lt;TST&gt;;\n# Wipe the file:\nseek(TST, 0, 0); truncate(TST, 0);\n# Do something with the contents here:\npush @LINES,\"grappig, he!\\n\";\n$LINES[3]=\"Gekke henkie!\\n\";\n# Write the file:\nforeach $l (@LINES)\n{\n   print TST $l;\n}\nclose(TST) or die \"Cannot close file\\n$!\";\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":598155,"reputation":479,"user_id":289877,"user_type":"unregistered","accept_rate":62,"profile_image":"https:\/\/www.gravatar.com\/avatar\/177c680cced2227e9b52e03e1016e2b7?s=256&d=identicon&r=PG","display_name":"oren","link":"https:\/\/stackoverflow.com\/users\/289877\/oren"},"is_accepted":false,"score":0,"last_activity_date":1675228444,"last_edit_date":1675228444.0,"creation_date":1274453935,"answer_id":2883167,"question_id":2876769,"content_license":"CC BY-SA 4.0","body_markdown":"Yes you have 2 options :\r\n\r\n1.heredocs please note that every data in heredocs are interpolated :\r\n\r\n    my $data =&lt;&lt;END \r\n    \r\n    your data \r\n    \r\n    END\r\n\r\n2.qq() see for example :\r\n\r\n    print qq(\r\n     HTML\r\n    \r\n     $your text\r\n    \r\n     BODY\r\n    \r\n     HTML\r\n    );\r\n\r\n","body":"<p>Yes you have 2 options :<\/p>\n<p>1.heredocs please note that every data in heredocs are interpolated :<\/p>\n<pre><code>my $data =&lt;&lt;END \n\nyour data \n\nEND\n<\/code><\/pre>\n<p>2.qq() see for example :<\/p>\n<pre><code>print qq(\n HTML\n\n $your text\n\n BODY\n\n HTML\n);\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":147804,"reputation":10715,"user_id":359178,"user_type":"registered","accept_rate":78,"profile_image":"https:\/\/www.gravatar.com\/avatar\/0fc64917c061575ed136c21f4525d3ee?s=256&d=identicon&r=PG","display_name":"Juan A. Navarro","link":"https:\/\/stackoverflow.com\/users\/359178\/juan-a-navarro"},"is_accepted":false,"score":0,"last_activity_date":1276430603,"last_edit_date":1495540983.0,"creation_date":1276430603,"answer_id":3032152,"question_id":251705,"content_license":"CC BY-SA 3.0","body_markdown":"Consider using cpanminus, a suggested on [this other thread][1]\r\n\r\n[1]: https:\/\/stackoverflow.com\/questions\/2980297\/how-to-use-cpan-as-a-non-root-user","body":"<p>Consider using cpanminus, a suggested on <a href=\"https:\/\/stackoverflow.com\/questions\/2980297\/how-to-use-cpan-as-a-non-root-user\">this other thread<\/a><\/p>\n","community_owned_date":null},{"owner":{"account_id":725431,"reputation":11,"user_id":661056,"user_type":"unregistered","profile_image":"https:\/\/www.gravatar.com\/avatar\/c6bb8250b65b17b9a22e952f2e9aa0a1?s=256&d=identicon&r=PG","display_name":"Kilna","link":"https:\/\/stackoverflow.com\/users\/661056\/kilna"},"is_accepted":false,"score":0,"last_activity_date":1300209089,"last_edit_date":null,"creation_date":1300209089,"answer_id":5315345,"question_id":3214647,"content_license":"CC BY-SA 2.5","body_markdown":"I tend to use:\r\n\r\n     eval { $fh-&gt;can(&#39;readline&#39;) }\r\n\r\nOr can(&#39;print&#39;) in the case of handles I intend on writing to.  This is mostly because I really only want to deal with filehandles in an OO-way anyway, so this accurately resolves whether the target can do what I expect of it.  If you&#39;ve already checked for the $fh being defined, you can probably leave off the eval.","body":"<p>I tend to use:<\/p>\n\n<pre><code> eval { $fh-&gt;can('readline') }\n<\/code><\/pre>\n\n<p>Or can('print') in the case of handles I intend on writing to.  This is mostly because I really only want to deal with filehandles in an OO-way anyway, so this accurately resolves whether the target can do what I expect of it.  If you've already checked for the $fh being defined, you can probably leave off the eval.<\/p>\n","community_owned_date":null},{"owner":{"account_id":331275,"reputation":3837,"user_id":655855,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/9af5f2ed51b661aa814cc5633616caea?s=256&d=identicon&r=PG","display_name":"Shamit Verma","link":"https:\/\/stackoverflow.com\/users\/655855\/shamit-verma"},"is_accepted":false,"score":0,"last_activity_date":1300704656,"last_edit_date":null,"creation_date":1300704656,"answer_id":5376603,"question_id":5376559,"content_license":"CC BY-SA 2.5","body_markdown":"Perl is an interpreted language. However, it does compile internally into p-code for efficiency. ","body":"<p>Perl is an interpreted language. However, it does compile internally into p-code for efficiency. <\/p>\n","community_owned_date":null},{"owner":{"account_id":54377,"reputation":13414,"user_id":162684,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/6429c4c57020511596f869f7092bd7de?s=256&d=identicon&r=PG","display_name":"MarcoS","link":"https:\/\/stackoverflow.com\/users\/162684\/marcos"},"is_accepted":false,"score":0,"last_activity_date":1300704858,"last_edit_date":null,"creation_date":1300704858,"answer_id":5376636,"question_id":5376559,"content_license":"CC BY-SA 2.5","body_markdown":"From [Wikipedia][1]: &quot;Perl is a high-level, general-purpose, **interpreted**, dynamic programming language&quot;. Perl 6 allows also for compilation (again, see [Wikipedia][2]).\r\n\r\n\r\n  [1]: http:\/\/en.wikipedia.org\/wiki\/Perl\r\n  [2]: http:\/\/en.wikipedia.org\/wiki\/Perl_6","body":"<p>From <a href=\"http:\/\/en.wikipedia.org\/wiki\/Perl\" rel=\"nofollow\">Wikipedia<\/a>: \"Perl is a high-level, general-purpose, <strong>interpreted<\/strong>, dynamic programming language\". Perl 6 allows also for compilation (again, see <a href=\"http:\/\/en.wikipedia.org\/wiki\/Perl_6\" rel=\"nofollow\">Wikipedia<\/a>).<\/p>\n","community_owned_date":null},{"owner":{"account_id":359020,"reputation":4381,"user_id":700174,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/9bc39eca9e7c29cbf4536626b481a2f7?s=256&d=identicon&r=PG","display_name":"Sajid","link":"https:\/\/stackoverflow.com\/users\/700174\/sajid"},"is_accepted":false,"score":0,"last_activity_date":1302501827,"last_edit_date":null,"creation_date":1302501827,"answer_id":5617348,"question_id":5617314,"content_license":"CC BY-SA 3.0","body_markdown":"Like so:\r\n\r\n    if (&quot;2011-04-11 00:39:28,736::[main]::INFO (Main.java:73) Test.Main::main() Total Successful Transactions = 195&quot; =~ \/(\\d+)$\/) {\r\n        print $1;\r\n    }\r\n\r\nOnce you match, the matched groups become available as $1..$n.","body":"<p>Like so:<\/p>\n\n<pre><code>if (\"2011-04-11 00:39:28,736::[main]::INFO (Main.java:73) Test.Main::main() Total Successful Transactions = 195\" =~ \/(\\d+)$\/) {\n    print $1;\n}\n<\/code><\/pre>\n\n<p>Once you match, the matched groups become available as $1..$n.<\/p>\n","community_owned_date":null},{"owner":{"account_id":37811,"reputation":102465,"user_id":108205,"user_type":"registered","accept_rate":86,"profile_image":"https:\/\/www.gravatar.com\/avatar\/ef459127edc89cc575d80a73cd8c567a?s=256&d=identicon&r=PG","display_name":"jsbueno","link":"https:\/\/stackoverflow.com\/users\/108205\/jsbueno"},"is_accepted":false,"score":0,"last_activity_date":1328196399,"last_edit_date":null,"creation_date":1328196399,"answer_id":9114931,"question_id":9114402,"content_license":"CC BY-SA 3.0","body_markdown":"Non regexp, non duplicating string at each iteration solution:\r\n\r\n    def common_prefix(a, b):\r\n       #sort strings so that we loop on the shorter one\r\n       a, b = sorted((a,b), key=len)\r\n       for index, letter in a:\r\n          if letter != b[index]:\r\n              return a[:index - 1]\r\n       return a\r\n\r\n","body":"<p>Non regexp, non duplicating string at each iteration solution:<\/p>\n\n<pre><code>def common_prefix(a, b):\n   #sort strings so that we loop on the shorter one\n   a, b = sorted((a,b), key=len)\n   for index, letter in a:\n      if letter != b[index]:\n          return a[:index - 1]\n   return a\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":129490,"reputation":8285,"user_id":328115,"user_type":"registered","accept_rate":44,"profile_image":"https:\/\/www.gravatar.com\/avatar\/9a029d2d948f128443f996fa12b3d3a1?s=256&d=identicon&r=PG","display_name":"dolmen","link":"https:\/\/stackoverflow.com\/users\/328115\/dolmen"},"is_accepted":false,"score":0,"last_activity_date":1328203536,"last_edit_date":1328203536.0,"creation_date":1328202763,"answer_id":9116708,"question_id":9114402,"content_license":"CC BY-SA 3.0","body_markdown":"I second ruakh&#39;s answer for the regexp (with my suggested optimization in the comments). Simple to write, but not simple and efficient to run if the first string is long.\r\n\r\nHere is an efficient, non-regexp, readable, one-line answer:\r\n\r\n    $ perl -E &#39;($n,$l)=(0,length $ARGV[0]); while ($n &lt; $l) { $s = substr($ARGV[0], $n, 1); last if $s ne substr($ARGV[1], $n, 1); $n++ } say substr($ARGV[0], 0, $n)&#39; abce abcdef\r\n    abc","body":"<p>I second ruakh's answer for the regexp (with my suggested optimization in the comments). Simple to write, but not simple and efficient to run if the first string is long.<\/p>\n\n<p>Here is an efficient, non-regexp, readable, one-line answer:<\/p>\n\n<pre><code>$ perl -E '($n,$l)=(0,length $ARGV[0]); while ($n &lt; $l) { $s = substr($ARGV[0], $n, 1); last if $s ne substr($ARGV[1], $n, 1); $n++ } say substr($ARGV[0], 0, $n)' abce abcdef\nabc\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":307073,"reputation":749,"user_id":618177,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/242e679d375fad90f68a54ac098beb7f?s=256&d=identicon&r=PG","display_name":"Dale Gerdemann","link":"https:\/\/stackoverflow.com\/users\/618177\/dale-gerdemann"},"is_accepted":false,"score":0,"last_activity_date":1328264727,"last_edit_date":null,"creation_date":1328264727,"answer_id":9127095,"question_id":9114402,"content_license":"CC BY-SA 3.0","body_markdown":"Using extended regular expressions as in Foma or Xfst.\r\n\r\n    def range(x) x.l;\r\n    def longest(L) L - range(range(L \u2218 [[\u03a3:\u03b5]+ [\u03a3:a]*]) \u2218 [a:\u03a3]*); \r\n    def prefix(W) range(W \u2218 [\u03a3* \u03a3*:\u03b5]);\r\n    def lcp(A,B) longest(prefix(A) \u2229 prefix(B));\r\n\r\nThe hardest part here is to define &quot;longest&quot;. Generally speaking, to\r\noptimize, you construct the set of non\u2013optimal strings (worsening) and\r\nthen remove these (filtering).\r\n\r\nThis is really a purist approach, which avoids non-regular operations\r\nsuch a capturing. \r\n\r\n\r\n","body":"<p>Using extended regular expressions as in Foma or Xfst.<\/p>\n\n<pre><code>def range(x) x.l;\ndef longest(L) L - range(range(L \u2218 [[\u03a3:\u03b5]+ [\u03a3:a]*]) \u2218 [a:\u03a3]*); \ndef prefix(W) range(W \u2218 [\u03a3* \u03a3*:\u03b5]);\ndef lcp(A,B) longest(prefix(A) \u2229 prefix(B));\n<\/code><\/pre>\n\n<p>The hardest part here is to define \"longest\". Generally speaking, to\noptimize, you construct the set of non\u2013optimal strings (worsening) and\nthen remove these (filtering).<\/p>\n\n<p>This is really a purist approach, which avoids non-regular operations\nsuch a capturing. <\/p>\n","community_owned_date":null},{"owner":{"account_id":1335409,"reputation":1,"user_id":1278298,"user_type":"unregistered","profile_image":"https:\/\/www.gravatar.com\/avatar\/05dfd103abfe90d8d789f04287fa1f7c?s=256&d=identicon&r=PG","display_name":"santosh","link":"https:\/\/stackoverflow.com\/users\/1278298\/santosh"},"is_accepted":false,"score":0,"last_activity_date":1332197135,"last_edit_date":1332197135.0,"creation_date":1332151583,"answer_id":9768245,"question_id":863426,"content_license":"CC BY-SA 3.0","body_markdown":"    sub uniq {\r\n        return keys %{{ map { $_ =&gt; 1 } @_ }};\r\n    }\r\n    my @my_array = (&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;);\r\n    #print join(&quot; &quot;, @my_array), &quot;\\n&quot;;\r\n    my $a = join(&quot; &quot;, uniq(@my_array));\r\n    my @b = split(\/ \/,$a);\r\n    my $count = $#b;\r\n","body":"<pre><code>sub uniq {\n    return keys %{{ map { $_ =&gt; 1 } @_ }};\n}\nmy @my_array = (\"a\",\"a\",\"b\",\"b\",\"c\");\n#print join(\" \", @my_array), \"\\n\";\nmy $a = join(\" \", uniq(@my_array));\nmy @b = split(\/ \/,$a);\nmy $count = $#b;\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":1205702,"reputation":1443,"user_id":1175423,"user_type":"registered","accept_rate":50,"profile_image":"https:\/\/www.gravatar.com\/avatar\/e8a4d11ad72f9e3c92ae1cf128cdec99?s=256&d=identicon&r=PG","display_name":"Helen Craigman","link":"https:\/\/stackoverflow.com\/users\/1175423\/helen-craigman"},"is_accepted":false,"score":0,"last_activity_date":1346475828,"last_edit_date":null,"creation_date":1346475828,"answer_id":12225041,"question_id":12212827,"content_license":"CC BY-SA 3.0","body_markdown":"Google claims that Perl is supported by the &quot;Scripting Layer for Android&quot; (SL4A). \r\n\r\nSee here: http:\/\/code.google.com\/p\/android-scripting\/\r\n\r\nand a Perl apk: http:\/\/code.google.com\/p\/android-scripting\/downloads\/detail?name=perl_for_android_r1.apk","body":"<p>Google claims that Perl is supported by the \"Scripting Layer for Android\" (SL4A). <\/p>\n\n<p>See here: <a href=\"http:\/\/code.google.com\/p\/android-scripting\/\" rel=\"nofollow\">http:\/\/code.google.com\/p\/android-scripting\/<\/a><\/p>\n\n<p>and a Perl apk: <a href=\"http:\/\/code.google.com\/p\/android-scripting\/downloads\/detail?name=perl_for_android_r1.apk\" rel=\"nofollow\">http:\/\/code.google.com\/p\/android-scripting\/downloads\/detail?name=perl_for_android_r1.apk<\/a><\/p>\n","community_owned_date":null},{"owner":{"account_id":2720,"reputation":3516,"user_id":3825,"user_type":"registered","accept_rate":67,"profile_image":"https:\/\/www.gravatar.com\/avatar\/a3d541b7041e32ca337f743237626bf1?s=256&d=identicon&r=PG","display_name":"ShoeLace","link":"https:\/\/stackoverflow.com\/users\/3825\/shoelace"},"is_accepted":false,"score":0,"last_activity_date":1352244719,"last_edit_date":null,"creation_date":1352244719,"answer_id":13261096,"question_id":1917261,"content_license":"CC BY-SA 3.0","body_markdown":"i like doing things like..\r\n\r\n`require Win32::Console::ANSI if ( $^O eq &quot;MSWin32&quot; );`","body":"<p>i like doing things like..<\/p>\n\n<p><code>require Win32::Console::ANSI if ( $^O eq \"MSWin32\" );<\/code><\/p>\n","community_owned_date":null},{"owner":{"account_id":61464,"reputation":41219,"user_id":183181,"user_type":"registered","accept_rate":81,"profile_image":"https:\/\/www.gravatar.com\/avatar\/f6642797870d2dd20e4a5c8df347562c?s=256&d=identicon&r=PG","display_name":"vol7ron","link":"https:\/\/stackoverflow.com\/users\/183181\/vol7ron"},"is_accepted":false,"score":0,"last_activity_date":1370987263,"last_edit_date":1370987263.0,"creation_date":1370984563,"answer_id":17053763,"question_id":17053666,"content_license":"CC BY-SA 3.0","body_markdown":"Another alternative is to use an anonymous subroutine.  \r\n***Note:** I don&#39;t recommend this method because of the added scoping complexity (see note below); it is just for completeness of possible answers.*\r\n\r\n    if( $true_condition ){\r\n       (sub{\r\n           return if $true_condition;\r\n           ...\r\n       })-&gt;();\r\n    }\r\n\r\n\r\n***Note:** any variables declared w\/in the routine must use `our` instead of `my` if you wish to use them in the rest of the code.*","body":"<p>Another alternative is to use an anonymous subroutine.<br>\n<strong><em>Note:<\/strong> I don't recommend this method because of the added scoping complexity (see note below); it is just for completeness of possible answers.<\/em><\/p>\n\n<pre><code>if( $true_condition ){\n   (sub{\n       return if $true_condition;\n       ...\n   })-&gt;();\n}\n<\/code><\/pre>\n\n<p><em><strong>Note:<\/strong> any variables declared w\/in the routine must use <code>our<\/code> instead of <code>my<\/code> if you wish to use them in the rest of the code.<\/em><\/p>\n","community_owned_date":null},{"owner":{"account_id":3082750,"reputation":5,"user_id":2610637,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/e5d5e5a8d42af6fb0cd7106bbabc6dbb?s=256&d=identicon&r=PG","display_name":"asenxu08","link":"https:\/\/stackoverflow.com\/users\/2610637\/asenxu08"},"is_accepted":false,"score":0,"last_activity_date":1407173919,"last_edit_date":1407173919.0,"creation_date":1380373553,"answer_id":19067290,"question_id":17332808,"content_license":"CC BY-SA 3.0","body_markdown":"You can try &quot;^&quot; operator.\r\n\r\n    my $str  = &#39;500&#39;;\r\n    my $num  = 500;\r\n\r\n    if ($num ^ $num)\r\n    {\r\n        print &#39;haha\\n&#39;;\r\n    }\r\n\r\n    if ($str ^ $str)\r\n    {\r\n        print &#39;hehe\\n&#39;;\r\n    }\r\n\r\n$str ^ $str is different from $num ^ $num so you will get &quot;hehe&quot;.\r\nps, &quot;^&quot; will change the arguments, so you should do \r\n\r\n    my $temp = $str;\r\n    if ($temp ^ $temp )\r\n    {\r\n        print &#39;hehe\\n&#39;;\r\n    }\r\n.\r\nI usually use this operator to tell the difference between num and str in perl.\r\n","body":"<p>You can try \"^\" operator.<\/p>\n\n<pre><code>my $str  = '500';\nmy $num  = 500;\n\nif ($num ^ $num)\n{\n    print 'haha\\n';\n}\n\nif ($str ^ $str)\n{\n    print 'hehe\\n';\n}\n<\/code><\/pre>\n\n<p>$str ^ $str is different from $num ^ $num so you will get \"hehe\".\nps, \"^\" will change the arguments, so you should do <\/p>\n\n<pre><code>my $temp = $str;\nif ($temp ^ $temp )\n{\n    print 'hehe\\n';\n}\n<\/code><\/pre>\n\n<p>.\nI usually use this operator to tell the difference between num and str in perl.<\/p>\n","community_owned_date":null},{"owner":{"account_id":4554972,"reputation":1,"user_id":3698954,"user_type":"unregistered","profile_image":"https:\/\/www.gravatar.com\/avatar\/787479819d2a46bf767e1e1a556ccdb6?s=256&d=identicon&r=PG","display_name":"Pramod S. Deshmukh","link":"https:\/\/stackoverflow.com\/users\/3698954\/pramod-s-deshmukh"},"is_accepted":false,"score":0,"last_activity_date":1452961021,"last_edit_date":1452961021.0,"creation_date":1401704813,"answer_id":23992365,"question_id":2527170,"content_license":"CC BY-SA 3.0","body_markdown":"Perl is very easy to learn as compared to other languages. It can fully exploit the biological data which is becoming the big data. It can manipulate big data and perform good for manipulation data curation and all type of DNA programming, automation of biology has become easy due languages like Perl, Python and [Ruby][1]. It is very easy for those who are knowing biology, but not knowing how to program that in other programming languages.\r\n\r\n  [1]: http:\/\/en.wikipedia.org\/wiki\/Ruby_%28programming_language%29\r\n","body":"<p>Perl is very easy to learn as compared to other languages. It can fully exploit the biological data which is becoming the big data. It can manipulate big data and perform good for manipulation data curation and all type of DNA programming, automation of biology has become easy due languages like Perl, Python and <a href=\"http:\/\/en.wikipedia.org\/wiki\/Ruby_%28programming_language%29\" rel=\"nofollow\">Ruby<\/a>. It is very easy for those who are knowing biology, but not knowing how to program that in other programming languages.<\/p>\n","community_owned_date":null},{"owner":{"account_id":94344,"reputation":21325,"user_id":257635,"user_type":"registered","accept_rate":89,"profile_image":"https:\/\/i.stack.imgur.com\/El2tc.jpg?s=256&g=1","display_name":"Chankey Pathak","link":"https:\/\/stackoverflow.com\/users\/257635\/chankey-pathak"},"is_accepted":false,"score":0,"last_activity_date":1402544323,"last_edit_date":null,"creation_date":1402544323,"answer_id":24176076,"question_id":24176033,"content_license":"CC BY-SA 3.0","body_markdown":"Use the `Log Parser Plugin` for Jenkins. Read the [page number 24 here][1] for the configuration and other details.\r\n\r\n\r\n  [1]: http:\/\/www.packtpub.com\/sites\/default\/files\/9781849517409-Chapter-01.pdf","body":"<p>Use the <code>Log Parser Plugin<\/code> for Jenkins. Read the <a href=\"http:\/\/www.packtpub.com\/sites\/default\/files\/9781849517409-Chapter-01.pdf\" rel=\"nofollow\">page number 24 here<\/a> for the configuration and other details.<\/p>\n","community_owned_date":null},{"owner":{"account_id":1192862,"reputation":974,"user_id":1165262,"user_type":"registered","accept_rate":60,"profile_image":"https:\/\/www.gravatar.com\/avatar\/2bb3dcbb60d53a71f7171bad32aac7b1?s=256&d=identicon&r=PG","display_name":"Louis Strous","link":"https:\/\/stackoverflow.com\/users\/1165262\/louis-strous"},"is_accepted":false,"score":0,"last_activity_date":1415265391,"last_edit_date":null,"creation_date":1415265391,"answer_id":26775608,"question_id":17053666,"content_license":"CC BY-SA 3.0","body_markdown":"I tend to use sequential if-statements based on a &quot;do I continue?&quot; variable instead.  Your\r\n\r\n    if ( $condition1 ) {\r\n      blah, blah, blah;\r\n      if ( not $condition2 ) {\r\n         blah, blah, blah;\r\n         if ( not $condition3 ) {\r\n            blah, blah, blah;\r\n         }\r\n      }\r\n    }\r\n\r\ncan be rearranged to\r\n\r\n    my $ok = $condition1;\r\n    if ($ok) {\r\n      blah, blah, blah;\r\n      $ok = not $condition2;\r\n    }\r\n    if ($ok) {\r\n      blah, blah, blah;\r\n      $ok = not $condition3;\r\n    }\r\n    if ($ok) {\r\n      blah, blah, blah;\r\n    }\r\n\r\n","body":"<p>I tend to use sequential if-statements based on a \"do I continue?\" variable instead.  Your<\/p>\n\n<pre><code>if ( $condition1 ) {\n  blah, blah, blah;\n  if ( not $condition2 ) {\n     blah, blah, blah;\n     if ( not $condition3 ) {\n        blah, blah, blah;\n     }\n  }\n}\n<\/code><\/pre>\n\n<p>can be rearranged to<\/p>\n\n<pre><code>my $ok = $condition1;\nif ($ok) {\n  blah, blah, blah;\n  $ok = not $condition2;\n}\nif ($ok) {\n  blah, blah, blah;\n  $ok = not $condition3;\n}\nif ($ok) {\n  blah, blah, blah;\n}\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":49807,"reputation":2826,"user_id":148439,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/c54af4ed197ff4036ac637330d3c0a92?s=256&d=identicon&r=PG","display_name":"shuckc","link":"https:\/\/stackoverflow.com\/users\/148439\/shuckc"},"is_accepted":false,"score":0,"last_activity_date":1415728899,"last_edit_date":1415728899.0,"creation_date":1415728239,"answer_id":26871199,"question_id":2616865,"content_license":"CC BY-SA 3.0","body_markdown":"Sample with recursive modify and delete both done by find. Works on e.g. mingw git bash on windows.\r\n\r\n    $ find . -name &quot;*.xml&quot; -print0 | xargs -0 perl -p -i.bak -e &#39;s#\\s*&lt;property name=&quot;blah&quot; value=&quot;false&quot; \/&gt;\\s*##g&#39;\r\n    $ find . -name &quot;*.bak&quot; -print0 | xargs -0 rm\r\n\r\n  \r\nBinary terminated values passed between find\/xargs to handle spaces. Unusual s\/ prefix to avoid mangling xml in search term. This assumes you didn&#39;t have any `.bak` files hanging around to begin.","body":"<p>Sample with recursive modify and delete both done by find. Works on e.g. mingw git bash on windows.<\/p>\n\n<pre><code>$ find . -name \"*.xml\" -print0 | xargs -0 perl -p -i.bak -e 's#\\s*&lt;property name=\"blah\" value=\"false\" \/&gt;\\s*##g'\n$ find . -name \"*.bak\" -print0 | xargs -0 rm\n<\/code><\/pre>\n\n<p>Binary terminated values passed between find\/xargs to handle spaces. Unusual s\/ prefix to avoid mangling xml in search term. This assumes you didn't have any <code>.bak<\/code> files hanging around to begin.<\/p>\n","community_owned_date":null},{"owner":{"account_id":4528276,"reputation":67284,"user_id":3679490,"user_type":"registered","accept_rate":81,"profile_image":"https:\/\/www.gravatar.com\/avatar\/3be6ee7c2fecdde6b1d1168e3e44f49b?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"vks","link":"https:\/\/stackoverflow.com\/users\/3679490\/vks"},"is_accepted":false,"score":0,"last_activity_date":1638820351,"last_edit_date":1638820351.0,"creation_date":1417143708,"answer_id":27181306,"question_id":27179991,"content_license":"CC BY-SA 4.0","body_markdown":"    ^(?:(?!abc:|defg:).)*$\r\n\r\nTry this. See the demo at *http:\/\/regex101.com\/r\/hQ9xT1\/18*.\r\n\r\n\r\n","body":"<pre><code>^(?:(?!abc:|defg:).)*$\n<\/code><\/pre>\n<p>Try this. See the demo at <em><a href=\"http:\/\/regex101.com\/r\/hQ9xT1\/18\" rel=\"nofollow noreferrer\">http:\/\/regex101.com\/r\/hQ9xT1\/18<\/a><\/em>.<\/p>\n","community_owned_date":null},{"owner":{"account_id":2981437,"reputation":3084,"user_id":2531314,"user_type":"registered","accept_rate":58,"profile_image":"https:\/\/i.stack.imgur.com\/ZXzBn.png?s=256&g=1","display_name":"blackSmith","link":"https:\/\/stackoverflow.com\/users\/2531314\/blacksmith"},"is_accepted":false,"score":0,"last_activity_date":1638820367,"last_edit_date":1638820367.0,"creation_date":1417150558,"answer_id":27182144,"question_id":27179991,"content_license":"CC BY-SA 4.0","body_markdown":"This will do the task:\r\n\r\n    ^(?!(defg|abc):).*\r\n","body":"<p>This will do the task:<\/p>\n<pre><code>^(?!(defg|abc):).*\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":5330728,"reputation":2591,"user_id":4251338,"user_type":"registered","accept_rate":90,"profile_image":"https:\/\/i.stack.imgur.com\/UNbCO.png?s=256&g=1","display_name":"ssr1012","link":"https:\/\/stackoverflow.com\/users\/4251338\/ssr1012"},"is_accepted":false,"score":0,"last_activity_date":1417152725,"last_edit_date":null,"creation_date":1417152725,"answer_id":27182486,"question_id":27179991,"content_license":"CC BY-SA 3.0","body_markdown":"Could you please try this:\r\n\r\n    use strict;\r\n    use warnings;\r\n    use Cwd;\r\n    \r\n    while(&lt;DATA&gt;)\r\n    {\r\n\t    my $line=$_;\r\n\t    print $line unless($line=~m\/^(abc|defg*)\/m);\r\n    }\r\n    \r\n    __DATA__\r\n    ebc this is testing ebc\r\n    dbc this is testing dbc\r\n    defg this is testing defg\r\n    abc this is testing abc\r\n    defg this is testing defg\r\n","body":"<p>Could you please try this:<\/p>\n\n<pre><code>use strict;\nuse warnings;\nuse Cwd;\n\nwhile(&lt;DATA&gt;)\n{\n    my $line=$_;\n    print $line unless($line=~m\/^(abc|defg*)\/m);\n}\n\n__DATA__\nebc this is testing ebc\ndbc this is testing dbc\ndefg this is testing defg\nabc this is testing abc\ndefg this is testing defg\n<\/code><\/pre>\n","community_owned_date":null}]
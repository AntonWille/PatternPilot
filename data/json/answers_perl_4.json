[{"owner":{"account_id":113371,"reputation":100018,"user_id":298607,"user_type":"registered","accept_rate":88,"profile_image":"https:\/\/i.stack.imgur.com\/DVW9g.jpg?s=256&g=1","display_name":"dawg","link":"https:\/\/stackoverflow.com\/users\/298607\/dawg"},"is_accepted":false,"score":5,"last_activity_date":1279207354,"last_edit_date":1279207354.0,"creation_date":1279157627,"answer_id":3251869,"question_id":3251495,"content_license":"CC BY-SA 2.5","body_markdown":"To produce the output in your comment to your post, this will do it:\r\n\r\n    use strict;\r\n    use warnings;\r\n    \r\n    my @other_array = (0,0,0,1,2,2,3,3,3,4);\r\n    my @array;\r\n    my %uniqs;\r\n    \r\n    $uniqs{$_}++ for @other_array;\r\n    \r\n    foreach (keys %uniqs) { $array[$_]=$uniqs{$_} }\r\n\r\n    print &quot;array[$_] = $array[$_]\\n&quot; for (0..$#array);\r\n\r\nOutput:\r\n \r\n\r\n       array[0] = 3\r\n       array[1] = 1\r\n       array[2] = 2\r\n       array[3] = 3\r\n       array[4] = 1\r\n\r\n\r\nThis is different than your stated algorithm of producing a parallel array with zero values, but it is a more Perly way of doing it...\r\n\r\nIf you must have a parallel array that is the same size as your first array with the elements initialized to 0, this statement will dynamically do it: `@array=(0) x scalar(@other_array);` but really, you don&#39;t need to do that.\r\n","body":"<p>To produce the output in your comment to your post, this will do it:<\/p>\n\n<pre><code>use strict;\nuse warnings;\n\nmy @other_array = (0,0,0,1,2,2,3,3,3,4);\nmy @array;\nmy %uniqs;\n\n$uniqs{$_}++ for @other_array;\n\nforeach (keys %uniqs) { $array[$_]=$uniqs{$_} }\n\nprint \"array[$_] = $array[$_]\\n\" for (0..$#array);\n<\/code><\/pre>\n\n<p>Output:<\/p>\n\n<pre><code>   array[0] = 3\n   array[1] = 1\n   array[2] = 2\n   array[3] = 3\n   array[4] = 1\n<\/code><\/pre>\n\n<p>This is different than your stated algorithm of producing a parallel array with zero values, but it is a more Perly way of doing it...<\/p>\n\n<p>If you must have a parallel array that is the same size as your first array with the elements initialized to 0, this statement will dynamically do it: <code>@array=(0) x scalar(@other_array);<\/code> but really, you don't need to do that.<\/p>\n","community_owned_date":null},{"owner":{"account_id":6660,"reputation":29680,"user_id":11289,"user_type":"registered","accept_rate":75,"profile_image":"https:\/\/www.gravatar.com\/avatar\/a82922f943c2ed9dac3f2b00343a6a3b?s=256&d=identicon&r=PG","display_name":"Axeman","link":"https:\/\/stackoverflow.com\/users\/11289\/axeman"},"is_accepted":false,"score":5,"last_activity_date":1284756283,"last_edit_date":1284756283.0,"creation_date":1284755947,"answer_id":3738859,"question_id":3738836,"content_license":"CC BY-SA 2.5","body_markdown":"If you don&#39;t care whether or not it&#39;s empty, it is. Otherwise you can check\r\n\r\n    if ( length( $str || &#39;&#39; )) {}","body":"<p>If you don't care whether or not it's empty, it is. Otherwise you can check<\/p>\n\n<pre><code>if ( length( $str || '' )) {}\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":48394,"reputation":2577,"user_id":143791,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/d217cd72c930f7f2cee06e5954c7b101?s=256&d=identicon&r=PG","display_name":"Joe","link":"https:\/\/stackoverflow.com\/users\/143791\/joe"},"is_accepted":false,"score":5,"last_activity_date":1285353908,"last_edit_date":null,"creation_date":1285353908,"answer_id":3789996,"question_id":3789284,"content_license":"CC BY-SA 2.5","body_markdown":"I&#39;ve always used `isa`, but if the thing being tested isn&#39;t an object (or might not be an object), you need to call it as the function `UNIVERSAL::isa` :\r\n\r\n    if ( UNIVERSAL::isa( $var, &#39;HASH&#39; ) ) { ... }\r\n\r\n","body":"<p>I've always used <code>isa<\/code>, but if the thing being tested isn't an object (or might not be an object), you need to call it as the function <code>UNIVERSAL::isa<\/code> :<\/p>\n\n<pre><code>if ( UNIVERSAL::isa( $var, 'HASH' ) ) { ... }\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":667396,"reputation":51,"user_id":502597,"user_type":"unregistered","profile_image":"https:\/\/www.gravatar.com\/avatar\/e8824a1ba1f6de93b877ca86f3e91f08?s=256&d=identicon&r=PG","display_name":"Rob Prentice","link":"https:\/\/stackoverflow.com\/users\/502597\/rob-prentice"},"is_accepted":false,"score":5,"last_activity_date":1289348923,"last_edit_date":null,"creation_date":1289348923,"answer_id":4140155,"question_id":613364,"content_license":"CC BY-SA 2.5","body_markdown":"This original answer is correct, but does not perhaps explain the situation\r\nin a practical sense.\r\n\r\n&gt;There exist static analysis tools for Python, but compile time checks tend to be &gt;diametrically opposed to the run-time binding philosophy that Python embraces.\r\n\r\nWhat &#39;use strict&#39; provides in Perl is the ability to ensure that a mis-spelled\r\nor variable name is (usually) caught at compile-time. This does improve code\r\nreliability, and speeds up development. But in order to make such a thing worthwhile,\r\nyou need to declare variables. And Python style seems to discourage that.\r\n\r\nSo in Python, you never find out about a mis-spelled variable until you notice at\r\nrun-time that the assignment you thought you made is not being made, or that an\r\nexpression seems to resolve to an unexpected value. Catching such errors can be\r\ntime-consuming, especially as programs get large, and as people are forced to maintain\r\ncode developed by others.\r\n\r\nJava and C\/C++ take it a step further, with type checking. The motivation is practical,\r\nrather than philosophical. How can you catch as many errors as possible as soon as possible, and be sure that you eliminate all of them before releasing code to production?\r\nEach language seems to take a particular strategy and run with it, based upon what they\r\nthink is important. In a language like Perl, where run-time binding isn&#39;t supported,\r\nit makes sense to take advantage of &#39;use strict&#39; to make development easier.","body":"<p>This original answer is correct, but does not perhaps explain the situation\nin a practical sense.<\/p>\n\n<blockquote>\n  <p>There exist static analysis tools for Python, but compile time checks tend to be >diametrically opposed to the run-time binding philosophy that Python embraces.<\/p>\n<\/blockquote>\n\n<p>What 'use strict' provides in Perl is the ability to ensure that a mis-spelled\nor variable name is (usually) caught at compile-time. This does improve code\nreliability, and speeds up development. But in order to make such a thing worthwhile,\nyou need to declare variables. And Python style seems to discourage that.<\/p>\n\n<p>So in Python, you never find out about a mis-spelled variable until you notice at\nrun-time that the assignment you thought you made is not being made, or that an\nexpression seems to resolve to an unexpected value. Catching such errors can be\ntime-consuming, especially as programs get large, and as people are forced to maintain\ncode developed by others.<\/p>\n\n<p>Java and C\/C++ take it a step further, with type checking. The motivation is practical,\nrather than philosophical. How can you catch as many errors as possible as soon as possible, and be sure that you eliminate all of them before releasing code to production?\nEach language seems to take a particular strategy and run with it, based upon what they\nthink is important. In a language like Perl, where run-time binding isn't supported,\nit makes sense to take advantage of 'use strict' to make development easier.<\/p>\n","community_owned_date":null},{"owner":{"account_id":6292,"reputation":5329,"user_id":10523,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/i.stack.imgur.com\/b9gvd.jpg?s=256&g=1","display_name":"Tomasz","link":"https:\/\/stackoverflow.com\/users\/10523\/tomasz"},"is_accepted":false,"score":5,"last_activity_date":1523231555,"last_edit_date":1523231555.0,"creation_date":1296491677,"answer_id":4853410,"question_id":4669670,"content_license":"CC BY-SA 3.0","body_markdown":"    use WWW::Mechanize;\r\n    \r\n    my $url = &#39;marinetraffic2.aegean.gr\/ais\/getkml.aspx&#39;;\r\n    my $local_file_name = &#39;getkml.aspx&#39;;\r\n    \r\n    my $mech = WWW::Mechanize-&gt;new;\r\n\r\n    $mech-&gt;get( $url, &quot;:content_file&quot; =&gt; $local_file_name );\r\n\r\nThis in fact wraps around the `LWP::UserAgent-&gt;get`.\r\n\r\nMore details can be found at [WWW::Mechanize docs page](http:\/\/search.cpan.org\/dist\/WWW-Mechanize\/lib\/WWW\/Mechanize.pm#$mech-%3Eget(_$uri_)).","body":"<pre><code>use WWW::Mechanize;\n\nmy $url = 'marinetraffic2.aegean.gr\/ais\/getkml.aspx';\nmy $local_file_name = 'getkml.aspx';\n\nmy $mech = WWW::Mechanize-&gt;new;\n\n$mech-&gt;get( $url, \":content_file\" =&gt; $local_file_name );\n<\/code><\/pre>\n\n<p>This in fact wraps around the <code>LWP::UserAgent-&gt;get<\/code>.<\/p>\n\n<p>More details can be found at <a href=\"http:\/\/search.cpan.org\/dist\/WWW-Mechanize\/lib\/WWW\/Mechanize.pm#$mech-%3Eget(_$uri_)\" rel=\"nofollow noreferrer\">WWW::Mechanize docs page<\/a>.<\/p>\n","community_owned_date":null},{"owner":{"account_id":153395,"reputation":105635,"user_id":368630,"user_type":"registered","accept_rate":83,"profile_image":"https:\/\/www.gravatar.com\/avatar\/107085826cfbb2700f535417a12c89cb?s=256&d=identicon&r=PG","display_name":"David W.","link":"https:\/\/stackoverflow.com\/users\/368630\/david-w"},"is_accepted":false,"score":5,"last_activity_date":1299692659,"last_edit_date":null,"creation_date":1299692659,"answer_id":5249925,"question_id":5249362,"content_license":"CC BY-SA 2.5","body_markdown":"As others have stated, you have to dereference the reference. The `keys` function requires that its argument starts with a _%_:\r\n\r\nMy preference:\r\n\r\n    foreach my $key (keys %{$ad_grp_ref}) {\r\n\r\nAccording to [Conway](http:\/\/www.amazon.com\/gp\/product\/0596001738):\r\n\r\n    foreach my $key (keys %{ $ad_grp_ref }) {\r\n\r\nGuess who you should listen to...\r\n\r\nYou might want to read through the [Perl Reference Documentation](http:\/\/perldoc.perl.org\/perlref.html). \r\n\r\nIf you find yourself doing a lot of stuff with references to hashes and hashes of lists and lists of hashes, you might want to start thinking about using [Object Oriented Perl](http:\/\/perldoc.perl.org\/perlobj.html). There&#39;s [a lot of nice little tutorials](http:\/\/perldoc.perl.org\/index-tutorials.html) in the Perl documentation.","body":"<p>As others have stated, you have to dereference the reference. The <code>keys<\/code> function requires that its argument starts with a <em>%<\/em>:<\/p>\n\n<p>My preference:<\/p>\n\n<pre><code>foreach my $key (keys %{$ad_grp_ref}) {\n<\/code><\/pre>\n\n<p>According to <a href=\"https:\/\/rads.stackoverflow.com\/amzn\/click\/com\/0596001738\" rel=\"noreferrer\" rel=\"nofollow noreferrer\">Conway<\/a>:<\/p>\n\n<pre><code>foreach my $key (keys %{ $ad_grp_ref }) {\n<\/code><\/pre>\n\n<p>Guess who you should listen to...<\/p>\n\n<p>You might want to read through the <a href=\"http:\/\/perldoc.perl.org\/perlref.html\" rel=\"noreferrer\">Perl Reference Documentation<\/a>. <\/p>\n\n<p>If you find yourself doing a lot of stuff with references to hashes and hashes of lists and lists of hashes, you might want to start thinking about using <a href=\"http:\/\/perldoc.perl.org\/perlobj.html\" rel=\"noreferrer\">Object Oriented Perl<\/a>. There's <a href=\"http:\/\/perldoc.perl.org\/index-tutorials.html\" rel=\"noreferrer\">a lot of nice little tutorials<\/a> in the Perl documentation.<\/p>\n","community_owned_date":null},{"owner":{"account_id":9417,"reputation":96497,"user_id":17389,"user_type":"registered","accept_rate":38,"profile_image":"https:\/\/www.gravatar.com\/avatar\/cd06d1314817ce946ab796af8750b56a?s=256&d=identicon&r=PG","display_name":"ysth","link":"https:\/\/stackoverflow.com\/users\/17389\/ysth"},"is_accepted":false,"score":5,"last_activity_date":1303373242,"last_edit_date":1303373242.0,"creation_date":1303372593,"answer_id":5741189,"question_id":5741042,"content_license":"CC BY-SA 3.0","body_markdown":"(Note that `use warnings` is even more important than `use strict`.)\r\n\r\n`@_` itself isn&#39;t a reference to anything, it is an array (really, just a view of the stack, though if you do something like take a reference to it, it morphs into a real array) whose *elements* each are an alias to a passed parameter.  And those passed parameters are the individual scalars passed; there is no concept of passing an array or hash (though you can pass a reference to one).\r\n\r\nSo shifts, splices, additional elements added, etc. to `@_` don&#39;t affect anything passed, though they may change the index of or remove from the array one of the original aliases.\r\n\r\nSo where you call `change(@a)`, this puts two aliases on the stack, one to `$a[0]` and one to `$a[1]`.  `change(%a)` is more complicated; `%a` flattens out into an alternating list of keys and values, where the values are the actual hash values and modifying them modifies what&#39;s stored in the hash, but where the keys are merely copies, no longer associated with the hash.","body":"<p>(Note that <code>use warnings<\/code> is even more important than <code>use strict<\/code>.)<\/p>\n\n<p><code>@_<\/code> itself isn't a reference to anything, it is an array (really, just a view of the stack, though if you do something like take a reference to it, it morphs into a real array) whose <em>elements<\/em> each are an alias to a passed parameter.  And those passed parameters are the individual scalars passed; there is no concept of passing an array or hash (though you can pass a reference to one).<\/p>\n\n<p>So shifts, splices, additional elements added, etc. to <code>@_<\/code> don't affect anything passed, though they may change the index of or remove from the array one of the original aliases.<\/p>\n\n<p>So where you call <code>change(@a)<\/code>, this puts two aliases on the stack, one to <code>$a[0]<\/code> and one to <code>$a[1]<\/code>.  <code>change(%a)<\/code> is more complicated; <code>%a<\/code> flattens out into an alternating list of keys and values, where the values are the actual hash values and modifying them modifies what's stored in the hash, but where the keys are merely copies, no longer associated with the hash.<\/p>\n","community_owned_date":null},{"owner":{"account_id":104636,"reputation":581024,"user_id":279627,"user_type":"registered","accept_rate":82,"profile_image":"https:\/\/www.gravatar.com\/avatar\/2dceea858ad8f1577bec6ddaa0485d15?s=256&d=identicon&r=PG","display_name":"Sven Marnach","link":"https:\/\/stackoverflow.com\/users\/279627\/sven-marnach"},"is_accepted":false,"score":5,"last_activity_date":1304349395,"last_edit_date":null,"creation_date":1304349395,"answer_id":5858911,"question_id":5858877,"content_license":"CC BY-SA 3.0","body_markdown":"The most important advantage of POSIX shell scripts over Python or Perl scripts is that a POSIX shell is available on virtually every Unix machine.  (There are also a few tasks shell scripts happen to be slightly more convenient for, but that&#39;s not a major issue.)  If the portability is not an issue for you, I don&#39;t see much need to learn shell scripting.","body":"<p>The most important advantage of POSIX shell scripts over Python or Perl scripts is that a POSIX shell is available on virtually every Unix machine.  (There are also a few tasks shell scripts happen to be slightly more convenient for, but that's not a major issue.)  If the portability is not an issue for you, I don't see much need to learn shell scripting.<\/p>\n","community_owned_date":null},{"owner":{"account_id":1678320,"reputation":1582,"user_id":1543290,"user_type":"registered","accept_rate":50,"profile_image":"https:\/\/www.gravatar.com\/avatar\/1c4699e8345431a6b80f1e2f2a6f9ca5?s=256&d=identicon&r=PG","display_name":"Zvika","link":"https:\/\/stackoverflow.com\/users\/1543290\/zvika"},"is_accepted":false,"score":5,"last_activity_date":1396759542,"last_edit_date":1396759542.0,"creation_date":1365945827,"answer_id":15999550,"question_id":487213,"content_license":"CC BY-SA 3.0","body_markdown":"(Actually it&#39;s not an answer, but a comment - however, I cannot comment...)\r\n\r\nXML::Simple has been mentioned here. &lt;BR&gt;\r\n(I know it&#39;s few from few years ago, but this appeared up in Google today...)\r\n\r\nHowever, it&#39;s site (http:\/\/metacpan.org\/pod\/XML::Simple) now says:\r\n\r\nSTATUS OF THIS MODULE \r\n\r\nThe use of this module in new code is discouraged. Other modules are available which provide more straightforward and consistent interfaces. In particular, XML::LibXML is highly recommended.\r\n\r\nThe major problems with this module are the large number of options and the arbitrary ways in which these options interact - often with unexpected results.\r\n\r\nPatches with bug fixes and documentation fixes are welcome, but new features are unlikely to be added.","body":"<p>(Actually it's not an answer, but a comment - however, I cannot comment...)<\/p>\n\n<p>XML::Simple has been mentioned here. <BR>\n(I know it's few from few years ago, but this appeared up in Google today...)<\/p>\n\n<p>However, it's site (<a href=\"http:\/\/metacpan.org\/pod\/XML::Simple\" rel=\"nofollow\">http:\/\/metacpan.org\/pod\/XML::Simple<\/a>) now says:<\/p>\n\n<p>STATUS OF THIS MODULE <\/p>\n\n<p>The use of this module in new code is discouraged. Other modules are available which provide more straightforward and consistent interfaces. In particular, XML::LibXML is highly recommended.<\/p>\n\n<p>The major problems with this module are the large number of options and the arbitrary ways in which these options interact - often with unexpected results.<\/p>\n\n<p>Patches with bug fixes and documentation fixes are welcome, but new features are unlikely to be added.<\/p>\n","community_owned_date":null},{"owner":{"account_id":268092,"reputation":2614,"user_id":556644,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/i.stack.imgur.com\/2pQJ6.jpg?s=256&g=1","display_name":"Ross Attrill","link":"https:\/\/stackoverflow.com\/users\/556644\/ross-attrill"},"is_accepted":false,"score":5,"last_activity_date":1376277409,"last_edit_date":1376277409.0,"creation_date":1376096157,"answer_id":18157628,"question_id":537078,"content_license":"CC BY-SA 3.0","body_markdown":"As per my comment above, I think it would be great if there was an IntelliJ plugin for Perl 5.  \r\n\r\nPlease vote for this feature request here: http:\/\/plugins.jetbrains.com\/wishlist\/show?pr=&amp;wid=368 and here: http:\/\/youtrack.jetbrains.com\/issue\/IDEA-109346 and we might get one.","body":"<p>As per my comment above, I think it would be great if there was an IntelliJ plugin for Perl 5.  <\/p>\n\n<p>Please vote for this feature request here: <a href=\"http:\/\/plugins.jetbrains.com\/wishlist\/show?pr=&amp;wid=368\">http:\/\/plugins.jetbrains.com\/wishlist\/show?pr=&amp;wid=368<\/a> and here: <a href=\"http:\/\/youtrack.jetbrains.com\/issue\/IDEA-109346\">http:\/\/youtrack.jetbrains.com\/issue\/IDEA-109346<\/a> and we might get one.<\/p>\n","community_owned_date":null},{"owner":{"account_id":1046173,"reputation":7270,"user_id":1051115,"user_type":"registered","accept_rate":85,"profile_image":"https:\/\/www.gravatar.com\/avatar\/b37fdf7928b7aecd15a973b250979333?s=256&d=identicon&r=PG","display_name":"Krazy Glew","link":"https:\/\/stackoverflow.com\/users\/1051115\/krazy-glew"},"is_accepted":false,"score":5,"last_activity_date":1474790159,"last_edit_date":1474790159.0,"creation_date":1474416769,"answer_id":39605597,"question_id":2876091,"content_license":"CC BY-SA 3.0","body_markdown":"Some anti-recommendations may be in order:\r\n\r\nAnti-recommendation:\r\n\r\n**Do NOT use the `Test::Unit` family of test packages for Perl**, such as `Test::Unit::Assert` and `Test::Unit::TestCases`.\r\n\r\nReason: **`Test::Unit` appears to be abandoned.** \r\n\r\nTest::Unit, Test::Unit::TestCases, Test::Unit::Assert work, pretty well (when I used them 2015-2016). Test::Unit is supposedly not integrated with Perl&#39;s Test Anything Protocol (TAP), although I found that easy to fix.\r\n\r\nBut Test::Unit is frustrating because so many of the other Perl test packages, mostly built using Test::Builder, like Test::More, Test::Most, Test::Exception, Test::Differences, Test::Deep, Test::Warn, etc., do NOT interact well with the object oriented testing approach of Test::Unit. \r\n\r\nYou can mix Test::Unit tests and Test::Builder tests once you have adapted Test::Unit to work with Test::More and the TAP; but the good features of these other packages are not available for OO extension.  Which is much of the reason to use an xUnit-style test anyway.\r\n\r\nSupposedly CPAN&#39;s `Test::Class` allows to &quot;Easily create test classes in an xUnit\/JUnit style&quot; -- but I am not sure that I can recommend this. It certainly doesn&#39;t look like xUnit to me - not OO, idiosyncratic names like `is(VAL1,VAL2,TESTNAME)` instead of xUnit style names like `$test_object-&gt;assert_equals(VAL1,VAL2,TEST_ERR_MSG)`.  Test::Class does have the pleasant feature of auto-detecting all tests annotated :Test, comparable to xUnit and TEST::Unit::TestCase&#39;s approach of using introspection to run all functions named test_*.\r\n\r\nHowever, the underlying package **`Test::Builder`** is object oriented, and hence much more xUnit style. Don&#39;t be scared away by the name - it&#39;s not a factory, it&#39;s mostly a suite with test assert methods.  Although most people inherit from it, you can call it directly if you wish, e.g. `$test_object-&gt;is(VAL1,VAL2,TESTNAME)`, and often you can use Test::Builder calls to work around the limitations of procedural packages like Test::More that are built on top of Test::Builder - like fixing the callstack level at which an error is reported.\r\n\r\nTest::Builder is usually used singleton style, but you can create multiple objects.  I am unsure as to whether these behave as one would expect from an xUnit family test.\r\n\r\nSo far, no easy way to work around limitations such as Perl TAP tests use TEST_NAMES, per assert, without hierarchy, and without distinguishing TEST_NAMES from TEST_ERROR_MESSAGES.  (Err reporting level helps with that lack.)\r\n \r\nIt may be possible to create an adapter that makes Test::Builder and TAP style tests more object oriented, so that you can rebase on something other than TAP (that records more useful info than TAP - supposedly like ANT&#39;s XML protocol).  I think to adapt the names and\/or the missing concepts will either involve going into Test::Builder, or introspection.\r\n","body":"<p>Some anti-recommendations may be in order:<\/p>\n\n<p>Anti-recommendation:<\/p>\n\n<p><strong>Do NOT use the <code>Test::Unit<\/code> family of test packages for Perl<\/strong>, such as <code>Test::Unit::Assert<\/code> and <code>Test::Unit::TestCases<\/code>.<\/p>\n\n<p>Reason: <strong><code>Test::Unit<\/code> appears to be abandoned.<\/strong> <\/p>\n\n<p>Test::Unit, Test::Unit::TestCases, Test::Unit::Assert work, pretty well (when I used them 2015-2016). Test::Unit is supposedly not integrated with Perl's Test Anything Protocol (TAP), although I found that easy to fix.<\/p>\n\n<p>But Test::Unit is frustrating because so many of the other Perl test packages, mostly built using Test::Builder, like Test::More, Test::Most, Test::Exception, Test::Differences, Test::Deep, Test::Warn, etc., do NOT interact well with the object oriented testing approach of Test::Unit. <\/p>\n\n<p>You can mix Test::Unit tests and Test::Builder tests once you have adapted Test::Unit to work with Test::More and the TAP; but the good features of these other packages are not available for OO extension.  Which is much of the reason to use an xUnit-style test anyway.<\/p>\n\n<p>Supposedly CPAN's <code>Test::Class<\/code> allows to \"Easily create test classes in an xUnit\/JUnit style\" -- but I am not sure that I can recommend this. It certainly doesn't look like xUnit to me - not OO, idiosyncratic names like <code>is(VAL1,VAL2,TESTNAME)<\/code> instead of xUnit style names like <code>$test_object-&gt;assert_equals(VAL1,VAL2,TEST_ERR_MSG)<\/code>.  Test::Class does have the pleasant feature of auto-detecting all tests annotated :Test, comparable to xUnit and TEST::Unit::TestCase's approach of using introspection to run all functions named test_*.<\/p>\n\n<p>However, the underlying package <strong><code>Test::Builder<\/code><\/strong> is object oriented, and hence much more xUnit style. Don't be scared away by the name - it's not a factory, it's mostly a suite with test assert methods.  Although most people inherit from it, you can call it directly if you wish, e.g. <code>$test_object-&gt;is(VAL1,VAL2,TESTNAME)<\/code>, and often you can use Test::Builder calls to work around the limitations of procedural packages like Test::More that are built on top of Test::Builder - like fixing the callstack level at which an error is reported.<\/p>\n\n<p>Test::Builder is usually used singleton style, but you can create multiple objects.  I am unsure as to whether these behave as one would expect from an xUnit family test.<\/p>\n\n<p>So far, no easy way to work around limitations such as Perl TAP tests use TEST_NAMES, per assert, without hierarchy, and without distinguishing TEST_NAMES from TEST_ERROR_MESSAGES.  (Err reporting level helps with that lack.)<\/p>\n\n<p>It may be possible to create an adapter that makes Test::Builder and TAP style tests more object oriented, so that you can rebase on something other than TAP (that records more useful info than TAP - supposedly like ANT's XML protocol).  I think to adapt the names and\/or the missing concepts will either involve going into Test::Builder, or introspection.<\/p>\n","community_owned_date":null},{"owner":{"account_id":38643,"reputation":13786,"user_id":111036,"user_type":"registered","accept_rate":43,"profile_image":"https:\/\/www.gravatar.com\/avatar\/4d7fd4b3ed484fc72aa50e4abf323393?s=256&d=identicon&r=PG","display_name":"mivk","link":"https:\/\/stackoverflow.com\/users\/111036\/mivk"},"is_accepted":false,"score":5,"last_activity_date":1483986577,"last_edit_date":null,"creation_date":1483986577,"answer_id":41554559,"question_id":14441521,"content_license":"CC BY-SA 3.0","body_markdown":"It&#39;s probably useful to also mention that, instead of `substr()` or regular expressions, you could use `printf` or `sprintf`.\r\n\r\nSee  [`perldoc -f sprintf`][1] :\r\n\r\n&gt; For string conversions, specifying a precision truncates the string to\r\n&gt; fit the specified width:\r\n&gt; \r\n&gt;       printf &#39;&lt;%.5s&gt;&#39;, &quot;truncated&quot;;   # prints &quot;&lt;trunc&gt;&quot;\r\n&gt;       printf &#39;&lt;%10.5s&gt;&#39;, &quot;truncated&quot;; # prints &quot;&lt;     trunc&gt;&quot;\r\n\r\n\r\n\r\n  [1]: http:\/\/perldoc.perl.org\/functions\/sprintf.html","body":"<p>It's probably useful to also mention that, instead of <code>substr()<\/code> or regular expressions, you could use <code>printf<\/code> or <code>sprintf<\/code>.<\/p>\n\n<p>See  <a href=\"http:\/\/perldoc.perl.org\/functions\/sprintf.html\" rel=\"noreferrer\"><code>perldoc -f sprintf<\/code><\/a> :<\/p>\n\n<blockquote>\n  <p>For string conversions, specifying a precision truncates the string to\n  fit the specified width:<\/p>\n\n<pre><code>  printf '&lt;%.5s&gt;', \"truncated\";   # prints \"&lt;trunc&gt;\"\n  printf '&lt;%10.5s&gt;', \"truncated\"; # prints \"&lt;     trunc&gt;\"\n<\/code><\/pre>\n<\/blockquote>\n","community_owned_date":null},{"owner":{"account_id":14262822,"reputation":51,"user_id":10303006,"user_type":"unregistered","profile_image":"https:\/\/www.gravatar.com\/avatar\/3d18337d11d110b023bea6321a8d75ea?s=256&d=identicon&r=PG","display_name":"JensE","link":"https:\/\/stackoverflow.com\/users\/10303006\/jense"},"is_accepted":false,"score":5,"last_activity_date":1535789396,"last_edit_date":null,"creation_date":1535789396,"answer_id":52126231,"question_id":45000585,"content_license":"CC BY-SA 4.0","body_markdown":"Derived from Bert Hekman, answered Jul 5 at 8:22:\r\n\r\n    env PERL5LIB= PERL_LOCAL_LIB_ROOT= cpan\r\n\r\ndid the trick for me as a quick and dirty solution.","body":"<p>Derived from Bert Hekman, answered Jul 5 at 8:22:<\/p>\n\n<pre><code>env PERL5LIB= PERL_LOCAL_LIB_ROOT= cpan\n<\/code><\/pre>\n\n<p>did the trick for me as a quick and dirty solution.<\/p>\n","community_owned_date":null},{"owner":{"account_id":42267,"reputation":136069,"user_id":123109,"user_type":"registered","accept_rate":55,"profile_image":"https:\/\/www.gravatar.com\/avatar\/157c96de3d125abc1c363ff25c20dfaf?s=256&d=identicon&r=PG","display_name":"Greg Bacon","link":"https:\/\/stackoverflow.com\/users\/123109\/greg-bacon"},"is_accepted":false,"score":5,"last_activity_date":1546407825,"last_edit_date":1592644375.0,"creation_date":1546407825,"answer_id":54001753,"question_id":20710284,"content_license":"CC BY-SA 4.0","body_markdown":"Runaway recursion will crash either a Perl program or a Haskell program after unbounded allocation eventually exhausts available memory. Both languages deal with this potential pitfall in different ways.\n\n----------\n\n# Perl\n\nPerl is a multi-paradigm language but procedural at heart, and deep stack depth in that paradigm can indicate runaway recursion. The [perldiag documentation][perldiag] on this diagnostic states as much, emphasis added.\n\n&gt; * **Deep recursion on anonymous subroutine**\n&gt; * **Deep recursion on subroutine `&quot;%s&quot;`**  \n(W recursion) This subroutine has called itself (directly or indirectly) 100 times more than it has returned. *This probably indicates an infinite recursion*, unless you&#39;re writing strange benchmark programs, in which case it indicates something else.  \n\nIt is merely a runtime warning, so if you believe it to be spurious, disable it with a pragma.\n\n    sub known_deep_recursion {\n      no warnings &#39;recursion&#39;;\n\n      ...;\n    }\n\nA more drastic and evidently unnecessary way to achieve the same effect is described in the same section of the Perl documentation.\n\n&gt; This threshold can be changed from 100, by recompiling the `perl` binary, setting the C pre-processor macro `PERL_SUB_DEPTH_WARN` to the desired value.\n\n----------\n\n# Haskell\n\nHaskell is a purely functional language, where recursion is essential. Writing Haskell [tail-recursively][tr], as in\n\n&gt; A recursive function is tail recursive if the final result of the recursive call is the final result of the function itself. If the result of the recursive call must be further processed (say, by adding 1 to it, or consing another element onto the beginning of it), it is not tail recursive.\n\ntakes advantage of compiler support for lazy evaluation and guarded recursion, which means well written Haskell code can be both concise and have excellent performance.\n\nBut Haskell is not immune to runaway allocations related to recursion. *Poorly* written Haskell code will have stack problems also, as noted on the [Stack overflow][so] page on HaskellWiki.\n\n&gt; There is no call stack in Haskell. Instead we find a pattern matching stack whose entries are essentially case expressions waiting for their scrutinee to be evaluated enough that they can match a constructor (WHNF).\n&gt;\n&gt; When GHC is evaluating a thunked \\[that is, unevaluated] expression it uses an internal stack. This inner stack for thunk evaluation is the one that can overflow in practice. \n\nHaskell does not have a call stack like procedural languages, so these crashes are referred to as [space leaks][space].\n\n&gt; Haskell programs will sometimes consume a lot more memory than necessary, and this is often due to too much, or too little, laziness.\n\nFor example, the simple Haskell program below\n\n    mysum :: [Integer] -&gt; Integer\n    mysum = foldr (+) 0\n\n    main = print (mysum [1..10000000000])\n\nwhen run on my machine \u2014 if it does not on yours, increase the upper bound until it does \u2014 results in\n\n&lt;pre&gt;mysum: Out of memory&lt;\/pre&gt;\n\nChanging the program to\n\n    import Data.List (foldl&#39;)\n    \n    mysum :: [Integer] -&gt; Integer\n    mysum = foldl&#39; (+) 0\n     \n    main = print (mysum [1..10000000000])\n\ntakes a while to run but eventually terminates with the correct result. Reasoning about a Haskell program\u2019s space usage can be tricky for beginners. Rooting out space leaks [using the profiler][prof] is an advanced topic.\n\n----------\n\n# Summary\n\nBoth are excellent languages, especially in their respective niches. We programmers sometimes make mistakes. Resource limitations and the [halting problem][hp] will always be out there conspiring against us. Programming languages deal with these limitations in their own way.\n\n[perldiag]: https:\/\/perldoc.perl.org\/perldiag.html#Deep-recursion-on-subroutine-%22%25s%22\n[tr]: https:\/\/wiki.haskell.org\/Tail_recursion\n[space]: https:\/\/wiki.haskell.org\/Performance\/Space\n[so]: https:\/\/wiki.haskell.org\/Stack_overflow\n[prof]: https:\/\/downloads.haskell.org\/~ghc\/latest\/docs\/html\/users_guide\/profiling.html\n[hp]: https:\/\/en.wikipedia.org\/wiki\/Halting_problem","body":"<p>Runaway recursion will crash either a Perl program or a Haskell program after unbounded allocation eventually exhausts available memory. Both languages deal with this potential pitfall in different ways.<\/p>\n<hr \/>\n<h1>Perl<\/h1>\n<p>Perl is a multi-paradigm language but procedural at heart, and deep stack depth in that paradigm can indicate runaway recursion. The <a href=\"https:\/\/perldoc.perl.org\/perldiag.html#Deep-recursion-on-subroutine-%22%25s%22\" rel=\"nofollow noreferrer\">perldiag documentation<\/a> on this diagnostic states as much, emphasis added.<\/p>\n<blockquote>\n<ul>\n<li><strong>Deep recursion on anonymous subroutine<\/strong><\/li>\n<li><strong>Deep recursion on subroutine <code>&quot;%s&quot;<\/code><\/strong><br \/>\n(W recursion) This subroutine has called itself (directly or indirectly) 100 times more than it has returned. <em>This probably indicates an infinite recursion<\/em>, unless you're writing strange benchmark programs, in which case it indicates something else.<\/li>\n<\/ul>\n<\/blockquote>\n<p>It is merely a runtime warning, so if you believe it to be spurious, disable it with a pragma.<\/p>\n<pre><code>sub known_deep_recursion {\n  no warnings 'recursion';\n\n  ...;\n}\n<\/code><\/pre>\n<p>A more drastic and evidently unnecessary way to achieve the same effect is described in the same section of the Perl documentation.<\/p>\n<blockquote>\n<p>This threshold can be changed from 100, by recompiling the <code>perl<\/code> binary, setting the C pre-processor macro <code>PERL_SUB_DEPTH_WARN<\/code> to the desired value.<\/p>\n<\/blockquote>\n<hr \/>\n<h1>Haskell<\/h1>\n<p>Haskell is a purely functional language, where recursion is essential. Writing Haskell <a href=\"https:\/\/wiki.haskell.org\/Tail_recursion\" rel=\"nofollow noreferrer\">tail-recursively<\/a>, as in<\/p>\n<blockquote>\n<p>A recursive function is tail recursive if the final result of the recursive call is the final result of the function itself. If the result of the recursive call must be further processed (say, by adding 1 to it, or consing another element onto the beginning of it), it is not tail recursive.<\/p>\n<\/blockquote>\n<p>takes advantage of compiler support for lazy evaluation and guarded recursion, which means well written Haskell code can be both concise and have excellent performance.<\/p>\n<p>But Haskell is not immune to runaway allocations related to recursion. <em>Poorly<\/em> written Haskell code will have stack problems also, as noted on the <a href=\"https:\/\/wiki.haskell.org\/Stack_overflow\" rel=\"nofollow noreferrer\">Stack overflow<\/a> page on HaskellWiki.<\/p>\n<blockquote>\n<p>There is no call stack in Haskell. Instead we find a pattern matching stack whose entries are essentially case expressions waiting for their scrutinee to be evaluated enough that they can match a constructor (WHNF).<\/p>\n<p>When GHC is evaluating a thunked [that is, unevaluated] expression it uses an internal stack. This inner stack for thunk evaluation is the one that can overflow in practice.<\/p>\n<\/blockquote>\n<p>Haskell does not have a call stack like procedural languages, so these crashes are referred to as <a href=\"https:\/\/wiki.haskell.org\/Performance\/Space\" rel=\"nofollow noreferrer\">space leaks<\/a>.<\/p>\n<blockquote>\n<p>Haskell programs will sometimes consume a lot more memory than necessary, and this is often due to too much, or too little, laziness.<\/p>\n<\/blockquote>\n<p>For example, the simple Haskell program below<\/p>\n<pre><code>mysum :: [Integer] -&gt; Integer\nmysum = foldr (+) 0\n\nmain = print (mysum [1..10000000000])\n<\/code><\/pre>\n<p>when run on my machine \u2014 if it does not on yours, increase the upper bound until it does \u2014 results in<\/p>\n<pre>mysum: Out of memory<\/pre>\n<p>Changing the program to<\/p>\n<pre><code>import Data.List (foldl')\n\nmysum :: [Integer] -&gt; Integer\nmysum = foldl' (+) 0\n \nmain = print (mysum [1..10000000000])\n<\/code><\/pre>\n<p>takes a while to run but eventually terminates with the correct result. Reasoning about a Haskell program\u2019s space usage can be tricky for beginners. Rooting out space leaks <a href=\"https:\/\/downloads.haskell.org\/%7Eghc\/latest\/docs\/html\/users_guide\/profiling.html\" rel=\"nofollow noreferrer\">using the profiler<\/a> is an advanced topic.<\/p>\n<hr \/>\n<h1>Summary<\/h1>\n<p>Both are excellent languages, especially in their respective niches. We programmers sometimes make mistakes. Resource limitations and the <a href=\"https:\/\/en.wikipedia.org\/wiki\/Halting_problem\" rel=\"nofollow noreferrer\">halting problem<\/a> will always be out there conspiring against us. Programming languages deal with these limitations in their own way.<\/p>\n","community_owned_date":null},{"owner":{"account_id":2044451,"reputation":4334,"user_id":1824868,"user_type":"registered","accept_rate":67,"profile_image":"https:\/\/www.gravatar.com\/avatar\/9b06898ce25659bc5600453c3f21c991?s=256&d=identicon&r=PG","display_name":"jayhendren","link":"https:\/\/stackoverflow.com\/users\/1824868\/jayhendren"},"is_accepted":false,"score":5,"last_activity_date":1550686937,"last_edit_date":null,"creation_date":1550686937,"answer_id":54792932,"question_id":22307610,"content_license":"CC BY-SA 4.0","body_markdown":"You may be getting this error if you are executing CGI files out of a home directory using Apache&#39;s `mod_userdir` and the user&#39;s `public_html` directory is not group-owned by that user&#39;s primary GID.\r\n\r\nI have been unable to find any documentation on this, but this was the solution I stumbled upon to some failing CGI scripts.  I know it sounds really bizarre (it doesn&#39;t make any sense to me either), but it did work for me, so hopefully this will be useful to someone else as well.","body":"<p>You may be getting this error if you are executing CGI files out of a home directory using Apache's <code>mod_userdir<\/code> and the user's <code>public_html<\/code> directory is not group-owned by that user's primary GID.<\/p>\n\n<p>I have been unable to find any documentation on this, but this was the solution I stumbled upon to some failing CGI scripts.  I know it sounds really bizarre (it doesn't make any sense to me either), but it did work for me, so hopefully this will be useful to someone else as well.<\/p>\n","community_owned_date":null},{"owner":{"account_id":430478,"reputation":1804,"user_id":813946,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/1bda02d154cb859341655d20f436be2e?s=256&d=identicon&r=PG","display_name":"Arpad Horvath -- \u0421\u043b\u0430\u0432\u0430 \u0423\u043a\u0440\u0430\u0457\u043d\u0456","link":"https:\/\/stackoverflow.com\/users\/813946\/arpad-horvath-%d0%a1%d0%bb%d0%b0%d0%b2%d0%b0-%d0%a3%d0%ba%d1%80%d0%b0%d1%97%d0%bd%d1%96"},"is_accepted":false,"score":5,"last_activity_date":1693539752,"last_edit_date":1693539752.0,"creation_date":1625505507,"answer_id":68259926,"question_id":22577767,"content_license":"CC BY-SA 4.0","body_markdown":"On RedHat 8.4 (but may work on Fedora)\r\n\r\n    sudo yum install perl-CPAN\r\n    sudo cpan\r\n    install module::Build\r\n    install File::Rename\r\n\r\nthan you can create an alias:\r\n\r\n    alias prename=&#39;\/usr\/local\/bin\/rename&#39;\r\n\r\nAn example:\r\n\r\n    touch pic.jpeg\r\n    prename &#39;s\/\\.jpeg$\/.jpg\/&#39; *.jpeg\r\n\r\nHere you create an empty file with the .jpeg extension. The next line renames all the files with .jpeg extension in the current directory: it removes the e from the jpeg extension of these files. (The first line is there to be sure that there is at least one file like that in the directory.)\r\n\r\n(On Debian\/Ubuntu you can install the `rename` package, then you&#39;ll have the `rename` command same as the `prename` above. Also read SzG&#39;s answer about alternatives and symbolic links: it may or may not be as simple as I wrote.\r\n\r\nAlternatively you [need to install the libpath-tiny-perl package to install CPAN][1].)\r\n\r\n\r\n  [1]: https:\/\/linuxhint.com\/install_perl_modules_debian_linux\/","body":"<p>On RedHat 8.4 (but may work on Fedora)<\/p>\n<pre><code>sudo yum install perl-CPAN\nsudo cpan\ninstall module::Build\ninstall File::Rename\n<\/code><\/pre>\n<p>than you can create an alias:<\/p>\n<pre><code>alias prename='\/usr\/local\/bin\/rename'\n<\/code><\/pre>\n<p>An example:<\/p>\n<pre><code>touch pic.jpeg\nprename 's\/\\.jpeg$\/.jpg\/' *.jpeg\n<\/code><\/pre>\n<p>Here you create an empty file with the .jpeg extension. The next line renames all the files with .jpeg extension in the current directory: it removes the e from the jpeg extension of these files. (The first line is there to be sure that there is at least one file like that in the directory.)<\/p>\n<p>(On Debian\/Ubuntu you can install the <code>rename<\/code> package, then you'll have the <code>rename<\/code> command same as the <code>prename<\/code> above. Also read SzG's answer about alternatives and symbolic links: it may or may not be as simple as I wrote.<\/p>\n<p>Alternatively you <a href=\"https:\/\/linuxhint.com\/install_perl_modules_debian_linux\/\" rel=\"nofollow noreferrer\">need to install the libpath-tiny-perl package to install CPAN<\/a>.)<\/p>\n","community_owned_date":null},{"owner":{"account_id":7688,"reputation":634,"user_id":13421,"user_type":"registered","accept_rate":50,"profile_image":"https:\/\/www.gravatar.com\/avatar\/2a8231485a55282e64bdbad8e6824a00?s=256&d=identicon&r=PG","display_name":"coffeepac","link":"https:\/\/stackoverflow.com\/users\/13421\/coffeepac"},"is_accepted":false,"score":4,"last_activity_date":1221592307,"last_edit_date":null,"creation_date":1221592307,"answer_id":75865,"question_id":75752,"content_license":"CC BY-SA 2.5","body_markdown":"not dumb, this isn&#39;t something that MySQL does, inserting the empty date values.  I do this in perl with a two-step process.  First, load all of the data from the query into a hash organised by date.  Then, I create a Date::EzDate object and increment it by day, so...\r\n\r\n    my $current_date = Date::EzDate-&gt;new();\r\n    $current_date-&gt;{&#39;default&#39;} = &#39;{YEAR}-{MONTH NUMBER BASE 1}-{DAY OF MONTH}&#39;;\r\n    while ($current_date &lt;= $final_date)\r\n    {\r\n        print &quot;$current_date\\t|\\t%hash_o_data{$current_date}&quot;;  # EzDate provides for     automatic stringification in the format specfied in &#39;default&#39;\r\n        $current_date++;\r\n    }\r\n\r\nwhere final date is another EzDate object or a string containing the end of your date range.  \r\n\r\nEzDate isn&#39;t on CPAN right now, but you can probably find another perl mod that will do date compares and provide a date incrementor.  ","body":"<p>not dumb, this isn't something that MySQL does, inserting the empty date values.  I do this in perl with a two-step process.  First, load all of the data from the query into a hash organised by date.  Then, I create a Date::EzDate object and increment it by day, so...<\/p>\n\n<pre><code>my $current_date = Date::EzDate-&gt;new();\n$current_date-&gt;{'default'} = '{YEAR}-{MONTH NUMBER BASE 1}-{DAY OF MONTH}';\nwhile ($current_date &lt;= $final_date)\n{\n    print \"$current_date\\t|\\t%hash_o_data{$current_date}\";  # EzDate provides for     automatic stringification in the format specfied in 'default'\n    $current_date++;\n}\n<\/code><\/pre>\n\n<p>where final date is another EzDate object or a string containing the end of your date range.  <\/p>\n\n<p>EzDate isn't on CPAN right now, but you can probably find another perl mod that will do date compares and provide a date incrementor.  <\/p>\n","community_owned_date":null},{"owner":{"account_id":6048,"reputation":8902,"user_id":10011,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/4c8e968953566721ee017fd02a7d8dba?s=256&d=identicon&r=PG","display_name":"8jean","link":"https:\/\/stackoverflow.com\/users\/10011\/8jean"},"is_accepted":false,"score":4,"last_activity_date":1221593830,"last_edit_date":null,"creation_date":1221593830,"answer_id":76081,"question_id":75752,"content_license":"CC BY-SA 2.5","body_markdown":"You could use a [DateTime][1] object:\r\n\r\n    use DateTime;\r\n    my $dt;\r\n\r\n    while ( my ($date, $sum) = $sth-&gt;fetchrow )  {\r\n        if (defined $dt) {\r\n            print CSV $dt-&gt;ymd . &quot;,0\\n&quot; while $dt-&gt;add(days =&gt; 1)-&gt;ymd lt $date;\r\n        }\r\n        else {\r\n            my ($y, $m, $d) = split \/-\/, $date;\r\n            $dt = DateTime-&gt;new(year =&gt; $y, month =&gt; $m, day =&gt; $d);\r\n        }\r\n        print CSV, &quot;$date,$sum\\n&quot;;\r\n    }\r\n\r\nWhat the above code does is it keeps the last printed date stored in a\r\n`DateTime` object `$dt`, and when the current date is more than one day\r\nin the future, it increments `$dt` by one day (and prints it a line to\r\n`CSV`) until it is the same as the current date.\r\n\r\nThis way you don&#39;t need extra tables, and don&#39;t need to fetch all your\r\nrows in advance.\r\n\r\n[1]: http:\/\/search.cpan.org\/perldoc?DateTime\r\n","body":"<p>You could use a <a href=\"http:\/\/search.cpan.org\/perldoc?DateTime\" rel=\"nofollow noreferrer\">DateTime<\/a> object:<\/p>\n\n<pre><code>use DateTime;\nmy $dt;\n\nwhile ( my ($date, $sum) = $sth-&gt;fetchrow )  {\n    if (defined $dt) {\n        print CSV $dt-&gt;ymd . \",0\\n\" while $dt-&gt;add(days =&gt; 1)-&gt;ymd lt $date;\n    }\n    else {\n        my ($y, $m, $d) = split \/-\/, $date;\n        $dt = DateTime-&gt;new(year =&gt; $y, month =&gt; $m, day =&gt; $d);\n    }\n    print CSV, \"$date,$sum\\n\";\n}\n<\/code><\/pre>\n\n<p>What the above code does is it keeps the last printed date stored in a\n<code>DateTime<\/code> object <code>$dt<\/code>, and when the current date is more than one day\nin the future, it increments <code>$dt<\/code> by one day (and prints it a line to\n<code>CSV<\/code>) until it is the same as the current date.<\/p>\n\n<p>This way you don't need extra tables, and don't need to fetch all your\nrows in advance.<\/p>\n","community_owned_date":null},{"owner":{"account_id":4153,"reputation":1177,"user_id":6154,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/4d3bcbc5052f9ef71f1cafc1933e27c4?s=256&d=identicon&r=PG","display_name":"AndrewJFord","link":"https:\/\/stackoverflow.com\/users\/6154\/andrewjford"},"is_accepted":false,"score":4,"last_activity_date":1222378369,"last_edit_date":null,"creation_date":1222378369,"answer_id":136295,"question_id":136204,"content_license":"CC BY-SA 2.5","body_markdown":"To paraphrase &quot;Effective Perl Programming&quot; by Hall &amp; Schwartz,\r\nmap can be abused, but I think that it&#39;s best used to create a new list from an existing list.\r\n\r\nCreate a list of the squares of 3,2, &amp; 1:\r\n\r\n    @numbers = (3,2,1);\r\n    @squares = map { $_ ** 2 } @numbers;\r\n\r\n\r\n\r\n\r\n\r\n\r\n","body":"<p>To paraphrase \"Effective Perl Programming\" by Hall &amp; Schwartz,\nmap can be abused, but I think that it's best used to create a new list from an existing list.<\/p>\n\n<p>Create a list of the squares of 3,2, &amp; 1:<\/p>\n\n<pre><code>@numbers = (3,2,1);\n@squares = map { $_ ** 2 } @numbers;\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":3021,"reputation":403723,"user_id":4279,"user_type":"registered","accept_rate":94,"profile_image":"https:\/\/www.gravatar.com\/avatar\/d92ce60d3a4cbe03598e27c2e8dee69d?s=256&d=identicon&r=PG","display_name":"jfs","link":"https:\/\/stackoverflow.com\/users\/4279\/jfs"},"is_accepted":false,"score":4,"last_activity_date":1222378700,"last_edit_date":null,"creation_date":1222378700,"answer_id":136342,"question_id":136204,"content_license":"CC BY-SA 2.5","body_markdown":"Generate password:\r\n\r\n    $ perl -E&#39;say map {chr(32 + 95 * rand)} 1..16&#39;\r\n    # -&gt; j&#39;k=$^o7\\l&#39;yi28G","body":"<p>Generate password:<\/p>\n\n<pre><code>$ perl -E'say map {chr(32 + 95 * rand)} 1..16'\n# -&gt; j'k=$^o7\\l'yi28G\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":6235,"reputation":6496,"user_id":10415,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/99940add21e5fb2247237459a586597d?s=256&d=identicon&r=PG","display_name":"runrig","link":"https:\/\/stackoverflow.com\/users\/10415\/runrig"},"is_accepted":false,"score":4,"last_activity_date":1222381884,"last_edit_date":null,"creation_date":1222381884,"answer_id":136609,"question_id":136204,"content_license":"CC BY-SA 2.5","body_markdown":"You use map to transform a list and assign the results to another list, grep to filter a list and assign the results to another list. The &quot;other&quot; list can be the same variable as the list you are transforming\/filtering.\r\n\r\n    my @array = ( 1..5 );\r\n    @array = map { $_+5 } @array;\r\n    print &quot;@array\\n&quot;;\r\n    @array = grep { $_ &lt; 7 } @array;\r\n    print &quot;@array\\n&quot;;","body":"<p>You use map to transform a list and assign the results to another list, grep to filter a list and assign the results to another list. The \"other\" list can be the same variable as the list you are transforming\/filtering.<\/p>\n\n<pre><code>my @array = ( 1..5 );\n@array = map { $_+5 } @array;\nprint \"@array\\n\";\n@array = grep { $_ &lt; 7 } @array;\nprint \"@array\\n\";\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":6660,"reputation":29680,"user_id":11289,"user_type":"registered","accept_rate":75,"profile_image":"https:\/\/www.gravatar.com\/avatar\/a82922f943c2ed9dac3f2b00343a6a3b?s=256&d=identicon&r=PG","display_name":"Axeman","link":"https:\/\/stackoverflow.com\/users\/11289\/axeman"},"is_accepted":false,"score":4,"last_activity_date":1232076017,"last_edit_date":1232076017.0,"creation_date":1222383016,"answer_id":136693,"question_id":136204,"content_license":"CC BY-SA 2.5","body_markdown":"It allows you to transform a list as an *expression* rather than in *statements*. Imagine a hash of soldiers defined like so: \r\n\r\n    { name          =&gt; &#39;John Smith&#39;\r\n    , rank          =&gt; &#39;Lieutenant&#39;\r\n    , serial_number =&gt; &#39;382-293937-20&#39;\r\n    };\r\n\r\nthen you can operate on the list of names separately.\r\n\r\nFor example,\r\n\r\n    map { $_-&gt;{name} } values %soldiers\r\n\r\nis an *expression*. It can go anywhere an expression is allowed--except you can&#39;t assign to it.  \r\n\r\n    ${[ sort map { $_-&gt;{name} } values %soldiers ]}[-1]\r\n\r\nindexes the array, taking the max. \r\n    \r\n    my %soldiers_by_sn = map { $-&gt;{serial_number} =&gt; $_ } values %soldiers;\r\n\r\nI find that one of the advantages of operational expressions is that it cuts down on the bugs that come from temporary variables. \r\n\r\nIf Mr. McCoy wants to filter out all the Hatfields for consideration, you can add that check with minimal coding.  \r\n\r\n    my %soldiers_by_sn \r\n        = map  { $-&gt;{serial_number}, $_ } \r\n          grep { $_-&gt;{name} !~ m\/Hatfield$\/ } \r\n          values %soldiers\r\n          ;\r\n\r\nI can continue chaining these expression so that if my interaction with this data has to reach deep for a particular purpose, I don&#39;t have to write a lot of code that pretends I&#39;m going to do a lot more. \r\n","body":"<p>It allows you to transform a list as an <em>expression<\/em> rather than in <em>statements<\/em>. Imagine a hash of soldiers defined like so: <\/p>\n\n<pre><code>{ name          =&gt; 'John Smith'\n, rank          =&gt; 'Lieutenant'\n, serial_number =&gt; '382-293937-20'\n};\n<\/code><\/pre>\n\n<p>then you can operate on the list of names separately.<\/p>\n\n<p>For example,<\/p>\n\n<pre><code>map { $_-&gt;{name} } values %soldiers\n<\/code><\/pre>\n\n<p>is an <em>expression<\/em>. It can go anywhere an expression is allowed--except you can't assign to it.  <\/p>\n\n<pre><code>${[ sort map { $_-&gt;{name} } values %soldiers ]}[-1]\n<\/code><\/pre>\n\n<p>indexes the array, taking the max. <\/p>\n\n<pre><code>my %soldiers_by_sn = map { $-&gt;{serial_number} =&gt; $_ } values %soldiers;\n<\/code><\/pre>\n\n<p>I find that one of the advantages of operational expressions is that it cuts down on the bugs that come from temporary variables. <\/p>\n\n<p>If Mr. McCoy wants to filter out all the Hatfields for consideration, you can add that check with minimal coding.  <\/p>\n\n<pre><code>my %soldiers_by_sn \n    = map  { $-&gt;{serial_number}, $_ } \n      grep { $_-&gt;{name} !~ m\/Hatfield$\/ } \n      values %soldiers\n      ;\n<\/code><\/pre>\n\n<p>I can continue chaining these expression so that if my interaction with this data has to reach deep for a particular purpose, I don't have to write a lot of code that pretends I'm going to do a lot more. <\/p>\n","community_owned_date":1222383016.0},{"owner":{"account_id":16645,"reputation":3146,"user_id":36499,"user_type":"registered","accept_rate":87,"profile_image":"https:\/\/www.gravatar.com\/avatar\/ce5cfc19a6e855d1d41b9d18b0b96d91?s=256&d=identicon&r=PG","display_name":"singingfish","link":"https:\/\/stackoverflow.com\/users\/36499\/singingfish"},"is_accepted":false,"score":4,"last_activity_date":1396072518,"last_edit_date":1396072518.0,"creation_date":1234646253,"answer_id":549822,"question_id":398221,"content_license":"CC BY-SA 3.0","body_markdown":"I also use the cpan shell and local::lib.\r\n\r\nYou shouldn&#39;t need a Task:: for each project.  Just use Module::Install (I like to use Module::Starter like this:\r\n\r\n    $ module-starter --mi --module=Module::Name --author=&quot;Me&quot; --email=me@cpan.org\r\n\r\nand then just pop your dependencies in requires &#39;module::dependency&#39;; in the Makefile.PL.  Finally when it&#39;s install time, you just `perl Makefile.PL` (answer yes) then `make installdeps`\r\n\r\n[edit 5 years on from when I gave this answer originally]\r\n\r\nThese days perlbrew and cpanm are the things to use.  local::lib still has a use-case, but the combination of perlbrew and cpanm solve a superset of those cases.  Use local::lib when you&#39;re not prepared to compile your own perl.","body":"<p>I also use the cpan shell and local::lib.<\/p>\n\n<p>You shouldn't need a Task:: for each project.  Just use Module::Install (I like to use Module::Starter like this:<\/p>\n\n<pre><code>$ module-starter --mi --module=Module::Name --author=\"Me\" --email=me@cpan.org\n<\/code><\/pre>\n\n<p>and then just pop your dependencies in requires 'module::dependency'; in the Makefile.PL.  Finally when it's install time, you just <code>perl Makefile.PL<\/code> (answer yes) then <code>make installdeps<\/code><\/p>\n\n<p>[edit 5 years on from when I gave this answer originally]<\/p>\n\n<p>These days perlbrew and cpanm are the things to use.  local::lib still has a use-case, but the combination of perlbrew and cpanm solve a superset of those cases.  Use local::lib when you're not prepared to compile your own perl.<\/p>\n","community_owned_date":null},{"owner":{"account_id":3283,"reputation":30073,"user_id":4727,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/01a99498921b93509c73d390704bddf6?s=256&d=identicon&r=PG","display_name":"Leon Timmermans","link":"https:\/\/stackoverflow.com\/users\/4727\/leon-timmermans"},"is_accepted":false,"score":4,"last_activity_date":1236255919,"last_edit_date":null,"creation_date":1236255919,"answer_id":614565,"question_id":613364,"content_license":"CC BY-SA 2.5","body_markdown":"Python has no true lexical scoping, so strict vars wouldn&#39;t be very sensible. It has no symbolic references AFAIK, so it has not need for strict refs. It has not barewords, so it has no need for strict vars.\r\n\r\nTo be honest, it&#39;s only lexical scoping I miss. The other two I&#39;d consider warts in Perl.","body":"<p>Python has no true lexical scoping, so strict vars wouldn't be very sensible. It has no symbolic references AFAIK, so it has not need for strict refs. It has not barewords, so it has no need for strict vars.<\/p>\n\n<p>To be honest, it's only lexical scoping I miss. The other two I'd consider warts in Perl.<\/p>\n","community_owned_date":null},{"owner":{"account_id":6660,"reputation":29680,"user_id":11289,"user_type":"registered","accept_rate":75,"profile_image":"https:\/\/www.gravatar.com\/avatar\/a82922f943c2ed9dac3f2b00343a6a3b?s=256&d=identicon&r=PG","display_name":"Axeman","link":"https:\/\/stackoverflow.com\/users\/11289\/axeman"},"is_accepted":false,"score":4,"last_activity_date":1238689217,"last_edit_date":1238689217.0,"creation_date":1238684416,"answer_id":710075,"question_id":707022,"content_license":"CC BY-SA 2.5","body_markdown":"`unless caller` is good, but a more direct parallel, as well as a more *explicit check*, is:  \r\n\r\n    use English qw&lt;$PROGRAM_NAME&gt;;\r\n\r\n    if ( $PROGRAM_NAME eq __FILE__ ) { \r\n        ...\r\n    }\r\n\r\nJust thought I&#39;d put that out there.\r\n\r\n**EDIT** \r\n\r\nKeep in mind that `$PROGRAM_NAME` (or &#39;`$0`&#39;) is writable, so this is not absolute. But, in most practice--except on accident, or rampaging modules--this likely won&#39;t be changed, or changed at most [locally][1] within another scope. \r\n\r\n[1]:http:\/\/search.cpan.org\/perldoc?perlfunc#local","body":"<p><code>unless caller<\/code> is good, but a more direct parallel, as well as a more <em>explicit check<\/em>, is:  <\/p>\n\n<pre><code>use English qw&lt;$PROGRAM_NAME&gt;;\n\nif ( $PROGRAM_NAME eq __FILE__ ) { \n    ...\n}\n<\/code><\/pre>\n\n<p>Just thought I'd put that out there.<\/p>\n\n<p><strong>EDIT<\/strong> <\/p>\n\n<p>Keep in mind that <code>$PROGRAM_NAME<\/code> (or '<code>$0<\/code>') is writable, so this is not absolute. But, in most practice--except on accident, or rampaging modules--this likely won't be changed, or changed at most <a href=\"http:\/\/search.cpan.org\/perldoc?perlfunc#local\" rel=\"nofollow noreferrer\">locally<\/a> within another scope. <\/p>\n","community_owned_date":null},{"owner":{"account_id":47891,"reputation":2693,"user_id":142061,"user_type":"registered","accept_rate":50,"profile_image":"https:\/\/www.gravatar.com\/avatar\/577be4cba7261dde4126dd5f85c3b39c?s=256&d=identicon&r=PG","display_name":"mixonic","link":"https:\/\/stackoverflow.com\/users\/142061\/mixonic"},"is_accepted":false,"score":4,"last_activity_date":1249493952,"last_edit_date":null,"creation_date":1249493952,"answer_id":1234681,"question_id":1234640,"content_license":"CC BY-SA 2.5","body_markdown":"You can access subroutines references as `\\&amp;my_method` in Perl, and call those references with `$myref-&gt;();`.  Try this:\r\n\r\n    perl -e&#39;sub a { print &quot;foo in a&quot;; }; sub b { shift-&gt;(); }; b(\\&amp;a);&#39;\r\n\r\nGood luck!","body":"<p>You can access subroutines references as <code>\\&amp;my_method<\/code> in Perl, and call those references with <code>$myref-&gt;();<\/code>.  Try this:<\/p>\n\n<pre><code>perl -e'sub a { print \"foo in a\"; }; sub b { shift-&gt;(); }; b(\\&amp;a);'\n<\/code><\/pre>\n\n<p>Good luck!<\/p>\n","community_owned_date":null},{"owner":{"account_id":27404,"reputation":9483,"user_id":72344,"user_type":"registered","accept_rate":67,"profile_image":"https:\/\/www.gravatar.com\/avatar\/fadeb925e599f78196228514ae614645?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"hillu","link":"https:\/\/stackoverflow.com\/users\/72344\/hillu"},"is_accepted":false,"score":4,"last_activity_date":1249496704,"last_edit_date":null,"creation_date":1249496704,"answer_id":1234915,"question_id":1234640,"content_license":"CC BY-SA 2.5","body_markdown":"Following up to Eli Courtwright&#39;s example: If you only use the first function once, you could also call `b` with an anonymous function, like this:\r\n\r\n    b( sub { print &quot;Hello World\\n&quot;; } );\r\n\r\n","body":"<p>Following up to Eli Courtwright's example: If you only use the first function once, you could also call <code>b<\/code> with an anonymous function, like this:<\/p>\n\n<pre><code>b( sub { print \"Hello World\\n\"; } );\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":4850,"reputation":47566,"user_id":7498,"user_type":"registered","accept_rate":71,"profile_image":"https:\/\/www.gravatar.com\/avatar\/aa6a7a12f4cd03bc8c98fa8e9af9ad41?s=256&d=identicon&r=PG","display_name":"innaM","link":"https:\/\/stackoverflow.com\/users\/7498\/innam"},"is_accepted":false,"score":4,"last_activity_date":1627048942,"last_edit_date":1627048942.0,"creation_date":1250574700,"answer_id":1292039,"question_id":1291931,"content_license":"CC BY-SA 4.0","body_markdown":"The first thing I look for is some kind of overview of the currently active file. I&#39;d like to see methods\/functions and, if possible, the used modules and especially any use base statements.\r\n\r\nYou solved that pretty well in Padre.","body":"<p>The first thing I look for is some kind of overview of the currently active file. I'd like to see methods\/functions and, if possible, the used modules and especially any use base statements.<\/p>\n<p>You solved that pretty well in Padre.<\/p>\n","community_owned_date":1250574700.0},{"owner":{"account_id":4850,"reputation":47566,"user_id":7498,"user_type":"registered","accept_rate":71,"profile_image":"https:\/\/www.gravatar.com\/avatar\/aa6a7a12f4cd03bc8c98fa8e9af9ad41?s=256&d=identicon&r=PG","display_name":"innaM","link":"https:\/\/stackoverflow.com\/users\/7498\/innam"},"is_accepted":false,"score":4,"last_activity_date":1250583510,"last_edit_date":null,"creation_date":1250583510,"answer_id":1292508,"question_id":1291931,"content_license":"CC BY-SA 2.5","body_markdown":"Good VCS integration. This is something that I absolutely love in Eclipse: You instantly see what files have local changes and which aren&#39;t added to the repository yet. And you get to browse the different versions and have a nice diff view just one mouse click away.","body":"<p>Good VCS integration. This is something that I absolutely love in Eclipse: You instantly see what files have local changes and which aren't added to the repository yet. And you get to browse the different versions and have a nice diff view just one mouse click away.<\/p>\n","community_owned_date":1250583510.0},{"owner":{"account_id":5191,"reputation":30711,"user_id":8233,"user_type":"registered","accept_rate":69,"profile_image":"https:\/\/www.gravatar.com\/avatar\/5ed2571484765d12fcb3230f235a8ecc?s=256&d=identicon&r=PG","display_name":"Michael Carman","link":"https:\/\/stackoverflow.com\/users\/8233\/michael-carman"},"is_accepted":false,"score":4,"last_activity_date":1250614857,"last_edit_date":null,"creation_date":1250614857,"answer_id":1295211,"question_id":1291931,"content_license":"CC BY-SA 2.5","body_markdown":"A project manager. It&#39;s essential for me to be able to define the set of files and folders that comprise a particular codebase. Sessions are useful but not a replacement.","body":"<p>A project manager. It's essential for me to be able to define the set of files and folders that comprise a particular codebase. Sessions are useful but not a replacement.<\/p>\n","community_owned_date":1250614857.0},{"owner":{"account_id":23567,"reputation":26767,"user_id":59135,"user_type":"registered","accept_rate":94,"profile_image":"https:\/\/www.gravatar.com\/avatar\/90c563665ec03a1b9e80671bb95deeed?s=256&d=identicon&r=PG","display_name":"daotoad","link":"https:\/\/stackoverflow.com\/users\/59135\/daotoad"},"is_accepted":false,"score":4,"last_activity_date":1627048738,"last_edit_date":1627048738.0,"creation_date":1250670458,"answer_id":1298509,"question_id":1291931,"content_license":"CC BY-SA 4.0","body_markdown":"Testing integration.  \r\n\r\nPerl has great unit testing tools.  When I run my test suite and get a failure, I want to see the code for the test that failed.  \r\n\r\nHaving a good way to jump through test results and see the code for the failed test along with the expected and actual results would be a great boon.","body":"<p>Testing integration.<\/p>\n<p>Perl has great unit testing tools.  When I run my test suite and get a failure, I want to see the code for the test that failed.<\/p>\n<p>Having a good way to jump through test results and see the code for the failed test along with the expected and actual results would be a great boon.<\/p>\n","community_owned_date":1250670458.0},{"owner":{"account_id":17881,"reputation":53314,"user_id":40468,"user_type":"registered","accept_rate":60,"profile_image":"https:\/\/www.gravatar.com\/avatar\/43722cb1e955874a8eb721e9dfe101d1?s=256&d=identicon&r=PG","display_name":"Ether","link":"https:\/\/stackoverflow.com\/users\/40468\/ether"},"is_accepted":false,"score":4,"last_activity_date":1251775104,"last_edit_date":null,"creation_date":1251775104,"answer_id":1360363,"question_id":1359771,"content_license":"CC BY-SA 2.5","body_markdown":"What next to try (not sure if this would be best placed in a comment after Alex&#39;s question above though):  What I&#39;d try next (other than Devel::Leak):\r\n\r\nTry to eliminate &quot;unnecessary&quot; parts of your program, or segment it into separate executables (they could use signals to communicate, or call each other with command-line arguments perhaps) -- the goal is to **boil down an executable into the smallest amount of code that still exhibits the bad behaviour**.  If you&#39;re sure it&#39;s not your code that&#39;s doing it, reduce the number of external modules you&#39;re using, particularly those that have an XS implementation.  If perhaps it is your own code, look for anything potentially fishy:\r\n\r\n - definitely any use of Inline::C or XS code\r\n - direct use of references, e.g. `\\@list` or `\\%hash`, rather than preallocated references like [ qw(foo bar) ] (the former creates another reference which may get lost; in the latter, there is just one reference to worry about, which is usually stored in a local lexical scalar\r\n - manipulating variables indirectly, e.g. `$$foo` where `$foo` is modified, which can cause autovivication of variables (although you need to disable `strict &#39;refs&#39;` checking)\r\n","body":"<p>What next to try (not sure if this would be best placed in a comment after Alex's question above though):  What I'd try next (other than Devel::Leak):<\/p>\n\n<p>Try to eliminate \"unnecessary\" parts of your program, or segment it into separate executables (they could use signals to communicate, or call each other with command-line arguments perhaps) -- the goal is to <strong>boil down an executable into the smallest amount of code that still exhibits the bad behaviour<\/strong>.  If you're sure it's not your code that's doing it, reduce the number of external modules you're using, particularly those that have an XS implementation.  If perhaps it is your own code, look for anything potentially fishy:<\/p>\n\n<ul>\n<li>definitely any use of Inline::C or XS code<\/li>\n<li>direct use of references, e.g. <code>\\@list<\/code> or <code>\\%hash<\/code>, rather than preallocated references like [ qw(foo bar) ] (the former creates another reference which may get lost; in the latter, there is just one reference to worry about, which is usually stored in a local lexical scalar<\/li>\n<li>manipulating variables indirectly, e.g. <code>$$foo<\/code> where <code>$foo<\/code> is modified, which can cause autovivication of variables (although you need to disable <code>strict 'refs'<\/code> checking)<\/li>\n<\/ul>\n","community_owned_date":null},{"owner":{"account_id":5473,"reputation":130134,"user_id":2766176,"user_type":"registered","accept_rate":61,"profile_image":"https:\/\/www.gravatar.com\/avatar\/edd8638efe875601bfe394a8aea5b16d?s=256&d=identicon&r=PG","display_name":"brian d foy","link":"https:\/\/stackoverflow.com\/users\/2766176\/brian-d-foy"},"is_accepted":false,"score":4,"last_activity_date":1265251100,"last_edit_date":null,"creation_date":1265251100,"answer_id":2196997,"question_id":585341,"content_license":"CC BY-SA 2.5","body_markdown":"I added an example dealing with this to the next edition of [Effective Perl Programming](http:\/\/www.amazon.com\/Effective-Perl-Programming-Idiomatic-Development\/dp\/0321496949).\r\n\r\nWith a `while`, you can stop processing `FILE` and still get the unprocessed lines:\r\n\r\n     while( &lt;FILE&gt; ) {  # scalar context\r\n          last if ...;\r\n          }\r\n     my $line = &lt;FILE&gt;; # still lines left\r\n\r\nIf you use a `foreach`, you consume all of the lines in the `foreach` even if you stop processing them: \r\n\r\n     foreach( &lt;FILE&gt; ) { # list context\r\n          last if ...;\r\n          }\r\n     my $line = &lt;FILE&gt;; # no lines left!\r\n\r\n\r\n","body":"<p>I added an example dealing with this to the next edition of <a href=\"https:\/\/rads.stackoverflow.com\/amzn\/click\/com\/0321496949\" rel=\"nofollow noreferrer\" rel=\"nofollow noreferrer\">Effective Perl Programming<\/a>.<\/p>\n\n<p>With a <code>while<\/code>, you can stop processing <code>FILE<\/code> and still get the unprocessed lines:<\/p>\n\n<pre><code> while( &lt;FILE&gt; ) {  # scalar context\n      last if ...;\n      }\n my $line = &lt;FILE&gt;; # still lines left\n<\/code><\/pre>\n\n<p>If you use a <code>foreach<\/code>, you consume all of the lines in the <code>foreach<\/code> even if you stop processing them: <\/p>\n\n<pre><code> foreach( &lt;FILE&gt; ) { # list context\n      last if ...;\n      }\n my $line = &lt;FILE&gt;; # no lines left!\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":22584,"reputation":42051,"user_id":55857,"user_type":"registered","accept_rate":86,"profile_image":"https:\/\/www.gravatar.com\/avatar\/9cc59902c5433de334920d378626b9d8?s=256&d=identicon&r=PG","display_name":"FMc","link":"https:\/\/stackoverflow.com\/users\/55857\/fmc"},"is_accepted":false,"score":4,"last_activity_date":1283260396,"last_edit_date":1283260396.0,"creation_date":1283258798,"answer_id":3609149,"question_id":3608957,"content_license":"CC BY-SA 2.5","body_markdown":"My favorite multi-line comment device is `__END__`.\r\n\r\n    print &quot;Hello world\\n&quot;;\r\n\r\n    __END__\r\n\r\n    The script has ended. Perl does not treat this part of the file as code.\r\n\r\n    I can put whatever I want down here. Very handy.\r\n","body":"<p>My favorite multi-line comment device is <code>__END__<\/code>.<\/p>\n\n<pre><code>print \"Hello world\\n\";\n\n__END__\n\nThe script has ended. Perl does not treat this part of the file as code.\n\nI can put whatever I want down here. Very handy.\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":75086,"reputation":11278,"user_id":215487,"user_type":"registered","accept_rate":87,"profile_image":"https:\/\/www.gravatar.com\/avatar\/e3e947cd5a0515d1eece902a29891750?s=256&d=identicon&r=PG","display_name":"Christopher Bottoms","link":"https:\/\/stackoverflow.com\/users\/215487\/christopher-bottoms"},"is_accepted":false,"score":4,"last_activity_date":1284561762,"last_edit_date":null,"creation_date":1284561762,"answer_id":3718738,"question_id":3715957,"content_license":"CC BY-SA 2.5","body_markdown":"(I tried posting this as a comment to brian&#39;s answer, but couldn&#39;t get the formatting right.)\r\n\r\nYou have to be careful to avoid nested uses of `each`. `each` works on a &quot;global&quot; iterator on the array. When it reaches the end, it returns false and then resets the position to the beginning. Thus following code results in an infinite loop.\r\n\r\nThanks to RJBS for his [talk at YAPC::NA][1] where he pointed out the global nature of the built-in iterator.\r\n\r\n    use strict;\r\n    use warnings;\r\n    \r\n    my @array = &#39;A&#39; .. &#39;J&#39; ;\r\n    \r\n    while ( my ($index, $value) = each @array){\r\n            print &quot;printing ($index, $value) from outer loop\\n&quot;;\r\n    \r\n            while ( my ($index_in, $value_in) = each @array){\r\n                    print &quot;printing ($index_in, $value_in) from inner loop\\n&quot;;\r\n            }\r\n    }\r\n\r\n\r\n  [1]: http:\/\/yapc2010.com\/yn2010\/talk\/2700","body":"<p>(I tried posting this as a comment to brian's answer, but couldn't get the formatting right.)<\/p>\n\n<p>You have to be careful to avoid nested uses of <code>each<\/code>. <code>each<\/code> works on a \"global\" iterator on the array. When it reaches the end, it returns false and then resets the position to the beginning. Thus following code results in an infinite loop.<\/p>\n\n<p>Thanks to RJBS for his <a href=\"http:\/\/yapc2010.com\/yn2010\/talk\/2700\" rel=\"nofollow noreferrer\">talk at YAPC::NA<\/a> where he pointed out the global nature of the built-in iterator.<\/p>\n\n<pre><code>use strict;\nuse warnings;\n\nmy @array = 'A' .. 'J' ;\n\nwhile ( my ($index, $value) = each @array){\n        print \"printing ($index, $value) from outer loop\\n\";\n\n        while ( my ($index_in, $value_in) = each @array){\n                print \"printing ($index_in, $value_in) from inner loop\\n\";\n        }\n}\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":653983,"reputation":41,"user_id":449074,"user_type":"unregistered","profile_image":"https:\/\/www.gravatar.com\/avatar\/14731f1e0ba62de4c56cce55be31e86e?s=256&d=identicon&r=PG","display_name":"Felix","link":"https:\/\/stackoverflow.com\/users\/449074\/felix"},"is_accepted":false,"score":4,"last_activity_date":1324354648,"last_edit_date":1324354648.0,"creation_date":1284606120,"answer_id":3723408,"question_id":3715957,"content_license":"CC BY-SA 3.0","body_markdown":"    use List::MoreUtils qw( zip );\r\n\r\n    my @a = &#39;A&#39; .. &#39;E&#39;;\r\n\r\n    my @b = 1 .. 5;\r\n\r\n    my %hash = zip @a, @b;","body":"<pre><code>use List::MoreUtils qw( zip );\n\nmy @a = 'A' .. 'E';\n\nmy @b = 1 .. 5;\n\nmy %hash = zip @a, @b;\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":7144,"reputation":40864,"user_id":12274,"user_type":"registered","accept_rate":90,"profile_image":"https:\/\/www.gravatar.com\/avatar\/bc2d96202ddb562d22cd8d6b6ee22041?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"JB.","link":"https:\/\/stackoverflow.com\/users\/12274\/jb"},"is_accepted":false,"score":4,"last_activity_date":1396760386,"last_edit_date":1396760386.0,"creation_date":1294846891,"answer_id":4670680,"question_id":4669670,"content_license":"CC BY-SA 3.0","body_markdown":"If downloading that file is all you actually do, you&#39;d better go with @davorg&#39;s answer.\r\n\r\nIf this is part of a bigger process, you access the ressource you downloaded as a string using method [`content`][1]  on your `$mech` object.\r\n\r\n\r\n  [1]: https:\/\/metacpan.org\/pod\/WWW::Mechanize#CONTENT-HANDLING-METHODS","body":"<p>If downloading that file is all you actually do, you'd better go with @davorg's answer.<\/p>\n\n<p>If this is part of a bigger process, you access the ressource you downloaded as a string using method <a href=\"https:\/\/metacpan.org\/pod\/WWW%3a%3aMechanize#CONTENT-HANDLING-METHODS\" rel=\"nofollow\"><code>content<\/code><\/a>  on your <code>$mech<\/code> object.<\/p>\n","community_owned_date":null},{"owner":{"account_id":23567,"reputation":26767,"user_id":59135,"user_type":"registered","accept_rate":94,"profile_image":"https:\/\/www.gravatar.com\/avatar\/90c563665ec03a1b9e80671bb95deeed?s=256&d=identicon&r=PG","display_name":"daotoad","link":"https:\/\/stackoverflow.com\/users\/59135\/daotoad"},"is_accepted":false,"score":4,"last_activity_date":1304358059,"last_edit_date":null,"creation_date":1304358059,"answer_id":5860436,"question_id":5858877,"content_license":"CC BY-SA 3.0","body_markdown":"For big projects use a language like Perl.\r\n\r\nThere are a few things you can only do in bash (for example, alter the calling environment (when a script is sourced rather than run).  Also, shell scripting is commonplace.  It is worthwhile to learn the basics and learn your way around the available docs.\r\n\r\nPlus there are times when knowing a shell well can save your bacon (on a fork-bombed system where you can&#39;t start any new processes, or if `\/usr\/bin` and or `\/usr\/local\/bin` fail to mount).","body":"<p>For big projects use a language like Perl.<\/p>\n\n<p>There are a few things you can only do in bash (for example, alter the calling environment (when a script is sourced rather than run).  Also, shell scripting is commonplace.  It is worthwhile to learn the basics and learn your way around the available docs.<\/p>\n\n<p>Plus there are times when knowing a shell well can save your bacon (on a fork-bombed system where you can't start any new processes, or if <code>\/usr\/bin<\/code> and or <code>\/usr\/local\/bin<\/code> fail to mount).<\/p>\n","community_owned_date":null},{"owner":{"account_id":476206,"reputation":4951,"user_id":886994,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/cd6b0f31b78ba116ff62edadeeef17b0?s=256&d=identicon&r=PG","display_name":"Jared Ng","link":"https:\/\/stackoverflow.com\/users\/886994\/jared-ng"},"is_accepted":false,"score":4,"last_activity_date":1313521351,"last_edit_date":null,"creation_date":1313521351,"answer_id":7083573,"question_id":7083453,"content_license":"CC BY-SA 3.0","body_markdown":"If it&#39;s just a hash and all you&#39;re looking for is a copy of it:\r\n\r\n    my $hashref = {data =&gt; &quot;a&quot;};\r\n\r\n    my %hash_copy = %{$hashref}; # Create a copy of the hash that $hashref points to\r\n    my $hashref_copy = \\%hash_copy; # Ref to %hash_copy\r\n    $hashref_copy-&gt;{data} = &quot;b&quot;;\r\n\r\n    print &quot;$hashref-&gt;{data}\\n&quot;; # Outputs &#39;a&#39;\r\n    print &quot;$hashref_copy-&gt;{data}\\n&quot;; # Outputs &#39;b&#39;\r\n\r\n","body":"<p>If it's just a hash and all you're looking for is a copy of it:<\/p>\n\n<pre><code>my $hashref = {data =&gt; \"a\"};\n\nmy %hash_copy = %{$hashref}; # Create a copy of the hash that $hashref points to\nmy $hashref_copy = \\%hash_copy; # Ref to %hash_copy\n$hashref_copy-&gt;{data} = \"b\";\n\nprint \"$hashref-&gt;{data}\\n\"; # Outputs 'a'\nprint \"$hashref_copy-&gt;{data}\\n\"; # Outputs 'b'\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":289202,"reputation":25836,"user_id":590042,"user_type":"registered","accept_rate":86,"profile_image":"https:\/\/www.gravatar.com\/avatar\/cceaf49e409fa9a34cec43201647e1e2?s=256&d=identicon&r=PG","display_name":"Foo Bah","link":"https:\/\/stackoverflow.com\/users\/590042\/foo-bah"},"is_accepted":false,"score":4,"last_activity_date":1315460252,"last_edit_date":null,"creation_date":1315460252,"answer_id":7343546,"question_id":7343526,"content_license":"CC BY-SA 3.0","body_markdown":"You need arrow operator:\r\n\r\n    (sub { print 1;})-&gt;();\r\n","body":"<p>You need arrow operator:<\/p>\n\n<pre><code>(sub { print 1;})-&gt;();\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":40331,"reputation":6828,"user_id":116879,"user_type":"registered","accept_rate":86,"profile_image":"https:\/\/www.gravatar.com\/avatar\/9448d0408d7311149dcc5aa8e845d72b?s=256&d=identicon&r=PG","display_name":"Marius Kjeldahl","link":"https:\/\/stackoverflow.com\/users\/116879\/marius-kjeldahl"},"is_accepted":false,"score":4,"last_activity_date":1323606655,"last_edit_date":null,"creation_date":1323606655,"answer_id":8463951,"question_id":8463919,"content_license":"CC BY-SA 3.0","body_markdown":"Try `%rec_hash = ...` instead. `@` indicates a list\/array, while `%` indicates a hash.","body":"<p>Try <code>%rec_hash = ...<\/code> instead. <code>@<\/code> indicates a list\/array, while <code>%<\/code> indicates a hash.<\/p>\n","community_owned_date":null},{"owner":{"account_id":309711,"reputation":126352,"user_id":622310,"user_type":"registered","accept_rate":33,"profile_image":"https:\/\/www.gravatar.com\/avatar\/8b6d35219e1808520bc238b28161e2e6?s=256&d=identicon&r=PG","display_name":"Borodin","link":"https:\/\/stackoverflow.com\/users\/622310\/borodin"},"is_accepted":false,"score":4,"last_activity_date":1338312880,"last_edit_date":null,"creation_date":1338312880,"answer_id":10803964,"question_id":10799344,"content_license":"CC BY-SA 3.0","body_markdown":"If you insist on using `split` for this then you could potentially be splitting a long string into multiple fields, only to discard all but the first. The third parameter to `split` should be used to limit the number of fields into which to divide the string.\r\n\r\n    my $string = &#39;hello.world&#39;;\r\n    \r\n    print((split(\/\\.\/, $string, 2))[0]);\r\n\r\nBut I believe a regular expression better describes what you want to do, and avoids this problem completely.\r\n\r\nEither\r\n\r\n    my $string = &#39;hello.world&#39;;\r\n    my ($first) = $string =~ \/([^.]+)\/;\r\n    \r\nor\r\n    \r\n    my $string = &#39;hello.world&#39;;\r\n    print $string =~ \/([^.]+)\/;\r\n\r\nwill extract the first string of non-dot characters for you.\r\n    \r\n     \r\n","body":"<p>If you insist on using <code>split<\/code> for this then you could potentially be splitting a long string into multiple fields, only to discard all but the first. The third parameter to <code>split<\/code> should be used to limit the number of fields into which to divide the string.<\/p>\n\n<pre><code>my $string = 'hello.world';\n\nprint((split(\/\\.\/, $string, 2))[0]);\n<\/code><\/pre>\n\n<p>But I believe a regular expression better describes what you want to do, and avoids this problem completely.<\/p>\n\n<p>Either<\/p>\n\n<pre><code>my $string = 'hello.world';\nmy ($first) = $string =~ \/([^.]+)\/;\n<\/code><\/pre>\n\n<p>or<\/p>\n\n<pre><code>my $string = 'hello.world';\nprint $string =~ \/([^.]+)\/;\n<\/code><\/pre>\n\n<p>will extract the first string of non-dot characters for you.<\/p>\n","community_owned_date":null},{"owner":{"account_id":99737,"reputation":2670,"user_id":269242,"user_type":"registered","accept_rate":91,"profile_image":"https:\/\/www.gravatar.com\/avatar\/cbcdf121fa01d1c63c70955ad87cb774?s=256&d=identicon&r=PG","display_name":"Bizmarck","link":"https:\/\/stackoverflow.com\/users\/269242\/bizmarck"},"is_accepted":false,"score":4,"last_activity_date":1339769302,"last_edit_date":null,"creation_date":1339769302,"answer_id":11052263,"question_id":3608957,"content_license":"CC BY-SA 3.0","body_markdown":"This works too:\r\n\r\n    q^\r\n       This is another way to \r\n       add multi-line comments\r\n       to your code\r\n    ^ if 0;","body":"<p>This works too:<\/p>\n\n<pre><code>q^\n   This is another way to \n   add multi-line comments\n   to your code\n^ if 0;\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":483434,"reputation":25507,"user_id":898478,"user_type":"registered","accept_rate":86,"profile_image":"https:\/\/i.stack.imgur.com\/EhSlm.jpg?s=256&g=1","display_name":"m0skit0","link":"https:\/\/stackoverflow.com\/users\/898478\/m0skit0"},"is_accepted":false,"score":4,"last_activity_date":1348221580,"last_edit_date":null,"creation_date":1348221580,"answer_id":12528318,"question_id":12528241,"content_license":"CC BY-SA 3.0","body_markdown":"You can check EPIC plugin for Eclipse. Far from having all features, but you can do some debug and use Eclipse feature quite easily.\r\n\r\nYou can go safely with Perl 5. Perl 6 is a new language still being worked on and its date of release is unknown, so you shouldn&#39;t care about it for now.","body":"<p>You can check EPIC plugin for Eclipse. Far from having all features, but you can do some debug and use Eclipse feature quite easily.<\/p>\n\n<p>You can go safely with Perl 5. Perl 6 is a new language still being worked on and its date of release is unknown, so you shouldn't care about it for now.<\/p>\n","community_owned_date":null},{"owner":{"account_id":1143565,"reputation":504647,"user_id":1126841,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/fa05233b2357f8d11c22ef4cfc7bb85c?s=256&d=identicon&r=PG","display_name":"chepner","link":"https:\/\/stackoverflow.com\/users\/1126841\/chepner"},"is_accepted":false,"score":4,"last_activity_date":1358821573,"last_edit_date":1358821573.0,"creation_date":1358782419,"answer_id":14441989,"question_id":14441521,"content_license":"CC BY-SA 3.0","body_markdown":"As long as your original string is at least 3 characters long, you can use a call to `substr` as an lvalue.\r\n\r\n    my $str = &quot;abcd&quot;;\r\n    substr($str, 3) = &quot;&quot;;\r\n    print &quot;$str\\n&quot;;   # prints &quot;abc&quot;\r\n\r\nThe initial length of the string may need to be checked, as if it is shorter than 3 characters, the return value of this call to `substr` cannot be assigned to (see `perldoc -f substr` for more information) and attempting to do so will cause an error.","body":"<p>As long as your original string is at least 3 characters long, you can use a call to <code>substr<\/code> as an lvalue.<\/p>\n\n<pre><code>my $str = \"abcd\";\nsubstr($str, 3) = \"\";\nprint \"$str\\n\";   # prints \"abc\"\n<\/code><\/pre>\n\n<p>The initial length of the string may need to be checked, as if it is shorter than 3 characters, the return value of this call to <code>substr<\/code> cannot be assigned to (see <code>perldoc -f substr<\/code> for more information) and attempting to do so will cause an error.<\/p>\n","community_owned_date":null},{"owner":{"account_id":9417,"reputation":96497,"user_id":17389,"user_type":"registered","accept_rate":38,"profile_image":"https:\/\/www.gravatar.com\/avatar\/cd06d1314817ce946ab796af8750b56a?s=256&d=identicon&r=PG","display_name":"ysth","link":"https:\/\/stackoverflow.com\/users\/17389\/ysth"},"is_accepted":false,"score":4,"last_activity_date":1371414379,"last_edit_date":null,"creation_date":1371414379,"answer_id":17137392,"question_id":17136232,"content_license":"CC BY-SA 3.0","body_markdown":"Answering the implicit question in the title:\r\n\r\nPerl provides a `scalar` builtin to force scalar context when it would not otherwise be used; a similar `list` builtin doesn&#39;t exist, I imagine largely because it could mean a number of different things, e.g.:\r\n\r\n    list { code to execute in list context };\r\n\r\nmight be defined:\r\n\r\n    sub list (&amp;) { scalar( () = $_[0]-&gt;() ) } # return count of elements\r\n    sub list (&amp;) { ( $_[0]-&gt;() )[0] } # return first element\r\n    sub list (&amp;) { ( $_[0]-&gt;() )[-1] } # return last element\r\n    sub list (&amp;) { for( $_[0]-&gt;() ) {} } # return nothing\r\n\r\nAnswering the body of the question:\r\n\r\nWhen confused by context, remember that operators impose context on operands, not the reverse.  In your problem case, you have a scalar assignment, assigning to a scalar the result of a list assignment, which puts the list assignment in a scalar context.  To know what happens, simply look up what the list assignment will return in scalar context.  (In general, operators return what makes the most common sense, which means there isn&#39;t an easy to remember rule that applies to all operators.)","body":"<p>Answering the implicit question in the title:<\/p>\n\n<p>Perl provides a <code>scalar<\/code> builtin to force scalar context when it would not otherwise be used; a similar <code>list<\/code> builtin doesn't exist, I imagine largely because it could mean a number of different things, e.g.:<\/p>\n\n<pre><code>list { code to execute in list context };\n<\/code><\/pre>\n\n<p>might be defined:<\/p>\n\n<pre><code>sub list (&amp;) { scalar( () = $_[0]-&gt;() ) } # return count of elements\nsub list (&amp;) { ( $_[0]-&gt;() )[0] } # return first element\nsub list (&amp;) { ( $_[0]-&gt;() )[-1] } # return last element\nsub list (&amp;) { for( $_[0]-&gt;() ) {} } # return nothing\n<\/code><\/pre>\n\n<p>Answering the body of the question:<\/p>\n\n<p>When confused by context, remember that operators impose context on operands, not the reverse.  In your problem case, you have a scalar assignment, assigning to a scalar the result of a list assignment, which puts the list assignment in a scalar context.  To know what happens, simply look up what the list assignment will return in scalar context.  (In general, operators return what makes the most common sense, which means there isn't an easy to remember rule that applies to all operators.)<\/p>\n","community_owned_date":null},{"owner":{"account_id":5473,"reputation":130134,"user_id":2766176,"user_type":"registered","accept_rate":61,"profile_image":"https:\/\/www.gravatar.com\/avatar\/edd8638efe875601bfe394a8aea5b16d?s=256&d=identicon&r=PG","display_name":"brian d foy","link":"https:\/\/stackoverflow.com\/users\/2766176\/brian-d-foy"},"is_accepted":true,"score":4,"last_activity_date":1384580241,"last_edit_date":1384580241.0,"creation_date":1384555263,"answer_id":20011875,"question_id":19123377,"content_license":"CC BY-SA 3.0","body_markdown":"After playing around with this, I&#39;m satisfied that what I said in the question is right. Each call to `(?PARNO)` gets a complete and separate set of the match variables that it discards at the end of  its run.\r\n\r\nYou can get all the things that matched in each sub pattern by using an array external to the pattern match operator and pushing onto it at the end of the repeated sub pattern, like in this example:\r\n\r\n\t#!\/usr\/bin\/perl\r\n\t# nested_carat_n.pl\r\n\r\n\tuse v5.10;\r\n\r\n\t$_ =&lt;&lt;&#39;HERE&#39;;\r\n\tOutside &quot;Top Level &#39;Middle Level &quot;Bottom Level&quot; Middle&#39; Outside&quot;\r\n\tHERE\r\n\r\n\tmy @matches;\r\n\r\n\tsay &quot;Matched!&quot; if m\/\r\n\t\t(?(DEFINE)\r\n\t\t\t(?&lt;QUOTE_MARK&gt; [&#39;&quot;])\r\n\t\t\t(?&lt;NOT_QUOTE_MARK&gt; [^&#39;&quot;])\r\n\t\t)\r\n\t\t(\r\n\t\t(?&lt;quote&gt;(?&amp;QUOTE_MARK))\r\n\t\t\t(?:\r\n\t\t\t\t(?&amp;NOT_QUOTE_MARK)++\r\n\t\t\t\t|\r\n\t\t\t\t(?R)\r\n\t\t\t)*\r\n\t\t\\g{quote}\r\n\t\t)\r\n\t\t(?{ push @matches, $^N })\r\n\t\t\/x;\r\n\r\n\tsay join &quot;\\n&quot;, @matches;\r\n\r\nI go through it in depth in [Chapter 2 of Mastering Perl](http:\/\/chimera.labs.oreilly.com\/books\/1234000001527\/ch02.html), which you can read for free (at least for awhile).","body":"<p>After playing around with this, I'm satisfied that what I said in the question is right. Each call to <code>(?PARNO)<\/code> gets a complete and separate set of the match variables that it discards at the end of  its run.<\/p>\n\n<p>You can get all the things that matched in each sub pattern by using an array external to the pattern match operator and pushing onto it at the end of the repeated sub pattern, like in this example:<\/p>\n\n<pre><code>#!\/usr\/bin\/perl\n# nested_carat_n.pl\n\nuse v5.10;\n\n$_ =&lt;&lt;'HERE';\nOutside \"Top Level 'Middle Level \"Bottom Level\" Middle' Outside\"\nHERE\n\nmy @matches;\n\nsay \"Matched!\" if m\/\n    (?(DEFINE)\n        (?&lt;QUOTE_MARK&gt; ['\"])\n        (?&lt;NOT_QUOTE_MARK&gt; [^'\"])\n    )\n    (\n    (?&lt;quote&gt;(?&amp;QUOTE_MARK))\n        (?:\n            (?&amp;NOT_QUOTE_MARK)++\n            |\n            (?R)\n        )*\n    \\g{quote}\n    )\n    (?{ push @matches, $^N })\n    \/x;\n\nsay join \"\\n\", @matches;\n<\/code><\/pre>\n\n<p>I go through it in depth in <a href=\"http:\/\/chimera.labs.oreilly.com\/books\/1234000001527\/ch02.html\" rel=\"nofollow noreferrer\">Chapter 2 of Mastering Perl<\/a>, which you can read for free (at least for awhile).<\/p>\n","community_owned_date":null},{"owner":{"account_id":935202,"reputation":49086,"user_id":964243,"user_type":"registered","accept_rate":66,"profile_image":"https:\/\/i.stack.imgur.com\/fL1rH.png?s=256&g=1","display_name":"Boann","link":"https:\/\/stackoverflow.com\/users\/964243\/boann"},"is_accepted":false,"score":4,"last_activity_date":1389446702,"last_edit_date":null,"creation_date":1389446702,"answer_id":21062778,"question_id":481282,"content_license":"CC BY-SA 3.0","body_markdown":"Here&#39;s a very simple way:\r\n\r\n    \/&quot;(?:\\\\?.)*?&quot;\/\r\n\r\nJust remember if you&#39;re embedding such a regex in a string to double the backslashes.","body":"<p>Here's a very simple way:<\/p>\n\n<pre><code>\/\"(?:\\\\?.)*?\"\/\n<\/code><\/pre>\n\n<p>Just remember if you're embedding such a regex in a string to double the backslashes.<\/p>\n","community_owned_date":null},{"owner":{"account_id":1590521,"reputation":4576,"user_id":1473927,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/AO6Ui.jpg?s=256&g=1","display_name":"Jonathan Cast","link":"https:\/\/stackoverflow.com\/users\/1473927\/jonathan-cast"},"is_accepted":false,"score":4,"last_activity_date":1643731042,"last_edit_date":1643731042.0,"creation_date":1432825211,"answer_id":30510217,"question_id":5249362,"content_license":"CC BY-SA 4.0","body_markdown":"With Perl 5.20 the new answer is:\r\n\r\n    foreach my $key (keys $ad_grp_ref-&gt;%*) {\r\n\r\n(which has the advantage of transparently working with more complicated expressions:\r\n\r\n    foreach my $key (keys $ad_grp_obj[3]-&gt;get_ref()-&gt;%*) {\r\n\r\netc.)\r\n\r\nSee [perlref][1] for the full documentation.\r\n\r\nNote: in Perl version 5.20 and 5.22, this syntax is considered experimental, so you need\r\n\r\n    use feature &#39;postderef&#39;;\r\n    no warnings &#39;experimental::postderef&#39;;\r\n\r\nat the top of any file that uses it.  Perl 5.24 and later don&#39;t require any pragmas for this feature.\r\n\r\n  [1]: http:\/\/perldoc.perl.org\/perlref.html#Postfix-Dereference-Syntax &quot;perlref&quot;","body":"<p>With Perl 5.20 the new answer is:<\/p>\n<pre><code>foreach my $key (keys $ad_grp_ref-&gt;%*) {\n<\/code><\/pre>\n<p>(which has the advantage of transparently working with more complicated expressions:<\/p>\n<pre><code>foreach my $key (keys $ad_grp_obj[3]-&gt;get_ref()-&gt;%*) {\n<\/code><\/pre>\n<p>etc.)<\/p>\n<p>See <a href=\"http:\/\/perldoc.perl.org\/perlref.html#Postfix-Dereference-Syntax\" rel=\"nofollow noreferrer\" title=\"perlref\">perlref<\/a> for the full documentation.<\/p>\n<p>Note: in Perl version 5.20 and 5.22, this syntax is considered experimental, so you need<\/p>\n<pre><code>use feature 'postderef';\nno warnings 'experimental::postderef';\n<\/code><\/pre>\n<p>at the top of any file that uses it.  Perl 5.24 and later don't require any pragmas for this feature.<\/p>\n","community_owned_date":null},{"owner":{"account_id":1792469,"reputation":1459,"user_id":1632556,"user_type":"registered","accept_rate":67,"profile_image":"https:\/\/i.stack.imgur.com\/ErjRS.jpg?s=256&g=1","display_name":"Soumya Kanti","link":"https:\/\/stackoverflow.com\/users\/1632556\/soumya-kanti"},"is_accepted":false,"score":4,"last_activity_date":1455611525,"last_edit_date":null,"creation_date":1455611525,"answer_id":35427444,"question_id":3854651,"content_license":"CC BY-SA 3.0","body_markdown":"Using `backtick` or `qx` helps, thanks everybody for the answers. However, I found that if you use `backtick` or `qx`, the output contains trailing newline and I need to remove that. So I used `chomp`. \r\n\r\n    chomp($host = `hostname`);\r\n    chomp($domain = `domainname`);\r\n    $fqdn = $host.&quot;.&quot;.$domain;\r\n\r\nMore information here: \r\nhttp:\/\/irouble.blogspot.in\/2011\/04\/perl-chomp-backticks.html","body":"<p>Using <code>backtick<\/code> or <code>qx<\/code> helps, thanks everybody for the answers. However, I found that if you use <code>backtick<\/code> or <code>qx<\/code>, the output contains trailing newline and I need to remove that. So I used <code>chomp<\/code>. <\/p>\n\n<pre><code>chomp($host = `hostname`);\nchomp($domain = `domainname`);\n$fqdn = $host.\".\".$domain;\n<\/code><\/pre>\n\n<p>More information here: \n<a href=\"http:\/\/irouble.blogspot.in\/2011\/04\/perl-chomp-backticks.html\" rel=\"nofollow\">http:\/\/irouble.blogspot.in\/2011\/04\/perl-chomp-backticks.html<\/a><\/p>\n","community_owned_date":null},{"owner":{"account_id":271602,"reputation":22496,"user_id":562222,"user_type":"registered","accept_rate":57,"profile_image":"https:\/\/i.stack.imgur.com\/jgGXb.jpg?s=256&g=1","display_name":"qed","link":"https:\/\/stackoverflow.com\/users\/562222\/qed"},"is_accepted":false,"score":4,"last_activity_date":1502270878,"last_edit_date":null,"creation_date":1502270878,"answer_id":45586710,"question_id":22577767,"content_license":"CC BY-SA 3.0","body_markdown":"I had to do the following:\r\n\r\n    # In bash\r\n    sudo yum install perl-CPAN\r\n    sudo cpan\r\n    \r\n    # In CPAN shell\r\n    install Module::Build\r\n    install File::Rename\r\n\r\n","body":"<p>I had to do the following:<\/p>\n\n<pre><code># In bash\nsudo yum install perl-CPAN\nsudo cpan\n\n# In CPAN shell\ninstall Module::Build\ninstall File::Rename\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":9688852,"reputation":160,"user_id":7677837,"user_type":"registered","profile_image":"https:\/\/lh6.googleusercontent.com\/-W5dJ6KN1ajE\/AAAAAAAAAAI\/AAAAAAAAACs\/Qtk38oYJV7A\/photo.jpg?sz=256","display_name":"Ian","link":"https:\/\/stackoverflow.com\/users\/7677837\/ian"},"is_accepted":false,"score":4,"last_activity_date":1546605599,"last_edit_date":null,"creation_date":1546605599,"answer_id":54039163,"question_id":22307610,"content_license":"CC BY-SA 4.0","body_markdown":"Since no answer is accepted, I would like to provide one possible solution. If your script is written on Windows and uploaded to a Linux server(through **FTP**), then the problem will raise usually. The reason is that Windows uses `CRLF` to end each line while Linux uses `LF`. So you should convert it from `CRLF` to `LF` with the help of an editor, such **Atom**, as following\r\n[![enter image description here][1]][1]\r\n\r\n\r\n  [1]: https:\/\/i.stack.imgur.com\/0x90p.png","body":"<p>Since no answer is accepted, I would like to provide one possible solution. If your script is written on Windows and uploaded to a Linux server(through <strong>FTP<\/strong>), then the problem will raise usually. The reason is that Windows uses <code>CRLF<\/code> to end each line while Linux uses <code>LF<\/code>. So you should convert it from <code>CRLF<\/code> to <code>LF<\/code> with the help of an editor, such <strong>Atom<\/strong>, as following\n<a href=\"https:\/\/i.stack.imgur.com\/0x90p.png\" rel=\"nofollow noreferrer\"><img src=\"https:\/\/i.stack.imgur.com\/0x90p.png\" alt=\"enter image description here\"><\/a><\/p>\n","community_owned_date":null},{"owner":{"account_id":2305642,"reputation":372,"user_id":2024982,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/7sAdb.png?s=256&g=1","display_name":"Doqnach","link":"https:\/\/stackoverflow.com\/users\/2024982\/doqnach"},"is_accepted":false,"score":4,"last_activity_date":1635881684,"last_edit_date":1635881684.0,"creation_date":1550154137,"answer_id":54692631,"question_id":25563891,"content_license":"CC BY-SA 4.0","body_markdown":"Blog post found today, linked to me at #regex @ irc.freenode.org:\r\n\r\nhttp:\/\/www.drregex.com\/2019\/02\/variable-length-lookbehinds-actually.html\r\n\r\nThis article explains how to do a variable width look-behind in PCRE.\r\n\r\nThe solution would then be:\r\n\r\n    \/(?=(?=(?&#39;a&#39;[\\s\\S]*))(?&#39;b&#39;eat_(?:apple|pear|orange)_(?=\\k&#39;a&#39;\\z)|(?&lt;=(?=x^|(?&amp;b))[\\s\\S])))today|yesterday\/g\r\n\r\nhttps:\/\/regex101.com\/r\/9DNpFj\/1","body":"<p>Blog post found today, linked to me at #regex @ irc.freenode.org:<\/p>\n<p><a href=\"http:\/\/www.drregex.com\/2019\/02\/variable-length-lookbehinds-actually.html\" rel=\"nofollow noreferrer\">http:\/\/www.drregex.com\/2019\/02\/variable-length-lookbehinds-actually.html<\/a><\/p>\n<p>This article explains how to do a variable width look-behind in PCRE.<\/p>\n<p>The solution would then be:<\/p>\n<pre><code>\/(?=(?=(?'a'[\\s\\S]*))(?'b'eat_(?:apple|pear|orange)_(?=\\k'a'\\z)|(?&lt;=(?=x^|(?&amp;b))[\\s\\S])))today|yesterday\/g\n<\/code><\/pre>\n<p><a href=\"https:\/\/regex101.com\/r\/9DNpFj\/1\" rel=\"nofollow noreferrer\">https:\/\/regex101.com\/r\/9DNpFj\/1<\/a><\/p>\n","community_owned_date":null},{"owner":{"account_id":10904,"reputation":2639,"user_id":1729005,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/7a471f843e0b60ef6683f2671d3fb9fe?s=256&d=identicon&r=PG","display_name":"axblount","link":"https:\/\/stackoverflow.com\/users\/1729005\/axblount"},"is_accepted":false,"score":3,"last_activity_date":1222397966,"last_edit_date":1222397966.0,"creation_date":1222377898,"answer_id":136248,"question_id":136204,"content_license":"CC BY-SA 2.5","body_markdown":"It&#39;s used anytime you would like to create a new list from an existing list.\r\n\r\nFor instance you could map a parsing function on a list of strings to convert them to integers.","body":"<p>It's used anytime you would like to create a new list from an existing list.<\/p>\n\n<p>For instance you could map a parsing function on a list of strings to convert them to integers.<\/p>\n","community_owned_date":1222377898.0},{"owner":{"account_id":27102,"reputation":1649,"user_id":71134,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/8e16d576da7982dd7bfa94f1473a8ade?s=256&d=identicon&r=PG","display_name":"Ken Fox","link":"https:\/\/stackoverflow.com\/users\/71134\/ken-fox"},"is_accepted":false,"score":3,"last_activity_date":1265252095,"last_edit_date":1265252095.0,"creation_date":1235610368,"answer_id":588682,"question_id":585341,"content_license":"CC BY-SA 2.5","body_markdown":"_Update: j random hacker points out in a comment that Perl special cases the falseness test in a while loop when reading from a file handle. I&#39;ve just verified that reading a false value will not terminate the loop -- at least on modern perls. Sorry for steering you all wrong. After 15 years of writing Perl I&#39;m still a noob. ;)_\r\n\r\nEveryone above is right: use the `while` loop because it will be more memory efficient and give you more control.\r\n\r\nA funny thing about that `while` loop though is that it exits when the read is false. Usually that will be end-of-file, but what if it returns an empty string or a 0? Oops! Your program just exited too soon. This can happen on any file handle if the last line in the file doesn&#39;t have a newline. It can also happen with custom file objects that have a read method that doesn&#39;t treat newlines the same way as regular Perl file objects.\r\n\r\nHere&#39;s how to fix it. Check for an undefined value read which indicates end-of-file:\r\n\r\n    while (defined(my $line = &lt;FILE&gt;)) {\r\n        print $line;\r\n    }\r\n\r\nThe `foreach` loop doesn&#39;t have this problem by the way and is correct even though inefficient.\r\n\r\n","body":"<p><em>Update: j random hacker points out in a comment that Perl special cases the falseness test in a while loop when reading from a file handle. I've just verified that reading a false value will not terminate the loop -- at least on modern perls. Sorry for steering you all wrong. After 15 years of writing Perl I'm still a noob. ;)<\/em><\/p>\n\n<p>Everyone above is right: use the <code>while<\/code> loop because it will be more memory efficient and give you more control.<\/p>\n\n<p>A funny thing about that <code>while<\/code> loop though is that it exits when the read is false. Usually that will be end-of-file, but what if it returns an empty string or a 0? Oops! Your program just exited too soon. This can happen on any file handle if the last line in the file doesn't have a newline. It can also happen with custom file objects that have a read method that doesn't treat newlines the same way as regular Perl file objects.<\/p>\n\n<p>Here's how to fix it. Check for an undefined value read which indicates end-of-file:<\/p>\n\n<pre><code>while (defined(my $line = &lt;FILE&gt;)) {\n    print $line;\n}\n<\/code><\/pre>\n\n<p>The <code>foreach<\/code> loop doesn't have this problem by the way and is correct even though inefficient.<\/p>\n","community_owned_date":null},{"owner":{"account_id":20151,"reputation":4529,"user_id":47850,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/c8194f2bd5d9dc29219e1dab83f180c8?s=256&d=identicon&r=PG","display_name":"popcnt","link":"https:\/\/stackoverflow.com\/users\/47850\/popcnt"},"is_accepted":false,"score":3,"last_activity_date":1236287386,"last_edit_date":1236287386.0,"creation_date":1236221851,"answer_id":613439,"question_id":613364,"content_license":"CC BY-SA 2.5","body_markdown":"I consider the `&#39;use strict&#39;` in Perl more like a pragma as you hinted at: it changes the behavior of the compiler.  \r\n\r\nPerl language philosophy is different from python philosophy.  As in, you are given more than enough rope to hang yourself repeatedly, in Perl.  \r\n\r\nLarry Wall is big into linguistics, so we have from Perl what is referred to as the TIMTOWTDI (say `tim-toe-dee`) principle vs. Zen of python:\r\n\r\n&gt; There should be one-- and preferably\r\n&gt; only one --obvious way to do it.\r\n\r\nyou could very easily use pylint and PyChecker to come up with your own flavor of `use strict` for python (or something analogous to `perl -cw  *scriptname*`) but because of the different philosophies in the language design, you will not encounter this in practice widely.\r\n\r\nBased on your comment to the first poster, you are familiar with python&#39;s `import this`.  There are a lot of things in there which illuminate why you do not see an equivalent of `use strict` in Python.  If you meditate on the *koan* found in the Zen of Python, you may find enlightenment for yourself.  :)\r\n","body":"<p>I consider the <code>'use strict'<\/code> in Perl more like a pragma as you hinted at: it changes the behavior of the compiler.  <\/p>\n\n<p>Perl language philosophy is different from python philosophy.  As in, you are given more than enough rope to hang yourself repeatedly, in Perl.  <\/p>\n\n<p>Larry Wall is big into linguistics, so we have from Perl what is referred to as the TIMTOWTDI (say <code>tim-toe-dee<\/code>) principle vs. Zen of python:<\/p>\n\n<blockquote>\n  <p>There should be one-- and preferably\n  only one --obvious way to do it.<\/p>\n<\/blockquote>\n\n<p>you could very easily use pylint and PyChecker to come up with your own flavor of <code>use strict<\/code> for python (or something analogous to <code>perl -cw  *scriptname*<\/code>) but because of the different philosophies in the language design, you will not encounter this in practice widely.<\/p>\n\n<p>Based on your comment to the first poster, you are familiar with python's <code>import this<\/code>.  There are a lot of things in there which illuminate why you do not see an equivalent of <code>use strict<\/code> in Python.  If you meditate on the <em>koan<\/em> found in the Zen of Python, you may find enlightenment for yourself.  :)<\/p>\n","community_owned_date":null},{"owner":{"account_id":16645,"reputation":3146,"user_id":36499,"user_type":"registered","accept_rate":87,"profile_image":"https:\/\/www.gravatar.com\/avatar\/ce5cfc19a6e855d1d41b9d18b0b96d91?s=256&d=identicon&r=PG","display_name":"singingfish","link":"https:\/\/stackoverflow.com\/users\/36499\/singingfish"},"is_accepted":false,"score":3,"last_activity_date":1251314441,"last_edit_date":1251314441.0,"creation_date":1237186545,"answer_id":649488,"question_id":641442,"content_license":"CC BY-SA 2.5","body_markdown":"I absolutely ***love*** [Black Perl][1] (link to version rewritten to compile under Perl 5).  It compiles, but as far as I can tell it doesn&#39;t actually do anything.\r\n\r\nThat&#39;s what you get for a language written by a linguist from a pragmatic perspective rather than from a theoretical perspective.\r\n\r\nMoving on from that, you can think about the Perl that people complain about as pidgin Perl (perfectly useful, but not expressive, and beware of trying to express anything complex in it), and the stuff that @pjf is talking about as &quot;proper&quot; Perl, the language of Shakespeare, Hemingway, Hume and so on. [edit:  err, though easier to read than Hume and less dated than Shakespeare.] [re-edit and hopefully less alcoholic than Hemingway]\r\n\r\n  [1]: http:\/\/www.perlmonks.org\/?node_id=237465\r\n","body":"<p>I absolutely <strong><em>love<\/em><\/strong> <a href=\"http:\/\/www.perlmonks.org\/?node_id=237465\" rel=\"nofollow noreferrer\">Black Perl<\/a> (link to version rewritten to compile under Perl 5).  It compiles, but as far as I can tell it doesn't actually do anything.<\/p>\n\n<p>That's what you get for a language written by a linguist from a pragmatic perspective rather than from a theoretical perspective.<\/p>\n\n<p>Moving on from that, you can think about the Perl that people complain about as pidgin Perl (perfectly useful, but not expressive, and beware of trying to express anything complex in it), and the stuff that @pjf is talking about as \"proper\" Perl, the language of Shakespeare, Hemingway, Hume and so on. [edit:  err, though easier to read than Hume and less dated than Shakespeare.] [re-edit and hopefully less alcoholic than Hemingway]<\/p>\n","community_owned_date":1237186545.0},{"owner":{"user_type":"does_not_exist","display_name":"user80168"},"is_accepted":false,"score":3,"last_activity_date":1240169460,"last_edit_date":null,"creation_date":1240169460,"answer_id":765944,"question_id":765894,"content_license":"CC BY-SA 2.5","body_markdown":"In perl:\r\n\r\n    s\/quick(.*)lazy\/slow${1}energetic\/;\r\n\r\nIn vim:\r\n\r\n    s\/quick\\(.*\\)lazy\/slow\\1energetic\/;","body":"<p>In perl:<\/p>\n\n<pre><code>s\/quick(.*)lazy\/slow${1}energetic\/;\n<\/code><\/pre>\n\n<p>In vim:<\/p>\n\n<pre><code>s\/quick\\(.*\\)lazy\/slow\\1energetic\/;\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":27051,"reputation":7245,"user_id":70945,"user_type":"registered","accept_rate":86,"profile_image":"https:\/\/www.gravatar.com\/avatar\/86892d7547c9b9f7c2209f3e20ee5f95?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"weismat","link":"https:\/\/stackoverflow.com\/users\/70945\/weismat"},"is_accepted":false,"score":3,"last_activity_date":1627048869,"last_edit_date":1627048869.0,"creation_date":1250581961,"answer_id":1292416,"question_id":1291931,"content_license":"CC BY-SA 4.0","body_markdown":"Visual-Studio style refactoring for variables and function names and extraction of functions.\r\nVisual studio searches your whole module for all references and allows you to see all changed lines in case you do not want to change one instance (for whatever reason)...","body":"<p>Visual-Studio style refactoring for variables and function names and extraction of functions.\nVisual studio searches your whole module for all references and allows you to see all changed lines in case you do not want to change one instance (for whatever reason)...<\/p>\n","community_owned_date":1250581961.0},{"owner":{"account_id":831,"reputation":123977,"user_id":1084,"user_type":"registered","accept_rate":86,"profile_image":"https:\/\/www.gravatar.com\/avatar\/898c2217a5457bdef0a0ed58283010dc?s=256&d=identicon&r=PG","display_name":"Nathan Fellman","link":"https:\/\/stackoverflow.com\/users\/1084\/nathan-fellman"},"is_accepted":false,"score":3,"last_activity_date":1251545455,"last_edit_date":1495539971.0,"creation_date":1251545455,"answer_id":1351208,"question_id":585341,"content_license":"CC BY-SA 3.0","body_markdown":"[*j_random_hacker*][1] mentioned this in the comments to [this answer][2], but didn&#39;t actually put it in an answer of its own, even though it&#39;s another difference worth mentioning.\r\n\r\nThe difference is that `while (&lt;FILE&gt;) {}` overwrites `$_`, while `foreach(&lt;FILE&gt;) {}` localizes it.  That is:\r\n\r\n    $_ = 100;\r\n    while (&lt;FILE&gt;) {\r\n        # $_ gets each line in turn\r\n        # do something with the file\r\n    }\r\n    print $_; # yes I know that $_ is unneeded here, but \r\n              # I&#39;m trying to write clear code for the example\r\n\r\nWill print out the last line of `&lt;FILE&gt;`.\r\n\r\nHowever,\r\n\r\n    $_ = 100;\r\n    foreach(&lt;FILE&gt;) {\r\n        # $_ gets each line in turn\r\n        # do something with the file\r\n    }\r\n    print $_;\r\n \r\nWill print out `100`.  To get the same with a `while(&lt;FILE&gt;) {}` construct you&#39;d need to do:\r\n\r\n    $_ = 100;\r\n    {\r\n        local $_;\r\n        while (&lt;FILE&gt;) {\r\n            # $_ gets each line in turn\r\n            # do something with the file\r\n        }\r\n    }\r\n    print $_; # yes I know that $_ is unneeded here, but \r\n              # I&#39;m trying to write clear code for the example\r\n\r\nNow this will print `100`.\r\n\r\n  [1]: https:\/\/stackoverflow.com\/users\/47984\/jrandomhacker &quot;j_random_hacker&quot;\r\n  [2]: https:\/\/stackoverflow.com\/questions\/585341\/whats-the-difference-between-iterating-over-a-file-with-foreach-or-while-in-perl\/588682#588682","body":"<p><a href=\"https:\/\/stackoverflow.com\/users\/47984\/jrandomhacker\" title=\"j_random_hacker\"><em>j_random_hacker<\/em><\/a> mentioned this in the comments to <a href=\"https:\/\/stackoverflow.com\/questions\/585341\/whats-the-difference-between-iterating-over-a-file-with-foreach-or-while-in-perl\/588682#588682\">this answer<\/a>, but didn't actually put it in an answer of its own, even though it's another difference worth mentioning.<\/p>\n\n<p>The difference is that <code>while (&lt;FILE&gt;) {}<\/code> overwrites <code>$_<\/code>, while <code>foreach(&lt;FILE&gt;) {}<\/code> localizes it.  That is:<\/p>\n\n<pre><code>$_ = 100;\nwhile (&lt;FILE&gt;) {\n    # $_ gets each line in turn\n    # do something with the file\n}\nprint $_; # yes I know that $_ is unneeded here, but \n          # I'm trying to write clear code for the example\n<\/code><\/pre>\n\n<p>Will print out the last line of <code>&lt;FILE&gt;<\/code>.<\/p>\n\n<p>However,<\/p>\n\n<pre><code>$_ = 100;\nforeach(&lt;FILE&gt;) {\n    # $_ gets each line in turn\n    # do something with the file\n}\nprint $_;\n<\/code><\/pre>\n\n<p>Will print out <code>100<\/code>.  To get the same with a <code>while(&lt;FILE&gt;) {}<\/code> construct you'd need to do:<\/p>\n\n<pre><code>$_ = 100;\n{\n    local $_;\n    while (&lt;FILE&gt;) {\n        # $_ gets each line in turn\n        # do something with the file\n    }\n}\nprint $_; # yes I know that $_ is unneeded here, but \n          # I'm trying to write clear code for the example\n<\/code><\/pre>\n\n<p>Now this will print <code>100<\/code>.<\/p>\n","community_owned_date":null},{"owner":{"account_id":17670,"reputation":3324,"user_id":39791,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/661c7cc5565e5bc21fb0fc22c0354fef?s=256&d=identicon&r=PG","display_name":"Joe McMahon","link":"https:\/\/stackoverflow.com\/users\/39791\/joe-mcmahon"},"is_accepted":false,"score":3,"last_activity_date":1264751405,"last_edit_date":null,"creation_date":1264751405,"answer_id":2160575,"question_id":2091040,"content_license":"CC BY-SA 2.5","body_markdown":"Just for completeness, here&#39;s a very short intro to the debugger.\r\n\r\n    perl -d your_program\r\n\r\nstarts it under the bugger. You&#39;ll get control at the first executable line (use statements and the like have already executed at this point).\r\n\r\n&#39;s&#39; will step to the next line. Once you&#39;ve entered an &#39;s&#39;, you can simply press return to repeat it.  &#39;s&#39; will step down into functions\/subroutines\/methods. Either keep stepping till you return or enter the &#39;r&#39; command to execute the rest of the function and return to right after the call.\r\n\r\nIf you want to step &#39;over&#39; subroutines - that is, execute them and return without having to step in and return, use &#39;n. The carriage return after the first &#39;n&#39; also keeps doing &#39;n&#39; for you.\r\n\r\nIf you know the line where you want to stop, use the &#39;b&#39; command - b linenumber - to set a breakpoint, then &#39;c&#39; to continue till you reach it. Note that every time you &#39;c&#39; and come back to the breakpoint you will stop again. Use &#39;B linenumber&#39; to turn the breakpoint back off.\r\n\r\nSo let&#39;s assume you&#39;ve gotten to something like this:\r\n\r\n    my $obj = complex_function_returning_unknown_thing;\r\n\r\nThe debugger&#39;s just shown you this line, which says &quot;I have not executed this yet, but it is what I will do next.&quot; Enter &#39;n&#39; to execute the subroutine, then use the &#39;x&#39; command to look at the object: &#39;x $obj&#39;. If it&#39;s big, you can say &#39;|x $obj&#39; which runs the output through a pager. To see what methods the object has, use &#39;m $obj&#39;.\r\n\r\nThere&#39;s a lot more to the debugger, but you can indeed use it for this kind of thing - you need to simply see the type of an object you&#39;re getting from some code and find out what methods the object you got has.\r\n\r\nIt may be more useful to &#39;x&#39; the object, and then go look at the source of the class the object&#39;s been blessed into to find out what you *should* do as opposed to what you *can* do. The &#39;x&#39; command is pretty much &#39;print ref($obj)&#39; crossed with Data::Dumper anyway.","body":"<p>Just for completeness, here's a very short intro to the debugger.<\/p>\n\n<pre><code>perl -d your_program\n<\/code><\/pre>\n\n<p>starts it under the bugger. You'll get control at the first executable line (use statements and the like have already executed at this point).<\/p>\n\n<p>'s' will step to the next line. Once you've entered an 's', you can simply press return to repeat it.  's' will step down into functions\/subroutines\/methods. Either keep stepping till you return or enter the 'r' command to execute the rest of the function and return to right after the call.<\/p>\n\n<p>If you want to step 'over' subroutines - that is, execute them and return without having to step in and return, use 'n. The carriage return after the first 'n' also keeps doing 'n' for you.<\/p>\n\n<p>If you know the line where you want to stop, use the 'b' command - b linenumber - to set a breakpoint, then 'c' to continue till you reach it. Note that every time you 'c' and come back to the breakpoint you will stop again. Use 'B linenumber' to turn the breakpoint back off.<\/p>\n\n<p>So let's assume you've gotten to something like this:<\/p>\n\n<pre><code>my $obj = complex_function_returning_unknown_thing;\n<\/code><\/pre>\n\n<p>The debugger's just shown you this line, which says \"I have not executed this yet, but it is what I will do next.\" Enter 'n' to execute the subroutine, then use the 'x' command to look at the object: 'x $obj'. If it's big, you can say '|x $obj' which runs the output through a pager. To see what methods the object has, use 'm $obj'.<\/p>\n\n<p>There's a lot more to the debugger, but you can indeed use it for this kind of thing - you need to simply see the type of an object you're getting from some code and find out what methods the object you got has.<\/p>\n\n<p>It may be more useful to 'x' the object, and then go look at the source of the class the object's been blessed into to find out what you <em>should<\/em> do as opposed to what you <em>can<\/em> do. The 'x' command is pretty much 'print ref($obj)' crossed with Data::Dumper anyway.<\/p>\n","community_owned_date":null},{"owner":{"account_id":7714,"reputation":7366,"user_id":13467,"user_type":"registered","accept_rate":25,"profile_image":"https:\/\/www.gravatar.com\/avatar\/0daa23328fbc008f80a960674cd267cf?s=256&d=identicon&r=PG","display_name":"Alexandr Ciornii","link":"https:\/\/stackoverflow.com\/users\/13467\/alexandr-ciornii"},"is_accepted":false,"score":3,"last_activity_date":1266486735,"last_edit_date":null,"creation_date":1266486735,"answer_id":2287632,"question_id":196754,"content_license":"CC BY-SA 2.5","body_markdown":"It is overoptimization to skip loading IO::Handle.\r\n\r\n    use IO::Handle;\r\n    $fh-&gt;autoflush(1);\r\n\r\nis much more readable.\r\n","body":"<p>It is overoptimization to skip loading IO::Handle.<\/p>\n\n<pre><code>use IO::Handle;\n$fh-&gt;autoflush(1);\n<\/code><\/pre>\n\n<p>is much more readable.<\/p>\n","community_owned_date":null},{"owner":{"account_id":5807,"reputation":392681,"user_id":9530,"user_type":"registered","accept_rate":78,"profile_image":"https:\/\/www.gravatar.com\/avatar\/924800e76876546c5c575c0175e1f434?s=256&d=identicon&r=PG","display_name":"Adam Rosenfield","link":"https:\/\/stackoverflow.com\/users\/9530\/adam-rosenfield"},"is_accepted":false,"score":3,"last_activity_date":1270785520,"last_edit_date":1270785520.0,"creation_date":1270785136,"answer_id":2605006,"question_id":2604964,"content_license":"CC BY-SA 2.5","body_markdown":"sed might be able to do it, but it could be tricky.  Here&#39;s a Python script that does the same thing (note that it edits the file in-place, which is what I assume you want to do based on your sed script):\r\n\r\n    import re\r\n    \r\n    f = open(&#39;file.jpeg&#39;, &#39;rb+&#39;)\r\n    data = f.read()\r\n    match = re.search(&#39;(\\xff\\xd8[0-9A-fa-f]+)\\xff\\xd9&#39;, data)\r\n    if match:\r\n        result = match.group(1)\r\n        f.seek(0)\r\n        f.write(result)\r\n        f.truncate()\r\n    else:\r\n        print &#39;No match&#39;\r\n    f.close()\r\n\r\n","body":"<p>sed might be able to do it, but it could be tricky.  Here's a Python script that does the same thing (note that it edits the file in-place, which is what I assume you want to do based on your sed script):<\/p>\n\n<pre><code>import re\n\nf = open('file.jpeg', 'rb+')\ndata = f.read()\nmatch = re.search('(\\xff\\xd8[0-9A-fa-f]+)\\xff\\xd9', data)\nif match:\n    result = match.group(1)\n    f.seek(0)\n    f.write(result)\n    f.truncate()\nelse:\n    print 'No match'\nf.close()\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":44762,"reputation":331639,"user_id":131527,"user_type":"registered","accept_rate":83,"profile_image":"https:\/\/www.gravatar.com\/avatar\/c2618d986361c695497c1a875ea8da01?s=256&d=identicon&r=PG","display_name":"ghostdog74","link":"https:\/\/stackoverflow.com\/users\/131527\/ghostdog74"},"is_accepted":false,"score":3,"last_activity_date":1270785904,"last_edit_date":null,"creation_date":1270785904,"answer_id":2605028,"question_id":2604964,"content_license":"CC BY-SA 2.5","body_markdown":"`Is there a good way to do this `\r\n\r\nyes of course, use an image editing tool such as those from ImageMagick (search the net for linux jpeg , exif editor etc) that knows how to edit jpg metadata. I am sure you can find one tool that suits you. Don&#39;t try to do this the hard way. :)","body":"<p><code>Is there a good way to do this<\/code><\/p>\n\n<p>yes of course, use an image editing tool such as those from ImageMagick (search the net for linux jpeg , exif editor etc) that knows how to edit jpg metadata. I am sure you can find one tool that suits you. Don't try to do this the hard way. :)<\/p>\n","community_owned_date":null},{"owner":{"account_id":42701,"reputation":1,"user_id":124486,"user_type":"registered","accept_rate":46,"profile_image":"https:\/\/www.gravatar.com\/avatar\/605442f85418d858e2ce1e1aea2092bb?s=256&d=identicon&r=PG","display_name":"Evan Carroll","link":"https:\/\/stackoverflow.com\/users\/124486\/evan-carroll"},"is_accepted":false,"score":3,"last_activity_date":1276702816,"last_edit_date":null,"creation_date":1276702816,"answer_id":3054845,"question_id":3054822,"content_license":"CC BY-SA 2.5","body_markdown":"`$a` is not `$a_ref`, (`$a` is the first comparison variable given to a `sort{}`, and `$a[0]` is the 0th element of the `@a` array).Never use `$a`, or `$b` outside of a custom sort subroutine, and the `@a` and `@b` array should probably be avoided to too (there are plenty of better choices)...\r\n\r\nWhat you&#39;re doing is assigning to `$a_ref`, an anonymous array, and then pushing onto it `&quot;hello&quot;`, but printing out the first element of the `@a` array.","body":"<p><code>$a<\/code> is not <code>$a_ref<\/code>, (<code>$a<\/code> is the first comparison variable given to a <code>sort{}<\/code>, and <code>$a[0]<\/code> is the 0th element of the <code>@a<\/code> array).Never use <code>$a<\/code>, or <code>$b<\/code> outside of a custom sort subroutine, and the <code>@a<\/code> and <code>@b<\/code> array should probably be avoided to too (there are plenty of better choices)...<\/p>\n\n<p>What you're doing is assigning to <code>$a_ref<\/code>, an anonymous array, and then pushing onto it <code>\"hello\"<\/code>, but printing out the first element of the <code>@a<\/code> array.<\/p>\n","community_owned_date":null},{"owner":{"account_id":19655,"reputation":3076,"user_id":46235,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/b6b2db75928b76356930f7986c9908f4?s=256&d=identicon&r=PG","display_name":"MkV","link":"https:\/\/stackoverflow.com\/users\/46235\/mkv"},"is_accepted":false,"score":3,"last_activity_date":1283287739,"last_edit_date":null,"creation_date":1283287739,"answer_id":3613122,"question_id":3608957,"content_license":"CC BY-SA 2.5","body_markdown":"In addition to the\r\n\r\n    =begin comment\r\n    \r\n    multi-paragraph comments here\r\n    \r\n    =end comment\r\n    \r\n    =cut\r\n\r\nform in other answers, you can also do this:\r\n\r\n    =for comment\r\n    this is a single pod paragraph comment do\r\n    not put extra blank lines after =for.  the\r\n    comment ends after the first blank line and\r\n    regular pod continues until =cut\r\n    \r\n    Hello! C&lt;Yay!&gt;\r\n    \r\n    =cut\r\n\r\nthe comment paragraph will not appear in the pod output, but the Hello &quot;Yay!&quot; will.\r\n","body":"<p>In addition to the<\/p>\n\n<pre><code>=begin comment\n\nmulti-paragraph comments here\n\n=end comment\n\n=cut\n<\/code><\/pre>\n\n<p>form in other answers, you can also do this:<\/p>\n\n<pre><code>=for comment\nthis is a single pod paragraph comment do\nnot put extra blank lines after =for.  the\ncomment ends after the first blank line and\nregular pod continues until =cut\n\nHello! C&lt;Yay!&gt;\n\n=cut\n<\/code><\/pre>\n\n<p>the comment paragraph will not appear in the pod output, but the Hello \"Yay!\" will.<\/p>\n","community_owned_date":null},{"owner":{"account_id":2231,"reputation":1372,"user_id":3071,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/41442c2923d77aae300d2cb508d11761?s=256&d=identicon&r=PG","display_name":"Cagatay","link":"https:\/\/stackoverflow.com\/users\/3071\/cagatay"},"is_accepted":false,"score":3,"last_activity_date":1284490196,"last_edit_date":null,"creation_date":1284490196,"answer_id":3711965,"question_id":1359771,"content_license":"CC BY-SA 2.5","body_markdown":"I recently used [NYTProf][1] as a profiler for a large Perl application. It doesn&#39;t track memory usage, but it does trace all executed code paths which helps with finding out where leaks originate. If what you are leaking is scarce resources such as database connections, tracing where they are allocated and closed goes a long way towards finding leaks.\r\n\r\n\r\n[1]: http:\/\/open.blogs.nytimes.com\/2008\/03\/05\/the-new-york-times-perl-profiler\/","body":"<p>I recently used <a href=\"http:\/\/open.blogs.nytimes.com\/2008\/03\/05\/the-new-york-times-perl-profiler\/\" rel=\"nofollow noreferrer\">NYTProf<\/a> as a profiler for a large Perl application. It doesn't track memory usage, but it does trace all executed code paths which helps with finding out where leaks originate. If what you are leaking is scarce resources such as database connections, tracing where they are allocated and closed goes a long way towards finding leaks.<\/p>\n","community_owned_date":null},{"owner":{"account_id":167420,"reputation":326,"user_id":392204,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/8b17c7e8fb72fb8d8fc56c0f624f58ec?s=256&d=identicon&r=PG","display_name":"swilliams","link":"https:\/\/stackoverflow.com\/users\/392204\/swilliams"},"is_accepted":false,"score":3,"last_activity_date":1473335679,"last_edit_date":1473335679.0,"creation_date":1284756787,"answer_id":3738956,"question_id":3738836,"content_license":"CC BY-SA 3.0","body_markdown":"It depends on what you plan on doing with the variable whether or not it is defined; as of Perl 5.10, you can do this (from [perl51000delta][1]):\r\n\r\n&gt; A new operator \/\/ (defined-or) has been implemented. The following expression:\r\n&gt;\r\n     $a \/\/ $b\r\n&gt; is merely equivalent to\r\n&gt;\r\n    defined $a ? $a : $b\r\n\r\n&gt; and the statement\r\n&gt;\r\n    $c \/\/= $d;\r\n\r\n&gt; can now be used instead of\r\n&gt;\r\n    $c = $d unless defined $c;\r\n\r\n  [1]:  http:\/\/search.cpan.org\/~rgarcia\/perl-5.10.0\/pod\/perl5100delta.pod#Defined-or_operator\r\n","body":"<p>It depends on what you plan on doing with the variable whether or not it is defined; as of Perl 5.10, you can do this (from <a href=\"http:\/\/search.cpan.org\/~rgarcia\/perl-5.10.0\/pod\/perl5100delta.pod#Defined-or_operator\" rel=\"nofollow noreferrer\">perl51000delta<\/a>):<\/p>\n\n<blockquote>\n  <p>A new operator \/\/ (defined-or) has been implemented. The following expression:<\/p>\n\n<pre><code> $a \/\/ $b\n<\/code><\/pre>\n  \n  <p>is merely equivalent to<\/p>\n\n<pre><code>defined $a ? $a : $b\n<\/code><\/pre>\n  \n  <p>and the statement<\/p>\n\n<pre><code>$c \/\/= $d;\n<\/code><\/pre>\n  \n  <p>can now be used instead of<\/p>\n\n<pre><code>$c = $d unless defined $c;\n<\/code><\/pre>\n<\/blockquote>\n","community_owned_date":null},{"owner":{"account_id":6660,"reputation":29680,"user_id":11289,"user_type":"registered","accept_rate":75,"profile_image":"https:\/\/www.gravatar.com\/avatar\/a82922f943c2ed9dac3f2b00343a6a3b?s=256&d=identicon&r=PG","display_name":"Axeman","link":"https:\/\/stackoverflow.com\/users\/11289\/axeman"},"is_accepted":false,"score":3,"last_activity_date":1285356814,"last_edit_date":1285356814.0,"creation_date":1285353460,"answer_id":3789944,"question_id":3789284,"content_license":"CC BY-SA 2.5","body_markdown":"    use Params::Util qw&lt;_HASH _HASH0 _HASHLIKE&gt;;\r\n    \r\n    # for an unblessed hash with data\r\n    print &quot;$ref is a hash\\n&quot; if _HASH( $ref ); \r\n    # for an unblessed hash empty or not\r\n    print &quot;$ref is a hash\\n&quot; if _HASH0( $ref ); \r\n    # for a blessed hash OR some object that responds as a hash*\r\n    print &quot;$ref is hashlike\\n&quot; if _HASHLIKE( $ref );\r\n\r\n\\* through [`overload`][1] \r\n\r\nYou probably do not need the last one, though.\r\n\r\nsee [`Params::Util`][2]\r\n\r\n\r\n  [1]: http:\/\/search.cpan.org\/perldoc?overload\r\n  [2]: http:\/\/search.cpan.org\/perldoc?Params::Util\r\n","body":"<pre><code>use Params::Util qw&lt;_HASH _HASH0 _HASHLIKE&gt;;\n\n# for an unblessed hash with data\nprint \"$ref is a hash\\n\" if _HASH( $ref ); \n# for an unblessed hash empty or not\nprint \"$ref is a hash\\n\" if _HASH0( $ref ); \n# for a blessed hash OR some object that responds as a hash*\nprint \"$ref is hashlike\\n\" if _HASHLIKE( $ref );\n<\/code><\/pre>\n\n<p>* through <a href=\"http:\/\/search.cpan.org\/perldoc?overload\" rel=\"nofollow\"><code>overload<\/code><\/a> <\/p>\n\n<p>You probably do not need the last one, though.<\/p>\n\n<p>see <a href=\"http:\/\/search.cpan.org\/perldoc?Params%3a%3aUtil\" rel=\"nofollow\"><code>Params::Util<\/code><\/a><\/p>\n","community_owned_date":null},{"owner":{"account_id":33364,"reputation":9348,"user_id":93345,"user_type":"registered","accept_rate":82,"profile_image":"https:\/\/www.gravatar.com\/avatar\/79c40d2fd90802e59e9b9ee70cc84c5e?s=256&d=identicon&r=PG","display_name":"steamer25","link":"https:\/\/stackoverflow.com\/users\/93345\/steamer25"},"is_accepted":false,"score":3,"last_activity_date":1287432182,"last_edit_date":null,"creation_date":1287432182,"answer_id":3962913,"question_id":3951047,"content_license":"CC BY-SA 2.5","body_markdown":"If the data&#39;s not hierarchical or going to have data interspersed in e.g., the description \r\n`This product is great for &lt;targetDemo\/&gt; who love it&#39;s &lt;featureSet\/&gt;`), you may want to consider **Comma Separated Values** (**CSV**) or some other format like tab separated.\r\n\r\nIt&#39;s old school but it gets the job done without weighing your file down with a bunch of describing text. I.e., in XML, you&#39;d have the following non-value data for each feed.\r\n\r\n    &lt;feed name=&quot;&quot; price=&quot;&quot; type=&quot;&quot; description=&quot;&quot;\/&gt;\r\n\r\n...contrasted with CSV:\r\n\r\n    &quot;&quot;, , &quot;&quot;, &quot;&quot;\r\n\r\nIf you want, you can add header row at the top for documentation purposes.\r\n\r\nThere&#39;s also plenty of tooling around CSV, from command line utilities like awk to GUIs such as Excel.\r\n\r\nAnother alternative, if you don&#39;t really need the data to be editable via a text editor but don&#39;t want to deploy a more robust database service, would be [SQLite][1] which allows you to perform RDBMS-style CRUD operations on a flat binary file.\r\n\r\n  [1]: http:\/\/search.cpan.org\/~msergeant\/DBD-SQLite-0.31\/lib\/DBD\/SQLite.pm","body":"<p>If the data's not hierarchical or going to have data interspersed in e.g., the description \n<code>This product is great for &lt;targetDemo\/&gt; who love it's &lt;featureSet\/&gt;<\/code>), you may want to consider <strong>Comma Separated Values<\/strong> (<strong>CSV<\/strong>) or some other format like tab separated.<\/p>\n\n<p>It's old school but it gets the job done without weighing your file down with a bunch of describing text. I.e., in XML, you'd have the following non-value data for each feed.<\/p>\n\n<pre><code>&lt;feed name=\"\" price=\"\" type=\"\" description=\"\"\/&gt;\n<\/code><\/pre>\n\n<p>...contrasted with CSV:<\/p>\n\n<pre><code>\"\", , \"\", \"\"\n<\/code><\/pre>\n\n<p>If you want, you can add header row at the top for documentation purposes.<\/p>\n\n<p>There's also plenty of tooling around CSV, from command line utilities like awk to GUIs such as Excel.<\/p>\n\n<p>Another alternative, if you don't really need the data to be editable via a text editor but don't want to deploy a more robust database service, would be <a href=\"http:\/\/search.cpan.org\/~msergeant\/DBD-SQLite-0.31\/lib\/DBD\/SQLite.pm\" rel=\"nofollow\">SQLite<\/a> which allows you to perform RDBMS-style CRUD operations on a flat binary file.<\/p>\n","community_owned_date":null},{"owner":{"account_id":345736,"reputation":8391,"user_id":678832,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/7104df1adaa5312ca63476da7275d637?s=256&d=identicon&r=PG","display_name":"drysdam","link":"https:\/\/stackoverflow.com\/users\/678832\/drysdam"},"is_accepted":false,"score":3,"last_activity_date":1304349503,"last_edit_date":null,"creation_date":1304349503,"answer_id":5858924,"question_id":5858877,"content_license":"CC BY-SA 3.0","body_markdown":"If you want to execute programs installed on the machine, nothing beats bash. You can always make a system call from Perl or Python, but I find it to be a hassle to read return values, etc. \r\n\r\nAnd since you know it will work pretty much anywhere throughout all of of time...","body":"<p>If you want to execute programs installed on the machine, nothing beats bash. You can always make a system call from Perl or Python, but I find it to be a hassle to read return values, etc. <\/p>\n\n<p>And since you know it will work pretty much anywhere throughout all of of time...<\/p>\n","community_owned_date":null},{"owner":{"account_id":162366,"reputation":4143,"user_id":383779,"user_type":"registered","accept_rate":66,"profile_image":"https:\/\/www.gravatar.com\/avatar\/363c7fb07b9e121acdb8c40115b94e34?s=256&d=identicon&r=PG","display_name":"sergiol","link":"https:\/\/stackoverflow.com\/users\/383779\/sergiol"},"is_accepted":false,"score":3,"last_activity_date":1627053456,"last_edit_date":1627053456.0,"creation_date":1304457976,"answer_id":5875900,"question_id":1291931,"content_license":"CC BY-SA 4.0","body_markdown":"The question seems more debatable than answerable.\r\nRisking myself of being accused copyright abuser, I will post contents that I remember from the book &quot;Interactive programming environments&quot; by David R. Barstow, Howard E. Shrobe, Erik Sandewall.\r\n\r\nIt will not be exactly the same, as I have read the book many years ago and I&#39;ve jotted down it in another language.\r\n\r\n\r\nPRINCIPLES OF A GOOD INTERACTIVE PROGRAMMING ENVIRONMENT\r\n\t\r\n\r\n\t\r\n\t1: Know the user\r\n\t\t+ Know the previous knowledge and practice of the user\r\n\t\t\r\n\t2: Minimize the memorization\r\n\t\t+ Selection and not characters entering\r\n\t\t+ Names and not numbers\r\n\t\t+ Predictable behavior: the user should have a previous impression of what the system will do\r\n\t\t+ Possible access and changing of the parameters of the system\t\t\r\n\r\n\t3: Optimization of operations\r\n\t\t+ Fast execution of common operations\r\n\t\t+ Inertia of visualization: the screen should change the less possible\r\n\t\t+ Memorization of system operation in user&#39;s memory\r\n\t\t+ The meaning of specific operations should have a simple relationship with the state of the system\r\n\t\t+ The system must be prepared to accept more than 10 followed commands per second, so that it can operate on the user&#39;s muscular memory\r\n\t\t+ The system should be prepared to organize the parameters of a command\r\n\r\n\t4: Engineer for the errors\r\n\t\t+ Provide good error messages.\r\n\t\t+ Engineer it to remove away the common errors.\r\n\t\t+ The system should provide reversible actions.\r\n\t\t+ Redundancy: the operations should have more than one way of being done.\r\n\t\t+ Integrity of data structures.\r\n\r\n","body":"<p>The question seems more debatable than answerable.\nRisking myself of being accused copyright abuser, I will post contents that I remember from the book &quot;Interactive programming environments&quot; by David R. Barstow, Howard E. Shrobe, Erik Sandewall.<\/p>\n<p>It will not be exactly the same, as I have read the book many years ago and I've jotted down it in another language.<\/p>\n<p>PRINCIPLES OF A GOOD INTERACTIVE PROGRAMMING ENVIRONMENT<\/p>\n<pre><code>1: Know the user\n    + Know the previous knowledge and practice of the user\n    \n2: Minimize the memorization\n    + Selection and not characters entering\n    + Names and not numbers\n    + Predictable behavior: the user should have a previous impression of what the system will do\n    + Possible access and changing of the parameters of the system      \n\n3: Optimization of operations\n    + Fast execution of common operations\n    + Inertia of visualization: the screen should change the less possible\n    + Memorization of system operation in user's memory\n    + The meaning of specific operations should have a simple relationship with the state of the system\n    + The system must be prepared to accept more than 10 followed commands per second, so that it can operate on the user's muscular memory\n    + The system should be prepared to organize the parameters of a command\n\n4: Engineer for the errors\n    + Provide good error messages.\n    + Engineer it to remove away the common errors.\n    + The system should provide reversible actions.\n    + Redundancy: the operations should have more than one way of being done.\n    + Integrity of data structures.\n<\/code><\/pre>\n","community_owned_date":1304457976.0},{"owner":{"account_id":15081,"reputation":4269,"user_id":31493,"user_type":"registered","accept_rate":38,"profile_image":"https:\/\/www.gravatar.com\/avatar\/945258270639ca5c60f7bc5b778b3319?s=256&d=identicon&r=PG","display_name":"Daniel Serodio","link":"https:\/\/stackoverflow.com\/users\/31493\/daniel-serodio"},"is_accepted":false,"score":3,"last_activity_date":1311860879,"last_edit_date":null,"creation_date":1311860879,"answer_id":6860008,"question_id":6810977,"content_license":"CC BY-SA 3.0","body_markdown":"The purpose of minification is: (1) to minimize the amount of bytes transferred over the network; and (2) to speed up parsing (by the browser).\r\n\r\nThe equivalent of minification on the server side is byte-code compilation. In Python you have [&quot;Compiled&quot; Python][1] (`.pyc` and `.pyo`) files, in PHP you have [Zend Optimizer][2] and [PHP bytecode Compiler][3] and in Perl, [B::Bytecode][4]\r\n\r\nOn the server size, there&#39;s no &quot;transfer over the network&quot;, the (source) file is simply read from disk so the performance difference is much smaller in this regard; the main performance gain is from speeding up parsing.\r\n\r\n  [1]: http:\/\/docs.python.org\/release\/1.5.1p1\/tut\/node43.html\r\n  [2]: http:\/\/www.zend.com\/en\/products\/guard\/runtime-decoders\r\n  [3]: http:\/\/php.net\/manual\/en\/book.bcompiler.php\r\n  [4]: http:\/\/search.cpan.org\/~rurban\/B-C-1.34\/lib\/B\/Bytecode.pm","body":"<p>The purpose of minification is: (1) to minimize the amount of bytes transferred over the network; and (2) to speed up parsing (by the browser).<\/p>\n\n<p>The equivalent of minification on the server side is byte-code compilation. In Python you have <a href=\"http:\/\/docs.python.org\/release\/1.5.1p1\/tut\/node43.html\" rel=\"nofollow\">\"Compiled\" Python<\/a> (<code>.pyc<\/code> and <code>.pyo<\/code>) files, in PHP you have <a href=\"http:\/\/www.zend.com\/en\/products\/guard\/runtime-decoders\" rel=\"nofollow\">Zend Optimizer<\/a> and <a href=\"http:\/\/php.net\/manual\/en\/book.bcompiler.php\" rel=\"nofollow\">PHP bytecode Compiler<\/a> and in Perl, <a href=\"http:\/\/search.cpan.org\/~rurban\/B-C-1.34\/lib\/B\/Bytecode.pm\" rel=\"nofollow\">B::Bytecode<\/a><\/p>\n\n<p>On the server size, there's no \"transfer over the network\", the (source) file is simply read from disk so the performance difference is much smaller in this regard; the main performance gain is from speeding up parsing.<\/p>\n","community_owned_date":null},{"owner":{"account_id":232399,"reputation":32871,"user_id":497208,"user_type":"registered","accept_rate":76,"profile_image":"https:\/\/www.gravatar.com\/avatar\/f53ec83b7a4a74ef31eabd1d86b716e0?s=256&d=identicon&r=PG","display_name":"Jakub M.","link":"https:\/\/stackoverflow.com\/users\/497208\/jakub-m"},"is_accepted":false,"score":3,"last_activity_date":1413995293,"last_edit_date":1413995293.0,"creation_date":1313075308,"answer_id":7028296,"question_id":7028250,"content_license":"CC BY-SA 3.0","body_markdown":"    open( my $file, &quot;x.txt&quot;);\r\n    $line = &lt;$file&gt;;","body":"<pre><code>open( my $file, \"x.txt\");\n$line = &lt;$file&gt;;\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":9417,"reputation":96497,"user_id":17389,"user_type":"registered","accept_rate":38,"profile_image":"https:\/\/www.gravatar.com\/avatar\/cd06d1314817ce946ab796af8750b56a?s=256&d=identicon&r=PG","display_name":"ysth","link":"https:\/\/stackoverflow.com\/users\/17389\/ysth"},"is_accepted":false,"score":3,"last_activity_date":1338296404,"last_edit_date":null,"creation_date":1338296404,"answer_id":10799708,"question_id":10799344,"content_license":"CC BY-SA 3.0","body_markdown":"&gt; I get the following error when I try the second example:\r\n&gt;        &quot;syntax error at test.pl line 3, near &quot;)[&quot;\r\n\r\nNo, if you have warnings enabled as you should, you get:\r\n\r\n    print (...) interpreted as function at test.pl line 3.\r\n    syntax error at test.pl line 3, near &quot;)[&quot;\r\n\r\nwhich should be a big clue as to your problem.","body":"<blockquote>\n  <p>I get the following error when I try the second example:\n         \"syntax error at test.pl line 3, near \")[\"<\/p>\n<\/blockquote>\n\n<p>No, if you have warnings enabled as you should, you get:<\/p>\n\n<pre><code>print (...) interpreted as function at test.pl line 3.\nsyntax error at test.pl line 3, near \")[\"\n<\/code><\/pre>\n\n<p>which should be a big clue as to your problem.<\/p>\n","community_owned_date":null},{"owner":{"account_id":1714056,"reputation":4326,"user_id":1571536,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/5f96ec6910a31510b69a749172d53800?s=256&d=identicon&r=PG","display_name":"Stephane Rouberol","link":"https:\/\/stackoverflow.com\/users\/1571536\/stephane-rouberol"},"is_accepted":false,"score":3,"last_activity_date":1344015871,"last_edit_date":1344015871.0,"creation_date":1343980417,"answer_id":11791547,"question_id":11790535,"content_license":"CC BY-SA 3.0","body_markdown":"Assuming your html code is stored in a mycode.html file, here is a bash way:\r\n\r\n    paste -d: &lt;(grep &#39;&lt;th&gt;&#39; mycode.html | sed -e &#39;s,&lt;\/*th&gt;,,g&#39;) &lt;(grep &#39;&lt;td&gt;&#39; mycode.html | sed -e &#39;s,&lt;\/*td&gt;,,g&#39;)\r\n\r\nnote: the output is not perfectly aligned","body":"<p>Assuming your html code is stored in a mycode.html file, here is a bash way:<\/p>\n\n<pre><code>paste -d: &lt;(grep '&lt;th&gt;' mycode.html | sed -e 's,&lt;\/*th&gt;,,g') &lt;(grep '&lt;td&gt;' mycode.html | sed -e 's,&lt;\/*td&gt;,,g')\n<\/code><\/pre>\n\n<p>note: the output is not perfectly aligned<\/p>\n","community_owned_date":null},{"owner":{"account_id":1749463,"reputation":31,"user_id":1598904,"user_type":"unregistered","profile_image":"https:\/\/www.gravatar.com\/avatar\/4f8d127193db7d27516943a5096ed9b2?s=256&d=identicon&r=PG","display_name":"Linux User","link":"https:\/\/stackoverflow.com\/users\/1598904\/linux-user"},"is_accepted":false,"score":3,"last_activity_date":1349040141,"last_edit_date":1349040141.0,"creation_date":1344969393,"answer_id":11958627,"question_id":1384398,"content_license":"CC BY-SA 3.0","body_markdown":"If the script was edited in Windows, or any other OS with different &quot;native&quot; line endings, it could be as simple as a `CR(^M)` &quot;hiding&quot; at the end of the first line.  Vi improved can be set up to *hide* this non native line ending.  In my case I simply re-typed the offending first line in VI and the error went away.","body":"<p>If the script was edited in Windows, or any other OS with different \"native\" line endings, it could be as simple as a <code>CR(^M)<\/code> \"hiding\" at the end of the first line.  Vi improved can be set up to <em>hide<\/em> this non native line ending.  In my case I simply re-typed the offending first line in VI and the error went away.<\/p>\n","community_owned_date":null},{"owner":{"account_id":1007,"reputation":33924,"user_id":1337,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/72de240484e389dbedb6a3e428b9f0c1?s=256&d=identicon&r=PG","display_name":"Brad Gilbert","link":"https:\/\/stackoverflow.com\/users\/1337\/brad-gilbert"},"is_accepted":false,"score":3,"last_activity_date":1377356553,"last_edit_date":1592644375.0,"creation_date":1376962759,"answer_id":18325685,"question_id":8933031,"content_license":"CC BY-SA 4.0","body_markdown":"I assume that `$model-&gt;test` is supposed to return a true or false value.\n\nUnless it specifically states that the false value is `undef`, the method could be rewritten to start returning some other false value instead.\nWhich would break anything that only checks if the value is defined.  \n( I think it is a bug that the method returns `undef` instead of the canonical false value. )\n\nSo the best way to set `$review` is to test the truthfulness of the returned value; not it&#39;s definedness.\n\n    my $review = $model-&gt;test ? 1 : &#39;&#39;;\n\nI would like to point out that this still has a bug in it.\nIf you want to be able to use the value as a number, it will emit warnings if it was false.\n\nTo fix that you should return `!1` (canonical false value), which will return a value that is the string `&#39;&#39;`, but also has the numerical value of 0.\n\n    my $review = $model-&gt;test ? 1 : !1;\n\nNotice that it could be simplified to just:\n\n    my $review = !! $model-&gt;test; # invert it twice\n\n---\n\nIf you only want to change the value only when it is false, you could use the or operator [`||`][||].  \n\n    my $review = $model-&gt;test || !1;\n\n---\n\nIf you really only want to know if it is defined, or not why don&#39;t you just use [`defined`][defined].\n\n    my $review = defined $model-&gt;test;\n\n---\n\nIf you want to change the value only when it is undefined, and you have Perl 5.10 or newer you could use the [defined-or operator (`\/\/`)][\/\/].\n\n    my $review = $model-&gt;test \/\/ !1;\n\nOn an older Perl, that would require more than one [statement][perlsyn].\n\n    my $review = $model-&gt;test;\n    $review = !1 unless defined $review;\n\n\n\n\n[\/\/]: http:\/\/perldoc.perl.org\/perlop.html#Logical-Defined-Or &quot;perldoc perlop&quot;\n[||]: http:\/\/perldoc.perl.org\/perlop.html#C-style-Logical-Or &quot;perldoc perlop&quot;\n\n[overload]: http:\/\/perldoc.perl.org\/overload.html &quot;perldoc overload&quot;\n[perlsyn]: http:\/\/perldoc.perl.org\/perlsyn.html &quot;perldoc perlsyn&quot;\n[defined]: http:\/\/perldoc.perl.org\/functions\/defined.html &quot;perldoc -f defined&quot;","body":"<p>I assume that <code>$model-&gt;test<\/code> is supposed to return a true or false value.<\/p>\n<p>Unless it specifically states that the false value is <code>undef<\/code>, the method could be rewritten to start returning some other false value instead.\nWhich would break anything that only checks if the value is defined.<br \/>\n( I think it is a bug that the method returns <code>undef<\/code> instead of the canonical false value. )<\/p>\n<p>So the best way to set <code>$review<\/code> is to test the truthfulness of the returned value; not it's definedness.<\/p>\n<pre><code>my $review = $model-&gt;test ? 1 : '';\n<\/code><\/pre>\n<p>I would like to point out that this still has a bug in it.\nIf you want to be able to use the value as a number, it will emit warnings if it was false.<\/p>\n<p>To fix that you should return <code>!1<\/code> (canonical false value), which will return a value that is the string <code>''<\/code>, but also has the numerical value of 0.<\/p>\n<pre><code>my $review = $model-&gt;test ? 1 : !1;\n<\/code><\/pre>\n<p>Notice that it could be simplified to just:<\/p>\n<pre><code>my $review = !! $model-&gt;test; # invert it twice\n<\/code><\/pre>\n<hr \/>\n<p>If you only want to change the value only when it is false, you could use the or operator <a href=\"http:\/\/perldoc.perl.org\/perlop.html#C-style-Logical-Or\" rel=\"nofollow noreferrer\" title=\"perldoc perlop\"><code>||<\/code><\/a>.<\/p>\n<pre><code>my $review = $model-&gt;test || !1;\n<\/code><\/pre>\n<hr \/>\n<p>If you really only want to know if it is defined, or not why don't you just use <a href=\"http:\/\/perldoc.perl.org\/functions\/defined.html\" rel=\"nofollow noreferrer\" title=\"perldoc -f defined\"><code>defined<\/code><\/a>.<\/p>\n<pre><code>my $review = defined $model-&gt;test;\n<\/code><\/pre>\n<hr \/>\n<p>If you want to change the value only when it is undefined, and you have Perl 5.10 or newer you could use the <a href=\"http:\/\/perldoc.perl.org\/perlop.html#Logical-Defined-Or\" rel=\"nofollow noreferrer\" title=\"perldoc perlop\">defined-or operator (<code>\/\/<\/code>)<\/a>.<\/p>\n<pre><code>my $review = $model-&gt;test \/\/ !1;\n<\/code><\/pre>\n<p>On an older Perl, that would require more than one <a href=\"http:\/\/perldoc.perl.org\/perlsyn.html\" rel=\"nofollow noreferrer\" title=\"perldoc perlsyn\">statement<\/a>.<\/p>\n<pre><code>my $review = $model-&gt;test;\n$review = !1 unless defined $review;\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":2653634,"reputation":14713,"user_id":2294775,"user_type":"registered","accept_rate":80,"profile_image":"https:\/\/i.stack.imgur.com\/sVnmZ.jpg?s=256&g=1","display_name":"Glitch Desire","link":"https:\/\/stackoverflow.com\/users\/2294775\/glitch-desire"},"is_accepted":false,"score":3,"last_activity_date":1386945776,"last_edit_date":null,"creation_date":1386945776,"answer_id":20569158,"question_id":20568836,"content_license":"CC BY-SA 3.0","body_markdown":"DBI isn&#39;t in your `@INC` path, which tells perl where to look for custom modules. This is probably because you&#39;ve installed them using the `cpan` tool as a non-root user, which won&#39;t have write access to the default include paths.\r\n\r\nYou will need to locate `DBI.pm` and other packages, and move them into your `@INC` path.\r\n\r\nAlternatively, find the packages you&#39;ve installed and add the install path into your library path, for one time use:\r\n\r\n    PERL5LIB=\/path\/to\/modules perl yourscript.pl\r\n\r\nAnd for a more permanent solution, add this to `~\/.bashrc`:\r\n\r\n    export PERL5LIB=\/path\/to\/modules","body":"<p>DBI isn't in your <code>@INC<\/code> path, which tells perl where to look for custom modules. This is probably because you've installed them using the <code>cpan<\/code> tool as a non-root user, which won't have write access to the default include paths.<\/p>\n\n<p>You will need to locate <code>DBI.pm<\/code> and other packages, and move them into your <code>@INC<\/code> path.<\/p>\n\n<p>Alternatively, find the packages you've installed and add the install path into your library path, for one time use:<\/p>\n\n<pre><code>PERL5LIB=\/path\/to\/modules perl yourscript.pl\n<\/code><\/pre>\n\n<p>And for a more permanent solution, add this to <code>~\/.bashrc<\/code>:<\/p>\n\n<pre><code>export PERL5LIB=\/path\/to\/modules\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":166649,"reputation":95334,"user_id":390913,"user_type":"registered","accept_rate":93,"profile_image":"https:\/\/www.gravatar.com\/avatar\/87a2a7e9ea54bcd1a6c8f09f8c2e8f3b?s=256&d=identicon&r=PG","display_name":"perreal","link":"https:\/\/stackoverflow.com\/users\/390913\/perreal"},"is_accepted":false,"score":3,"last_activity_date":1409300480,"last_edit_date":1409300480.0,"creation_date":1409299069,"answer_id":25563981,"question_id":25563891,"content_license":"CC BY-SA 3.0","body_markdown":"You can use look-ahead instead of look-behind:\r\n\r\n    \/(?:eat_(apple|pear|orange)_)(?=today|yesterday)\/g\r\n\r\nand in general, there is an alternative way to describe things that naively seem to require look-behind.","body":"<p>You can use look-ahead instead of look-behind:<\/p>\n\n<pre><code>\/(?:eat_(apple|pear|orange)_)(?=today|yesterday)\/g\n<\/code><\/pre>\n\n<p>and in general, there is an alternative way to describe things that naively seem to require look-behind.<\/p>\n","community_owned_date":null},{"owner":{"account_id":1186121,"reputation":21817,"user_id":1160036,"user_type":"registered","accept_rate":89,"profile_image":"https:\/\/i.stack.imgur.com\/4AkVQ.jpg?s=256&g=1","display_name":"Despertar","link":"https:\/\/stackoverflow.com\/users\/1160036\/despertar"},"is_accepted":false,"score":3,"last_activity_date":1426649034,"last_edit_date":null,"creation_date":1426649034,"answer_id":29113613,"question_id":22307610,"content_license":"CC BY-SA 3.0","body_markdown":"If using Suexec, ensure that the script and its directory are owned by the same user you specified in suexec. \r\n\r\nIn addition, ensure that the user running the cgi script has permissions execute permissions to the file AND the program specified in the shebang. \r\n\r\nFor example if my cgi script starts with \r\n\r\n    #! \/usr\/bin\/cgirunner\r\n\r\nThen the user needs permissions to execute \/usr\/bin\/cgirunner.","body":"<p>If using Suexec, ensure that the script and its directory are owned by the same user you specified in suexec. <\/p>\n\n<p>In addition, ensure that the user running the cgi script has permissions execute permissions to the file AND the program specified in the shebang. <\/p>\n\n<p>For example if my cgi script starts with <\/p>\n\n<pre><code>#! \/usr\/bin\/cgirunner\n<\/code><\/pre>\n\n<p>Then the user needs permissions to execute \/usr\/bin\/cgirunner.<\/p>\n","community_owned_date":null},{"owner":{"account_id":7294151,"reputation":1,"user_id":5559618,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/adc1d1ca8c83423d8a6b9b985a82728d?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"madnordski","link":"https:\/\/stackoverflow.com\/users\/5559618\/madnordski"},"is_accepted":false,"score":3,"last_activity_date":1447434320,"last_edit_date":1447434320.0,"creation_date":1447433085,"answer_id":33697708,"question_id":3534714,"content_license":"CC BY-SA 3.0","body_markdown":"`QW()` is often used to print column headings using `join()` in Perl.  Column heads in the real-world are sometimes long -- making `join(&quot;\\t&quot;, qw())` very useful because it&#39;s easier to read and helps to eliminate typos (e.g. `&quot;x&quot;,&quot;y&quot;` or `&quot;x\\ty&quot;`).  Below is a related approach in real-world Python:\r\n\r\n        print(&quot;\\t&quot;.join(&#39;&#39;&#39;PubChemId Column ESImode Library.mzmed\r\n          Library.rtmed Metabolite newID Feature.mzmed Feature.rtmed\r\n          Count ppmDiff rtDiff&#39;&#39;&#39;.split()))\r\n\r\nThe triple quote string is a weird thing because it doubles as a comment.  In this context, however, it is a string and it frees us from having to worry about line breaks (as `qw()` would).\r\n\r\nThanks to the previous replies for reveling this approach.","body":"<p><code>QW()<\/code> is often used to print column headings using <code>join()<\/code> in Perl.  Column heads in the real-world are sometimes long -- making <code>join(\"\\t\", qw())<\/code> very useful because it's easier to read and helps to eliminate typos (e.g. <code>\"x\",\"y\"<\/code> or <code>\"x\\ty\"<\/code>).  Below is a related approach in real-world Python:<\/p>\n\n<pre><code>    print(\"\\t\".join('''PubChemId Column ESImode Library.mzmed\n      Library.rtmed Metabolite newID Feature.mzmed Feature.rtmed\n      Count ppmDiff rtDiff'''.split()))\n<\/code><\/pre>\n\n<p>The triple quote string is a weird thing because it doubles as a comment.  In this context, however, it is a string and it frees us from having to worry about line breaks (as <code>qw()<\/code> would).<\/p>\n\n<p>Thanks to the previous replies for reveling this approach.<\/p>\n","community_owned_date":1447433085.0},{"owner":{"account_id":9222686,"reputation":696,"user_id":6851483,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/402b5d75719526e8a2dabc5249255140?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"DinoStray","link":"https:\/\/stackoverflow.com\/users\/6851483\/dinostray"},"is_accepted":false,"score":3,"last_activity_date":1493003181,"last_edit_date":1493003181.0,"creation_date":1493002649,"answer_id":43579099,"question_id":23314652,"content_license":"CC BY-SA 3.0","body_markdown":"If only one perl version, \r\n\r\n    sudo apt-get install libswitch-perl \r\n\r\ncan solve the problem.\r\n\r\nBut if there are multi-versions perl in your system like me, first choose 5.18 version for aosp v4.x, then use cpan command install Swtich, like @4aRk Kn1gh7 &#39;s answer.\r\n\r\nAlso notice that, in some perl script first line is:\r\n\r\n    #! \/usr\/bin\/perl\r\n\r\nso make sure the \/usr\/bin\/perl is the correct perl version you choose.","body":"<p>If only one perl version, <\/p>\n\n<pre><code>sudo apt-get install libswitch-perl \n<\/code><\/pre>\n\n<p>can solve the problem.<\/p>\n\n<p>But if there are multi-versions perl in your system like me, first choose 5.18 version for aosp v4.x, then use cpan command install Swtich, like @4aRk Kn1gh7 's answer.<\/p>\n\n<p>Also notice that, in some perl script first line is:<\/p>\n\n<pre><code>#! \/usr\/bin\/perl\n<\/code><\/pre>\n\n<p>so make sure the \/usr\/bin\/perl is the correct perl version you choose.<\/p>\n","community_owned_date":null},{"owner":{"account_id":13344416,"reputation":31,"user_id":9631642,"user_type":"unregistered","profile_image":"https:\/\/www.gravatar.com\/avatar\/a385ae89a252fed7baf02591912e38f8?s=256&d=identicon&r=PG","display_name":"Tony Goertz","link":"https:\/\/stackoverflow.com\/users\/9631642\/tony-goertz"},"is_accepted":false,"score":3,"last_activity_date":1611583634,"last_edit_date":1611583634.0,"creation_date":1523462350,"answer_id":49779650,"question_id":22307610,"content_license":"CC BY-SA 4.0","body_markdown":"Internal error is due to a  HIDDEN  character  at end of shebang line  !! \r\nie line  `#!\/usr\/bin\/perl`     \r\n\r\nBy adding   `-`   or  `-w`  at end  moves the character away from &quot;perl&quot;  allowing the path to the perl processor to be found and script to execute.  \r\n\r\nHIDDEN character is created by the editor used to create the script \r\n\r\n","body":"<p>Internal error is due to a  HIDDEN  character  at end of shebang line  !!\nie line  <code>#!\/usr\/bin\/perl<\/code><\/p>\n<p>By adding   <code>-<\/code>   or  <code>-w<\/code>  at end  moves the character away from &quot;perl&quot;  allowing the path to the perl processor to be found and script to execute.<\/p>\n<p>HIDDEN character is created by the editor used to create the script<\/p>\n","community_owned_date":null},{"owner":{"account_id":5473,"reputation":130134,"user_id":2766176,"user_type":"registered","accept_rate":61,"profile_image":"https:\/\/www.gravatar.com\/avatar\/edd8638efe875601bfe394a8aea5b16d?s=256&d=identicon&r=PG","display_name":"brian d foy","link":"https:\/\/stackoverflow.com\/users\/2766176\/brian-d-foy"},"is_accepted":false,"score":3,"last_activity_date":1667225982,"last_edit_date":1667225982.0,"creation_date":1620118366,"answer_id":67381595,"question_id":25563891,"content_license":"CC BY-SA 4.0","body_markdown":"Perl v5.30 adds [experimental variable-width lookbehinds](https:\/\/www.effectiveperlprogramming.com\/2020\/03\/use-a-variable-width-lookbehind-if-it-wont-match-more-than-255-characters\/) in situations where the regex engine knows that the length will be 255 characters or less (so, no unbounded quantifiers, for example). \r\n\r\nThis now works:\r\n\r\n```lang-perl\r\nuse v5.30;\r\nuse experimental qw(vlb);\r\n\r\n$_ = &#39;eat_apple_today&#39;;\r\nsay &quot;Matched!&quot; if \/(?&lt;=eat_(apple|pear|orange)_)today|yesterday\/g;\r\n```\r\n\r\n","body":"<p>Perl v5.30 adds <a href=\"https:\/\/www.effectiveperlprogramming.com\/2020\/03\/use-a-variable-width-lookbehind-if-it-wont-match-more-than-255-characters\/\" rel=\"nofollow noreferrer\">experimental variable-width lookbehinds<\/a> in situations where the regex engine knows that the length will be 255 characters or less (so, no unbounded quantifiers, for example).<\/p>\n<p>This now works:<\/p>\n<pre class=\"lang-perl prettyprint-override\"><code>use v5.30;\nuse experimental qw(vlb);\n\n$_ = 'eat_apple_today';\nsay &quot;Matched!&quot; if \/(?&lt;=eat_(apple|pear|orange)_)today|yesterday\/g;\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":68984,"reputation":7436,"user_id":200985,"user_type":"registered","accept_rate":97,"profile_image":"https:\/\/www.gravatar.com\/avatar\/0a07a11efd94fa8a87043f7ef91cd08d?s=256&d=identicon&r=PG","display_name":"lmat - Reinstate Monica","link":"https:\/\/stackoverflow.com\/users\/200985\/lmat-reinstate-monica"},"is_accepted":false,"score":3,"last_activity_date":1622056010,"last_edit_date":null,"creation_date":1622056010,"answer_id":67711261,"question_id":8523159,"content_license":"CC BY-SA 4.0","body_markdown":"Use `ln` of course:\r\n\r\n```\r\nfor i in *; do # or whatever pattern you&#39;re wanting to match\r\n    ln -sr &quot;$(readlink &quot;$i&quot;)&quot; newdir\/&quot;$i&quot;;\r\ndone;\r\n```\r\n\r\nI was surprised this works, but `LN(1)` must be smart enough to take note of what&#39;s going on and help you out! I even tried it with a &quot;newdir&quot; of `..\/somethingelse` (which should be a no-op in the link re-writing) and `..` (which will remove a `..` from the link target), and it worked wonderfully.","body":"<p>Use <code>ln<\/code> of course:<\/p>\n<pre><code>for i in *; do # or whatever pattern you're wanting to match\n    ln -sr &quot;$(readlink &quot;$i&quot;)&quot; newdir\/&quot;$i&quot;;\ndone;\n<\/code><\/pre>\n<p>I was surprised this works, but <code>LN(1)<\/code> must be smart enough to take note of what's going on and help you out! I even tried it with a &quot;newdir&quot; of <code>..\/somethingelse<\/code> (which should be a no-op in the link re-writing) and <code>..<\/code> (which will remove a <code>..<\/code> from the link target), and it worked wonderfully.<\/p>\n","community_owned_date":null},{"owner":{"user_type":"does_not_exist","display_name":"user3458"},"is_accepted":false,"score":2,"last_activity_date":1221771497,"last_edit_date":null,"creation_date":1221771497,"answer_id":96885,"question_id":96848,"content_license":"CC BY-SA 2.5","body_markdown":"=&gt; operator interprets its left side as a &quot;string&quot;, the way qw() does.\r\n\r\nTry using \r\n\r\n    my %x = ( X, &#39;X&#39;);","body":"<p>=> operator interprets its left side as a \"string\", the way qw() does.<\/p>\n\n<p>Try using <\/p>\n\n<pre><code>my %x = ( X, 'X');\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":4839,"reputation":6253,"user_id":7476,"user_type":"registered","accept_rate":50,"profile_image":"https:\/\/www.gravatar.com\/avatar\/4cfed0a313101a06fca6f6675dc3e132?s=256&d=identicon&r=PG","display_name":"Frosty","link":"https:\/\/stackoverflow.com\/users\/7476\/frosty"},"is_accepted":false,"score":2,"last_activity_date":1221771505,"last_edit_date":null,"creation_date":1221771505,"answer_id":96888,"question_id":96848,"content_license":"CC BY-SA 2.5","body_markdown":"One way is to encapsulate X as (X):\r\n\r\n    my %x ( (X) =&gt; 1 );\r\n\r\nAnother option is to do away with &#39;=&gt;&#39; and use &#39;,&#39; instead:\r\n\r\n    my %x ( X, 1 );\r\n\r\n\r\n","body":"<p>One way is to encapsulate X as (X):<\/p>\n\n<pre><code>my %x ( (X) =&gt; 1 );\n<\/code><\/pre>\n\n<p>Another option is to do away with '=>' and use ',' instead:<\/p>\n\n<pre><code>my %x ( X, 1 );\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"user_type":"does_not_exist","display_name":"lexu"},"is_accepted":false,"score":2,"last_activity_date":1269634642,"last_edit_date":1269634642.0,"creation_date":1225099340,"answer_id":239398,"question_id":177122,"content_license":"CC BY-SA 2.5","body_markdown":"The most cost effective method might be, to consider faster hardware (=&gt; appropriate hardware architecture). I am not talking faster CPUs, but rather faster disks, faster networking .. faster anything, really, that speeds up I\/O.\r\n\r\nI experienced this many years ago, when we moved a XML-parsing based application (bleeding edge technology at that time&amp;lt;g&gt;) from a (fast and reliable!) Windows Server to a dedicated, albeit somewhat outdated, SUN platform with faster I\/O all around. \r\n\r\nAs always, consider \r\n\r\n  - developer performance (how long does it take to code, how complex is the problem, is the result maintainable), \r\n  - Hardware performance, \r\n  - Software performance \r\n\r\nand improve where most (cost!) effective for the problem at hand...\r\n\r\n","body":"<p>The most cost effective method might be, to consider faster hardware (=> appropriate hardware architecture). I am not talking faster CPUs, but rather faster disks, faster networking .. faster anything, really, that speeds up I\/O.<\/p>\n\n<p>I experienced this many years ago, when we moved a XML-parsing based application (bleeding edge technology at that time&lt;g>) from a (fast and reliable!) Windows Server to a dedicated, albeit somewhat outdated, SUN platform with faster I\/O all around. <\/p>\n\n<p>As always, consider <\/p>\n\n<ul>\n<li>developer performance (how long does it take to code, how complex is the problem, is the result maintainable), <\/li>\n<li>Hardware performance, <\/li>\n<li>Software performance <\/li>\n<\/ul>\n\n<p>and improve where most (cost!) effective for the problem at hand...<\/p>\n","community_owned_date":null},{"owner":{"account_id":16645,"reputation":3146,"user_id":36499,"user_type":"registered","accept_rate":87,"profile_image":"https:\/\/www.gravatar.com\/avatar\/ce5cfc19a6e855d1d41b9d18b0b96d91?s=256&d=identicon&r=PG","display_name":"singingfish","link":"https:\/\/stackoverflow.com\/users\/36499\/singingfish"},"is_accepted":false,"score":2,"last_activity_date":1259001288,"last_edit_date":1259001288.0,"creation_date":1233177237,"answer_id":489410,"question_id":487213,"content_license":"CC BY-SA 2.5","body_markdown":"You could also look at [XML::Liberal][1] which uses LibXML underneath.\r\n\r\n\r\n  [1]: http:\/\/search.cpan.org\/dist\/XML-Liberal\/lib\/XML\/Liberal.pm","body":"<p>You could also look at <a href=\"http:\/\/search.cpan.org\/dist\/XML-Liberal\/lib\/XML\/Liberal.pm\" rel=\"nofollow noreferrer\">XML::Liberal<\/a> which uses LibXML underneath.<\/p>\n","community_owned_date":null},{"owner":{"account_id":24020,"reputation":73831,"user_id":60777,"user_type":"registered","accept_rate":77,"profile_image":"https:\/\/www.gravatar.com\/avatar\/4e698bea14e1d5f5c86d0359e5f24d28?s=256&d=identicon&r=PG","display_name":"Chris Lutz","link":"https:\/\/stackoverflow.com\/users\/60777\/chris-lutz"},"is_accepted":false,"score":2,"last_activity_date":1236924836,"last_edit_date":1236924836.0,"creation_date":1236924225,"answer_id":641623,"question_id":641442,"content_license":"CC BY-SA 2.5","body_markdown":"Adding to the love of `map` and `grep`, we can write a simple command-line parser.\r\n\r\n    my %opts = map { $_ =&gt; 1 } grep { \/^-\/ } @ARGV;\r\n\r\nIf we want, we can set each flag to it&#39;s index in @ARGV:\r\n\r\n    my %opts = map { $ARGV[$_] =&gt; $_ } grep { $ARGV[$_] =~ \/^-\/ } 0 .. $#ARGV;\r\n\r\nThat way, if a flag has an argument, we can get the argument like this:\r\n\r\n    if( defined( $opts{-e} ) ) {\r\n      my $arg = $ARGV[ $opts{-e} ];\r\n      # do -e stuff for $arg\r\n    }\r\n\r\nOf course, some people will cry that we&#39;re reinventing the wheel and we should use getopt or some variant thereof, but honestly, this was a fairly easy wheel to reinvent. Plus, I don&#39;t like getopt.\r\n\r\nIf you don&#39;t like how long some of those lines are, you can always use intermediate variables or just convenient line breaks (hey, Python fanatics? You hear that? We can put one line of code across two lines and it still works!) to make it look better:\r\n\r\n    my %opts = map  { $ARGV[$_] =&gt; $_   }\r\n               grep { $ARGV[$_] =~ \/^-\/ } 0 .. $#ARGV;","body":"<p>Adding to the love of <code>map<\/code> and <code>grep<\/code>, we can write a simple command-line parser.<\/p>\n\n<pre><code>my %opts = map { $_ =&gt; 1 } grep { \/^-\/ } @ARGV;\n<\/code><\/pre>\n\n<p>If we want, we can set each flag to it's index in @ARGV:<\/p>\n\n<pre><code>my %opts = map { $ARGV[$_] =&gt; $_ } grep { $ARGV[$_] =~ \/^-\/ } 0 .. $#ARGV;\n<\/code><\/pre>\n\n<p>That way, if a flag has an argument, we can get the argument like this:<\/p>\n\n<pre><code>if( defined( $opts{-e} ) ) {\n  my $arg = $ARGV[ $opts{-e} ];\n  # do -e stuff for $arg\n}\n<\/code><\/pre>\n\n<p>Of course, some people will cry that we're reinventing the wheel and we should use getopt or some variant thereof, but honestly, this was a fairly easy wheel to reinvent. Plus, I don't like getopt.<\/p>\n\n<p>If you don't like how long some of those lines are, you can always use intermediate variables or just convenient line breaks (hey, Python fanatics? You hear that? We can put one line of code across two lines and it still works!) to make it look better:<\/p>\n\n<pre><code>my %opts = map  { $ARGV[$_] =&gt; $_   }\n           grep { $ARGV[$_] =~ \/^-\/ } 0 .. $#ARGV;\n<\/code><\/pre>\n","community_owned_date":1236924225.0},{"owner":{"account_id":31530,"reputation":21539,"user_id":86643,"user_type":"registered","accept_rate":45,"profile_image":"https:\/\/www.gravatar.com\/avatar\/2639bbcfac32701e7efc6eeffec5a489?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"denis","link":"https:\/\/stackoverflow.com\/users\/86643\/denis"},"is_accepted":false,"score":2,"last_activity_date":1238174642,"last_edit_date":1238174642.0,"creation_date":1237284556,"answer_id":653629,"question_id":410163,"content_license":"CC BY-SA 2.5","body_markdown":"If you do use `easy_install`, I&#39;d suggest installing packages by doing..\r\n\r\n    easy_install -v -Z package_name  |  tee date-package.log\r\n\r\n`-Z` (short for `--always-unzip`) unzips the `.egg` files to directories so you can then..\r\n  \r\n    less *.egg\/EGG-INFO\/requires.txt  \r\n    less *.egg\/EGG-INFO\/PKG-INFO  \r\n    egrep &#39;^(Name|Version|Sum|...)&#39;  *.egg\/EGG-INFO\/PKG-INFO\r\n\r\n\r\nOn Sammy&#39;s original question, a couple of package indexes other than PyPI are:  \r\n[Scipy](http:\/\/www.scipy.org\/Topical_Software)\r\nand [Scipy docs](http:\/\/docs.scipy.org\/scipy\/docs\/scipy) for scientific computing  \r\n[ohloh](http:\/\/www.ohloh.net\/tags\/python) with code metrics.\r\n\r\n\r\n\r\n","body":"<p>If you do use <code>easy_install<\/code>, I'd suggest installing packages by doing..<\/p>\n\n<pre><code>easy_install -v -Z package_name  |  tee date-package.log\n<\/code><\/pre>\n\n<p><code>-Z<\/code> (short for <code>--always-unzip<\/code>) unzips the <code>.egg<\/code> files to directories so you can then..<\/p>\n\n<pre><code>less *.egg\/EGG-INFO\/requires.txt  \nless *.egg\/EGG-INFO\/PKG-INFO  \negrep '^(Name|Version|Sum|...)'  *.egg\/EGG-INFO\/PKG-INFO\n<\/code><\/pre>\n\n<p>On Sammy's original question, a couple of package indexes other than PyPI are:<br>\n<a href=\"http:\/\/www.scipy.org\/Topical_Software\" rel=\"nofollow noreferrer\">Scipy<\/a>\nand <a href=\"http:\/\/docs.scipy.org\/scipy\/docs\/scipy\" rel=\"nofollow noreferrer\">Scipy docs<\/a> for scientific computing<br>\n<a href=\"http:\/\/www.ohloh.net\/tags\/python\" rel=\"nofollow noreferrer\">ohloh<\/a> with code metrics.<\/p>\n","community_owned_date":null},{"owner":{"account_id":52951,"reputation":1420,"user_id":158328,"user_type":"registered","accept_rate":82,"profile_image":"https:\/\/i.stack.imgur.com\/lAzHe.jpg?s=256&g=1","display_name":"D_K","link":"https:\/\/stackoverflow.com\/users\/158328\/d-k"},"is_accepted":false,"score":2,"last_activity_date":1627048832,"last_edit_date":1627048832.0,"creation_date":1250588933,"answer_id":1292905,"question_id":1291931,"content_license":"CC BY-SA 4.0","body_markdown":"This can be possibly achieved via `use strict`; but could be as well a valuable feature even if not `use`&#39;d explicitly, namely:\r\n\r\nthe other day we spent about 10-20 minutes debugging the following behavior:\r\n\r\n    my %hash;\r\n    \r\n    $hash-&gt;{&#39;key1&#39;} = value1;\r\n    \r\n    # on reading in a different module\r\n    print $hash{&#39;key1&#39;}; # is, of course, empty, but was so easy to overlook in the code above\r\n\r\nresume:\r\nproper Perl type safety brought in by the IDE.\r\n\r\nIt might be already implemented in Padre, though, as it turned out not in Eclipse+EPIC\r\n","body":"<p>This can be possibly achieved via <code>use strict<\/code>; but could be as well a valuable feature even if not <code>use<\/code>'d explicitly, namely:<\/p>\n<p>the other day we spent about 10-20 minutes debugging the following behavior:<\/p>\n<pre><code>my %hash;\n\n$hash-&gt;{'key1'} = value1;\n\n# on reading in a different module\nprint $hash{'key1'}; # is, of course, empty, but was so easy to overlook in the code above\n<\/code><\/pre>\n<p>resume:\nproper Perl type safety brought in by the IDE.<\/p>\n<p>It might be already implemented in Padre, though, as it turned out not in Eclipse+EPIC<\/p>\n","community_owned_date":1250588933.0},{"owner":{"account_id":5191,"reputation":30711,"user_id":8233,"user_type":"registered","accept_rate":69,"profile_image":"https:\/\/www.gravatar.com\/avatar\/5ed2571484765d12fcb3230f235a8ecc?s=256&d=identicon&r=PG","display_name":"Michael Carman","link":"https:\/\/stackoverflow.com\/users\/8233\/michael-carman"},"is_accepted":false,"score":2,"last_activity_date":1627048789,"last_edit_date":1627048789.0,"creation_date":1250615523,"answer_id":1295276,"question_id":1291931,"content_license":"CC BY-SA 4.0","body_markdown":"The ability to configure and run external (command-line) tools. Plug-ins are great but end-users won&#39;t necessarily want to author one just to integrate with an external tool. Allowing users to configure their own tools provides a great deal of extensibility with minimal barriers to entry.\r\n\r\nMy editor of choice is UltraEdit. It&#39;s not an IDE, but through its support for user tools, I&#39;ve been able to integrate IDE features such as lint, version control, debugging, and more.","body":"<p>The ability to configure and run external (command-line) tools. Plug-ins are great but end-users won't necessarily want to author one just to integrate with an external tool. Allowing users to configure their own tools provides a great deal of extensibility with minimal barriers to entry.<\/p>\n<p>My editor of choice is UltraEdit. It's not an IDE, but through its support for user tools, I've been able to integrate IDE features such as lint, version control, debugging, and more.<\/p>\n","community_owned_date":1250615523.0},{"owner":{"account_id":5820,"reputation":11833,"user_id":9555,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/f0c77c97b35aefbf5add1228ea42a278?s=256&d=identicon&r=PG","display_name":"Andy Ross","link":"https:\/\/stackoverflow.com\/users\/9555\/andy-ross"},"is_accepted":false,"score":2,"last_activity_date":1252059241,"last_edit_date":null,"creation_date":1252059241,"answer_id":1378371,"question_id":1378221,"content_license":"CC BY-SA 2.5","body_markdown":"Sorry, why doesn&#39;t that &quot;look nice&quot;?  That&#39;s the appropriate system call to use.  If you&#39;re wanting an external program to invoke (e.g. something you could use from a bash script too), there are the tools \/usr\/bin\/id and \/usr\/bin\/whoami for use.","body":"<p>Sorry, why doesn't that \"look nice\"?  That's the appropriate system call to use.  If you're wanting an external program to invoke (e.g. something you could use from a bash script too), there are the tools \/usr\/bin\/id and \/usr\/bin\/whoami for use.<\/p>\n","community_owned_date":null},{"owner":{"account_id":32029,"reputation":6859,"user_id":88373,"user_type":"registered","accept_rate":83,"profile_image":"https:\/\/www.gravatar.com\/avatar\/c0d6109b117f4eded4bfd2273ce1816e?s=256&d=identicon&r=PG","display_name":"Rap","link":"https:\/\/stackoverflow.com\/users\/88373\/rap"},"is_accepted":false,"score":2,"last_activity_date":1252190556,"last_edit_date":null,"creation_date":1252190556,"answer_id":1384430,"question_id":1384398,"content_license":"CC BY-SA 2.5","body_markdown":"This always has to do with the perl interpreter (\/usr\/bin\/perl) being inaccessible.  In fact, it happens when a shell script is running or awk or whatever is on the #! line at the top of the script.\r\n\r\nThe cause can be many things ... perms, locked file, filesystem offline, and on and on.\r\n\r\nIt would obviously depend on what was happening at the exact moment you ran it when the problem occured.  But I hope the answer is what you were looking for.","body":"<p>This always has to do with the perl interpreter (\/usr\/bin\/perl) being inaccessible.  In fact, it happens when a shell script is running or awk or whatever is on the #! line at the top of the script.<\/p>\n\n<p>The cause can be many things ... perms, locked file, filesystem offline, and on and on.<\/p>\n\n<p>It would obviously depend on what was happening at the exact moment you ran it when the problem occured.  But I hope the answer is what you were looking for.<\/p>\n","community_owned_date":null},{"owner":{"account_id":29046,"reputation":66744,"user_id":78182,"user_type":"registered","accept_rate":94,"profile_image":"https:\/\/i.stack.imgur.com\/IHsGu.png?s=256&g=1","display_name":"Stefan Kendall","link":"https:\/\/stackoverflow.com\/users\/78182\/stefan-kendall"},"is_accepted":false,"score":2,"last_activity_date":1254545252,"last_edit_date":1254545252.0,"creation_date":1254534409,"answer_id":1512554,"question_id":1512547,"content_license":"CC BY-SA 2.5","body_markdown":"My guess is that or3 is different.\r\n\r\nI&#39;m not really a Perl guy, but it looks like 1, 2, and 4 all explicitly return booleans. I&#39;m guessing 3 has side effects, such as returning $a or something crazy like that.\r\n\r\n*looks down*\r\n\r\nHey, I was right.","body":"<p>My guess is that or3 is different.<\/p>\n\n<p>I'm not really a Perl guy, but it looks like 1, 2, and 4 all explicitly return booleans. I'm guessing 3 has side effects, such as returning $a or something crazy like that.<\/p>\n\n<p><em>looks down<\/em><\/p>\n\n<p>Hey, I was right.<\/p>\n","community_owned_date":null},{"owner":{"account_id":806,"reputation":123241,"user_id":1053,"user_type":"registered","accept_rate":81,"profile_image":"https:\/\/www.gravatar.com\/avatar\/3f38c0e0cc4a1ca4656bfd8c78a581f2?s=256&d=identicon&r=PG","display_name":"Ed S.","link":"https:\/\/stackoverflow.com\/users\/1053\/ed-s"},"is_accepted":false,"score":2,"last_activity_date":1254534786,"last_edit_date":null,"creation_date":1254534786,"answer_id":1512564,"question_id":1512547,"content_license":"CC BY-SA 2.5","body_markdown":"Both versions are short-circuiting in Perl, but the &#39;textual&#39; forms (&#39;and&#39; and &#39;or&#39;) have a lower precedence than their C-style equivalents.\r\n\r\nhttp:\/\/www.sdsc.edu\/~moreland\/courses\/IntroPerl\/docs\/manual\/pod\/perlop.html#Logical_And","body":"<p>Both versions are short-circuiting in Perl, but the 'textual' forms ('and' and 'or') have a lower precedence than their C-style equivalents.<\/p>\n\n<p><a href=\"http:\/\/www.sdsc.edu\/~moreland\/courses\/IntroPerl\/docs\/manual\/pod\/perlop.html#Logical_And\" rel=\"nofollow noreferrer\">http:\/\/www.sdsc.edu\/~moreland\/courses\/IntroPerl\/docs\/manual\/pod\/perlop.html#Logical_And<\/a><\/p>\n","community_owned_date":null},{"owner":{"account_id":12537,"reputation":4630,"user_id":24760,"user_type":"registered","accept_rate":94,"profile_image":"https:\/\/www.gravatar.com\/avatar\/693f9a2f0eea07660d81e9690b6afd96?s=256&d=identicon&r=PG","display_name":"Steve Schnepp","link":"https:\/\/stackoverflow.com\/users\/24760\/steve-schnepp"},"is_accepted":false,"score":2,"last_activity_date":1257270323,"last_edit_date":null,"creation_date":1257270323,"answer_id":1669003,"question_id":1359771,"content_license":"CC BY-SA 2.5","body_markdown":"A nice guide about this is included in the Perl manual : [Debugging Perl memory usage][1]\r\n\r\n  [1]: http:\/\/perldoc.perl.org\/perldebguts.html#Debugging-Perl-memory-usage","body":"<p>A nice guide about this is included in the Perl manual : <a href=\"http:\/\/perldoc.perl.org\/perldebguts.html#Debugging-Perl-memory-usage\" rel=\"nofollow noreferrer\">Debugging Perl memory usage<\/a><\/p>\n","community_owned_date":null},{"owner":{"account_id":82870,"reputation":7842,"user_id":232706,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/478e998264ce53671f054b5a742bd692?s=256&d=identicon&r=PG","display_name":"Rob Van Dam","link":"https:\/\/stackoverflow.com\/users\/232706\/rob-van-dam"},"is_accepted":false,"score":2,"last_activity_date":1263534687,"last_edit_date":null,"creation_date":1263534687,"answer_id":2069753,"question_id":481282,"content_license":"CC BY-SA 2.5","body_markdown":"[RegExp::Common](http:\/\/search.cpan.org\/perldoc?Regexp::Common) is another useful tool to be aware of.  It contains regexps for many common cases, included quoted strings:\r\n\r\n    use Regexp::Common;\r\n\r\n    my $str = &#39;&quot; this is a \\&quot; quoted string&quot;&#39;;\r\n    if ($str =~ $RE{quoted}) {\r\n      # do something\r\n    }\r\n","body":"<p><a href=\"http:\/\/search.cpan.org\/perldoc?Regexp::Common\" rel=\"nofollow noreferrer\">RegExp::Common<\/a> is another useful tool to be aware of.  It contains regexps for many common cases, included quoted strings:<\/p>\n\n<pre><code>use Regexp::Common;\n\nmy $str = '\" this is a \\\" quoted string\"';\nif ($str =~ $RE{quoted}) {\n  # do something\n}\n<\/code><\/pre>\n","community_owned_date":null}]
[{"owner":{"account_id":420026,"reputation":95302,"user_id":797495,"user_type":"registered","accept_rate":69,"profile_image":"https:\/\/i.stack.imgur.com\/BKD7l.jpg?s=256&g=1","display_name":"Pedro Lobito","link":"https:\/\/stackoverflow.com\/users\/797495\/pedro-lobito"},"is_accepted":false,"score":90,"last_activity_date":1697259317,"last_edit_date":1697259317.0,"creation_date":1581721938,"answer_id":60234593,"question_id":32490629,"content_license":"CC BY-SA 4.0","body_markdown":"Very late answer, but you can simply use:\r\n    \r\n    import time\r\n    today = time.strftime(&quot;%Y-%m-%d&quot;)\r\n    # 2023-10-14","body":"<p>Very late answer, but you can simply use:<\/p>\n<pre><code>import time\ntoday = time.strftime(&quot;%Y-%m-%d&quot;)\n# 2023-10-14\n<\/code><\/pre>\n"},{"owner":{"account_id":3070819,"reputation":5876,"user_id":2601521,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/7c19b4144c8dba559d224d603eb4f910?s=256&d=identicon&r=PG","display_name":"Ohad Cohen","link":"https:\/\/stackoverflow.com\/users\/2601521\/ohad-cohen"},"is_accepted":false,"score":89,"last_activity_date":1658903940,"last_edit_date":1658903940.0,"creation_date":1416581370,"answer_id":27064019,"question_id":976882,"content_license":"CC BY-SA 4.0","body_markdown":"The documentation for [`random.shuffle`](https:\/\/docs.python.org\/library\/random.html#random.shuffle) states that it will\r\n\r\n&gt; Shuffle the sequence *x* **in place**.\r\n\r\nDon&#39;t do:\r\n\r\n```\r\nprint(random.shuffle(xs))  # WRONG!\r\n```\r\n\r\nInstead, do:\r\n\r\n```\r\nrandom.shuffle(xs)\r\nprint(xs)\r\n```","body":"<p>The documentation for <a href=\"https:\/\/docs.python.org\/library\/random.html#random.shuffle\" rel=\"noreferrer\"><code>random.shuffle<\/code><\/a> states that it will<\/p>\n<blockquote>\n<p>Shuffle the sequence <em>x<\/em> <strong>in place<\/strong>.<\/p>\n<\/blockquote>\n<p>Don't do:<\/p>\n<pre><code>print(random.shuffle(xs))  # WRONG!\n<\/code><\/pre>\n<p>Instead, do:<\/p>\n<pre><code>random.shuffle(xs)\nprint(xs)\n<\/code><\/pre>\n"},{"owner":{"account_id":1200156,"reputation":7654,"user_id":1170977,"user_type":"registered","accept_rate":71,"profile_image":"https:\/\/i.stack.imgur.com\/e4HtP.jpg?s=256&g=1","display_name":"Arun Ghosh","link":"https:\/\/stackoverflow.com\/users\/1170977\/arun-ghosh"},"is_accepted":false,"score":89,"last_activity_date":1549343721,"last_edit_date":1549343721.0,"creation_date":1469527928,"answer_id":38587017,"question_id":805066,"content_license":"CC BY-SA 4.0","body_markdown":"**Python 3** has a different and simpler syntax for calling parent method.\r\n\r\nIf `Foo` class inherits from `Bar`, then from `Bar.__init__` can be invoked from `Foo` via `super().__init__()`:\r\n\r\n    class Foo(Bar):\r\n\r\n        def __init__(self, *args, **kwargs):\r\n            # invoke Bar.__init__\r\n            super().__init__(*args, **kwargs)\r\n\r\n","body":"<p><strong>Python 3<\/strong> has a different and simpler syntax for calling parent method.<\/p>\n\n<p>If <code>Foo<\/code> class inherits from <code>Bar<\/code>, then from <code>Bar.__init__<\/code> can be invoked from <code>Foo<\/code> via <code>super().__init__()<\/code>:<\/p>\n\n<pre><code>class Foo(Bar):\n\n    def __init__(self, *args, **kwargs):\n        # invoke Bar.__init__\n        super().__init__(*args, **kwargs)\n<\/code><\/pre>\n"},{"owner":{"account_id":64005,"reputation":122133,"user_id":189179,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/bab16b3716e0e72b8b1a7741d68f5ee2?s=256&d=identicon&r=PG","display_name":"Ben James","link":"https:\/\/stackoverflow.com\/users\/189179\/ben-james"},"is_accepted":false,"score":88,"last_activity_date":1260099392,"last_edit_date":1260099392.0,"creation_date":1260098904,"answer_id":1855122,"question_id":1855095,"content_license":"CC BY-SA 2.5","body_markdown":"To add the contents of `mydirectory` to a new zip file, including all files and subdirectories:\r\n\r\n    import os\r\n    import zipfile\r\n    \r\n    zf = zipfile.ZipFile(&quot;myzipfile.zip&quot;, &quot;w&quot;)\r\n    for dirname, subdirs, files in os.walk(&quot;mydirectory&quot;):\r\n        zf.write(dirname)\r\n        for filename in files:\r\n            zf.write(os.path.join(dirname, filename))\r\n    zf.close()","body":"<p>To add the contents of <code>mydirectory<\/code> to a new zip file, including all files and subdirectories:<\/p>\n\n<pre><code>import os\nimport zipfile\n\nzf = zipfile.ZipFile(\"myzipfile.zip\", \"w\")\nfor dirname, subdirs, files in os.walk(\"mydirectory\"):\n    zf.write(dirname)\n    for filename in files:\n        zf.write(os.path.join(dirname, filename))\nzf.close()\n<\/code><\/pre>\n"},{"owner":{"account_id":4283,"reputation":43747,"user_id":6372,"user_type":"registered","accept_rate":86,"profile_image":"https:\/\/www.gravatar.com\/avatar\/fbff5bc41ed88240c76f35d6fe5bf12f?s=256&d=identicon&r=PG","display_name":"Nicholas Riley","link":"https:\/\/stackoverflow.com\/users\/6372\/nicholas-riley"},"is_accepted":false,"score":85,"last_activity_date":1622538679,"last_edit_date":1622538679.0,"creation_date":1222270697,"answer_id":127934,"question_id":127803,"content_license":"CC BY-SA 4.0","body_markdown":"Try the [iso8601][1] module; it does exactly this.\r\n\r\nThere are several other options mentioned on the [WorkingWithTime][2] page on the python.org wiki.\r\n\r\n\r\n  [1]: https:\/\/pypi.org\/project\/iso8601\/\r\n  [2]: http:\/\/wiki.python.org\/moin\/WorkingWithTime","body":"<p>Try the <a href=\"https:\/\/pypi.org\/project\/iso8601\/\" rel=\"noreferrer\">iso8601<\/a> module; it does exactly this.<\/p>\n<p>There are several other options mentioned on the <a href=\"http:\/\/wiki.python.org\/moin\/WorkingWithTime\" rel=\"noreferrer\">WorkingWithTime<\/a> page on the python.org wiki.<\/p>\n"},{"owner":{"account_id":3885248,"reputation":6531,"user_id":3217306,"user_type":"registered","accept_rate":71,"profile_image":"https:\/\/i.stack.imgur.com\/Ki1Kk.jpg?s=256&g=1","display_name":"binaryfunt","link":"https:\/\/stackoverflow.com\/users\/3217306\/binaryfunt"},"is_accepted":false,"score":85,"last_activity_date":1683813924,"last_edit_date":1683813924.0,"creation_date":1399662480,"answer_id":23572192,"question_id":3899980,"content_license":"CC BY-SA 4.0","body_markdown":"This answer is for anyone trying to change all the fonts, including for the legend, and for anyone trying to use different fonts and sizes for each thing. It does not use rc (which doesn&#39;t seem to work for me). It is perhaps a bit cumbersome but I could not get to grips with any other method, personally.\r\n\r\nI have worked out a slightly different, less cluttered approach than my original answer below. It allows any font on your system, even `.otf` fonts. To have separate fonts for each thing, just write more `font_path` and `font_prop` like variables.\r\n\r\n    import numpy as np\r\n    import matplotlib.pyplot as plt\r\n    import matplotlib.font_manager as font_manager\r\n    import matplotlib.ticker\r\n    # Workaround for Matplotlib 2.0.0 log axes bug https:\/\/github.com\/matplotlib\/matplotlib\/issues\/8017 :\r\n    # matplotlib.ticker._mathdefault = lambda x: &#39;\\\\mathdefault{%s}&#39;%x \r\n\r\n    # Set the font properties (can use more variables for more fonts)\r\n    font_path = &#39;C:\\Windows\\Fonts\\AGaramondPro-Regular.otf&#39;\r\n    font_prop = font_manager.FontProperties(fname=font_path, size=14)\r\n\r\n    ax = plt.subplot() # Defines ax variable by creating an empty plot\r\n\r\n    # Define the data to be plotted\r\n    x = np.linspace(0, 10)\r\n    y = x + np.random.normal(x)\r\n    plt.plot(x, y, &#39;b+&#39;, label=&#39;Data points&#39;)\r\n\r\n    for label in (ax.get_xticklabels() + ax.get_yticklabels()):\r\n        label.set_fontproperties(font_prop)\r\n        label.set_fontsize(13) # Size here overrides font_prop\r\n\r\n    plt.title(&quot;Exponentially decaying oscillations&quot;, fontproperties=font_prop,\r\n              size=16, verticalalignment=&#39;bottom&#39;) # Size here overrides font_prop\r\n    plt.xlabel(&quot;Time&quot;, fontproperties=font_prop)\r\n    plt.ylabel(&quot;Amplitude&quot;, fontproperties=font_prop)\r\n    plt.text(0, 0, &quot;Misc text&quot;, fontproperties=font_prop)\r\n\r\n    lgd = plt.legend(loc=&#39;lower right&#39;, prop=font_prop) # NB different &#39;prop&#39; argument for legend\r\n    lgd.set_title(&quot;Legend&quot;, prop=font_prop)\r\n\r\n    plt.show()\r\n\r\n---\r\n\r\n**Original answer**\r\n\r\nThis basically combines ryggyr&#39;s answer here with other answers on SO.\r\n\r\n    import numpy as np\r\n    import matplotlib.pyplot as plt\r\n    import matplotlib.font_manager as font_manager\r\n\r\n    # Set the font dictionaries (for plot title and axis titles)\r\n    title_font = {&#39;fontname&#39;:&#39;Arial&#39;, &#39;size&#39;:&#39;16&#39;, &#39;color&#39;:&#39;black&#39;, &#39;weight&#39;:&#39;normal&#39;,\r\n                  &#39;verticalalignment&#39;:&#39;bottom&#39;} # Bottom vertical alignment for more space\r\n    axis_font = {&#39;fontname&#39;:&#39;Arial&#39;, &#39;size&#39;:&#39;14&#39;}\r\n \r\n    # Set the font properties (for use in legend)   \r\n    font_path = &#39;C:\\Windows\\Fonts\\Arial.ttf&#39;\r\n    font_prop = font_manager.FontProperties(fname=font_path, size=14)\r\n    \r\n    ax = plt.subplot() # Defines ax variable by creating an empty plot\r\n    \r\n    # Set the tick labels font\r\n    for label in (ax.get_xticklabels() + ax.get_yticklabels()):\r\n        label.set_fontname(&#39;Arial&#39;)\r\n        label.set_fontsize(13)\r\n\r\n    x = np.linspace(0, 10)\r\n    y = x + np.random.normal(x) # Just simulates some data\r\n\r\n    plt.plot(x, y, &#39;b+&#39;, label=&#39;Data points&#39;)\r\n    plt.xlabel(&quot;x axis&quot;, **axis_font)\r\n    plt.ylabel(&quot;y axis&quot;, **axis_font)\r\n    plt.title(&quot;Misc graph&quot;, **title_font)\r\n    plt.legend(loc=&#39;lower right&#39;, prop=font_prop, numpoints=1)\r\n    plt.text(0, 0, &quot;Misc text&quot;, **title_font)\r\n    plt.show()\r\n\r\nBy having several font dictionaries, you can choose different fonts\/sizes\/weights\/colours for the various titles, choose the font for the tick labels, and choose the font for the legend, all independently.","body":"<p>This answer is for anyone trying to change all the fonts, including for the legend, and for anyone trying to use different fonts and sizes for each thing. It does not use rc (which doesn't seem to work for me). It is perhaps a bit cumbersome but I could not get to grips with any other method, personally.<\/p>\n<p>I have worked out a slightly different, less cluttered approach than my original answer below. It allows any font on your system, even <code>.otf<\/code> fonts. To have separate fonts for each thing, just write more <code>font_path<\/code> and <code>font_prop<\/code> like variables.<\/p>\n<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as font_manager\nimport matplotlib.ticker\n# Workaround for Matplotlib 2.0.0 log axes bug https:\/\/github.com\/matplotlib\/matplotlib\/issues\/8017 :\n# matplotlib.ticker._mathdefault = lambda x: '\\\\mathdefault{%s}'%x \n\n# Set the font properties (can use more variables for more fonts)\nfont_path = 'C:\\Windows\\Fonts\\AGaramondPro-Regular.otf'\nfont_prop = font_manager.FontProperties(fname=font_path, size=14)\n\nax = plt.subplot() # Defines ax variable by creating an empty plot\n\n# Define the data to be plotted\nx = np.linspace(0, 10)\ny = x + np.random.normal(x)\nplt.plot(x, y, 'b+', label='Data points')\n\nfor label in (ax.get_xticklabels() + ax.get_yticklabels()):\n    label.set_fontproperties(font_prop)\n    label.set_fontsize(13) # Size here overrides font_prop\n\nplt.title(&quot;Exponentially decaying oscillations&quot;, fontproperties=font_prop,\n          size=16, verticalalignment='bottom') # Size here overrides font_prop\nplt.xlabel(&quot;Time&quot;, fontproperties=font_prop)\nplt.ylabel(&quot;Amplitude&quot;, fontproperties=font_prop)\nplt.text(0, 0, &quot;Misc text&quot;, fontproperties=font_prop)\n\nlgd = plt.legend(loc='lower right', prop=font_prop) # NB different 'prop' argument for legend\nlgd.set_title(&quot;Legend&quot;, prop=font_prop)\n\nplt.show()\n<\/code><\/pre>\n<hr \/>\n<p><strong>Original answer<\/strong><\/p>\n<p>This basically combines ryggyr's answer here with other answers on SO.<\/p>\n<pre><code>import numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as font_manager\n\n# Set the font dictionaries (for plot title and axis titles)\ntitle_font = {'fontname':'Arial', 'size':'16', 'color':'black', 'weight':'normal',\n              'verticalalignment':'bottom'} # Bottom vertical alignment for more space\naxis_font = {'fontname':'Arial', 'size':'14'}\n\n# Set the font properties (for use in legend)   \nfont_path = 'C:\\Windows\\Fonts\\Arial.ttf'\nfont_prop = font_manager.FontProperties(fname=font_path, size=14)\n\nax = plt.subplot() # Defines ax variable by creating an empty plot\n\n# Set the tick labels font\nfor label in (ax.get_xticklabels() + ax.get_yticklabels()):\n    label.set_fontname('Arial')\n    label.set_fontsize(13)\n\nx = np.linspace(0, 10)\ny = x + np.random.normal(x) # Just simulates some data\n\nplt.plot(x, y, 'b+', label='Data points')\nplt.xlabel(&quot;x axis&quot;, **axis_font)\nplt.ylabel(&quot;y axis&quot;, **axis_font)\nplt.title(&quot;Misc graph&quot;, **title_font)\nplt.legend(loc='lower right', prop=font_prop, numpoints=1)\nplt.text(0, 0, &quot;Misc text&quot;, **title_font)\nplt.show()\n<\/code><\/pre>\n<p>By having several font dictionaries, you can choose different fonts\/sizes\/weights\/colours for the various titles, choose the font for the tick labels, and choose the font for the legend, all independently.<\/p>\n"},{"owner":{"account_id":6743126,"reputation":2012,"user_id":5195646,"user_type":"registered","accept_rate":50,"profile_image":"https:\/\/i.stack.imgur.com\/w36Ay.jpg?s=256&g=1","display_name":"Elrond","link":"https:\/\/stackoverflow.com\/users\/5195646\/elrond"},"is_accepted":false,"score":84,"last_activity_date":1547656417,"last_edit_date":1547656417.0,"creation_date":1505213927,"answer_id":46174668,"question_id":17839973,"content_license":"CC BY-SA 4.0","body_markdown":"You need to create a pandas series first. The second step is to convert the pandas series to pandas dataframe.\r\n\r\n    import pandas as pd\r\n    data = {&#39;a&#39;: 1, &#39;b&#39;: 2}\r\n    pd.Series(data).to_frame()\r\n\r\nYou can even provide a column name.\r\n\r\n    pd.Series(data).to_frame(&#39;ColumnName&#39;)","body":"<p>You need to create a pandas series first. The second step is to convert the pandas series to pandas dataframe.<\/p>\n\n<pre><code>import pandas as pd\ndata = {'a': 1, 'b': 2}\npd.Series(data).to_frame()\n<\/code><\/pre>\n\n<p>You can even provide a column name.<\/p>\n\n<pre><code>pd.Series(data).to_frame('ColumnName')\n<\/code><\/pre>\n"},{"owner":{"account_id":51166,"reputation":5857,"user_id":152809,"user_type":"registered","accept_rate":38,"profile_image":"https:\/\/www.gravatar.com\/avatar\/46f6dc70088702cdb542062d382bed29?s=256&d=identicon&r=PG","display_name":"Husky","link":"https:\/\/stackoverflow.com\/users\/152809\/husky"},"is_accepted":false,"score":84,"last_activity_date":1635286961,"last_edit_date":1635286961.0,"creation_date":1557929047,"answer_id":56151260,"question_id":185936,"content_license":"CC BY-SA 4.0","body_markdown":"I&#39;m surprised nobody has mentioned the awesome [`pathlib`][1] to do this job.\r\n\r\nIf you only want to remove files in a directory it can be a oneliner\r\n\r\n```\r\nfrom pathlib import Path\r\n\r\n[f.unlink() for f in Path(&quot;\/path\/to\/folder&quot;).glob(&quot;*&quot;) if f.is_file()] \r\n```\r\n\r\nTo also recursively remove directories you can write something like this:\r\n\r\n```\r\nfrom pathlib import Path\r\nfrom shutil import rmtree\r\n\r\nfor path in Path(&quot;\/path\/to\/folder&quot;).glob(&quot;**\/*&quot;):\r\n    if path.is_file():\r\n        path.unlink()\r\n    elif path.is_dir():\r\n        rmtree(path)\r\n```\r\n\r\n\r\n  [1]: https:\/\/docs.python.org\/3\/library\/pathlib.html","body":"<p>I'm surprised nobody has mentioned the awesome <a href=\"https:\/\/docs.python.org\/3\/library\/pathlib.html\" rel=\"noreferrer\"><code>pathlib<\/code><\/a> to do this job.<\/p>\n<p>If you only want to remove files in a directory it can be a oneliner<\/p>\n<pre><code>from pathlib import Path\n\n[f.unlink() for f in Path(&quot;\/path\/to\/folder&quot;).glob(&quot;*&quot;) if f.is_file()] \n<\/code><\/pre>\n<p>To also recursively remove directories you can write something like this:<\/p>\n<pre><code>from pathlib import Path\nfrom shutil import rmtree\n\nfor path in Path(&quot;\/path\/to\/folder&quot;).glob(&quot;**\/*&quot;):\n    if path.is_file():\n        path.unlink()\n    elif path.is_dir():\n        rmtree(path)\n<\/code><\/pre>\n"},{"owner":{"account_id":8690,"reputation":26399,"user_id":15770,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/i.stack.imgur.com\/XEC8x.jpg?s=256&g=1","display_name":"akaihola","link":"https:\/\/stackoverflow.com\/users\/15770\/akaihola"},"is_accepted":false,"score":83,"last_activity_date":1231937842,"last_edit_date":1231937842.0,"creation_date":1231667483,"answer_id":432666,"question_id":431628,"content_license":"CC BY-SA 2.5","body_markdown":"You can use the `QuerySetChain` class below. When using it with Django&#39;s paginator, it should only hit the database with `COUNT(*)` queries for all querysets and `SELECT()` queries only for those querysets whose records are displayed on the current page.\r\n\r\nNote that you need to specify `template_name=` if using a `QuerySetChain` with generic views, even if the chained querysets all use the same model.\r\n\r\n    from itertools import islice, chain\r\n\r\n    class QuerySetChain(object):\r\n        &quot;&quot;&quot;\r\n        Chains multiple subquerysets (possibly of different models) and behaves as\r\n        one queryset.  Supports minimal methods needed for use with\r\n        django.core.paginator.\r\n        &quot;&quot;&quot;\r\n\r\n        def __init__(self, *subquerysets):\r\n            self.querysets = subquerysets\r\n\r\n        def count(self):\r\n            &quot;&quot;&quot;\r\n            Performs a .count() for all subquerysets and returns the number of\r\n            records as an integer.\r\n            &quot;&quot;&quot;\r\n            return sum(qs.count() for qs in self.querysets)\r\n\r\n        def _clone(self):\r\n            &quot;Returns a clone of this queryset chain&quot;\r\n            return self.__class__(*self.querysets)\r\n\r\n        def _all(self):\r\n            &quot;Iterates records in all subquerysets&quot;\r\n            return chain(*self.querysets)\r\n\r\n        def __getitem__(self, ndx):\r\n            &quot;&quot;&quot;\r\n            Retrieves an item or slice from the chained set of results from all\r\n            subquerysets.\r\n            &quot;&quot;&quot;\r\n            if type(ndx) is slice:\r\n                return list(islice(self._all(), ndx.start, ndx.stop, ndx.step or 1))\r\n            else:\r\n                return islice(self._all(), ndx, ndx+1).next()\r\n\r\nIn your example, the usage would be:\r\n\r\n    pages = Page.objects.filter(Q(title__icontains=cleaned_search_term) |\r\n                                Q(body__icontains=cleaned_search_term))\r\n    articles = Article.objects.filter(Q(title__icontains=cleaned_search_term) |\r\n                                      Q(body__icontains=cleaned_search_term) |\r\n                                      Q(tags__icontains=cleaned_search_term))\r\n    posts = Post.objects.filter(Q(title__icontains=cleaned_search_term) |\r\n                                Q(body__icontains=cleaned_search_term) | \r\n                                Q(tags__icontains=cleaned_search_term))\r\n    matches = QuerySetChain(pages, articles, posts)\r\n\r\nThen use `matches` with the paginator like you used `result_list` in your example.\r\n\r\nThe `itertools` module was introduced in Python 2.3, so it should be available in all Python versions Django runs on.","body":"<p>You can use the <code>QuerySetChain<\/code> class below. When using it with Django's paginator, it should only hit the database with <code>COUNT(*)<\/code> queries for all querysets and <code>SELECT()<\/code> queries only for those querysets whose records are displayed on the current page.<\/p>\n\n<p>Note that you need to specify <code>template_name=<\/code> if using a <code>QuerySetChain<\/code> with generic views, even if the chained querysets all use the same model.<\/p>\n\n<pre><code>from itertools import islice, chain\n\nclass QuerySetChain(object):\n    \"\"\"\n    Chains multiple subquerysets (possibly of different models) and behaves as\n    one queryset.  Supports minimal methods needed for use with\n    django.core.paginator.\n    \"\"\"\n\n    def __init__(self, *subquerysets):\n        self.querysets = subquerysets\n\n    def count(self):\n        \"\"\"\n        Performs a .count() for all subquerysets and returns the number of\n        records as an integer.\n        \"\"\"\n        return sum(qs.count() for qs in self.querysets)\n\n    def _clone(self):\n        \"Returns a clone of this queryset chain\"\n        return self.__class__(*self.querysets)\n\n    def _all(self):\n        \"Iterates records in all subquerysets\"\n        return chain(*self.querysets)\n\n    def __getitem__(self, ndx):\n        \"\"\"\n        Retrieves an item or slice from the chained set of results from all\n        subquerysets.\n        \"\"\"\n        if type(ndx) is slice:\n            return list(islice(self._all(), ndx.start, ndx.stop, ndx.step or 1))\n        else:\n            return islice(self._all(), ndx, ndx+1).next()\n<\/code><\/pre>\n\n<p>In your example, the usage would be:<\/p>\n\n<pre><code>pages = Page.objects.filter(Q(title__icontains=cleaned_search_term) |\n                            Q(body__icontains=cleaned_search_term))\narticles = Article.objects.filter(Q(title__icontains=cleaned_search_term) |\n                                  Q(body__icontains=cleaned_search_term) |\n                                  Q(tags__icontains=cleaned_search_term))\nposts = Post.objects.filter(Q(title__icontains=cleaned_search_term) |\n                            Q(body__icontains=cleaned_search_term) | \n                            Q(tags__icontains=cleaned_search_term))\nmatches = QuerySetChain(pages, articles, posts)\n<\/code><\/pre>\n\n<p>Then use <code>matches<\/code> with the paginator like you used <code>result_list<\/code> in your example.<\/p>\n\n<p>The <code>itertools<\/code> module was introduced in Python 2.3, so it should be available in all Python versions Django runs on.<\/p>\n"},{"owner":{"account_id":329699,"reputation":134844,"user_id":653364,"user_type":"registered","accept_rate":79,"profile_image":"https:\/\/www.gravatar.com\/avatar\/7a7a675bc479a30c1389d4c64f612a95?s=256&d=identicon&r=PG","display_name":"joris","link":"https:\/\/stackoverflow.com\/users\/653364\/joris"},"is_accepted":false,"score":83,"last_activity_date":1647068880,"last_edit_date":1647068880.0,"creation_date":1428748019,"answer_id":29576803,"question_id":29576430,"content_license":"CC BY-SA 4.0","body_markdown":"You can shuffle the rows of a data frame by indexing with a shuffled index. For this, you can eg use `np.random.permutation` (but `np.random.choice` is also a possibility):\r\n\r\n    In [12]: df = pd.read_csv(StringIO(s), sep=&quot;\\s+&quot;)\r\n    \r\n    In [13]: df\r\n    Out[13]: \r\n        Col1  Col2  Col3  Type\r\n    0      1     2     3     1\r\n    1      4     5     6     1\r\n    20     7     8     9     2\r\n    21    10    11    12     2\r\n    45    13    14    15     3\r\n    46    16    17    18     3\r\n    \r\n    In [14]: df.iloc[np.random.permutation(len(df))]\r\n    Out[14]: \r\n        Col1  Col2  Col3  Type\r\n    46    16    17    18     3\r\n    45    13    14    15     3\r\n    20     7     8     9     2\r\n    0      1     2     3     1\r\n    1      4     5     6     1\r\n    21    10    11    12     2\r\n\r\nIf you want to keep the index numbered from 1, 2, .., n as in your example, you can simply reset the index: `df_shuffled.reset_index(drop=True)`","body":"<p>You can shuffle the rows of a data frame by indexing with a shuffled index. For this, you can eg use <code>np.random.permutation<\/code> (but <code>np.random.choice<\/code> is also a possibility):<\/p>\n<pre><code>In [12]: df = pd.read_csv(StringIO(s), sep=&quot;\\s+&quot;)\n\nIn [13]: df\nOut[13]: \n    Col1  Col2  Col3  Type\n0      1     2     3     1\n1      4     5     6     1\n20     7     8     9     2\n21    10    11    12     2\n45    13    14    15     3\n46    16    17    18     3\n\nIn [14]: df.iloc[np.random.permutation(len(df))]\nOut[14]: \n    Col1  Col2  Col3  Type\n46    16    17    18     3\n45    13    14    15     3\n20     7     8     9     2\n0      1     2     3     1\n1      4     5     6     1\n21    10    11    12     2\n<\/code><\/pre>\n<p>If you want to keep the index numbered from 1, 2, .., n as in your example, you can simply reset the index: <code>df_shuffled.reset_index(drop=True)<\/code><\/p>\n"},{"owner":{"account_id":1556838,"reputation":1477,"user_id":2595035,"user_type":"registered","accept_rate":14,"profile_image":"https:\/\/i.stack.imgur.com\/kK0JK.jpg?s=256&g=1","display_name":"Ketan","link":"https:\/\/stackoverflow.com\/users\/2595035\/ketan"},"is_accepted":false,"score":82,"last_activity_date":1418335985,"last_edit_date":null,"creation_date":1418335985,"answer_id":27433395,"question_id":6910641,"content_license":"CC BY-SA 3.0","body_markdown":"Simpler yet:\r\n\r\n    idx = (-arr).argsort()[:n]\r\nwhere *n* is the number of maximum values.","body":"<p>Simpler yet:<\/p>\n\n<pre><code>idx = (-arr).argsort()[:n]\n<\/code><\/pre>\n\n<p>where <em>n<\/em> is the number of maximum values.<\/p>\n"},{"owner":{"account_id":168763,"reputation":2825,"user_id":394430,"user_type":"registered","accept_rate":60,"profile_image":"https:\/\/www.gravatar.com\/avatar\/3fa02b47a8a4cd6e015e5fc84176b673?s=256&d=identicon&r=PG","display_name":"user394430","link":"https:\/\/stackoverflow.com\/users\/394430\/user394430"},"is_accepted":false,"score":82,"last_activity_date":1442507705,"last_edit_date":null,"creation_date":1442507705,"answer_id":32635523,"question_id":1535327,"content_license":"CC BY-SA 3.0","body_markdown":"A generic way that can be applied to any class without specific formatting could be done as follows:\r\n\r\n    class Element:\r\n        def __init__(self, name, symbol, number):\r\n            self.name = name\r\n            self.symbol = symbol\r\n            self.number = number\r\n\r\n        def __str__(self):\r\n            return str(self.__class__) + &quot;: &quot; + str(self.__dict__)\r\n\r\nAnd then,\r\n\r\n    elem = Element(&#39;my_name&#39;, &#39;some_symbol&#39;, 3)\r\n    print(elem)\r\n\r\nproduces\r\n\r\n    __main__.Element: {&#39;symbol&#39;: &#39;some_symbol&#39;, &#39;name&#39;: &#39;my_name&#39;, &#39;number&#39;: 3}\r\n","body":"<p>A generic way that can be applied to any class without specific formatting could be done as follows:<\/p>\n\n<pre><code>class Element:\n    def __init__(self, name, symbol, number):\n        self.name = name\n        self.symbol = symbol\n        self.number = number\n\n    def __str__(self):\n        return str(self.__class__) + \": \" + str(self.__dict__)\n<\/code><\/pre>\n\n<p>And then,<\/p>\n\n<pre><code>elem = Element('my_name', 'some_symbol', 3)\nprint(elem)\n<\/code><\/pre>\n\n<p>produces<\/p>\n\n<pre><code>__main__.Element: {'symbol': 'some_symbol', 'name': 'my_name', 'number': 3}\n<\/code><\/pre>\n"},{"owner":{"account_id":13980,"reputation":41177,"user_id":28380,"user_type":"registered","accept_rate":91,"profile_image":"https:\/\/www.gravatar.com\/avatar\/e1f7597153b6acca55f0b522481e137d?s=256&d=identicon&r=PG","display_name":"Ali Afshar","link":"https:\/\/stackoverflow.com\/users\/28380\/ali-afshar"},"is_accepted":false,"score":81,"last_activity_date":1401872814,"last_edit_date":1401872814.0,"creation_date":1227380168,"answer_id":311645,"question_id":311627,"content_license":"CC BY-SA 3.0","body_markdown":"Use date.strftime. The formatting arguments are [described in the documentation][1].\r\n\r\nThis one is what you wanted:\r\n\r\n    some_date.strftime(&#39;%Y-%m-%d&#39;)\r\n\r\nThis one takes Locale into account. (do this)\r\n\r\n    some_date.strftime(&#39;%c&#39;)\r\n    \r\n\r\n  [1]: https:\/\/docs.python.org\/2\/library\/time.html#time.strftime","body":"<p>Use date.strftime. The formatting arguments are <a href=\"https:\/\/docs.python.org\/2\/library\/time.html#time.strftime\" rel=\"noreferrer\">described in the documentation<\/a>.<\/p>\n\n<p>This one is what you wanted:<\/p>\n\n<pre><code>some_date.strftime('%Y-%m-%d')\n<\/code><\/pre>\n\n<p>This one takes Locale into account. (do this)<\/p>\n\n<pre><code>some_date.strftime('%c')\n<\/code><\/pre>\n"},{"owner":{"account_id":423096,"reputation":3486,"user_id":802268,"user_type":"registered","accept_rate":53,"profile_image":"https:\/\/www.gravatar.com\/avatar\/47738d1deebdc397e348a02fecb10e86?s=256&d=identicon&r=PG","display_name":"xiaolong","link":"https:\/\/stackoverflow.com\/users\/802268\/xiaolong"},"is_accepted":false,"score":81,"last_activity_date":1551213023,"last_edit_date":1551213023.0,"creation_date":1330996898,"answer_id":9576583,"question_id":2081640,"content_license":"CC BY-SA 4.0","body_markdown":"*&#39;raw string&#39;* means it is stored as it appears. For example, `&#39;\\&#39;` is just a *backslash* instead of an *escaping*.","body":"<p><em>'raw string'<\/em> means it is stored as it appears. For example, <code>'\\'<\/code> is just a <em>backslash<\/em> instead of an <em>escaping<\/em>.<\/p>\n"},{"owner":{"account_id":15116032,"reputation":34769,"user_id":10908375,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/mI3ip.png?s=256&g=1","display_name":"Nicolas Gervais","link":"https:\/\/stackoverflow.com\/users\/10908375\/nicolas-gervais"},"is_accepted":false,"score":80,"last_activity_date":1597164243,"last_edit_date":1597164243.0,"creation_date":1578149189,"answer_id":59591771,"question_id":45310254,"content_license":"CC BY-SA 4.0","body_markdown":"Adding to Rob&#39;s [answer](https:\/\/stackoverflow.com\/a\/45310389\/10908375), you can use format specifiers with _f strings_ ([more here](https:\/\/www.programiz.com\/python-programming\/methods\/string\/format)). \r\n\r\n- You can control the __number of decimals__:\r\n```\r\npi = 3.141592653589793238462643383279\r\n\r\nprint(f&#39;The first 6 decimals of pi are {pi:.6f}.&#39;)\r\n```\r\n```\r\nThe first 6 decimals of pi are 3.141593.\r\n```\r\n- You can convert to __percentage__:\r\n```\r\ngrade = 29\/45\r\n\r\nprint(f&#39;My grade rounded to 3 decimals is {grade:.3%}.&#39;)\r\n```\r\n```\r\nMy grade rounded to 3 decimals is 64.444%.\r\n```\r\n- You can do other things like print __constant length__:\r\n```\r\nfrom random import randint\r\nfor i in range(5):\r\n    print(f&#39;My money is {randint(0, 150):&gt;3}$&#39;)\r\n```\r\n```\r\nMy money is 126$\r\nMy money is   7$\r\nMy money is 136$\r\nMy money is  15$\r\nMy money is  88$\r\n```\r\n- Or even print with a __comma thousand separator__:\r\n```\r\nprint(f&#39;I am worth {10000000000:,}$&#39;)\r\n```\r\n```\r\nI am worth 10,000,000,000$\r\n```","body":"<p>Adding to Rob's <a href=\"https:\/\/stackoverflow.com\/a\/45310389\/10908375\">answer<\/a>, you can use format specifiers with <em>f strings<\/em> (<a href=\"https:\/\/www.programiz.com\/python-programming\/methods\/string\/format\" rel=\"noreferrer\">more here<\/a>).<\/p>\n<ul>\n<li>You can control the <strong>number of decimals<\/strong>:<\/li>\n<\/ul>\n<pre><code>pi = 3.141592653589793238462643383279\n\nprint(f'The first 6 decimals of pi are {pi:.6f}.')\n<\/code><\/pre>\n<pre><code>The first 6 decimals of pi are 3.141593.\n<\/code><\/pre>\n<ul>\n<li>You can convert to <strong>percentage<\/strong>:<\/li>\n<\/ul>\n<pre><code>grade = 29\/45\n\nprint(f'My grade rounded to 3 decimals is {grade:.3%}.')\n<\/code><\/pre>\n<pre><code>My grade rounded to 3 decimals is 64.444%.\n<\/code><\/pre>\n<ul>\n<li>You can do other things like print <strong>constant length<\/strong>:<\/li>\n<\/ul>\n<pre><code>from random import randint\nfor i in range(5):\n    print(f'My money is {randint(0, 150):&gt;3}$')\n<\/code><\/pre>\n<pre><code>My money is 126$\nMy money is   7$\nMy money is 136$\nMy money is  15$\nMy money is  88$\n<\/code><\/pre>\n<ul>\n<li>Or even print with a <strong>comma thousand separator<\/strong>:<\/li>\n<\/ul>\n<pre><code>print(f'I am worth {10000000000:,}$')\n<\/code><\/pre>\n<pre><code>I am worth 10,000,000,000$\n<\/code><\/pre>\n"},{"owner":{"account_id":3021,"reputation":403723,"user_id":4279,"user_type":"registered","accept_rate":94,"profile_image":"https:\/\/www.gravatar.com\/avatar\/d92ce60d3a4cbe03598e27c2e8dee69d?s=256&d=identicon&r=PG","display_name":"jfs","link":"https:\/\/stackoverflow.com\/users\/4279\/jfs"},"is_accepted":false,"score":78,"last_activity_date":1465587002,"last_edit_date":1465587002.0,"creation_date":1245294745,"answer_id":1010597,"question_id":1009860,"content_license":"CC BY-SA 3.0","body_markdown":"There is also [`argparse` stdlib module](https:\/\/docs.python.org\/library\/argparse.html) (an &quot;impovement&quot; on stdlib&#39;s `optparse` module). Example from [the introduction to argparse][1]:\r\n\r\n    # script.py\r\n    import argparse\r\n    \r\n    if __name__ == &#39;__main__&#39;:\r\n        parser = argparse.ArgumentParser()\r\n        parser.add_argument(\r\n            &#39;integers&#39;, metavar=&#39;int&#39;, type=int, choices=range(10),\r\n             nargs=&#39;+&#39;, help=&#39;an integer in the range 0..9&#39;)\r\n        parser.add_argument(\r\n            &#39;--sum&#39;, dest=&#39;accumulate&#39;, action=&#39;store_const&#39;, const=sum,\r\n            default=max, help=&#39;sum the integers (default: find the max)&#39;)\r\n        \r\n        args = parser.parse_args()\r\n        print(args.accumulate(args.integers))\r\n\r\nUsage:\r\n\r\n    $ script.py 1 2 3 4\r\n    4\r\n    \r\n    $ script.py --sum 1 2 3 4\r\n    10\r\n\r\n\r\n  [1]: https:\/\/docs.python.org\/howto\/argparse.html","body":"<p>There is also <a href=\"https:\/\/docs.python.org\/library\/argparse.html\" rel=\"noreferrer\"><code>argparse<\/code> stdlib module<\/a> (an \"impovement\" on stdlib's <code>optparse<\/code> module). Example from <a href=\"https:\/\/docs.python.org\/howto\/argparse.html\" rel=\"noreferrer\">the introduction to argparse<\/a>:<\/p>\n\n<pre><code># script.py\nimport argparse\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\n        'integers', metavar='int', type=int, choices=range(10),\n         nargs='+', help='an integer in the range 0..9')\n    parser.add_argument(\n        '--sum', dest='accumulate', action='store_const', const=sum,\n        default=max, help='sum the integers (default: find the max)')\n\n    args = parser.parse_args()\n    print(args.accumulate(args.integers))\n<\/code><\/pre>\n\n<p>Usage:<\/p>\n\n<pre><code>$ script.py 1 2 3 4\n4\n\n$ script.py --sum 1 2 3 4\n10\n<\/code><\/pre>\n"},{"owner":{"account_id":1142545,"reputation":789,"user_id":1126043,"user_type":"unregistered","profile_image":"https:\/\/www.gravatar.com\/avatar\/31b233bea4f9f365ced696006a2d6deb?s=256&d=identicon&r=PG","display_name":"Lucien Hercaud","link":"https:\/\/stackoverflow.com\/users\/1126043\/lucien-hercaud"},"is_accepted":false,"score":78,"last_activity_date":1325503904,"last_edit_date":1325503904.0,"creation_date":1325499241,"answer_id":8699611,"question_id":4271740,"content_license":"CC BY-SA 3.0","body_markdown":"What about :\r\n\r\n    import platform\r\n    \r\n    h = platform.uname()[1]\r\n\r\nActually you may want to have a look to all the result in `platform.uname()`","body":"<p>What about :<\/p>\n\n<pre><code>import platform\n\nh = platform.uname()[1]\n<\/code><\/pre>\n\n<p>Actually you may want to have a look to all the result in <code>platform.uname()<\/code><\/p>\n"},{"owner":{"account_id":201797,"reputation":1894,"user_id":448460,"user_type":"registered","accept_rate":67,"profile_image":"https:\/\/www.gravatar.com\/avatar\/e0359c0aa8513ef0e15f9c00c8226113?s=256&d=identicon&r=PG","display_name":"Jonathan","link":"https:\/\/stackoverflow.com\/users\/448460\/jonathan"},"is_accepted":false,"score":78,"last_activity_date":1420475054,"last_edit_date":null,"creation_date":1420475054,"answer_id":27783657,"question_id":279561,"content_license":"CC BY-SA 3.0","body_markdown":"Many people have already suggested testing &#39;hasattr&#39;, but there&#39;s a simpler answer:\r\n\r\n    def func():\r\n        func.counter = getattr(func, &#39;counter&#39;, 0) + 1\r\n\r\nNo try\/except, no testing hasattr, just getattr with a default.","body":"<p>Many people have already suggested testing 'hasattr', but there's a simpler answer:<\/p>\n\n<pre><code>def func():\n    func.counter = getattr(func, 'counter', 0) + 1\n<\/code><\/pre>\n\n<p>No try\/except, no testing hasattr, just getattr with a default.<\/p>\n"},{"owner":{"account_id":891925,"reputation":23044,"user_id":929999,"user_type":"registered","accept_rate":83,"profile_image":"https:\/\/www.gravatar.com\/avatar\/8e38b941717ff6f519095ee81fcd09a7?s=256&d=identicon&r=PG","display_name":"Torxed","link":"https:\/\/stackoverflow.com\/users\/929999\/torxed"},"is_accepted":false,"score":78,"last_activity_date":1431523654,"last_edit_date":1431523654.0,"creation_date":1431523298,"answer_id":30216145,"question_id":30216000,"content_license":"CC BY-SA 3.0","body_markdown":"Because `list` is a [function][1] to convert say a string to a list object, while `[]` is used to create a list off the bat. Try this (might make more sense to you):\r\n\r\n    x = &quot;wham bam&quot;\r\n    a = list(x)\r\n    &gt;&gt;&gt; a\r\n    [&quot;w&quot;, &quot;h&quot;, &quot;a&quot;, &quot;m&quot;, ...]\r\n\r\nWhile\r\n\r\n    y = [&quot;wham bam&quot;]\r\n    &gt;&gt;&gt; y\r\n    [&quot;wham bam&quot;]\r\n\r\nGives you a actual list containing whatever you put in it.\r\n\r\n\r\n  [1]: https:\/\/docs.python.org\/2\/library\/functions.html#list","body":"<p>Because <code>list<\/code> is a <a href=\"https:\/\/docs.python.org\/2\/library\/functions.html#list\">function<\/a> to convert say a string to a list object, while <code>[]<\/code> is used to create a list off the bat. Try this (might make more sense to you):<\/p>\n\n<pre><code>x = \"wham bam\"\na = list(x)\n&gt;&gt;&gt; a\n[\"w\", \"h\", \"a\", \"m\", ...]\n<\/code><\/pre>\n\n<p>While<\/p>\n\n<pre><code>y = [\"wham bam\"]\n&gt;&gt;&gt; y\n[\"wham bam\"]\n<\/code><\/pre>\n\n<p>Gives you a actual list containing whatever you put in it.<\/p>\n"},{"owner":{"account_id":6805572,"reputation":1371,"user_id":5237412,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/yn8Gg.jpg?s=256&g=1","display_name":"ThatGuyRussell","link":"https:\/\/stackoverflow.com\/users\/5237412\/thatguyrussell"},"is_accepted":false,"score":78,"last_activity_date":1557221420,"last_edit_date":1557221420.0,"creation_date":1439951698,"answer_id":32085628,"question_id":15112125,"content_license":"CC BY-SA 4.0","body_markdown":"As stated by Martijn Pieters, the correct, and fastest, format is:\r\n    \r\n    if 1 in {x, y, z}:\r\n\r\nUsing his advice you would now have separate if-statements so that Python will read each statement whether the former were `True` or `False`. Such as:\r\n\r\n    if 0 in {x, y, z}:\r\n        mylist.append(&quot;c&quot;)\r\n    if 1 in {x, y, z}:\r\n        mylist.append(&quot;d&quot;)\r\n    if 2 in {x, y, z}:\r\n        mylist.append(&quot;e&quot;)\r\n    ...\r\n\r\nThis will work, but *if* you are comfortable using dictionaries (see what I did there), you can clean this up by making an initial dictionary mapping the numbers to the letters you want, then just using a for-loop:\r\n\r\n    num_to_letters = {0: &quot;c&quot;, 1: &quot;d&quot;, 2: &quot;e&quot;, 3: &quot;f&quot;}\r\n    for number in num_to_letters:\r\n        if number in {x, y, z}:\r\n            mylist.append(num_to_letters[number])","body":"<p>As stated by Martijn Pieters, the correct, and fastest, format is:<\/p>\n\n<pre><code>if 1 in {x, y, z}:\n<\/code><\/pre>\n\n<p>Using his advice you would now have separate if-statements so that Python will read each statement whether the former were <code>True<\/code> or <code>False<\/code>. Such as:<\/p>\n\n<pre><code>if 0 in {x, y, z}:\n    mylist.append(\"c\")\nif 1 in {x, y, z}:\n    mylist.append(\"d\")\nif 2 in {x, y, z}:\n    mylist.append(\"e\")\n...\n<\/code><\/pre>\n\n<p>This will work, but <em>if<\/em> you are comfortable using dictionaries (see what I did there), you can clean this up by making an initial dictionary mapping the numbers to the letters you want, then just using a for-loop:<\/p>\n\n<pre><code>num_to_letters = {0: \"c\", 1: \"d\", 2: \"e\", 3: \"f\"}\nfor number in num_to_letters:\n    if number in {x, y, z}:\n        mylist.append(num_to_letters[number])\n<\/code><\/pre>\n"},{"owner":{"account_id":2393003,"reputation":1210,"user_id":2092480,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/60ba7f0b2dab9f97075761aacd7ee90d?s=256&d=identicon&r=PG","display_name":"Deming","link":"https:\/\/stackoverflow.com\/users\/2092480\/deming"},"is_accepted":false,"score":78,"last_activity_date":1554190579,"last_edit_date":1554190579.0,"creation_date":1469212928,"answer_id":38533336,"question_id":17309288,"content_license":"CC BY-SA 4.0","body_markdown":"To install `requests` module on Debian\/Ubuntu for Python2:\r\n\r\n`$ sudo apt-get install python-requests`\r\n\r\nAnd for Python3 the command is:\r\n\r\n`$ sudo apt-get install python3-requests`\r\n","body":"<p>To install <code>requests<\/code> module on Debian\/Ubuntu for Python2:<\/p>\n\n<p><code>$ sudo apt-get install python-requests<\/code><\/p>\n\n<p>And for Python3 the command is:<\/p>\n\n<p><code>$ sudo apt-get install python3-requests<\/code><\/p>\n"},{"owner":{"account_id":7598086,"reputation":943,"user_id":5763660,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/8b6b9fb4f00f554e6182c224d466e7ad?s=256&d=identicon&r=PG","display_name":"Ben","link":"https:\/\/stackoverflow.com\/users\/5763660\/ben"},"is_accepted":false,"score":78,"last_activity_date":1499783550,"last_edit_date":null,"creation_date":1499783550,"answer_id":45037536,"question_id":805066,"content_license":"CC BY-SA 3.0","body_markdown":"Many answers have explained how to call a method from the parent which has been overridden in the child.\r\n\r\nHowever \r\n\r\n&gt; &quot;how do you call a parent class&#39;s method from child class?&quot;\r\n\r\n could also just mean:\r\n\r\n&gt; &quot;how do you call inherited methods?&quot; \r\n\r\nYou can call methods inherited from a parent class just as if they were methods of the child class, as long as they haven&#39;t been overwritten.\r\n\r\ne.g. in python 3:\r\n    \r\n    class A():\r\n      def bar(self, string):\r\n        print(&quot;Hi, I&#39;m bar, inherited from A&quot;+string)\r\n    \r\n    class B(A):\r\n      def baz(self):\r\n        self.bar(&quot; - called by baz in B&quot;)\r\n\r\n    B().baz() # prints out &quot;Hi, I&#39;m bar, inherited from A - called by baz in B&quot;\r\n\r\nyes, this may be fairly obvious, but I feel that without pointing this out people may leave this thread with the impression you have to jump through ridiculous hoops just to access inherited methods in python. Especially as this question rates highly in searches for &quot;how to access a parent class&#39;s method in Python&quot;, and the OP is written from the perspective of someone new to python.\r\n\r\nI found:\r\nhttps:\/\/docs.python.org\/3\/tutorial\/classes.html#inheritance\r\nto be useful in understanding how you access inherited methods.","body":"<p>Many answers have explained how to call a method from the parent which has been overridden in the child.<\/p>\n\n<p>However <\/p>\n\n<blockquote>\n  <p>\"how do you call a parent class's method from child class?\"<\/p>\n<\/blockquote>\n\n<p>could also just mean:<\/p>\n\n<blockquote>\n  <p>\"how do you call inherited methods?\" <\/p>\n<\/blockquote>\n\n<p>You can call methods inherited from a parent class just as if they were methods of the child class, as long as they haven't been overwritten.<\/p>\n\n<p>e.g. in python 3:<\/p>\n\n<pre><code>class A():\n  def bar(self, string):\n    print(\"Hi, I'm bar, inherited from A\"+string)\n\nclass B(A):\n  def baz(self):\n    self.bar(\" - called by baz in B\")\n\nB().baz() # prints out \"Hi, I'm bar, inherited from A - called by baz in B\"\n<\/code><\/pre>\n\n<p>yes, this may be fairly obvious, but I feel that without pointing this out people may leave this thread with the impression you have to jump through ridiculous hoops just to access inherited methods in python. Especially as this question rates highly in searches for \"how to access a parent class's method in Python\", and the OP is written from the perspective of someone new to python.<\/p>\n\n<p>I found:\n<a href=\"https:\/\/docs.python.org\/3\/tutorial\/classes.html#inheritance\" rel=\"noreferrer\">https:\/\/docs.python.org\/3\/tutorial\/classes.html#inheritance<\/a>\nto be useful in understanding how you access inherited methods.<\/p>\n"},{"owner":{"account_id":12488,"reputation":3860,"user_id":24608,"user_type":"registered","accept_rate":89,"profile_image":"https:\/\/www.gravatar.com\/avatar\/5fa54fdf60acfa1dd99d4d5f68ddbdce?s=256&d=identicon&r=PG","display_name":"bouvard","link":"https:\/\/stackoverflow.com\/users\/24608\/bouvard"},"is_accepted":false,"score":76,"last_activity_date":1503928644,"last_edit_date":1503928644.0,"creation_date":1226353564,"answer_id":279287,"question_id":279237,"content_license":"CC BY-SA 3.0","body_markdown":"If you structure your project this way:\r\n\r\n    src\\\r\n      __init__.py\r\n      main.py\r\n      dirFoo\\\r\n        __init__.py\r\n        Foo.py\r\n      dirBar\\\r\n        __init__.py\r\n        Bar.py\r\n\r\nThen from Foo.py you should be able to do:\r\n\r\n    import dirFoo.Foo\r\n\r\nOr:\r\n\r\n    from dirFoo.Foo import FooObject\r\n\r\nPer Tom&#39;s comment, this does require that the `src` folder is accessible either via `site_packages` or your search path. Also, as he mentions, `__init__.py` is implicitly imported when you first import a module in that package\/directory. Typically `__init__.py` is simply an empty file.\r\n","body":"<p>If you structure your project this way:<\/p>\n\n<pre><code>src\\\n  __init__.py\n  main.py\n  dirFoo\\\n    __init__.py\n    Foo.py\n  dirBar\\\n    __init__.py\n    Bar.py\n<\/code><\/pre>\n\n<p>Then from Foo.py you should be able to do:<\/p>\n\n<pre><code>import dirFoo.Foo\n<\/code><\/pre>\n\n<p>Or:<\/p>\n\n<pre><code>from dirFoo.Foo import FooObject\n<\/code><\/pre>\n\n<p>Per Tom's comment, this does require that the <code>src<\/code> folder is accessible either via <code>site_packages<\/code> or your search path. Also, as he mentions, <code>__init__.py<\/code> is implicitly imported when you first import a module in that package\/directory. Typically <code>__init__.py<\/code> is simply an empty file.<\/p>\n"},{"owner":{"account_id":11287457,"reputation":1777,"user_id":8277795,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/Xtc63.jpg?s=256&g=1","display_name":"Anurag Dhadse","link":"https:\/\/stackoverflow.com\/users\/8277795\/anurag-dhadse"},"is_accepted":false,"score":76,"last_activity_date":1631941129,"last_edit_date":1631941129.0,"creation_date":1631180971,"answer_id":69115959,"question_id":53645882,"content_license":"CC BY-SA 4.0","body_markdown":"# Joins 101\r\nThese animations might be better to explain you visually.\r\nCredits: [Garrick Aden-Buie tidyexplain repo][1]\r\n\r\n## Inner Join\r\n[![enter image description here][2]][2]\r\n## Outer Join or Full Join\r\n[![enter image description here][3]][3]\r\n## Right Join\r\n[![enter image description here][4]][4]\r\n## Left Join\r\n[![enter image description here][5]][5]\r\n\r\n\r\n  [1]: https:\/\/github.com\/gadenbuie\/tidyexplain\r\n  [2]: https:\/\/i.stack.imgur.com\/3qpXx.gif\r\n  [3]: https:\/\/i.stack.imgur.com\/dG8mw.gif\r\n  [4]: https:\/\/i.stack.imgur.com\/JpPRH.gif\r\n  [5]: https:\/\/i.stack.imgur.com\/s5hgJ.gif","body":"<h1>Joins 101<\/h1>\n<p>These animations might be better to explain you visually.\nCredits: <a href=\"https:\/\/github.com\/gadenbuie\/tidyexplain\" rel=\"noreferrer\">Garrick Aden-Buie tidyexplain repo<\/a><\/p>\n<h2>Inner Join<\/h2>\n<p><a href=\"https:\/\/i.stack.imgur.com\/3qpXx.gif\" rel=\"noreferrer\"><img src=\"https:\/\/i.stack.imgur.com\/3qpXx.gif\" alt=\"enter image description here\" \/><\/a><\/p>\n<h2>Outer Join or Full Join<\/h2>\n<p><a href=\"https:\/\/i.stack.imgur.com\/dG8mw.gif\" rel=\"noreferrer\"><img src=\"https:\/\/i.stack.imgur.com\/dG8mw.gif\" alt=\"enter image description here\" \/><\/a><\/p>\n<h2>Right Join<\/h2>\n<p><a href=\"https:\/\/i.stack.imgur.com\/JpPRH.gif\" rel=\"noreferrer\"><img src=\"https:\/\/i.stack.imgur.com\/JpPRH.gif\" alt=\"enter image description here\" \/><\/a><\/p>\n<h2>Left Join<\/h2>\n<p><a href=\"https:\/\/i.stack.imgur.com\/s5hgJ.gif\" rel=\"noreferrer\"><img src=\"https:\/\/i.stack.imgur.com\/s5hgJ.gif\" alt=\"enter image description here\" \/><\/a><\/p>\n"},{"owner":{"account_id":4530,"reputation":16858,"user_id":6848,"user_type":"registered","accept_rate":80,"profile_image":"https:\/\/www.gravatar.com\/avatar\/21aa98013e949850d41a1a0dd1c68c3a?s=256&d=identicon&r=PG","display_name":"Deestan","link":"https:\/\/stackoverflow.com\/users\/6848\/deestan"},"is_accepted":false,"score":75,"last_activity_date":1541521005,"last_edit_date":1541521005.0,"creation_date":1223455198,"answer_id":181848,"question_id":181530,"content_license":"CC BY-SA 4.0","body_markdown":"I prefer this style when I have a terribly large if-condition:\r\n\r\n    if (\r\n        expr1\r\n        and (expr2 or expr3)\r\n        and hasattr(thingy1, &#39;__eq__&#39;)\r\n        or status==&quot;HappyTimes&quot;\r\n    ):\r\n        do_stuff()\r\n    else:\r\n        do_other_stuff()\r\n","body":"<p>I prefer this style when I have a terribly large if-condition:<\/p>\n\n<pre><code>if (\n    expr1\n    and (expr2 or expr3)\n    and hasattr(thingy1, '__eq__')\n    or status==\"HappyTimes\"\n):\n    do_stuff()\nelse:\n    do_other_stuff()\n<\/code><\/pre>\n"},{"owner":{"account_id":49321,"reputation":42413,"user_id":146792,"user_type":"registered","accept_rate":88,"profile_image":"https:\/\/www.gravatar.com\/avatar\/d321b6a6a9c8aeb609111c4ceb516e42?s=256&d=identicon&r=PG","display_name":"mac","link":"https:\/\/stackoverflow.com\/users\/146792\/mac"},"is_accepted":false,"score":75,"last_activity_date":1413845487,"last_edit_date":1413845487.0,"creation_date":1310079164,"answer_id":6618078,"question_id":6618002,"content_license":"CC BY-SA 3.0","body_markdown":"The short answer is: **properties wins hands down**. Always.\r\n\r\nThere is sometimes a need for getters and setters, but even then, I would &quot;hide&quot; them to the outside world. There are plenty of ways to do this in Python (`getattr`, `setattr`, `__getattribute__`, etc..., but a very concise and clean one is:\r\n\r\n    def set_email(self, value):\r\n        if &#39;@&#39; not in value:\r\n            raise Exception(&quot;This doesn&#39;t look like an email address.&quot;)\r\n        self._email = value\r\n    \r\n    def get_email(self):\r\n        return self._email\r\n    \r\n    email = property(get_email, set_email)\r\n\r\n[Here&#39;s a brief article][1] that introduces the topic of getters and setters in Python.\r\n\r\n\r\n  [1]: http:\/\/tomayko.com\/writings\/getters-setters-fuxors","body":"<p>The short answer is: <strong>properties wins hands down<\/strong>. Always.<\/p>\n\n<p>There is sometimes a need for getters and setters, but even then, I would \"hide\" them to the outside world. There are plenty of ways to do this in Python (<code>getattr<\/code>, <code>setattr<\/code>, <code>__getattribute__<\/code>, etc..., but a very concise and clean one is:<\/p>\n\n<pre><code>def set_email(self, value):\n    if '@' not in value:\n        raise Exception(\"This doesn't look like an email address.\")\n    self._email = value\n\ndef get_email(self):\n    return self._email\n\nemail = property(get_email, set_email)\n<\/code><\/pre>\n\n<p><a href=\"http:\/\/tomayko.com\/writings\/getters-setters-fuxors\" rel=\"noreferrer\">Here's a brief article<\/a> that introduces the topic of getters and setters in Python.<\/p>\n"},{"owner":{"account_id":4015448,"reputation":1513,"user_id":3307759,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/2d43102ff2e079a3a1831a008a7ee80b?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"Suresh","link":"https:\/\/stackoverflow.com\/users\/3307759\/suresh"},"is_accepted":false,"score":75,"last_activity_date":1463451336,"last_edit_date":null,"creation_date":1463451336,"answer_id":37266050,"question_id":33054527,"content_license":"CC BY-SA 3.0","body_markdown":"Like it has been already mentioned, you are reading the file in binary mode and then creating a list of bytes. In your following **for** loop you are comparing string to bytes and that is where the code is failing.\r\n\r\nDecoding the bytes while adding to the list should work. The changed code should look as follows:\r\n\r\n    with open(fname, &#39;rb&#39;) as f:\r\n        lines = [x.decode(&#39;utf8&#39;).strip() for x in f.readlines()]\r\n\r\nThe bytes type was introduced in Python 3 and that is why your code worked in Python 2. In Python 2 there was no data type for bytes:\r\n\r\n    &gt;&gt;&gt; s=bytes(&#39;hello&#39;)\r\n    &gt;&gt;&gt; type(s)\r\n    &lt;type &#39;str&#39;&gt;\r\n\r\n","body":"<p>Like it has been already mentioned, you are reading the file in binary mode and then creating a list of bytes. In your following <strong>for<\/strong> loop you are comparing string to bytes and that is where the code is failing.<\/p>\n\n<p>Decoding the bytes while adding to the list should work. The changed code should look as follows:<\/p>\n\n<pre><code>with open(fname, 'rb') as f:\n    lines = [x.decode('utf8').strip() for x in f.readlines()]\n<\/code><\/pre>\n\n<p>The bytes type was introduced in Python 3 and that is why your code worked in Python 2. In Python 2 there was no data type for bytes:<\/p>\n\n<pre><code>&gt;&gt;&gt; s=bytes('hello')\n&gt;&gt;&gt; type(s)\n&lt;type 'str'&gt;\n<\/code><\/pre>\n"},{"owner":{"account_id":15607935,"reputation":1051,"user_id":11260185,"user_type":"registered","profile_image":"https:\/\/lh6.googleusercontent.com\/-GWMUt4l_etc\/AAAAAAAAAAI\/AAAAAAAAAAA\/ACHi3rc8IQNgR4mtMvA-x6r_U_9UiMMGwA\/mo\/photo.jpg?sz=256","display_name":"Christiaan Herrewijn","link":"https:\/\/stackoverflow.com\/users\/11260185\/christiaan-herrewijn"},"is_accepted":false,"score":75,"last_activity_date":1557223573,"last_edit_date":null,"creation_date":1557223573,"answer_id":56020191,"question_id":11005457,"content_license":"CC BY-SA 4.0","body_markdown":"If you are using pyenv, it is possible to delete your virtual environment:\r\n\r\n    $ pyenv virtualenv-delete &lt;name&gt;","body":"<p>If you are using pyenv, it is possible to delete your virtual environment:<\/p>\n\n<pre><code>$ pyenv virtualenv-delete &lt;name&gt;\n<\/code><\/pre>\n"},{"owner":{"account_id":2838318,"reputation":6088,"user_id":2438446,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/58806b975f85de166828c97ab4536364?s=256&d=identicon&r=PG","display_name":"Kent Munthe Caspersen","link":"https:\/\/stackoverflow.com\/users\/2438446\/kent-munthe-caspersen"},"is_accepted":false,"score":74,"last_activity_date":1511948322,"last_edit_date":1511948322.0,"creation_date":1445773225,"answer_id":33329251,"question_id":1009860,"content_license":"CC BY-SA 3.0","body_markdown":"If you need something fast and not very flexible\r\n\r\n\r\n**main.py:**\r\n\r\n    import sys\r\n\r\n    first_name = sys.argv[1]\r\n    last_name = sys.argv[2]\r\n    print(&quot;Hello &quot; + first_name + &quot; &quot; + last_name)\r\n\r\nThen run `python main.py James Smith`\r\n\r\nto produce the following output:\r\n    \r\n\r\n&gt; Hello James Smith","body":"<p>If you need something fast and not very flexible<\/p>\n\n<p><strong>main.py:<\/strong><\/p>\n\n<pre><code>import sys\n\nfirst_name = sys.argv[1]\nlast_name = sys.argv[2]\nprint(\"Hello \" + first_name + \" \" + last_name)\n<\/code><\/pre>\n\n<p>Then run <code>python main.py James Smith<\/code><\/p>\n\n<p>to produce the following output:<\/p>\n\n<blockquote>\n  <p>Hello James Smith<\/p>\n<\/blockquote>\n"},{"owner":{"account_id":481416,"reputation":356200,"user_id":895245,"user_type":"registered","accept_rate":49,"profile_image":"https:\/\/i.stack.imgur.com\/5Powi.jpg?s=256&g=1","display_name":"Ciro Santilli OurBigBook.com","link":"https:\/\/stackoverflow.com\/users\/895245\/ciro-santilli-ourbigbook-com"},"is_accepted":false,"score":74,"last_activity_date":1601010939,"last_edit_date":1601010939.0,"creation_date":1449915502,"answer_id":34238688,"question_id":1207406,"content_license":"CC BY-SA 4.0","body_markdown":"**Overview of workarounds**\r\n\r\nEither:\r\n\r\n-   use a linked list implementation\/roll your own.\r\n\r\n    A linked list is the proper data structure to support efficient item removal, and does not force you to make space\/time tradeoffs.\r\n\r\n    A CPython `list` is implemented with [dynamic arrays](https:\/\/en.wikipedia.org\/wiki\/Dynamic_array) as [mentioned here](https:\/\/stackoverflow.com\/questions\/3917574\/how-is-pythons-list-implemented), which is not a good data type to support removals.\r\n\r\n    There doesn&#39;t seem to be a linked list in the standard library however:\r\n\r\n    - https:\/\/stackoverflow.com\/questions\/19752134\/is-there-a-linked-list-predefined-library-in-python\r\n    - https:\/\/github.com\/ajakubek\/python-llist\r\n\r\n-   start a new `list()` from scratch, and `.append()` back at the end as mentioned at: https:\/\/stackoverflow.com\/a\/1207460\/895245\r\n\r\n    This time efficient, but less space efficient because it keeps an extra copy of the array around during iteration.\r\n\r\n-   use `del` with an index as mentioned at: https:\/\/stackoverflow.com\/a\/1207485\/895245\r\n\r\n    This is more space efficient since it dispenses the array copy, but it is less time efficient, because removal from dynamic arrays requires shifting all following items back by one, which is O(N).\r\n\r\nGenerally, if you are doing it quick and dirty and don&#39;t want to add a custom `LinkedList` class, you just want to go for the faster `.append()` option by default unless memory is a big concern.\r\n\r\n**Official Python 2 tutorial 4.2. &quot;for Statements&quot;**\r\n\r\nhttps:\/\/docs.python.org\/2\/tutorial\/controlflow.html#for-statements\r\n\r\nThis part of the docs makes it clear that:\r\n\r\n- you need to make a copy of the iterated list to modify it\r\n- one way to do it is with the slice notation `[:]`\r\n\r\n&gt; If you need to modify the sequence you are iterating over while inside the loop (for example to duplicate selected items), it is recommended that you first make a copy. Iterating over a sequence does not implicitly make a copy. The slice notation makes this especially convenient:\r\n&gt;\r\n&gt;     &gt;&gt;&gt; words = [&#39;cat&#39;, &#39;window&#39;, &#39;defenestrate&#39;]\r\n&gt;     &gt;&gt;&gt; for w in words[:]:  # Loop over a slice copy of the entire list.\r\n&gt;     ...     if len(w) &gt; 6:\r\n&gt;     ...         words.insert(0, w)\r\n&gt;     ...\r\n&gt;     &gt;&gt;&gt; words\r\n&gt;     [&#39;defenestrate&#39;, &#39;cat&#39;, &#39;window&#39;, &#39;defenestrate&#39;]\r\n\r\n**Python 2 documentation 7.3. &quot;The for statement&quot;**\r\n\r\nhttps:\/\/docs.python.org\/2\/reference\/compound_stmts.html#for\r\n\r\nThis part of the docs says once again that you have to make a copy, and gives an actual removal example:\r\n\r\n&gt; Note: There is a subtlety when the sequence is being modified by the loop (this can only occur for mutable sequences, i.e. lists). An internal counter is used to keep track of which item is used next, and this is incremented on each iteration. When this counter has reached the length of the sequence the loop terminates. This means that if the suite deletes the current (or a previous) item from the sequence, the next item will be skipped (since it gets the index of the current item which has already been treated). Likewise, if the suite inserts an item in the sequence before the current item, the current item will be treated again the next time through the loop. This can lead to nasty bugs that can be avoided by making a temporary copy using a slice of the whole sequence, e.g.,\r\n&gt;\r\n&gt;     for x in a[:]:\r\n        if x &lt; 0: a.remove(x)\r\n\r\nHowever, I disagree with this implementation, since `.remove()` has to iterate the *entire list* to find the value.\r\n\r\n**Could Python do this better?**\r\n\r\nIt seems like this particular Python API could be improved. Compare it, for instance, with:\r\n\r\n- Java [ListIterator::remove](https:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/util\/ListIterator.html) which documents &quot;This call can only be made once per call to next or previous&quot;\r\n- C++ [`std::vector::erase`](https:\/\/en.cppreference.com\/w\/cpp\/container\/vector\/erase) which returns a valid interator to the element after the one removed\r\n\r\nboth of which make it crystal clear that you cannot modify a list being iterated except with the iterator itself, and gives you efficient ways to do so without copying the list.\r\n\r\nPerhaps the underlying rationale is that Python lists are assumed to be dynamic array backed, and therefore any type of removal will be time inefficient anyways, while Java has a nicer interface hierarchy with both [`ArrayList`](https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/util\/ArrayList.html) and [`LinkedList`](https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/util\/LinkedList.html) implementations of `ListIterator`.\r\n\r\nThere doesn&#39;t seem to be an explicit linked list type in the Python stdlib either: https:\/\/stackoverflow.com\/questions\/280243\/python-linked-list\/280286\r\n","body":"<p><strong>Overview of workarounds<\/strong><\/p>\n<p>Either:<\/p>\n<ul>\n<li><p>use a linked list implementation\/roll your own.<\/p>\n<p>A linked list is the proper data structure to support efficient item removal, and does not force you to make space\/time tradeoffs.<\/p>\n<p>A CPython <code>list<\/code> is implemented with <a href=\"https:\/\/en.wikipedia.org\/wiki\/Dynamic_array\" rel=\"noreferrer\">dynamic arrays<\/a> as <a href=\"https:\/\/stackoverflow.com\/questions\/3917574\/how-is-pythons-list-implemented\">mentioned here<\/a>, which is not a good data type to support removals.<\/p>\n<p>There doesn't seem to be a linked list in the standard library however:<\/p>\n<ul>\n<li><a href=\"https:\/\/stackoverflow.com\/questions\/19752134\/is-there-a-linked-list-predefined-library-in-python\">Is there a linked list predefined library in Python?<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/ajakubek\/python-llist\" rel=\"noreferrer\">https:\/\/github.com\/ajakubek\/python-llist<\/a><\/li>\n<\/ul>\n<\/li>\n<li><p>start a new <code>list()<\/code> from scratch, and <code>.append()<\/code> back at the end as mentioned at: <a href=\"https:\/\/stackoverflow.com\/a\/1207460\/895245\">https:\/\/stackoverflow.com\/a\/1207460\/895245<\/a><\/p>\n<p>This time efficient, but less space efficient because it keeps an extra copy of the array around during iteration.<\/p>\n<\/li>\n<li><p>use <code>del<\/code> with an index as mentioned at: <a href=\"https:\/\/stackoverflow.com\/a\/1207485\/895245\">https:\/\/stackoverflow.com\/a\/1207485\/895245<\/a><\/p>\n<p>This is more space efficient since it dispenses the array copy, but it is less time efficient, because removal from dynamic arrays requires shifting all following items back by one, which is O(N).<\/p>\n<\/li>\n<\/ul>\n<p>Generally, if you are doing it quick and dirty and don't want to add a custom <code>LinkedList<\/code> class, you just want to go for the faster <code>.append()<\/code> option by default unless memory is a big concern.<\/p>\n<p><strong>Official Python 2 tutorial 4.2. &quot;for Statements&quot;<\/strong><\/p>\n<p><a href=\"https:\/\/docs.python.org\/2\/tutorial\/controlflow.html#for-statements\" rel=\"noreferrer\">https:\/\/docs.python.org\/2\/tutorial\/controlflow.html#for-statements<\/a><\/p>\n<p>This part of the docs makes it clear that:<\/p>\n<ul>\n<li>you need to make a copy of the iterated list to modify it<\/li>\n<li>one way to do it is with the slice notation <code>[:]<\/code><\/li>\n<\/ul>\n<blockquote>\n<p>If you need to modify the sequence you are iterating over while inside the loop (for example to duplicate selected items), it is recommended that you first make a copy. Iterating over a sequence does not implicitly make a copy. The slice notation makes this especially convenient:<\/p>\n<pre><code>&gt;&gt;&gt; words = ['cat', 'window', 'defenestrate']\n&gt;&gt;&gt; for w in words[:]:  # Loop over a slice copy of the entire list.\n...     if len(w) &gt; 6:\n...         words.insert(0, w)\n...\n&gt;&gt;&gt; words\n['defenestrate', 'cat', 'window', 'defenestrate']\n<\/code><\/pre>\n<\/blockquote>\n<p><strong>Python 2 documentation 7.3. &quot;The for statement&quot;<\/strong><\/p>\n<p><a href=\"https:\/\/docs.python.org\/2\/reference\/compound_stmts.html#for\" rel=\"noreferrer\">https:\/\/docs.python.org\/2\/reference\/compound_stmts.html#for<\/a><\/p>\n<p>This part of the docs says once again that you have to make a copy, and gives an actual removal example:<\/p>\n<blockquote>\n<p>Note: There is a subtlety when the sequence is being modified by the loop (this can only occur for mutable sequences, i.e. lists). An internal counter is used to keep track of which item is used next, and this is incremented on each iteration. When this counter has reached the length of the sequence the loop terminates. This means that if the suite deletes the current (or a previous) item from the sequence, the next item will be skipped (since it gets the index of the current item which has already been treated). Likewise, if the suite inserts an item in the sequence before the current item, the current item will be treated again the next time through the loop. This can lead to nasty bugs that can be avoided by making a temporary copy using a slice of the whole sequence, e.g.,<\/p>\n<pre><code>for x in a[:]:\n<\/code><\/pre>\n<\/blockquote>\n<pre><code>    if x &lt; 0: a.remove(x)\n<\/code><\/pre>\n<p>However, I disagree with this implementation, since <code>.remove()<\/code> has to iterate the <em>entire list<\/em> to find the value.<\/p>\n<p><strong>Could Python do this better?<\/strong><\/p>\n<p>It seems like this particular Python API could be improved. Compare it, for instance, with:<\/p>\n<ul>\n<li>Java <a href=\"https:\/\/docs.oracle.com\/javase\/7\/docs\/api\/java\/util\/ListIterator.html\" rel=\"noreferrer\">ListIterator::remove<\/a> which documents &quot;This call can only be made once per call to next or previous&quot;<\/li>\n<li>C++ <a href=\"https:\/\/en.cppreference.com\/w\/cpp\/container\/vector\/erase\" rel=\"noreferrer\"><code>std::vector::erase<\/code><\/a> which returns a valid interator to the element after the one removed<\/li>\n<\/ul>\n<p>both of which make it crystal clear that you cannot modify a list being iterated except with the iterator itself, and gives you efficient ways to do so without copying the list.<\/p>\n<p>Perhaps the underlying rationale is that Python lists are assumed to be dynamic array backed, and therefore any type of removal will be time inefficient anyways, while Java has a nicer interface hierarchy with both <a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/util\/ArrayList.html\" rel=\"noreferrer\"><code>ArrayList<\/code><\/a> and <a href=\"https:\/\/docs.oracle.com\/javase\/8\/docs\/api\/java\/util\/LinkedList.html\" rel=\"noreferrer\"><code>LinkedList<\/code><\/a> implementations of <code>ListIterator<\/code>.<\/p>\n<p>There doesn't seem to be an explicit linked list type in the Python stdlib either: <a href=\"https:\/\/stackoverflow.com\/questions\/280243\/python-linked-list\/280286\">Python Linked List<\/a><\/p>\n"},{"owner":{"account_id":107038,"reputation":133900,"user_id":284795,"user_type":"registered","accept_rate":79,"profile_image":"https:\/\/www.gravatar.com\/avatar\/99f7ffd3d45dbcef0b3b6960dcfe81a2?s=256&d=identicon&r=PG","display_name":"Colonel Panic","link":"https:\/\/stackoverflow.com\/users\/284795\/colonel-panic"},"is_accepted":false,"score":73,"last_activity_date":1419332389,"last_edit_date":1495539206.0,"creation_date":1375451326,"answer_id":18018539,"question_id":2817869,"content_license":"CC BY-SA 3.0","body_markdown":"What&#39;s going on? Python modules can be [part written in C or C++](https:\/\/docs.python.org\/3\/extending\/extending.html) (typically for speed). If you try to install such a package with Pip (or `setup.py`), it has to compile that C\/C++ from source. Out the box, Pip will brazenly assume you the compiler Microsoft Visual C++ installed. If you don&#39;t have it, you&#39;ll see this cryptic error message &quot;Error: Unable to find vcvarsall.bat&quot;.\r\n\r\nThe prescribed solution is to install a C\/C++ compiler, either Microsoft Visual C++, or [MinGW](http:\/\/www.mingw.org\/wiki\/Getting_Started) (an open-source project). However, installing and configuring either is prohibitively difficult. (Edit 2014: Microsoft have published a special [C++ compiler](http:\/\/www.microsoft.com\/en-us\/download\/details.aspx?id=44266) for Python 2.7)\r\n\r\nThe easiest solution is to use Christoph Gohlke&#39;s Windows installers (.msi) for popular Python packages. He builds installers for Python 2.x and 3.x, 32 bit and 64 bit. You can download them from http:\/\/www.lfd.uci.edu\/~gohlke\/pythonlibs\/\r\n\r\n* * *\r\n\r\nIf you too think &quot;Error: Unable to find vcvarsall.bat&quot; is a ludicrously cryptic and unhelpful message, then please comment on the bug at http:\/\/bugs.python.org\/issue2943 to replace it with a more helpful and user-friendly message. \r\n\r\nFor comparison, Ruby ships with a package manager Gem and offers a quasi-official C\/C++ compiler, DevKit. If you try to install a package without it, you see this helpful friendly useful message:\r\n\r\n&gt; Please update your PATH to include build tools or download the DevKit from http:\/\/rubyinstaller.org\/downloads and follow the instructions at http:\/\/github.com\/oneclick\/rubyinstaller\/wiki\/Development-Kit\r\n\r\nYou can read a longer rant about Python packaging at https:\/\/stackoverflow.com\/a\/13445719\/284795\r\n","body":"<p>What's going on? Python modules can be <a href=\"https:\/\/docs.python.org\/3\/extending\/extending.html\" rel=\"noreferrer\">part written in C or C++<\/a> (typically for speed). If you try to install such a package with Pip (or <code>setup.py<\/code>), it has to compile that C\/C++ from source. Out the box, Pip will brazenly assume you the compiler Microsoft Visual C++ installed. If you don't have it, you'll see this cryptic error message \"Error: Unable to find vcvarsall.bat\".<\/p>\n\n<p>The prescribed solution is to install a C\/C++ compiler, either Microsoft Visual C++, or <a href=\"http:\/\/www.mingw.org\/wiki\/Getting_Started\" rel=\"noreferrer\">MinGW<\/a> (an open-source project). However, installing and configuring either is prohibitively difficult. (Edit 2014: Microsoft have published a special <a href=\"http:\/\/www.microsoft.com\/en-us\/download\/details.aspx?id=44266\" rel=\"noreferrer\">C++ compiler<\/a> for Python 2.7)<\/p>\n\n<p>The easiest solution is to use Christoph Gohlke's Windows installers (.msi) for popular Python packages. He builds installers for Python 2.x and 3.x, 32 bit and 64 bit. You can download them from <a href=\"http:\/\/www.lfd.uci.edu\/~gohlke\/pythonlibs\/\" rel=\"noreferrer\">http:\/\/www.lfd.uci.edu\/~gohlke\/pythonlibs\/<\/a><\/p>\n\n<hr>\n\n<p>If you too think \"Error: Unable to find vcvarsall.bat\" is a ludicrously cryptic and unhelpful message, then please comment on the bug at <a href=\"http:\/\/bugs.python.org\/issue2943\" rel=\"noreferrer\">http:\/\/bugs.python.org\/issue2943<\/a> to replace it with a more helpful and user-friendly message. <\/p>\n\n<p>For comparison, Ruby ships with a package manager Gem and offers a quasi-official C\/C++ compiler, DevKit. If you try to install a package without it, you see this helpful friendly useful message:<\/p>\n\n<blockquote>\n  <p>Please update your PATH to include build tools or download the DevKit from <a href=\"http:\/\/rubyinstaller.org\/downloads\" rel=\"noreferrer\">http:\/\/rubyinstaller.org\/downloads<\/a> and follow the instructions at <a href=\"http:\/\/github.com\/oneclick\/rubyinstaller\/wiki\/Development-Kit\" rel=\"noreferrer\">http:\/\/github.com\/oneclick\/rubyinstaller\/wiki\/Development-Kit<\/a><\/p>\n<\/blockquote>\n\n<p>You can read a longer rant about Python packaging at <a href=\"https:\/\/stackoverflow.com\/a\/13445719\/284795\">https:\/\/stackoverflow.com\/a\/13445719\/284795<\/a><\/p>\n"},{"owner":{"account_id":8291,"reputation":861385,"user_id":14860,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/i.stack.imgur.com\/vXG1F.png?s=256&g=1","display_name":"paxdiablo","link":"https:\/\/stackoverflow.com\/users\/14860\/paxdiablo"},"is_accepted":false,"score":72,"last_activity_date":1578582898,"last_edit_date":1578582898.0,"creation_date":1238469952,"answer_id":699901,"question_id":699866,"content_license":"CC BY-SA 4.0","body_markdown":"Python actually *does* have something already built in for this, the ability to do operations such as `&#39;{0:b}&#39;.format(42)`, which will give you the bit pattern (in a string) for `42`, or `101010`.\r\n\r\n---\r\n\r\nFor a more general philosophy, no language or library will give its user base *everything* that they desire. If you&#39;re working in an environment that doesn&#39;t provide exactly what you need, you should be collecting snippets of code as you develop to ensure you never have to write the same thing twice. Such as, for example, the pseudo-code:\r\n\r\n    define intToBinString, receiving intVal:\r\n        if intVal is equal to zero:\r\n            return &quot;0&quot;\r\n        set strVal to &quot;&quot;\r\n        while intVal is greater than zero:\r\n            if intVal is odd:\r\n                prefix &quot;1&quot; to strVal\r\n            else:\r\n                prefix &quot;0&quot; to strVal\r\n            divide intVal by two, rounding down\r\n        return strVal\r\n\r\nwhich will construct your binary string based on the decimal value. Just keep in mind that&#39;s a generic bit of pseudo-code which may not be the *most* efficient way of doing it though, with the iterations you seem to be proposing, it won&#39;t make much difference. It&#39;s really just meant as a guideline on how it could be done.\r\n\r\nThe general idea is to use code from (in order of preference):\r\n\r\n  - the language or built-in libraries.\r\n  - third-party libraries with suitable licenses.\r\n  - your own collection.\r\n  - something new you need to write (and save in your own collection for later).\r\n","body":"<p>Python actually <em>does<\/em> have something already built in for this, the ability to do operations such as <code>'{0:b}'.format(42)<\/code>, which will give you the bit pattern (in a string) for <code>42<\/code>, or <code>101010<\/code>.<\/p>\n\n<hr>\n\n<p>For a more general philosophy, no language or library will give its user base <em>everything<\/em> that they desire. If you're working in an environment that doesn't provide exactly what you need, you should be collecting snippets of code as you develop to ensure you never have to write the same thing twice. Such as, for example, the pseudo-code:<\/p>\n\n<pre><code>define intToBinString, receiving intVal:\n    if intVal is equal to zero:\n        return \"0\"\n    set strVal to \"\"\n    while intVal is greater than zero:\n        if intVal is odd:\n            prefix \"1\" to strVal\n        else:\n            prefix \"0\" to strVal\n        divide intVal by two, rounding down\n    return strVal\n<\/code><\/pre>\n\n<p>which will construct your binary string based on the decimal value. Just keep in mind that's a generic bit of pseudo-code which may not be the <em>most<\/em> efficient way of doing it though, with the iterations you seem to be proposing, it won't make much difference. It's really just meant as a guideline on how it could be done.<\/p>\n\n<p>The general idea is to use code from (in order of preference):<\/p>\n\n<ul>\n<li>the language or built-in libraries.<\/li>\n<li>third-party libraries with suitable licenses.<\/li>\n<li>your own collection.<\/li>\n<li>something new you need to write (and save in your own collection for later).<\/li>\n<\/ul>\n"},{"owner":{"account_id":41930,"reputation":12478,"user_id":122012,"user_type":"registered","accept_rate":43,"profile_image":"https:\/\/i.stack.imgur.com\/neoBL.jpg?s=256&g=1","display_name":"Juergen","link":"https:\/\/stackoverflow.com\/users\/122012\/juergen"},"is_accepted":false,"score":72,"last_activity_date":1562931110,"last_edit_date":1562931110.0,"creation_date":1258710685,"answer_id":1769452,"question_id":1769403,"content_license":"CC BY-SA 4.0","body_markdown":"kwargs is just a dictionary that is added to the parameters.\r\n\r\nA dictionary can contain key, value pairs. And that are the kwargs. Ok, this is how.\r\n\r\nThe what for is not so simple.\r\n\r\nFor example (very hypothetical) you have an interface that just calls other routines to do the job:\r\n\r\n    def myDo(what, where, why):\r\n       if what == &#39;swim&#39;:\r\n          doSwim(where, why)\r\n       elif what == &#39;walk&#39;:\r\n          doWalk(where, why)\r\n       ...\r\n\r\nNow you get a new method &quot;drive&quot;:\r\n\r\n    elif what == &#39;drive&#39;:\r\n       doDrive(where, why, vehicle)\r\n\r\nBut wait a minute, there is a new parameter &quot;vehicle&quot; -- you did not know it before. Now you must add it to the signature of the myDo-function.\r\n\r\nHere you can throw kwargs into play -- you just add kwargs to the signature:\r\n\r\n    def myDo(what, where, why, **kwargs):\r\n       if what == &#39;drive&#39;:\r\n          doDrive(where, why, **kwargs)\r\n       elif what == &#39;swim&#39;:\r\n          doSwim(where, why, **kwargs)\r\n\r\nThis way you don&#39;t need to change the signature of your interface function every time some of your called routines might change.\r\n\r\nThis is just one nice example you could find kwargs helpful.","body":"<p>kwargs is just a dictionary that is added to the parameters.<\/p>\n\n<p>A dictionary can contain key, value pairs. And that are the kwargs. Ok, this is how.<\/p>\n\n<p>The what for is not so simple.<\/p>\n\n<p>For example (very hypothetical) you have an interface that just calls other routines to do the job:<\/p>\n\n<pre><code>def myDo(what, where, why):\n   if what == 'swim':\n      doSwim(where, why)\n   elif what == 'walk':\n      doWalk(where, why)\n   ...\n<\/code><\/pre>\n\n<p>Now you get a new method \"drive\":<\/p>\n\n<pre><code>elif what == 'drive':\n   doDrive(where, why, vehicle)\n<\/code><\/pre>\n\n<p>But wait a minute, there is a new parameter \"vehicle\" -- you did not know it before. Now you must add it to the signature of the myDo-function.<\/p>\n\n<p>Here you can throw kwargs into play -- you just add kwargs to the signature:<\/p>\n\n<pre><code>def myDo(what, where, why, **kwargs):\n   if what == 'drive':\n      doDrive(where, why, **kwargs)\n   elif what == 'swim':\n      doSwim(where, why, **kwargs)\n<\/code><\/pre>\n\n<p>This way you don't need to change the signature of your interface function every time some of your called routines might change.<\/p>\n\n<p>This is just one nice example you could find kwargs helpful.<\/p>\n"},{"owner":{"account_id":7899904,"reputation":2853,"user_id":5967252,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/Edxmf.jpg?s=256&g=1","display_name":"Nikos Tavoularis","link":"https:\/\/stackoverflow.com\/users\/5967252\/nikos-tavoularis"},"is_accepted":false,"score":72,"last_activity_date":1611310338,"last_edit_date":1611310338.0,"creation_date":1475010117,"answer_id":39734251,"question_id":26266362,"content_license":"CC BY-SA 4.0","body_markdown":"Based on the most voted answer we can easily define a function that gives us a dataframe to preview the missing values and the % of missing values in each column:\r\n\r\n```\r\ndef missing_values_table(df):\r\n    mis_val = df.isnull().sum()\r\n    mis_val_percent = 100 * df.isnull().sum() \/ len(df)\r\n    mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\r\n    mis_val_table_ren_columns = mis_val_table.rename(\r\n    columns = {0 : &#39;Missing Values&#39;, 1 : &#39;% of Total Values&#39;})\r\n    mis_val_table_ren_columns = mis_val_table_ren_columns[\r\n        mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(\r\n    &#39;% of Total Values&#39;, ascending=False).round(1)\r\n    print (&quot;Your selected dataframe has &quot; + str(df.shape[1]) + &quot; columns.\\n&quot;      \r\n        &quot;There are &quot; + str(mis_val_table_ren_columns.shape[0]) +\r\n            &quot; columns that have missing values.&quot;)\r\n    return mis_val_table_ren_columns\r\n```","body":"<p>Based on the most voted answer we can easily define a function that gives us a dataframe to preview the missing values and the % of missing values in each column:<\/p>\n<pre><code>def missing_values_table(df):\n    mis_val = df.isnull().sum()\n    mis_val_percent = 100 * df.isnull().sum() \/ len(df)\n    mis_val_table = pd.concat([mis_val, mis_val_percent], axis=1)\n    mis_val_table_ren_columns = mis_val_table.rename(\n    columns = {0 : 'Missing Values', 1 : '% of Total Values'})\n    mis_val_table_ren_columns = mis_val_table_ren_columns[\n        mis_val_table_ren_columns.iloc[:,1] != 0].sort_values(\n    '% of Total Values', ascending=False).round(1)\n    print (&quot;Your selected dataframe has &quot; + str(df.shape[1]) + &quot; columns.\\n&quot;      \n        &quot;There are &quot; + str(mis_val_table_ren_columns.shape[0]) +\n            &quot; columns that have missing values.&quot;)\n    return mis_val_table_ren_columns\n<\/code><\/pre>\n"},{"owner":{"account_id":2444936,"reputation":105579,"user_id":2867928,"user_type":"registered","accept_rate":90,"profile_image":"https:\/\/i.stack.imgur.com\/5qfHZ.png?s=256&g=1","display_name":"Mazdak","link":"https:\/\/stackoverflow.com\/users\/2867928\/mazdak"},"is_accepted":false,"score":72,"last_activity_date":1527091226,"last_edit_date":1527091226.0,"creation_date":1526199064,"answer_id":50314071,"question_id":34819221,"content_license":"CC BY-SA 4.0","body_markdown":"If you already have all the required modules installed you probably need to import the `setuptools` module in your `setup.py` file. So just add the following line at the leading of `setup.py` file.\r\n\r\n    import setuptools\r\n    from distutils.core import setup\r\n    # other imports and setups\r\n\r\nThis is also mentioned in wheel&#39;s documentation. https:\/\/wheel.readthedocs.io\/en\/stable\/#usage","body":"<p>If you already have all the required modules installed you probably need to import the <code>setuptools<\/code> module in your <code>setup.py<\/code> file. So just add the following line at the leading of <code>setup.py<\/code> file.<\/p>\n\n<pre><code>import setuptools\nfrom distutils.core import setup\n# other imports and setups\n<\/code><\/pre>\n\n<p>This is also mentioned in wheel's documentation. <a href=\"https:\/\/wheel.readthedocs.io\/en\/stable\/#usage\" rel=\"noreferrer\">https:\/\/wheel.readthedocs.io\/en\/stable\/#usage<\/a><\/p>\n"},{"owner":{"account_id":2444628,"reputation":3057,"user_id":2132312,"user_type":"registered","accept_rate":56,"profile_image":"https:\/\/i.stack.imgur.com\/xv2d5.png?s=256&g=1","display_name":"Matthew D. Scholefield","link":"https:\/\/stackoverflow.com\/users\/2132312\/matthew-d-scholefield"},"is_accepted":false,"score":72,"last_activity_date":1527973695,"last_edit_date":null,"creation_date":1527973695,"answer_id":50661182,"question_id":772124,"content_license":"CC BY-SA 4.0","body_markdown":"Summing up what others have said, as of Python 3, Ellipsis is essentially another singleton constant similar to `None`, but without a particular intended use. Existing uses include:\r\n\r\n - In slice syntax to represent the full slice in remaining dimensions\r\n - In type hinting to indicate only part of a type(`Callable[..., int]` or `Tuple[str, ...]`)\r\n - In type stub files to indicate there is a default value without specifying it\r\n\r\nPossible uses could include:\r\n\r\n - As a default value for places where `None` is a valid option\r\n - As the content for a function you haven&#39;t implemented yet","body":"<p>Summing up what others have said, as of Python 3, Ellipsis is essentially another singleton constant similar to <code>None<\/code>, but without a particular intended use. Existing uses include:<\/p>\n\n<ul>\n<li>In slice syntax to represent the full slice in remaining dimensions<\/li>\n<li>In type hinting to indicate only part of a type(<code>Callable[..., int]<\/code> or <code>Tuple[str, ...]<\/code>)<\/li>\n<li>In type stub files to indicate there is a default value without specifying it<\/li>\n<\/ul>\n\n<p>Possible uses could include:<\/p>\n\n<ul>\n<li>As a default value for places where <code>None<\/code> is a valid option<\/li>\n<li>As the content for a function you haven't implemented yet<\/li>\n<\/ul>\n"},{"owner":{"account_id":3005837,"reputation":5582,"user_id":2550406,"user_type":"registered","accept_rate":88,"profile_image":"https:\/\/i.stack.imgur.com\/5YTs2.png?s=256&g=1","display_name":"lucidbrot","link":"https:\/\/stackoverflow.com\/users\/2550406\/lucidbrot"},"is_accepted":false,"score":72,"last_activity_date":1635614370,"last_edit_date":1635614370.0,"creation_date":1563284456,"answer_id":57058634,"question_id":4142151,"content_license":"CC BY-SA 4.0","body_markdown":"From python3.3 upwards, `__init__.py` is [no longer necessary](http:\/\/python-notes.curiousefficiency.org\/en\/latest\/python_concepts\/import_traps.html). If the current directory of the console is the directory where the python script is located, everything works fine with  \r\n\r\n    import user\r\nHowever, this won&#39;t work if called from a different directory, which does not contain `user.py`.  \r\nIn that case, use  \r\n\r\n    from . import user\r\nThis works even if you want to import the whole file instead of just a class from there.","body":"<p>From python3.3 upwards, <code>__init__.py<\/code> is <a href=\"http:\/\/python-notes.curiousefficiency.org\/en\/latest\/python_concepts\/import_traps.html\" rel=\"noreferrer\">no longer necessary<\/a>. If the current directory of the console is the directory where the python script is located, everything works fine with<\/p>\n<pre><code>import user\n<\/code><\/pre>\n<p>However, this won't work if called from a different directory, which does not contain <code>user.py<\/code>.<br \/>\nIn that case, use<\/p>\n<pre><code>from . import user\n<\/code><\/pre>\n<p>This works even if you want to import the whole file instead of just a class from there.<\/p>\n"},{"owner":{"account_id":14115577,"reputation":23397,"user_id":10197418,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/be8Y6.jpg?s=256&g=1","display_name":"FObersteiner","link":"https:\/\/stackoverflow.com\/users\/10197418\/fobersteiner"},"is_accepted":false,"score":71,"last_activity_date":1697439483,"last_edit_date":1697439483.0,"creation_date":1594103680,"answer_id":62769371,"question_id":127803,"content_license":"CC BY-SA 4.0","body_markdown":"## Python &gt;= 3.11\r\n[`fromisoformat`](https:\/\/docs.python.org\/3\/library\/datetime.html#datetime.date.fromisoformat) now parses `Z` directly:\r\n```py\r\nfrom datetime import datetime\r\n\r\ns = &quot;2008-09-03T20:56:35.450686Z&quot;\r\n\r\ndatetime.fromisoformat(s)\r\ndatetime.datetime(2008, 9, 3, 20, 56, 35, 450686, tzinfo=datetime.timezone.utc)\r\n```\r\n## Python 3.7 to 3.10\r\nA simple option from one of the comments: replace `&#39;Z&#39;` with `&#39;+00:00&#39;` - and use `fromisoformat`:\r\n```Python\r\nfrom datetime import datetime\r\n\r\ns = &quot;2008-09-03T20:56:35.450686Z&quot;\r\n\r\ndatetime.fromisoformat(s.replace(&#39;Z&#39;, &#39;+00:00&#39;))\r\n# datetime.datetime(2008, 9, 3, 20, 56, 35, 450686, tzinfo=datetime.timezone.utc)\r\n```\r\n\r\n### Why prefer `fromisoformat`?\r\n\r\nAlthough `strptime`&#39;s `%z` can parse the `&#39;Z&#39;` character to UTC, **`fromisoformat` is faster by ~ x40** (or even ~x60 for Python 3.11):\r\n```\r\nfrom datetime import datetime\r\nfrom dateutil import parser\r\n\r\ns = &quot;2008-09-03T20:56:35.450686Z&quot;\r\n\r\n# Python 3.11+\r\n%timeit datetime.fromisoformat(s)\r\n85.1 ns &#177; 0.473 ns per loop (mean &#177; std. dev. of 7 runs, 10,000,000 loops each)\r\n\r\n# Python 3.7 to 3.10\r\n%timeit datetime.fromisoformat(s.replace(&#39;Z&#39;, &#39;+00:00&#39;))\r\n134 ns &#177; 0.522 ns per loop (mean &#177; std. dev. of 7 runs, 10,000,000 loops each)\r\n\r\n%timeit parser.isoparse(s)\r\n4.09 &#181;s &#177; 5.2 ns per loop (mean &#177; std. dev. of 7 runs, 100,000 loops each)\r\n\r\n%timeit datetime.strptime(s, &#39;%Y-%m-%dT%H:%M:%S.%f%z&#39;)\r\n5 &#181;s &#177; 9.26 ns per loop (mean &#177; std. dev. of 7 runs, 100,000 loops each)\r\n\r\n%timeit parser.parse(s)\r\n28.5 &#181;s &#177; 99.2 ns per loop (mean &#177; std. dev. of 7 runs, 10,000 loops each)\r\n```\r\n(Python 3.11.3 x64 on GNU\/Linux)\r\n\r\nSee also: [A faster strptime](https:\/\/stackoverflow.com\/questions\/13468126\/a-faster-strptime)","body":"<h2>Python &gt;= 3.11<\/h2>\n<p><a href=\"https:\/\/docs.python.org\/3\/library\/datetime.html#datetime.date.fromisoformat\" rel=\"nofollow noreferrer\"><code>fromisoformat<\/code><\/a> now parses <code>Z<\/code> directly:<\/p>\n<pre class=\"lang-py prettyprint-override\"><code>from datetime import datetime\n\ns = &quot;2008-09-03T20:56:35.450686Z&quot;\n\ndatetime.fromisoformat(s)\ndatetime.datetime(2008, 9, 3, 20, 56, 35, 450686, tzinfo=datetime.timezone.utc)\n<\/code><\/pre>\n<h2>Python 3.7 to 3.10<\/h2>\n<p>A simple option from one of the comments: replace <code>'Z'<\/code> with <code>'+00:00'<\/code> - and use <code>fromisoformat<\/code>:<\/p>\n<pre><code>from datetime import datetime\n\ns = &quot;2008-09-03T20:56:35.450686Z&quot;\n\ndatetime.fromisoformat(s.replace('Z', '+00:00'))\n# datetime.datetime(2008, 9, 3, 20, 56, 35, 450686, tzinfo=datetime.timezone.utc)\n<\/code><\/pre>\n<h3>Why prefer <code>fromisoformat<\/code>?<\/h3>\n<p>Although <code>strptime<\/code>'s <code>%z<\/code> can parse the <code>'Z'<\/code> character to UTC, <strong><code>fromisoformat<\/code> is faster by ~ x40<\/strong> (or even ~x60 for Python 3.11):<\/p>\n<pre><code>from datetime import datetime\nfrom dateutil import parser\n\ns = &quot;2008-09-03T20:56:35.450686Z&quot;\n\n# Python 3.11+\n%timeit datetime.fromisoformat(s)\n85.1 ns \u00b1 0.473 ns per loop (mean \u00b1 std. dev. of 7 runs, 10,000,000 loops each)\n\n# Python 3.7 to 3.10\n%timeit datetime.fromisoformat(s.replace('Z', '+00:00'))\n134 ns \u00b1 0.522 ns per loop (mean \u00b1 std. dev. of 7 runs, 10,000,000 loops each)\n\n%timeit parser.isoparse(s)\n4.09 \u00b5s \u00b1 5.2 ns per loop (mean \u00b1 std. dev. of 7 runs, 100,000 loops each)\n\n%timeit datetime.strptime(s, '%Y-%m-%dT%H:%M:%S.%f%z')\n5 \u00b5s \u00b1 9.26 ns per loop (mean \u00b1 std. dev. of 7 runs, 100,000 loops each)\n\n%timeit parser.parse(s)\n28.5 \u00b5s \u00b1 99.2 ns per loop (mean \u00b1 std. dev. of 7 runs, 10,000 loops each)\n<\/code><\/pre>\n<p>(Python 3.11.3 x64 on GNU\/Linux)<\/p>\n<p>See also: <a href=\"https:\/\/stackoverflow.com\/questions\/13468126\/a-faster-strptime\">A faster strptime<\/a><\/p>\n"},{"owner":{"account_id":2096047,"reputation":1618,"user_id":1864795,"user_type":"registered","accept_rate":17,"profile_image":"https:\/\/www.gravatar.com\/avatar\/cc48f861a4c9232f4e3a355eabdb4b8a?s=256&d=identicon&r=PG","display_name":"Adam Donahue","link":"https:\/\/stackoverflow.com\/users\/1864795\/adam-donahue"},"is_accepted":false,"score":70,"last_activity_date":1529946224,"last_edit_date":1529946224.0,"creation_date":1369974476,"answer_id":16849769,"question_id":6618002,"content_license":"CC BY-SA 4.0","body_markdown":"[**TL;DR?**  You can **skip to the end for a code example**.]\r\n\r\nI actually prefer to use a different idiom, which is a little involved for using as a one off, but is nice if you have a more complex use case.\r\n\r\nA bit of background first.\r\n\r\nProperties are useful in that they allow us to handle both setting and getting values in a programmatic way but still allow attributes to be accessed as attributes.  We can turn &#39;gets&#39; into &#39;computations&#39; (essentially) and we can turn &#39;sets&#39; into &#39;events&#39;.  So let&#39;s say we have the following class, which I&#39;ve coded with Java-like getters and setters.\r\n\r\n    class Example(object):\r\n        def __init__(self, x=None, y=None):\r\n            self.x = x\r\n            self.y = y\r\n\r\n        def getX(self):\r\n            return self.x or self.defaultX()\r\n\r\n        def getY(self):\r\n            return self.y or self.defaultY()\r\n\r\n        def setX(self, x):\r\n            self.x = x\r\n\r\n        def setY(self, y):\r\n            self.y = y\r\n\r\n        def defaultX(self):\r\n            return someDefaultComputationForX()\r\n\r\n        def defaultY(self):\r\n            return someDefaultComputationForY()\r\n\r\nYou may be wondering why I didn&#39;t call `defaultX` and `defaultY` in the object&#39;s `__init__` method.  The reason is that for our case I want to assume that the `someDefaultComputation` methods return values that vary over time, say a timestamp, and whenever `x` (or `y`) is not set (where, for the purpose of this example, &quot;not set&quot; means &quot;set to None&quot;) I want the value of `x`&#39;s (or `y`&#39;s) default computation.\r\n\r\nSo this is lame for a number of reasons describe above.  I&#39;ll rewrite it using properties:\r\n\r\n    class Example(object):\r\n        def __init__(self, x=None, y=None):\r\n            self._x = x\r\n            self._y = y\r\n\r\n        @property\r\n        def x(self):\r\n            return self.x or self.defaultX()\r\n\r\n        @x.setter\r\n        def x(self, value):\r\n            self._x = value\r\n\r\n        @property\r\n        def y(self):\r\n            return self.y or self.defaultY()\r\n\r\n        @y.setter\r\n        def y(self, value):\r\n            self._y = value\r\n\r\n        # default{XY} as before.\r\n\r\nWhat have we gained?  We&#39;ve gained the ability to refer to these attributes as attributes even though, behind the scenes, we end up running methods.\r\n\r\nOf course the real power of properties is that we generally want these methods to do something in addition to just getting and setting values (otherwise there is no point in using properties).  I did this in my getter example.  We are basically running a function body to pick up a default whenever the value isn&#39;t set.  This is a very common pattern.\r\n\r\nBut what are we losing, and what can&#39;t we do?\r\n\r\nThe main annoyance, in my view, is that if you define a getter (as we do here) you also have to define a setter.[1]  That&#39;s extra noise that clutters the code.\r\n\r\nAnother annoyance is that we still have to initialize the `x` and `y` values in `__init__`.  (Well, of course we could add them using `setattr()` but that is more extra code.)\r\n\r\nThird, unlike in the Java-like example, getters cannot accept other parameters.  Now I can hear you saying already, well, if it&#39;s taking parameters it&#39;s not a getter!  In an official sense, that is true.  But in a practical sense there is no reason we shouldn&#39;t be able to parameterize an named attribute -- like `x` -- and set its value for some specific parameters.\r\n\r\nIt&#39;d be nice if we could do something like:\r\n\r\n    e.x[a,b,c] = 10\r\n    e.x[d,e,f] = 20\r\n\r\nfor example.  The closest we can get is to override the assignment to imply some special semantics:\r\n\r\n    e.x = [a,b,c,10]\r\n    e.x = [d,e,f,30]\r\n\r\nand of course ensure that our setter knows how to extract the first three values as a key to a dictionary and set its value to a number or something.\r\n\r\nBut even if we did that we still couldn&#39;t support it with properties because there is no way to get the value because we can&#39;t pass parameters at all to the getter.  So we&#39;ve had to return everything, introducing an asymmetry.\r\n\r\nThe Java-style getter\/setter does let us handle this, but we&#39;re back to needing getter\/setters.\r\n\r\nIn my mind what we really want is something that capture the following requirements:\r\n\r\n  * Users define just one method for a given attribute and can indicate there\r\n    whether the attribute is read-only or read-write.  Properties fail this test\r\n    if the attribute writable.\r\n\r\n  * There is no need for the user to define an extra variable underlying the function, so we don&#39;t need the `__init__` or `setattr` in the code.  The variable just exists by the fact we&#39;ve created this new-style attribute.\r\n\r\n  * Any default code for the attribute executes in the method body itself.\r\n\r\n  * We can set the attribute as an attribute and reference it as an attribute.\r\n\r\n  * We can parameterize the attribute.\r\n\r\nIn terms of code, we want a way to write:\r\n\r\n    def x(self, *args):\r\n        return defaultX()\r\n\r\nand be able to then do:\r\n\r\n    print e.x     -&gt; The default at time T0\r\n    e.x = 1\r\n    print e.x     -&gt; 1\r\n    e.x = None\r\n    print e.x     -&gt; The default at time T1\r\n\r\nand so forth.\r\n\r\nWe also want a way to do this for the special case of a parameterizable attribute, but still allow the default assign case to work.  You&#39;ll see how I tackled this below.\r\n\r\nNow to the point (yay! the point!).  The solution I came up for for this is as follows.\r\n\r\nWe create a new object to replace the notion of a property.  The object is intended to store the value of a variable set to it, but also maintains a handle on code that knows how to calculate a default.  Its job is to store the set `value` or to run the `method` if that value is not set.\r\n\r\nLet&#39;s call it an `UberProperty`.\r\n\r\n    class UberProperty(object):\r\n\r\n        def __init__(self, method):\r\n            self.method = method\r\n            self.value = None\r\n            self.isSet = False\r\n\r\n        def setValue(self, value):\r\n            self.value = value\r\n            self.isSet = True\r\n\r\n        def clearValue(self):\r\n            self.value = None\r\n            self.isSet = False\r\n\r\nI assume `method` here is a class method, `value` is the value of the `UberProperty`, and I have added `isSet` because `None` may be a real value and this allows us a clean way to declare there really is &quot;no value&quot;.  Another way is a sentinel of some sort.\r\n\r\nThis basically gives us an object that can do what we want, but how do we actually put it on our class?  Well, properties use decorators; why can&#39;t we?  Let&#39;s see how it might look (from here on I&#39;m going to stick to using just a single &#39;attribute&#39;, `x`).\r\n\r\n    class Example(object):\r\n\r\n        @uberProperty\r\n        def x(self):\r\n            return defaultX()\r\n\r\nThis doesn&#39;t actually work yet, of course.  We have to implement `uberProperty` and\r\nmake sure it handles both gets and sets.\r\n\r\nLet&#39;s start with gets.\r\n\r\nMy first attempt was to simply create a new UberProperty object and return it:\r\n\r\n    def uberProperty(f):\r\n        return UberProperty(f)\r\n\r\nI quickly discovered, of course, that this doens&#39;t work: Python never binds the callable to the object and I need the object in order to call the function.  Even creating the decorator in the class doesn&#39;t work, as although now we have the class, we still don&#39;t have an object to work with.\r\n\r\nSo we&#39;re going to need to be able to do more here.  We do know that a method need only be represented the one time, so let&#39;s go ahead and keep our decorator, but modify `UberProperty` to only store the `method` reference:\r\n\r\n    class UberProperty(object):\r\n\r\n        def __init__(self, method):\r\n            self.method = method\r\n\r\nIt is also not callable, so at the moment nothing is working.\r\n\r\nHow do we complete the picture?  Well, what do we end up with when we create the example class using our new decorator:\r\n\r\n    class Example(object):\r\n\r\n        @uberProperty\r\n        def x(self):\r\n            return defaultX()\r\n\r\n    print Example.x     &lt;__main__.UberProperty object at 0x10e1fb8d0&gt;\r\n    print Example().x   &lt;__main__.UberProperty object at 0x10e1fb8d0&gt;\r\n\r\nin both cases we get back the `UberProperty` which of course is not a callable, so this isn&#39;t of much use.\r\n\r\nWhat we need is some way to dynamically bind the `UberProperty` instance created by the decorator after the class has been created to an object of the class before that object has been returned to that user for use.  Um, yeah, that&#39;s an `__init__` call, dude.\r\n\r\nLet&#39;s write up what we want our find result to be first.  We&#39;re binding an `UberProperty` to an instance, so an obvious thing to return would be a BoundUberProperty.  This is where we&#39;ll actually maintain state for the `x` attribute.\r\n\r\n    class BoundUberProperty(object):\r\n        def __init__(self, obj, uberProperty):\r\n            self.obj = obj\r\n            self.uberProperty = uberProperty\r\n            self.isSet = False\r\n\r\n        def setValue(self, value):\r\n            self.value = value\r\n            self.isSet = True\r\n\r\n        def getValue(self):\r\n            return self.value if self.isSet else self.uberProperty.method(self.obj)\r\n\r\n        def clearValue(self):\r\n            del self.value\r\n            self.isSet = False\r\n\r\nNow we the representation; how do get these on to an object?  There are a few approaches, but the easiest one to explain just uses the `__init__` method to do that mapping.  By the time `__init__` is called our decorators have run, so just need to look through the object&#39;s `__dict__` and update any attributes where the value of the attribute is of type `UberProperty`.\r\n\r\nNow, uber-properties are cool and we&#39;ll probably want to use them a lot, so it makes sense to just create a base class that does this for all subclasses.  I think you know what the base class is going to be called.\r\n\r\n    class UberObject(object):\r\n        def __init__(self):\r\n            for k in dir(self):\r\n                v = getattr(self, k)\r\n                if isinstance(v, UberProperty):\r\n                    v = BoundUberProperty(self, v)\r\n                    setattr(self, k, v)\r\n\r\nWe add this, change our example to inherit from `UberObject`, and ...\r\n\r\n    e = Example()\r\n    print e.x               -&gt; &lt;__main__.BoundUberProperty object at 0x104604c90&gt;\r\n\r\nAfter modifying `x` to be:\r\n\r\n    @uberProperty\r\n    def x(self):\r\n        return *datetime.datetime.now()*\r\n\r\nWe can run a simple test:\r\n\r\n    print e.x.getValue()\r\n    print e.x.getValue()\r\n    e.x.setValue(datetime.date(2013, 5, 31))\r\n    print e.x.getValue()\r\n    e.x.clearValue()\r\n    print e.x.getValue()\r\n\r\nAnd we get the output we wanted:\r\n\r\n&lt;!-- language: lang-none --&gt;\r\n\r\n    2013-05-31 00:05:13.985813\r\n    2013-05-31 00:05:13.986290\r\n    2013-05-31\r\n    2013-05-31 00:05:13.986310\r\n\r\n(Gee, I&#39;m working late.)\r\n\r\nNote that I have used `getValue`, `setValue`, and `clearValue` here.  This is because I haven&#39;t yet linked in the means to have these automatically returned.\r\n\r\nBut I think this is a good place to stop for now, because I&#39;m getting tired.  You can also see that the core functionality we wanted is in place; the rest is window dressing.  Important usability window dressing, but that can wait until I have a change to update the post.\r\n\r\nI&#39;ll finish up the example in the next posting by addressing these things:\r\n\r\n* We need to make sure UberObject&#39;s `__init__` is always called by subclasses.\r\n  * So we either force it be called somewhere or we prevent it from being implemented.\r\n  * We&#39;ll see how to do this with a metaclass.\r\n\r\n* We need to make sure we handle the common case where someone &#39;aliases&#39;\r\n  a function to something else, such as:\r\n\r\n          class Example(object):\r\n              @uberProperty\r\n              def x(self):\r\n                  ...\r\n\r\n              y = x\r\n\r\n* We need `e.x` to return `e.x.getValue()` by default.\r\n  * What we&#39;ll actually see is this is one area where the model fails.\r\n  * It turns out we&#39;ll always need to use a function call to get the value.\r\n  * But we can make it look like a regular function call and avoid having to use `e.x.getValue()`. (Doing this one is obvious, if you haven&#39;t already fixed it out.)\r\n\r\n* We need to support setting `e.x directly`, as in `e.x = &lt;newvalue&gt;`.  We can do this in the parent class too, but we&#39;ll need to update our `__init__` code to handle it.\r\n\r\n* Finally, we&#39;ll add parameterized attributes.  It should be pretty obvious how we&#39;ll do this, too.\r\n\r\nHere&#39;s the code as it exists up to now:\r\n\r\n    import datetime\r\n\r\n    class UberObject(object):\r\n        def uberSetter(self, value):\r\n            print &#39;setting&#39;\r\n\r\n        def uberGetter(self):\r\n            return self\r\n\r\n        def __init__(self):\r\n            for k in dir(self):\r\n                v = getattr(self, k)\r\n                if isinstance(v, UberProperty):\r\n                    v = BoundUberProperty(self, v)\r\n                    setattr(self, k, v)\r\n\r\n\r\n    class UberProperty(object):\r\n        def __init__(self, method):\r\n            self.method = method\r\n\r\n    class BoundUberProperty(object):\r\n        def __init__(self, obj, uberProperty):\r\n            self.obj = obj\r\n            self.uberProperty = uberProperty\r\n            self.isSet = False\r\n\r\n        def setValue(self, value):\r\n            self.value = value\r\n            self.isSet = True\r\n\r\n        def getValue(self):\r\n            return self.value if self.isSet else self.uberProperty.method(self.obj)\r\n\r\n        def clearValue(self):\r\n            del self.value\r\n            self.isSet = False\r\n\r\n        def uberProperty(f):\r\n            return UberProperty(f)\r\n\r\n    class Example(UberObject):\r\n\r\n        @uberProperty\r\n        def x(self):\r\n            return datetime.datetime.now()\r\n\r\n[1] I may be behind on whether this is still the case.\r\n","body":"<p>[<strong>TL;DR?<\/strong>  You can <strong>skip to the end for a code example<\/strong>.]<\/p>\n\n<p>I actually prefer to use a different idiom, which is a little involved for using as a one off, but is nice if you have a more complex use case.<\/p>\n\n<p>A bit of background first.<\/p>\n\n<p>Properties are useful in that they allow us to handle both setting and getting values in a programmatic way but still allow attributes to be accessed as attributes.  We can turn 'gets' into 'computations' (essentially) and we can turn 'sets' into 'events'.  So let's say we have the following class, which I've coded with Java-like getters and setters.<\/p>\n\n<pre><code>class Example(object):\n    def __init__(self, x=None, y=None):\n        self.x = x\n        self.y = y\n\n    def getX(self):\n        return self.x or self.defaultX()\n\n    def getY(self):\n        return self.y or self.defaultY()\n\n    def setX(self, x):\n        self.x = x\n\n    def setY(self, y):\n        self.y = y\n\n    def defaultX(self):\n        return someDefaultComputationForX()\n\n    def defaultY(self):\n        return someDefaultComputationForY()\n<\/code><\/pre>\n\n<p>You may be wondering why I didn't call <code>defaultX<\/code> and <code>defaultY<\/code> in the object's <code>__init__<\/code> method.  The reason is that for our case I want to assume that the <code>someDefaultComputation<\/code> methods return values that vary over time, say a timestamp, and whenever <code>x<\/code> (or <code>y<\/code>) is not set (where, for the purpose of this example, \"not set\" means \"set to None\") I want the value of <code>x<\/code>'s (or <code>y<\/code>'s) default computation.<\/p>\n\n<p>So this is lame for a number of reasons describe above.  I'll rewrite it using properties:<\/p>\n\n<pre><code>class Example(object):\n    def __init__(self, x=None, y=None):\n        self._x = x\n        self._y = y\n\n    @property\n    def x(self):\n        return self.x or self.defaultX()\n\n    @x.setter\n    def x(self, value):\n        self._x = value\n\n    @property\n    def y(self):\n        return self.y or self.defaultY()\n\n    @y.setter\n    def y(self, value):\n        self._y = value\n\n    # default{XY} as before.\n<\/code><\/pre>\n\n<p>What have we gained?  We've gained the ability to refer to these attributes as attributes even though, behind the scenes, we end up running methods.<\/p>\n\n<p>Of course the real power of properties is that we generally want these methods to do something in addition to just getting and setting values (otherwise there is no point in using properties).  I did this in my getter example.  We are basically running a function body to pick up a default whenever the value isn't set.  This is a very common pattern.<\/p>\n\n<p>But what are we losing, and what can't we do?<\/p>\n\n<p>The main annoyance, in my view, is that if you define a getter (as we do here) you also have to define a setter.[1]  That's extra noise that clutters the code.<\/p>\n\n<p>Another annoyance is that we still have to initialize the <code>x<\/code> and <code>y<\/code> values in <code>__init__<\/code>.  (Well, of course we could add them using <code>setattr()<\/code> but that is more extra code.)<\/p>\n\n<p>Third, unlike in the Java-like example, getters cannot accept other parameters.  Now I can hear you saying already, well, if it's taking parameters it's not a getter!  In an official sense, that is true.  But in a practical sense there is no reason we shouldn't be able to parameterize an named attribute -- like <code>x<\/code> -- and set its value for some specific parameters.<\/p>\n\n<p>It'd be nice if we could do something like:<\/p>\n\n<pre><code>e.x[a,b,c] = 10\ne.x[d,e,f] = 20\n<\/code><\/pre>\n\n<p>for example.  The closest we can get is to override the assignment to imply some special semantics:<\/p>\n\n<pre><code>e.x = [a,b,c,10]\ne.x = [d,e,f,30]\n<\/code><\/pre>\n\n<p>and of course ensure that our setter knows how to extract the first three values as a key to a dictionary and set its value to a number or something.<\/p>\n\n<p>But even if we did that we still couldn't support it with properties because there is no way to get the value because we can't pass parameters at all to the getter.  So we've had to return everything, introducing an asymmetry.<\/p>\n\n<p>The Java-style getter\/setter does let us handle this, but we're back to needing getter\/setters.<\/p>\n\n<p>In my mind what we really want is something that capture the following requirements:<\/p>\n\n<ul>\n<li><p>Users define just one method for a given attribute and can indicate there\nwhether the attribute is read-only or read-write.  Properties fail this test\nif the attribute writable.<\/p><\/li>\n<li><p>There is no need for the user to define an extra variable underlying the function, so we don't need the <code>__init__<\/code> or <code>setattr<\/code> in the code.  The variable just exists by the fact we've created this new-style attribute.<\/p><\/li>\n<li><p>Any default code for the attribute executes in the method body itself.<\/p><\/li>\n<li><p>We can set the attribute as an attribute and reference it as an attribute.<\/p><\/li>\n<li><p>We can parameterize the attribute.<\/p><\/li>\n<\/ul>\n\n<p>In terms of code, we want a way to write:<\/p>\n\n<pre><code>def x(self, *args):\n    return defaultX()\n<\/code><\/pre>\n\n<p>and be able to then do:<\/p>\n\n<pre><code>print e.x     -&gt; The default at time T0\ne.x = 1\nprint e.x     -&gt; 1\ne.x = None\nprint e.x     -&gt; The default at time T1\n<\/code><\/pre>\n\n<p>and so forth.<\/p>\n\n<p>We also want a way to do this for the special case of a parameterizable attribute, but still allow the default assign case to work.  You'll see how I tackled this below.<\/p>\n\n<p>Now to the point (yay! the point!).  The solution I came up for for this is as follows.<\/p>\n\n<p>We create a new object to replace the notion of a property.  The object is intended to store the value of a variable set to it, but also maintains a handle on code that knows how to calculate a default.  Its job is to store the set <code>value<\/code> or to run the <code>method<\/code> if that value is not set.<\/p>\n\n<p>Let's call it an <code>UberProperty<\/code>.<\/p>\n\n<pre><code>class UberProperty(object):\n\n    def __init__(self, method):\n        self.method = method\n        self.value = None\n        self.isSet = False\n\n    def setValue(self, value):\n        self.value = value\n        self.isSet = True\n\n    def clearValue(self):\n        self.value = None\n        self.isSet = False\n<\/code><\/pre>\n\n<p>I assume <code>method<\/code> here is a class method, <code>value<\/code> is the value of the <code>UberProperty<\/code>, and I have added <code>isSet<\/code> because <code>None<\/code> may be a real value and this allows us a clean way to declare there really is \"no value\".  Another way is a sentinel of some sort.<\/p>\n\n<p>This basically gives us an object that can do what we want, but how do we actually put it on our class?  Well, properties use decorators; why can't we?  Let's see how it might look (from here on I'm going to stick to using just a single 'attribute', <code>x<\/code>).<\/p>\n\n<pre><code>class Example(object):\n\n    @uberProperty\n    def x(self):\n        return defaultX()\n<\/code><\/pre>\n\n<p>This doesn't actually work yet, of course.  We have to implement <code>uberProperty<\/code> and\nmake sure it handles both gets and sets.<\/p>\n\n<p>Let's start with gets.<\/p>\n\n<p>My first attempt was to simply create a new UberProperty object and return it:<\/p>\n\n<pre><code>def uberProperty(f):\n    return UberProperty(f)\n<\/code><\/pre>\n\n<p>I quickly discovered, of course, that this doens't work: Python never binds the callable to the object and I need the object in order to call the function.  Even creating the decorator in the class doesn't work, as although now we have the class, we still don't have an object to work with.<\/p>\n\n<p>So we're going to need to be able to do more here.  We do know that a method need only be represented the one time, so let's go ahead and keep our decorator, but modify <code>UberProperty<\/code> to only store the <code>method<\/code> reference:<\/p>\n\n<pre><code>class UberProperty(object):\n\n    def __init__(self, method):\n        self.method = method\n<\/code><\/pre>\n\n<p>It is also not callable, so at the moment nothing is working.<\/p>\n\n<p>How do we complete the picture?  Well, what do we end up with when we create the example class using our new decorator:<\/p>\n\n<pre><code>class Example(object):\n\n    @uberProperty\n    def x(self):\n        return defaultX()\n\nprint Example.x     &lt;__main__.UberProperty object at 0x10e1fb8d0&gt;\nprint Example().x   &lt;__main__.UberProperty object at 0x10e1fb8d0&gt;\n<\/code><\/pre>\n\n<p>in both cases we get back the <code>UberProperty<\/code> which of course is not a callable, so this isn't of much use.<\/p>\n\n<p>What we need is some way to dynamically bind the <code>UberProperty<\/code> instance created by the decorator after the class has been created to an object of the class before that object has been returned to that user for use.  Um, yeah, that's an <code>__init__<\/code> call, dude.<\/p>\n\n<p>Let's write up what we want our find result to be first.  We're binding an <code>UberProperty<\/code> to an instance, so an obvious thing to return would be a BoundUberProperty.  This is where we'll actually maintain state for the <code>x<\/code> attribute.<\/p>\n\n<pre><code>class BoundUberProperty(object):\n    def __init__(self, obj, uberProperty):\n        self.obj = obj\n        self.uberProperty = uberProperty\n        self.isSet = False\n\n    def setValue(self, value):\n        self.value = value\n        self.isSet = True\n\n    def getValue(self):\n        return self.value if self.isSet else self.uberProperty.method(self.obj)\n\n    def clearValue(self):\n        del self.value\n        self.isSet = False\n<\/code><\/pre>\n\n<p>Now we the representation; how do get these on to an object?  There are a few approaches, but the easiest one to explain just uses the <code>__init__<\/code> method to do that mapping.  By the time <code>__init__<\/code> is called our decorators have run, so just need to look through the object's <code>__dict__<\/code> and update any attributes where the value of the attribute is of type <code>UberProperty<\/code>.<\/p>\n\n<p>Now, uber-properties are cool and we'll probably want to use them a lot, so it makes sense to just create a base class that does this for all subclasses.  I think you know what the base class is going to be called.<\/p>\n\n<pre><code>class UberObject(object):\n    def __init__(self):\n        for k in dir(self):\n            v = getattr(self, k)\n            if isinstance(v, UberProperty):\n                v = BoundUberProperty(self, v)\n                setattr(self, k, v)\n<\/code><\/pre>\n\n<p>We add this, change our example to inherit from <code>UberObject<\/code>, and ...<\/p>\n\n<pre><code>e = Example()\nprint e.x               -&gt; &lt;__main__.BoundUberProperty object at 0x104604c90&gt;\n<\/code><\/pre>\n\n<p>After modifying <code>x<\/code> to be:<\/p>\n\n<pre><code>@uberProperty\ndef x(self):\n    return *datetime.datetime.now()*\n<\/code><\/pre>\n\n<p>We can run a simple test:<\/p>\n\n<pre><code>print e.x.getValue()\nprint e.x.getValue()\ne.x.setValue(datetime.date(2013, 5, 31))\nprint e.x.getValue()\ne.x.clearValue()\nprint e.x.getValue()\n<\/code><\/pre>\n\n<p>And we get the output we wanted:<\/p>\n\n<pre class=\"lang-none prettyprint-override\"><code>2013-05-31 00:05:13.985813\n2013-05-31 00:05:13.986290\n2013-05-31\n2013-05-31 00:05:13.986310\n<\/code><\/pre>\n\n<p>(Gee, I'm working late.)<\/p>\n\n<p>Note that I have used <code>getValue<\/code>, <code>setValue<\/code>, and <code>clearValue<\/code> here.  This is because I haven't yet linked in the means to have these automatically returned.<\/p>\n\n<p>But I think this is a good place to stop for now, because I'm getting tired.  You can also see that the core functionality we wanted is in place; the rest is window dressing.  Important usability window dressing, but that can wait until I have a change to update the post.<\/p>\n\n<p>I'll finish up the example in the next posting by addressing these things:<\/p>\n\n<ul>\n<li><p>We need to make sure UberObject's <code>__init__<\/code> is always called by subclasses.<\/p>\n\n<ul>\n<li>So we either force it be called somewhere or we prevent it from being implemented.<\/li>\n<li>We'll see how to do this with a metaclass.<\/li>\n<\/ul><\/li>\n<li><p>We need to make sure we handle the common case where someone 'aliases'\na function to something else, such as:<\/p>\n\n<pre><code>  class Example(object):\n      @uberProperty\n      def x(self):\n          ...\n\n      y = x\n<\/code><\/pre><\/li>\n<li><p>We need <code>e.x<\/code> to return <code>e.x.getValue()<\/code> by default.<\/p>\n\n<ul>\n<li>What we'll actually see is this is one area where the model fails.<\/li>\n<li>It turns out we'll always need to use a function call to get the value.<\/li>\n<li>But we can make it look like a regular function call and avoid having to use <code>e.x.getValue()<\/code>. (Doing this one is obvious, if you haven't already fixed it out.)<\/li>\n<\/ul><\/li>\n<li><p>We need to support setting <code>e.x directly<\/code>, as in <code>e.x = &lt;newvalue&gt;<\/code>.  We can do this in the parent class too, but we'll need to update our <code>__init__<\/code> code to handle it.<\/p><\/li>\n<li><p>Finally, we'll add parameterized attributes.  It should be pretty obvious how we'll do this, too.<\/p><\/li>\n<\/ul>\n\n<p>Here's the code as it exists up to now:<\/p>\n\n<pre><code>import datetime\n\nclass UberObject(object):\n    def uberSetter(self, value):\n        print 'setting'\n\n    def uberGetter(self):\n        return self\n\n    def __init__(self):\n        for k in dir(self):\n            v = getattr(self, k)\n            if isinstance(v, UberProperty):\n                v = BoundUberProperty(self, v)\n                setattr(self, k, v)\n\n\nclass UberProperty(object):\n    def __init__(self, method):\n        self.method = method\n\nclass BoundUberProperty(object):\n    def __init__(self, obj, uberProperty):\n        self.obj = obj\n        self.uberProperty = uberProperty\n        self.isSet = False\n\n    def setValue(self, value):\n        self.value = value\n        self.isSet = True\n\n    def getValue(self):\n        return self.value if self.isSet else self.uberProperty.method(self.obj)\n\n    def clearValue(self):\n        del self.value\n        self.isSet = False\n\n    def uberProperty(f):\n        return UberProperty(f)\n\nclass Example(UberObject):\n\n    @uberProperty\n    def x(self):\n        return datetime.datetime.now()\n<\/code><\/pre>\n\n<p>[1] I may be behind on whether this is still the case.<\/p>\n"},{"owner":{"account_id":5519499,"reputation":1390,"user_id":4382972,"user_type":"registered","accept_rate":0,"profile_image":"https:\/\/i.stack.imgur.com\/3X4x0.png?s=256&g=1","display_name":"digitalnomd","link":"https:\/\/stackoverflow.com\/users\/4382972\/digitalnomd"},"is_accepted":false,"score":70,"last_activity_date":1583433297,"last_edit_date":1583433297.0,"creation_date":1520788760,"answer_id":49222854,"question_id":7075082,"content_license":"CC BY-SA 4.0","body_markdown":"There are some great answers already, but none of them address a complete list of what the `__future__` statement currently supports.\r\n\r\nPut simply, **the `__future__` statement forces Python interpreters to use newer features of the language.** \r\n\r\n---\r\nThe features that it currently supports are the following:\r\n\r\n##`nested_scopes`\r\n\r\nPrior to Python 2.1, the following code would raise a **NameError**:\r\n\r\n    def f():\r\n        ...\r\n        def g(value):\r\n            ...\r\n            return g(value-1) + 1\r\n        ...\r\n\r\nThe `from __future__ import nested_scopes` directive will allow for this feature to be enabled.\r\n\r\n##`generators`\r\n\r\nIntroduced generator functions such as the one below to save state between successive function calls:\r\n\r\n    def fib():\r\n        a, b = 0, 1\r\n        while 1:\r\n           yield b\r\n           a, b = b, a+b\r\n\r\n##`division`\r\n\r\nClassic division is used in Python 2.x versions. Meaning that some division statements return a reasonable approximation of division (&quot;true division&quot;) and others return the floor (&quot;floor division&quot;). Starting in Python 3.0, true division is specified by `x\/y`, whereas floor division is specified by `x\/\/y`. \r\n\r\nThe `from __future__ import division` directive forces the use of Python 3.0 style division.\r\n\r\n##`absolute_import`\r\n\r\nAllows for parenthesis to enclose multiple `import` statements. For example:\r\n\r\n    from Tkinter import (Tk, Frame, Button, Entry, Canvas, Text,\r\n        LEFT, DISABLED, NORMAL, RIDGE, END)\r\n\r\nInstead of:\r\n\r\n    from Tkinter import Tk, Frame, Button, Entry, Canvas, Text, \\\r\n        LEFT, DISABLED, NORMAL, RIDGE, END\r\n\r\nOr:\r\n\r\n    from Tkinter import Tk, Frame, Button, Entry, Canvas, Text\r\n    from Tkinter import LEFT, DISABLED, NORMAL, RIDGE, END\r\n\r\n##`with_statement`\r\n\r\nAdds the statement `with` as a keyword in Python to eliminate the need for `try\/finally` statements. Common uses of this are when doing file I\/O such as:\r\n\r\n    with open(&#39;workfile&#39;, &#39;r&#39;) as f:\r\n         read_data = f.read()\r\n\r\n`print_function`:\r\n\r\nForces the use of Python 3 parenthesis-style `print()` function call instead of the `print MESSAGE` style statement.\r\n\r\n`unicode_literals`\r\n\r\nIntroduces the literal syntax for the `bytes` object. Meaning that statements such as `bytes(&#39;Hello world&#39;, &#39;ascii&#39;)` can be simply expressed as `b&#39;Hello world&#39;`.\r\n\r\n\r\n##`generator_stop`\r\n\r\nReplaces the use of the `StopIteration` exception used inside generator functions with the `RuntimeError` exception.\r\n\r\n\r\nOne other use not mentioned above is that the `__future__` statement also requires the use of Python 2.1+ interpreters since using an older version will throw a runtime exception.\r\n\r\n---\r\n##References\r\n\r\n - https:\/\/docs.python.org\/2\/library\/__future__.html\r\n - https:\/\/docs.python.org\/3\/library\/__future__.html\r\n - https:\/\/docs.python.org\/2.2\/whatsnew\/node9.html\r\n - https:\/\/www.python.org\/dev\/peps\/pep-0255\/\r\n - https:\/\/www.python.org\/dev\/peps\/pep-0238\/\r\n - https:\/\/www.python.org\/dev\/peps\/pep-0328\/\r\n - https:\/\/www.python.org\/dev\/peps\/pep-3112\/\r\n - https:\/\/www.python.org\/dev\/peps\/pep-0479\/\r\n\r\n","body":"<p>There are some great answers already, but none of them address a complete list of what the <code>__future__<\/code> statement currently supports.<\/p>\n\n<p>Put simply, <strong>the <code>__future__<\/code> statement forces Python interpreters to use newer features of the language.<\/strong> <\/p>\n\n<hr>\n\n<p>The features that it currently supports are the following:<\/p>\n\n<h2><code>nested_scopes<\/code><\/h2>\n\n<p>Prior to Python 2.1, the following code would raise a <strong>NameError<\/strong>:<\/p>\n\n<pre><code>def f():\n    ...\n    def g(value):\n        ...\n        return g(value-1) + 1\n    ...\n<\/code><\/pre>\n\n<p>The <code>from __future__ import nested_scopes<\/code> directive will allow for this feature to be enabled.<\/p>\n\n<h2><code>generators<\/code><\/h2>\n\n<p>Introduced generator functions such as the one below to save state between successive function calls:<\/p>\n\n<pre><code>def fib():\n    a, b = 0, 1\n    while 1:\n       yield b\n       a, b = b, a+b\n<\/code><\/pre>\n\n<h2><code>division<\/code><\/h2>\n\n<p>Classic division is used in Python 2.x versions. Meaning that some division statements return a reasonable approximation of division (\"true division\") and others return the floor (\"floor division\"). Starting in Python 3.0, true division is specified by <code>x\/y<\/code>, whereas floor division is specified by <code>x\/\/y<\/code>. <\/p>\n\n<p>The <code>from __future__ import division<\/code> directive forces the use of Python 3.0 style division.<\/p>\n\n<h2><code>absolute_import<\/code><\/h2>\n\n<p>Allows for parenthesis to enclose multiple <code>import<\/code> statements. For example:<\/p>\n\n<pre><code>from Tkinter import (Tk, Frame, Button, Entry, Canvas, Text,\n    LEFT, DISABLED, NORMAL, RIDGE, END)\n<\/code><\/pre>\n\n<p>Instead of:<\/p>\n\n<pre><code>from Tkinter import Tk, Frame, Button, Entry, Canvas, Text, \\\n    LEFT, DISABLED, NORMAL, RIDGE, END\n<\/code><\/pre>\n\n<p>Or:<\/p>\n\n<pre><code>from Tkinter import Tk, Frame, Button, Entry, Canvas, Text\nfrom Tkinter import LEFT, DISABLED, NORMAL, RIDGE, END\n<\/code><\/pre>\n\n<h2><code>with_statement<\/code><\/h2>\n\n<p>Adds the statement <code>with<\/code> as a keyword in Python to eliminate the need for <code>try\/finally<\/code> statements. Common uses of this are when doing file I\/O such as:<\/p>\n\n<pre><code>with open('workfile', 'r') as f:\n     read_data = f.read()\n<\/code><\/pre>\n\n<p><code>print_function<\/code>:<\/p>\n\n<p>Forces the use of Python 3 parenthesis-style <code>print()<\/code> function call instead of the <code>print MESSAGE<\/code> style statement.<\/p>\n\n<p><code>unicode_literals<\/code><\/p>\n\n<p>Introduces the literal syntax for the <code>bytes<\/code> object. Meaning that statements such as <code>bytes('Hello world', 'ascii')<\/code> can be simply expressed as <code>b'Hello world'<\/code>.<\/p>\n\n<h2><code>generator_stop<\/code><\/h2>\n\n<p>Replaces the use of the <code>StopIteration<\/code> exception used inside generator functions with the <code>RuntimeError<\/code> exception.<\/p>\n\n<p>One other use not mentioned above is that the <code>__future__<\/code> statement also requires the use of Python 2.1+ interpreters since using an older version will throw a runtime exception.<\/p>\n\n<hr>\n\n<h2>References<\/h2>\n\n<ul>\n<li><a href=\"https:\/\/docs.python.org\/2\/library\/__future__.html\" rel=\"noreferrer\">https:\/\/docs.python.org\/2\/library\/<strong>future<\/strong>.html<\/a><\/li>\n<li><a href=\"https:\/\/docs.python.org\/3\/library\/__future__.html\" rel=\"noreferrer\">https:\/\/docs.python.org\/3\/library\/<strong>future<\/strong>.html<\/a><\/li>\n<li><a href=\"https:\/\/docs.python.org\/2.2\/whatsnew\/node9.html\" rel=\"noreferrer\">https:\/\/docs.python.org\/2.2\/whatsnew\/node9.html<\/a><\/li>\n<li><a href=\"https:\/\/www.python.org\/dev\/peps\/pep-0255\/\" rel=\"noreferrer\">https:\/\/www.python.org\/dev\/peps\/pep-0255\/<\/a><\/li>\n<li><a href=\"https:\/\/www.python.org\/dev\/peps\/pep-0238\/\" rel=\"noreferrer\">https:\/\/www.python.org\/dev\/peps\/pep-0238\/<\/a><\/li>\n<li><a href=\"https:\/\/www.python.org\/dev\/peps\/pep-0328\/\" rel=\"noreferrer\">https:\/\/www.python.org\/dev\/peps\/pep-0328\/<\/a><\/li>\n<li><a href=\"https:\/\/www.python.org\/dev\/peps\/pep-3112\/\" rel=\"noreferrer\">https:\/\/www.python.org\/dev\/peps\/pep-3112\/<\/a><\/li>\n<li><a href=\"https:\/\/www.python.org\/dev\/peps\/pep-0479\/\" rel=\"noreferrer\">https:\/\/www.python.org\/dev\/peps\/pep-0479\/<\/a><\/li>\n<\/ul>\n"},{"owner":{"account_id":37520,"reputation":26171,"user_id":107294,"user_type":"registered","accept_rate":80,"profile_image":"https:\/\/www.gravatar.com\/avatar\/9eb71600b418cfc18f496b5840ca7e1a?s=256&d=identicon&r=PG","display_name":"cjs","link":"https:\/\/stackoverflow.com\/users\/107294\/cjs"},"is_accepted":false,"score":70,"last_activity_date":1556757811,"last_edit_date":1556757811.0,"creation_date":1521690273,"answer_id":49420164,"question_id":7948494,"content_license":"CC BY-SA 4.0","body_markdown":"First, keep in mind that, in its precise definition, a _module_ is an object in the memory of a Python interpreter, often created by reading one or more files from disk. While we may informally call a disk file such as `a\/b\/c.py` a &quot;module,&quot; it doesn&#39;t actually become one until it&#39;s combined with information from several other sources (such as `sys.path`) to create the module object. \r\n\r\n(Note, for example, that two modules with different names can be loaded from the same file, depending on `sys.path` and other settings. This is exactly what happens with `python -m my.module` followed by an `import my.module` in the interpreter; there will be two module objects, `__main__` and `my.module`, both created from the same file on disk, `my\/module.py`.)\r\n\r\nA _package_ is a module that may have submodules (including subpackages). Not all modules can do this. As an example, create a small module hierarchy:\r\n\r\n    $ mkdir -p a\/b\r\n    $ touch a\/b\/c.py\r\n\r\nEnsure that there are no other files under `a`. Start a Python 3.4 or later interpreter (e.g., with `python3 -i`) and examine the results of the following statements:\r\n\r\n    import a\r\n    a                \u21d2 &lt;module &#39;a&#39; (namespace)&gt;\r\n    a.b              \u21d2 AttributeError: module &#39;a&#39; has no attribute &#39;b&#39;\r\n    import a.b.c\r\n    a.b              \u21d2 &lt;module &#39;a.b&#39; (namespace)&gt;\r\n    a.b.c            \u21d2 &lt;module &#39;a.b.c&#39; from &#39;\/home\/cjs\/a\/b\/c.py&#39;&gt;\r\n\r\nModules `a` and `a.b` are packages (in fact, a certain kind of package called a &quot;namespace package,&quot; though we wont&#39; worry about that here). However, module `a.b.c` is not a package. We can demonstrate this by adding another file, `a\/b.py` to the directory structure above and starting a fresh interpreter:\r\n\r\n    import a.b.c\r\n    \u21d2 ImportError: No module named &#39;a.b.c&#39;; &#39;a.b&#39; is not a package\r\n    import a.b\r\n    a                \u21d2 &lt;module &#39;a&#39; (namespace)&gt;\r\n    a.__path__       \u21d2 _NamespacePath([&#39;\/...\/a&#39;])\r\n    a.b              \u21d2 &lt;module &#39;a.b&#39; from &#39;\/home\/cjs\/tmp\/a\/b.py&#39;&gt;\r\n    a.b.__path__     \u21d2 AttributeError: &#39;module&#39; object has no attribute &#39;__path__&#39;\r\n\r\nPython ensures that all parent modules are loaded before a child module is loaded. Above it finds that `a\/` is a directory, and so creates a namespace package `a`, and that `a\/b.py` is a Python source file which it loads and uses to create a (non-package) module `a.b`. At this point you cannot have a module `a.b.c` because `a.b` is not a package, and thus cannot have submodules.\r\n\r\nYou can also see here that the package module `a` has a `__path__` attribute (packages must have this) but the non-package module `a.b` does not.","body":"<p>First, keep in mind that, in its precise definition, a <em>module<\/em> is an object in the memory of a Python interpreter, often created by reading one or more files from disk. While we may informally call a disk file such as <code>a\/b\/c.py<\/code> a \"module,\" it doesn't actually become one until it's combined with information from several other sources (such as <code>sys.path<\/code>) to create the module object. <\/p>\n\n<p>(Note, for example, that two modules with different names can be loaded from the same file, depending on <code>sys.path<\/code> and other settings. This is exactly what happens with <code>python -m my.module<\/code> followed by an <code>import my.module<\/code> in the interpreter; there will be two module objects, <code>__main__<\/code> and <code>my.module<\/code>, both created from the same file on disk, <code>my\/module.py<\/code>.)<\/p>\n\n<p>A <em>package<\/em> is a module that may have submodules (including subpackages). Not all modules can do this. As an example, create a small module hierarchy:<\/p>\n\n<pre><code>$ mkdir -p a\/b\n$ touch a\/b\/c.py\n<\/code><\/pre>\n\n<p>Ensure that there are no other files under <code>a<\/code>. Start a Python 3.4 or later interpreter (e.g., with <code>python3 -i<\/code>) and examine the results of the following statements:<\/p>\n\n<pre><code>import a\na                \u21d2 &lt;module 'a' (namespace)&gt;\na.b              \u21d2 AttributeError: module 'a' has no attribute 'b'\nimport a.b.c\na.b              \u21d2 &lt;module 'a.b' (namespace)&gt;\na.b.c            \u21d2 &lt;module 'a.b.c' from '\/home\/cjs\/a\/b\/c.py'&gt;\n<\/code><\/pre>\n\n<p>Modules <code>a<\/code> and <code>a.b<\/code> are packages (in fact, a certain kind of package called a \"namespace package,\" though we wont' worry about that here). However, module <code>a.b.c<\/code> is not a package. We can demonstrate this by adding another file, <code>a\/b.py<\/code> to the directory structure above and starting a fresh interpreter:<\/p>\n\n<pre><code>import a.b.c\n\u21d2 ImportError: No module named 'a.b.c'; 'a.b' is not a package\nimport a.b\na                \u21d2 &lt;module 'a' (namespace)&gt;\na.__path__       \u21d2 _NamespacePath(['\/...\/a'])\na.b              \u21d2 &lt;module 'a.b' from '\/home\/cjs\/tmp\/a\/b.py'&gt;\na.b.__path__     \u21d2 AttributeError: 'module' object has no attribute '__path__'\n<\/code><\/pre>\n\n<p>Python ensures that all parent modules are loaded before a child module is loaded. Above it finds that <code>a\/<\/code> is a directory, and so creates a namespace package <code>a<\/code>, and that <code>a\/b.py<\/code> is a Python source file which it loads and uses to create a (non-package) module <code>a.b<\/code>. At this point you cannot have a module <code>a.b.c<\/code> because <code>a.b<\/code> is not a package, and thus cannot have submodules.<\/p>\n\n<p>You can also see here that the package module <code>a<\/code> has a <code>__path__<\/code> attribute (packages must have this) but the non-package module <code>a.b<\/code> does not.<\/p>\n"},{"owner":{"account_id":7165,"reputation":14663,"user_id":12320,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/ca01bbd64a340e9c9961f070aa4515f4?s=256&d=identicon&r=PG","display_name":"efotinis","link":"https:\/\/stackoverflow.com\/users\/12320\/efotinis"},"is_accepted":false,"score":69,"last_activity_date":1445009584,"last_edit_date":1445009584.0,"creation_date":1221761624,"answer_id":95168,"question_id":94935,"content_license":"CC BY-SA 3.0","body_markdown":"`xrange` only stores the range params and generates the numbers on demand. However the C implementation of Python currently restricts its args to C longs:\r\n\r\n    xrange(2**32-1, 2**32+1)  # When long is 32 bits, OverflowError: Python int too large to convert to C long\r\n    range(2**32-1, 2**32+1)   # OK --&gt; [4294967295L, 4294967296L]\r\n\r\nNote that in Python 3.0 there is only `range` and it behaves like the 2.x `xrange` but without the limitations on minimum and maximum end points.","body":"<p><code>xrange<\/code> only stores the range params and generates the numbers on demand. However the C implementation of Python currently restricts its args to C longs:<\/p>\n\n<pre><code>xrange(2**32-1, 2**32+1)  # When long is 32 bits, OverflowError: Python int too large to convert to C long\nrange(2**32-1, 2**32+1)   # OK --&gt; [4294967295L, 4294967296L]\n<\/code><\/pre>\n\n<p>Note that in Python 3.0 there is only <code>range<\/code> and it behaves like the 2.x <code>xrange<\/code> but without the limitations on minimum and maximum end points.<\/p>\n"},{"owner":{"account_id":5590541,"reputation":807,"user_id":4429910,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/9Nwt0.png?s=256&g=1","display_name":"Summerfun","link":"https:\/\/stackoverflow.com\/users\/4429910\/summerfun"},"is_accepted":false,"score":69,"last_activity_date":1454608129,"last_edit_date":1454608129.0,"creation_date":1454606798,"answer_id":35207631,"question_id":14405063,"content_license":"CC BY-SA 3.0","body_markdown":"When running the test use the `-s` option. All print statements in `exampletest.py` would get printed on the console when test is run.\r\n\r\n    py.test exampletest.py -s","body":"<p>When running the test use the <code>-s<\/code> option. All print statements in <code>exampletest.py<\/code> would get printed on the console when test is run.<\/p>\n\n<pre><code>py.test exampletest.py -s\n<\/code><\/pre>\n"},{"owner":{"account_id":4014944,"reputation":958,"user_id":3307405,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/a98a9efab2e5a7c8324cb765a7b5b4e0?s=256&d=identicon&r=PG","display_name":"Prof Huster","link":"https:\/\/stackoverflow.com\/users\/3307405\/prof-huster"},"is_accepted":false,"score":69,"last_activity_date":1533492516,"last_edit_date":1533492516.0,"creation_date":1462473587,"answer_id":37057920,"question_id":3899980,"content_license":"CC BY-SA 4.0","body_markdown":"Here is a totally _different_ approach that works surprisingly well to change the font sizes:\r\n\r\nChange the __figure size__!\r\n\r\nI usually use code like this:\r\n\r\n    import matplotlib.pyplot as plt\r\n    import numpy as np\r\n    fig = plt.figure(figsize=(4,3))\r\n    ax = fig.add_subplot(111)\r\n    x = np.linspace(0,6.28,21)\r\n    ax.plot(x, np.sin(x), &#39;-^&#39;, label=&quot;1 Hz&quot;)\r\n    ax.set_title(&quot;Oscillator Output&quot;)\r\n    ax.set_xlabel(&quot;Time (s)&quot;)\r\n    ax.set_ylabel(&quot;Output (V)&quot;)\r\n    ax.grid(True)\r\n    ax.legend(loc=1)\r\n    fig.savefig(&#39;Basic.png&#39;, dpi=300)\r\n\r\nThe _smaller_ you make the figure size, the _larger_ the font is _relative to the plot_. This also upscales the markers. Note I also set the `dpi` or dot per inch. I learned this from a posting the AMTA (American Modeling Teacher of America) forum.\r\nExample from above code: [![enter image description here][2]][2]\r\n\r\n  [2]: https:\/\/i.stack.imgur.com\/uEjJN.png","body":"<p>Here is a totally <em>different<\/em> approach that works surprisingly well to change the font sizes:<\/p>\n\n<p>Change the <strong>figure size<\/strong>!<\/p>\n\n<p>I usually use code like this:<\/p>\n\n<pre><code>import matplotlib.pyplot as plt\nimport numpy as np\nfig = plt.figure(figsize=(4,3))\nax = fig.add_subplot(111)\nx = np.linspace(0,6.28,21)\nax.plot(x, np.sin(x), '-^', label=\"1 Hz\")\nax.set_title(\"Oscillator Output\")\nax.set_xlabel(\"Time (s)\")\nax.set_ylabel(\"Output (V)\")\nax.grid(True)\nax.legend(loc=1)\nfig.savefig('Basic.png', dpi=300)\n<\/code><\/pre>\n\n<p>The <em>smaller<\/em> you make the figure size, the <em>larger<\/em> the font is <em>relative to the plot<\/em>. This also upscales the markers. Note I also set the <code>dpi<\/code> or dot per inch. I learned this from a posting the AMTA (American Modeling Teacher of America) forum.\nExample from above code: <a href=\"https:\/\/i.stack.imgur.com\/uEjJN.png\" rel=\"noreferrer\"><img src=\"https:\/\/i.stack.imgur.com\/uEjJN.png\" alt=\"enter image description here\"><\/a><\/p>\n"},{"owner":{"account_id":12672477,"reputation":161118,"user_id":9209546,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/i.stack.imgur.com\/qk9vC.jpg?s=256&g=1","display_name":"jpp","link":"https:\/\/stackoverflow.com\/users\/9209546\/jpp"},"is_accepted":false,"score":68,"last_activity_date":1547986396,"last_edit_date":null,"creation_date":1547986396,"answer_id":54276300,"question_id":20461165,"content_license":"CC BY-SA 4.0","body_markdown":"### [`rename_axis`][1] + [`reset_index`][2]\r\n\r\nYou can first rename your index to a desired label, *then* elevate to a series:\r\n\r\n    df = df.rename_axis(&#39;index1&#39;).reset_index()\r\n    \r\n    print(df)\r\n    \r\n       index1         gi  ptt_loc\r\n    0       0  384444683      593\r\n    1       1  384444684      594\r\n    2       2  384444686      596\r\n\r\nThis works also for `MultiIndex` dataframes:\r\n\r\n    print(df)\r\n    #                        val\r\n    # tick       tag obs        \r\n    # 2016-02-26 C   2    0.0139\r\n    # 2016-02-27 A   2    0.5577\r\n    # 2016-02-28 C   6    0.0303\r\n    \r\n    df = df.rename_axis([&#39;index1&#39;, &#39;index2&#39;, &#39;index3&#39;]).reset_index()\r\n    \r\n    print(df)\r\n    \r\n           index1 index2  index3     val\r\n    0  2016-02-26      C       2  0.0139\r\n    1  2016-02-27      A       2  0.5577\r\n    2  2016-02-28      C       6  0.0303\r\n\r\n  [1]: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.rename_axis.html\r\n  [2]: https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.reset_index.html","body":"<h3><a href=\"https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.rename_axis.html\" rel=\"noreferrer\"><code>rename_axis<\/code><\/a> + <a href=\"https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.reset_index.html\" rel=\"noreferrer\"><code>reset_index<\/code><\/a><\/h3>\n\n<p>You can first rename your index to a desired label, <em>then<\/em> elevate to a series:<\/p>\n\n<pre><code>df = df.rename_axis('index1').reset_index()\n\nprint(df)\n\n   index1         gi  ptt_loc\n0       0  384444683      593\n1       1  384444684      594\n2       2  384444686      596\n<\/code><\/pre>\n\n<p>This works also for <code>MultiIndex<\/code> dataframes:<\/p>\n\n<pre><code>print(df)\n#                        val\n# tick       tag obs        \n# 2016-02-26 C   2    0.0139\n# 2016-02-27 A   2    0.5577\n# 2016-02-28 C   6    0.0303\n\ndf = df.rename_axis(['index1', 'index2', 'index3']).reset_index()\n\nprint(df)\n\n       index1 index2  index3     val\n0  2016-02-26      C       2  0.0139\n1  2016-02-27      A       2  0.5577\n2  2016-02-28      C       6  0.0303\n<\/code><\/pre>\n"},{"owner":{"account_id":7954,"reputation":12554,"user_id":14028,"user_type":"registered","accept_rate":78,"profile_image":"https:\/\/www.gravatar.com\/avatar\/66c0b0464838d75ad39c0baeaa01bf4c?s=256&d=identicon&r=PG","display_name":"Kevin Little","link":"https:\/\/stackoverflow.com\/users\/14028\/kevin-little"},"is_accepted":false,"score":67,"last_activity_date":1223477702,"last_edit_date":null,"creation_date":1223477702,"answer_id":183206,"question_id":181530,"content_license":"CC BY-SA 2.5","body_markdown":"*Someone* has to champion use of vertical whitespace here! :)\r\n\r\n    if (     cond1 == val1\r\n         and cond2 == val2\r\n         and cond3 == val3\r\n       ):\r\n        do_stuff()\r\n\r\nThis makes each condition clearly visible. It also allows cleaner expression of more complex conditions:\r\n\r\n    if (    cond1 == val1\r\n         or \r\n            (     cond2_1 == val2_1\r\n              and cond2_2 &gt;= val2_2\r\n              and cond2_3 != bad2_3\r\n            )\r\n       ):\r\n        do_more_stuff()\r\n\r\nYes, we&#39;re trading off a bit of vertical real estate for clarity. Well worth it IMO.\r\n\r\n ","body":"<p><em>Someone<\/em> has to champion use of vertical whitespace here! :)<\/p>\n\n<pre><code>if (     cond1 == val1\n     and cond2 == val2\n     and cond3 == val3\n   ):\n    do_stuff()\n<\/code><\/pre>\n\n<p>This makes each condition clearly visible. It also allows cleaner expression of more complex conditions:<\/p>\n\n<pre><code>if (    cond1 == val1\n     or \n        (     cond2_1 == val2_1\n          and cond2_2 &gt;= val2_2\n          and cond2_3 != bad2_3\n        )\n   ):\n    do_more_stuff()\n<\/code><\/pre>\n\n<p>Yes, we're trading off a bit of vertical real estate for clarity. Well worth it IMO.<\/p>\n"},{"owner":{"account_id":426478,"reputation":2869,"user_id":807703,"user_type":"registered","accept_rate":83,"profile_image":"https:\/\/www.gravatar.com\/avatar\/a2983a39be15b504cf8c29de4330596d?s=256&d=identicon&r=PG","display_name":"HVNSweeting","link":"https:\/\/stackoverflow.com\/users\/807703\/hvnsweeting"},"is_accepted":false,"score":67,"last_activity_date":1506586739,"last_edit_date":1506586739.0,"creation_date":1381736655,"answer_id":19355548,"question_id":4888027,"content_license":"CC BY-SA 3.0","body_markdown":"**Update:**  \r\n**As of Sep 2017 this method no longer works: `--no-install` was removed in pip 7**\r\n\r\nUse ``pip install -v``, you can see all versions that available\r\n\r\n    root@node7:~# pip install web.py -v\r\n    Downloading\/unpacking web.py\r\n      Using version 0.37 (newest of versions: 0.37, 0.36, 0.35, 0.34, 0.33, 0.33, 0.32, 0.31, 0.22, 0.2)\r\n      Downloading web.py-0.37.tar.gz (90Kb): 90Kb downloaded\r\n      Running setup.py egg_info for package web.py\r\n        running egg_info\r\n        creating pip-egg-info\/web.py.egg-info\r\n\r\n\r\nTo not install any package, use one of following solution:\r\n\r\n\r\n    root@node7:~# pip install --no-deps --no-install flask -v                                                                                                      \r\n    Downloading\/unpacking flask\r\n      Using version 0.10.1 (newest of versions: 0.10.1, 0.10, 0.9, 0.8.1, 0.8, 0.7.2, 0.7.1, 0.7, 0.6.1, 0.6, 0.5.2, 0.5.1, 0.5, 0.4, 0.3.1, 0.3, 0.2, 0.1)\r\n      Downloading Flask-0.10.1.tar.gz (544Kb): 544Kb downloaded\r\n\r\nor \r\n\r\n    root@node7:~# cd $(mktemp -d)\r\n    root@node7:\/tmp\/tmp.c6H99cWD0g# pip install flask -d . -v\r\n    Downloading\/unpacking flask\r\n      Using version 0.10.1 (newest of versions: 0.10.1, 0.10, 0.9, 0.8.1, 0.8, 0.7.2, 0.7.1, 0.7, 0.6.1, 0.6, 0.5.2, 0.5.1, 0.5, 0.4, 0.3.1, 0.3, 0.2, 0.1)\r\n      Downloading Flask-0.10.1.tar.gz (544Kb): 4.1Kb downloaded\r\n\r\nTested with pip 1.0\r\n\r\n    root@node7:~# pip --version\r\n    pip 1.0 from \/usr\/lib\/python2.7\/dist-packages (python 2.7)\r\n\r\n\r\n","body":"<p><strong>Update:<\/strong><br>\n<strong>As of Sep 2017 this method no longer works: <code>--no-install<\/code> was removed in pip 7<\/strong><\/p>\n\n<p>Use <code>pip install -v<\/code>, you can see all versions that available<\/p>\n\n<pre><code>root@node7:~# pip install web.py -v\nDownloading\/unpacking web.py\n  Using version 0.37 (newest of versions: 0.37, 0.36, 0.35, 0.34, 0.33, 0.33, 0.32, 0.31, 0.22, 0.2)\n  Downloading web.py-0.37.tar.gz (90Kb): 90Kb downloaded\n  Running setup.py egg_info for package web.py\n    running egg_info\n    creating pip-egg-info\/web.py.egg-info\n<\/code><\/pre>\n\n<p>To not install any package, use one of following solution:<\/p>\n\n<pre><code>root@node7:~# pip install --no-deps --no-install flask -v                                                                                                      \nDownloading\/unpacking flask\n  Using version 0.10.1 (newest of versions: 0.10.1, 0.10, 0.9, 0.8.1, 0.8, 0.7.2, 0.7.1, 0.7, 0.6.1, 0.6, 0.5.2, 0.5.1, 0.5, 0.4, 0.3.1, 0.3, 0.2, 0.1)\n  Downloading Flask-0.10.1.tar.gz (544Kb): 544Kb downloaded\n<\/code><\/pre>\n\n<p>or <\/p>\n\n<pre><code>root@node7:~# cd $(mktemp -d)\nroot@node7:\/tmp\/tmp.c6H99cWD0g# pip install flask -d . -v\nDownloading\/unpacking flask\n  Using version 0.10.1 (newest of versions: 0.10.1, 0.10, 0.9, 0.8.1, 0.8, 0.7.2, 0.7.1, 0.7, 0.6.1, 0.6, 0.5.2, 0.5.1, 0.5, 0.4, 0.3.1, 0.3, 0.2, 0.1)\n  Downloading Flask-0.10.1.tar.gz (544Kb): 4.1Kb downloaded\n<\/code><\/pre>\n\n<p>Tested with pip 1.0<\/p>\n\n<pre><code>root@node7:~# pip --version\npip 1.0 from \/usr\/lib\/python2.7\/dist-packages (python 2.7)\n<\/code><\/pre>\n"},{"owner":{"account_id":3021,"reputation":403723,"user_id":4279,"user_type":"registered","accept_rate":94,"profile_image":"https:\/\/www.gravatar.com\/avatar\/d92ce60d3a4cbe03598e27c2e8dee69d?s=256&d=identicon&r=PG","display_name":"jfs","link":"https:\/\/stackoverflow.com\/users\/4279\/jfs"},"is_accepted":false,"score":67,"last_activity_date":1409717816,"last_edit_date":null,"creation_date":1409717816,"answer_id":25636145,"question_id":1006289,"content_license":"CC BY-SA 3.0","body_markdown":"In Python 3.4+: [os.cpu_count()](https:\/\/docs.python.org\/3\/library\/os.html#os.cpu_count).\r\n\r\n`multiprocessing.cpu_count()` is implemented in terms of this function but raises `NotImplementedError` if `os.cpu_count()` returns `None` (&quot;can&#39;t determine number of CPUs&quot;).","body":"<p>In Python 3.4+: <a href=\"https:\/\/docs.python.org\/3\/library\/os.html#os.cpu_count\">os.cpu_count()<\/a>.<\/p>\n\n<p><code>multiprocessing.cpu_count()<\/code> is implemented in terms of this function but raises <code>NotImplementedError<\/code> if <code>os.cpu_count()<\/code> returns <code>None<\/code> (\"can't determine number of CPUs\").<\/p>\n"},{"owner":{"account_id":3698370,"reputation":799,"user_id":3078980,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/wHncX.png?s=256&g=1","display_name":"sifoo","link":"https:\/\/stackoverflow.com\/users\/3078980\/sifoo"},"is_accepted":false,"score":67,"last_activity_date":1488842454,"last_edit_date":1488842454.0,"creation_date":1416336792,"answer_id":27001786,"question_id":3121979,"content_license":"CC BY-SA 3.0","body_markdown":"I just want to add to Stephen&#39;s answer if you want to sort the array from high to low, another way other than in the comments above is just to add this to the line: \r\n\r\n    reverse = True\r\n\r\nand the result will be as follows:\r\n\r\n    data.sort(key=lambda tup: tup[1], reverse=True)\r\n\r\n","body":"<p>I just want to add to Stephen's answer if you want to sort the array from high to low, another way other than in the comments above is just to add this to the line: <\/p>\n\n<pre><code>reverse = True\n<\/code><\/pre>\n\n<p>and the result will be as follows:<\/p>\n\n<pre><code>data.sort(key=lambda tup: tup[1], reverse=True)\n<\/code><\/pre>\n"},{"owner":{"account_id":7730372,"reputation":18658,"user_id":5853731,"user_type":"registered","accept_rate":25,"profile_image":"https:\/\/i.stack.imgur.com\/jFOAu.jpg?s=256&g=1","display_name":"Philipp Schwarz","link":"https:\/\/stackoverflow.com\/users\/5853731\/philipp-schwarz"},"is_accepted":false,"score":67,"last_activity_date":1517872115,"last_edit_date":1517872115.0,"creation_date":1476306272,"answer_id":40008322,"question_id":11350770,"content_license":"CC BY-SA 3.0","body_markdown":"If anyone wonders how to perform a related problem: ***&quot;Select column by partial string&quot;*** \r\n\r\nUse:\r\n\r\n    df.filter(like=&#39;hello&#39;)  # select columns which contain the word hello\r\n\r\nAnd to select rows by partial string matching, pass `axis=0` to filter:\r\n\r\n    # selects rows which contain the word hello in their index label\r\n    df.filter(like=&#39;hello&#39;, axis=0)  \r\n    ","body":"<p>If anyone wonders how to perform a related problem: <strong><em>\"Select column by partial string\"<\/em><\/strong> <\/p>\n\n<p>Use:<\/p>\n\n<pre><code>df.filter(like='hello')  # select columns which contain the word hello\n<\/code><\/pre>\n\n<p>And to select rows by partial string matching, pass <code>axis=0<\/code> to filter:<\/p>\n\n<pre><code># selects rows which contain the word hello in their index label\ndf.filter(like='hello', axis=0)  \n<\/code><\/pre>\n"},{"owner":{"account_id":160111,"reputation":3635,"user_id":379936,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/d5h5N.png?s=256&g=1","display_name":"Johnner","link":"https:\/\/stackoverflow.com\/users\/379936\/johnner"},"is_accepted":false,"score":66,"last_activity_date":1442695089,"last_edit_date":null,"creation_date":1442695089,"answer_id":32672975,"question_id":23842713,"content_license":"CC BY-SA 3.0","body_markdown":"I&#39;v tried [pyenv][1] and it&#39;s very handy for switching python versions (global, local in folder or in the virtualenv):\r\n\r\n    brew install pyenv\r\nthen install Python version you want:\r\n\r\n    pyenv install 3.5.0\r\n\r\nand simply create virtualenv with path to needed interpreter version:\r\n\r\n    virtualenv -p \/Users\/johnny\/.pyenv\/versions\/3.5.0\/bin\/python3.5 myenv\r\n\r\nThat&#39;s it, check the version:\r\n   \r\n    . .\/myenv\/bin\/activate &amp;&amp; python -V\r\n\r\nThere are also plugin for pyenv [pyenv-virtualenv][2] but it didn&#39;t work for me somehow.\r\n\r\n  [1]: https:\/\/github.com\/yyuu\/pyenv\r\n  [2]: https:\/\/github.com\/yyuu\/pyenv-virtualenv.git","body":"<p>I'v tried <a href=\"https:\/\/github.com\/yyuu\/pyenv\">pyenv<\/a> and it's very handy for switching python versions (global, local in folder or in the virtualenv):<\/p>\n\n<pre><code>brew install pyenv\n<\/code><\/pre>\n\n<p>then install Python version you want:<\/p>\n\n<pre><code>pyenv install 3.5.0\n<\/code><\/pre>\n\n<p>and simply create virtualenv with path to needed interpreter version:<\/p>\n\n<pre><code>virtualenv -p \/Users\/johnny\/.pyenv\/versions\/3.5.0\/bin\/python3.5 myenv\n<\/code><\/pre>\n\n<p>That's it, check the version:<\/p>\n\n<pre><code>. .\/myenv\/bin\/activate &amp;&amp; python -V\n<\/code><\/pre>\n\n<p>There are also plugin for pyenv <a href=\"https:\/\/github.com\/yyuu\/pyenv-virtualenv.git\">pyenv-virtualenv<\/a> but it didn't work for me somehow.<\/p>\n"},{"owner":{"account_id":155285,"reputation":21057,"user_id":371834,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/9a378ed2410bdabed82883f2615f6b61?s=256&d=identicon&r=PG","display_name":"Mihai Maruseac","link":"https:\/\/stackoverflow.com\/users\/371834\/mihai-maruseac"},"is_accepted":false,"score":65,"last_activity_date":1313481750,"last_edit_date":null,"creation_date":1313481750,"answer_id":7075177,"question_id":7075082,"content_license":"CC BY-SA 3.0","body_markdown":"It can be used to use features which will appear in newer versions while having an older release of Python.\r\n\r\nFor example\r\n\r\n    &gt;&gt;&gt; from __future__ import print_function\r\n\r\nwill allow you to use `print` as a function:\r\n\r\n    &gt;&gt;&gt; print(&#39;# of entries&#39;, len(dictionary), file=sys.stderr)","body":"<p>It can be used to use features which will appear in newer versions while having an older release of Python.<\/p>\n\n<p>For example<\/p>\n\n<pre><code>&gt;&gt;&gt; from __future__ import print_function\n<\/code><\/pre>\n\n<p>will allow you to use <code>print<\/code> as a function:<\/p>\n\n<pre><code>&gt;&gt;&gt; print('# of entries', len(dictionary), file=sys.stderr)\n<\/code><\/pre>\n"},{"owner":{"account_id":967306,"reputation":685,"user_id":990523,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/0a72705ffda409bdd0c048851e839239?s=256&d=identicon&r=PG","display_name":"kx2k","link":"https:\/\/stackoverflow.com\/users\/990523\/kx2k"},"is_accepted":false,"score":65,"last_activity_date":1597305920,"last_edit_date":1597305920.0,"creation_date":1318378449,"answer_id":7733966,"question_id":104420,"content_license":"CC BY-SA 4.0","body_markdown":"    def permutations(head, tail=&#39;&#39;):\r\n        if len(head) == 0:\r\n            print(tail)\r\n        else:\r\n            for i in range(len(head)):\r\n                permutations(head[:i] + head[i+1:], tail + head[i])\r\n\r\ncalled as:\r\n\r\n    permutations(&#39;abc&#39;)\r\n\r\n","body":"<pre><code>def permutations(head, tail=''):\n    if len(head) == 0:\n        print(tail)\n    else:\n        for i in range(len(head)):\n            permutations(head[:i] + head[i+1:], tail + head[i])\n<\/code><\/pre>\n<p>called as:<\/p>\n<pre><code>permutations('abc')\n<\/code><\/pre>\n"},{"owner":{"account_id":1470836,"reputation":2153,"user_id":1382466,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/3546c60b0a7e18a96bf0994b1d3a73c0?s=256&d=identicon&r=PG","display_name":"Tom Ekberg","link":"https:\/\/stackoverflow.com\/users\/1382466\/tom-ekberg"},"is_accepted":false,"score":65,"last_activity_date":1344260418,"last_edit_date":1344260418.0,"creation_date":1336490621,"answer_id":10501603,"question_id":4271740,"content_license":"CC BY-SA 3.0","body_markdown":"`os.getenv(&#39;HOSTNAME&#39;)` and `os.environ[&#39;HOSTNAME&#39;]` don&#39;t always work. In cron jobs and WSDL, HTTP HOSTNAME isn&#39;t set. Use this instead:\r\n\r\n    import socket\r\n    socket.gethostbyaddr(socket.gethostname())[0]\r\n\r\nIt always (even on Windows) returns a fully qualified host name, even if you defined a short alias in *\/etc\/hosts*.\r\n\r\nIf you defined an alias in *\/etc\/hosts* then `socket.gethostname()` will return the alias. `platform.uname()[1]` does the same thing.\r\n\r\nI ran into a case where the above didn&#39;t work. This is what I&#39;m using now:\r\n\r\n    import socket\r\n    if socket.gethostname().find(&#39;.&#39;)&gt;=0:\r\n        name=socket.gethostname()\r\n    else:\r\n        name=socket.gethostbyaddr(socket.gethostname())[0]\r\n\r\nIt first calls gethostname to see if it returns something that looks like a host name, if not it uses my original solution.\r\n","body":"<p><code>os.getenv('HOSTNAME')<\/code> and <code>os.environ['HOSTNAME']<\/code> don't always work. In cron jobs and WSDL, HTTP HOSTNAME isn't set. Use this instead:<\/p>\n\n<pre><code>import socket\nsocket.gethostbyaddr(socket.gethostname())[0]\n<\/code><\/pre>\n\n<p>It always (even on Windows) returns a fully qualified host name, even if you defined a short alias in <em>\/etc\/hosts<\/em>.<\/p>\n\n<p>If you defined an alias in <em>\/etc\/hosts<\/em> then <code>socket.gethostname()<\/code> will return the alias. <code>platform.uname()[1]<\/code> does the same thing.<\/p>\n\n<p>I ran into a case where the above didn't work. This is what I'm using now:<\/p>\n\n<pre><code>import socket\nif socket.gethostname().find('.')&gt;=0:\n    name=socket.gethostname()\nelse:\n    name=socket.gethostbyaddr(socket.gethostname())[0]\n<\/code><\/pre>\n\n<p>It first calls gethostname to see if it returns something that looks like a host name, if not it uses my original solution.<\/p>\n"},{"owner":{"account_id":2098046,"reputation":13825,"user_id":1866389,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/I4Nbj.jpg?s=256&g=1","display_name":"Slipstream","link":"https:\/\/stackoverflow.com\/users\/1866389\/slipstream"},"is_accepted":false,"score":65,"last_activity_date":1522660318,"last_edit_date":1522660318.0,"creation_date":1492440224,"answer_id":43453668,"question_id":4690600,"content_license":"CC BY-SA 3.0","body_markdown":"There are some cases where you can use the **e.message** or **e.messages**.. But it does not work in all cases. Anyway the more safe is to use the **str(e)** \r\n\r\n    try:\r\n      ...\r\n    except Exception as e:\r\n      print(e.message)","body":"<p>There are some cases where you can use the <strong>e.message<\/strong> or <strong>e.messages<\/strong>.. But it does not work in all cases. Anyway the more safe is to use the <strong>str(e)<\/strong> <\/p>\n\n<pre><code>try:\n  ...\nexcept Exception as e:\n  print(e.message)\n<\/code><\/pre>\n"},{"owner":{"account_id":12534802,"reputation":959,"user_id":9121765,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/809d31748b4a80fcd4c2053d8dce3caf?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"Shilpa Shinde","link":"https:\/\/stackoverflow.com\/users\/9121765\/shilpa-shinde"},"is_accepted":false,"score":65,"last_activity_date":1647073959,"last_edit_date":1647073959.0,"creation_date":1578646759,"answer_id":59678369,"question_id":49127834,"content_license":"CC BY-SA 4.0","body_markdown":"If you are in **base**:\r\n\r\n```\r\n(base) HP-Compaq-Elite-8300-CMT:~$ \r\n```\r\nremove **env_name** by:\r\n```\r\nconda env remove -n env_name\r\n\r\n```\r\nif you are already in **env_name** environment :\r\n```\r\n(env_name) HP-Compaq-Elite-8300-CMT:~$ \r\n```\r\ndeactivate then remove by :\r\n```\r\nconda deactivate\r\nconda env remove -n env_name\r\n```","body":"<p>If you are in <strong>base<\/strong>:<\/p>\n<pre><code>(base) HP-Compaq-Elite-8300-CMT:~$ \n<\/code><\/pre>\n<p>remove <strong>env_name<\/strong> by:<\/p>\n<pre><code>conda env remove -n env_name\n\n<\/code><\/pre>\n<p>if you are already in <strong>env_name<\/strong> environment :<\/p>\n<pre><code>(env_name) HP-Compaq-Elite-8300-CMT:~$ \n<\/code><\/pre>\n<p>deactivate then remove by :<\/p>\n<pre><code>conda deactivate\nconda env remove -n env_name\n<\/code><\/pre>\n"},{"owner":{"account_id":35417,"reputation":1067779,"user_id":100297,"user_type":"moderator","profile_image":"https:\/\/www.gravatar.com\/avatar\/24780fb6df85a943c7aea0402c843737?s=256&d=identicon&r=PG","display_name":"Martijn Pieters","link":"https:\/\/stackoverflow.com\/users\/100297\/martijn-pieters"},"is_accepted":false,"score":64,"last_activity_date":1418671864,"last_edit_date":1418671864.0,"creation_date":1412101388,"answer_id":26127562,"question_id":2817869,"content_license":"CC BY-SA 3.0","body_markdown":"You&#39;ll need to install a Microsoft compiler, compatible with the compiler used to build Python. This means you need Visual C++ 2008 (or newer, with [some tweaking](\/a\/10558328)).\r\n\r\nMicrosoft now supplies a bundled compiler and headers *just* to be able to compile Python extensions, at the memorable URL: \r\n\r\n&gt; ### Microsoft Visual C++ Compiler for Python 2.7\r\n&gt;\r\n&gt; http:\/\/aka.ms\/vcpython27\r\n\r\nThis is a relatively small package; 85MB to download, installable without admin privileges, no reboot required. The name is a little misleading, the compiler will work for any Python version originally compiled with Visual C++ 2008, not just Python 2.7.\r\n\r\nIf you start a Python interactive prompt or print `sys.version`, look for the `MSC` version string; if it is `MSC v.1500` you can use this tool.\r\n\r\nFrom the [original announcement to the distutils list](https:\/\/mail.python.org\/pipermail\/distutils-sig\/2014-September\/024885.html):\r\n\r\n&gt; Microsoft has released a compiler package for Python 2.7 to make it easier for people to build and distribute their C extension modules on Windows. The Microsoft Visual C++ Compiler for Python 2.7 (a.k.a. VC9) is available from: http:\/\/aka.ms\/vcpython27 \r\n&gt;\r\n&gt; This package contains all the tools and headers required to build C extension modules for Python 2.7 32-bit and 64-bit (note that some extension modules require 3rd party dependencies such as OpenSSL or libxml2 that are not included). Other versions of Python built with Visual C++ 2008 are also supported, so &quot;Python 2.7&quot; is just advertising - it&#39;ll work fine with 2.6 and 3.2.\r\n\r\nNote that you need to have [`setuptools` 6.0 or newer](https:\/\/pypi.python.org\/pypi\/setuptools) installed (listed in the system requirements on the download page). The project you are installing must use `setuptools.setup()`, not `distutils` or the auto-detection won&#39;t work.\r\n\r\nMicrosoft has stated that they want to keep the URL stable, so that automated scripts can reference it easily.","body":"<p>You'll need to install a Microsoft compiler, compatible with the compiler used to build Python. This means you need Visual C++ 2008 (or newer, with <a href=\"\/a\/10558328\">some tweaking<\/a>).<\/p>\n\n<p>Microsoft now supplies a bundled compiler and headers <em>just<\/em> to be able to compile Python extensions, at the memorable URL: <\/p>\n\n<blockquote>\n  <h3>Microsoft Visual C++ Compiler for Python 2.7<\/h3>\n  \n  <p><a href=\"http:\/\/aka.ms\/vcpython27\">http:\/\/aka.ms\/vcpython27<\/a><\/p>\n<\/blockquote>\n\n<p>This is a relatively small package; 85MB to download, installable without admin privileges, no reboot required. The name is a little misleading, the compiler will work for any Python version originally compiled with Visual C++ 2008, not just Python 2.7.<\/p>\n\n<p>If you start a Python interactive prompt or print <code>sys.version<\/code>, look for the <code>MSC<\/code> version string; if it is <code>MSC v.1500<\/code> you can use this tool.<\/p>\n\n<p>From the <a href=\"https:\/\/mail.python.org\/pipermail\/distutils-sig\/2014-September\/024885.html\">original announcement to the distutils list<\/a>:<\/p>\n\n<blockquote>\n  <p>Microsoft has released a compiler package for Python 2.7 to make it easier for people to build and distribute their C extension modules on Windows. The Microsoft Visual C++ Compiler for Python 2.7 (a.k.a. VC9) is available from: <a href=\"http:\/\/aka.ms\/vcpython27\">http:\/\/aka.ms\/vcpython27<\/a> <\/p>\n  \n  <p>This package contains all the tools and headers required to build C extension modules for Python 2.7 32-bit and 64-bit (note that some extension modules require 3rd party dependencies such as OpenSSL or libxml2 that are not included). Other versions of Python built with Visual C++ 2008 are also supported, so \"Python 2.7\" is just advertising - it'll work fine with 2.6 and 3.2.<\/p>\n<\/blockquote>\n\n<p>Note that you need to have <a href=\"https:\/\/pypi.python.org\/pypi\/setuptools\"><code>setuptools<\/code> 6.0 or newer<\/a> installed (listed in the system requirements on the download page). The project you are installing must use <code>setuptools.setup()<\/code>, not <code>distutils<\/code> or the auto-detection won't work.<\/p>\n\n<p>Microsoft has stated that they want to keep the URL stable, so that automated scripts can reference it easily.<\/p>\n"},{"owner":{"account_id":258754,"reputation":379785,"user_id":541136,"user_type":"moderator","accept_rate":96,"profile_image":"https:\/\/i.stack.imgur.com\/wftMn.jpg?s=256&g=1","display_name":"Russia Must Remove Putin","link":"https:\/\/stackoverflow.com\/users\/541136\/russia-must-remove-putin"},"is_accepted":false,"score":64,"last_activity_date":1483723772,"last_edit_date":1483723772.0,"creation_date":1459450640,"answer_id":36341469,"question_id":1855095,"content_license":"CC BY-SA 3.0","body_markdown":"&gt; # How can I create a zip archive of a directory structure in Python?\r\n \r\n## In a Python script\r\n\r\nIn Python 2.7+, `shutil` has a `make_archive` function.\r\n\r\n    from shutil import make_archive\r\n    make_archive(\r\n      &#39;zipfile_name&#39;, \r\n      &#39;zip&#39;,           # the archive format - or tar, bztar, gztar \r\n      root_dir=None,   # root for archive - current working dir if None\r\n      base_dir=None)   # start archiving from here - cwd if None too\r\n\r\nHere the zipped archive will be named `zipfile_name.zip`. If `base_dir` is farther down from `root_dir` it will exclude files not in the `base_dir`, but still archive the files in the parent dirs up to the `root_dir`.\r\n\r\nI did have an issue testing this on Cygwin with 2.7 - it wants a root_dir argument, for cwd:\r\n\r\n    make_archive(&#39;zipfile_name&#39;, &#39;zip&#39;, root_dir=&#39;.&#39;)\r\n\r\n&lt;!--\r\nIf you do this:\r\n\r\n    make_archive(&#39;zipfile_name&#39;, &#39;zip&#39;, root_dir=&#39;..&#39;)\r\n\r\nyour archive will place everything in the parent directory\r\n--&gt;\r\n\r\n\r\n## Using Python from the shell\r\n\r\nYou can do this with Python from the shell also using the `zipfile` module:\r\n\r\n    $ python -m zipfile -c zipname sourcedir\r\n\r\nWhere `zipname` is the name of the destination file you want (add `.zip` if you want it, it won&#39;t do it automatically) and sourcedir is the path to the directory.\r\n\r\n## Zipping up Python (or just don&#39;t want parent dir):\r\n\r\nIf you&#39;re trying to zip up a python package with a `__init__.py` and `__main__.py`, and you don&#39;t want the parent dir, it&#39;s \r\n\r\n    $ python -m zipfile -c zipname sourcedir\/*\r\n\r\nAnd\r\n\r\n    $ python zipname\r\n\r\nwould run the package. (Note that you can&#39;t run subpackages as the entry point from a zipped archive.)\r\n\r\n## Zipping a Python app:\r\n\r\nIf you have python3.5+, and specifically want to zip up a Python package, use [zipapp][1]:\r\n\r\n    $ python -m zipapp myapp\r\n    $ python myapp.pyz\r\n\r\n\r\n  [1]: https:\/\/docs.python.org\/3\/library\/zipapp.html","body":"<blockquote>\n  <h1>How can I create a zip archive of a directory structure in Python?<\/h1>\n<\/blockquote>\n\n<h2>In a Python script<\/h2>\n\n<p>In Python 2.7+, <code>shutil<\/code> has a <code>make_archive<\/code> function.<\/p>\n\n<pre><code>from shutil import make_archive\nmake_archive(\n  'zipfile_name', \n  'zip',           # the archive format - or tar, bztar, gztar \n  root_dir=None,   # root for archive - current working dir if None\n  base_dir=None)   # start archiving from here - cwd if None too\n<\/code><\/pre>\n\n<p>Here the zipped archive will be named <code>zipfile_name.zip<\/code>. If <code>base_dir<\/code> is farther down from <code>root_dir<\/code> it will exclude files not in the <code>base_dir<\/code>, but still archive the files in the parent dirs up to the <code>root_dir<\/code>.<\/p>\n\n<p>I did have an issue testing this on Cygwin with 2.7 - it wants a root_dir argument, for cwd:<\/p>\n\n<pre><code>make_archive('zipfile_name', 'zip', root_dir='.')\n<\/code><\/pre>\n\n\n\n<h2>Using Python from the shell<\/h2>\n\n<p>You can do this with Python from the shell also using the <code>zipfile<\/code> module:<\/p>\n\n<pre><code>$ python -m zipfile -c zipname sourcedir\n<\/code><\/pre>\n\n<p>Where <code>zipname<\/code> is the name of the destination file you want (add <code>.zip<\/code> if you want it, it won't do it automatically) and sourcedir is the path to the directory.<\/p>\n\n<h2>Zipping up Python (or just don't want parent dir):<\/h2>\n\n<p>If you're trying to zip up a python package with a <code>__init__.py<\/code> and <code>__main__.py<\/code>, and you don't want the parent dir, it's <\/p>\n\n<pre><code>$ python -m zipfile -c zipname sourcedir\/*\n<\/code><\/pre>\n\n<p>And<\/p>\n\n<pre><code>$ python zipname\n<\/code><\/pre>\n\n<p>would run the package. (Note that you can't run subpackages as the entry point from a zipped archive.)<\/p>\n\n<h2>Zipping a Python app:<\/h2>\n\n<p>If you have python3.5+, and specifically want to zip up a Python package, use <a href=\"https:\/\/docs.python.org\/3\/library\/zipapp.html\" rel=\"noreferrer\">zipapp<\/a>:<\/p>\n\n<pre><code>$ python -m zipapp myapp\n$ python myapp.pyz\n<\/code><\/pre>\n"},{"owner":{"account_id":5936732,"reputation":3911,"user_id":4669463,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/lh4.googleusercontent.com\/-oMOywLnvOh8\/AAAAAAAAAAI\/AAAAAAAARxc\/ynEEMOSyeEU\/photo.jpg?sz=256","display_name":"Gajendra D Ambi","link":"https:\/\/stackoverflow.com\/users\/4669463\/gajendra-d-ambi"},"is_accepted":false,"score":64,"last_activity_date":1689949685,"last_edit_date":1689949685.0,"creation_date":1514651166,"answer_id":48035730,"question_id":2967194,"content_license":"CC BY-SA 4.0","body_markdown":"```py\r\n&#39;&#39;&#39;\r\nw  write mode\r\nr  read mode\r\na  append mode\r\n\r\nw+  create file if it doesn&#39;t exist and open it in write mode\r\nr+  open for reading and writing. Does not create file.\r\na+  create file if it doesn&#39;t exist and open it in append mode\r\n&#39;&#39;&#39;\r\n```\r\nAssuming that you are in working directory of the file.\r\n\r\nExample:\r\n\r\n```py\r\nfile_name = &#39;my_file.txt&#39;\r\nf = open(file_name, &#39;w+&#39;)  # open file in write mode\r\nf.write(&#39;python rules&#39;)\r\nf.close()\r\n```\r\n\r\n[FYI am using Python version 3.6.2]","body":"<pre class=\"lang-py prettyprint-override\"><code>'''\nw  write mode\nr  read mode\na  append mode\n\nw+  create file if it doesn't exist and open it in write mode\nr+  open for reading and writing. Does not create file.\na+  create file if it doesn't exist and open it in append mode\n'''\n<\/code><\/pre>\n<p>Assuming that you are in working directory of the file.<\/p>\n<p>Example:<\/p>\n<pre class=\"lang-py prettyprint-override\"><code>file_name = 'my_file.txt'\nf = open(file_name, 'w+')  # open file in write mode\nf.write('python rules')\nf.close()\n<\/code><\/pre>\n<p>[FYI am using Python version 3.6.2]<\/p>\n"},{"owner":{"account_id":6900492,"reputation":947,"user_id":5300303,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/ofwLz.png?s=256&g=1","display_name":"h2ku","link":"https:\/\/stackoverflow.com\/users\/5300303\/h2ku"},"is_accepted":false,"score":64,"last_activity_date":1647068776,"last_edit_date":1647068776.0,"creation_date":1521769258,"answer_id":49441113,"question_id":29576430,"content_license":"CC BY-SA 4.0","body_markdown":"**TL;DR**: `np.random.shuffle(ndarray)` can do the job.  \r\nSo, in your case \r\n\r\n    np.random.shuffle(DataFrame.values)\r\n\r\n---\r\n`DataFrame`, under the hood, uses NumPy ndarray as a data holder. (You can check from [DataFrame source code](https:\/\/github.com\/pandas-dev\/pandas\/blob\/master\/pandas\/core\/frame.py#L249))\r\n \r\nSo if you use [`np.random.shuffle()`](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.random.shuffle.html), it would shuffle the array along the first axis of a multi-dimensional array. But the index of the `DataFrame` remains unshuffled.\r\n\r\nThough, there are some points to consider.  \r\n\r\n- function returns none. In case you want to keep a copy of the original object, you have to do so before you pass to the function.\r\n- [`sklearn.utils.shuffle()`](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.utils.shuffle.html), as user tj89 suggested, can designate `random_state` along with another option to control output. You may want that for dev purposes.\r\n- [`sklearn.utils.shuffle()`](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.utils.shuffle.html) is faster. But WILL SHUFFLE the axis info(index, column) of the `DataFrame` along with the `ndarray` it contains.\r\n\r\n## Benchmark result\r\nbetween [`sklearn.utils.shuffle()`](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.utils.shuffle.html) and [`np.random.shuffle()`](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.random.shuffle.html).\r\n\r\n### ndarray\r\n    nd = sklearn.utils.shuffle(nd)\r\n0.10793248389381915 sec. **8x faster**\r\n\r\n    np.random.shuffle(nd)\r\n0.8897626010002568 sec\r\n\r\n### DataFrame\r\n    df = sklearn.utils.shuffle(df)\r\n0.3183923360193148 sec. **3x faster**\r\n\r\n    np.random.shuffle(df.values)\r\n0.9357550159329548 sec\r\n\r\n&gt; Conclusion: If it is okay to axis info(index, column) to be shuffled along with ndarray, use [`sklearn.utils.shuffle()`](http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.utils.shuffle.html). Otherwise, use [`np.random.shuffle()`](https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.random.shuffle.html)\r\n\r\n### used code\r\n    import timeit\r\n    setup = &#39;&#39;&#39;\r\n    import numpy as np\r\n    import pandas as pd\r\n    import sklearn\r\n    nd = np.random.random((1000, 100))\r\n    df = pd.DataFrame(nd)\r\n    &#39;&#39;&#39;\r\n    \r\n    timeit.timeit(&#39;nd = sklearn.utils.shuffle(nd)&#39;, setup=setup, number=1000)\r\n    timeit.timeit(&#39;np.random.shuffle(nd)&#39;, setup=setup, number=1000)\r\n    timeit.timeit(&#39;df = sklearn.utils.shuffle(df)&#39;, setup=setup, number=1000)\r\n    timeit.timeit(&#39;np.random.shuffle(df.values)&#39;, setup=setup, number=1000)\r\n\r\n[tag:python][tag:benchmarking]","body":"<p><strong>TL;DR<\/strong>: <code>np.random.shuffle(ndarray)<\/code> can do the job.<br \/>\nSo, in your case<\/p>\n<pre><code>np.random.shuffle(DataFrame.values)\n<\/code><\/pre>\n<hr \/>\n<p><code>DataFrame<\/code>, under the hood, uses NumPy ndarray as a data holder. (You can check from <a href=\"https:\/\/github.com\/pandas-dev\/pandas\/blob\/master\/pandas\/core\/frame.py#L249\" rel=\"noreferrer\">DataFrame source code<\/a>)<\/p>\n<p>So if you use <a href=\"https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.random.shuffle.html\" rel=\"noreferrer\"><code>np.random.shuffle()<\/code><\/a>, it would shuffle the array along the first axis of a multi-dimensional array. But the index of the <code>DataFrame<\/code> remains unshuffled.<\/p>\n<p>Though, there are some points to consider.<\/p>\n<ul>\n<li>function returns none. In case you want to keep a copy of the original object, you have to do so before you pass to the function.<\/li>\n<li><a href=\"http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.utils.shuffle.html\" rel=\"noreferrer\"><code>sklearn.utils.shuffle()<\/code><\/a>, as user tj89 suggested, can designate <code>random_state<\/code> along with another option to control output. You may want that for dev purposes.<\/li>\n<li><a href=\"http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.utils.shuffle.html\" rel=\"noreferrer\"><code>sklearn.utils.shuffle()<\/code><\/a> is faster. But WILL SHUFFLE the axis info(index, column) of the <code>DataFrame<\/code> along with the <code>ndarray<\/code> it contains.<\/li>\n<\/ul>\n<h2>Benchmark result<\/h2>\n<p>between <a href=\"http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.utils.shuffle.html\" rel=\"noreferrer\"><code>sklearn.utils.shuffle()<\/code><\/a> and <a href=\"https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.random.shuffle.html\" rel=\"noreferrer\"><code>np.random.shuffle()<\/code><\/a>.<\/p>\n<h3>ndarray<\/h3>\n<pre><code>nd = sklearn.utils.shuffle(nd)\n<\/code><\/pre>\n<p>0.10793248389381915 sec. <strong>8x faster<\/strong><\/p>\n<pre><code>np.random.shuffle(nd)\n<\/code><\/pre>\n<p>0.8897626010002568 sec<\/p>\n<h3>DataFrame<\/h3>\n<pre><code>df = sklearn.utils.shuffle(df)\n<\/code><\/pre>\n<p>0.3183923360193148 sec. <strong>3x faster<\/strong><\/p>\n<pre><code>np.random.shuffle(df.values)\n<\/code><\/pre>\n<p>0.9357550159329548 sec<\/p>\n<blockquote>\n<p>Conclusion: If it is okay to axis info(index, column) to be shuffled along with ndarray, use <a href=\"http:\/\/scikit-learn.org\/stable\/modules\/generated\/sklearn.utils.shuffle.html\" rel=\"noreferrer\"><code>sklearn.utils.shuffle()<\/code><\/a>. Otherwise, use <a href=\"https:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.random.shuffle.html\" rel=\"noreferrer\"><code>np.random.shuffle()<\/code><\/a><\/p>\n<\/blockquote>\n<h3>used code<\/h3>\n<pre><code>import timeit\nsetup = '''\nimport numpy as np\nimport pandas as pd\nimport sklearn\nnd = np.random.random((1000, 100))\ndf = pd.DataFrame(nd)\n'''\n\ntimeit.timeit('nd = sklearn.utils.shuffle(nd)', setup=setup, number=1000)\ntimeit.timeit('np.random.shuffle(nd)', setup=setup, number=1000)\ntimeit.timeit('df = sklearn.utils.shuffle(df)', setup=setup, number=1000)\ntimeit.timeit('np.random.shuffle(df.values)', setup=setup, number=1000)\n<\/code><\/pre>\n<p><a href=\"\/questions\/tagged\/python\" class=\"post-tag\" title=\"show questions tagged &#39;python&#39;\" rel=\"tag\">python<\/a><a href=\"\/questions\/tagged\/benchmarking\" class=\"post-tag\" title=\"show questions tagged &#39;benchmarking&#39;\" rel=\"tag\">benchmarking<\/a><\/p>\n"},{"owner":{"account_id":271958,"reputation":128215,"user_id":562769,"user_type":"registered","accept_rate":61,"profile_image":"https:\/\/www.gravatar.com\/avatar\/e86681e49622d52817b36fd2a4c936b7?s=256&d=identicon&r=PG","display_name":"Martin Thoma","link":"https:\/\/stackoverflow.com\/users\/562769\/martin-thoma"},"is_accepted":false,"score":63,"last_activity_date":1489522995,"last_edit_date":1489522995.0,"creation_date":1392219208,"answer_id":21732313,"question_id":699866,"content_license":"CC BY-SA 3.0","body_markdown":"If you want a textual representation without the 0b-prefix, you could use this:\r\n\r\n\r\n&lt;!-- language: lang-python --&gt;\r\n\r\n    get_bin = lambda x: format(x, &#39;b&#39;)\r\n\r\n    print(get_bin(3))\r\n    &gt;&gt;&gt; &#39;11&#39;\r\n\r\n    print(get_bin(-3))\r\n    &gt;&gt;&gt; &#39;-11&#39;\r\n\r\n\r\nWhen you want a n-bit representation:\r\n\r\n&lt;!-- language: lang-python --&gt;\r\n\r\n    get_bin = lambda x, n: format(x, &#39;b&#39;).zfill(n)\r\n    &gt;&gt;&gt; get_bin(12, 32)\r\n    &#39;00000000000000000000000000001100&#39;\r\n    &gt;&gt;&gt; get_bin(-12, 32)\r\n    &#39;-00000000000000000000000000001100&#39;\r\n\r\nAlternatively, if you prefer having a function:\r\n\r\n    def get_bin(x, n=0):\r\n        &quot;&quot;&quot;\r\n        Get the binary representation of x.\r\n\r\n        Parameters\r\n        ----------\r\n        x : int\r\n        n : int\r\n            Minimum number of digits. If x needs less digits in binary, the rest\r\n            is filled with zeros.\r\n\r\n        Returns\r\n        -------\r\n        str\r\n        &quot;&quot;&quot;\r\n        return format(x, &#39;b&#39;).zfill(n)","body":"<p>If you want a textual representation without the 0b-prefix, you could use this:<\/p>\n\n<pre class=\"lang-python prettyprint-override\"><code>get_bin = lambda x: format(x, 'b')\n\nprint(get_bin(3))\n&gt;&gt;&gt; '11'\n\nprint(get_bin(-3))\n&gt;&gt;&gt; '-11'\n<\/code><\/pre>\n\n<p>When you want a n-bit representation:<\/p>\n\n<pre class=\"lang-python prettyprint-override\"><code>get_bin = lambda x, n: format(x, 'b').zfill(n)\n&gt;&gt;&gt; get_bin(12, 32)\n'00000000000000000000000000001100'\n&gt;&gt;&gt; get_bin(-12, 32)\n'-00000000000000000000000000001100'\n<\/code><\/pre>\n\n<p>Alternatively, if you prefer having a function:<\/p>\n\n<pre><code>def get_bin(x, n=0):\n    \"\"\"\n    Get the binary representation of x.\n\n    Parameters\n    ----------\n    x : int\n    n : int\n        Minimum number of digits. If x needs less digits in binary, the rest\n        is filled with zeros.\n\n    Returns\n    -------\n    str\n    \"\"\"\n    return format(x, 'b').zfill(n)\n<\/code><\/pre>\n"},{"owner":{"account_id":1968063,"reputation":23759,"user_id":1767754,"user_type":"registered","accept_rate":70,"profile_image":"https:\/\/www.gravatar.com\/avatar\/00ba1fd17dc5970a0096cc4d7a932536?s=256&d=identicon&r=PG","display_name":"user1767754","link":"https:\/\/stackoverflow.com\/users\/1767754\/user1767754"},"is_accepted":false,"score":63,"last_activity_date":1419955391,"last_edit_date":1495542395.0,"creation_date":1419953796,"answer_id":27708256,"question_id":5214578,"content_license":"CC BY-SA 3.0","body_markdown":"In case you want to pass multiple arguments you can use a tuple\r\n\r\n    price = 33.3\r\n    with open(&quot;Output.txt&quot;, &quot;w&quot;) as text_file:\r\n        text_file.write(&quot;Purchase Amount: %s price %f&quot; % (TotalAmount, price))\r\n\r\nMore: https:\/\/stackoverflow.com\/questions\/15286401\/print-multiple-arguments-in-python","body":"<p>In case you want to pass multiple arguments you can use a tuple<\/p>\n\n<pre><code>price = 33.3\nwith open(\"Output.txt\", \"w\") as text_file:\n    text_file.write(\"Purchase Amount: %s price %f\" % (TotalAmount, price))\n<\/code><\/pre>\n\n<p>More: <a href=\"https:\/\/stackoverflow.com\/questions\/15286401\/print-multiple-arguments-in-python\">Print multiple arguments in python<\/a><\/p>\n"},{"owner":{"account_id":1711076,"reputation":833,"user_id":1569144,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/d5a9d7881600a9ef1b1823ab5a7fddbe?s=256&d=identicon&r=PG","display_name":"hexaJer","link":"https:\/\/stackoverflow.com\/users\/1569144\/hexajer"},"is_accepted":false,"score":63,"last_activity_date":1511475134,"last_edit_date":1511475134.0,"creation_date":1437732494,"answer_id":31607735,"question_id":517923,"content_license":"CC BY-SA 3.0","body_markdown":"Actually I work on project compatible python 2.6, 2.7 and 3.4 and I have to create IDs from free user entries. \r\n\r\nThanks to you, I have created this function that works wonders.\r\n\r\n    import re\r\n    import unicodedata\r\n\r\n    def strip_accents(text):\r\n        &quot;&quot;&quot;\r\n        Strip accents from input String.\r\n        \r\n        :param text: The input string.\r\n        :type text: String.\r\n        \r\n        :returns: The processed String.\r\n        :rtype: String.\r\n        &quot;&quot;&quot;\r\n        try:\r\n            text = unicode(text, &#39;utf-8&#39;)\r\n        except (TypeError, NameError): # unicode is a default on python 3 \r\n            pass\r\n        text = unicodedata.normalize(&#39;NFD&#39;, text)\r\n        text = text.encode(&#39;ascii&#39;, &#39;ignore&#39;)\r\n        text = text.decode(&quot;utf-8&quot;)\r\n        return str(text)\r\n        \r\n    def text_to_id(text):\r\n        &quot;&quot;&quot;\r\n        Convert input text to id.\r\n        \r\n        :param text: The input string.\r\n        :type text: String.\r\n        \r\n        :returns: The processed String.\r\n        :rtype: String.\r\n        &quot;&quot;&quot;\r\n        text = strip_accents(text.lower())\r\n        text = re.sub(&#39;[ ]+&#39;, &#39;_&#39;, text)\r\n        text = re.sub(&#39;[^0-9a-zA-Z_-]&#39;, &#39;&#39;, text)\r\n        return text\r\n\r\nresult:\r\n\r\n    text_to_id(&quot;Montr&#233;al, &#252;ber, 12.89, M&#232;re, Fran&#231;oise, no&#235;l, 889&quot;)\r\n    &gt;&gt;&gt; &#39;montreal_uber_1289_mere_francoise_noel_889&#39;","body":"<p>Actually I work on project compatible python 2.6, 2.7 and 3.4 and I have to create IDs from free user entries. <\/p>\n\n<p>Thanks to you, I have created this function that works wonders.<\/p>\n\n<pre><code>import re\nimport unicodedata\n\ndef strip_accents(text):\n    \"\"\"\n    Strip accents from input String.\n\n    :param text: The input string.\n    :type text: String.\n\n    :returns: The processed String.\n    :rtype: String.\n    \"\"\"\n    try:\n        text = unicode(text, 'utf-8')\n    except (TypeError, NameError): # unicode is a default on python 3 \n        pass\n    text = unicodedata.normalize('NFD', text)\n    text = text.encode('ascii', 'ignore')\n    text = text.decode(\"utf-8\")\n    return str(text)\n\ndef text_to_id(text):\n    \"\"\"\n    Convert input text to id.\n\n    :param text: The input string.\n    :type text: String.\n\n    :returns: The processed String.\n    :rtype: String.\n    \"\"\"\n    text = strip_accents(text.lower())\n    text = re.sub('[ ]+', '_', text)\n    text = re.sub('[^0-9a-zA-Z_-]', '', text)\n    return text\n<\/code><\/pre>\n\n<p>result:<\/p>\n\n<pre><code>text_to_id(\"Montr\u00e9al, \u00fcber, 12.89, M\u00e8re, Fran\u00e7oise, no\u00ebl, 889\")\n&gt;&gt;&gt; 'montreal_uber_1289_mere_francoise_noel_889'\n<\/code><\/pre>\n"},{"owner":{"account_id":2804247,"reputation":106566,"user_id":2411802,"user_type":"registered","accept_rate":86,"profile_image":"https:\/\/i.stack.imgur.com\/RA92x.jpg?s=256&g=1","display_name":"Alexander","link":"https:\/\/stackoverflow.com\/users\/2411802\/alexander"},"is_accepted":false,"score":63,"last_activity_date":1675370485,"last_edit_date":1675370485.0,"creation_date":1461867359,"answer_id":36922486,"question_id":36921951,"content_license":"CC BY-SA 4.0","body_markdown":"For Boolean logic, use `&amp;` and `|`.\r\n\r\n```lang-none\r\nnp.random.seed(0)\r\ndf = pd.DataFrame(np.random.randn(5,3), columns=list(&#39;ABC&#39;))\r\n\r\n&gt;&gt;&gt; df\r\n\r\n          A         B         C\r\n0  1.764052  0.400157  0.978738\r\n1  2.240893  1.867558 -0.977278\r\n2  0.950088 -0.151357 -0.103219\r\n3  0.410599  0.144044  1.454274\r\n4  0.761038  0.121675  0.443863\r\n\r\n&gt;&gt;&gt; df.loc[(df.C &gt; 0.25) | (df.C &lt; -0.25)]\r\n\r\n          A         B         C\r\n0  1.764052  0.400157  0.978738\r\n1  2.240893  1.867558 -0.977278\r\n3  0.410599  0.144044  1.454274\r\n4  0.761038  0.121675  0.443863\r\n```\r\n\r\nTo see what is happening, you get a column of Booleans for each comparison, e.g.,\r\n\r\n```lang-none\r\ndf.C &gt; 0.25\r\n\r\n0     True\r\n1    False\r\n2    False\r\n3     True\r\n4     True\r\nName: C, dtype: bool\r\n```\r\n\r\nWhen you have multiple criteria, you will get multiple columns returned.  This is why the join logic is ambiguous.  Using `and` or `or` treats each column separately, so you first need to reduce that column to a single Boolean value.  For example, to see if any value or all values in each of the columns is True.\r\n\r\n```lang-none\r\n# Any value in either column is True?\r\n(df.C &gt; 0.25).any() or (df.C &lt; -0.25).any()\r\n\r\nTrue\r\n\r\n# All values in either column is True?\r\n(df.C &gt; 0.25).all() or (df.C &lt; -0.25).all()\r\n\r\nFalse\r\n```\r\n\r\nOne convoluted way to achieve the same thing is to zip all of these columns together, and perform the appropriate logic.\r\n\r\n```lang-none\r\n&gt;&gt;&gt; df[[any([a, b]) for a, b in zip(df.C &gt; 0.25, df.C &lt; -0.25)]]\r\n\r\n          A         B         C\r\n0  1.764052  0.400157  0.978738\r\n1  2.240893  1.867558 -0.977278\r\n3  0.410599  0.144044  1.454274\r\n4  0.761038  0.121675  0.443863\r\n```\r\n\r\nFor more details, refer to [Boolean Indexing][1] in the documentation.\r\n\r\n  [1]: http:\/\/pandas.pydata.org\/pandas-docs\/stable\/indexing.html#boolean-indexing\r\n\r\n \r\n","body":"<p>For Boolean logic, use <code>&amp;<\/code> and <code>|<\/code>.<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>np.random.seed(0)\ndf = pd.DataFrame(np.random.randn(5,3), columns=list('ABC'))\n\n&gt;&gt;&gt; df\n\n          A         B         C\n0  1.764052  0.400157  0.978738\n1  2.240893  1.867558 -0.977278\n2  0.950088 -0.151357 -0.103219\n3  0.410599  0.144044  1.454274\n4  0.761038  0.121675  0.443863\n\n&gt;&gt;&gt; df.loc[(df.C &gt; 0.25) | (df.C &lt; -0.25)]\n\n          A         B         C\n0  1.764052  0.400157  0.978738\n1  2.240893  1.867558 -0.977278\n3  0.410599  0.144044  1.454274\n4  0.761038  0.121675  0.443863\n<\/code><\/pre>\n<p>To see what is happening, you get a column of Booleans for each comparison, e.g.,<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>df.C &gt; 0.25\n\n0     True\n1    False\n2    False\n3     True\n4     True\nName: C, dtype: bool\n<\/code><\/pre>\n<p>When you have multiple criteria, you will get multiple columns returned.  This is why the join logic is ambiguous.  Using <code>and<\/code> or <code>or<\/code> treats each column separately, so you first need to reduce that column to a single Boolean value.  For example, to see if any value or all values in each of the columns is True.<\/p>\n<pre class=\"lang-none prettyprint-override\"><code># Any value in either column is True?\n(df.C &gt; 0.25).any() or (df.C &lt; -0.25).any()\n\nTrue\n\n# All values in either column is True?\n(df.C &gt; 0.25).all() or (df.C &lt; -0.25).all()\n\nFalse\n<\/code><\/pre>\n<p>One convoluted way to achieve the same thing is to zip all of these columns together, and perform the appropriate logic.<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>&gt;&gt;&gt; df[[any([a, b]) for a, b in zip(df.C &gt; 0.25, df.C &lt; -0.25)]]\n\n          A         B         C\n0  1.764052  0.400157  0.978738\n1  2.240893  1.867558 -0.977278\n3  0.410599  0.144044  1.454274\n4  0.761038  0.121675  0.443863\n<\/code><\/pre>\n<p>For more details, refer to <a href=\"http:\/\/pandas.pydata.org\/pandas-docs\/stable\/indexing.html#boolean-indexing\" rel=\"nofollow noreferrer\">Boolean Indexing<\/a> in the documentation.<\/p>\n"},{"owner":{"account_id":84798,"reputation":16262,"user_id":236830,"user_type":"registered","accept_rate":59,"profile_image":"https:\/\/www.gravatar.com\/avatar\/1d7f93f931421bcf885970cac408ef8c?s=256&d=identicon&r=PG","display_name":"Davoud Taghawi-Nejad","link":"https:\/\/stackoverflow.com\/users\/236830\/davoud-taghawi-nejad"},"is_accepted":false,"score":62,"last_activity_date":1591895275,"last_edit_date":1591895275.0,"creation_date":1460353375,"answer_id":36540625,"question_id":1006289,"content_license":"CC BY-SA 4.0","body_markdown":"If you want to know the number of physical cores (not virtual hyperthreaded cores), here is a platform independent solution:\r\n\r\n```python\r\npsutil.cpu_count(logical=False)\r\n```\r\n\r\nhttps:\/\/github.com\/giampaolo\/psutil\/blob\/master\/INSTALL.rst\r\n\r\nNote that the default value for `logical` is `True`, so if you do want to include hyperthreaded cores you can use:\r\n\r\n```python\r\npsutil.cpu_count()\r\n```\r\n\r\nThis will give the same number as `os.cpu_count()` and `multiprocessing.cpu_count()`, neither of which have the `logical` keyword argument.","body":"<p>If you want to know the number of physical cores (not virtual hyperthreaded cores), here is a platform independent solution:<\/p>\n\n<pre class=\"lang-py prettyprint-override\"><code>psutil.cpu_count(logical=False)\n<\/code><\/pre>\n\n<p><a href=\"https:\/\/github.com\/giampaolo\/psutil\/blob\/master\/INSTALL.rst\" rel=\"noreferrer\">https:\/\/github.com\/giampaolo\/psutil\/blob\/master\/INSTALL.rst<\/a><\/p>\n\n<p>Note that the default value for <code>logical<\/code> is <code>True<\/code>, so if you do want to include hyperthreaded cores you can use:<\/p>\n\n<pre class=\"lang-py prettyprint-override\"><code>psutil.cpu_count()\n<\/code><\/pre>\n\n<p>This will give the same number as <code>os.cpu_count()<\/code> and <code>multiprocessing.cpu_count()<\/code>, neither of which have the <code>logical<\/code> keyword argument.<\/p>\n"},{"owner":{"account_id":3343278,"reputation":9857,"user_id":2809027,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/fDAhb.jpg?s=256&g=1","display_name":"Cecil Curry","link":"https:\/\/stackoverflow.com\/users\/2809027\/cecil-curry"},"is_accepted":false,"score":62,"last_activity_date":1470162475,"last_edit_date":1470162475.0,"creation_date":1466920693,"answer_id":38035646,"question_id":14405063,"content_license":"CC BY-SA 3.0","body_markdown":"In an [upvoted comment](https:\/\/stackoverflow.com\/questions\/14405063\/how-can-i-see-normal-print-output-created-during-pytest-run#comment47203398_14414325) to the [accepted answer](https:\/\/stackoverflow.com\/a\/14414325\/2809027), [Joe](https:\/\/stackoverflow.com\/users\/1741414\/joe) asks:\r\n\r\n&gt; Is there any way to print to the console _AND_ capture the output so that it shows in the junit report?\r\n\r\nIn UNIX, this is commonly referred to as [teeing](http:\/\/linux.die.net\/man\/1\/tee). Ideally, teeing rather than capturing would be the py.test default. Non-ideally, neither py.test nor any existing third-party py.test plugin (..._that I know of, anyway_) supports teeing \u2013 despite Python trivially supporting teeing [out-of-the-box](http:\/\/shallowsky.com\/blog\/programming\/python-tee.html).\r\n\r\nMonkey-patching py.test to do _anything_ unsupported is non-trivial. Why? Because:\r\n\r\n* Most py.test functionality is locked behind a private `_pytest` package _not_ intended to be externally imported. Attempting to do so without knowing what you&#39;re doing typically results in the public `pytest` package raising obscure exceptions at runtime. &lt;sup&gt;_Thanks alot, py.test. Really robust architecture you got there._&lt;\/sup&gt;\r\n* Even when you _do_ figure out how to monkey-patch the private `_pytest` API in a safe manner, you have to do so _before_ running the public `pytest` package run by the external `py.test` command. You _cannot_ do this in a plugin (e.g., a top-level `conftest` module in your test suite). By the time py.test lazily gets around to dynamically importing your plugin, any py.test class you wanted to monkey-patch has long since been instantiated \u2013 and you do _not_ have access to that instance. This implies that, if you want your monkey-patch to be meaningfully applied, you can no longer safely run the external `py.test` command. Instead, you have to wrap the running of that command with a custom setuptools `test` command that (in order):\r\n  1. Monkey-patches the private `_pytest` API.\r\n  1. Calls the public `pytest.main()` function to run the `py.test` command.\r\n\r\nThis answer monkey-patches py.test&#39;s `-s` and `--capture=no` options to capture stderr but _not_ stdout. By default, these options capture neither stderr nor stdout. This isn&#39;t quite teeing, of course. But every great journey begins with a tedious prequel everyone forgets in five years.\r\n\r\nWhy do this? I shall now tell you. My py.test-driven test suite contains slow functional tests. Displaying the stdout of these tests is helpful and reassuring, preventing [leycec](https:\/\/stackoverflow.com\/users\/2809027\/cecil-curry) from reaching for `killall -9 py.test` when yet another long-running functional test fails to do anything for weeks on end. Displaying the stderr of these tests, however, prevents py.test from reporting exception tracebacks on test failures. Which is completely unhelpful. Hence, we coerce py.test to capture stderr but _not_ stdout.\r\n\r\nBefore we get to it, this answer assumes you already have a custom setuptools `test` command invoking py.test. If you don&#39;t, see the [_Manual Integration_](https:\/\/pytest.org\/latest\/goodpractices.html#manual-integration) subsection of py.test&#39;s well-written [_Good Practices_](https:\/\/pytest.org\/latest\/goodpractices.html) page.\r\n\r\nDo _not_ install [pytest-runner](http:\/\/pypi.python.org\/pypi\/pytest-runner), a third-party setuptools plugin providing a custom setuptools `test` command also invoking py.test. If pytest-runner is already installed, you&#39;ll probably need to uninstall that pip3 package and then adopt the manual approach linked to above.\r\n\r\n\r\nAssuming you followed the instructions in [_Manual Integration_](https:\/\/pytest.org\/latest\/goodpractices.html#manual-integration) highlighted above, your codebase should now contain a `PyTest.run_tests()` method. Modify this method to resemble:\r\n\r\n    class PyTest(TestCommand):\r\n                 .\r\n                 .\r\n                 .\r\n        def run_tests(self):\r\n            # Import the public &quot;pytest&quot; package *BEFORE* the private &quot;_pytest&quot;\r\n            # package. While importation order is typically ignorable, imports can\r\n            # technically have side effects. Tragicomically, that is the case here.\r\n            # Importing the public &quot;pytest&quot; package establishes runtime\r\n            # configuration required by submodules of the private &quot;_pytest&quot; package.\r\n            # The former *MUST* always be imported before the latter. Failing to do\r\n            # so raises obtuse exceptions at runtime... which is bad.\r\n            import pytest\r\n            from _pytest.capture import CaptureManager, FDCapture, MultiCapture\r\n    \r\n            # If the private method to be monkey-patched no longer exists, py.test\r\n            # is either broken or unsupported. In either case, raise an exception.\r\n            if not hasattr(CaptureManager, &#39;_getcapture&#39;):\r\n                from distutils.errors import DistutilsClassError\r\n                raise DistutilsClassError(\r\n                    &#39;Class &quot;pytest.capture.CaptureManager&quot; method _getcapture() &#39;\r\n                    &#39;not found. The current version of py.test is either &#39;\r\n                    &#39;broken (unlikely) or unsupported (likely).&#39;\r\n                )\r\n    \r\n            # Old method to be monkey-patched.\r\n            _getcapture_old = CaptureManager._getcapture\r\n    \r\n            # New method applying this monkey-patch. Note the use of:\r\n            #\r\n            # * &quot;out=False&quot;, *NOT* capturing stdout.\r\n            # * &quot;err=True&quot;, capturing stderr.\r\n            def _getcapture_new(self, method):\r\n                if method == &quot;no&quot;:\r\n                    return MultiCapture(\r\n                        out=False, err=True, in_=False, Capture=FDCapture)\r\n                else:\r\n                    return _getcapture_old(self, method)\r\n    \r\n            # Replace the old with the new method.\r\n            CaptureManager._getcapture = _getcapture_new\r\n    \r\n            # Run py.test with all passed arguments.\r\n            errno = pytest.main(self.pytest_args)\r\n            sys.exit(errno)\r\n\r\nTo enable this monkey-patch, run py.test as follows:\r\n\r\n    python setup.py test -a &quot;-s&quot;\r\n\r\nStderr but _not_ stdout will now be captured. Nifty!\r\n\r\nExtending the above monkey-patch to tee stdout and stderr is left as an exercise to the reader with a barrel-full of free time.","body":"<p>In an <a href=\"https:\/\/stackoverflow.com\/questions\/14405063\/how-can-i-see-normal-print-output-created-during-pytest-run#comment47203398_14414325\">upvoted comment<\/a> to the <a href=\"https:\/\/stackoverflow.com\/a\/14414325\/2809027\">accepted answer<\/a>, <a href=\"https:\/\/stackoverflow.com\/users\/1741414\/joe\">Joe<\/a> asks:<\/p>\n\n<blockquote>\n  <p>Is there any way to print to the console <em>AND<\/em> capture the output so that it shows in the junit report?<\/p>\n<\/blockquote>\n\n<p>In UNIX, this is commonly referred to as <a href=\"http:\/\/linux.die.net\/man\/1\/tee\" rel=\"noreferrer\">teeing<\/a>. Ideally, teeing rather than capturing would be the py.test default. Non-ideally, neither py.test nor any existing third-party py.test plugin (...<em>that I know of, anyway<\/em>) supports teeing \u2013 despite Python trivially supporting teeing <a href=\"http:\/\/shallowsky.com\/blog\/programming\/python-tee.html\" rel=\"noreferrer\">out-of-the-box<\/a>.<\/p>\n\n<p>Monkey-patching py.test to do <em>anything<\/em> unsupported is non-trivial. Why? Because:<\/p>\n\n<ul>\n<li>Most py.test functionality is locked behind a private <code>_pytest<\/code> package <em>not<\/em> intended to be externally imported. Attempting to do so without knowing what you're doing typically results in the public <code>pytest<\/code> package raising obscure exceptions at runtime. <sup><em>Thanks alot, py.test. Really robust architecture you got there.<\/em><\/sup><\/li>\n<li>Even when you <em>do<\/em> figure out how to monkey-patch the private <code>_pytest<\/code> API in a safe manner, you have to do so <em>before<\/em> running the public <code>pytest<\/code> package run by the external <code>py.test<\/code> command. You <em>cannot<\/em> do this in a plugin (e.g., a top-level <code>conftest<\/code> module in your test suite). By the time py.test lazily gets around to dynamically importing your plugin, any py.test class you wanted to monkey-patch has long since been instantiated \u2013 and you do <em>not<\/em> have access to that instance. This implies that, if you want your monkey-patch to be meaningfully applied, you can no longer safely run the external <code>py.test<\/code> command. Instead, you have to wrap the running of that command with a custom setuptools <code>test<\/code> command that (in order):\n\n<ol>\n<li>Monkey-patches the private <code>_pytest<\/code> API.<\/li>\n<li>Calls the public <code>pytest.main()<\/code> function to run the <code>py.test<\/code> command.<\/li>\n<\/ol><\/li>\n<\/ul>\n\n<p>This answer monkey-patches py.test's <code>-s<\/code> and <code>--capture=no<\/code> options to capture stderr but <em>not<\/em> stdout. By default, these options capture neither stderr nor stdout. This isn't quite teeing, of course. But every great journey begins with a tedious prequel everyone forgets in five years.<\/p>\n\n<p>Why do this? I shall now tell you. My py.test-driven test suite contains slow functional tests. Displaying the stdout of these tests is helpful and reassuring, preventing <a href=\"https:\/\/stackoverflow.com\/users\/2809027\/cecil-curry\">leycec<\/a> from reaching for <code>killall -9 py.test<\/code> when yet another long-running functional test fails to do anything for weeks on end. Displaying the stderr of these tests, however, prevents py.test from reporting exception tracebacks on test failures. Which is completely unhelpful. Hence, we coerce py.test to capture stderr but <em>not<\/em> stdout.<\/p>\n\n<p>Before we get to it, this answer assumes you already have a custom setuptools <code>test<\/code> command invoking py.test. If you don't, see the <a href=\"https:\/\/pytest.org\/latest\/goodpractices.html#manual-integration\" rel=\"noreferrer\"><em>Manual Integration<\/em><\/a> subsection of py.test's well-written <a href=\"https:\/\/pytest.org\/latest\/goodpractices.html\" rel=\"noreferrer\"><em>Good Practices<\/em><\/a> page.<\/p>\n\n<p>Do <em>not<\/em> install <a href=\"http:\/\/pypi.python.org\/pypi\/pytest-runner\" rel=\"noreferrer\">pytest-runner<\/a>, a third-party setuptools plugin providing a custom setuptools <code>test<\/code> command also invoking py.test. If pytest-runner is already installed, you'll probably need to uninstall that pip3 package and then adopt the manual approach linked to above.<\/p>\n\n<p>Assuming you followed the instructions in <a href=\"https:\/\/pytest.org\/latest\/goodpractices.html#manual-integration\" rel=\"noreferrer\"><em>Manual Integration<\/em><\/a> highlighted above, your codebase should now contain a <code>PyTest.run_tests()<\/code> method. Modify this method to resemble:<\/p>\n\n<pre><code>class PyTest(TestCommand):\n             .\n             .\n             .\n    def run_tests(self):\n        # Import the public \"pytest\" package *BEFORE* the private \"_pytest\"\n        # package. While importation order is typically ignorable, imports can\n        # technically have side effects. Tragicomically, that is the case here.\n        # Importing the public \"pytest\" package establishes runtime\n        # configuration required by submodules of the private \"_pytest\" package.\n        # The former *MUST* always be imported before the latter. Failing to do\n        # so raises obtuse exceptions at runtime... which is bad.\n        import pytest\n        from _pytest.capture import CaptureManager, FDCapture, MultiCapture\n\n        # If the private method to be monkey-patched no longer exists, py.test\n        # is either broken or unsupported. In either case, raise an exception.\n        if not hasattr(CaptureManager, '_getcapture'):\n            from distutils.errors import DistutilsClassError\n            raise DistutilsClassError(\n                'Class \"pytest.capture.CaptureManager\" method _getcapture() '\n                'not found. The current version of py.test is either '\n                'broken (unlikely) or unsupported (likely).'\n            )\n\n        # Old method to be monkey-patched.\n        _getcapture_old = CaptureManager._getcapture\n\n        # New method applying this monkey-patch. Note the use of:\n        #\n        # * \"out=False\", *NOT* capturing stdout.\n        # * \"err=True\", capturing stderr.\n        def _getcapture_new(self, method):\n            if method == \"no\":\n                return MultiCapture(\n                    out=False, err=True, in_=False, Capture=FDCapture)\n            else:\n                return _getcapture_old(self, method)\n\n        # Replace the old with the new method.\n        CaptureManager._getcapture = _getcapture_new\n\n        # Run py.test with all passed arguments.\n        errno = pytest.main(self.pytest_args)\n        sys.exit(errno)\n<\/code><\/pre>\n\n<p>To enable this monkey-patch, run py.test as follows:<\/p>\n\n<pre><code>python setup.py test -a \"-s\"\n<\/code><\/pre>\n\n<p>Stderr but <em>not<\/em> stdout will now be captured. Nifty!<\/p>\n\n<p>Extending the above monkey-patch to tee stdout and stderr is left as an exercise to the reader with a barrel-full of free time.<\/p>\n"},{"owner":{"account_id":44762,"reputation":331639,"user_id":131527,"user_type":"registered","accept_rate":83,"profile_image":"https:\/\/www.gravatar.com\/avatar\/c2618d986361c695497c1a875ea8da01?s=256&d=identicon&r=PG","display_name":"ghostdog74","link":"https:\/\/stackoverflow.com\/users\/131527\/ghostdog74"},"is_accepted":false,"score":61,"last_activity_date":1368844835,"last_edit_date":1368844835.0,"creation_date":1248156123,"answer_id":1157498,"question_id":1059559,"content_license":"CC BY-SA 3.0","body_markdown":"Another way, without regex\r\n\r\n    import string\r\n    punc = string.punctuation\r\n    thestring = &quot;Hey, you - what are you doing here!?&quot;\r\n    s = list(thestring)\r\n    &#39;&#39;.join([o for o in s if not o in punc]).split()","body":"<p>Another way, without regex<\/p>\n\n<pre><code>import string\npunc = string.punctuation\nthestring = \"Hey, you - what are you doing here!?\"\ns = list(thestring)\n''.join([o for o in s if not o in punc]).split()\n<\/code><\/pre>\n"},{"owner":{"account_id":76456,"reputation":28577,"user_id":218857,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/d7bb7dc1a88a8cb1f8025ebec86b2db1?s=256&d=identicon&r=PG","display_name":"Sandeep","link":"https:\/\/stackoverflow.com\/users\/218857\/sandeep"},"is_accepted":false,"score":61,"last_activity_date":1523353210,"last_edit_date":1523353210.0,"creation_date":1458347763,"answer_id":36096474,"question_id":23842713,"content_license":"CC BY-SA 3.0","body_markdown":"Install prerequisites.\r\n\r\n    sudo apt-get install python3 python3-pip virtualenvwrapper\r\n\r\nCreate a Python3 based virtual environment. Optionally enable `--system-site-packages` flag.\r\n\r\n    mkvirtualenv -p \/usr\/bin\/python3 &lt;venv-name&gt;\r\n\r\nSet into the virtual environment.\r\n\r\n    workon &lt;venv-name&gt;\r\n\r\nInstall other requirements using `pip` package manager.\r\n\r\n    pip install -r requirements.txt\r\n    pip install &lt;package_name&gt;\r\n\r\n----------\r\nWhen working on multiple python projects simultaneously it is usually recommended to install common packages like `pdbpp` globally and then reuse them in virtualenvs.\r\n\r\nUsing this technique saves a lot of time spent on fetching packages and installing them, apart from consuming minimal disk space and network bandwidth.\r\n\r\n    sudo -H pip3 -v install pdbpp\r\n    mkvirtualenv -p $(which python3) --system-site-packages &lt;venv-name&gt;\r\n\r\n\r\n----------\r\n\r\nDjango specific instructions\r\n----------------------------\r\nIf there are a lot of system wide python packages then it is recommended to not use `--system-site-packages` flag especially during development since I have noticed that it slows down Django startup a lot. I presume Django environment initialisation is manually scanning and appending all site packages from the system path which might be the reason. Even `python manage.py shell` becomes very slow.\r\n\r\nHaving said that experiment which option works better. Might be safe to just skip `--system-site-packages` flag for Django projects.","body":"<p>Install prerequisites.<\/p>\n\n<pre><code>sudo apt-get install python3 python3-pip virtualenvwrapper\n<\/code><\/pre>\n\n<p>Create a Python3 based virtual environment. Optionally enable <code>--system-site-packages<\/code> flag.<\/p>\n\n<pre><code>mkvirtualenv -p \/usr\/bin\/python3 &lt;venv-name&gt;\n<\/code><\/pre>\n\n<p>Set into the virtual environment.<\/p>\n\n<pre><code>workon &lt;venv-name&gt;\n<\/code><\/pre>\n\n<p>Install other requirements using <code>pip<\/code> package manager.<\/p>\n\n<pre><code>pip install -r requirements.txt\npip install &lt;package_name&gt;\n<\/code><\/pre>\n\n<hr>\n\n<p>When working on multiple python projects simultaneously it is usually recommended to install common packages like <code>pdbpp<\/code> globally and then reuse them in virtualenvs.<\/p>\n\n<p>Using this technique saves a lot of time spent on fetching packages and installing them, apart from consuming minimal disk space and network bandwidth.<\/p>\n\n<pre><code>sudo -H pip3 -v install pdbpp\nmkvirtualenv -p $(which python3) --system-site-packages &lt;venv-name&gt;\n<\/code><\/pre>\n\n<hr>\n\n<h2>Django specific instructions<\/h2>\n\n<p>If there are a lot of system wide python packages then it is recommended to not use <code>--system-site-packages<\/code> flag especially during development since I have noticed that it slows down Django startup a lot. I presume Django environment initialisation is manually scanning and appending all site packages from the system path which might be the reason. Even <code>python manage.py shell<\/code> becomes very slow.<\/p>\n\n<p>Having said that experiment which option works better. Might be safe to just skip <code>--system-site-packages<\/code> flag for Django projects.<\/p>\n"},{"owner":{"account_id":16764575,"reputation":3868,"user_id":12118546,"user_type":"registered","profile_image":"https:\/\/lh5.googleusercontent.com\/-Yr03fafHtWg\/AAAAAAAAAAI\/AAAAAAAAAAA\/ACHi3rfc1mV5hNznH-F703LCwcqHTXsucg\/photo.jpg?sz=256","display_name":"Roman Pavelka","link":"https:\/\/stackoverflow.com\/users\/12118546\/roman-pavelka"},"is_accepted":false,"score":61,"last_activity_date":1629375898,"last_edit_date":1629375898.0,"creation_date":1597833445,"answer_id":63485151,"question_id":699866,"content_license":"CC BY-SA 4.0","body_markdown":"I am surprised there is no mention of a nice way to accomplish this using formatting strings that are supported in Python 3.6 and higher. TLDR:\r\n\r\n```\r\n&gt;&gt;&gt; number = 1\r\n&gt;&gt;&gt; f&#39;0b{number:08b}&#39;\r\n&#39;0b00000001&#39;\r\n```\r\n\r\n# Longer story\r\n\r\nThis is functionality of formatting strings available from Python 3.6:\r\n\r\n```\r\n&gt;&gt;&gt; x, y, z = 1, 2, 3\r\n&gt;&gt;&gt; f&#39;{x} {y} {2*z}&#39;\r\n&#39;1 2 6&#39;\r\n```\r\n\r\nYou can request binary as well:\r\n```\r\n&gt;&gt;&gt; f&#39;{z:b}&#39;\r\n&#39;11&#39;\r\n```\r\nSpecify the width:\r\n```\r\n&gt;&gt;&gt; f&#39;{z:8b}&#39;\r\n&#39;      11&#39;\r\n```\r\nRequest zero padding:\r\n```\r\nf&#39;{z:08b}&#39;\r\n&#39;00000011&#39;\r\n```\r\nAnd add common prefix to signify binary number:\r\n```\r\n&gt;&gt;&gt; f&#39;0b{z:08b}&#39;\r\n&#39;0b00000011&#39;\r\n```\r\n\r\nYou can also let Python add the prefix for you but I do not like it so much as the version above because you have to take the prefix into width consideration:\r\n\r\n```\r\n&gt;&gt;&gt; f&#39;{z:#010b}&#39;\r\n&#39;0b00000011&#39;\r\n```\r\n\r\nMore info is available in official documentation on [Formatted string literals](https:\/\/docs.python.org\/3\/reference\/lexical_analysis.html#f-strings) and [Format Specification Mini-Language](https:\/\/docs.python.org\/3\/library\/string.html#format-specification-mini-language).","body":"<p>I am surprised there is no mention of a nice way to accomplish this using formatting strings that are supported in Python 3.6 and higher. TLDR:<\/p>\n<pre><code>&gt;&gt;&gt; number = 1\n&gt;&gt;&gt; f'0b{number:08b}'\n'0b00000001'\n<\/code><\/pre>\n<h1>Longer story<\/h1>\n<p>This is functionality of formatting strings available from Python 3.6:<\/p>\n<pre><code>&gt;&gt;&gt; x, y, z = 1, 2, 3\n&gt;&gt;&gt; f'{x} {y} {2*z}'\n'1 2 6'\n<\/code><\/pre>\n<p>You can request binary as well:<\/p>\n<pre><code>&gt;&gt;&gt; f'{z:b}'\n'11'\n<\/code><\/pre>\n<p>Specify the width:<\/p>\n<pre><code>&gt;&gt;&gt; f'{z:8b}'\n'      11'\n<\/code><\/pre>\n<p>Request zero padding:<\/p>\n<pre><code>f'{z:08b}'\n'00000011'\n<\/code><\/pre>\n<p>And add common prefix to signify binary number:<\/p>\n<pre><code>&gt;&gt;&gt; f'0b{z:08b}'\n'0b00000011'\n<\/code><\/pre>\n<p>You can also let Python add the prefix for you but I do not like it so much as the version above because you have to take the prefix into width consideration:<\/p>\n<pre><code>&gt;&gt;&gt; f'{z:#010b}'\n'0b00000011'\n<\/code><\/pre>\n<p>More info is available in official documentation on <a href=\"https:\/\/docs.python.org\/3\/reference\/lexical_analysis.html#f-strings\" rel=\"noreferrer\">Formatted string literals<\/a> and <a href=\"https:\/\/docs.python.org\/3\/library\/string.html#format-specification-mini-language\" rel=\"noreferrer\">Format Specification Mini-Language<\/a>.<\/p>\n"},{"owner":{"account_id":851,"reputation":1,"user_id":1114,"user_type":"registered","accept_rate":69,"profile_image":"https:\/\/i.stack.imgur.com\/FFE8V.gif?s=256&g=1","display_name":"Jeremy","link":"https:\/\/stackoverflow.com\/users\/1114\/jeremy"},"is_accepted":false,"score":60,"last_activity_date":1375743784,"last_edit_date":1375743784.0,"creation_date":1226360873,"answer_id":279592,"question_id":279561,"content_license":"CC BY-SA 3.0","body_markdown":"Other answers have demonstrated the way you should do this. Here&#39;s a way you shouldn&#39;t:\r\n\r\n    &gt;&gt;&gt; def foo(counter=[0]):\r\n    ...   counter[0] += 1\r\n    ...   print(&quot;Counter is %i.&quot; % counter[0]);\r\n    ... \r\n    &gt;&gt;&gt; foo()\r\n    Counter is 1.\r\n    &gt;&gt;&gt; foo()\r\n    Counter is 2.\r\n    &gt;&gt;&gt; \r\n\r\nDefault values are initialized only when the function is first evaluated, not each time it is executed, so you can use a list or any other mutable object to store static values.\r\n","body":"<p>Other answers have demonstrated the way you should do this. Here's a way you shouldn't:<\/p>\n\n<pre><code>&gt;&gt;&gt; def foo(counter=[0]):\n...   counter[0] += 1\n...   print(\"Counter is %i.\" % counter[0]);\n... \n&gt;&gt;&gt; foo()\nCounter is 1.\n&gt;&gt;&gt; foo()\nCounter is 2.\n&gt;&gt;&gt; \n<\/code><\/pre>\n\n<p>Default values are initialized only when the function is first evaluated, not each time it is executed, so you can use a list or any other mutable object to store static values.<\/p>\n"},{"owner":{"account_id":1575197,"reputation":29871,"user_id":1461850,"user_type":"registered","accept_rate":76,"profile_image":"https:\/\/www.gravatar.com\/avatar\/7d7a8cd7ff08bbae37ace18cfa057c5b?s=256&d=identicon&r=PG","display_name":"Lee","link":"https:\/\/stackoverflow.com\/users\/1461850\/lee"},"is_accepted":false,"score":60,"last_activity_date":1515347865,"last_edit_date":1515347865.0,"creation_date":1431430664,"answer_id":30189734,"question_id":6081008,"content_license":"CC BY-SA 3.0","body_markdown":"[`tofile`][1] is a convenient function to do this:\r\n\r\n\r\n    import numpy as np\r\n    a = np.asarray([ [1,2,3], [4,5,6], [7,8,9] ])\r\n    a.tofile(&#39;foo.csv&#39;,sep=&#39;,&#39;,format=&#39;%10.5f&#39;)\r\n\r\nThe man page has some useful notes:\r\n\r\n&gt; This is a convenience function for quick storage of array data.\r\n&gt; Information on endianness and precision is lost, so this method is not\r\n&gt; a good choice for files intended to archive data or transport data\r\n&gt; between machines with different endianness. Some of these problems can\r\n&gt; be overcome by outputting the data as text files, at the expense of\r\n&gt; speed and file size.\r\n\r\n\r\nNote. This function does not produce multi-line csv files, it saves everything to one line.\r\n\r\n  [1]: http:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.ndarray.tofile.html","body":"<p><a href=\"http:\/\/docs.scipy.org\/doc\/numpy\/reference\/generated\/numpy.ndarray.tofile.html\" rel=\"noreferrer\"><code>tofile<\/code><\/a> is a convenient function to do this:<\/p>\n\n<pre><code>import numpy as np\na = np.asarray([ [1,2,3], [4,5,6], [7,8,9] ])\na.tofile('foo.csv',sep=',',format='%10.5f')\n<\/code><\/pre>\n\n<p>The man page has some useful notes:<\/p>\n\n<blockquote>\n  <p>This is a convenience function for quick storage of array data.\n  Information on endianness and precision is lost, so this method is not\n  a good choice for files intended to archive data or transport data\n  between machines with different endianness. Some of these problems can\n  be overcome by outputting the data as text files, at the expense of\n  speed and file size.<\/p>\n<\/blockquote>\n\n<p>Note. This function does not produce multi-line csv files, it saves everything to one line.<\/p>\n"},{"owner":{"account_id":240925,"reputation":1748,"user_id":511436,"user_type":"registered","accept_rate":47,"profile_image":"https:\/\/i.stack.imgur.com\/8a9Zg.jpg?s=256&g=1","display_name":"Davy","link":"https:\/\/stackoverflow.com\/users\/511436\/davy"},"is_accepted":false,"score":60,"last_activity_date":1478154018,"last_edit_date":null,"creation_date":1478154018,"answer_id":40395012,"question_id":19548957,"content_license":"CC BY-SA 3.0","body_markdown":"If you want to reinstall packages specified in a requirements.txt file, without upgrading, so just reinstall the specific versions specified in the requirements.txt file:\r\n\r\n    pip install -r requirements.txt --ignore-installed\r\n","body":"<p>If you want to reinstall packages specified in a requirements.txt file, without upgrading, so just reinstall the specific versions specified in the requirements.txt file:<\/p>\n\n<pre><code>pip install -r requirements.txt --ignore-installed\n<\/code><\/pre>\n"},{"owner":{"account_id":327694,"reputation":6694,"user_id":650222,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/1b1909fd81e76da1942615e3c49f7b32?s=256&d=identicon&r=PG","display_name":"coldfix","link":"https:\/\/stackoverflow.com\/users\/650222\/coldfix"},"is_accepted":false,"score":60,"last_activity_date":1679772433,"last_edit_date":1679772433.0,"creation_date":1550889596,"answer_id":54837707,"question_id":1854,"content_license":"CC BY-SA 4.0","body_markdown":"I started a bit more systematic listing of what values you can expect using the various modules:\r\n\r\n\r\nLinux (64 bit) + [WSL][1]\r\n===================\r\n\r\n```lang-none\r\n                            x86_64            aarch64\r\n                            ------            -------\r\nos.name                     posix             posix\r\nsys.platform                linux             linux\r\nplatform.system()           Linux             Linux\r\nsysconfig.get_platform()    linux-x86_64      linux-aarch64\r\nplatform.machine()          x86_64            aarch64\r\nplatform.architecture()     (&#39;64bit&#39;, &#39;&#39;)     (&#39;64bit&#39;, &#39;ELF&#39;)\r\n```\r\n\r\n- I tried with [Arch Linux][2] and [Linux Mint][3], but I got the same results\r\n- on Python&amp;nbsp;2, `sys.platform` is suffixed by the kernel version, e.g., `linux2`, and everything else stays identical\r\n- the same output on [Windows Subsystem for Linux][1] (I tried with [Ubuntu&amp;nbsp;18.04 (Bionic Beaver)][4] LTS), except `platform.architecture() = (&#39;64bit&#39;, &#39;ELF&#39;)`\r\n\r\n\r\nWindows (64 bit)\r\n===============\r\n\r\n(with 32-bit column running in the 32-bit subsystem)\r\n\r\n\r\n```lang-none\r\nOfficial Python installer   64 bit                    32 bit\r\n-------------------------   -----                     -----\r\nos.name                     nt                        nt\r\nsys.platform                win32                     win32\r\nplatform.system()           Windows                   Windows\r\nsysconfig.get_platform()    win-amd64                 win32\r\nplatform.machine()          AMD64                     AMD64\r\nplatform.architecture()     (&#39;64bit&#39;, &#39;WindowsPE&#39;)    (&#39;64bit&#39;, &#39;WindowsPE&#39;)\r\n\r\nmsys2                       64 bit                     32 bit\r\n-----                       -----                     -----\r\nos.name                     posix                     posix\r\nsys.platform                msys                      msys\r\nplatform.system()           MSYS_NT-10.0              MSYS_NT-10.0-WOW\r\nsysconfig.get_platform()    msys-2.11.2-x86_64        msys-2.11.2-i686\r\nplatform.machine()          x86_64                    i686\r\nplatform.architecture()     (&#39;64bit&#39;, &#39;WindowsPE&#39;)    (&#39;32bit&#39;, &#39;WindowsPE&#39;)\r\n\r\nmsys2                       mingw-w64-x86_64-python3  mingw-w64-i686-python3\r\n-----                       ------------------------  ----------------------\r\nos.name                     nt                        nt\r\nsys.platform                win32                     win32\r\nplatform.system()           Windows                   Windows\r\nsysconfig.get_platform()    mingw                     mingw\r\nplatform.machine()          AMD64                     AMD64\r\nplatform.architecture()     (&#39;64bit&#39;, &#39;WindowsPE&#39;)    (&#39;32bit&#39;, &#39;WindowsPE&#39;)\r\n\r\nCygwin                      64 bit                    32 bit\r\n------                      -----                     -----\r\nos.name                     posix                     posix\r\nsys.platform                cygwin                    cygwin\r\nplatform.system()           CYGWIN_NT-10.0            CYGWIN_NT-10.0-WOW\r\nsysconfig.get_platform()    cygwin-3.0.1-x86_64       cygwin-3.0.1-i686\r\nplatform.machine()          x86_64                    i686\r\nplatform.architecture()     (&#39;64bit&#39;, &#39;WindowsPE&#39;)    (&#39;32bit&#39;, &#39;WindowsPE&#39;)\r\n```\r\n\r\nSome remarks:\r\n\r\n- there is also `distutils.util.get_platform()` which is identical to `sysconfig.get_platform\r\n- [Anaconda][5] on Windows is the same as the official Python Windows installer\r\n- I don&#39;t have a Mac nor a true 32-bit system and was not motivated to do it online\r\n\r\nTo compare with your system, simply run this script:\r\n\r\n```\r\nfrom __future__ import print_function\r\nimport os\r\nimport sys\r\nimport platform\r\nimport sysconfig\r\n\r\nprint(&quot;os.name                      &quot;,  os.name)\r\nprint(&quot;sys.platform                 &quot;,  sys.platform)\r\nprint(&quot;platform.system()            &quot;,  platform.system())\r\nprint(&quot;sysconfig.get_platform()     &quot;,  sysconfig.get_platform())\r\nprint(&quot;platform.machine()           &quot;,  platform.machine())\r\nprint(&quot;platform.architecture()      &quot;,  platform.architecture())\r\n```\r\n\r\n  [1]: https:\/\/en.wikipedia.org\/wiki\/Windows_Subsystem_for_Linux\r\n  [2]: https:\/\/en.wikipedia.org\/wiki\/Arch_Linux\r\n  [3]: https:\/\/en.wikipedia.org\/wiki\/Linux_Mint\r\n  [4]: https:\/\/en.wikipedia.org\/wiki\/Ubuntu_version_history#Ubuntu_18.04_LTS_.28Bionic_Beaver.29\r\n  [5]: https:\/\/en.wikipedia.org\/wiki\/Anaconda_(Python_distribution)\r\n","body":"<p>I started a bit more systematic listing of what values you can expect using the various modules:<\/p>\n<h1>Linux (64 bit) + <a href=\"https:\/\/en.wikipedia.org\/wiki\/Windows_Subsystem_for_Linux\" rel=\"noreferrer\">WSL<\/a><\/h1>\n<pre class=\"lang-none prettyprint-override\"><code>                            x86_64            aarch64\n                            ------            -------\nos.name                     posix             posix\nsys.platform                linux             linux\nplatform.system()           Linux             Linux\nsysconfig.get_platform()    linux-x86_64      linux-aarch64\nplatform.machine()          x86_64            aarch64\nplatform.architecture()     ('64bit', '')     ('64bit', 'ELF')\n<\/code><\/pre>\n<ul>\n<li>I tried with <a href=\"https:\/\/en.wikipedia.org\/wiki\/Arch_Linux\" rel=\"noreferrer\">Arch Linux<\/a> and <a href=\"https:\/\/en.wikipedia.org\/wiki\/Linux_Mint\" rel=\"noreferrer\">Linux Mint<\/a>, but I got the same results<\/li>\n<li>on Python\u00a02, <code>sys.platform<\/code> is suffixed by the kernel version, e.g., <code>linux2<\/code>, and everything else stays identical<\/li>\n<li>the same output on <a href=\"https:\/\/en.wikipedia.org\/wiki\/Windows_Subsystem_for_Linux\" rel=\"noreferrer\">Windows Subsystem for Linux<\/a> (I tried with <a href=\"https:\/\/en.wikipedia.org\/wiki\/Ubuntu_version_history#Ubuntu_18.04_LTS_.28Bionic_Beaver.29\" rel=\"noreferrer\">Ubuntu\u00a018.04 (Bionic Beaver)<\/a> LTS), except <code>platform.architecture() = ('64bit', 'ELF')<\/code><\/li>\n<\/ul>\n<h1>Windows (64 bit)<\/h1>\n<p>(with 32-bit column running in the 32-bit subsystem)<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>Official Python installer   64 bit                    32 bit\n-------------------------   -----                     -----\nos.name                     nt                        nt\nsys.platform                win32                     win32\nplatform.system()           Windows                   Windows\nsysconfig.get_platform()    win-amd64                 win32\nplatform.machine()          AMD64                     AMD64\nplatform.architecture()     ('64bit', 'WindowsPE')    ('64bit', 'WindowsPE')\n\nmsys2                       64 bit                     32 bit\n-----                       -----                     -----\nos.name                     posix                     posix\nsys.platform                msys                      msys\nplatform.system()           MSYS_NT-10.0              MSYS_NT-10.0-WOW\nsysconfig.get_platform()    msys-2.11.2-x86_64        msys-2.11.2-i686\nplatform.machine()          x86_64                    i686\nplatform.architecture()     ('64bit', 'WindowsPE')    ('32bit', 'WindowsPE')\n\nmsys2                       mingw-w64-x86_64-python3  mingw-w64-i686-python3\n-----                       ------------------------  ----------------------\nos.name                     nt                        nt\nsys.platform                win32                     win32\nplatform.system()           Windows                   Windows\nsysconfig.get_platform()    mingw                     mingw\nplatform.machine()          AMD64                     AMD64\nplatform.architecture()     ('64bit', 'WindowsPE')    ('32bit', 'WindowsPE')\n\nCygwin                      64 bit                    32 bit\n------                      -----                     -----\nos.name                     posix                     posix\nsys.platform                cygwin                    cygwin\nplatform.system()           CYGWIN_NT-10.0            CYGWIN_NT-10.0-WOW\nsysconfig.get_platform()    cygwin-3.0.1-x86_64       cygwin-3.0.1-i686\nplatform.machine()          x86_64                    i686\nplatform.architecture()     ('64bit', 'WindowsPE')    ('32bit', 'WindowsPE')\n<\/code><\/pre>\n<p>Some remarks:<\/p>\n<ul>\n<li>there is also <code>distutils.util.get_platform()<\/code> which is identical to `sysconfig.get_platform<\/li>\n<li><a href=\"https:\/\/en.wikipedia.org\/wiki\/Anaconda_(Python_distribution)\" rel=\"noreferrer\">Anaconda<\/a> on Windows is the same as the official Python Windows installer<\/li>\n<li>I don't have a Mac nor a true 32-bit system and was not motivated to do it online<\/li>\n<\/ul>\n<p>To compare with your system, simply run this script:<\/p>\n<pre><code>from __future__ import print_function\nimport os\nimport sys\nimport platform\nimport sysconfig\n\nprint(&quot;os.name                      &quot;,  os.name)\nprint(&quot;sys.platform                 &quot;,  sys.platform)\nprint(&quot;platform.system()            &quot;,  platform.system())\nprint(&quot;sysconfig.get_platform()     &quot;,  sysconfig.get_platform())\nprint(&quot;platform.machine()           &quot;,  platform.machine())\nprint(&quot;platform.architecture()      &quot;,  platform.architecture())\n<\/code><\/pre>\n"},{"owner":{"account_id":56249,"reputation":23717,"user_id":168465,"user_type":"registered","accept_rate":87,"profile_image":"https:\/\/www.gravatar.com\/avatar\/f9a38df7ddf75a46b36c6a6ef5f98381?s=256&d=identicon&r=PG","display_name":"kriss","link":"https:\/\/stackoverflow.com\/users\/168465\/kriss"},"is_accepted":false,"score":57,"last_activity_date":1471569146,"last_edit_date":1471569146.0,"creation_date":1390582562,"answer_id":21338152,"question_id":1769403,"content_license":"CC BY-SA 3.0","body_markdown":"On the basis that a good sample is sometimes better than a long discourse I will write two functions using all python variable argument passing facilities (both positional and named arguments). You should easily be able to see what it does by yourself:\r\n\r\n    def f(a = 0, *args, **kwargs):\r\n        print(&quot;Received by f(a, *args, **kwargs)&quot;)\r\n        print(&quot;=&gt; f(a=%s, args=%s, kwargs=%s&quot; % (a, args, kwargs))\r\n        print(&quot;Calling g(10, 11, 12, *args, d = 13, e = 14, **kwargs)&quot;)\r\n        g(10, 11, 12, *args, d = 13, e = 14, **kwargs)\r\n     \r\n    def g(f, g = 0, *args, **kwargs):\r\n        print(&quot;Received by g(f, g = 0, *args, **kwargs)&quot;)\r\n        print(&quot;=&gt; g(f=%s, g=%s, args=%s, kwargs=%s)&quot; % (f, g, args, kwargs))\r\n     \r\n    print(&quot;Calling f(1, 2, 3, 4, b = 5, c = 6)&quot;)\r\n    f(1, 2, 3, 4, b = 5, c = 6)\r\n\r\nAnd here is the output:\r\n\r\n    Calling f(1, 2, 3, 4, b = 5, c = 6)\r\n    Received by f(a, *args, **kwargs) \r\n    =&gt; f(a=1, args=(2, 3, 4), kwargs={&#39;c&#39;: 6, &#39;b&#39;: 5}\r\n    Calling g(10, 11, 12, *args, d = 13, e = 14, **kwargs)\r\n    Received by g(f, g = 0, *args, **kwargs)\r\n    =&gt; g(f=10, g=11, args=(12, 2, 3, 4), kwargs={&#39;c&#39;: 6, &#39;b&#39;: 5, &#39;e&#39;: 14, &#39;d&#39;: 13})\r\n","body":"<p>On the basis that a good sample is sometimes better than a long discourse I will write two functions using all python variable argument passing facilities (both positional and named arguments). You should easily be able to see what it does by yourself:<\/p>\n\n<pre><code>def f(a = 0, *args, **kwargs):\n    print(\"Received by f(a, *args, **kwargs)\")\n    print(\"=&gt; f(a=%s, args=%s, kwargs=%s\" % (a, args, kwargs))\n    print(\"Calling g(10, 11, 12, *args, d = 13, e = 14, **kwargs)\")\n    g(10, 11, 12, *args, d = 13, e = 14, **kwargs)\n\ndef g(f, g = 0, *args, **kwargs):\n    print(\"Received by g(f, g = 0, *args, **kwargs)\")\n    print(\"=&gt; g(f=%s, g=%s, args=%s, kwargs=%s)\" % (f, g, args, kwargs))\n\nprint(\"Calling f(1, 2, 3, 4, b = 5, c = 6)\")\nf(1, 2, 3, 4, b = 5, c = 6)\n<\/code><\/pre>\n\n<p>And here is the output:<\/p>\n\n<pre><code>Calling f(1, 2, 3, 4, b = 5, c = 6)\nReceived by f(a, *args, **kwargs) \n=&gt; f(a=1, args=(2, 3, 4), kwargs={'c': 6, 'b': 5}\nCalling g(10, 11, 12, *args, d = 13, e = 14, **kwargs)\nReceived by g(f, g = 0, *args, **kwargs)\n=&gt; g(f=10, g=11, args=(12, 2, 3, 4), kwargs={'c': 6, 'b': 5, 'e': 14, 'd': 13})\n<\/code><\/pre>\n"},{"owner":{"account_id":8332072,"reputation":39579,"user_id":6260170,"user_type":"registered","accept_rate":92,"profile_image":"https:\/\/www.gravatar.com\/avatar\/9bf6decd8e2acafb6d371c2a1a6f7e1b?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"Chris_Rands","link":"https:\/\/stackoverflow.com\/users\/6260170\/chris-rands"},"is_accepted":false,"score":57,"last_activity_date":1614353705,"last_edit_date":null,"creation_date":1614353705,"answer_id":66388647,"question_id":4617034,"content_license":"CC BY-SA 4.0","body_markdown":"From Python 3.10 there is a new feature of [Parenthesized context managers][1], which permits syntax like:\r\n\r\n\r\n```\r\nwith (\r\n    open(&quot;a&quot;, &quot;w&quot;) as a,\r\n    open(&quot;b&quot;, &quot;w&quot;) as b\r\n):\r\n    do_something()\r\n```\r\n  [1]: https:\/\/docs.python.org\/3.10\/whatsnew\/3.10.html#parenthesized-context-managers","body":"<p>From Python 3.10 there is a new feature of <a href=\"https:\/\/docs.python.org\/3.10\/whatsnew\/3.10.html#parenthesized-context-managers\" rel=\"noreferrer\">Parenthesized context managers<\/a>, which permits syntax like:<\/p>\n<pre><code>with (\n    open(&quot;a&quot;, &quot;w&quot;) as a,\n    open(&quot;b&quot;, &quot;w&quot;) as b\n):\n    do_something()\n<\/code><\/pre>\n"},{"owner":{"account_id":914,"reputation":235159,"user_id":1199,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/78cb7314ef6c9ff2954f8e0d6506fc06?s=256&d=identicon&r=PG","display_name":"Blair Conrad","link":"https:\/\/stackoverflow.com\/users\/1199\/blair-conrad"},"is_accepted":false,"score":56,"last_activity_date":1220643895,"last_edit_date":1220643895.0,"creation_date":1220495150,"answer_id":43088,"question_id":42950,"content_license":"CC BY-SA 2.5","body_markdown":"EDIT: see [my other answer][1]. It has a better implementation than this one, which I leave here just in case someone&#39;s interested in seeing how one might &quot;roll your own&quot; calculator.\r\n\r\n@[John Millikin](#42997) gives a good answer, with the added complication of calculating the first day of the next month.\r\n\r\nThe following isn&#39;t particularly elegant, but to figure out the last day of the month that any given date lives in, you could try:\r\n\r\n    def last_day_of_month(date):\r\n        if date.month == 12:\r\n            return date.replace(day=31)\r\n        return date.replace(month=date.month+1, day=1) - datetime.timedelta(days=1)\r\n\r\n    &gt;&gt;&gt; last_day_of_month(datetime.date(2002, 1, 17))\r\n    datetime.date(2002, 1, 31)\r\n    &gt;&gt;&gt; last_day_of_month(datetime.date(2002, 12, 9))\r\n    datetime.date(2002, 12, 31)\r\n    &gt;&gt;&gt; last_day_of_month(datetime.date(2008, 2, 14))\r\n    datetime.date(2008, 2, 29)\r\n\r\n\r\n  [1]: \/questions\/42950\/get-last-day-of-the-month-in-python#43663","body":"<p>EDIT: see <a href=\"\/questions\/42950\/get-last-day-of-the-month-in-python#43663\">my other answer<\/a>. It has a better implementation than this one, which I leave here just in case someone's interested in seeing how one might \"roll your own\" calculator.<\/p>\n\n<p>@John Millikin gives a good answer, with the added complication of calculating the first day of the next month.<\/p>\n\n<p>The following isn't particularly elegant, but to figure out the last day of the month that any given date lives in, you could try:<\/p>\n\n<pre><code>def last_day_of_month(date):\n    if date.month == 12:\n        return date.replace(day=31)\n    return date.replace(month=date.month+1, day=1) - datetime.timedelta(days=1)\n\n&gt;&gt;&gt; last_day_of_month(datetime.date(2002, 1, 17))\ndatetime.date(2002, 1, 31)\n&gt;&gt;&gt; last_day_of_month(datetime.date(2002, 12, 9))\ndatetime.date(2002, 12, 31)\n&gt;&gt;&gt; last_day_of_month(datetime.date(2008, 2, 14))\ndatetime.date(2008, 2, 29)\n<\/code><\/pre>\n"},{"owner":{"account_id":2303904,"reputation":10114,"user_id":2223579,"user_type":"registered","accept_rate":53,"profile_image":"https:\/\/i.stack.imgur.com\/wQuP6.jpg?s=256&g=1","display_name":"BlackMamba","link":"https:\/\/stackoverflow.com\/users\/2223579\/blackmamba"},"is_accepted":false,"score":56,"last_activity_date":1510145155,"last_edit_date":1510145155.0,"creation_date":1425017827,"answer_id":28758723,"question_id":20646822,"content_license":"CC BY-SA 3.0","body_markdown":"You can use this function :\r\n\r\n&gt; `send_static_file(filename)`  \r\n&gt; Function used internally to send static\r\n&gt; files from the static folder to the browser.\r\n\r\n    app = Flask(__name__)\r\n    @app.route(&#39;\/&lt;path:path&gt;&#39;)\r\n    def static_file(path):\r\n        return app.send_static_file(path)","body":"<p>You can use this function :<\/p>\n\n<blockquote>\n  <p><code>send_static_file(filename)<\/code><br>\n  Function used internally to send static\n  files from the static folder to the browser.<\/p>\n<\/blockquote>\n\n<pre><code>app = Flask(__name__)\n@app.route('\/&lt;path:path&gt;')\ndef static_file(path):\n    return app.send_static_file(path)\n<\/code><\/pre>\n"},{"owner":{"account_id":5874700,"reputation":9994,"user_id":4625911,"user_type":"registered","accept_rate":67,"profile_image":"https:\/\/i.stack.imgur.com\/ZzXQ5.png?s=256&g=1","display_name":"nokome","link":"https:\/\/stackoverflow.com\/users\/4625911\/nokome"},"is_accepted":false,"score":56,"last_activity_date":1453087104,"last_edit_date":null,"creation_date":1453087104,"answer_id":34846776,"question_id":34819221,"content_license":"CC BY-SA 3.0","body_markdown":"This problem is due to:\r\n\r\n - an old version of pip (6.1.1) being installed for Python 2.7\r\n - multiple copies of Python 2.7 installed on the Trusty Beta image\r\n - a different location for Python 2.7 being used for `sudo`\r\n\r\nIt&#39;s all a bit complicated and better explained here https:\/\/github.com\/travis-ci\/travis-ci\/issues\/4989.\r\n\r\nMy solution was to install with user `travis` instead of `sudo`:\r\n\r\n    - pip2.7 install --upgrade --user travis pip setuptools wheel virtualenv\r\n\r\n","body":"<p>This problem is due to:<\/p>\n\n<ul>\n<li>an old version of pip (6.1.1) being installed for Python 2.7<\/li>\n<li>multiple copies of Python 2.7 installed on the Trusty Beta image<\/li>\n<li>a different location for Python 2.7 being used for <code>sudo<\/code><\/li>\n<\/ul>\n\n<p>It's all a bit complicated and better explained here <a href=\"https:\/\/github.com\/travis-ci\/travis-ci\/issues\/4989\" rel=\"noreferrer\">https:\/\/github.com\/travis-ci\/travis-ci\/issues\/4989<\/a>.<\/p>\n\n<p>My solution was to install with user <code>travis<\/code> instead of <code>sudo<\/code>:<\/p>\n\n<pre><code>- pip2.7 install --upgrade --user travis pip setuptools wheel virtualenv\n<\/code><\/pre>\n"},{"owner":{"account_id":3626802,"reputation":988,"user_id":5032513,"user_type":"registered","profile_image":"https:\/\/lh5.googleusercontent.com\/-ZYnE0hvOzVw\/AAAAAAAAAAI\/AAAAAAAAAOw\/tQD8OU85uZE\/photo.jpg?sz=256","display_name":"Naveen Agarwal","link":"https:\/\/stackoverflow.com\/users\/5032513\/naveen-agarwal"},"is_accepted":false,"score":56,"last_activity_date":1666239828,"last_edit_date":1666239828.0,"creation_date":1474481781,"answer_id":39623784,"question_id":11005457,"content_license":"CC BY-SA 4.0","body_markdown":"Simply delete the virtual environment from the system:\r\n\r\n    rm -rf venv\r\n\r\n(There&#39;s no special command for it)","body":"<p>Simply delete the virtual environment from the system:<\/p>\n<pre><code>rm -rf venv\n<\/code><\/pre>\n<p>(There's no special command for it)<\/p>\n"},{"owner":{"account_id":26364,"reputation":7936,"user_id":68534,"user_type":"registered","accept_rate":40,"profile_image":"https:\/\/www.gravatar.com\/avatar\/c7e9fe92e1fae212454418a55e1e30a7?s=256&d=identicon&r=PG","display_name":"jmoz","link":"https:\/\/stackoverflow.com\/users\/68534\/jmoz"},"is_accepted":false,"score":56,"last_activity_date":1498671113,"last_edit_date":null,"creation_date":1498671113,"answer_id":44809145,"question_id":15221473,"content_license":"CC BY-SA 3.0","body_markdown":"In my case my pip version was broken so the update by itself would not work.\r\n\r\nFix:\r\n\r\n    (inside virtualenv):easy_install -U pip","body":"<p>In my case my pip version was broken so the update by itself would not work.<\/p>\n\n<p>Fix:<\/p>\n\n<pre><code>(inside virtualenv):easy_install -U pip\n<\/code><\/pre>\n"},{"owner":{"account_id":3738526,"reputation":928,"user_id":3108856,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/jOttX.jpg?s=256&g=1","display_name":"tammoj","link":"https:\/\/stackoverflow.com\/users\/3108856\/tammoj"},"is_accepted":false,"score":56,"last_activity_date":1582586867,"last_edit_date":1582586867.0,"creation_date":1544624424,"answer_id":53745066,"question_id":12444716,"content_license":"CC BY-SA 4.0","body_markdown":"To only modify the title&#39;s font (and not the font of the axis) I used this:\r\n\r\n    import matplotlib.pyplot as plt\r\n    fig = plt.Figure()\r\n    ax = fig.add_subplot(111)\r\n    ax.set_title(&#39;My Title&#39;, fontdict={&#39;fontsize&#39;: 8, &#39;fontweight&#39;: &#39;medium&#39;})\r\n\r\nThe fontdict accepts all kwargs from [matplotlib.text.Text][1].\r\n\r\n\r\n  [1]: https:\/\/matplotlib.org\/api\/text_api.html#matplotlib.text.Text","body":"<p>To only modify the title's font (and not the font of the axis) I used this:<\/p>\n\n<pre><code>import matplotlib.pyplot as plt\nfig = plt.Figure()\nax = fig.add_subplot(111)\nax.set_title('My Title', fontdict={'fontsize': 8, 'fontweight': 'medium'})\n<\/code><\/pre>\n\n<p>The fontdict accepts all kwargs from <a href=\"https:\/\/matplotlib.org\/api\/text_api.html#matplotlib.text.Text\" rel=\"noreferrer\">matplotlib.text.Text<\/a>.<\/p>\n"},{"owner":{"account_id":11598561,"reputation":2332,"user_id":8496502,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/eZI8J.png?s=256&g=1","display_name":"Deekshith Anand","link":"https:\/\/stackoverflow.com\/users\/8496502\/deekshith-anand"},"is_accepted":false,"score":56,"last_activity_date":1646422873,"last_edit_date":1646422873.0,"creation_date":1594798960,"answer_id":62909894,"question_id":4534438,"content_license":"CC BY-SA 4.0","body_markdown":"Short answer: **You are calling a file\/directory as a function instead of real function**\r\n\r\nRead on:\r\n\r\nThis kind of error happens when you import module thinking it as function and call it.\r\nSo in python module is a .py file. Packages(directories) can also be considered as modules. \r\nLet&#39;s say I have a **create.py** file. In that file I have  a function like this:\r\n\r\n    #inside create.py\r\n    def create():\r\n      pass\r\n\r\nNow, in another code file if I do like this:\r\n    \r\n    #inside main.py file\r\n    import create\r\n    create() #here create refers to create.py , so create.create() would work here\r\nIt gives this error as am calling the create.py file as a function. \r\nso I gotta do this:\r\n\r\n    from create import create\r\n    create() #now it works.","body":"<p>Short answer: <strong>You are calling a file\/directory as a function instead of real function<\/strong><\/p>\n<p>Read on:<\/p>\n<p>This kind of error happens when you import module thinking it as function and call it.\nSo in python module is a .py file. Packages(directories) can also be considered as modules.\nLet's say I have a <strong>create.py<\/strong> file. In that file I have  a function like this:<\/p>\n<pre><code>#inside create.py\ndef create():\n  pass\n<\/code><\/pre>\n<p>Now, in another code file if I do like this:<\/p>\n<pre><code>#inside main.py file\nimport create\ncreate() #here create refers to create.py , so create.create() would work here\n<\/code><\/pre>\n<p>It gives this error as am calling the create.py file as a function.\nso I gotta do this:<\/p>\n<pre><code>from create import create\ncreate() #now it works.\n<\/code><\/pre>\n"},{"owner":{"account_id":451158,"reputation":246009,"user_id":846892,"user_type":"registered","accept_rate":88,"profile_image":"https:\/\/i.stack.imgur.com\/E9dZn.png?s=256&g=1","display_name":"Ashwini Chaudhary","link":"https:\/\/stackoverflow.com\/users\/846892\/ashwini-chaudhary"},"is_accepted":false,"score":55,"last_activity_date":1591444779,"last_edit_date":1591444779.0,"creation_date":1332542181,"answer_id":9847359,"question_id":9847213,"content_license":"CC BY-SA 4.0","body_markdown":"I solved this for a CodeChef [question][1].\r\n\r\n    import datetime\r\n    dt = &#39;21\/03\/2012&#39;\r\n    day, month, year = (int(x) for x in dt.split(&#39;\/&#39;))    \r\n    ans = datetime.date(year, month, day)\r\n    print (ans.strftime(&quot;%A&quot;))\r\n\r\n[1]: http:\/\/www.codechef.com\/TCTR2012\/problems\/NOPC10\/**","body":"<p>I solved this for a CodeChef <a href=\"http:\/\/www.codechef.com\/TCTR2012\/problems\/NOPC10\/**\" rel=\"noreferrer\">question<\/a>.<\/p>\n\n<pre><code>import datetime\ndt = '21\/03\/2012'\nday, month, year = (int(x) for x in dt.split('\/'))    \nans = datetime.date(year, month, day)\nprint (ans.strftime(\"%A\"))\n<\/code><\/pre>\n"},{"owner":{"account_id":1413145,"reputation":849,"user_id":1339358,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/566a7c78607681bd3fa2ef3fc6196d9c?s=256&d=identicon&r=PG","display_name":"fpessoa","link":"https:\/\/stackoverflow.com\/users\/1339358\/fpessoa"},"is_accepted":false,"score":55,"last_activity_date":1380110396,"last_edit_date":1495541454.0,"creation_date":1336491107,"answer_id":10501736,"question_id":2817869,"content_license":"CC BY-SA 3.0","body_markdown":"I just had this same problem, so I&#39;ll tell my story here hoping it helps someone else with the same issues and save them the couple of hours I just spent:\r\n\r\nI have mingw (g++ (GCC) 4.6.1) and python 2.7.3 in a windows 7 box and I&#39;m trying to install PyCrypto.\r\n\r\nIt all started with this error when running setup.py install: \r\n\r\n    error: Unable to find vcvarsall.bat\r\n\r\nEasily solved after googling the error by specifying mingw as the compiler of choice: \r\n\r\n    setup.py install build --compiler=mingw32\r\n\r\nThe problem is that then I got a different error: \r\n\r\n    configure: error: cannot run C compiled programs.\r\n\r\nIt turns out that my anti-virus was blocking the execution of a freshly compiled .exe. I just disabled the anti-virus &quot;resident shield&quot; and went to the next error:\r\n\r\n    cc1.exe: error: unrecognized command line option &#39;-mno-cygwin&#39; \r\n    error: command &#39;gcc&#39; failed with exit status 1\r\n\r\nThis solved it: &quot;Either install a slightly older version of MinGW, or edit distutils\\cygwinccompiler.py in your Python directory to remove all instances of -mno-cygwin.&quot; (from [here][1])\r\n\r\nNow, I can finally start working.\r\n\r\n\r\n  [1]: https:\/\/stackoverflow.com\/questions\/6034390\/compiling-with-cython-and-mingw-produces-gcc-error-unrecognized-command-line-o","body":"<p>I just had this same problem, so I'll tell my story here hoping it helps someone else with the same issues and save them the couple of hours I just spent:<\/p>\n\n<p>I have mingw (g++ (GCC) 4.6.1) and python 2.7.3 in a windows 7 box and I'm trying to install PyCrypto.<\/p>\n\n<p>It all started with this error when running setup.py install: <\/p>\n\n<pre><code>error: Unable to find vcvarsall.bat\n<\/code><\/pre>\n\n<p>Easily solved after googling the error by specifying mingw as the compiler of choice: <\/p>\n\n<pre><code>setup.py install build --compiler=mingw32\n<\/code><\/pre>\n\n<p>The problem is that then I got a different error: <\/p>\n\n<pre><code>configure: error: cannot run C compiled programs.\n<\/code><\/pre>\n\n<p>It turns out that my anti-virus was blocking the execution of a freshly compiled .exe. I just disabled the anti-virus \"resident shield\" and went to the next error:<\/p>\n\n<pre><code>cc1.exe: error: unrecognized command line option '-mno-cygwin' \nerror: command 'gcc' failed with exit status 1\n<\/code><\/pre>\n\n<p>This solved it: \"Either install a slightly older version of MinGW, or edit distutils\\cygwinccompiler.py in your Python directory to remove all instances of -mno-cygwin.\" (from <a href=\"https:\/\/stackoverflow.com\/questions\/6034390\/compiling-with-cython-and-mingw-produces-gcc-error-unrecognized-command-line-o\">here<\/a>)<\/p>\n\n<p>Now, I can finally start working.<\/p>\n"},{"owner":{"account_id":1291636,"reputation":7446,"user_id":1243636,"user_type":"registered","accept_rate":85,"profile_image":"https:\/\/www.gravatar.com\/avatar\/49f33be221bafabd5378cb0c2bdc69d6?s=256&d=identicon&r=PG","display_name":"akaRem","link":"https:\/\/stackoverflow.com\/users\/1243636\/akarem"},"is_accepted":false,"score":55,"last_activity_date":1373577899,"last_edit_date":1373577899.0,"creation_date":1373577393,"answer_id":17603667,"question_id":15112125,"content_license":"CC BY-SA 3.0","body_markdown":"The direct way to write `x or y or z == 0` is\r\n\r\n    if any(map((lambda value: value == 0), (x,y,z))):\r\n        pass # write your logic.\r\n\r\nBut I dont think, you like it. :)\r\nAnd this way is ugly.\r\n\r\nThe other way (a better) is:\r\n\r\n    0 in (x, y, z)\r\n\r\n  \r\n\r\nBTW lots of `if`s could be written as something like this\r\n\r\n    my_cases = {\r\n        0: Mylist.append(&quot;c&quot;),\r\n        1: Mylist.append(&quot;d&quot;)\r\n        # ..\r\n    }\r\n    \r\n    for key in my_cases:\r\n        if key in (x,y,z):\r\n            my_cases[key]()\r\n            break","body":"<p>The direct way to write <code>x or y or z == 0<\/code> is<\/p>\n\n<pre><code>if any(map((lambda value: value == 0), (x,y,z))):\n    pass # write your logic.\n<\/code><\/pre>\n\n<p>But I dont think, you like it. :)\nAnd this way is ugly.<\/p>\n\n<p>The other way (a better) is:<\/p>\n\n<pre><code>0 in (x, y, z)\n<\/code><\/pre>\n\n<p>BTW lots of <code>if<\/code>s could be written as something like this<\/p>\n\n<pre><code>my_cases = {\n    0: Mylist.append(\"c\"),\n    1: Mylist.append(\"d\")\n    # ..\n}\n\nfor key in my_cases:\n    if key in (x,y,z):\n        my_cases[key]()\n        break\n<\/code><\/pre>\n"},{"owner":{"account_id":2402196,"reputation":13423,"user_id":2111778,"user_type":"registered","accept_rate":80,"profile_image":"https:\/\/i.stack.imgur.com\/vP0ug.jpg?s=256&g=1","display_name":"xjcl","link":"https:\/\/stackoverflow.com\/users\/2111778\/xjcl"},"is_accepted":false,"score":55,"last_activity_date":1598560744,"last_edit_date":1598560744.0,"creation_date":1591053028,"answer_id":62142350,"question_id":7065164,"content_license":"CC BY-SA 4.0","body_markdown":"\r\n**Python 3.9 adds the [`zoneinfo`](https:\/\/docs.python.org\/3.9\/library\/zoneinfo.html) module** so now only the standard library is needed!\r\n\r\n    from zoneinfo import ZoneInfo\r\n    from datetime import datetime\r\n    unaware = datetime(2020, 10, 31, 12)\r\n\r\nAttach a timezone:\r\n\r\n    &gt;&gt;&gt; unaware.replace(tzinfo=ZoneInfo(&#39;Asia\/Tokyo&#39;))\r\n    datetime.datetime(2020, 10, 31, 12, 0, tzinfo=zoneinfo.ZoneInfo(key=&#39;Asia\/Tokyo&#39;))\r\n    &gt;&gt;&gt; str(_)\r\n    &#39;2020-10-31 12:00:00+09:00&#39;\r\n\r\nAttach the system&#39;s local timezone:\r\n\r\n    &gt;&gt;&gt; unaware.replace(tzinfo=ZoneInfo(&#39;localtime&#39;))\r\n    datetime.datetime(2020, 10, 31, 12, 0, tzinfo=zoneinfo.ZoneInfo(key=&#39;localtime&#39;))\r\n    &gt;&gt;&gt; str(_)\r\n    &#39;2020-10-31 12:00:00+01:00&#39;\r\n\r\nSubsequently it is properly converted to other timezones:\r\n\r\n    &gt;&gt;&gt; unaware.replace(tzinfo=ZoneInfo(&#39;localtime&#39;)).astimezone(ZoneInfo(&#39;Asia\/Tokyo&#39;))\r\n    datetime.datetime(2020, 10, 31, 20, 0, tzinfo=backports.zoneinfo.ZoneInfo(key=&#39;Asia\/Tokyo&#39;))\r\n    &gt;&gt;&gt; str(_)\r\n    &#39;2020-10-31 20:00:00+09:00&#39;\r\n\r\n[Wikipedia list of available time zones](https:\/\/en.wikipedia.org\/wiki\/List_of_tz_database_time_zones)\r\n\r\n----\r\n\r\n**Windows** [has no](https:\/\/docs.python.org\/3.9\/library\/zoneinfo.html#data-sources) system time zone database, so here an extra package is needed:\r\n\r\n    pip install tzdata  \r\n\r\n----\r\n\r\nThere is a backport to allow use of `zoneinfo` in **Python 3.6 to 3.8**:\r\n\r\n    pip install backports.zoneinfo\r\n\r\nThen:\r\n\r\n    from backports.zoneinfo import ZoneInfo\r\n","body":"<p><strong>Python 3.9 adds the <a href=\"https:\/\/docs.python.org\/3.9\/library\/zoneinfo.html\" rel=\"noreferrer\"><code>zoneinfo<\/code><\/a> module<\/strong> so now only the standard library is needed!<\/p>\n<pre><code>from zoneinfo import ZoneInfo\nfrom datetime import datetime\nunaware = datetime(2020, 10, 31, 12)\n<\/code><\/pre>\n<p>Attach a timezone:<\/p>\n<pre><code>&gt;&gt;&gt; unaware.replace(tzinfo=ZoneInfo('Asia\/Tokyo'))\ndatetime.datetime(2020, 10, 31, 12, 0, tzinfo=zoneinfo.ZoneInfo(key='Asia\/Tokyo'))\n&gt;&gt;&gt; str(_)\n'2020-10-31 12:00:00+09:00'\n<\/code><\/pre>\n<p>Attach the system's local timezone:<\/p>\n<pre><code>&gt;&gt;&gt; unaware.replace(tzinfo=ZoneInfo('localtime'))\ndatetime.datetime(2020, 10, 31, 12, 0, tzinfo=zoneinfo.ZoneInfo(key='localtime'))\n&gt;&gt;&gt; str(_)\n'2020-10-31 12:00:00+01:00'\n<\/code><\/pre>\n<p>Subsequently it is properly converted to other timezones:<\/p>\n<pre><code>&gt;&gt;&gt; unaware.replace(tzinfo=ZoneInfo('localtime')).astimezone(ZoneInfo('Asia\/Tokyo'))\ndatetime.datetime(2020, 10, 31, 20, 0, tzinfo=backports.zoneinfo.ZoneInfo(key='Asia\/Tokyo'))\n&gt;&gt;&gt; str(_)\n'2020-10-31 20:00:00+09:00'\n<\/code><\/pre>\n<p><a href=\"https:\/\/en.wikipedia.org\/wiki\/List_of_tz_database_time_zones\" rel=\"noreferrer\">Wikipedia list of available time zones<\/a><\/p>\n<hr \/>\n<p><strong>Windows<\/strong> <a href=\"https:\/\/docs.python.org\/3.9\/library\/zoneinfo.html#data-sources\" rel=\"noreferrer\">has no<\/a> system time zone database, so here an extra package is needed:<\/p>\n<pre><code>pip install tzdata  \n<\/code><\/pre>\n<hr \/>\n<p>There is a backport to allow use of <code>zoneinfo<\/code> in <strong>Python 3.6 to 3.8<\/strong>:<\/p>\n<pre><code>pip install backports.zoneinfo\n<\/code><\/pre>\n<p>Then:<\/p>\n<pre><code>from backports.zoneinfo import ZoneInfo\n<\/code><\/pre>\n"},{"owner":{"account_id":1322580,"reputation":2792,"user_id":1268052,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/2ff4f28cf6b7449a5a88d15042cba1b0?s=256&d=identicon&r=PG","display_name":"berniey","link":"https:\/\/stackoverflow.com\/users\/1268052\/berniey"},"is_accepted":false,"score":54,"last_activity_date":1477868373,"last_edit_date":1477868373.0,"creation_date":1380567517,"answer_id":19101737,"question_id":4690600,"content_license":"CC BY-SA 3.0","body_markdown":"Updating this to something simpler for logger (works for both python 2 and 3). You do not need traceback module.\r\n\r\n    import logging\r\n\r\n    logger = logging.Logger(&#39;catch_all&#39;)\r\n\r\n    def catchEverythingInLog():\r\n        try:\r\n            ... do something ...\r\n        except Exception as e:\r\n            logger.error(e, exc_info=True)\r\n            ... exception handling ...\r\n\r\nThis is now the old way (though still works):\r\n\r\n    import sys, traceback\r\n    \r\n    def catchEverything():\r\n        try:\r\n            ... some operation(s) ...\r\n        except:\r\n            exc_type, exc_value, exc_traceback = sys.exc_info()\r\n            ... exception handling ...\r\n\r\nexc_value is the error message.","body":"<p>Updating this to something simpler for logger (works for both python 2 and 3). You do not need traceback module.<\/p>\n\n<pre><code>import logging\n\nlogger = logging.Logger('catch_all')\n\ndef catchEverythingInLog():\n    try:\n        ... do something ...\n    except Exception as e:\n        logger.error(e, exc_info=True)\n        ... exception handling ...\n<\/code><\/pre>\n\n<p>This is now the old way (though still works):<\/p>\n\n<pre><code>import sys, traceback\n\ndef catchEverything():\n    try:\n        ... some operation(s) ...\n    except:\n        exc_type, exc_value, exc_traceback = sys.exc_info()\n        ... exception handling ...\n<\/code><\/pre>\n\n<p>exc_value is the error message.<\/p>\n"},{"owner":{"account_id":4566798,"reputation":59860,"user_id":3707607,"user_type":"registered","accept_rate":71,"profile_image":"https:\/\/www.gravatar.com\/avatar\/6af07819191e479e05e35e37774fdbe0?s=256&d=identicon&r=PG","display_name":"Ted Petrou","link":"https:\/\/stackoverflow.com\/users\/3707607\/ted-petrou"},"is_accepted":false,"score":54,"last_activity_date":1508882667,"last_edit_date":null,"creation_date":1508882667,"answer_id":46920777,"question_id":20461165,"content_license":"CC BY-SA 3.0","body_markdown":"To provide a bit more clarity, let&#39;s look at a DataFrame with two levels in its index (a MultiIndex).\r\n\r\n    index = pd.MultiIndex.from_product([[&#39;TX&#39;, &#39;FL&#39;, &#39;CA&#39;], \r\n                                        [&#39;North&#39;, &#39;South&#39;]], \r\n                                       names=[&#39;State&#39;, &#39;Direction&#39;])\r\n    \r\n    df = pd.DataFrame(index=index, \r\n                      data=np.random.randint(0, 10, (6,4)), \r\n                      columns=list(&#39;abcd&#39;))\r\n\r\n[![enter image description here][1]][1]\r\n\r\nThe `reset_index` method, called with the default parameters, converts all index levels to columns and uses a simple `RangeIndex` as new index.\r\n\r\n    df.reset_index()\r\n[![enter image description here][2]][2]\r\n\r\nUse the `level` parameter to control which index levels are converted into columns. If possible, use the level name, which is more explicit. If there are no level names, you can refer to each level by its integer location, which begin at 0 from the outside. You can use a scalar value here or a list of all the indexes you would like to reset.\r\n\r\n    df.reset_index(level=&#39;State&#39;) # same as df.reset_index(level=0)\r\n\r\n[![enter image description here][3]][3]\r\n\r\nIn the rare event that you want to preserve the index and turn the index into a column, you can do the following:\r\n\r\n    # for a single level\r\n    df.assign(State=df.index.get_level_values(&#39;State&#39;))\r\n\r\n    # for all levels\r\n    df.assign(**df.index.to_frame())\r\n\r\n\r\n  [1]: https:\/\/i.stack.imgur.com\/SuURU.png\r\n  [2]: https:\/\/i.stack.imgur.com\/58rRj.png\r\n  [3]: https:\/\/i.stack.imgur.com\/sxY88.png","body":"<p>To provide a bit more clarity, let's look at a DataFrame with two levels in its index (a MultiIndex).<\/p>\n\n<pre><code>index = pd.MultiIndex.from_product([['TX', 'FL', 'CA'], \n                                    ['North', 'South']], \n                                   names=['State', 'Direction'])\n\ndf = pd.DataFrame(index=index, \n                  data=np.random.randint(0, 10, (6,4)), \n                  columns=list('abcd'))\n<\/code><\/pre>\n\n<p><a href=\"https:\/\/i.stack.imgur.com\/SuURU.png\" rel=\"noreferrer\"><img src=\"https:\/\/i.stack.imgur.com\/SuURU.png\" alt=\"enter image description here\"><\/a><\/p>\n\n<p>The <code>reset_index<\/code> method, called with the default parameters, converts all index levels to columns and uses a simple <code>RangeIndex<\/code> as new index.<\/p>\n\n<pre><code>df.reset_index()\n<\/code><\/pre>\n\n<p><a href=\"https:\/\/i.stack.imgur.com\/58rRj.png\" rel=\"noreferrer\"><img src=\"https:\/\/i.stack.imgur.com\/58rRj.png\" alt=\"enter image description here\"><\/a><\/p>\n\n<p>Use the <code>level<\/code> parameter to control which index levels are converted into columns. If possible, use the level name, which is more explicit. If there are no level names, you can refer to each level by its integer location, which begin at 0 from the outside. You can use a scalar value here or a list of all the indexes you would like to reset.<\/p>\n\n<pre><code>df.reset_index(level='State') # same as df.reset_index(level=0)\n<\/code><\/pre>\n\n<p><a href=\"https:\/\/i.stack.imgur.com\/sxY88.png\" rel=\"noreferrer\"><img src=\"https:\/\/i.stack.imgur.com\/sxY88.png\" alt=\"enter image description here\"><\/a><\/p>\n\n<p>In the rare event that you want to preserve the index and turn the index into a column, you can do the following:<\/p>\n\n<pre><code># for a single level\ndf.assign(State=df.index.get_level_values('State'))\n\n# for all levels\ndf.assign(**df.index.to_frame())\n<\/code><\/pre>\n"},{"owner":{"account_id":36365,"reputation":1237,"user_id":103694,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/1f1f4750145b4a2e3815fddaa979568e?s=256&d=identicon&r=PG","display_name":"JPCosta","link":"https:\/\/stackoverflow.com\/users\/103694\/jpcosta"},"is_accepted":false,"score":53,"last_activity_date":1270846018,"last_edit_date":1270846018.0,"creation_date":1245278588,"answer_id":1009882,"question_id":1009860,"content_license":"CC BY-SA 2.5","body_markdown":"One way to do it is using `sys.argv`. This will print the script name as the first argument and all the other parameters that you pass to it.\r\n\r\n    import sys\r\n    \r\n    for arg in sys.argv:\r\n        print arg\r\n\r\n","body":"<p>One way to do it is using <code>sys.argv<\/code>. This will print the script name as the first argument and all the other parameters that you pass to it.<\/p>\n\n<pre><code>import sys\n\nfor arg in sys.argv:\n    print arg\n<\/code><\/pre>\n"},{"owner":{"account_id":1273,"reputation":187878,"user_id":1694,"user_type":"registered","accept_rate":95,"profile_image":"https:\/\/www.gravatar.com\/avatar\/bd42b746d79be5dd325a8e94bc00ac58?s=256&d=identicon&r=PG","display_name":"Eli Courtwright","link":"https:\/\/stackoverflow.com\/users\/1694\/eli-courtwright"},"is_accepted":false,"score":53,"last_activity_date":1248975054,"last_edit_date":1248975054.0,"creation_date":1248968490,"answer_id":1207460,"question_id":1207406,"content_license":"CC BY-SA 2.5","body_markdown":"Your best approach for such an example would be a &lt;a href=&quot;http:\/\/docs.python.org\/tutorial\/datastructures.html#list-comprehensions&quot;&gt;list comprehension&lt;\/a&gt;\r\n\r\n    somelist = [tup for tup in somelist if determine(tup)]\r\n\r\nIn cases where you&#39;re doing something more complex than calling a `determine` function, I prefer constructing a new list and simply appending to it as I go.  For example\r\n\r\n    newlist = []\r\n    for tup in somelist:\r\n        # lots of code here, possibly setting things up for calling determine\r\n        if determine(tup):\r\n            newlist.append(tup)\r\n    somelist = newlist\r\n\r\nCopying the list using `remove` might make your code look a little cleaner, as described in one of the answers below.  You should definitely not do this for extremely large lists, since this involves first copying the entire list, and also performing an `O(n)` `remove` operation for each element being removed, making this an `O(n^2)` algorithm.\r\n\r\n    for tup in somelist[:]:\r\n        # lots of code here, possibly setting things up for calling determine\r\n        if determine(tup):\r\n            newlist.append(tup)\r\n","body":"<p>Your best approach for such an example would be a <a href=\"http:\/\/docs.python.org\/tutorial\/datastructures.html#list-comprehensions\" rel=\"noreferrer\">list comprehension<\/a><\/p>\n\n<pre><code>somelist = [tup for tup in somelist if determine(tup)]\n<\/code><\/pre>\n\n<p>In cases where you're doing something more complex than calling a <code>determine<\/code> function, I prefer constructing a new list and simply appending to it as I go.  For example<\/p>\n\n<pre><code>newlist = []\nfor tup in somelist:\n    # lots of code here, possibly setting things up for calling determine\n    if determine(tup):\n        newlist.append(tup)\nsomelist = newlist\n<\/code><\/pre>\n\n<p>Copying the list using <code>remove<\/code> might make your code look a little cleaner, as described in one of the answers below.  You should definitely not do this for extremely large lists, since this involves first copying the entire list, and also performing an <code>O(n)<\/code> <code>remove<\/code> operation for each element being removed, making this an <code>O(n^2)<\/code> algorithm.<\/p>\n\n<pre><code>for tup in somelist[:]:\n    # lots of code here, possibly setting things up for calling determine\n    if determine(tup):\n        newlist.append(tup)\n<\/code><\/pre>\n"},{"owner":{"account_id":1019598,"reputation":2448,"user_id":1030345,"user_type":"registered","accept_rate":79,"profile_image":"https:\/\/www.gravatar.com\/avatar\/5225e3df3cffcfabf10bc587403cd4a9?s=256&d=identicon&r=PG","display_name":"ralbatross","link":"https:\/\/stackoverflow.com\/users\/1030345\/ralbatross"},"is_accepted":false,"score":53,"last_activity_date":1360428751,"last_edit_date":null,"creation_date":1360428751,"answer_id":14790373,"question_id":1009860,"content_license":"CC BY-SA 3.0","body_markdown":"The [docopt](https:\/\/github.com\/docopt\/docopt) library is really slick.  It builds an argument dict from the usage string for your app.\r\n\r\nEg from the docopt readme:\r\n\r\n    &quot;&quot;&quot;Naval Fate.\r\n        \r\n    Usage:\r\n      naval_fate.py ship new &lt;name&gt;...\r\n      naval_fate.py ship &lt;name&gt; move &lt;x&gt; &lt;y&gt; [--speed=&lt;kn&gt;]\r\n      naval_fate.py ship shoot &lt;x&gt; &lt;y&gt;\r\n      naval_fate.py mine (set|remove) &lt;x&gt; &lt;y&gt; [--moored | --drifting]\r\n      naval_fate.py (-h | --help)\r\n      naval_fate.py --version\r\n    \r\n    Options:\r\n      -h --help     Show this screen.\r\n      --version     Show version.\r\n      --speed=&lt;kn&gt;  Speed in knots [default: 10].\r\n      --moored      Moored (anchored) mine.\r\n      --drifting    Drifting mine.\r\n    \r\n    &quot;&quot;&quot;\r\n    from docopt import docopt\r\n    \r\n    \r\n    if __name__ == &#39;__main__&#39;:\r\n        arguments = docopt(__doc__, version=&#39;Naval Fate 2.0&#39;)\r\n        print(arguments)\r\n\r\n","body":"<p>The <a href=\"https:\/\/github.com\/docopt\/docopt\">docopt<\/a> library is really slick.  It builds an argument dict from the usage string for your app.<\/p>\n\n<p>Eg from the docopt readme:<\/p>\n\n<pre><code>\"\"\"Naval Fate.\n\nUsage:\n  naval_fate.py ship new &lt;name&gt;...\n  naval_fate.py ship &lt;name&gt; move &lt;x&gt; &lt;y&gt; [--speed=&lt;kn&gt;]\n  naval_fate.py ship shoot &lt;x&gt; &lt;y&gt;\n  naval_fate.py mine (set|remove) &lt;x&gt; &lt;y&gt; [--moored | --drifting]\n  naval_fate.py (-h | --help)\n  naval_fate.py --version\n\nOptions:\n  -h --help     Show this screen.\n  --version     Show version.\n  --speed=&lt;kn&gt;  Speed in knots [default: 10].\n  --moored      Moored (anchored) mine.\n  --drifting    Drifting mine.\n\n\"\"\"\nfrom docopt import docopt\n\n\nif __name__ == '__main__':\n    arguments = docopt(__doc__, version='Naval Fate 2.0')\n    print(arguments)\n<\/code><\/pre>\n"},{"owner":{"account_id":172344,"reputation":2853,"user_id":400316,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/fad3da884f3995090902731d9822e3e4?s=256&d=identicon&r=PG","display_name":"Googol","link":"https:\/\/stackoverflow.com\/users\/400316\/googol"},"is_accepted":false,"score":53,"last_activity_date":1476871801,"last_edit_date":1476871801.0,"creation_date":1422372098,"answer_id":28173891,"question_id":7065164,"content_license":"CC BY-SA 3.0","body_markdown":"I use this statement in Django to convert an unaware time to an aware:\r\n\r\n    from django.utils import timezone\r\n\r\n    dt_aware = timezone.make_aware(dt_unaware, timezone.get_current_timezone())","body":"<p>I use this statement in Django to convert an unaware time to an aware:<\/p>\n\n<pre><code>from django.utils import timezone\n\ndt_aware = timezone.make_aware(dt_unaware, timezone.get_current_timezone())\n<\/code><\/pre>\n"},{"owner":{"account_id":3897561,"reputation":3221,"user_id":3226167,"user_type":"registered","accept_rate":78,"profile_image":"https:\/\/i.stack.imgur.com\/Z1Tdt.png?s=256&g=1","display_name":"user3226167","link":"https:\/\/stackoverflow.com\/users\/3226167\/user3226167"},"is_accepted":false,"score":53,"last_activity_date":1661273523,"last_edit_date":1661273523.0,"creation_date":1557901534,"answer_id":56142903,"question_id":14463277,"content_license":"CC BY-SA 4.0","body_markdown":"If you know what are the useless warnings you usually encounter, you can filter them by message.\r\n\r\n    import warnings\r\n    \r\n    #ignore by message\r\n    warnings.filterwarnings(&quot;ignore&quot;, message=&quot;divide by zero encountered in divide&quot;)\r\n\r\n    ##part of the message is also okay\r\n    warnings.filterwarnings(&quot;ignore&quot;, message=&quot;divide by zero encountered&quot;) \r\n    warnings.filterwarnings(&quot;ignore&quot;, message=&quot;invalid value encountered&quot;)","body":"<p>If you know what are the useless warnings you usually encounter, you can filter them by message.<\/p>\n<pre><code>import warnings\n\n#ignore by message\nwarnings.filterwarnings(&quot;ignore&quot;, message=&quot;divide by zero encountered in divide&quot;)\n\n##part of the message is also okay\nwarnings.filterwarnings(&quot;ignore&quot;, message=&quot;divide by zero encountered&quot;) \nwarnings.filterwarnings(&quot;ignore&quot;, message=&quot;invalid value encountered&quot;)\n<\/code><\/pre>\n"},{"owner":{"account_id":961501,"reputation":2428,"user_id":985766,"user_type":"registered","accept_rate":92,"profile_image":"https:\/\/www.gravatar.com\/avatar\/a60626428814e472f022d4fb7a71f35c?s=256&d=identicon&r=PG","display_name":"Kent Pawar","link":"https:\/\/stackoverflow.com\/users\/985766\/kent-pawar"},"is_accepted":false,"score":53,"last_activity_date":1618755764,"last_edit_date":1618755764.0,"creation_date":1616858568,"answer_id":66832946,"question_id":45310254,"content_license":"CC BY-SA 4.0","body_markdown":"#### Consider:\r\n```\r\n&gt;&gt;&gt; number1 = 10.1234\r\n&gt;&gt;&gt; f&#39;{number1:.2f}&#39;\r\n&#39;10.12&#39;\r\n```\r\n#### Syntax:\r\n```\r\n&quot;{&quot; [field_name] [&quot;!&quot; conversion] [&quot;:&quot; format_spec] &quot;}&quot;\r\n```\r\n\r\n#### Explanation:\r\n```\r\n# Let&#39;s break it down...\r\n#       [field_name]     =&gt; number1\r\n#       [&quot;!&quot; conversion] =&gt; Not used\r\n#       [format_spec]    =&gt; [.precision][type] \r\n#                        =&gt; .[2][f] =&gt; .2f  # where f means Fixed-point notation\r\n```\r\n\r\n\r\n\r\n\r\n----------\r\n\r\n\r\nGoing further, Format strings have the below syntax. As you can see there is a lot more that can be done.\r\n\r\n```none\r\nSyntax: &quot;{&quot; [field_name] [&quot;!&quot; conversion] [&quot;:&quot; format_spec] &quot;}&quot;\r\n\r\n# let&#39;s understand what each field means...\r\n\tfield_name        ::=  arg_name (&quot;.&quot; attribute_name | &quot;[&quot; element_index &quot;]&quot;)*\r\n\targ_name          ::=  [identifier | digit+]\r\n\tattribute_name    ::=  identifier\r\n\telement_index     ::=  digit+ | index_string\r\n\tindex_string      ::=  &lt;any source character except &quot;]&quot;&gt; +\r\n\tconversion        ::=  &quot;r&quot; | &quot;s&quot; | &quot;a&quot;\r\n\tformat_spec       ::=  [[fill]align][sign][#][0][width][grouping_option][.precision][type]\r\n\r\n            # Looking at the underlying fields under format_spec...\r\n\t\t\tfill            ::=  &lt;any character&gt;\r\n\t\t\talign           ::=  &quot;&lt;&quot; | &quot;&gt;&quot; | &quot;=&quot; | &quot;^&quot;\r\n\t\t\tsign            ::=  &quot;+&quot; | &quot;-&quot; | &quot; &quot;\r\n\t\t\twidth           ::=  digit+\r\n\t\t\tgrouping_option ::=  &quot;_&quot; | &quot;,&quot;\r\n\t\t\tprecision       ::=  digit+\r\n\t\t\ttype            ::=  &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;E&quot; | &quot;f&quot; | &quot;F&quot; | &quot;g&quot; | &quot;G&quot; | &quot;n&quot; | &quot;o&quot; | &quot;s&quot; | &quot;x&quot; | &quot;X&quot; | &quot;%&quot;\r\n```\r\n\r\n\r\n----------\r\nRefer https:\/\/docs.python.org\/3\/library\/string.html#format-string-syntax\r\n","body":"Consider:\n<pre><code>&gt;&gt;&gt; number1 = 10.1234\n&gt;&gt;&gt; f'{number1:.2f}'\n'10.12'\n<\/code><\/pre>\nSyntax:\n<pre><code>&quot;{&quot; [field_name] [&quot;!&quot; conversion] [&quot;:&quot; format_spec] &quot;}&quot;\n<\/code><\/pre>\nExplanation:\n<pre><code># Let's break it down...\n#       [field_name]     =&gt; number1\n#       [&quot;!&quot; conversion] =&gt; Not used\n#       [format_spec]    =&gt; [.precision][type] \n#                        =&gt; .[2][f] =&gt; .2f  # where f means Fixed-point notation\n<\/code><\/pre>\n<hr \/>\n<p>Going further, Format strings have the below syntax. As you can see there is a lot more that can be done.<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>Syntax: &quot;{&quot; [field_name] [&quot;!&quot; conversion] [&quot;:&quot; format_spec] &quot;}&quot;\n\n# let's understand what each field means...\n    field_name        ::=  arg_name (&quot;.&quot; attribute_name | &quot;[&quot; element_index &quot;]&quot;)*\n    arg_name          ::=  [identifier | digit+]\n    attribute_name    ::=  identifier\n    element_index     ::=  digit+ | index_string\n    index_string      ::=  &lt;any source character except &quot;]&quot;&gt; +\n    conversion        ::=  &quot;r&quot; | &quot;s&quot; | &quot;a&quot;\n    format_spec       ::=  [[fill]align][sign][#][0][width][grouping_option][.precision][type]\n\n            # Looking at the underlying fields under format_spec...\n            fill            ::=  &lt;any character&gt;\n            align           ::=  &quot;&lt;&quot; | &quot;&gt;&quot; | &quot;=&quot; | &quot;^&quot;\n            sign            ::=  &quot;+&quot; | &quot;-&quot; | &quot; &quot;\n            width           ::=  digit+\n            grouping_option ::=  &quot;_&quot; | &quot;,&quot;\n            precision       ::=  digit+\n            type            ::=  &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;E&quot; | &quot;f&quot; | &quot;F&quot; | &quot;g&quot; | &quot;G&quot; | &quot;n&quot; | &quot;o&quot; | &quot;s&quot; | &quot;x&quot; | &quot;X&quot; | &quot;%&quot;\n<\/code><\/pre>\n<hr \/>\n<p>Refer <a href=\"https:\/\/docs.python.org\/3\/library\/string.html#format-string-syntax\" rel=\"noreferrer\">https:\/\/docs.python.org\/3\/library\/string.html#format-string-syntax<\/a><\/p>\n"},{"owner":{"account_id":595317,"reputation":545,"user_id":288908,"user_type":"unregistered","profile_image":"https:\/\/www.gravatar.com\/avatar\/f03421c8c021bfe30697f5ee24efc97b?s=256&d=identicon&r=PG","display_name":"pyrou","link":"https:\/\/stackoverflow.com\/users\/288908\/pyrou"},"is_accepted":false,"score":52,"last_activity_date":1268061549,"last_edit_date":null,"creation_date":1268061549,"answer_id":2402306,"question_id":265960,"content_license":"CC BY-SA 2.5","body_markdown":"    myString.translate(None, string.punctuation)","body":"<pre><code>myString.translate(None, string.punctuation)\n<\/code><\/pre>\n"},{"owner":{"account_id":79477,"reputation":128089,"user_id":225312,"user_type":"registered","accept_rate":94,"profile_image":"https:\/\/www.gravatar.com\/avatar\/98be1fca8529611a09e77da800faa817?s=256&d=identicon&r=PG","display_name":"user225312","link":"https:\/\/stackoverflow.com\/users\/225312\/user225312"},"is_accepted":false,"score":52,"last_activity_date":1450652267,"last_edit_date":1450652267.0,"creation_date":1289374713,"answer_id":4142197,"question_id":4142151,"content_license":"CC BY-SA 3.0","body_markdown":"In your `main.py`:\r\n\r\n    from user import Class\r\n\r\nwhere `Class` is the name of the class you want to import.\r\n\r\nIf you want to call a method of `Class`, you can call it using:\r\n\r\n`Class.method`\r\n\r\nNote that there should be an empty `__init__.py` file in the same directory. ","body":"<p>In your <code>main.py<\/code>:<\/p>\n\n<pre><code>from user import Class\n<\/code><\/pre>\n\n<p>where <code>Class<\/code> is the name of the class you want to import.<\/p>\n\n<p>If you want to call a method of <code>Class<\/code>, you can call it using:<\/p>\n\n<p><code>Class.method<\/code><\/p>\n\n<p>Note that there should be an empty <code>__init__.py<\/code> file in the same directory. <\/p>\n"},{"owner":{"account_id":301466,"reputation":1895,"user_id":609215,"user_type":"registered","accept_rate":60,"profile_image":"https:\/\/www.gravatar.com\/avatar\/a3cf852fffb10cc4e65343124e0c7dde?s=256&d=identicon&r=PG","display_name":"jgoeders","link":"https:\/\/stackoverflow.com\/users\/609215\/jgoeders"},"is_accepted":false,"score":52,"last_activity_date":1574529898,"last_edit_date":1574529898.0,"creation_date":1310063147,"answer_id":6615332,"question_id":185936,"content_license":"CC BY-SA 4.0","body_markdown":"Using `rmtree` and recreating the folder could work, but I have run into errors when deleting and immediately recreating folders on network drives.\r\n\r\nThe proposed solution using walk does not work as it uses `rmtree` to remove folders and then may attempt to use `os.unlink` on the files that were previously in those folders.  This causes an error.\r\n\r\nThe posted `glob` solution will also attempt to delete non-empty folders, causing errors.\r\n\r\nI suggest you use:\r\n\r\n    folder_path = &#39;\/path\/to\/folder&#39;\r\n    for file_object in os.listdir(folder_path):\r\n        file_object_path = os.path.join(folder_path, file_object)\r\n        if os.path.isfile(file_object_path) or os.path.islink(file_object_path):\r\n            os.unlink(file_object_path)\r\n        else:\r\n            shutil.rmtree(file_object_path)\r\n","body":"<p>Using <code>rmtree<\/code> and recreating the folder could work, but I have run into errors when deleting and immediately recreating folders on network drives.<\/p>\n\n<p>The proposed solution using walk does not work as it uses <code>rmtree<\/code> to remove folders and then may attempt to use <code>os.unlink<\/code> on the files that were previously in those folders.  This causes an error.<\/p>\n\n<p>The posted <code>glob<\/code> solution will also attempt to delete non-empty folders, causing errors.<\/p>\n\n<p>I suggest you use:<\/p>\n\n<pre><code>folder_path = '\/path\/to\/folder'\nfor file_object in os.listdir(folder_path):\n    file_object_path = os.path.join(folder_path, file_object)\n    if os.path.isfile(file_object_path) or os.path.islink(file_object_path):\n        os.unlink(file_object_path)\n    else:\n        shutil.rmtree(file_object_path)\n<\/code><\/pre>\n"},{"owner":{"account_id":242099,"reputation":1482,"user_id":513397,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/a6ab9e058ae24be47968b44a0fc842f9?s=256&d=identicon&r=PG","display_name":"anishpatel","link":"https:\/\/stackoverflow.com\/users\/513397\/anishpatel"},"is_accepted":false,"score":52,"last_activity_date":1530154179,"last_edit_date":1530154179.0,"creation_date":1378704632,"answer_id":18691983,"question_id":6910641,"content_license":"CC BY-SA 4.0","body_markdown":"Use:\r\n\r\n    &gt;&gt;&gt; import heapq\r\n    &gt;&gt;&gt; import numpy\r\n    &gt;&gt;&gt; a = numpy.array([1, 3, 2, 4, 5])\r\n    &gt;&gt;&gt; heapq.nlargest(3, range(len(a)), a.take)\r\n    [4, 3, 1]\r\n\r\nFor regular Python lists:\r\n\r\n    &gt;&gt;&gt; a = [1, 3, 2, 4, 5]\r\n    &gt;&gt;&gt; heapq.nlargest(3, range(len(a)), a.__getitem__)\r\n    [4, 3, 1]\r\n\r\nIf you use Python 2, use `xrange` instead of `range`.\r\n\r\nSource: *[heapq \u2014 Heap queue algorithm][1]*\r\n\r\n  [1]: http:\/\/docs.python.org\/3\/library\/heapq.html\r\n","body":"<p>Use:<\/p>\n\n<pre><code>&gt;&gt;&gt; import heapq\n&gt;&gt;&gt; import numpy\n&gt;&gt;&gt; a = numpy.array([1, 3, 2, 4, 5])\n&gt;&gt;&gt; heapq.nlargest(3, range(len(a)), a.take)\n[4, 3, 1]\n<\/code><\/pre>\n\n<p>For regular Python lists:<\/p>\n\n<pre><code>&gt;&gt;&gt; a = [1, 3, 2, 4, 5]\n&gt;&gt;&gt; heapq.nlargest(3, range(len(a)), a.__getitem__)\n[4, 3, 1]\n<\/code><\/pre>\n\n<p>If you use Python 2, use <code>xrange<\/code> instead of <code>range<\/code>.<\/p>\n\n<p>Source: <em><a href=\"http:\/\/docs.python.org\/3\/library\/heapq.html\" rel=\"noreferrer\">heapq \u2014 Heap queue algorithm<\/a><\/em><\/p>\n"},{"owner":{"account_id":3090119,"reputation":48582,"user_id":2670370,"user_type":"registered","accept_rate":35,"profile_image":"https:\/\/www.gravatar.com\/avatar\/6518601c45f36ac09aa177a3abfc1b21?s=256&d=identicon&r=PG","display_name":"Shubham Chaudhary","link":"https:\/\/stackoverflow.com\/users\/2670370\/shubham-chaudhary"},"is_accepted":false,"score":52,"last_activity_date":1522670460,"last_edit_date":null,"creation_date":1522670460,"answer_id":49610911,"question_id":4271740,"content_license":"CC BY-SA 3.0","body_markdown":"From at least [python &gt;= 3.3][ref]:\r\n\r\nYou can use the field `nodename` and avoid using array indexing:\r\n\r\n    os.uname().nodename\r\n\r\nAlthough, even the documentation of [os.uname][doc] suggests using `socket.gethostname()`\r\n\r\n[doc]: https:\/\/docs.python.org\/3.5\/library\/os.html#os.uname\r\n[ref]: https:\/\/docs.python.org\/3.3\/library\/os.html#os.uname","body":"<p>From at least <a href=\"https:\/\/docs.python.org\/3.3\/library\/os.html#os.uname\" rel=\"noreferrer\">python >= 3.3<\/a>:<\/p>\n\n<p>You can use the field <code>nodename<\/code> and avoid using array indexing:<\/p>\n\n<pre><code>os.uname().nodename\n<\/code><\/pre>\n\n<p>Although, even the documentation of <a href=\"https:\/\/docs.python.org\/3.5\/library\/os.html#os.uname\" rel=\"noreferrer\">os.uname<\/a> suggests using <code>socket.gethostname()<\/code><\/p>\n"},{"owner":{"account_id":44659,"reputation":21157,"user_id":131187,"user_type":"registered","accept_rate":56,"profile_image":"https:\/\/i.stack.imgur.com\/27eJi.jpg?s=256&g=1","display_name":"Bill Bell","link":"https:\/\/stackoverflow.com\/users\/131187\/bill-bell"},"is_accepted":false,"score":51,"last_activity_date":1589826297,"last_edit_date":1589826297.0,"creation_date":1487349030,"answer_id":42302885,"question_id":32490629,"content_license":"CC BY-SA 4.0","body_markdown":"Datetime is just lovely if you like remembering funny codes. Wouldn&#39;t you prefer simplicity?\r\n\r\n    &gt;&gt;&gt; import arrow\r\n    &gt;&gt;&gt; arrow.now().format(&#39;YYYY-MM-DD&#39;)\r\n    &#39;2017-02-17&#39;\r\n\r\nThis module is clever enough to understand what you *mean*. \r\n\r\nJust do `pip install arrow`.\r\n\r\nAddendum: In answer to those who become exercised over this answer let me just say that arrow represents one of the *alternative* approaches to dealing with dates in Python. That&#39;s mostly what I meant to suggest.\r\n","body":"<p>Datetime is just lovely if you like remembering funny codes. Wouldn't you prefer simplicity?<\/p>\n\n<pre><code>&gt;&gt;&gt; import arrow\n&gt;&gt;&gt; arrow.now().format('YYYY-MM-DD')\n'2017-02-17'\n<\/code><\/pre>\n\n<p>This module is clever enough to understand what you <em>mean<\/em>. <\/p>\n\n<p>Just do <code>pip install arrow<\/code>.<\/p>\n\n<p>Addendum: In answer to those who become exercised over this answer let me just say that arrow represents one of the <em>alternative<\/em> approaches to dealing with dates in Python. That's mostly what I meant to suggest.<\/p>\n"}]
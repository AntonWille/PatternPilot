[
    {
        "owner": {
            "account_id": 1029411,
            "reputation": 5890,
            "user_id": 1038034,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/P1rwn.jpg?s=256&g=1",
            "display_name": "Matt",
            "link": "https:\/\/stackoverflow.com\/users\/1038034\/matt"
        },
        "is_accepted": false,
        "score": 21,
        "last_activity_date": 1509827843,
        "creation_date": 1509827843,
        "answer_id": 47115392,
        "question_id": 5200842,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "This is an old question, but I wanted to share how I&#39;m handling custom errors in Rails, including attaching error messages, testing, and how to handle this with `ActiveRecord` models.  \r\n\r\n### Creating Custom Error\r\n    class MyClass\r\n      # create a custome error\r\n      class MissingRequirement &lt; StandardError; end\r\n\r\n      def my_instance_method\r\n        raise MyClass::MissingRequirement, &quot;My error msg&quot; unless true   \r\n      end\r\n    end\r\n\r\n### Testing (minitest)\r\n\r\n    test &quot;should raise MissingRequirement if ____ is missing&quot;\r\n      # should raise an error\r\n      error = assert_raises(MyClass::MissingRequirement) {\r\n        MyClass.new.my_instance_method\r\n      }\r\n      \r\n      assert error.message = &quot;My error msg&quot;\r\n    end\r\n\r\n### With ActiveRecord\r\nI think it&#39;s worth noting that if working with an `ActiveRecord` model, a popular pattern is to add an error to the model as described below, so that your validations will fail:\r\n\r\n    def MyModel &lt; ActiveRecord::Base\r\n      validate :code_does_not_contain_hyphens\r\n\r\n      def code_does_not_contain_hyphens\r\n        errors.add(:code, &quot;cannot contain hyphens&quot;) if code.include?(&quot;-&quot;)\r\n      end\r\n    end\r\n\r\nWhen validations are run, this method will piggy-back onto ActiveRecord&#39;s `ActiveRecord::RecordInvalid` error class and will cause validations to fail.\r\n\r\nHope this helps!",
        "body": "<p>This is an old question, but I wanted to share how I'm handling custom errors in Rails, including attaching error messages, testing, and how to handle this with <code>ActiveRecord<\/code> models.  <\/p>\n\n<h3>Creating Custom Error<\/h3>\n\n<pre><code>class MyClass\n  # create a custome error\n  class MissingRequirement &lt; StandardError; end\n\n  def my_instance_method\n    raise MyClass::MissingRequirement, \"My error msg\" unless true   \n  end\nend\n<\/code><\/pre>\n\n<h3>Testing (minitest)<\/h3>\n\n<pre><code>test \"should raise MissingRequirement if ____ is missing\"\n  # should raise an error\n  error = assert_raises(MyClass::MissingRequirement) {\n    MyClass.new.my_instance_method\n  }\n\n  assert error.message = \"My error msg\"\nend\n<\/code><\/pre>\n\n<h3>With ActiveRecord<\/h3>\n\n<p>I think it's worth noting that if working with an <code>ActiveRecord<\/code> model, a popular pattern is to add an error to the model as described below, so that your validations will fail:<\/p>\n\n<pre><code>def MyModel &lt; ActiveRecord::Base\n  validate :code_does_not_contain_hyphens\n\n  def code_does_not_contain_hyphens\n    errors.add(:code, \"cannot contain hyphens\") if code.include?(\"-\")\n  end\nend\n<\/code><\/pre>\n\n<p>When validations are run, this method will piggy-back onto ActiveRecord's <code>ActiveRecord::RecordInvalid<\/code> error class and will cause validations to fail.<\/p>\n\n<p>Hope this helps!<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1887795,
            "reputation": 3411,
            "user_id": 1706670,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/c7a901672979d5870dc01f9787c0b2a4?s=256&d=identicon&r=PG",
            "display_name": "PGill",
            "link": "https:\/\/stackoverflow.com\/users\/1706670\/pgill"
        },
        "is_accepted": false,
        "score": 21,
        "last_activity_date": 1592190001,
        "creation_date": 1592190001,
        "answer_id": 62380669,
        "question_id": 695290,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Ruby 2.6 Beginless\/Endless Ranges\r\n\r\n    (..1)\r\n    # or\r\n    (...1)\r\n\r\n&lt;p&gt;    \r\n\r\n    (1..)\r\n    # or\r\n    (1...)\r\n&lt;p&gt; \r\n    \r\n    [1,2,3,4,5,6][..3]\r\n    =&gt; [1, 2, 3, 4]\r\n\r\n    [1,2,3,4,5,6][...3]\r\n     =&gt; [1, 2, 3]\r\n  \r\n&lt;p&gt;   \r\n  \r\n    ROLES = %w[superadmin manager admin contact user]\r\n    ROLES[ROLES.index(&#39;admin&#39;)..]\r\n    =&gt; [&quot;admin&quot;, &quot;contact&quot;, &quot;user&quot;]\r\n    ",
        "body": "<p>Ruby 2.6 Beginless\/Endless Ranges<\/p>\n\n<pre><code>(..1)\n# or\n(...1)\n<\/code><\/pre>\n\n<p><p>    <\/p>\n\n<pre><code>(1..)\n# or\n(1...)\n<\/code><\/pre>\n\n<p><p> <\/p>\n\n<pre><code>[1,2,3,4,5,6][..3]\n=&gt; [1, 2, 3, 4]\n\n[1,2,3,4,5,6][...3]\n =&gt; [1, 2, 3]\n<\/code><\/pre>\n\n<p><p>   <\/p>\n\n<pre><code>ROLES = %w[superadmin manager admin contact user]\nROLES[ROLES.index('admin')..]\n=&gt; [\"admin\", \"contact\", \"user\"]\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2172,
            "reputation": 365278,
            "user_id": 2988,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/ed181f8c80df53d2b67a4f4fff088ed4?s=256&d=identicon&r=PG",
            "display_name": "J&#246;rg W Mittag",
            "link": "https:\/\/stackoverflow.com\/users\/2988\/j%c3%b6rg-w-mittag"
        },
        "is_accepted": false,
        "score": 20,
        "last_activity_date": 1284640264,
        "creation_date": 1284640264,
        "answer_id": 3726650,
        "question_id": 3724913,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "Unfortunately, it is impossible for a machine to upcase\/downcase\/capitalize properly. It needs way too much contextual information for a computer to understand.\r\n\r\nThat&#39;s why Ruby&#39;s `String` class only supports capitalization for ASCII characters, because there it&#39;s at least *somewhat* well-defined.\r\n\r\nWhat do I mean by &quot;contextual information&quot;?\r\n\r\nFor example, to capitalize `i` properly, you need to know which language the text is in. English, for example, has only two `i`s: capital `I` without a dot and small `i` with a dot. But Turkish has four `i`s: capital `I` without a dot, capital `\u0130` with a dot, small `\u0131` without a dot, small `i` with a dot. So, in English `&#39;i&#39;.upcase # =&gt; &#39;I&#39;` and in Turkish `&#39;i&#39;.upcase # =&gt; &#39;\u0130&#39;`. In other words: since `&#39;i&#39;.upcase` can return two different results, depending on the language, it is obviously impossible to correctly capitalize a word without knowing its language.\r\n\r\nBut Ruby doesn&#39;t know the language, it only knows the encoding. Therefore it is impossible to properly capitalize a string with Ruby&#39;s built-in functionality.\r\n\r\nIt gets worse: even *with* knowing the language, it is sometimes impossible to do capitalization properly. For example, in German, `&#39;Ma&#223;e&#39;.upcase # =&gt; &#39;MASSE&#39;` (*Ma&#223;e* is the plural of *Ma&#223;* meaning *measurement*). However, `&#39;Masse&#39;.upcase # =&gt; &#39;MASSE&#39;` (meaning *mass*). So, what is `&#39;MASSE&#39;.capitalize`? In other words: correctly capitalizing requires a full-blown Artificial Intelligence.\r\n\r\nSo, instead of sometimes giving the wrong answer, Ruby chooses to sometimes give no answer *at all*, which is why non-ASCII characters simply get ignored in downcase\/upcase\/capitalize operations. (Which of course also reads to wrong results, but at least it&#39;s easy to check.)",
        "body": "<p>Unfortunately, it is impossible for a machine to upcase\/downcase\/capitalize properly. It needs way too much contextual information for a computer to understand.<\/p>\n\n<p>That's why Ruby's <code>String<\/code> class only supports capitalization for ASCII characters, because there it's at least <em>somewhat<\/em> well-defined.<\/p>\n\n<p>What do I mean by \"contextual information\"?<\/p>\n\n<p>For example, to capitalize <code>i<\/code> properly, you need to know which language the text is in. English, for example, has only two <code>i<\/code>s: capital <code>I<\/code> without a dot and small <code>i<\/code> with a dot. But Turkish has four <code>i<\/code>s: capital <code>I<\/code> without a dot, capital <code>\u0130<\/code> with a dot, small <code>\u0131<\/code> without a dot, small <code>i<\/code> with a dot. So, in English <code>'i'.upcase # =&gt; 'I'<\/code> and in Turkish <code>'i'.upcase # =&gt; '\u0130'<\/code>. In other words: since <code>'i'.upcase<\/code> can return two different results, depending on the language, it is obviously impossible to correctly capitalize a word without knowing its language.<\/p>\n\n<p>But Ruby doesn't know the language, it only knows the encoding. Therefore it is impossible to properly capitalize a string with Ruby's built-in functionality.<\/p>\n\n<p>It gets worse: even <em>with<\/em> knowing the language, it is sometimes impossible to do capitalization properly. For example, in German, <code>'Ma\u00dfe'.upcase # =&gt; 'MASSE'<\/code> (<em>Ma\u00dfe<\/em> is the plural of <em>Ma\u00df<\/em> meaning <em>measurement<\/em>). However, <code>'Masse'.upcase # =&gt; 'MASSE'<\/code> (meaning <em>mass<\/em>). So, what is <code>'MASSE'.capitalize<\/code>? In other words: correctly capitalizing requires a full-blown Artificial Intelligence.<\/p>\n\n<p>So, instead of sometimes giving the wrong answer, Ruby chooses to sometimes give no answer <em>at all<\/em>, which is why non-ASCII characters simply get ignored in downcase\/upcase\/capitalize operations. (Which of course also reads to wrong results, but at least it's easy to check.)<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 262058,
            "reputation": 1805,
            "user_id": 546670,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/2a1fab37af9b5c69c10a7055e78f36b8?s=256&d=identicon&r=PG",
            "display_name": "Micah Winkelspecht",
            "link": "https:\/\/stackoverflow.com\/users\/546670\/micah-winkelspecht"
        },
        "is_accepted": false,
        "score": 20,
        "last_activity_date": 1322641617,
        "creation_date": 1322641617,
        "answer_id": 8322986,
        "question_id": 5528839,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "I was finally able to solve this problem. None of the above solutions completely fixed it for me.\r\n\r\nI was getting this error when trying to `gem install nokogiri` on OSX Lion 10.7.2. First of all, this  error masks the real problem by saying libiconv is missing, because you will get the same error even if nokogiri can&#39;t find libxslt or libxml2, which in my case, it couldn&#39;t.\r\n\r\nSo I followed the instructions on http:\/\/nokogiri.org\/tutorials\/installing_nokogiri.html under the Homebrew section (slightly modified to account for a more current version of libxml2):\r\n\r\n    brew install libxml2\r\n    brew link libxml2\r\n\r\n    # install libxslt from source\r\n    wget ftp:\/\/xmlsoft.org\/libxml2\/libxslt-1.1.26.tar.gz\r\n    tar -zxvf libxslt-1.1.26.tar.gz\r\n    cd libxslt-1.1.26\r\n    .\/configure --prefix=\/usr\/local\/Cellar\/libxslt\/1.1.26 --with-libxml-prefix=\/usr\/local\/Cellar\/libxml2\/2.7.8\r\n    make\r\n    sudo make install\r\n\r\nAt this point I followed the directions on the nokogiri site and tried\r\n    \r\n    gem install nokogiri -- --with-xslt-dir=\/usr\/local\/Cellar\/libxslt\/1.1.26\r\n\r\nHowever, this still failed because when building libxslt from source, it installs the `\/include` folder in a funky place. So you need to specify the `lib` and `include` folders separately like so:\r\n\r\n    gem install nokogiri -- --with-xslt-lib=\/usr\/local\/Cellar\/libxslt\/1.1.26\/lib --with-xslt-include=\/usr\/local\/Cellar\/libxslt\/1.1.26\/include\/libxslt\r\n\r\nThis still didn&#39;t work (same libiconv error),  so I tried to specify all three required libraries (libxslt, libxml2 and libiconv):\r\n\r\n    gem install nokogiri -- --with-xslt-lib=\/usr\/local\/Cellar\/libxslt\/1.1.26\/lib --with-xslt-include=\/usr\/local\/Cellar\/libxslt\/1.1.26\/include\/libxslt --with-iconv-dir=\/usr\/local\/Cellar\/libiconv\/1.14 --with-xml2-dir=\/usr\/local\/Cellar\/libxml2\/2.7.8\r\n\r\nNow I got a different error! It was still an error but at least it was different. The make process failed with:\r\n\r\n    in \/opt\/local\/lib\/libz.1.dylib, file was built for unsupported file format which is not the architecture being linked (x86_64) for architecture x86_64\r\n\r\nUhh, what? After a lot of googling, I came across this miracle post: http:\/\/www.refresherate.com\/2010\/01\/08\/fixing-ld-warning-in-usrlocalliblibz-dylib-file-is-not-of-required-architecture\/\r\n\r\nApparently OSX Lion ships with some bad versions of the libz library (`libz.dylib, libz.1.dylib, libz.1.2.4.dylib`) and  and they need to be replaced with the latest versions from the Xcode SDK. The article explains it better than I can so read the above link for specific instructions.\r\n\r\nOnce these were replaced, I ran \r\n\r\n    gem install nokogiri -- --with-xslt-lib=\/usr\/local\/Cellar\/libxslt\/1.1.26\/lib --with-xslt-include=\/usr\/local\/Cellar\/libxslt\/1.1.26\/include\/libxslt --with-iconv-dir=\/usr\/local\/Cellar\/libiconv\/1.14 --with-xml2-dir=\/usr\/local\/Cellar\/libxml2\/2.7.8\r\n\r\nagain and all was well. I hope this helps someone else.",
        "body": "<p>I was finally able to solve this problem. None of the above solutions completely fixed it for me.<\/p>\n\n<p>I was getting this error when trying to <code>gem install nokogiri<\/code> on OSX Lion 10.7.2. First of all, this  error masks the real problem by saying libiconv is missing, because you will get the same error even if nokogiri can't find libxslt or libxml2, which in my case, it couldn't.<\/p>\n\n<p>So I followed the instructions on <a href=\"http:\/\/nokogiri.org\/tutorials\/installing_nokogiri.html\">http:\/\/nokogiri.org\/tutorials\/installing_nokogiri.html<\/a> under the Homebrew section (slightly modified to account for a more current version of libxml2):<\/p>\n\n<pre><code>brew install libxml2\nbrew link libxml2\n\n# install libxslt from source\nwget ftp:\/\/xmlsoft.org\/libxml2\/libxslt-1.1.26.tar.gz\ntar -zxvf libxslt-1.1.26.tar.gz\ncd libxslt-1.1.26\n.\/configure --prefix=\/usr\/local\/Cellar\/libxslt\/1.1.26 --with-libxml-prefix=\/usr\/local\/Cellar\/libxml2\/2.7.8\nmake\nsudo make install\n<\/code><\/pre>\n\n<p>At this point I followed the directions on the nokogiri site and tried<\/p>\n\n<pre><code>gem install nokogiri -- --with-xslt-dir=\/usr\/local\/Cellar\/libxslt\/1.1.26\n<\/code><\/pre>\n\n<p>However, this still failed because when building libxslt from source, it installs the <code>\/include<\/code> folder in a funky place. So you need to specify the <code>lib<\/code> and <code>include<\/code> folders separately like so:<\/p>\n\n<pre><code>gem install nokogiri -- --with-xslt-lib=\/usr\/local\/Cellar\/libxslt\/1.1.26\/lib --with-xslt-include=\/usr\/local\/Cellar\/libxslt\/1.1.26\/include\/libxslt\n<\/code><\/pre>\n\n<p>This still didn't work (same libiconv error),  so I tried to specify all three required libraries (libxslt, libxml2 and libiconv):<\/p>\n\n<pre><code>gem install nokogiri -- --with-xslt-lib=\/usr\/local\/Cellar\/libxslt\/1.1.26\/lib --with-xslt-include=\/usr\/local\/Cellar\/libxslt\/1.1.26\/include\/libxslt --with-iconv-dir=\/usr\/local\/Cellar\/libiconv\/1.14 --with-xml2-dir=\/usr\/local\/Cellar\/libxml2\/2.7.8\n<\/code><\/pre>\n\n<p>Now I got a different error! It was still an error but at least it was different. The make process failed with:<\/p>\n\n<pre><code>in \/opt\/local\/lib\/libz.1.dylib, file was built for unsupported file format which is not the architecture being linked (x86_64) for architecture x86_64\n<\/code><\/pre>\n\n<p>Uhh, what? After a lot of googling, I came across this miracle post: <a href=\"http:\/\/www.refresherate.com\/2010\/01\/08\/fixing-ld-warning-in-usrlocalliblibz-dylib-file-is-not-of-required-architecture\/\">http:\/\/www.refresherate.com\/2010\/01\/08\/fixing-ld-warning-in-usrlocalliblibz-dylib-file-is-not-of-required-architecture\/<\/a><\/p>\n\n<p>Apparently OSX Lion ships with some bad versions of the libz library (<code>libz.dylib, libz.1.dylib, libz.1.2.4.dylib<\/code>) and  and they need to be replaced with the latest versions from the Xcode SDK. The article explains it better than I can so read the above link for specific instructions.<\/p>\n\n<p>Once these were replaced, I ran <\/p>\n\n<pre><code>gem install nokogiri -- --with-xslt-lib=\/usr\/local\/Cellar\/libxslt\/1.1.26\/lib --with-xslt-include=\/usr\/local\/Cellar\/libxslt\/1.1.26\/include\/libxslt --with-iconv-dir=\/usr\/local\/Cellar\/libiconv\/1.14 --with-xml2-dir=\/usr\/local\/Cellar\/libxml2\/2.7.8\n<\/code><\/pre>\n\n<p>again and all was well. I hope this helps someone else.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 137658,
            "reputation": 519910,
            "user_id": 341994,
            "user_type": "registered",
            "accept_rate": 93,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/fbb4d027695dfdf76bf448b15d7e306a?s=256&d=identicon&r=PG",
            "display_name": "matt",
            "link": "https:\/\/stackoverflow.com\/users\/341994\/matt"
        },
        "is_accepted": false,
        "score": 20,
        "last_activity_date": 1347395718,
        "creation_date": 1347325903,
        "answer_id": 12361446,
        "question_id": 9434002,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "If not using rvm, but rather you are building and installing ruby 1.9.3 from scratch \u2014 for example, you&#39;re managing your ruby versions with [rbenv](https:\/\/github.com\/sstephenson\/rbenv) \u2014 you must install libyaml first. Get it from http:\/\/pyyaml.org\/; at the moment, the file you want is http:\/\/pyyaml.org\/download\/libyaml\/yaml-0.1.4.tar.gz. Open the tarball and cd into the resulting folder. Then:\r\n\r\n    .\/configure --prefix=\/usr\/local\r\n    make\r\n    sudo make install\r\n\r\nYou are now ready to build ruby. Download ruby from http:\/\/ftp.ruby-lang.org\/pub\/ruby\/. Open the tarball and cd into the resulting folder. Now:\r\n\r\n    .\/configure --prefix=\/wherever\/you\/want\/it\/to\/go\r\n    make\r\n    make install\r\n\r\n(Or possibly `sudo make install`, depending on where you&#39;re putting it.) If using rbenv, you&#39;ll know it has worked if you switch to `rbenv global 1.9.3-p194` (or whatever your version is called) and `gem --version` works without a warning. That worked for me on Mac OS X 10.6.8. (**Update**: I just tried this on Mac OS X 10.8.1 and it seems to have worked fine there too.)",
        "body": "<p>If not using rvm, but rather you are building and installing ruby 1.9.3 from scratch \u2014 for example, you're managing your ruby versions with <a href=\"https:\/\/github.com\/sstephenson\/rbenv\">rbenv<\/a> \u2014 you must install libyaml first. Get it from <a href=\"http:\/\/pyyaml.org\/\">http:\/\/pyyaml.org\/<\/a>; at the moment, the file you want is <a href=\"http:\/\/pyyaml.org\/download\/libyaml\/yaml-0.1.4.tar.gz\">http:\/\/pyyaml.org\/download\/libyaml\/yaml-0.1.4.tar.gz<\/a>. Open the tarball and cd into the resulting folder. Then:<\/p>\n\n<pre><code>.\/configure --prefix=\/usr\/local\nmake\nsudo make install\n<\/code><\/pre>\n\n<p>You are now ready to build ruby. Download ruby from <a href=\"http:\/\/ftp.ruby-lang.org\/pub\/ruby\/\">http:\/\/ftp.ruby-lang.org\/pub\/ruby\/<\/a>. Open the tarball and cd into the resulting folder. Now:<\/p>\n\n<pre><code>.\/configure --prefix=\/wherever\/you\/want\/it\/to\/go\nmake\nmake install\n<\/code><\/pre>\n\n<p>(Or possibly <code>sudo make install<\/code>, depending on where you're putting it.) If using rbenv, you'll know it has worked if you switch to <code>rbenv global 1.9.3-p194<\/code> (or whatever your version is called) and <code>gem --version<\/code> works without a warning. That worked for me on Mac OS X 10.6.8. (<strong>Update<\/strong>: I just tried this on Mac OS X 10.8.1 and it seems to have worked fine there too.)<\/p>\n",
        "last_edit_date": 1347395718.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4044812,
            "reputation": 311,
            "user_id": 3326359,
            "user_type": "registered",
            "profile_image": "https:\/\/graph.facebook.com\/1837422109\/picture?type=large",
            "display_name": "Marcus",
            "link": "https:\/\/stackoverflow.com\/users\/3326359\/marcus"
        },
        "is_accepted": false,
        "score": 20,
        "last_activity_date": 1512074366,
        "creation_date": 1483190711,
        "answer_id": 41408686,
        "question_id": 4507149,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "I was having trouble with this problem too and came by this answer on a question similar to ours. It worked for me.\r\n\r\n    form_for @list.becomes(List)\r\n\r\nAnswer shown here: https:\/\/stackoverflow.com\/questions\/2457777\/using-sti-path-with-same-controller\r\n\r\nThe `.becomes` method is defined as mainly used for solving STI problems like your `form_for` one.\r\n\r\n`.becomes` info here: http:\/\/apidock.com\/rails\/ActiveRecord\/Base\/becomes\r\n\r\nSuper late response, but this is the best answer I could find and it worked well for me. Hope this helps some one. Cheers!",
        "body": "<p>I was having trouble with this problem too and came by this answer on a question similar to ours. It worked for me.<\/p>\n\n<pre><code>form_for @list.becomes(List)\n<\/code><\/pre>\n\n<p>Answer shown here: <a href=\"https:\/\/stackoverflow.com\/questions\/2457777\/using-sti-path-with-same-controller\">Using STI path with same controller<\/a><\/p>\n\n<p>The <code>.becomes<\/code> method is defined as mainly used for solving STI problems like your <code>form_for<\/code> one.<\/p>\n\n<p><code>.becomes<\/code> info here: <a href=\"http:\/\/apidock.com\/rails\/ActiveRecord\/Base\/becomes\" rel=\"noreferrer\">http:\/\/apidock.com\/rails\/ActiveRecord\/Base\/becomes<\/a><\/p>\n\n<p>Super late response, but this is the best answer I could find and it worked well for me. Hope this helps some one. Cheers!<\/p>\n",
        "last_edit_date": 1512074366.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 99169,
            "reputation": 2517,
            "user_id": 268016,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/i.stack.imgur.com\/Bwj9S.jpg?s=256&g=1",
            "display_name": "Yuri Ghensev",
            "link": "https:\/\/stackoverflow.com\/users\/268016\/yuri-ghensev"
        },
        "is_accepted": false,
        "score": 20,
        "last_activity_date": 1529081933,
        "creation_date": 1486226598,
        "answer_id": 42042848,
        "question_id": 9572860,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "None of the previous answers (to this date) gives the correct difference in days between two dates.\r\n\r\nThe one that comes closest is by [thatdankent][1]. A full answer would convert `to_i` and then divide:\r\n\r\n    (Time.now.to_i - 23.hours.ago.to_i) \/ 86400\r\n    &gt;&gt; 0\r\n    \r\n    (Time.now.to_i - 25.hours.ago.to_i) \/ 86400\r\n    &gt;&gt; 1\r\n    \r\n    (Time.now.to_i - 1.day.ago.to_i) \/ 86400\r\n    &gt;&gt; 1\r\n\r\nIn the question&#39;s specific example, one should not parse to `Date` if the time passed is relevant. Use `Time.parse` instead.\r\n\r\n  [1]: https:\/\/stackoverflow.com\/a\/27091635\/268016",
        "body": "<p>None of the previous answers (to this date) gives the correct difference in days between two dates.<\/p>\n\n<p>The one that comes closest is by <a href=\"https:\/\/stackoverflow.com\/a\/27091635\/268016\">thatdankent<\/a>. A full answer would convert <code>to_i<\/code> and then divide:<\/p>\n\n<pre><code>(Time.now.to_i - 23.hours.ago.to_i) \/ 86400\n&gt;&gt; 0\n\n(Time.now.to_i - 25.hours.ago.to_i) \/ 86400\n&gt;&gt; 1\n\n(Time.now.to_i - 1.day.ago.to_i) \/ 86400\n&gt;&gt; 1\n<\/code><\/pre>\n\n<p>In the question's specific example, one should not parse to <code>Date<\/code> if the time passed is relevant. Use <code>Time.parse<\/code> instead.<\/p>\n",
        "last_edit_date": 1529081933.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 59908,
            "reputation": 103595,
            "user_id": 179125,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/4d9968add4ad2af158fbdd7c24a87876?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "Jordan Running",
            "link": "https:\/\/stackoverflow.com\/users\/179125\/jordan-running"
        },
        "is_accepted": false,
        "score": 19,
        "last_activity_date": 1255037373,
        "creation_date": 1255037373,
        "answer_id": 1540615,
        "question_id": 63998,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "I&#39;m late to the party, but:\r\n\r\nYou can easily take two equal-length arrays and turn them into a hash with one array supplying the keys and the other the values:\r\n\r\n    a = [:x, :y, :z]\r\n    b = [123, 456, 789]\r\n    \r\n    Hash[a.zip(b)]\r\n    # =&gt; { :x =&gt; 123, :y =&gt; 456, :z =&gt; 789 }\r\n\r\n(This works because Array#zip &quot;zips&quot; up the values from the two arrays:\r\n\r\n    a.zip(b)  # =&gt; [[:x, 123], [:y, 456], [:z, 789]]\r\n\r\nAnd Hash[] can take just such an array. I&#39;ve seen people do this as well:\r\n\r\n    Hash[*a.zip(b).flatten]  # unnecessary!\r\n\r\nWhich yields the same result, but the splat and flatten are wholly unnecessary--perhaps they weren&#39;t in the past?)",
        "body": "<p>I'm late to the party, but:<\/p>\n\n<p>You can easily take two equal-length arrays and turn them into a hash with one array supplying the keys and the other the values:<\/p>\n\n<pre><code>a = [:x, :y, :z]\nb = [123, 456, 789]\n\nHash[a.zip(b)]\n# =&gt; { :x =&gt; 123, :y =&gt; 456, :z =&gt; 789 }\n<\/code><\/pre>\n\n<p>(This works because Array#zip \"zips\" up the values from the two arrays:<\/p>\n\n<pre><code>a.zip(b)  # =&gt; [[:x, 123], [:y, 456], [:z, 789]]\n<\/code><\/pre>\n\n<p>And Hash[] can take just such an array. I've seen people do this as well:<\/p>\n\n<pre><code>Hash[*a.zip(b).flatten]  # unnecessary!\n<\/code><\/pre>\n\n<p>Which yields the same result, but the splat and flatten are wholly unnecessary--perhaps they weren't in the past?)<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": 1262465968.0
    },
    {
        "owner": {
            "account_id": 579,
            "reputation": 166735,
            "user_id": 745,
            "user_type": "registered",
            "accept_rate": 90,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/edf857d71f672d8f411ef6b8376316b8?s=256&d=identicon&r=PG",
            "display_name": "dbr",
            "link": "https:\/\/stackoverflow.com\/users\/745\/dbr"
        },
        "is_accepted": false,
        "score": 19,
        "last_activity_date": 1256408845,
        "creation_date": 1256408845,
        "answer_id": 1618689,
        "question_id": 1604305,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "`a[0...-1]` seems like the best way. The array slicing syntax was created for exactly this purpose...\r\n\r\nAlternatively, if you don&#39;t mind modifying the array in place, you could just call `a.pop`:\r\n\r\n    &gt;&gt; a = [1, 2, 3, 4]\r\n    &gt;&gt; a.pop\r\n    &gt;&gt; a\r\n    =&gt; [1, 2, 3]",
        "body": "<p><code>a[0...-1]<\/code> seems like the best way. The array slicing syntax was created for exactly this purpose...<\/p>\n\n<p>Alternatively, if you don't mind modifying the array in place, you could just call <code>a.pop<\/code>:<\/p>\n\n<pre><code>&gt;&gt; a = [1, 2, 3, 4]\n&gt;&gt; a.pop\n&gt;&gt; a\n=&gt; [1, 2, 3]\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 83474,
            "reputation": 4115,
            "user_id": 234025,
            "user_type": "registered",
            "accept_rate": 86,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/63130e2521f1240744def85fc8e1c4e8?s=256&d=identicon&r=PG",
            "display_name": "Trevoke",
            "link": "https:\/\/stackoverflow.com\/users\/234025\/trevoke"
        },
        "is_accepted": false,
        "score": 19,
        "last_activity_date": 1264428803,
        "creation_date": 1264428803,
        "answer_id": 2132820,
        "question_id": 63998,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "**Auto-vivifying hashes in Ruby**\r\n\r\n    def cnh # silly name &quot;create nested hash&quot;\r\n      Hash.new {|h,k| h[k] = Hash.new(&amp;h.default_proc)}\r\n    end\r\n    my_hash = cnh\r\n    my_hash[1][2][3] = 4\r\n    my_hash # =&gt; { 1 =&gt; { 2 =&gt; { 3 =&gt;4 } } }\r\n\r\nThis can just be damn handy.",
        "body": "<p><strong>Auto-vivifying hashes in Ruby<\/strong><\/p>\n\n<pre><code>def cnh # silly name \"create nested hash\"\n  Hash.new {|h,k| h[k] = Hash.new(&amp;h.default_proc)}\nend\nmy_hash = cnh\nmy_hash[1][2][3] = 4\nmy_hash # =&gt; { 1 =&gt; { 2 =&gt; { 3 =&gt;4 } } }\n<\/code><\/pre>\n\n<p>This can just be damn handy.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": 1264428803.0
    },
    {
        "owner": {
            "account_id": 34446,
            "reputation": 1949,
            "user_id": 97396,
            "user_type": "registered",
            "accept_rate": 89,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/c788656fcd17022500a8388390cad124?s=256&d=identicon&r=PG",
            "display_name": "Edu",
            "link": "https:\/\/stackoverflow.com\/users\/97396\/edu"
        },
        "is_accepted": false,
        "score": 19,
        "last_activity_date": 1301474981,
        "creation_date": 1301474981,
        "answer_id": 5484073,
        "question_id": 5483889,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "    sorted = dataarray.sort {|a,b| a[:zip] &lt;=&gt; b[:zip]}",
        "body": "<pre><code>sorted = dataarray.sort {|a,b| a[:zip] &lt;=&gt; b[:zip]}\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1214052,
            "reputation": 1625,
            "user_id": 1182000,
            "user_type": "registered",
            "accept_rate": 75,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/0d130f179f85401f248e6ebc2ef8292f?s=256&d=identicon&r=PG",
            "display_name": "user1182000",
            "link": "https:\/\/stackoverflow.com\/users\/1182000\/user1182000"
        },
        "is_accepted": false,
        "score": 19,
        "last_activity_date": 1544717956,
        "creation_date": 1337468903,
        "answer_id": 10669514,
        "question_id": 882070,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "You can make any class sortable by overriding the &lt;=&gt; method:\r\n\r\n    class Person\r\n\r\n      attr_accessor :first_name, :last_name\r\n\r\n      def initialize(first_name, last_name)\r\n        @first_name = first_name\r\n        @last_name = last_name\r\n      end\r\n\r\n      def &lt;=&gt;(other)\r\n        @last_name + @first_name &lt;=&gt; other.last_name + other.first_name\r\n      end\r\n\r\n    end\r\n\r\nNow an array of Person objects will be sortable on last_name.\r\n\r\n    ar = [Person.new(&quot;Eric&quot;, &quot;Cunningham&quot;), Person.new(&quot;Homer&quot;, &quot;Allen&quot;)]\r\n\r\n    puts ar  # =&gt; [ &quot;Eric Cunningham&quot;, &quot;Homer Allen&quot;]  (Person objects!)\r\n\r\n    ar.sort!\r\n\r\n    puts ar  # =&gt; [ &quot;Homer Allen&quot;, &quot;Eric Cunningham&quot; ]\r\n\r\n    ",
        "body": "<p>You can make any class sortable by overriding the &lt;=> method:<\/p>\n\n<pre><code>class Person\n\n  attr_accessor :first_name, :last_name\n\n  def initialize(first_name, last_name)\n    @first_name = first_name\n    @last_name = last_name\n  end\n\n  def &lt;=&gt;(other)\n    @last_name + @first_name &lt;=&gt; other.last_name + other.first_name\n  end\n\nend\n<\/code><\/pre>\n\n<p>Now an array of Person objects will be sortable on last_name.<\/p>\n\n<pre><code>ar = [Person.new(\"Eric\", \"Cunningham\"), Person.new(\"Homer\", \"Allen\")]\n\nputs ar  # =&gt; [ \"Eric Cunningham\", \"Homer Allen\"]  (Person objects!)\n\nar.sort!\n\nputs ar  # =&gt; [ \"Homer Allen\", \"Eric Cunningham\" ]\n<\/code><\/pre>\n",
        "last_edit_date": 1544717956.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 255385,
            "reputation": 8205,
            "user_id": 535406,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/i.stack.imgur.com\/kS26l.png?s=256&g=1",
            "display_name": "jibiel",
            "link": "https:\/\/stackoverflow.com\/users\/535406\/jibiel"
        },
        "is_accepted": false,
        "score": 19,
        "last_activity_date": 1651075768,
        "creation_date": 1386510073,
        "answer_id": 20454073,
        "question_id": 4576932,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "If you&#39;re on `rails` which utilizes [Erubis][1] \u2014 the shortest way to do it is\r\n\r\n    &lt;%== @str &gt;\r\n\r\nNote the double equal sign. [See][2] related question on SO for more info.\r\n\r\n\r\n  [1]: http:\/\/www.kuwata-lab.com\/erubis\/\r\n  [2]: https:\/\/stackoverflow.com\/q\/13142326\/535406",
        "body": "<p>If you're on <code>rails<\/code> which utilizes <a href=\"http:\/\/www.kuwata-lab.com\/erubis\/\" rel=\"nofollow noreferrer\">Erubis<\/a> \u2014 the shortest way to do it is<\/p>\n<pre><code>&lt;%== @str &gt;\n<\/code><\/pre>\n<p>Note the double equal sign. <a href=\"https:\/\/stackoverflow.com\/q\/13142326\/535406\">See<\/a> related question on SO for more info.<\/p>\n",
        "last_edit_date": 1651075768.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1979871,
            "reputation": 117277,
            "user_id": 2767755,
            "user_type": "registered",
            "accept_rate": 84,
            "profile_image": "https:\/\/i.stack.imgur.com\/BkC8q.jpg?s=256&g=1",
            "display_name": "Arup Rakshit",
            "link": "https:\/\/stackoverflow.com\/users\/2767755\/arup-rakshit"
        },
        "is_accepted": false,
        "score": 19,
        "last_activity_date": 1393279749,
        "creation_date": 1393279749,
        "answer_id": 22000141,
        "question_id": 4346335,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "You can use [`Numeric#step`](http:\/\/www.ruby-doc.org\/core-2.1.0\/Numeric.html#method-i-step).\r\n\r\n    0.step(30,5) do |num|\r\n      puts &quot;number is #{num}&quot;\r\n    end\r\n    # &gt;&gt; number is 0\r\n    # &gt;&gt; number is 5\r\n    # &gt;&gt; number is 10\r\n    # &gt;&gt; number is 15\r\n    # &gt;&gt; number is 20\r\n    # &gt;&gt; number is 25\r\n    # &gt;&gt; number is 30",
        "body": "<p>You can use <a href=\"http:\/\/www.ruby-doc.org\/core-2.1.0\/Numeric.html#method-i-step\" rel=\"noreferrer\"><code>Numeric#step<\/code><\/a>.<\/p>\n\n<pre><code>0.step(30,5) do |num|\n  puts \"number is #{num}\"\nend\n# &gt;&gt; number is 0\n# &gt;&gt; number is 5\n# &gt;&gt; number is 10\n# &gt;&gt; number is 15\n# &gt;&gt; number is 20\n# &gt;&gt; number is 25\n# &gt;&gt; number is 30\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 218208,
            "reputation": 8755,
            "user_id": 474411,
            "user_type": "registered",
            "accept_rate": 78,
            "profile_image": "https:\/\/i.stack.imgur.com\/FNiTs.jpg?s=256&g=1",
            "display_name": "jobwat",
            "link": "https:\/\/stackoverflow.com\/users\/474411\/jobwat"
        },
        "is_accepted": false,
        "score": 19,
        "last_activity_date": 1435354465,
        "creation_date": 1400142576,
        "answer_id": 23673008,
        "question_id": 4507149,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Use *type* in the routes:\r\n\r\n    resources :employee, controller: &#39;person&#39;, type: &#39;Employee&#39; \r\n\r\nhttp:\/\/samurails.com\/tutorial\/single-table-inheritance-with-rails-4-part-2\/",
        "body": "<p>Use <em>type<\/em> in the routes:<\/p>\n\n<pre><code>resources :employee, controller: 'person', type: 'Employee' \n<\/code><\/pre>\n\n<p><a href=\"http:\/\/samurails.com\/tutorial\/single-table-inheritance-with-rails-4-part-2\/\" rel=\"noreferrer\">http:\/\/samurails.com\/tutorial\/single-table-inheritance-with-rails-4-part-2\/<\/a><\/p>\n",
        "last_edit_date": 1435354465.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 6280112,
            "reputation": 414,
            "user_id": 4881433,
            "user_type": "registered",
            "accept_rate": 80,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/4ea9d858b2de8fcb253050b219316cc2?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "astrasleepz",
            "link": "https:\/\/stackoverflow.com\/users\/4881433\/astrasleepz"
        },
        "is_accepted": false,
        "score": 19,
        "last_activity_date": 1444113595,
        "creation_date": 1444113595,
        "answer_id": 32963315,
        "question_id": 31972968,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "You have to update Xcode to the newest one (v7.0.1) and everything will work as normal. \r\n\r\nIf after you install the newest Xcode and still doesn&#39;t work try to install gem in this way: \r\n\r\n    sudo gem install -n \/usr\/local\/bin GEM_NAME_HERE\r\nFor example: \r\n\r\n    sudo gem install -n \/usr\/local\/bin fakes3\r\n    sudo gem install -n \/usr\/local\/bin compass\r\n    sudo gem install -n \/usr\/local\/bin susy\r\n\r\n ",
        "body": "<p>You have to update Xcode to the newest one (v7.0.1) and everything will work as normal. <\/p>\n\n<p>If after you install the newest Xcode and still doesn't work try to install gem in this way: <\/p>\n\n<pre><code>sudo gem install -n \/usr\/local\/bin GEM_NAME_HERE\n<\/code><\/pre>\n\n<p>For example: <\/p>\n\n<pre><code>sudo gem install -n \/usr\/local\/bin fakes3\nsudo gem install -n \/usr\/local\/bin compass\nsudo gem install -n \/usr\/local\/bin susy\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 7376724,
            "reputation": 5806,
            "user_id": 5615038,
            "user_type": "registered",
            "accept_rate": 86,
            "profile_image": "https:\/\/i.stack.imgur.com\/wW8mP.jpg?s=256&g=1",
            "display_name": "Fangxing",
            "link": "https:\/\/stackoverflow.com\/users\/5615038\/fangxing"
        },
        "is_accepted": false,
        "score": 19,
        "last_activity_date": 1535432418,
        "creation_date": 1535432418,
        "answer_id": 52050389,
        "question_id": 24886371,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Use Rails runner in one line\r\n\r\n    rails runner &#39;Sidekiq.redis { |conn| conn.flushdb }&#39;",
        "body": "<p>Use Rails runner in one line<\/p>\n\n<pre><code>rails runner 'Sidekiq.redis { |conn| conn.flushdb }'\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 30840,
            "reputation": 6393,
            "user_id": 84349,
            "user_type": "registered",
            "accept_rate": 71,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/b98a3bcf2c5a7a38b7596da957b05069?s=256&d=identicon&r=PG",
            "display_name": "Manuel",
            "link": "https:\/\/stackoverflow.com\/users\/84349\/manuel"
        },
        "is_accepted": false,
        "score": 18,
        "last_activity_date": 1238358503,
        "creation_date": 1238358026,
        "answer_id": 695302,
        "question_id": 695290,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "You can use [slice()][1] for this:\r\n\r\n    &gt;&gt; foo = [1,2,3,4,5,6]\r\n    =&gt; [1, 2, 3, 4, 5, 6]\r\n    &gt;&gt; bar = [10,20,30,40,50,60]\r\n    =&gt; [10, 20, 30, 40, 50, 60]\r\n    &gt;&gt; half = foo.length \/ 2\r\n    =&gt; 3\r\n    &gt;&gt; foobar = foo.slice(0, half) + bar.slice(half, foo.length)\r\n    =&gt; [1, 2, 3, 40, 50, 60]\r\n\r\nBy the way, to the best of my knowledge, Python &quot;lists&quot; are just efficiently implemented dynamically growing arrays.  Insertion at the beginning is in O(n), insertion at the end is amortized O(1), random access is O(1).\r\n\r\n  [1]: http:\/\/www.ruby-doc.org\/core\/classes\/Array.html#M002228",
        "body": "<p>You can use <a href=\"http:\/\/www.ruby-doc.org\/core\/classes\/Array.html#M002228\" rel=\"noreferrer\">slice()<\/a> for this:<\/p>\n\n<pre><code>&gt;&gt; foo = [1,2,3,4,5,6]\n=&gt; [1, 2, 3, 4, 5, 6]\n&gt;&gt; bar = [10,20,30,40,50,60]\n=&gt; [10, 20, 30, 40, 50, 60]\n&gt;&gt; half = foo.length \/ 2\n=&gt; 3\n&gt;&gt; foobar = foo.slice(0, half) + bar.slice(half, foo.length)\n=&gt; [1, 2, 3, 40, 50, 60]\n<\/code><\/pre>\n\n<p>By the way, to the best of my knowledge, Python \"lists\" are just efficiently implemented dynamically growing arrays.  Insertion at the beginning is in O(n), insertion at the end is amortized O(1), random access is O(1).<\/p>\n",
        "last_edit_date": 1238358503.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2172,
            "reputation": 365278,
            "user_id": 2988,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/ed181f8c80df53d2b67a4f4fff088ed4?s=256&d=identicon&r=PG",
            "display_name": "J&#246;rg W Mittag",
            "link": "https:\/\/stackoverflow.com\/users\/2988\/j%c3%b6rg-w-mittag"
        },
        "is_accepted": false,
        "score": 18,
        "last_activity_date": 1308672335,
        "creation_date": 1308672335,
        "answer_id": 6428467,
        "question_id": 6427548,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "&gt;Is there a way to access `Foo::CONSTANT_NAME`?\r\n\r\nYes, there is:\r\n\r\n    Foo::CONSTANT_NAME",
        "body": "<blockquote>\n  <p>Is there a way to access <code>Foo::CONSTANT_NAME<\/code>?<\/p>\n<\/blockquote>\n\n<p>Yes, there is:<\/p>\n\n<pre><code>Foo::CONSTANT_NAME\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 25202,
            "reputation": 2920,
            "user_id": 64635,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/3a49ee98333d753103cf708e40d36984?s=256&d=identicon&r=PG",
            "display_name": "chesterbr",
            "link": "https:\/\/stackoverflow.com\/users\/64635\/chesterbr"
        },
        "is_accepted": false,
        "score": 18,
        "last_activity_date": 1375973030,
        "creation_date": 1375973030,
        "answer_id": 18129010,
        "question_id": 4907668,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "`rvm implode` (see [cli docs][1]) seems to work - and it even tells you where to look at for leftovers\r\n\r\n  [1]: http:\/\/rvm.io\/rvm\/cli",
        "body": "<p><code>rvm implode<\/code> (see <a href=\"http:\/\/rvm.io\/rvm\/cli\">cli docs<\/a>) seems to work - and it even tells you where to look at for leftovers<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 961098,
            "reputation": 448,
            "user_id": 985436,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/5aae2aeace0b0ec7b82619f68b6d905f?s=256&d=identicon&r=PG",
            "display_name": "Yuki Matsukura",
            "link": "https:\/\/stackoverflow.com\/users\/985436\/yuki-matsukura"
        },
        "is_accepted": false,
        "score": 18,
        "last_activity_date": 1392965023,
        "creation_date": 1392965023,
        "answer_id": 21927184,
        "question_id": 2943065,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Usually timestamp has no timezone.\r\n\r\n    % irb\r\n    &gt; Time.now.to_i == Time.now.getutc.to_i\r\n    =&gt; true\r\n\r\n",
        "body": "<p>Usually timestamp has no timezone.<\/p>\n\n<pre><code>% irb\n&gt; Time.now.to_i == Time.now.getutc.to_i\n=&gt; true\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4656498,
            "reputation": 2760,
            "user_id": 3771976,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/cnoOG.png?s=256&g=1",
            "display_name": "nbering",
            "link": "https:\/\/stackoverflow.com\/users\/3771976\/nbering"
        },
        "is_accepted": false,
        "score": 18,
        "last_activity_date": 1417148536,
        "creation_date": 1417148536,
        "answer_id": 27181855,
        "question_id": 5528839,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Just adding my voice to the crowd, but mkmf.log said something about not being able to find symbols for x86_64 architecture.  I stumbled across this solution:\r\n\r\n    sudo env ARCHFLAGS=&quot;-arch x86_64&quot; gem install nokogiri -- --use-system-libraries\r\n\r\nMay not solve anything for the original asker, but this may help someone.\r\n\r\nSide Note: nokogiri has been my highest barrier to using ruby applications.  Every time someone depends on a different version I have to figure out how to build it.  And my problem is different every time.",
        "body": "<p>Just adding my voice to the crowd, but mkmf.log said something about not being able to find symbols for x86_64 architecture.  I stumbled across this solution:<\/p>\n\n<pre><code>sudo env ARCHFLAGS=\"-arch x86_64\" gem install nokogiri -- --use-system-libraries\n<\/code><\/pre>\n\n<p>May not solve anything for the original asker, but this may help someone.<\/p>\n\n<p>Side Note: nokogiri has been my highest barrier to using ruby applications.  Every time someone depends on a different version I have to figure out how to build it.  And my problem is different every time.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 371896,
            "reputation": 2381,
            "user_id": 720665,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/41f1d08d4f04960ad0766c1d8e004f1d?s=256&d=identicon&r=PG",
            "display_name": "David Salamon",
            "link": "https:\/\/stackoverflow.com\/users\/720665\/david-salamon"
        },
        "is_accepted": false,
        "score": 18,
        "last_activity_date": 1480256740,
        "creation_date": 1480256740,
        "answer_id": 40830016,
        "question_id": 2119064,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "In case you\r\n\r\n - installed ruby gems with sudo\r\n - want to install gems without sudo \r\n - _don&#39;t want to install rvm\/rbenv_\r\n\r\nadd the following to your `.bash_profile` :\r\n\r\n    export GEM_HOME=\/Users\/\u2039your_user\u203a\/.gem\r\n    export PATH=&quot;$GEM_HOME\/bin:$PATH&quot;\r\n\r\nOpen a new tab in Terminal OR `source ~\/.bash_profile` and you&#39;re good to go!",
        "body": "<p>In case you<\/p>\n\n<ul>\n<li>installed ruby gems with sudo<\/li>\n<li>want to install gems without sudo <\/li>\n<li><em>don't want to install rvm\/rbenv<\/em><\/li>\n<\/ul>\n\n<p>add the following to your <code>.bash_profile<\/code> :<\/p>\n\n<pre><code>export GEM_HOME=\/Users\/\u2039your_user\u203a\/.gem\nexport PATH=\"$GEM_HOME\/bin:$PATH\"\n<\/code><\/pre>\n\n<p>Open a new tab in Terminal OR <code>source ~\/.bash_profile<\/code> and you're good to go!<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1985212,
            "reputation": 11973,
            "user_id": 2277817,
            "user_type": "registered",
            "accept_rate": 57,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/ce18a9ed86d758752f941a75aaa982bf?s=256&d=identicon&r=PG",
            "display_name": "Gowtham",
            "link": "https:\/\/stackoverflow.com\/users\/2277817\/gowtham"
        },
        "is_accepted": false,
        "score": 18,
        "last_activity_date": 1569337440,
        "creation_date": 1569337440,
        "answer_id": 58083244,
        "question_id": 27768420,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "If you&#39;re on Mac and recently upgraded your Xcode tools, run the following commands:\r\n```\r\nsudo xcode-select --install\r\nsudo xcodebuild -license\r\n```",
        "body": "<p>If you're on Mac and recently upgraded your Xcode tools, run the following commands:<\/p>\n\n<pre><code>sudo xcode-select --install\nsudo xcodebuild -license\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 462713,
            "reputation": 9309,
            "user_id": 865175,
            "user_type": "registered",
            "accept_rate": 84,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/5ede8c46975134f092fd38bdff2ec8c6?s=256&d=identicon&r=PG",
            "display_name": "Iulian Onofrei",
            "link": "https:\/\/stackoverflow.com\/users\/865175\/iulian-onofrei"
        },
        "is_accepted": false,
        "score": 18,
        "last_activity_date": 1619731234,
        "creation_date": 1615807031,
        "answer_id": 66636951,
        "question_id": 27768420,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "My issue was that I updated to macOS Big Sur, and somehow, the command line tools were outdated.\r\n\r\nI know this because, when I tried to run `brew install rbenv`, I received this error:\r\n\r\n```none\r\nError: Your Command Line Tools (CLT) does not support macOS 11.\r\nIt is either outdated or was modified.\r\nPlease update your Command Line Tools (CLT) or delete it if no updates are available.\r\nUpdate them from Software Update in System Preferences or run:\r\n  softwareupdate --all --install --force\r\n\r\nIf that doesn&#39;t show you any updates, run:\r\n  sudo rm -rf \/Library\/Developer\/CommandLineTools\r\n  sudo xcode-select --install\r\n\r\nAlternatively, manually download them from:\r\n  https:\/\/developer.apple.com\/download\/more\/.\r\n```\r\n\r\nSo I ran\r\n\r\n```sh\r\nsudo rm -rf \/Library\/Developer\/CommandLineTools\r\nsudo xcode-select --install\r\n```\r\n\r\nand after it finished, the gem installed successfully.",
        "body": "<p>My issue was that I updated to macOS Big Sur, and somehow, the command line tools were outdated.<\/p>\n<p>I know this because, when I tried to run <code>brew install rbenv<\/code>, I received this error:<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>Error: Your Command Line Tools (CLT) does not support macOS 11.\nIt is either outdated or was modified.\nPlease update your Command Line Tools (CLT) or delete it if no updates are available.\nUpdate them from Software Update in System Preferences or run:\n  softwareupdate --all --install --force\n\nIf that doesn't show you any updates, run:\n  sudo rm -rf \/Library\/Developer\/CommandLineTools\n  sudo xcode-select --install\n\nAlternatively, manually download them from:\n  https:\/\/developer.apple.com\/download\/more\/.\n<\/code><\/pre>\n<p>So I ran<\/p>\n<pre class=\"lang-sh prettyprint-override\"><code>sudo rm -rf \/Library\/Developer\/CommandLineTools\nsudo xcode-select --install\n<\/code><\/pre>\n<p>and after it finished, the gem installed successfully.<\/p>\n",
        "last_edit_date": 1619731234.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 25854,
            "reputation": 18224,
            "user_id": 66801,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/92497f51734ed56687928d5fd68d870a?s=256&d=identicon&r=PG",
            "display_name": "Sarah Mei",
            "link": "https:\/\/stackoverflow.com\/users\/66801\/sarah-mei"
        },
        "is_accepted": false,
        "score": 17,
        "last_activity_date": 1380292344,
        "creation_date": 1236729775,
        "answer_id": 632770,
        "question_id": 632742,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "You could try something like this in your Person model:\r\n\r\n    after_save :something_cool, :unless =&gt; :skip_callbacks\r\n\r\n    def skip_callbacks\r\n      ENV[RAILS_ENV] == &#39;development&#39; # or something more complicated\r\n    end\r\n     \r\n**EDIT:** after_save is not a symbol, but that&#39;s at least the 1,000th time I&#39;ve tried to make it one. ",
        "body": "<p>You could try something like this in your Person model:<\/p>\n\n<pre><code>after_save :something_cool, :unless =&gt; :skip_callbacks\n\ndef skip_callbacks\n  ENV[RAILS_ENV] == 'development' # or something more complicated\nend\n<\/code><\/pre>\n\n<p><strong>EDIT:<\/strong> after_save is not a symbol, but that's at least the 1,000th time I've tried to make it one. <\/p>\n",
        "last_edit_date": 1380292344.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 14848,
            "reputation": 12034,
            "user_id": 30874,
            "user_type": "registered",
            "accept_rate": 62,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/5f4106ce061d0d3f0391030f19c517b8?s=256&d=identicon&r=PG",
            "display_name": "Wim",
            "link": "https:\/\/stackoverflow.com\/users\/30874\/wim"
        },
        "is_accepted": false,
        "score": 17,
        "last_activity_date": 1258207471,
        "creation_date": 1258207471,
        "answer_id": 1734319,
        "question_id": 1734307,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "Use:\r\n\r\n&lt;code&gt;myarray.index &quot;valuetoFind&quot;&lt;\/code&gt;\r\n\r\nThat will return you the index of the element you want or nil if your array doesn&#39;t contain the value.",
        "body": "<p>Use:<\/p>\n\n<p><code>myarray.index \"valuetoFind\"<\/code><\/p>\n\n<p>That will return you the index of the element you want or nil if your array doesn't contain the value.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 76916,
            "reputation": 27576,
            "user_id": 219883,
            "user_type": "registered",
            "accept_rate": 83,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/c35b5b0f9e7cce48864f4f1545ead995?s=256&d=identicon&r=PG",
            "display_name": "Taryn East",
            "link": "https:\/\/stackoverflow.com\/users\/219883\/taryn-east"
        },
        "is_accepted": false,
        "score": 17,
        "last_activity_date": 1267722989,
        "creation_date": 1267722989,
        "answer_id": 2381263,
        "question_id": 2381163,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "Do you need the object itself or do you just need to know if there *is* an object that satisfies.\r\nIf the former then yes: use find:\r\n\r\n    found_object = my_array.find { |e| e.satisfies_condition? }\r\n\r\notherwise you can use `any?`\r\n\r\n    found_it = my_array.any?  { |e| e.satisfies_condition? }\r\n\r\n\r\nThe latter will bail with &quot;true&quot; when it finds one that satisfies the condition.\r\nThe former will do the same, but return the object.",
        "body": "<p>Do you need the object itself or do you just need to know if there <em>is<\/em> an object that satisfies.\nIf the former then yes: use find:<\/p>\n\n<pre><code>found_object = my_array.find { |e| e.satisfies_condition? }\n<\/code><\/pre>\n\n<p>otherwise you can use <code>any?<\/code><\/p>\n\n<pre><code>found_it = my_array.any?  { |e| e.satisfies_condition? }\n<\/code><\/pre>\n\n<p>The latter will bail with \"true\" when it finds one that satisfies the condition.\nThe former will do the same, but return the object.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 116167,
            "reputation": 1494,
            "user_id": 304734,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/62a23be230c7b0e0e196e1e995c45b75?s=256&d=identicon&r=PG",
            "display_name": "Jaime Cham",
            "link": "https:\/\/stackoverflow.com\/users\/304734\/jaime-cham"
        },
        "is_accepted": false,
        "score": 17,
        "last_activity_date": 1368460962,
        "creation_date": 1270030491,
        "answer_id": 2551994,
        "question_id": 49274,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Another unexpected behavior with the accepted solution (with 1.8, 1.9 is ok):\r\n\r\n    &gt;&gt; Integer(:foobar)\r\n    =&gt; 26017\r\n    &gt;&gt; Integer(:yikes)\r\n    =&gt; 26025\r\n\r\nso if you&#39;re not sure what is being passed in, make sure you add a `.to_s`.\r\n",
        "body": "<p>Another unexpected behavior with the accepted solution (with 1.8, 1.9 is ok):<\/p>\n\n<pre><code>&gt;&gt; Integer(:foobar)\n=&gt; 26017\n&gt;&gt; Integer(:yikes)\n=&gt; 26025\n<\/code><\/pre>\n\n<p>so if you're not sure what is being passed in, make sure you add a <code>.to_s<\/code>.<\/p>\n",
        "last_edit_date": 1368460962.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 351502,
            "reputation": 4174,
            "user_id": 688018,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/8e62920c3d07cef58b9d539971716edf?s=256&d=identicon&r=PG",
            "display_name": "Pablo Castellazzi",
            "link": "https:\/\/stackoverflow.com\/users\/688018\/pablo-castellazzi"
        },
        "is_accepted": false,
        "score": 17,
        "last_activity_date": 1307093458,
        "creation_date": 1307092480,
        "answer_id": 6225159,
        "question_id": 6224875,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "The proper use of [try](http:\/\/api.rubyonrails.org\/classes\/Object.html#method-i-try) with a hash is `@sesion.try(:[], :comments)`.\r\n\r\n    @session.try(:[], :comments).try(:[], commend.id).try(:[], &#39;temp_value&#39;)",
        "body": "<p>The proper use of <a href=\"http:\/\/api.rubyonrails.org\/classes\/Object.html#method-i-try\" rel=\"noreferrer\">try<\/a> with a hash is <code>@sesion.try(:[], :comments)<\/code>.<\/p>\n\n<pre><code>@session.try(:[], :comments).try(:[], commend.id).try(:[], 'temp_value')\n<\/code><\/pre>\n",
        "last_edit_date": 1307093458.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 135145,
            "reputation": 3145,
            "user_id": 337772,
            "user_type": "registered",
            "accept_rate": 73,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/224f5b1b5ee448ec8152236ede91908c?s=256&d=identicon&r=PG",
            "display_name": "eloyesp",
            "link": "https:\/\/stackoverflow.com\/users\/337772\/eloyesp"
        },
        "is_accepted": false,
        "score": 17,
        "last_activity_date": 1351558773,
        "creation_date": 1351558773,
        "answer_id": 13131811,
        "question_id": 4507149,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Following the idea of @Prathan Thananart but trying to not destroy nothing. (since there is so much magic involved)\r\n\r\n    class Person &lt; Contact\r\n      model_name.class_eval do\r\n        def route_key\r\n         &quot;contacts&quot;\r\n        end\r\n        def singular_route_key\r\n          superclass.model_name.singular_route_key\r\n        end\r\n      end\r\n    end\r\n\r\nNow url_for @person will map to contact_path as expected.",
        "body": "<p>Following the idea of @Prathan Thananart but trying to not destroy nothing. (since there is so much magic involved)<\/p>\n\n<pre><code>class Person &lt; Contact\n  model_name.class_eval do\n    def route_key\n     \"contacts\"\n    end\n    def singular_route_key\n      superclass.model_name.singular_route_key\n    end\n  end\nend\n<\/code><\/pre>\n\n<p>Now url_for @person will map to contact_path as expected.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 68446,
            "reputation": 4042,
            "user_id": 199685,
            "user_type": "registered",
            "accept_rate": 86,
            "profile_image": "https:\/\/i.stack.imgur.com\/A4tMA.jpg?s=256&g=1",
            "display_name": "Benjamin Dobell",
            "link": "https:\/\/stackoverflow.com\/users\/199685\/benjamin-dobell"
        },
        "is_accepted": false,
        "score": 17,
        "last_activity_date": 1453433942,
        "creation_date": 1418707344,
        "answer_id": 27498050,
        "question_id": 6224875,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "***Update:** As of Ruby 2.3 use [#dig][1]*\r\n\r\nMost objects that respond to [] expect an Integer argument, with Hash being an exception that will accept any object (such as strings or symbols).\r\n\r\nThe following is a slightly more robust version of [Arsen7&#39;s answer][2] that supports nested Array, Hash, as well as any other objects that expect an Integer passed to [].\r\n\r\nIt&#39;s not fool proof, as someone may have created an object that implements [] and *does not* accept an Integer argument. However, this solution works great in the common case e.g. pulling nested values from JSON (which has both Hash and Array):\r\n\r\n    class Hash\r\n      def get_deep(*fields)\r\n        fields.inject(self) { |acc, e| acc[e] if acc.is_a?(Hash) || (e.is_a?(Integer) &amp;&amp; acc.respond_to?(:[])) }\r\n      end\r\n    end\r\n\r\nIt can be used the same as Arsen7&#39;s solution but also supports arrays e.g.\r\n\r\n    json = { &#39;users&#39; =&gt; [ { &#39;name&#39; =&gt; { &#39;first_name&#39; =&gt; &#39;Frank&#39;} }, { &#39;name&#39; =&gt; { &#39;first_name&#39; =&gt; &#39;Bob&#39; } } ] }\r\n    \r\n    json.get_deep &#39;users&#39;, 1, &#39;name&#39;, &#39;first_name&#39; # Pulls out &#39;Bob&#39;\r\n\r\n\r\n  [1]: http:\/\/ruby-doc.org\/core-2.3.0_preview1\/Hash.html#method-i-dig\r\n  [2]: https:\/\/stackoverflow.com\/a\/6225321\/199685",
        "body": "<p><strong><em>Update:<\/strong> As of Ruby 2.3 use <a href=\"http:\/\/ruby-doc.org\/core-2.3.0_preview1\/Hash.html#method-i-dig\" rel=\"noreferrer\">#dig<\/a><\/em><\/p>\n\n<p>Most objects that respond to [] expect an Integer argument, with Hash being an exception that will accept any object (such as strings or symbols).<\/p>\n\n<p>The following is a slightly more robust version of <a href=\"https:\/\/stackoverflow.com\/a\/6225321\/199685\">Arsen7's answer<\/a> that supports nested Array, Hash, as well as any other objects that expect an Integer passed to [].<\/p>\n\n<p>It's not fool proof, as someone may have created an object that implements [] and <em>does not<\/em> accept an Integer argument. However, this solution works great in the common case e.g. pulling nested values from JSON (which has both Hash and Array):<\/p>\n\n<pre><code>class Hash\n  def get_deep(*fields)\n    fields.inject(self) { |acc, e| acc[e] if acc.is_a?(Hash) || (e.is_a?(Integer) &amp;&amp; acc.respond_to?(:[])) }\n  end\nend\n<\/code><\/pre>\n\n<p>It can be used the same as Arsen7's solution but also supports arrays e.g.<\/p>\n\n<pre><code>json = { 'users' =&gt; [ { 'name' =&gt; { 'first_name' =&gt; 'Frank'} }, { 'name' =&gt; { 'first_name' =&gt; 'Bob' } } ] }\n\njson.get_deep 'users', 1, 'name', 'first_name' # Pulls out 'Bob'\n<\/code><\/pre>\n",
        "last_edit_date": 1495535479.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 40507,
            "reputation": 1683,
            "user_id": 117382,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/12880949afed5ac116170c9e07d64fba?s=256&d=identicon&r=PG",
            "display_name": "jBilbo",
            "link": "https:\/\/stackoverflow.com\/users\/117382\/jbilbo"
        },
        "is_accepted": false,
        "score": 17,
        "last_activity_date": 1572424965,
        "creation_date": 1428513013,
        "answer_id": 29521078,
        "question_id": 20403063,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Old post, but I hope it helps anyone who enters here for a solution. I think it&#39;s easier and more reliable to just create the date manually:\r\n\r\n    it &quot;updates updated_at attribute&quot; do\r\n      freezed_time = Time.utc(2015, 1, 1, 12, 0, 0) #Put here any time you want\r\n      Timecop.freeze(freezed_time) do\r\n        patch :update\r\n        @article.reload\r\n        expect(@article.updated_at).to eq(freezed_time)\r\n      end\r\n    end\r\n\r\nThis ensures the stored date is the right one, without doing `to_x` or worrying about decimals.",
        "body": "<p>Old post, but I hope it helps anyone who enters here for a solution. I think it's easier and more reliable to just create the date manually:<\/p>\n\n<pre><code>it \"updates updated_at attribute\" do\n  freezed_time = Time.utc(2015, 1, 1, 12, 0, 0) #Put here any time you want\n  Timecop.freeze(freezed_time) do\n    patch :update\n    @article.reload\n    expect(@article.updated_at).to eq(freezed_time)\n  end\nend\n<\/code><\/pre>\n\n<p>This ensures the stored date is the right one, without doing <code>to_x<\/code> or worrying about decimals.<\/p>\n",
        "last_edit_date": 1572424965.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5875605,
            "reputation": 2103,
            "user_id": 4626508,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/HRvxf.jpg?s=256&g=1",
            "display_name": "rbashish",
            "link": "https:\/\/stackoverflow.com\/users\/4626508\/rbashish"
        },
        "is_accepted": false,
        "score": 17,
        "last_activity_date": 1455551403,
        "creation_date": 1454696858,
        "answer_id": 35231025,
        "question_id": 28896733,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "If you are running **Windows 10** Pro x64, try installing `Ruby` [2.1.8 (x64)][1] with [Git Version 2.7.0][2]. This will surely allow you to run `rhc setup` as it did happened with me. Earlier I had a problem running &amp; installing latest version of `Ruby 2.2.4 (x64)` but when I downgraded to ruby version `2.1.8 (x64)` I was able to run `rhc setup` and configure `OpenShift client tools`on Windows. See the image for Ruby version I&#39;m using - `ruby 2.1.8p440 (2015-12-16 revision 53160) [x64-mingw32]`\r\n\r\n[![enter image description here][3]][3]\r\n\r\n[Read here][4] for getting started to `OpenShift client tools` on windows.\r\n\r\n\r\n  [1]: http:\/\/rubyinstaller.org\/downloads\/\r\n  [2]: http:\/\/www.git-scm.com\/download\/win\r\n  [3]: http:\/\/i.stack.imgur.com\/FnfRV.png\r\n  [4]: https:\/\/developers.openshift.com\/en\/getting-started-windows.html#client-tools",
        "body": "<p>If you are running <strong>Windows 10<\/strong> Pro x64, try installing <code>Ruby<\/code> <a href=\"http:\/\/rubyinstaller.org\/downloads\/\" rel=\"nofollow noreferrer\">2.1.8 (x64)<\/a> with <a href=\"http:\/\/www.git-scm.com\/download\/win\" rel=\"nofollow noreferrer\">Git Version 2.7.0<\/a>. This will surely allow you to run <code>rhc setup<\/code> as it did happened with me. Earlier I had a problem running &amp; installing latest version of <code>Ruby 2.2.4 (x64)<\/code> but when I downgraded to ruby version <code>2.1.8 (x64)<\/code> I was able to run <code>rhc setup<\/code> and configure <code>OpenShift client tools<\/code>on Windows. See the image for Ruby version I'm using - <code>ruby 2.1.8p440 (2015-12-16 revision 53160) [x64-mingw32]<\/code><\/p>\n\n<p><a href=\"https:\/\/i.stack.imgur.com\/FnfRV.png\" rel=\"nofollow noreferrer\"><img src=\"https:\/\/i.stack.imgur.com\/FnfRV.png\" alt=\"enter image description here\"><\/a><\/p>\n\n<p><a href=\"https:\/\/developers.openshift.com\/en\/getting-started-windows.html#client-tools\" rel=\"nofollow noreferrer\">Read here<\/a> for getting started to <code>OpenShift client tools<\/code> on windows.<\/p>\n",
        "last_edit_date": 1455551403.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 3319630,
            "reputation": 1716,
            "user_id": 3182171,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/95e1dfdc211ddfb4d21fa0c724d523b0?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "Diego D",
            "link": "https:\/\/stackoverflow.com\/users\/3182171\/diego-d"
        },
        "is_accepted": false,
        "score": 17,
        "last_activity_date": 1490181672,
        "creation_date": 1490181363,
        "answer_id": 42950092,
        "question_id": 5483889,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Use the bang to modify in place the array:\r\n\r\n    array_of_hashes.sort_by!(&amp;:zip)\r\n\r\nOr re-assign it:\r\n\r\n    array_of_hashes = array_of_hashes.sort_by(&amp;:zip)\r\n\r\n**Note that sort_by method will sort by ascending order.**\r\n\r\nIf you need to sort with descending order you could do something like this:\r\n\r\n    array_of_hashes.sort_by!(&amp;:zip).reverse!\r\n\r\nor\r\n\r\n    array_of_hashes = array_of_hashes.sort_by(&amp;:zip).reverse\r\n",
        "body": "<p>Use the bang to modify in place the array:<\/p>\n\n<pre><code>array_of_hashes.sort_by!(&amp;:zip)\n<\/code><\/pre>\n\n<p>Or re-assign it:<\/p>\n\n<pre><code>array_of_hashes = array_of_hashes.sort_by(&amp;:zip)\n<\/code><\/pre>\n\n<p><strong>Note that sort_by method will sort by ascending order.<\/strong><\/p>\n\n<p>If you need to sort with descending order you could do something like this:<\/p>\n\n<pre><code>array_of_hashes.sort_by!(&amp;:zip).reverse!\n<\/code><\/pre>\n\n<p>or<\/p>\n\n<pre><code>array_of_hashes = array_of_hashes.sort_by(&amp;:zip).reverse\n<\/code><\/pre>\n",
        "last_edit_date": 1490181672.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 36045,
            "reputation": 19133,
            "user_id": 102529,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/12596c72027423e6d56e01aeb2d0b531?s=256&d=identicon&r=PG",
            "display_name": "Marc W",
            "link": "https:\/\/stackoverflow.com\/users\/102529\/marc-w"
        },
        "is_accepted": false,
        "score": 16,
        "last_activity_date": 1674761963,
        "creation_date": 1254785542,
        "answer_id": 1522921,
        "question_id": 1117584,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "[Google yields the following Ruby library][1].\r\n\r\nAlso, over at [ruby-forum][2] they say you can install a gem (execute `gem uuid` on the command line to install it) and then do\r\n\r\n    gem &#39;uuid&#39;\r\n    puts UUID.new\r\n\r\nin your code to see a new UUID.\r\n\r\n(Hint: I Googled for *guid ruby*)\r\n\r\n\r\n  [1]: http:\/\/raa.ruby-lang.org\/project\/ruby-guid\/\r\n  [2]: http:\/\/www.ruby-forum.com\/topic\/99262",
        "body": "<p><a href=\"http:\/\/raa.ruby-lang.org\/project\/ruby-guid\/\" rel=\"nofollow noreferrer\">Google yields the following Ruby library<\/a>.<\/p>\n<p>Also, over at <a href=\"http:\/\/www.ruby-forum.com\/topic\/99262\" rel=\"nofollow noreferrer\">ruby-forum<\/a> they say you can install a gem (execute <code>gem uuid<\/code> on the command line to install it) and then do<\/p>\n<pre><code>gem 'uuid'\nputs UUID.new\n<\/code><\/pre>\n<p>in your code to see a new UUID.<\/p>\n<p>(Hint: I Googled for <em>guid ruby<\/em>)<\/p>\n",
        "last_edit_date": 1674761963.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 25839,
            "reputation": 29545,
            "user_id": 66725,
            "user_type": "registered",
            "accept_rate": 74,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/d75b2602c9eae6f190f0b098e0ef16f6?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "horseyguy",
            "link": "https:\/\/stackoverflow.com\/users\/66725\/horseyguy"
        },
        "is_accepted": false,
        "score": 16,
        "last_activity_date": 1285778586,
        "creation_date": 1285778586,
        "answer_id": 3823852,
        "question_id": 63998,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "**Destructuring an Array**\r\n\r\n    (a, b), c, d = [ [:a, :b ], :c, [:d1, :d2] ]\r\n\r\nWhere:\r\n    \r\n    a #=&gt; :a\r\n    b #=&gt; :b\r\n    c #=&gt; :c\r\n    d #=&gt; [:d1, :d2]\r\n\r\nUsing this technique we can use simple assignment to get the exact values we want out of nested array of any depth.",
        "body": "<p><strong>Destructuring an Array<\/strong><\/p>\n\n<pre><code>(a, b), c, d = [ [:a, :b ], :c, [:d1, :d2] ]\n<\/code><\/pre>\n\n<p>Where:<\/p>\n\n<pre><code>a #=&gt; :a\nb #=&gt; :b\nc #=&gt; :c\nd #=&gt; [:d1, :d2]\n<\/code><\/pre>\n\n<p>Using this technique we can use simple assignment to get the exact values we want out of nested array of any depth.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": 1285778586.0
    },
    {
        "owner": {
            "account_id": 7419,
            "reputation": 15234,
            "user_id": 12887,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/fc24fe007c2d362897829bf8302d29eb?s=256&d=identicon&r=PG",
            "display_name": "Jonathan Tran",
            "link": "https:\/\/stackoverflow.com\/users\/12887\/jonathan-tran"
        },
        "is_accepted": false,
        "score": 16,
        "last_activity_date": 1300431008,
        "creation_date": 1300431008,
        "answer_id": 5348931,
        "question_id": 2900370,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "As others answers point out, it&#39;s a security risk because `.` in your load path refers to the present working directory `Dir.pwd`, not the directory of the current file being loaded. So whoever is executing your script can change this simply by `cd`ing to another directory. Not good!\r\n\r\nI&#39;ve been using full paths constructed from `__FILE__` as an alternative.\r\n\r\n    require File.expand_path(File.join(File.dirname(__FILE__), &#39;filename&#39;))\r\n\r\nUnlike `require_relative`, this is backward compatible with Ruby 1.8.7.",
        "body": "<p>As others answers point out, it's a security risk because <code>.<\/code> in your load path refers to the present working directory <code>Dir.pwd<\/code>, not the directory of the current file being loaded. So whoever is executing your script can change this simply by <code>cd<\/code>ing to another directory. Not good!<\/p>\n\n<p>I've been using full paths constructed from <code>__FILE__<\/code> as an alternative.<\/p>\n\n<pre><code>require File.expand_path(File.join(File.dirname(__FILE__), 'filename'))\n<\/code><\/pre>\n\n<p>Unlike <code>require_relative<\/code>, this is backward compatible with Ruby 1.8.7.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 32368,
            "reputation": 41720,
            "user_id": 89761,
            "user_type": "registered",
            "accept_rate": 68,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/7cd6ef68d771155ece886775a83a0f42?s=256&d=identicon&r=PG",
            "display_name": "GSto",
            "link": "https:\/\/stackoverflow.com\/users\/89761\/gsto"
        },
        "is_accepted": false,
        "score": 16,
        "last_activity_date": 1302208731,
        "creation_date": 1302208731,
        "answer_id": 5587334,
        "question_id": 5587264,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "There a few points of view on this, it&#39;s really a matter of personal preference. Many rubyists take the approach you do. However, two other styles that are common is to always use one or the other, or to use `{}` for blocks that return values, and `do ... end` for blocks that are executed for side effects.",
        "body": "<p>There a few points of view on this, it's really a matter of personal preference. Many rubyists take the approach you do. However, two other styles that are common is to always use one or the other, or to use <code>{}<\/code> for blocks that return values, and <code>do ... end<\/code> for blocks that are executed for side effects.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 800688,
            "reputation": 177,
            "user_id": 829419,
            "user_type": "unregistered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/9fbeba8de80b307bb47816477ea514da?s=256&d=identicon&r=PG",
            "display_name": "Sacre",
            "link": "https:\/\/stackoverflow.com\/users\/829419\/sacre"
        },
        "is_accepted": false,
        "score": 16,
        "last_activity_date": 1652190720,
        "creation_date": 1309859855,
        "answer_id": 6580842,
        "question_id": 711418,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Use:\r\n\r\n    expires_now()\r\n\r\n*[expires_now()][1]*\r\n\r\n  [1]: http:\/\/api.rubyonrails.org\/classes\/ActionController\/ConditionalGet.html#method-i-expires_now\r\n\r\n",
        "body": "<p>Use:<\/p>\n<pre><code>expires_now()\n<\/code><\/pre>\n<p><em><a href=\"http:\/\/api.rubyonrails.org\/classes\/ActionController\/ConditionalGet.html#method-i-expires_now\" rel=\"nofollow noreferrer\">expires_now()<\/a><\/em><\/p>\n",
        "last_edit_date": 1652190720.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 376284,
            "reputation": 3224,
            "user_id": 727646,
            "user_type": "registered",
            "accept_rate": 71,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/f4fdd90812e57dfebb94bff4e395c8ea?s=256&d=identicon&r=PG",
            "display_name": "chrispanda",
            "link": "https:\/\/stackoverflow.com\/users\/727646\/chrispanda"
        },
        "is_accepted": false,
        "score": 16,
        "last_activity_date": 1310759362,
        "creation_date": 1310758880,
        "answer_id": 6712326,
        "question_id": 6712298,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Constants in ruby cannot be defined inside methods. [See the notes at the bottom of this page, for example][1]\r\n\r\n\r\n  [1]: http:\/\/rubylearning.com\/satishtalim\/ruby_constants.html",
        "body": "<p>Constants in ruby cannot be defined inside methods. <a href=\"http:\/\/rubylearning.com\/satishtalim\/ruby_constants.html\" rel=\"noreferrer\">See the notes at the bottom of this page, for example<\/a><\/p>\n",
        "last_edit_date": 1310759362.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1352215,
            "reputation": 1054,
            "user_id": 1291525,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/ad1b5b352d226bf0231656cae360dd0a?s=256&d=identicon&r=PG",
            "display_name": "Henok T",
            "link": "https:\/\/stackoverflow.com\/users\/1291525\/henok-t"
        },
        "is_accepted": false,
        "score": 16,
        "last_activity_date": 1498683347,
        "creation_date": 1498683347,
        "answer_id": 44812406,
        "question_id": 4502245,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "This worked for me:\r\n\r\n    (endDate - beginDate).to_i",
        "body": "<p>This worked for me:<\/p>\n\n<pre><code>(endDate - beginDate).to_i\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 8777336,
            "reputation": 211,
            "user_id": 6562160,
            "user_type": "registered",
            "profile_image": "https:\/\/lh5.googleusercontent.com\/-i_d8q-0-BEk\/AAAAAAAAAAI\/AAAAAAAAAaw\/WD9-zaNTrhg\/photo.jpg?sz=256",
            "display_name": "Ravi Prakash Singh",
            "link": "https:\/\/stackoverflow.com\/users\/6562160\/ravi-prakash-singh"
        },
        "is_accepted": false,
        "score": 16,
        "last_activity_date": 1559886969,
        "creation_date": 1559886969,
        "answer_id": 56488682,
        "question_id": 24886371,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "You can use this for clearing all the jobs\r\n\r\n    require &#39;sidekiq\/api&#39;\r\n\r\n    Sidekiq::Queue.all.each(&amp;:clear)",
        "body": "<p>You can use this for clearing all the jobs<\/p>\n\n<pre><code>require 'sidekiq\/api'\n\nSidekiq::Queue.all.each(&amp;:clear)\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 14605,
            "reputation": 4397,
            "user_id": 30203,
            "user_type": "registered",
            "accept_rate": 70,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/7aeb8fdb755298aa731e92b32266aa60?s=256&d=identicon&r=PG",
            "display_name": "Justin Love",
            "link": "https:\/\/stackoverflow.com\/users\/30203\/justin-love"
        },
        "is_accepted": false,
        "score": 15,
        "last_activity_date": 1224642487,
        "creation_date": 1224642487,
        "answer_id": 224276,
        "question_id": 63998,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "`Class.new()`\r\n\r\nCreate a new class at run time.  The argument can be a class to derive from, and the block is the class body.  You might also want to look at `const_set\/const_get\/const_defined?` to get your new class properly registered, so that `inspect` prints out a name instead of a number.\r\n\r\nNot something you need every day, but quite handy when you do.",
        "body": "<p><code>Class.new()<\/code><\/p>\n\n<p>Create a new class at run time.  The argument can be a class to derive from, and the block is the class body.  You might also want to look at <code>const_set\/const_get\/const_defined?<\/code> to get your new class properly registered, so that <code>inspect<\/code> prints out a name instead of a number.<\/p>\n\n<p>Not something you need every day, but quite handy when you do.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": 1262465968.0
    },
    {
        "owner": {
            "account_id": 50044,
            "reputation": 9925,
            "user_id": 149170,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/ZtCfZ.png?s=256&g=1",
            "display_name": "Mike Seplowitz",
            "link": "https:\/\/stackoverflow.com\/users\/149170\/mike-seplowitz"
        },
        "is_accepted": false,
        "score": 15,
        "last_activity_date": 1375115022,
        "creation_date": 1255444684,
        "answer_id": 1560641,
        "question_id": 1560572,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Another way to phrase dmathieu&#39;s answer might be\r\n\r\n    params.delete_if { |k,v| [:controller, :action, :other_key].include? k }",
        "body": "<p>Another way to phrase dmathieu's answer might be<\/p>\n\n<pre><code>params.delete_if { |k,v| [:controller, :action, :other_key].include? k }\n<\/code><\/pre>\n",
        "last_edit_date": 1375115022.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 47484,
            "reputation": 5166,
            "user_id": 140693,
            "user_type": "registered",
            "accept_rate": 47,
            "profile_image": "https:\/\/i.stack.imgur.com\/vBHln.jpg?s=256&g=1",
            "display_name": "Satya Kalluri",
            "link": "https:\/\/stackoverflow.com\/users\/140693\/satya-kalluri"
        },
        "is_accepted": false,
        "score": 15,
        "last_activity_date": 1256455104,
        "creation_date": 1256455104,
        "answer_id": 1620240,
        "question_id": 247948,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "variable.blank? will do it.\r\nIt returns true if the string is empty or if the string is nil.",
        "body": "<p>variable.blank? will do it.\nIt returns true if the string is empty or if the string is nil.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 107195,
            "reputation": 2354,
            "user_id": 285154,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/8eac1a27cc1e45ac550242ffb40be338?s=256&d=identicon&r=PG",
            "display_name": "dimitarvp",
            "link": "https:\/\/stackoverflow.com\/users\/285154\/dimitarvp"
        },
        "is_accepted": false,
        "score": 15,
        "last_activity_date": 1269940249,
        "creation_date": 1269940249,
        "answer_id": 2543994,
        "question_id": 2540435,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "Already answered but still. Change your code to:\r\n\r\n    metrics.sort {|a1,a2| a2[1].to_i &lt;=&gt; a1[1].to_i }\r\n\r\nConverted to strings along the way or not, this will do the job.",
        "body": "<p>Already answered but still. Change your code to:<\/p>\n\n<pre><code>metrics.sort {|a1,a2| a2[1].to_i &lt;=&gt; a1[1].to_i }\n<\/code><\/pre>\n\n<p>Converted to strings along the way or not, this will do the job.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 51836,
            "reputation": 10346,
            "user_id": 154905,
            "user_type": "registered",
            "accept_rate": 95,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/6cb04206ec943346fde88be5229388ce?s=256&d=identicon&r=PG",
            "display_name": "mark",
            "link": "https:\/\/stackoverflow.com\/users\/154905\/mark"
        },
        "is_accepted": false,
        "score": 15,
        "last_activity_date": 1281505023,
        "creation_date": 1281475926,
        "answer_id": 3453618,
        "question_id": 3453560,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "Really the best thing is to put it into a helper.\r\n\r\n\r\n    %div{ :class =&gt; published_class(post) }\r\n\r\n    #some_helper.rb\r\n\r\n    def published_class(post)\r\n      &quot;post #{post.published? ? &#39;&#39; : &#39;gray&#39;}&quot;\r\n    end",
        "body": "<p>Really the best thing is to put it into a helper.<\/p>\n\n<pre><code>%div{ :class =&gt; published_class(post) }\n\n#some_helper.rb\n\ndef published_class(post)\n  \"post #{post.published? ? '' : 'gray'}\"\nend\n<\/code><\/pre>\n",
        "last_edit_date": 1281505023.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 399177,
            "reputation": 1695,
            "user_id": 764342,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/33e47178a56073c9b4bff0d2b9b3cb70?s=256&d=identicon&r=PG",
            "display_name": "apeiros",
            "link": "https:\/\/stackoverflow.com\/users\/764342\/apeiros"
        },
        "is_accepted": false,
        "score": 15,
        "last_activity_date": 1401866950,
        "creation_date": 1306017902,
        "answer_id": 6084914,
        "question_id": 2393697,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Alternatively (updated for ruby 1.9+):\r\n\r\n    ObjectSpace.each_object(YourRootClass.singleton_class)\r\n\r\nRuby 1.8 compatible way:\r\n\r\n    ObjectSpace.each_object(class&lt;&lt;YourRootClass;self;end)\r\n\r\nNote that this won&#39;t work for modules. Also, YourRootClass will be included in the answer. You can use Array#- or another way to remove it.\r\n",
        "body": "<p>Alternatively (updated for ruby 1.9+):<\/p>\n\n<pre><code>ObjectSpace.each_object(YourRootClass.singleton_class)\n<\/code><\/pre>\n\n<p>Ruby 1.8 compatible way:<\/p>\n\n<pre><code>ObjectSpace.each_object(class&lt;&lt;YourRootClass;self;end)\n<\/code><\/pre>\n\n<p>Note that this won't work for modules. Also, YourRootClass will be included in the answer. You can use Array#- or another way to remove it.<\/p>\n",
        "last_edit_date": 1401866950.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4899,
            "reputation": 103746,
            "user_id": 7595,
            "user_type": "registered",
            "accept_rate": 70,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/99108829176dfbbc5d0bf3c041542a26?s=256&d=identicon&r=PG",
            "display_name": "Pablo Fernandez",
            "link": "https:\/\/stackoverflow.com\/users\/7595\/pablo-fernandez"
        },
        "is_accepted": false,
        "score": 15,
        "last_activity_date": 1306896109,
        "creation_date": 1306896109,
        "answer_id": 6195687,
        "question_id": 6195661,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "You probably want to use this to __group__ your classes into a module. Sort of a namespace thing.\r\n\r\nfor example the [Twitter gem][1] uses namespaces to achieve this:\r\n\r\n    Twitter::Client.new\r\n\r\n    Twitter::Search.new\r\n\r\nSo both `Client` and `Search` classes live under the `Twitter` module.\r\n\r\nIf you want to check the sources, the code for both classes can be found [here][2] and [here][3].\r\n\r\nHope this helps!\r\n\r\n\r\n  [1]: https:\/\/github.com\/jnunemaker\/twitter\r\n  [2]: https:\/\/github.com\/jnunemaker\/twitter\/blob\/master\/lib\/twitter\/client.rb\r\n  [3]: https:\/\/github.com\/jnunemaker\/twitter\/blob\/master\/lib\/twitter\/search.rb",
        "body": "<p>You probably want to use this to <strong>group<\/strong> your classes into a module. Sort of a namespace thing.<\/p>\n\n<p>for example the <a href=\"https:\/\/github.com\/jnunemaker\/twitter\">Twitter gem<\/a> uses namespaces to achieve this:<\/p>\n\n<pre><code>Twitter::Client.new\n\nTwitter::Search.new\n<\/code><\/pre>\n\n<p>So both <code>Client<\/code> and <code>Search<\/code> classes live under the <code>Twitter<\/code> module.<\/p>\n\n<p>If you want to check the sources, the code for both classes can be found <a href=\"https:\/\/github.com\/jnunemaker\/twitter\/blob\/master\/lib\/twitter\/client.rb\">here<\/a> and <a href=\"https:\/\/github.com\/jnunemaker\/twitter\/blob\/master\/lib\/twitter\/search.rb\">here<\/a>.<\/p>\n\n<p>Hope this helps!<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 234087,
            "reputation": 295,
            "user_id": 500017,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/5f26a4e6cd35274d8c19bd232e6f7502?s=256&d=identicon&r=PG",
            "display_name": "paarshad",
            "link": "https:\/\/stackoverflow.com\/users\/500017\/paarshad"
        },
        "is_accepted": false,
        "score": 15,
        "last_activity_date": 1307991859,
        "creation_date": 1307819985,
        "answer_id": 6318008,
        "question_id": 6317980,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Last time that this happened to me, I had updated all my gems.  I did a `gem uninstall rake` and it listed version options. I picked the newer one, and then I did not have to use `bundle exec` anymore.\r\n\r\nBasically, if you use `bundle exec` it uses whatever gem version is in installed by your bundle, so what is in the Gemfile.  Without `bundle exec` it uses whatever version is your system default.",
        "body": "<p>Last time that this happened to me, I had updated all my gems.  I did a <code>gem uninstall rake<\/code> and it listed version options. I picked the newer one, and then I did not have to use <code>bundle exec<\/code> anymore.<\/p>\n\n<p>Basically, if you use <code>bundle exec<\/code> it uses whatever gem version is in installed by your bundle, so what is in the Gemfile.  Without <code>bundle exec<\/code> it uses whatever version is your system default.<\/p>\n",
        "last_edit_date": 1307991859.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2100193,
            "reputation": 3780,
            "user_id": 1868032,
            "user_type": "registered",
            "accept_rate": 92,
            "profile_image": "https:\/\/i.stack.imgur.com\/MCZTi.jpg?s=256&g=1",
            "display_name": "lflores",
            "link": "https:\/\/stackoverflow.com\/users\/1868032\/lflores"
        },
        "is_accepted": false,
        "score": 15,
        "last_activity_date": 1362872013,
        "creation_date": 1362867319,
        "answer_id": 15316528,
        "question_id": 4685009,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "It might be helpful to know generally what these data types are used for: \r\n\r\n - binary - is for storing data such as images, audio, or movies.\r\n - boolean - is for storing true or false values.\r\n - date - store only the date\r\n - datetime - store the date and time into a column.\r\n - decimal - is for decimals.\r\n - float - is for decimals. ([What&#39;s the difference between decimal and float?][1])\r\n - integer - is for whole numbers.\r\n - primary_key - unique key that can uniquely identify each row in a table\r\n - string - is for small data types such as a title. ([Should you choose string or text?][2])\r\n - text - is for longer pieces of textual data, such as a paragraph of information.\r\n - time - is for time only \r\n - timestamp - for storing date and time into a column.\r\n\r\nI hope that helps someone! Also, here&#39;s the official list: [http:\/\/guides.rubyonrails.org\/migrations.html#supported-types][3]\r\n\r\n\r\n  [1]: https:\/\/stackoverflow.com\/questions\/8514167\/float-vs-decimal-in-activerecord\r\n  [2]: https:\/\/stackoverflow.com\/questions\/3354330\/difference-between-string-and-text-in-rails\r\n  [3]: http:\/\/guides.rubyonrails.org\/migrations.html#supported-types",
        "body": "<p>It might be helpful to know generally what these data types are used for: <\/p>\n\n<ul>\n<li>binary - is for storing data such as images, audio, or movies.<\/li>\n<li>boolean - is for storing true or false values.<\/li>\n<li>date - store only the date<\/li>\n<li>datetime - store the date and time into a column.<\/li>\n<li>decimal - is for decimals.<\/li>\n<li>float - is for decimals. (<a href=\"https:\/\/stackoverflow.com\/questions\/8514167\/float-vs-decimal-in-activerecord\">What's the difference between decimal and float?<\/a>)<\/li>\n<li>integer - is for whole numbers.<\/li>\n<li>primary_key - unique key that can uniquely identify each row in a table<\/li>\n<li>string - is for small data types such as a title. (<a href=\"https:\/\/stackoverflow.com\/questions\/3354330\/difference-between-string-and-text-in-rails\">Should you choose string or text?<\/a>)<\/li>\n<li>text - is for longer pieces of textual data, such as a paragraph of information.<\/li>\n<li>time - is for time only <\/li>\n<li>timestamp - for storing date and time into a column.<\/li>\n<\/ul>\n\n<p>I hope that helps someone! Also, here's the official list: <a href=\"http:\/\/guides.rubyonrails.org\/migrations.html#supported-types\" rel=\"nofollow noreferrer\">http:\/\/guides.rubyonrails.org\/migrations.html#supported-types<\/a><\/p>\n",
        "last_edit_date": 1495541394.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1333103,
            "reputation": 38813,
            "user_id": 1276506,
            "user_type": "registered",
            "accept_rate": 83,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/7149d2bc15314277ac69357ef7251650?s=256&d=identicon&r=PG",
            "display_name": "boulder_ruby",
            "link": "https:\/\/stackoverflow.com\/users\/1276506\/boulder-ruby"
        },
        "is_accepted": false,
        "score": 15,
        "last_activity_date": 1477277368,
        "creation_date": 1395349230,
        "answer_id": 22544977,
        "question_id": 1604305,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "To get rid of the last element in one line with the remainder returning\r\n\r\n    [1, 2, 4, 5, 6].reverse.drop(1).reverse\r\n\r\nSeriously though,\r\n\r\n    [1,2,3,4][0..-2]\r\n    #=&gt; [1,2,3]",
        "body": "<p>To get rid of the last element in one line with the remainder returning<\/p>\n\n<pre><code>[1, 2, 4, 5, 6].reverse.drop(1).reverse\n<\/code><\/pre>\n\n<p>Seriously though,<\/p>\n\n<pre><code>[1,2,3,4][0..-2]\n#=&gt; [1,2,3]\n<\/code><\/pre>\n",
        "last_edit_date": 1477277368.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 339584,
            "reputation": 296,
            "user_id": 669142,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/1bc1ccc808d047991bc563f63865b67d?s=256&d=identicon&r=PG",
            "display_name": "Pascal",
            "link": "https:\/\/stackoverflow.com\/users\/669142\/pascal"
        },
        "is_accepted": false,
        "score": 15,
        "last_activity_date": 1540587114,
        "creation_date": 1422628900,
        "answer_id": 28238254,
        "question_id": 26533245,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Similar issue with the PHP SDK, this works:\r\n\r\n    $s3Client = S3Client::factory(array(&#39;key&#39;=&gt;YOUR_AWS_KEY, &#39;secret&#39;=&gt;YOUR_AWS_SECRET, &#39;signature&#39; =&gt; &#39;v4&#39;, &#39;region&#39;=&gt;&#39;eu-central-1&#39;));\r\n\r\nThe important bit is the `signature` and the `region` ",
        "body": "<p>Similar issue with the PHP SDK, this works:<\/p>\n\n<pre><code>$s3Client = S3Client::factory(array('key'=&gt;YOUR_AWS_KEY, 'secret'=&gt;YOUR_AWS_SECRET, 'signature' =&gt; 'v4', 'region'=&gt;'eu-central-1'));\n<\/code><\/pre>\n\n<p>The important bit is the <code>signature<\/code> and the <code>region<\/code> <\/p>\n",
        "last_edit_date": 1540587114.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5492581,
            "reputation": 473,
            "user_id": 4364968,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/ZThjI.jpg?s=256&g=1",
            "display_name": "Prashant Kajale",
            "link": "https:\/\/stackoverflow.com\/users\/4364968\/prashant-kajale"
        },
        "is_accepted": false,
        "score": 15,
        "last_activity_date": 1585666682,
        "creation_date": 1568116807,
        "answer_id": 57870361,
        "question_id": 5528839,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "`gem install nokogiri -v &#39;1.6.6.2&#39; -- --use-system-libraries  --with-xml2-include=$(brew --prefix libxml2)\/include\/libxml2`\r\n\r\nthis worked for me on macos.\r\nIt works also with version `1.6.6.4`",
        "body": "<p><code>gem install nokogiri -v '1.6.6.2' -- --use-system-libraries  --with-xml2-include=$(brew --prefix libxml2)\/include\/libxml2<\/code><\/p>\n\n<p>this worked for me on macos.\nIt works also with version <code>1.6.6.4<\/code><\/p>\n",
        "last_edit_date": 1585666682.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 10770,
            "reputation": 18378,
            "user_id": 20487,
            "user_type": "registered",
            "accept_rate": 80,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/e8a34b957924eb899233b90e5bffe9f5?s=256&d=identicon&r=PG",
            "display_name": "Avdi",
            "link": "https:\/\/stackoverflow.com\/users\/20487\/avdi"
        },
        "is_accepted": false,
        "score": 14,
        "last_activity_date": 1223528471,
        "creation_date": 1223528471,
        "answer_id": 185973,
        "question_id": 185965,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "Look into `content_for`: http:\/\/railscasts.com\/episodes\/8",
        "body": "<p>Look into <code>content_for<\/code>: <a href=\"http:\/\/railscasts.com\/episodes\/8\" rel=\"noreferrer\">http:\/\/railscasts.com\/episodes\/8<\/a><\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 338272,
            "reputation": 3278,
            "user_id": 667049,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/01f04a3bb55ef948a186620fa5d5ea29?s=256&d=identicon&r=PG",
            "display_name": "GutenYe",
            "link": "https:\/\/stackoverflow.com\/users\/667049\/gutenye"
        },
        "is_accepted": false,
        "score": 14,
        "last_activity_date": 1300630680,
        "creation_date": 1300630680,
        "answer_id": 5369012,
        "question_id": 5367114,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "    Hash === @some_var #=&gt; return Boolean\r\n\r\nthis can also be used with case statement\r\n\r\n    case @some_var\r\n    when Hash\r\n       ...\r\n    when Array\r\n       ...\r\n    end\r\n     ",
        "body": "<pre><code>Hash === @some_var #=&gt; return Boolean\n<\/code><\/pre>\n\n<p>this can also be used with case statement<\/p>\n\n<pre><code>case @some_var\nwhen Hash\n   ...\nwhen Array\n   ...\nend\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 121224,
            "reputation": 166097,
            "user_id": 314166,
            "user_type": "registered",
            "accept_rate": 82,
            "profile_image": "https:\/\/i.stack.imgur.com\/zL1re.jpg?s=256&g=1",
            "display_name": "sawa",
            "link": "https:\/\/stackoverflow.com\/users\/314166\/sawa"
        },
        "is_accepted": false,
        "score": 14,
        "last_activity_date": 1450622184,
        "creation_date": 1307111436,
        "answer_id": 6228409,
        "question_id": 6224875,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "    @myvar = session.fetch(:comments, {}).fetch(@comment.id, {})[&quot;temp_value&quot;]\r\n\r\nFrom Ruby 2.0, you can do:\r\n\r\n    @myvar = session[:comments].to_h[@comment.id].to_h[&quot;temp_value&quot;]\r\n\r\nFrom Ruby 2.3, you can do:\r\n\r\n    @myvar = session.dig(:comments, @comment.id, &quot;temp_value&quot;)",
        "body": "<pre><code>@myvar = session.fetch(:comments, {}).fetch(@comment.id, {})[\"temp_value\"]\n<\/code><\/pre>\n\n<p>From Ruby 2.0, you can do:<\/p>\n\n<pre><code>@myvar = session[:comments].to_h[@comment.id].to_h[\"temp_value\"]\n<\/code><\/pre>\n\n<p>From Ruby 2.3, you can do:<\/p>\n\n<pre><code>@myvar = session.dig(:comments, @comment.id, \"temp_value\")\n<\/code><\/pre>\n",
        "last_edit_date": 1450622184.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1630453,
            "reputation": 567,
            "user_id": 1505118,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/AXNYE.jpg?s=256&g=1",
            "display_name": "Alexander Giraldo",
            "link": "https:\/\/stackoverflow.com\/users\/1505118\/alexander-giraldo"
        },
        "is_accepted": false,
        "score": 14,
        "last_activity_date": 1346015629,
        "creation_date": 1346015629,
        "answer_id": 12133954,
        "question_id": 12133894,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Try this:\r\n\r\n    &lt;%= link_to image_tag(&quot;facebook.png&quot;, :class =&gt; &quot;facebook_icon&quot;, :alt =&gt; &quot;Facebook&quot;), &quot;http:\/\/www.facebook.com\/mypage&quot;, :target =&gt; &quot;_blank&quot; %&gt;",
        "body": "<p>Try this:<\/p>\n\n<pre><code>&lt;%= link_to image_tag(\"facebook.png\", :class =&gt; \"facebook_icon\", :alt =&gt; \"Facebook\"), \"http:\/\/www.facebook.com\/mypage\", :target =&gt; \"_blank\" %&gt;\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 93432,
            "reputation": 15665,
            "user_id": 255627,
            "user_type": "registered",
            "accept_rate": 94,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/d0450114e66d34f4a56e3ed7800e2f0c?s=256&d=identicon&r=PG",
            "display_name": "Alex Dean",
            "link": "https:\/\/stackoverflow.com\/users\/255627\/alex-dean"
        },
        "is_accepted": false,
        "score": 14,
        "last_activity_date": 1375189608,
        "creation_date": 1375186173,
        "answer_id": 17946650,
        "question_id": 1023146,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Actually the important thing is to distinguish between:\r\n\r\n1. Functions - methods executed for their return value\r\n2. Procedures - methods executed for their side effects\r\n\r\nRuby does not have a native way of distinguishing these - which leaves you vulnerable to writing a procedure `side_effect()` and another developer deciding to abuse the implicit return value of your procedure (basically treating it as an impure function).\r\n\r\nTo resolve this, take a leaf out of Scala and Haskell&#39;s book and have your _procedures_ explicitly return `nil` (aka `Unit` or `()` in other languages).\r\n\r\nIf you follow this, then using explicit `return` syntax or not just becomes a matter of personal style.\r\n\r\nTo further distinguish between functions and procedures:\r\n\r\n1. Copy J&#246;rg W Mittag&#39;s nice idea of writing functional blocks with curly braces, and procedural blocks with `do\/end`\r\n2. When you invoke procedures, use `()`, whereas when you invoke functions, don&#39;t\r\n\r\nNote that J&#246;rg W Mittag actually advocated the other way around - avoiding `()`s for procedures - but that&#39;s not advisable because you want side effecting method invocations to be clearly distinguishable from variables, particularly when arity is 0. See the [Scala style guide on method invocation][1] for details.\r\n\r\n  [1]: http:\/\/docs.scala-lang.org\/style\/method-invocation.html",
        "body": "<p>Actually the important thing is to distinguish between:<\/p>\n\n<ol>\n<li>Functions - methods executed for their return value<\/li>\n<li>Procedures - methods executed for their side effects<\/li>\n<\/ol>\n\n<p>Ruby does not have a native way of distinguishing these - which leaves you vulnerable to writing a procedure <code>side_effect()<\/code> and another developer deciding to abuse the implicit return value of your procedure (basically treating it as an impure function).<\/p>\n\n<p>To resolve this, take a leaf out of Scala and Haskell's book and have your <em>procedures<\/em> explicitly return <code>nil<\/code> (aka <code>Unit<\/code> or <code>()<\/code> in other languages).<\/p>\n\n<p>If you follow this, then using explicit <code>return<\/code> syntax or not just becomes a matter of personal style.<\/p>\n\n<p>To further distinguish between functions and procedures:<\/p>\n\n<ol>\n<li>Copy J\u00f6rg W Mittag's nice idea of writing functional blocks with curly braces, and procedural blocks with <code>do\/end<\/code><\/li>\n<li>When you invoke procedures, use <code>()<\/code>, whereas when you invoke functions, don't<\/li>\n<\/ol>\n\n<p>Note that J\u00f6rg W Mittag actually advocated the other way around - avoiding <code>()<\/code>s for procedures - but that's not advisable because you want side effecting method invocations to be clearly distinguishable from variables, particularly when arity is 0. See the <a href=\"http:\/\/docs.scala-lang.org\/style\/method-invocation.html\" rel=\"noreferrer\">Scala style guide on method invocation<\/a> for details.<\/p>\n",
        "last_edit_date": 1375189608.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 3276671,
            "reputation": 6852,
            "user_id": 2758467,
            "user_type": "registered",
            "accept_rate": 57,
            "profile_image": "https:\/\/i.stack.imgur.com\/Sljaj.jpg?s=256&g=1",
            "display_name": "Rajesh Paul",
            "link": "https:\/\/stackoverflow.com\/users\/2758467\/rajesh-paul"
        },
        "is_accepted": false,
        "score": 14,
        "last_activity_date": 1421996866,
        "creation_date": 1421996866,
        "answer_id": 28104700,
        "question_id": 6224875,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "say you want to find `params[:user][:email]` but it&#39;s not sure whether `user` is there in `params` or not. Then-\r\n\r\nyou can try:\r\n\r\n    params[:user].try(:[], :email)\r\n\r\nIt will return either **`nil`**(if `user` is not there or `email` is not there in `user`) or otherwise the value of `email` in `user`.",
        "body": "<p>say you want to find <code>params[:user][:email]<\/code> but it's not sure whether <code>user<\/code> is there in <code>params<\/code> or not. Then-<\/p>\n\n<p>you can try:<\/p>\n\n<pre><code>params[:user].try(:[], :email)\n<\/code><\/pre>\n\n<p>It will return either <strong><code>nil<\/code><\/strong>(if <code>user<\/code> is not there or <code>email<\/code> is not there in <code>user<\/code>) or otherwise the value of <code>email<\/code> in <code>user<\/code>.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 11884,
            "reputation": 2438,
            "user_id": 23128,
            "user_type": "registered",
            "accept_rate": 60,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/238ef07c3c64486de45c3751c9c88726?s=256&d=identicon&r=PG",
            "display_name": "Jared",
            "link": "https:\/\/stackoverflow.com\/users\/23128\/jared"
        },
        "is_accepted": false,
        "score": 14,
        "last_activity_date": 1433958021,
        "creation_date": 1433958021,
        "answer_id": 30763554,
        "question_id": 3453560,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "HAML has a nice built in way to handle this:\r\n\r\n    .post{class: [!post.published? &amp;&amp; &quot;gray&quot;] }\r\n    \r\nThe way that this works is that the conditional gets evaluated and if true, the string gets included in the classes, if not it won&#39;t be included.",
        "body": "<p>HAML has a nice built in way to handle this:<\/p>\n\n<pre><code>.post{class: [!post.published? &amp;&amp; \"gray\"] }\n<\/code><\/pre>\n\n<p>The way that this works is that the conditional gets evaluated and if true, the string gets included in the classes, if not it won't be included.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 55775,
            "reputation": 5146,
            "user_id": 167108,
            "user_type": "registered",
            "accept_rate": 80,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/6793711bc9796cf78175999287f92be8?s=256&d=identicon&r=PG",
            "display_name": "Steve Smith",
            "link": "https:\/\/stackoverflow.com\/users\/167108\/steve-smith"
        },
        "is_accepted": false,
        "score": 14,
        "last_activity_date": 1448029678,
        "creation_date": 1448029678,
        "answer_id": 33829126,
        "question_id": 6224875,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "As of Ruby 2.3 this gets a little easier. Instead of having to nest `try` statements or define your own method you can now use `Hash#dig` ([documentation][1]).\r\n\r\n    h = { foo: {bar: {baz: 1}}}\r\n    \r\n    h.dig(:foo, :bar, :baz)           #=&gt; 1\r\n    h.dig(:foo, :zot)                 #=&gt; nil\r\n\r\nOr in the example above:\r\n\r\n    session.dig(:comments, @comment.id, &quot;temp_value&quot;)\r\n\r\nThis has the added benefit of being more like `try` than some of the examples above. If any of the arguments lead to the hash returning nil then it will respond nil.\r\n\r\n  [1]: http:\/\/ruby-doc.org\/core-2.3.0_preview1\/Hash.html#method-i-dig",
        "body": "<p>As of Ruby 2.3 this gets a little easier. Instead of having to nest <code>try<\/code> statements or define your own method you can now use <code>Hash#dig<\/code> (<a href=\"http:\/\/ruby-doc.org\/core-2.3.0_preview1\/Hash.html#method-i-dig\">documentation<\/a>).<\/p>\n\n<pre><code>h = { foo: {bar: {baz: 1}}}\n\nh.dig(:foo, :bar, :baz)           #=&gt; 1\nh.dig(:foo, :zot)                 #=&gt; nil\n<\/code><\/pre>\n\n<p>Or in the example above:<\/p>\n\n<pre><code>session.dig(:comments, @comment.id, \"temp_value\")\n<\/code><\/pre>\n\n<p>This has the added benefit of being more like <code>try<\/code> than some of the examples above. If any of the arguments lead to the hash returning nil then it will respond nil.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 231844,
            "reputation": 15852,
            "user_id": 496289,
            "user_type": "registered",
            "accept_rate": 86,
            "profile_image": "https:\/\/i.stack.imgur.com\/MBIsC.jpg?s=256&g=1",
            "display_name": "Kashyap",
            "link": "https:\/\/stackoverflow.com\/users\/496289\/kashyap"
        },
        "is_accepted": false,
        "score": 14,
        "last_activity_date": 1453824018,
        "creation_date": 1452195171,
        "answer_id": 34663624,
        "question_id": 17618113,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "As everyone mentioned problem is missing `ruby-build`. For older versions of OS `ruby-build` may not be available as an `apt` package. In that case install using [original instructions][1], which should&#39;ve omitted the word `Optional` in this:\r\n\r\n&gt; 5. (Optional) Install ruby-build, which provides the rbenv install\r\n&gt; command that simplifies the process of installing new Ruby versions.\r\n\r\n\r\n    git clone git@github.com:rbenv\/ruby-build.git ~\/.rbenv\/plugins\/ruby-build\r\n    # OR use http\r\n    git clone https:\/\/github.com\/rbenv\/ruby-build.git ~\/.rbenv\/plugins\/ruby-build\r\n\r\n\r\n\r\n  [1]: https:\/\/github.com\/rbenv\/rbenv#installation",
        "body": "<p>As everyone mentioned problem is missing <code>ruby-build<\/code>. For older versions of OS <code>ruby-build<\/code> may not be available as an <code>apt<\/code> package. In that case install using <a href=\"https:\/\/github.com\/rbenv\/rbenv#installation\">original instructions<\/a>, which should've omitted the word <code>Optional<\/code> in this:<\/p>\n\n<blockquote>\n  <ol start=\"5\">\n  <li>(Optional) Install ruby-build, which provides the rbenv install\n  command that simplifies the process of installing new Ruby versions.<\/li>\n  <\/ol>\n<\/blockquote>\n\n<pre><code>git clone git@github.com:rbenv\/ruby-build.git ~\/.rbenv\/plugins\/ruby-build\n# OR use http\ngit clone https:\/\/github.com\/rbenv\/ruby-build.git ~\/.rbenv\/plugins\/ruby-build\n<\/code><\/pre>\n",
        "last_edit_date": 1453824018.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4450305,
            "reputation": 5472,
            "user_id": 3622415,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/873e6fd319032200fd5dc359f5d897eb?s=256&d=identicon&r=PG",
            "display_name": "kangkyu",
            "link": "https:\/\/stackoverflow.com\/users\/3622415\/kangkyu"
        },
        "is_accepted": false,
        "score": 14,
        "last_activity_date": 1580948482,
        "creation_date": 1458779132,
        "answer_id": 36191180,
        "question_id": 6714196,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "I was originally trying to escape special characters in a file name only, not on the path, from a full URL string.\r\n\r\n`ERB::Util.url_encode` didn&#39;t work for my use:\r\n\r\n    helper.send(:url_encode, &quot;http:\/\/example.com\/?a=\\11\\15&quot;)\r\n    # =&gt; &quot;http%3A%2F%2Fexample.com%2F%3Fa%3D%09%0D&quot;\r\n\r\nBased on two answers in &quot;https:\/\/stackoverflow.com\/questions\/34274838\/why-is-uri-escape-marked-as-obsolete-and-where-is-this-regexpunsafe-constant&quot;, it looks like `URI::RFC2396_Parser#escape` is better than using `URI::Escape#escape`. However, they both are behaving the same to me:\r\n\r\n    URI.escape(&quot;http:\/\/example.com\/?a=\\11\\15&quot;)\r\n    # =&gt; &quot;http:\/\/example.com\/?a=%09%0D&quot;\r\n    URI::Parser.new.escape(&quot;http:\/\/example.com\/?a=\\11\\15&quot;)\r\n    # =&gt; &quot;http:\/\/example.com\/?a=%09%0D&quot;\r\n",
        "body": "<p>I was originally trying to escape special characters in a file name only, not on the path, from a full URL string.<\/p>\n\n<p><code>ERB::Util.url_encode<\/code> didn't work for my use:<\/p>\n\n<pre><code>helper.send(:url_encode, \"http:\/\/example.com\/?a=\\11\\15\")\n# =&gt; \"http%3A%2F%2Fexample.com%2F%3Fa%3D%09%0D\"\n<\/code><\/pre>\n\n<p>Based on two answers in \"<a href=\"https:\/\/stackoverflow.com\/questions\/34274838\/why-is-uri-escape-marked-as-obsolete-and-where-is-this-regexpunsafe-constant\">Why is URI.escape() marked as obsolete and where is this REGEXP::UNSAFE constant?<\/a>\", it looks like <code>URI::RFC2396_Parser#escape<\/code> is better than using <code>URI::Escape#escape<\/code>. However, they both are behaving the same to me:<\/p>\n\n<pre><code>URI.escape(\"http:\/\/example.com\/?a=\\11\\15\")\n# =&gt; \"http:\/\/example.com\/?a=%09%0D\"\nURI::Parser.new.escape(\"http:\/\/example.com\/?a=\\11\\15\")\n# =&gt; \"http:\/\/example.com\/?a=%09%0D\"\n<\/code><\/pre>\n",
        "last_edit_date": 1580948482.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 6577900,
            "reputation": 853,
            "user_id": 5090145,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/Ctnxy.jpg?s=256&g=1",
            "display_name": "Timur Nugmanov",
            "link": "https:\/\/stackoverflow.com\/users\/5090145\/timur-nugmanov"
        },
        "is_accepted": false,
        "score": 14,
        "last_activity_date": 1534156336,
        "creation_date": 1534156336,
        "answer_id": 51820297,
        "question_id": 6195661,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "There is yet another difference between nested classes and nested modules in Ruby prior to 2.5 that other answers failed to cover that I feel must be mentioned here. It is the lookup process.&lt;br&gt;&lt;br&gt;\r\nIn short: due to top level constant lookup in Ruby prior to 2.5, Ruby may end up looking for your nested class in the wrong place (in `Object` in particular) if you use nested classes.&lt;br&gt;&lt;br&gt;\r\n**In Ruby prior to 2.5:** &lt;br&gt;\r\n*Nested class structure:* \r\nSuppose you have a class `X`, with nested class `Y`, or `X::Y`. And then you have a top level class named also `Y`. If `X::Y` is not loaded, then following happens when you call `X::Y`: &lt;br&gt;&lt;br&gt;\r\nHaving not found `Y` in `X`, Ruby will try to look it up in ancestors of `X`. Since `X` is a class and not a module, it has ancestors, among which are `[Object, Kernel, BasicObject]`. So, it tries to look for `Y` in `Object`, where it finds it successfully.&lt;br&gt;&lt;br&gt;Yet it is the top level `Y` and not `X::Y`.\r\nYou will get this warning:\r\n\r\n    warning: toplevel constant Y referenced by X::Y\r\n&lt;br&gt;*Nested module structure:* \r\nSuppose in the previous example `X` is a module and not a class.&lt;br&gt;&lt;br&gt;A module only has itself as ancestor: `X.ancestors` would produce `[X]`.&lt;br&gt;&lt;br&gt;\r\nIn this case, Ruby won&#39;t be able to look for `Y` in one of ancestors of `X` and will throw a `NameError`. Rails (or any other framework with autoloading) will try to load `X::Y` after that.\r\n&lt;br&gt;&lt;br&gt;\r\nSee this article for more information: https:\/\/blog.jetbrains.com\/ruby\/2017\/03\/why-you-should-not-use-a-class-as-a-namespace-in-rails-applications\/ &lt;br&gt;&lt;br&gt;\r\n**In Ruby 2.5:** &lt;br&gt;\r\nTop level constant lookup removed.&lt;br&gt;You may use nested classes without fear of encountering this bug.",
        "body": "<p>There is yet another difference between nested classes and nested modules in Ruby prior to 2.5 that other answers failed to cover that I feel must be mentioned here. It is the lookup process.<br><br>\nIn short: due to top level constant lookup in Ruby prior to 2.5, Ruby may end up looking for your nested class in the wrong place (in <code>Object<\/code> in particular) if you use nested classes.<br><br>\n<strong>In Ruby prior to 2.5:<\/strong> <br>\n<em>Nested class structure:<\/em> \nSuppose you have a class <code>X<\/code>, with nested class <code>Y<\/code>, or <code>X::Y<\/code>. And then you have a top level class named also <code>Y<\/code>. If <code>X::Y<\/code> is not loaded, then following happens when you call <code>X::Y<\/code>: <br><br>\nHaving not found <code>Y<\/code> in <code>X<\/code>, Ruby will try to look it up in ancestors of <code>X<\/code>. Since <code>X<\/code> is a class and not a module, it has ancestors, among which are <code>[Object, Kernel, BasicObject]<\/code>. So, it tries to look for <code>Y<\/code> in <code>Object<\/code>, where it finds it successfully.<br><br>Yet it is the top level <code>Y<\/code> and not <code>X::Y<\/code>.\nYou will get this warning:<\/p>\n\n<pre><code>warning: toplevel constant Y referenced by X::Y\n<\/code><\/pre>\n\n<p><br><em>Nested module structure:<\/em> \nSuppose in the previous example <code>X<\/code> is a module and not a class.<br><br>A module only has itself as ancestor: <code>X.ancestors<\/code> would produce <code>[X]<\/code>.<br><br>\nIn this case, Ruby won't be able to look for <code>Y<\/code> in one of ancestors of <code>X<\/code> and will throw a <code>NameError<\/code>. Rails (or any other framework with autoloading) will try to load <code>X::Y<\/code> after that.\n<br><br>\nSee this article for more information: <a href=\"https:\/\/blog.jetbrains.com\/ruby\/2017\/03\/why-you-should-not-use-a-class-as-a-namespace-in-rails-applications\/\" rel=\"noreferrer\">https:\/\/blog.jetbrains.com\/ruby\/2017\/03\/why-you-should-not-use-a-class-as-a-namespace-in-rails-applications\/<\/a> <br><br>\n<strong>In Ruby 2.5:<\/strong> <br>\nTop level constant lookup removed.<br>You may use nested classes without fear of encountering this bug.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 3076478,
            "reputation": 221,
            "user_id": 2605665,
            "user_type": "registered",
            "profile_image": "https:\/\/graph.facebook.com\/571328749\/picture?type=large",
            "display_name": "Nicol&#225;s Schmidt Gubbins",
            "link": "https:\/\/stackoverflow.com\/users\/2605665\/nicol%c3%a1s-schmidt-gubbins"
        },
        "is_accepted": false,
        "score": 14,
        "last_activity_date": 1602160213,
        "creation_date": 1571921180,
        "answer_id": 58541738,
        "question_id": 24886371,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "    require &#39;sidekiq\/api&#39;\r\n\r\n    Sidekiq::Queue.all.each {|x| x.clear}",
        "body": "<pre><code>require 'sidekiq\/api'\n\nSidekiq::Queue.all.each {|x| x.clear}\n<\/code><\/pre>\n",
        "last_edit_date": 1602160213.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 3866,
            "reputation": 16147,
            "user_id": 5657,
            "user_type": "registered",
            "accept_rate": 88,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/09e37b5978a744d91cf1a8fe41d93718?s=256&d=identicon&r=PG",
            "display_name": "TALlama",
            "link": "https:\/\/stackoverflow.com\/users\/5657\/tallama"
        },
        "is_accepted": false,
        "score": 13,
        "last_activity_date": 1299952082,
        "creation_date": 1221499877,
        "answer_id": 64956,
        "question_id": 63998,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "A lot of the magic you see in Rubyland has to do with metaprogramming, which is simply writing code that writes code for you. Ruby&#39;s `attr_accessor`, `attr_reader`, and `attr_writer` are all simple metaprogramming, in that they create two methods in one line, following a standard pattern. Rails does a whole lot of metaprogramming with their relationship-management methods like `has_one` and `belongs_to`.\r\n\r\nBut it&#39;s pretty simple to create your own metaprogramming tricks using `class_eval` to execute dynamically-written code.\r\n\r\nThe following example allows a wrapper object to forwards certain methods along to an internal object:\r\n\r\n    class Wrapper\r\n      attr_accessor :internal\r\n  \r\n      def self.forwards(*methods)\r\n        methods.each do |method|\r\n          define_method method do |*arguments, &amp;block|\r\n            internal.send method, *arguments, &amp;block\r\n          end\r\n        end\r\n      end\r\n  \r\n      forwards :to_i, :length, :split\r\n    end\r\n\r\n    w = Wrapper.new\r\n    w.internal = &quot;12 13 14&quot;\r\n    w.to_i        # =&gt; 12\r\n    w.length      # =&gt; 8\r\n    w.split(&#39;1&#39;)  # =&gt; [&quot;&quot;, &quot;2 &quot;, &quot;3 &quot;, &quot;4&quot;]\r\n\r\nThe method `Wrapper.forwards` takes symbols for the names of methods and stores them in the `methods` array. Then, for each of those given, we use `define_method` to create a new method whose job it is to send the message along, including all arguments and blocks.\r\n\r\nA great resource for metaprogramming issues is [Why the Lucky Stiff&#39;s &quot;Seeing Metaprogramming Clearly&quot;][1].\r\n\r\n  [1]: http:\/\/viewsourcecode.org\/why\/hacking\/seeingMetaclassesClearly.html",
        "body": "<p>A lot of the magic you see in Rubyland has to do with metaprogramming, which is simply writing code that writes code for you. Ruby's <code>attr_accessor<\/code>, <code>attr_reader<\/code>, and <code>attr_writer<\/code> are all simple metaprogramming, in that they create two methods in one line, following a standard pattern. Rails does a whole lot of metaprogramming with their relationship-management methods like <code>has_one<\/code> and <code>belongs_to<\/code>.<\/p>\n\n<p>But it's pretty simple to create your own metaprogramming tricks using <code>class_eval<\/code> to execute dynamically-written code.<\/p>\n\n<p>The following example allows a wrapper object to forwards certain methods along to an internal object:<\/p>\n\n<pre><code>class Wrapper\n  attr_accessor :internal\n\n  def self.forwards(*methods)\n    methods.each do |method|\n      define_method method do |*arguments, &amp;block|\n        internal.send method, *arguments, &amp;block\n      end\n    end\n  end\n\n  forwards :to_i, :length, :split\nend\n\nw = Wrapper.new\nw.internal = \"12 13 14\"\nw.to_i        # =&gt; 12\nw.length      # =&gt; 8\nw.split('1')  # =&gt; [\"\", \"2 \", \"3 \", \"4\"]\n<\/code><\/pre>\n\n<p>The method <code>Wrapper.forwards<\/code> takes symbols for the names of methods and stores them in the <code>methods<\/code> array. Then, for each of those given, we use <code>define_method<\/code> to create a new method whose job it is to send the message along, including all arguments and blocks.<\/p>\n\n<p>A great resource for metaprogramming issues is <a href=\"http:\/\/viewsourcecode.org\/why\/hacking\/seeingMetaclassesClearly.html\" rel=\"noreferrer\">Why the Lucky Stiff's \"Seeing Metaprogramming Clearly\"<\/a>.<\/p>\n",
        "last_edit_date": 1299952082.0,
        "community_owned_date": 1262465968.0
    },
    {
        "owner": {
            "account_id": 1475,
            "reputation": 534294,
            "user_id": 1968,
            "user_type": "registered",
            "accept_rate": 83,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/fdd630f72eef3790bfb4ef38d08c7f85?s=256&d=identicon&r=PG",
            "display_name": "Konrad Rudolph",
            "link": "https:\/\/stackoverflow.com\/users\/1968\/konrad-rudolph"
        },
        "is_accepted": false,
        "score": 13,
        "last_activity_date": 1225306509,
        "creation_date": 1225306509,
        "answer_id": 247981,
        "question_id": 247948,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "`nil?` can be omitted in boolean contexts. Generally, you can use this to replicate the C# code:\r\n\r\n    return my_string.nil? ||&#160;my_string.empty?",
        "body": "<p><code>nil?<\/code> can be omitted in boolean contexts. Generally, you can use this to replicate the C# code:<\/p>\n\n<pre><code>return my_string.nil? ||\u00a0my_string.empty?\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 25839,
            "reputation": 29545,
            "user_id": 66725,
            "user_type": "registered",
            "accept_rate": 74,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/d75b2602c9eae6f190f0b098e0ef16f6?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "horseyguy",
            "link": "https:\/\/stackoverflow.com\/users\/66725\/horseyguy"
        },
        "is_accepted": false,
        "score": 13,
        "last_activity_date": 1249332291,
        "creation_date": 1249332291,
        "answer_id": 1224534,
        "question_id": 63998,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "create an array of consecutive numbers:\r\n\r\n    x = [*0..5]\r\n\r\nsets x to [0, 1, 2, 3, 4, 5]\r\n\r\n",
        "body": "<p>create an array of consecutive numbers:<\/p>\n\n<pre><code>x = [*0..5]\n<\/code><\/pre>\n\n<p>sets x to [0, 1, 2, 3, 4, 5]<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": 1262465968.0
    },
    {
        "owner": {
            "account_id": 33023,
            "reputation": 10315,
            "user_id": 92096,
            "user_type": "registered",
            "accept_rate": 89,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/0383770fd6f592f2219026793be13d3d?s=256&d=identicon&r=PG",
            "display_name": "pdu",
            "link": "https:\/\/stackoverflow.com\/users\/92096\/pdu"
        },
        "is_accepted": false,
        "score": 13,
        "last_activity_date": 1443806033,
        "creation_date": 1307535250,
        "answer_id": 6278525,
        "question_id": 6277456,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "You usually need development files for building gems. Try:\r\n\r\n    sudo apt-get install libxslt-dev libxml2-dev\r\n\r\n(I just saw that Eric suggested the same in a comment.) \r\n",
        "body": "<p>You usually need development files for building gems. Try:<\/p>\n\n<pre><code>sudo apt-get install libxslt-dev libxml2-dev\n<\/code><\/pre>\n\n<p>(I just saw that Eric suggested the same in a comment.) <\/p>\n",
        "last_edit_date": 1443806033.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 397763,
            "reputation": 159378,
            "user_id": 762073,
            "user_type": "registered",
            "accept_rate": 83,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/7fb6b9bc012cd839a99ba778c722c5a7?s=256&d=identicon&r=PG",
            "display_name": "xdazz",
            "link": "https:\/\/stackoverflow.com\/users\/762073\/xdazz"
        },
        "is_accepted": false,
        "score": 13,
        "last_activity_date": 1358399282,
        "creation_date": 1347441317,
        "answer_id": 12384842,
        "question_id": 12384704,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "With `%r`, you could use any delimiters.\r\n\r\nYou could use `%r{}` or `%r[]` or `%r!!` etc.\r\n\r\nThe benefit of using other delimeters is that you don&#39;t need to escape the `\/` used in normal regex literal.",
        "body": "<p>With <code>%r<\/code>, you could use any delimiters.<\/p>\n\n<p>You could use <code>%r{}<\/code> or <code>%r[]<\/code> or <code>%r!!<\/code> etc.<\/p>\n\n<p>The benefit of using other delimeters is that you don't need to escape the <code>\/<\/code> used in normal regex literal.<\/p>\n",
        "last_edit_date": 1358399282.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1379188,
            "reputation": 625,
            "user_id": 1312566,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/1d8a57f8f82e650c61fbf096cdb1c83e?s=256&d=identicon&r=PG",
            "display_name": "Mark C",
            "link": "https:\/\/stackoverflow.com\/users\/1312566\/mark-c"
        },
        "is_accepted": false,
        "score": 13,
        "last_activity_date": 1401386609,
        "creation_date": 1401386609,
        "answer_id": 23939945,
        "question_id": 690794,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Though an old post, the question keep coming up and the answers don&#39;t always seem clear to me. So, here&#39;s my thoughts.\r\n\r\n%w and %W are examples of General Delimited Input *types*, that relate to Arrays. There are other types that include %q, %Q, %r, %x and %i.\r\n\r\nThe difference between upper and lower case is that it gives us access to the features of single and double quote. With single quotes and lowercase %w, we have no code interpolation (e.g. #{someCode} ) and a limited range of escape characters that work (e.g. \\\\, \\n ). With double quotes and uppercase %W we *do* have access to these features.\r\n\r\nThe delimiter used can be any character, not just the open parenthesis. Play with the examples above to see that in effect.\r\n\r\nFor a full write up with examples of %w and the full list, escape characters and delimiters - have a look at: http:\/\/cyreath.blogspot.com\/2014\/05\/ruby-w-vs-w-secrets-revealed.html\r\n\r\nMark\r\n",
        "body": "<p>Though an old post, the question keep coming up and the answers don't always seem clear to me. So, here's my thoughts.<\/p>\n\n<p>%w and %W are examples of General Delimited Input <em>types<\/em>, that relate to Arrays. There are other types that include %q, %Q, %r, %x and %i.<\/p>\n\n<p>The difference between upper and lower case is that it gives us access to the features of single and double quote. With single quotes and lowercase %w, we have no code interpolation (e.g. #{someCode} ) and a limited range of escape characters that work (e.g. \\, \\n ). With double quotes and uppercase %W we <em>do<\/em> have access to these features.<\/p>\n\n<p>The delimiter used can be any character, not just the open parenthesis. Play with the examples above to see that in effect.<\/p>\n\n<p>For a full write up with examples of %w and the full list, escape characters and delimiters - have a look at: <a href=\"http:\/\/cyreath.blogspot.com\/2014\/05\/ruby-w-vs-w-secrets-revealed.html\">http:\/\/cyreath.blogspot.com\/2014\/05\/ruby-w-vs-w-secrets-revealed.html<\/a><\/p>\n\n<p>Mark<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 894836,
            "reputation": 638,
            "user_id": 932355,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/1288b05d82d1f7aa8a5b01a029522b03?s=256&d=identicon&r=PG",
            "display_name": "rilla",
            "link": "https:\/\/stackoverflow.com\/users\/932355\/rilla"
        },
        "is_accepted": false,
        "score": 13,
        "last_activity_date": 1443805789,
        "creation_date": 1416584323,
        "answer_id": 27064986,
        "question_id": 6277456,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "In Mac OS X (Mavericks) if none of these solutions work, try:\r\n\r\n    ARCHFLAGS=&quot;-arch x86_64&quot; gem install nokogiri\r\n\r\nor\r\n\r\n    ARCHFLAGS=&quot;-arch i386&quot; gem install nokogiri\r\n\r\ndepending on your system&#39;s architecture.\r\n",
        "body": "<p>In Mac OS X (Mavericks) if none of these solutions work, try:<\/p>\n\n<pre><code>ARCHFLAGS=\"-arch x86_64\" gem install nokogiri\n<\/code><\/pre>\n\n<p>or<\/p>\n\n<pre><code>ARCHFLAGS=\"-arch i386\" gem install nokogiri\n<\/code><\/pre>\n\n<p>depending on your system's architecture.<\/p>\n",
        "last_edit_date": 1443805789.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 129567,
            "reputation": 963,
            "user_id": 328237,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/9d5e449d8a83565b9a4ccde2e46f6112?s=256&d=identicon&r=PG",
            "display_name": "Tony",
            "link": "https:\/\/stackoverflow.com\/users\/328237\/tony"
        },
        "is_accepted": false,
        "score": 13,
        "last_activity_date": 1416613558,
        "creation_date": 1416613558,
        "answer_id": 27072269,
        "question_id": 4684446,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "This is an old question, but I just ran across it and I&#39;m not fully satisfied with the existing answers.  There are lots of good points about the shovel &lt;&lt; being faster than concatenation +=, but there is also a semantic consideration.\r\n\r\nThe accepted answer from @noodl shows that &lt;&lt; modifies the existing object in place, whereas += creates a new object.  So you need to consider if you want all references to the string to reflect the new value, or do you want to leave the existing references alone and create a new string value to use locally.  If you need all references to reflect the updated value, then you need to use &lt;&lt;.  If you want to leave other references alone, then you need to use +=.\r\n\r\nA very common case is that there is only a single reference to the string.  In this case, the semantic difference does not matter and it is natural to prefer &lt;&lt; because of its speed.",
        "body": "<p>This is an old question, but I just ran across it and I'm not fully satisfied with the existing answers.  There are lots of good points about the shovel &lt;&lt; being faster than concatenation +=, but there is also a semantic consideration.<\/p>\n\n<p>The accepted answer from @noodl shows that &lt;&lt; modifies the existing object in place, whereas += creates a new object.  So you need to consider if you want all references to the string to reflect the new value, or do you want to leave the existing references alone and create a new string value to use locally.  If you need all references to reflect the updated value, then you need to use &lt;&lt;.  If you want to leave other references alone, then you need to use +=.<\/p>\n\n<p>A very common case is that there is only a single reference to the string.  In this case, the semantic difference does not matter and it is natural to prefer &lt;&lt; because of its speed.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 15803773,
            "reputation": 812,
            "user_id": 11402804,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/ALDDn.jpg?s=256&g=1",
            "display_name": "Andriy Kondzolko",
            "link": "https:\/\/stackoverflow.com\/users\/11402804\/andriy-kondzolko"
        },
        "is_accepted": false,
        "score": 13,
        "last_activity_date": 1558145009,
        "creation_date": 1558145009,
        "answer_id": 56195407,
        "question_id": 24886371,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "All Sidekiq tasks are saved in &quot;Redis&quot;.\r\n\r\nYou can clean &quot;Redis&quot; by this command\r\n\r\n    redis-cli flushall",
        "body": "<p>All Sidekiq tasks are saved in \"Redis\".<\/p>\n\n<p>You can clean \"Redis\" by this command<\/p>\n\n<pre><code>redis-cli flushall\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 250944,
            "reputation": 10396,
            "user_id": 3013522,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/5498748e139a6d5715a167ae64611cc8?s=256&d=identicon&r=PG",
            "display_name": "Wilson Silva",
            "link": "https:\/\/stackoverflow.com\/users\/3013522\/wilson-silva"
        },
        "is_accepted": false,
        "score": 13,
        "last_activity_date": 1571917178,
        "creation_date": 1571917178,
        "answer_id": 58540581,
        "question_id": 3450641,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "If you&#39;re using Ruby 2.4+, you can call `compact` and `compact!`\r\n\r\n    h = { a: 1, b: false, c: nil }\r\n    h.compact! #=&gt; { a: 1, b: false }\r\n\r\nhttps:\/\/ruby-doc.org\/core-2.4.0\/Hash.html#method-i-compact-21",
        "body": "<p>If you're using Ruby 2.4+, you can call <code>compact<\/code> and <code>compact!<\/code><\/p>\n\n<pre><code>h = { a: 1, b: false, c: nil }\nh.compact! #=&gt; { a: 1, b: false }\n<\/code><\/pre>\n\n<p><a href=\"https:\/\/ruby-doc.org\/core-2.4.0\/Hash.html#method-i-compact-21\" rel=\"noreferrer\">https:\/\/ruby-doc.org\/core-2.4.0\/Hash.html#method-i-compact-21<\/a><\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 907,
            "reputation": 64413,
            "user_id": 1190,
            "user_type": "registered",
            "accept_rate": 73,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/5c1d1a63eeb7bb3050d6d38702a34506?s=256&d=identicon&r=PG",
            "display_name": "James A. Rosen",
            "link": "https:\/\/stackoverflow.com\/users\/1190\/james-a-rosen"
        },
        "is_accepted": false,
        "score": 12,
        "last_activity_date": 1221522704,
        "creation_date": 1221496070,
        "answer_id": 64427,
        "question_id": 63998,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "use anything that responds to `===(obj)` for case comparisons:\r\n\r\n    case foo\r\n    when \/baz\/\r\n      do_something_with_the_string_matching_baz\r\n    when 12..15\r\n      do_something_with_the_integer_between_12_and_15\r\n    when lambda { |x| x % 5 == 0 }\r\n      # only works in Ruby 1.9 or if you alias Proc#call as Proc#===\r\n      do_something_with_the_integer_that_is_a_multiple_of_5\r\n    when Bar\r\n      do_something_with_the_instance_of_Bar\r\n    when some_object\r\n      do_something_with_the_thing_that_matches_some_object\r\n    end\r\n\r\n`Module` (and thus `Class`), `Regexp`, `Date`, and many other classes define an instance method :===(other), and can all be used.\r\n\r\nThanks to [Farrel][1] for the reminder of `Proc#call` being aliased as `Proc#===` in Ruby 1.9.\r\n\r\n\r\n  [1]: https:\/\/stackoverflow.com\/questions\/63998\/hidden-features-of-ruby#65015",
        "body": "<p>use anything that responds to <code>===(obj)<\/code> for case comparisons:<\/p>\n\n<pre><code>case foo\nwhen \/baz\/\n  do_something_with_the_string_matching_baz\nwhen 12..15\n  do_something_with_the_integer_between_12_and_15\nwhen lambda { |x| x % 5 == 0 }\n  # only works in Ruby 1.9 or if you alias Proc#call as Proc#===\n  do_something_with_the_integer_that_is_a_multiple_of_5\nwhen Bar\n  do_something_with_the_instance_of_Bar\nwhen some_object\n  do_something_with_the_thing_that_matches_some_object\nend\n<\/code><\/pre>\n\n<p><code>Module<\/code> (and thus <code>Class<\/code>), <code>Regexp<\/code>, <code>Date<\/code>, and many other classes define an instance method :===(other), and can all be used.<\/p>\n\n<p>Thanks to <a href=\"https:\/\/stackoverflow.com\/questions\/63998\/hidden-features-of-ruby#65015\">Farrel<\/a> for the reminder of <code>Proc#call<\/code> being aliased as <code>Proc#===<\/code> in Ruby 1.9.<\/p>\n",
        "last_edit_date": 1495541408.0,
        "community_owned_date": 1262465968.0
    },
    {
        "owner": {
            "account_id": 5031,
            "reputation": 36848,
            "user_id": 7883,
            "user_type": "registered",
            "accept_rate": 48,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/e2e0b96391e9e1b741114fa507247995?s=256&d=identicon&r=PG",
            "display_name": "Vasil",
            "link": "https:\/\/stackoverflow.com\/users\/7883\/vasil"
        },
        "is_accepted": false,
        "score": 12,
        "last_activity_date": 1461135155,
        "creation_date": 1223032463,
        "answer_id": 166373,
        "question_id": 166347,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "let&#39;s say you write your `script.rb` script. put:\r\n\r\n    #!\/usr\/bin\/env ruby\r\n\r\nas the first line and do a `chmod +x script.rb`",
        "body": "<p>let's say you write your <code>script.rb<\/code> script. put:<\/p>\n\n<pre><code>#!\/usr\/bin\/env ruby\n<\/code><\/pre>\n\n<p>as the first line and do a <code>chmod +x script.rb<\/code><\/p>\n",
        "last_edit_date": 1461135155.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 12574,
            "reputation": 295,
            "user_id": 1436792,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/s5O8G.jpg?s=256&g=1",
            "display_name": "craigp",
            "link": "https:\/\/stackoverflow.com\/users\/1436792\/craigp"
        },
        "is_accepted": false,
        "score": 12,
        "last_activity_date": 1223198969,
        "creation_date": 1223198969,
        "answer_id": 171752,
        "question_id": 166347,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "This might also be helpful: [http:\/\/rush.heroku.com\/][1]\r\n\r\nI haven&#39;t used it much, but looks pretty cool\r\n\r\nFrom the site:\r\n\r\n&gt; rush is a replacement for the unix shell (bash, zsh, etc) which uses pure Ruby syntax. Grep through files, find and kill processes, copy files - everything you do in the shell, now in Ruby\r\n\r\n\r\n  [1]: http:\/\/rush.heroku.com\/",
        "body": "<p>This might also be helpful: <a href=\"http:\/\/rush.heroku.com\/\" rel=\"noreferrer\">http:\/\/rush.heroku.com\/<\/a><\/p>\n\n<p>I haven't used it much, but looks pretty cool<\/p>\n\n<p>From the site:<\/p>\n\n<blockquote>\n  <p>rush is a replacement for the unix shell (bash, zsh, etc) which uses pure Ruby syntax. Grep through files, find and kill processes, copy files - everything you do in the shell, now in Ruby<\/p>\n<\/blockquote>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 78757,
            "reputation": 15422,
            "user_id": 223897,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/73c8253932541a7b5cbc5d79493f2bea?s=256&d=identicon&r=PG",
            "display_name": "Robert Speicher",
            "link": "https:\/\/stackoverflow.com\/users\/223897\/robert-speicher"
        },
        "is_accepted": false,
        "score": 12,
        "last_activity_date": 1273718981,
        "creation_date": 1273718981,
        "answer_id": 2824170,
        "question_id": 2824126,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "URI.escape takes a second parameter that lets you mark what&#39;s unsafe. See APIDock:\r\n\r\nhttp:\/\/apidock.com\/ruby\/CGI\/escape\/class\r\n\r\nhttp:\/\/apidock.com\/ruby\/URI\/Escape\/escape",
        "body": "<p>URI.escape takes a second parameter that lets you mark what's unsafe. See APIDock:<\/p>\n\n<p><a href=\"http:\/\/apidock.com\/ruby\/CGI\/escape\/class\" rel=\"noreferrer\">http:\/\/apidock.com\/ruby\/CGI\/escape\/class<\/a><\/p>\n\n<p><a href=\"http:\/\/apidock.com\/ruby\/URI\/Escape\/escape\" rel=\"noreferrer\">http:\/\/apidock.com\/ruby\/URI\/Escape\/escape<\/a><\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 17355,
            "reputation": 79191,
            "user_id": 38765,
            "user_type": "registered",
            "accept_rate": 68,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/01bbb59a1c3ef9960f25a97afe7e920f?s=256&d=identicon&r=PG",
            "display_name": "Andrew Grimm",
            "link": "https:\/\/stackoverflow.com\/users\/38765\/andrew-grimm"
        },
        "is_accepted": false,
        "score": 12,
        "last_activity_date": 1298868793,
        "creation_date": 1298868793,
        "answer_id": 5138321,
        "question_id": 4658269,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "`__send__` exists so it can&#39;t be over-written by accident.\r\n\r\nAs for why `send` exists: I can&#39;t speak for anyone else, but `object.send(:method_name, *parameters)` looks nicer than `object.__send__(:method_name, *parameters)`, so I use `send` unless I *need* to use `__send__`.",
        "body": "<p><code>__send__<\/code> exists so it can't be over-written by accident.<\/p>\n\n<p>As for why <code>send<\/code> exists: I can't speak for anyone else, but <code>object.send(:method_name, *parameters)<\/code> looks nicer than <code>object.__send__(:method_name, *parameters)<\/code>, so I use <code>send<\/code> unless I <em>need<\/em> to use <code>__send__<\/code>.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 141732,
            "reputation": 4057,
            "user_id": 348987,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/MBs6M.jpg?s=256&g=1",
            "display_name": "Christoph Petschnig",
            "link": "https:\/\/stackoverflow.com\/users\/348987\/christoph-petschnig"
        },
        "is_accepted": false,
        "score": 12,
        "last_activity_date": 1316005027,
        "creation_date": 1316005027,
        "answer_id": 7416678,
        "question_id": 1819614,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "In your `spec_helper.rb` file, include the following option:\r\n\r\n    RSpec.configure do |config|\r\n      config.color_enabled = true\r\n    end\r\n\r\nYou then must require in each `*_spec.rb` file that should use that option.\r\n",
        "body": "<p>In your <code>spec_helper.rb<\/code> file, include the following option:<\/p>\n\n<pre><code>RSpec.configure do |config|\n  config.color_enabled = true\nend\n<\/code><\/pre>\n\n<p>You then must require in each <code>*_spec.rb<\/code> file that should use that option.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 103623,
            "reputation": 406,
            "user_id": 277448,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/88451e8964faf5d2bf25768a1184595d?s=256&d=identicon&r=PG",
            "display_name": "c.apolzon",
            "link": "https:\/\/stackoverflow.com\/users\/277448\/c-apolzon"
        },
        "is_accepted": false,
        "score": 12,
        "last_activity_date": 1325785775,
        "creation_date": 1325785775,
        "answer_id": 8747186,
        "question_id": 1667630,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "I prefer to abuse ActiveSupport::JSON.  Their approach is to convert the hash to yaml and then load it.  Unfortunately the conversion to yaml isn&#39;t simple and you&#39;d probably want to borrow it from AS if you don&#39;t have AS in your project already.\r\n\r\nWe also have to convert any symbols into regular string-keys as symbols aren&#39;t appropriate in JSON.\r\n\r\nHowever, its unable to handle hashes that have a date string in them (our date strings end up not being surrounded by strings, which is where the big issue comes in):\r\n\r\nstring = &#39;{&#39;last_request_at&#39; : 2011-12-28 23:00:00 UTC }&#39;\r\n`ActiveSupport::JSON.decode(string.gsub(\/:([a-zA-z])\/,&#39;\\\\1&#39;).gsub(&#39;=&gt;&#39;, &#39; : &#39;))`\r\n\r\nWould result in an invalid JSON string error when it tries to parse the date value.\r\n\r\nWould love any suggestions on how to handle this case",
        "body": "<p>I prefer to abuse ActiveSupport::JSON.  Their approach is to convert the hash to yaml and then load it.  Unfortunately the conversion to yaml isn't simple and you'd probably want to borrow it from AS if you don't have AS in your project already.<\/p>\n\n<p>We also have to convert any symbols into regular string-keys as symbols aren't appropriate in JSON.<\/p>\n\n<p>However, its unable to handle hashes that have a date string in them (our date strings end up not being surrounded by strings, which is where the big issue comes in):<\/p>\n\n<p>string = '{'last_request_at' : 2011-12-28 23:00:00 UTC }'\n<code>ActiveSupport::JSON.decode(string.gsub(\/:([a-zA-z])\/,'\\\\1').gsub('=&gt;', ' : '))<\/code><\/p>\n\n<p>Would result in an invalid JSON string error when it tries to parse the date value.<\/p>\n\n<p>Would love any suggestions on how to handle this case<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1718625,
            "reputation": 21916,
            "user_id": 1575153,
            "user_type": "registered",
            "accept_rate": 73,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/af199402e29ad240e768239e6b9ad90b?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "sergserg",
            "link": "https:\/\/stackoverflow.com\/users\/1575153\/sergserg"
        },
        "is_accepted": false,
        "score": 12,
        "last_activity_date": 1407202341,
        "creation_date": 1407202341,
        "answer_id": 25129968,
        "question_id": 6118779,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "If you want to set the timezone to UTC globally, you can do the following in Rails 4:\r\n\r\n    # Inside config\/application.rb\r\n    config.time_zone = &quot;UTC&quot;\r\n    config.active_record.default_timezone = :utc\r\n\r\nBe sure to restart your application or you won&#39;t see the changes.",
        "body": "<p>If you want to set the timezone to UTC globally, you can do the following in Rails 4:<\/p>\n\n<pre><code># Inside config\/application.rb\nconfig.time_zone = \"UTC\"\nconfig.active_record.default_timezone = :utc\n<\/code><\/pre>\n\n<p>Be sure to restart your application or you won't see the changes.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1109141,
            "reputation": 991,
            "user_id": 1099933,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/759ea37a24763e43df7895422e7448fe?s=256&d=identicon&r=PG",
            "display_name": "Eugene",
            "link": "https:\/\/stackoverflow.com\/users\/1099933\/eugene"
        },
        "is_accepted": false,
        "score": 12,
        "last_activity_date": 1407508267,
        "creation_date": 1407508267,
        "answer_id": 25205872,
        "question_id": 1667630,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "works in rails 4.1 and support symbols without quotes {:a =&gt; &#39;b&#39;}\r\n\r\njust add this to initializers folder:\r\n\r\n    class String\r\n      def to_hash_object\r\n        JSON.parse(self.gsub(\/:([a-zA-z]+)\/,&#39;&quot;\\\\1&quot;&#39;).gsub(&#39;=&gt;&#39;, &#39;: &#39;)).symbolize_keys\r\n      end\r\n    end\r\n\r\n",
        "body": "<p>works in rails 4.1 and support symbols without quotes {:a => 'b'}<\/p>\n\n<p>just add this to initializers folder:<\/p>\n\n<pre><code>class String\n  def to_hash_object\n    JSON.parse(self.gsub(\/:([a-zA-z]+)\/,'\"\\\\1\"').gsub('=&gt;', ': ')).symbolize_keys\n  end\nend\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 101706,
            "reputation": 7382,
            "user_id": 273444,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/26988136c0514172417b7c7c863733f2?s=256&d=identicon&r=PG",
            "display_name": "Alexey Shein",
            "link": "https:\/\/stackoverflow.com\/users\/273444\/alexey-shein"
        },
        "is_accepted": false,
        "score": 12,
        "last_activity_date": 1580948187,
        "creation_date": 1413443574,
        "answer_id": 26398284,
        "question_id": 6714196,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "You can use `Addressable::URI` gem for that:\r\n\r\n    require &#39;addressable\/uri&#39;   \r\n    string = &#39;\\x12\\x34\\x56\\x78\\x9a\\xbc\\xde\\xf1\\x23\\x45\\x67\\x89\\xab\\xcd\\xef\\x12\\x34\\x56\\x78\\x9a&#39;\r\n    Addressable::URI.encode_component(string, Addressable::URI::CharacterClasses::QUERY)\r\n    # &quot;%5Cx12%5Cx34%5Cx56%5Cx78%5Cx9a%5Cxbc%5Cxde%5Cxf1%5Cx23%5Cx45%5Cx67%5Cx89%5Cxab%5Cxcd%5Cxef%5Cx12%5Cx34%5Cx56%5Cx78%5Cx9a&quot; \r\n\r\nIt uses more modern format, than `CGI.escape`, for example, it properly encodes space as `%20` and not as `+` sign, you can read more in &quot;[The application\/x-www-form-urlencoded type][1]&quot; on Wikipedia.\r\n\r\n    2.1.2 :008 &gt; CGI.escape(&#39;Hello, this is me&#39;)\r\n     =&gt; &quot;Hello%2C+this+is+me&quot; \r\n    2.1.2 :009 &gt; Addressable::URI.encode_component(&#39;Hello, this is me&#39;, Addressable::URI::CharacterClasses::QUERY)\r\n     =&gt; &quot;Hello,%20this%20is%20me&quot; \r\n\r\n  [1]: http:\/\/en.wikipedia.org\/wiki\/Percent-encoding#The_application.2Fx-www-form-urlencoded_type\r\n",
        "body": "<p>You can use <code>Addressable::URI<\/code> gem for that:<\/p>\n\n<pre><code>require 'addressable\/uri'   \nstring = '\\x12\\x34\\x56\\x78\\x9a\\xbc\\xde\\xf1\\x23\\x45\\x67\\x89\\xab\\xcd\\xef\\x12\\x34\\x56\\x78\\x9a'\nAddressable::URI.encode_component(string, Addressable::URI::CharacterClasses::QUERY)\n# \"%5Cx12%5Cx34%5Cx56%5Cx78%5Cx9a%5Cxbc%5Cxde%5Cxf1%5Cx23%5Cx45%5Cx67%5Cx89%5Cxab%5Cxcd%5Cxef%5Cx12%5Cx34%5Cx56%5Cx78%5Cx9a\" \n<\/code><\/pre>\n\n<p>It uses more modern format, than <code>CGI.escape<\/code>, for example, it properly encodes space as <code>%20<\/code> and not as <code>+<\/code> sign, you can read more in \"<a href=\"http:\/\/en.wikipedia.org\/wiki\/Percent-encoding#The_application.2Fx-www-form-urlencoded_type\" rel=\"nofollow noreferrer\">The application\/x-www-form-urlencoded type<\/a>\" on Wikipedia.<\/p>\n\n<pre><code>2.1.2 :008 &gt; CGI.escape('Hello, this is me')\n =&gt; \"Hello%2C+this+is+me\" \n2.1.2 :009 &gt; Addressable::URI.encode_component('Hello, this is me', Addressable::URI::CharacterClasses::QUERY)\n =&gt; \"Hello,%20this%20is%20me\" \n<\/code><\/pre>\n",
        "last_edit_date": 1580948187.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 128844,
            "reputation": 2000,
            "user_id": 326979,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/7c3f8a76a26d74211d9a93b58285fdd7?s=256&d=identicon&r=PG",
            "display_name": "spyle",
            "link": "https:\/\/stackoverflow.com\/users\/326979\/spyle"
        },
        "is_accepted": false,
        "score": 12,
        "last_activity_date": 1443106296,
        "creation_date": 1443106296,
        "answer_id": 32764490,
        "question_id": 5200842,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "To ensure that autoloading works as expected in Rails 4.1.10 for multiple custom error classes, you&#39;ll want to specify separate files for each. This should work in development with its dynamically reloading. \r\n\r\nThis is how I setup errors in a recent project:\r\n\r\nIn `lib\/app_name\/error\/base.rb`\r\n\r\n    module AppName\r\n    \tmodule Error\r\n    \t\tclass Base &lt; StandardError; end\r\n    \tend\r\n    end\r\n\r\nand in subsequent custom errors, like in `lib\/app_name\/error\/bad_stuff.rb`\r\n\r\n    module AppName\r\n    \tmodule Error\r\n    \t\tclass BadStuff &lt; ::AppName::Error::Base; end\r\n    \tend\r\n    end\r\n\r\nYou should then be able to call your errors via:\r\n\r\n     raise AppName::Error::BadStuff.new(&quot;Bad stuff just happened&quot;)\r\n\r\n\r\n",
        "body": "<p>To ensure that autoloading works as expected in Rails 4.1.10 for multiple custom error classes, you'll want to specify separate files for each. This should work in development with its dynamically reloading. <\/p>\n\n<p>This is how I setup errors in a recent project:<\/p>\n\n<p>In <code>lib\/app_name\/error\/base.rb<\/code><\/p>\n\n<pre><code>module AppName\n    module Error\n        class Base &lt; StandardError; end\n    end\nend\n<\/code><\/pre>\n\n<p>and in subsequent custom errors, like in <code>lib\/app_name\/error\/bad_stuff.rb<\/code><\/p>\n\n<pre><code>module AppName\n    module Error\n        class BadStuff &lt; ::AppName::Error::Base; end\n    end\nend\n<\/code><\/pre>\n\n<p>You should then be able to call your errors via:<\/p>\n\n<pre><code> raise AppName::Error::BadStuff.new(\"Bad stuff just happened\")\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1701501,
            "reputation": 1054,
            "user_id": 1561433,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/i.stack.imgur.com\/VwlO3.jpg?s=256&g=1",
            "display_name": "frenchloaf",
            "link": "https:\/\/stackoverflow.com\/users\/1561433\/frenchloaf"
        },
        "is_accepted": false,
        "score": 12,
        "last_activity_date": 1534280740,
        "creation_date": 1476690886,
        "answer_id": 40081126,
        "question_id": 882070,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "More elegant `objects.sort_by(&amp;:attribute)`, you can add on a `.reverse` if you need to switch the order. ",
        "body": "<p>More elegant <code>objects.sort_by(&amp;:attribute)<\/code>, you can add on a <code>.reverse<\/code> if you need to switch the order. <\/p>\n",
        "last_edit_date": 1534280740.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 10132972,
            "reputation": 121,
            "user_id": 7485625,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/f02612b7f0b4b293cb86434398f09dae?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "tech bun",
            "link": "https:\/\/stackoverflow.com\/users\/7485625\/tech-bun"
        },
        "is_accepted": false,
        "score": 12,
        "last_activity_date": 1485688087,
        "creation_date": 1485685099,
        "answer_id": 41919777,
        "question_id": 2054217,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "you can use this for rounding to a precison..\r\n\r\n    \/\/to_f is for float\r\n\r\n    salary= 2921.9121\r\n    puts salary.to_f.round(2) \/\/ to 2 decimal place                   \r\n    \r\n    puts salary.to_f.round() \/\/ to 3 decimal place          \r\n\r\n",
        "body": "<p>you can use this for rounding to a precison..<\/p>\n\n<pre><code>\/\/to_f is for float\n\nsalary= 2921.9121\nputs salary.to_f.round(2) \/\/ to 2 decimal place                   \n\nputs salary.to_f.round() \/\/ to 3 decimal place          \n<\/code><\/pre>\n",
        "last_edit_date": 1485688087.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 457269,
            "reputation": 2919,
            "user_id": 856477,
            "user_type": "registered",
            "accept_rate": 60,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/008cce697b35cc8ef95118f02dbb9a1e?s=256&d=identicon&r=PG",
            "display_name": "Andrew Smith",
            "link": "https:\/\/stackoverflow.com\/users\/856477\/andrew-smith"
        },
        "is_accepted": false,
        "score": 12,
        "last_activity_date": 1506505648,
        "creation_date": 1505937060,
        "answer_id": 46330696,
        "question_id": 44396215,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "This worked for me, although I had to do\r\n\r\n    sudo gem install cocoapods\r\n",
        "body": "<p>This worked for me, although I had to do<\/p>\n\n<pre><code>sudo gem install cocoapods\n<\/code><\/pre>\n",
        "last_edit_date": 1506505648.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 87188,
            "reputation": 121,
            "user_id": 241953,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/eW2ZP.jpg?s=256&g=1",
            "display_name": "minaguib",
            "link": "https:\/\/stackoverflow.com\/users\/241953\/minaguib"
        },
        "is_accepted": false,
        "score": 11,
        "last_activity_date": 1262465968,
        "creation_date": 1262465968,
        "answer_id": 1992828,
        "question_id": 63998,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "The &quot;ruby&quot; binary (at least MRI&#39;s) supports a lot of the switches that made perl one-liners quite popular.\r\n\r\nSignificant ones:\r\n\r\n - -n Sets up an outer loop with just &quot;gets&quot; - which magically works with given filename or STDIN, setting each read line in $_\r\n - -p Similar to -n but with an automatic `put`s at the end of each loop iteration\r\n - -a Automatic call to .split on each input line, stored in $F\r\n - -i In-place edit input files\r\n - -l Automatic call to .chomp on input\r\n - -e Execute a piece of code\r\n - -c Check source code\r\n - -w With warnings\r\n\r\nSome examples:\r\n\r\n    # Print each line with its number:\r\n    ruby -ne &#39;print($., &quot;: &quot;, $_)&#39; &lt; \/etc\/irbrc\r\n    \r\n    # Print each line reversed:\r\n    ruby -lne &#39;puts $_.reverse&#39; &lt; \/etc\/irbrc\r\n    \r\n    # Print the second column from an input CSV (dumb - no balanced quote support etc):\r\n    ruby -F, -ane &#39;puts $F[1]&#39; &lt; \/etc\/irbrc\r\n    \r\n    # Print lines that contain &quot;eat&quot;\r\n    ruby -ne &#39;puts $_ if \/eat\/i&#39; &lt; \/etc\/irbrc\r\n    \r\n    # Same as above:\r\n    ruby -pe &#39;next unless \/eat\/i&#39; &lt; \/etc\/irbrc\r\n    \r\n    # Pass-through (like cat, but with possible line-end munging):\r\n    ruby -p -e &#39;&#39; &lt; \/etc\/irbrc\r\n    \r\n    # Uppercase all input:\r\n    ruby -p -e &#39;$_.upcase!&#39; &lt; \/etc\/irbrc\r\n    \r\n    # Same as above, but actually write to the input file, and make a backup first with extension .bak - Notice that inplace edit REQUIRES input files, not an input STDIN:\r\n    ruby -i.bak -p -e &#39;$_.upcase!&#39; \/etc\/irbrc\r\n\r\nFeel free to google &quot;ruby one-liners&quot; and &quot;perl one-liners&quot; for tons more usable and practical examples.  It essentially allows you to use ruby as a fairly powerful replacement to awk and sed.",
        "body": "<p>The \"ruby\" binary (at least MRI's) supports a lot of the switches that made perl one-liners quite popular.<\/p>\n\n<p>Significant ones:<\/p>\n\n<ul>\n<li>-n Sets up an outer loop with just \"gets\" - which magically works with given filename or STDIN, setting each read line in $_<\/li>\n<li>-p Similar to -n but with an automatic <code>put<\/code>s at the end of each loop iteration<\/li>\n<li>-a Automatic call to .split on each input line, stored in $F<\/li>\n<li>-i In-place edit input files<\/li>\n<li>-l Automatic call to .chomp on input<\/li>\n<li>-e Execute a piece of code<\/li>\n<li>-c Check source code<\/li>\n<li>-w With warnings<\/li>\n<\/ul>\n\n<p>Some examples:<\/p>\n\n<pre><code># Print each line with its number:\nruby -ne 'print($., \": \", $_)' &lt; \/etc\/irbrc\n\n# Print each line reversed:\nruby -lne 'puts $_.reverse' &lt; \/etc\/irbrc\n\n# Print the second column from an input CSV (dumb - no balanced quote support etc):\nruby -F, -ane 'puts $F[1]' &lt; \/etc\/irbrc\n\n# Print lines that contain \"eat\"\nruby -ne 'puts $_ if \/eat\/i' &lt; \/etc\/irbrc\n\n# Same as above:\nruby -pe 'next unless \/eat\/i' &lt; \/etc\/irbrc\n\n# Pass-through (like cat, but with possible line-end munging):\nruby -p -e '' &lt; \/etc\/irbrc\n\n# Uppercase all input:\nruby -p -e '$_.upcase!' &lt; \/etc\/irbrc\n\n# Same as above, but actually write to the input file, and make a backup first with extension .bak - Notice that inplace edit REQUIRES input files, not an input STDIN:\nruby -i.bak -p -e '$_.upcase!' \/etc\/irbrc\n<\/code><\/pre>\n\n<p>Feel free to google \"ruby one-liners\" and \"perl one-liners\" for tons more usable and practical examples.  It essentially allows you to use ruby as a fairly powerful replacement to awk and sed.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": 1262465968.0
    },
    {
        "owner": {
            "account_id": 188960,
            "reputation": 11528,
            "user_id": 427992,
            "user_type": "registered",
            "accept_rate": 91,
            "profile_image": "https:\/\/i.stack.imgur.com\/MGeAO.jpg?s=256&g=1",
            "display_name": "hohner",
            "link": "https:\/\/stackoverflow.com\/users\/427992\/hohner"
        },
        "is_accepted": false,
        "score": 11,
        "last_activity_date": 1443806044,
        "creation_date": 1364149253,
        "answer_id": 15602232,
        "question_id": 6277456,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "It will be:\r\n\r\n    sudo yum install -y libxml2 libxml2-devel\r\n\r\non RHEL servers.",
        "body": "<p>It will be:<\/p>\n\n<pre><code>sudo yum install -y libxml2 libxml2-devel\n<\/code><\/pre>\n\n<p>on RHEL servers.<\/p>\n",
        "last_edit_date": 1443806044.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 452039,
            "reputation": 10058,
            "user_id": 848250,
            "user_type": "registered",
            "accept_rate": 71,
            "profile_image": "https:\/\/i.stack.imgur.com\/w1PmQ.jpg?s=256&g=1",
            "display_name": "Lu&#237;s Ramalho",
            "link": "https:\/\/stackoverflow.com\/users\/848250\/lu%c3%ads-ramalho"
        },
        "is_accepted": false,
        "score": 11,
        "last_activity_date": 1396378265,
        "creation_date": 1364943906,
        "answer_id": 15776018,
        "question_id": 632742,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "You can use `update_columns`:\r\n\r\n    User.first.update_columns({:name =&gt; &quot;sebastian&quot;, :age =&gt; 25})\r\n\r\n&gt; Updates the given attributes of an object, without calling save, hence skipping validations and callbacks.\r\n",
        "body": "<p>You can use <code>update_columns<\/code>:<\/p>\n\n<pre><code>User.first.update_columns({:name =&gt; \"sebastian\", :age =&gt; 25})\n<\/code><\/pre>\n\n<blockquote>\n  <p>Updates the given attributes of an object, without calling save, hence skipping validations and callbacks.<\/p>\n<\/blockquote>\n",
        "last_edit_date": 1396378265.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 49931,
            "reputation": 25463,
            "user_id": 148844,
            "user_type": "registered",
            "accept_rate": 67,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/263aa1ae12d9757f78167b80e596c3df?s=256&d=identicon&r=PG",
            "display_name": "Chloe",
            "link": "https:\/\/stackoverflow.com\/users\/148844\/chloe"
        },
        "is_accepted": false,
        "score": 11,
        "last_activity_date": 1443805867,
        "creation_date": 1394056726,
        "answer_id": 22210252,
        "question_id": 6277456,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "I was able to get this installed with [Chocolatey](http:\/\/chocolatey.org), Windows 8.1 x64, and DevKit x64.\r\n\r\n\r\n    cinst libxml2\r\n    cinst libxslt\r\n    cinst libiconv\r\n\r\n    gem install nokogiri -- \r\n      --with-xml2-include=C:\\Chocolatey\\lib\\libxml2.2.7.8.7\\build\\native\\include \r\n      --with-xml2-lib=C:\\Chocolatey\\lib\\libxml2.redist.2.7.8.7\\build\\native\\bin\\v110\\x64\\Release\\dynamic\\cdecl \r\n      --with-iconv-include=C:\\Chocolatey\\lib\\libiconv.1.14.0.11\\build\\native\\include \r\n      --with-iconv-lib=C:\\Chocolatey\\lib\\libiconv.redist.1.14.0.11\\build\\native\\bin\\v110\\x64\\Release\\dynamic\\cdecl \r\n      --with-xslt-include=C:\\Chocolatey\\lib\\libxslt.1.1.28.0\\build\\native\\include \r\n      --with-xslt-lib=C:\\Chocolatey\\lib\\libxslt.redist.1.1.28.0\\build\\native\\bin\\v110\\x64\\Release\\dynamic\r\n\r\nYou&#39;ll have to verify the version number in the paths are correct.\r\n\r\nYou may possibly need to add Microsoft&#39;s NuGet repository:\r\n\r\n    -Source &quot;https:\/\/go.microsoft.com\/fwlink\/?LinkID=230477&quot;",
        "body": "<p>I was able to get this installed with <a href=\"http:\/\/chocolatey.org\" rel=\"nofollow\">Chocolatey<\/a>, Windows 8.1 x64, and DevKit x64.<\/p>\n\n<pre><code>cinst libxml2\ncinst libxslt\ncinst libiconv\n\ngem install nokogiri -- \n  --with-xml2-include=C:\\Chocolatey\\lib\\libxml2.2.7.8.7\\build\\native\\include \n  --with-xml2-lib=C:\\Chocolatey\\lib\\libxml2.redist.2.7.8.7\\build\\native\\bin\\v110\\x64\\Release\\dynamic\\cdecl \n  --with-iconv-include=C:\\Chocolatey\\lib\\libiconv.1.14.0.11\\build\\native\\include \n  --with-iconv-lib=C:\\Chocolatey\\lib\\libiconv.redist.1.14.0.11\\build\\native\\bin\\v110\\x64\\Release\\dynamic\\cdecl \n  --with-xslt-include=C:\\Chocolatey\\lib\\libxslt.1.1.28.0\\build\\native\\include \n  --with-xslt-lib=C:\\Chocolatey\\lib\\libxslt.redist.1.1.28.0\\build\\native\\bin\\v110\\x64\\Release\\dynamic\n<\/code><\/pre>\n\n<p>You'll have to verify the version number in the paths are correct.<\/p>\n\n<p>You may possibly need to add Microsoft's NuGet repository:<\/p>\n\n<pre><code>-Source \"https:\/\/go.microsoft.com\/fwlink\/?LinkID=230477\"\n<\/code><\/pre>\n",
        "last_edit_date": 1443805867.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 442466,
            "reputation": 2331,
            "user_id": 833093,
            "user_type": "registered",
            "accept_rate": 60,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/05917fed26d7519fae8318f78d14592a?s=256&d=identicon&r=PG",
            "display_name": "Thomas Grainger",
            "link": "https:\/\/stackoverflow.com\/users\/833093\/thomas-grainger"
        },
        "is_accepted": false,
        "score": 11,
        "last_activity_date": 1400497977,
        "creation_date": 1400497977,
        "answer_id": 23736278,
        "question_id": 17618113,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Simply install ruby-build in ubuntu:\r\n\r\n    sudo apt-get install ruby-build\r\n\r\nAnd add\r\n\r\n    eval &quot;$(rbenv init -)&quot;\r\n\r\nTo your ~\/.bashrc",
        "body": "<p>Simply install ruby-build in ubuntu:<\/p>\n\n<pre><code>sudo apt-get install ruby-build\n<\/code><\/pre>\n\n<p>And add<\/p>\n\n<pre><code>eval \"$(rbenv init -)\"\n<\/code><\/pre>\n\n<p>To your ~\/.bashrc<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2022894,
            "reputation": 2994,
            "user_id": 1808649,
            "user_type": "registered",
            "accept_rate": 78,
            "profile_image": "https:\/\/i.stack.imgur.com\/7OGag.jpg?s=256&g=1",
            "display_name": "Fran Martinez",
            "link": "https:\/\/stackoverflow.com\/users\/1808649\/fran-martinez"
        },
        "is_accepted": false,
        "score": 11,
        "last_activity_date": 1422613118,
        "creation_date": 1422613118,
        "answer_id": 28233660,
        "question_id": 1604305,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "This is the way:\r\n\r\n    [1,2,3,4,5][0..-1-1]\r\n\r\n\r\n----------\r\n\r\n\r\n**But let&#39;s explain how this works:**\r\n\r\n    a = [1,2,3,4,5]\r\n\r\nNext example will return all records, **from 0 position to last**\r\n    \r\n    a[0..-1]\r\n    =&gt; [1, 2, 3, 4, 5]\r\n\r\nNext example will return records **from 1 position to last**\r\n    \r\n    a[1..-1]\r\n    =&gt; [2, 3, 4, 5]\r\n\r\nAnd here you have what you need. Next example will return records **from 0 position to last-1**\r\n    \r\n    a[0..-1-1]\r\n    =&gt; [1, 2, 3, 4]",
        "body": "<p>This is the way:<\/p>\n\n<pre><code>[1,2,3,4,5][0..-1-1]\n<\/code><\/pre>\n\n<hr>\n\n<p><strong>But let's explain how this works:<\/strong><\/p>\n\n<pre><code>a = [1,2,3,4,5]\n<\/code><\/pre>\n\n<p>Next example will return all records, <strong>from 0 position to last<\/strong><\/p>\n\n<pre><code>a[0..-1]\n=&gt; [1, 2, 3, 4, 5]\n<\/code><\/pre>\n\n<p>Next example will return records <strong>from 1 position to last<\/strong><\/p>\n\n<pre><code>a[1..-1]\n=&gt; [2, 3, 4, 5]\n<\/code><\/pre>\n\n<p>And here you have what you need. Next example will return records <strong>from 0 position to last-1<\/strong><\/p>\n\n<pre><code>a[0..-1-1]\n=&gt; [1, 2, 3, 4]\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4483663,
            "reputation": 12396,
            "user_id": 3647002,
            "user_type": "registered",
            "accept_rate": 47,
            "profile_image": "https:\/\/i.stack.imgur.com\/WR7iJ.jpg?s=256&g=1",
            "display_name": "Gayan Weerakutti",
            "link": "https:\/\/stackoverflow.com\/users\/3647002\/gayan-weerakutti"
        },
        "is_accepted": false,
        "score": 11,
        "last_activity_date": 1448604480,
        "creation_date": 1447401059,
        "answer_id": 33687958,
        "question_id": 28896733,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Use the **RHC tested** Ruby version instead of the latest. As of today it is [1.9.3-p194][1]\r\n\r\n\r\n  [1]: http:\/\/rubyinstaller.org\/downloads\/archives",
        "body": "<p>Use the <strong>RHC tested<\/strong> Ruby version instead of the latest. As of today it is <a href=\"http:\/\/rubyinstaller.org\/downloads\/archives\" rel=\"noreferrer\">1.9.3-p194<\/a><\/p>\n",
        "last_edit_date": 1448604480.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 3411485,
            "reputation": 153,
            "user_id": 5694144,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/80b0e9c34d90dbc4138e1e3de4653c50?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "John Cole",
            "link": "https:\/\/stackoverflow.com\/users\/5694144\/john-cole"
        },
        "is_accepted": false,
        "score": 11,
        "last_activity_date": 1458851243,
        "creation_date": 1457029049,
        "answer_id": 35779913,
        "question_id": 3872236,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "You can get the attributes of a model object returned as a hash using either\r\n\r\n    @post.attributes\r\nor\r\n\r\n    @post.as_json\r\n\r\n`as_json` allows you to include associations and their attributes as well as specify which attributes to include\/exclude (see [documentation][1]). However, if you only need the attributes of the base object, benchmarking in my app with ruby 2.2.3 and rails 4.2.2 demonstrates that `attributes` requires less than half as much time as `as_json`.\r\n\r\n    &gt;&gt; p = Problem.last\r\n     Problem Load (0.5ms)  SELECT  &quot;problems&quot;.* FROM &quot;problems&quot;  ORDER BY &quot;problems&quot;.&quot;id&quot; DESC LIMIT 1\r\n    =&gt; #&lt;Problem id: 137, enabled: true, created_at: &quot;2016-02-19 11:20:28&quot;, updated_at: &quot;2016-02-26 07:47:34&quot;&gt; \r\n    &gt;&gt;\r\n    &gt;&gt; p.attributes\r\n    =&gt; {&quot;id&quot;=&gt;137, &quot;enabled&quot;=&gt;true, &quot;created_at&quot;=&gt;Fri, 19 Feb 2016 11:20:28 UTC +00:00, &quot;updated_at&quot;=&gt;Fri, 26 Feb 2016 07:47:34 UTC +00:00}\r\n    &gt;&gt;\r\n    &gt;&gt; p.as_json\r\n    =&gt; {&quot;id&quot;=&gt;137, &quot;enabled&quot;=&gt;true, &quot;created_at&quot;=&gt;Fri, 19 Feb 2016 11:20:28 UTC +00:00, &quot;updated_at&quot;=&gt;Fri, 26 Feb 2016 07:47:34 UTC +00:00}\r\n    &gt;&gt;\r\n    &gt;&gt; n = 1000000\r\n    &gt;&gt; Benchmark.bmbm do |x|\r\n    ?&gt;   x.report(&quot;attributes&quot;) { n.times { p.attributes } }\r\n    ?&gt;   x.report(&quot;as_json&quot;)    { n.times { p.as_json } }\r\n    &gt;&gt; end\r\n    Rehearsal ----------------------------------------------\r\n    attributes   6.910000   0.020000   6.930000 (  7.078699)\r\n    as_json     14.810000   0.160000  14.970000 ( 15.253316)\r\n    ------------------------------------ total: 21.900000sec\r\n\r\n                 user     system      total        real\r\n    attributes   6.820000   0.010000   6.830000 (  7.004783)\r\n    as_json     14.990000   0.050000  15.040000 ( 15.352894)\r\n\r\n\r\n  [1]: http:\/\/api.rubyonrails.org\/classes\/ActiveModel\/Serializers\/JSON.html#method-i-as_json",
        "body": "<p>You can get the attributes of a model object returned as a hash using either<\/p>\n\n<pre><code>@post.attributes\n<\/code><\/pre>\n\n<p>or<\/p>\n\n<pre><code>@post.as_json\n<\/code><\/pre>\n\n<p><code>as_json<\/code> allows you to include associations and their attributes as well as specify which attributes to include\/exclude (see <a href=\"http:\/\/api.rubyonrails.org\/classes\/ActiveModel\/Serializers\/JSON.html#method-i-as_json\" rel=\"noreferrer\">documentation<\/a>). However, if you only need the attributes of the base object, benchmarking in my app with ruby 2.2.3 and rails 4.2.2 demonstrates that <code>attributes<\/code> requires less than half as much time as <code>as_json<\/code>.<\/p>\n\n<pre><code>&gt;&gt; p = Problem.last\n Problem Load (0.5ms)  SELECT  \"problems\".* FROM \"problems\"  ORDER BY \"problems\".\"id\" DESC LIMIT 1\n=&gt; #&lt;Problem id: 137, enabled: true, created_at: \"2016-02-19 11:20:28\", updated_at: \"2016-02-26 07:47:34\"&gt; \n&gt;&gt;\n&gt;&gt; p.attributes\n=&gt; {\"id\"=&gt;137, \"enabled\"=&gt;true, \"created_at\"=&gt;Fri, 19 Feb 2016 11:20:28 UTC +00:00, \"updated_at\"=&gt;Fri, 26 Feb 2016 07:47:34 UTC +00:00}\n&gt;&gt;\n&gt;&gt; p.as_json\n=&gt; {\"id\"=&gt;137, \"enabled\"=&gt;true, \"created_at\"=&gt;Fri, 19 Feb 2016 11:20:28 UTC +00:00, \"updated_at\"=&gt;Fri, 26 Feb 2016 07:47:34 UTC +00:00}\n&gt;&gt;\n&gt;&gt; n = 1000000\n&gt;&gt; Benchmark.bmbm do |x|\n?&gt;   x.report(\"attributes\") { n.times { p.attributes } }\n?&gt;   x.report(\"as_json\")    { n.times { p.as_json } }\n&gt;&gt; end\nRehearsal ----------------------------------------------\nattributes   6.910000   0.020000   6.930000 (  7.078699)\nas_json     14.810000   0.160000  14.970000 ( 15.253316)\n------------------------------------ total: 21.900000sec\n\n             user     system      total        real\nattributes   6.820000   0.010000   6.830000 (  7.004783)\nas_json     14.990000   0.050000  15.040000 ( 15.352894)\n<\/code><\/pre>\n",
        "last_edit_date": 1458851243.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 217302,
            "reputation": 13902,
            "user_id": 473040,
            "user_type": "registered",
            "accept_rate": 78,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/c2713a4959692f16d27d2553fb06cc4b?s=256&d=identicon&r=PG",
            "display_name": "equivalent8",
            "link": "https:\/\/stackoverflow.com\/users\/473040\/equivalent8"
        },
        "is_accepted": false,
        "score": 11,
        "last_activity_date": 1486630222,
        "creation_date": 1470044560,
        "answer_id": 38695634,
        "question_id": 20403063,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "yep as `Oin` is suggesting `be_within` matcher is the best practice\r\n\r\n...and it has some more uscases -&gt;  http:\/\/www.eq8.eu\/blogs\/27-rspec-be_within-matcher  \r\n\r\nBut one more way how to deal with this is to use Rails built in `midday` and `middnight` attributes. \r\n\r\n\r\n    it do\r\n      # ...\r\n      stubtime = Time.now.midday\r\n      expect(Time).to receive(:now).and_return(stubtime)\r\n      \r\n      patch :update \r\n      expect(@article.reload.updated_at).to eq(stubtime)\r\n      # ...\r\n    end\r\n\r\n**Now this is just for demonstration !**\r\n\r\n I wouldn&#39;t use this in a controller as you are stubbing all Time.new calls =&gt; all time attributes will have same time =&gt; may not prove concept you are trying to achive. I usually use it in composed Ruby Objects similar to this:\r\n\r\n\r\n    class MyService\r\n      attr_reader :time_evaluator, resource\r\n    \r\n      def initialize(resource:, time_evaluator: -&gt;{Time.now})\r\n        @time_evaluator = time_evaluator\r\n        @resource = resource\r\n      end\r\n    \r\n      def call\r\n        # do some complex logic\r\n        resource.published_at = time_evaluator.call\r\n      end\r\n    end\r\n    \r\n    require &#39;rspec&#39;\r\n    require &#39;active_support\/time&#39;\r\n    require &#39;ostruct&#39;\r\n    \r\n    RSpec.describe MyService do\r\n      let(:service) { described_class.new(resource: resource, time_evaluator: -&gt; { Time.now.midday } ) }\r\n      let(:resource) { OpenStruct.new }\r\n      \r\n      it do\r\n        service.call\r\n        expect(resource.published_at).to eq(Time.now.midday)    \r\n      end\r\n    end\r\n\r\n\r\n\r\n\r\nBut honestly I recommend to stick with `be_within` matcher even when comparing Time.now.midday ! \r\n\r\nSo yes pls stick with `be_within` matcher ;)\r\n\r\n----------\r\n\r\n**update 2017-02**\r\n\r\nQuestion in comment: \r\n\r\n&gt;\twhat if the times are in a Hash? any way to make expect(hash_1).to eq(hash_2) work when some hash_1 values are pre-db-times and the corresponding values in hash_2 are post-db-times? \u2013\r\n\r\n    expect({mytime: Time.now}).to match({mytime: be_within(3.seconds).of(Time.now)}) `\r\n\r\n  you can pass any RSpec matcher to the `match` matcher\r\n(so e.g. you can even do [API testing with pure RSpec](http:\/\/www.eq8.eu\/blogs\/30-pure-rspec-json-api-testing))\r\n\r\nAs for &quot;post-db-times&quot; I guess you mean  string that is generated after saving to DB. I would suggest decouple this case to 2 expectations (one ensuring hash structure, second checking the time) So you can do something like:\r\n\r\n    hash = {mytime: Time.now.to_s(:db)}\r\n    expect(hash).to match({mytime: be_kind_of(String))\r\n    expect(Time.parse(hash.fetch(:mytime))).to be_within(3.seconds).of(Time.now)\r\n\r\nBut if this  case is too often in your test suite I would suggest writing your [own RSpec matcher](https:\/\/www.relishapp.com\/rspec\/rspec-expectations\/v\/2-5\/docs\/custom-matchers\/define-matcher) (e.g. `be_near_time_now_db_string`) converting db string time to Time object and then use this as a part of the `match(hash)` :\r\n \r\n     expect(hash).to match({mytime: be_near_time_now_db_string})  # you need to write your own matcher for this to work.",
        "body": "<p>yep as <code>Oin<\/code> is suggesting <code>be_within<\/code> matcher is the best practice<\/p>\n\n<p>...and it has some more uscases ->  <a href=\"http:\/\/www.eq8.eu\/blogs\/27-rspec-be_within-matcher\" rel=\"noreferrer\">http:\/\/www.eq8.eu\/blogs\/27-rspec-be_within-matcher<\/a>  <\/p>\n\n<p>But one more way how to deal with this is to use Rails built in <code>midday<\/code> and <code>middnight<\/code> attributes. <\/p>\n\n<pre><code>it do\n  # ...\n  stubtime = Time.now.midday\n  expect(Time).to receive(:now).and_return(stubtime)\n\n  patch :update \n  expect(@article.reload.updated_at).to eq(stubtime)\n  # ...\nend\n<\/code><\/pre>\n\n<p><strong>Now this is just for demonstration !<\/strong><\/p>\n\n<p>I wouldn't use this in a controller as you are stubbing all Time.new calls => all time attributes will have same time => may not prove concept you are trying to achive. I usually use it in composed Ruby Objects similar to this:<\/p>\n\n<pre><code>class MyService\n  attr_reader :time_evaluator, resource\n\n  def initialize(resource:, time_evaluator: -&gt;{Time.now})\n    @time_evaluator = time_evaluator\n    @resource = resource\n  end\n\n  def call\n    # do some complex logic\n    resource.published_at = time_evaluator.call\n  end\nend\n\nrequire 'rspec'\nrequire 'active_support\/time'\nrequire 'ostruct'\n\nRSpec.describe MyService do\n  let(:service) { described_class.new(resource: resource, time_evaluator: -&gt; { Time.now.midday } ) }\n  let(:resource) { OpenStruct.new }\n\n  it do\n    service.call\n    expect(resource.published_at).to eq(Time.now.midday)    \n  end\nend\n<\/code><\/pre>\n\n<p>But honestly I recommend to stick with <code>be_within<\/code> matcher even when comparing Time.now.midday ! <\/p>\n\n<p>So yes pls stick with <code>be_within<\/code> matcher ;)<\/p>\n\n<hr>\n\n<p><strong>update 2017-02<\/strong><\/p>\n\n<p>Question in comment: <\/p>\n\n<blockquote>\n  <p>what if the times are in a Hash? any way to make expect(hash_1).to eq(hash_2) work when some hash_1 values are pre-db-times and the corresponding values in hash_2 are post-db-times? \u2013<\/p>\n<\/blockquote>\n\n<pre><code>expect({mytime: Time.now}).to match({mytime: be_within(3.seconds).of(Time.now)}) `\n<\/code><\/pre>\n\n<p>you can pass any RSpec matcher to the <code>match<\/code> matcher\n(so e.g. you can even do <a href=\"http:\/\/www.eq8.eu\/blogs\/30-pure-rspec-json-api-testing\" rel=\"noreferrer\">API testing with pure RSpec<\/a>)<\/p>\n\n<p>As for \"post-db-times\" I guess you mean  string that is generated after saving to DB. I would suggest decouple this case to 2 expectations (one ensuring hash structure, second checking the time) So you can do something like:<\/p>\n\n<pre><code>hash = {mytime: Time.now.to_s(:db)}\nexpect(hash).to match({mytime: be_kind_of(String))\nexpect(Time.parse(hash.fetch(:mytime))).to be_within(3.seconds).of(Time.now)\n<\/code><\/pre>\n\n<p>But if this  case is too often in your test suite I would suggest writing your <a href=\"https:\/\/www.relishapp.com\/rspec\/rspec-expectations\/v\/2-5\/docs\/custom-matchers\/define-matcher\" rel=\"noreferrer\">own RSpec matcher<\/a> (e.g. <code>be_near_time_now_db_string<\/code>) converting db string time to Time object and then use this as a part of the <code>match(hash)<\/code> :<\/p>\n\n<pre><code> expect(hash).to match({mytime: be_near_time_now_db_string})  # you need to write your own matcher for this to work.\n<\/code><\/pre>\n",
        "last_edit_date": 1486630222.0,
        "community_owned_date": null
    }
]

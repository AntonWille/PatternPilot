[
    {
        "owner": {
            "account_id": 1659194,
            "reputation": 519,
            "user_id": 1527814,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/074a405d0381204e29048417778d4475?s=256&d=identicon&r=PG",
            "display_name": "Sankalp",
            "link": "https:\/\/stackoverflow.com\/users\/1527814\/sankalp"
        },
        "is_accepted": false,
        "score": 9,
        "last_activity_date": 1408220431,
        "creation_date": 1408220431,
        "answer_id": 25343595,
        "question_id": 18276701,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "This isn&#39;t an answer to the question asked, but to the related question that most commenters\/responders have asked -- *Why do you need to put the rvm line at the bottom of the shell rc file?*\r\n\r\nThe answer is simple.\r\n\r\n1. The rvm code which is loaded puts the rvm ruby binary directories at the &quot;front&quot; of `$PATH`, and \r\n2. `.bashrc` (or equivalent for your default shell) is read and interpreted line-by-line from top to bottom.\r\n\r\nSo imagine the following scenario :\r\n\r\n    $ echo $PATH\r\n      \/usr\/local\/bin:\/usr\/bin:\/bin:\/usr\/local\/sbin:\/usr\/sbin:\/sbin \r\n\r\n    $ [[ -s &quot;$HOME\/.rvm\/scripts\/rvm&quot; ]] &amp;&amp; source &quot;$HOME\/.rvm\/scripts\/rvm&quot;\r\n      \/Users\/sankalp\/.rvm\/gems\/ruby-1.9.3-p547\/bin:\/Users\/sankalp\/.rvm\/gems\/ruby-1.9.3-p547@global\/bin:\/Users\/sankalp\/.rvm\/rubies\/ruby-1.9.3-p547\/bin:\/Users\/sankalp\/bin:\/usr\/texbin\/:\/usr\/local\/bin:\/usr\/bin:\/bin:\/usr\/local\/sbin:\/usr\/sbin:\/sbin\r\n\r\n    $ export PATH=&lt;something&gt;:$PATH\r\n    $ echo $PATH\r\n      &lt;something&gt;:\/Users\/sankalp\/.rvm\/gems\/ruby-1.9.3-p547\/bin:\/Users\/sankalp\/.rvm\/gems\/ruby-1.9.3-p547@global\/bin:\/Users\/sankalp\/.rvm\/rubies\/ruby-1.9.3-p547\/bin:\/Users\/sankalp\/bin:\/usr\/texbin\/:\/usr\/local\/bin:\/usr\/bin:\/bin:\/usr\/local\/sbin:\/usr\/sbin:\/sbin\r\n\r\nClearly if something is present in the shell init file *after* the RVM line and makes any changes to $PATH, more specifically if it prepends directories to `$PATH`, then those changes will push the directories added by rvm down from their first position. RVM, when invoked, will find that its ruby binary directories are *not* at the very beginning of `$PATH` and BAM! you&#39;ll get the warning :) .\r\n\r\nI hope that makes things clear.",
        "body": "<p>This isn't an answer to the question asked, but to the related question that most commenters\/responders have asked -- <em>Why do you need to put the rvm line at the bottom of the shell rc file?<\/em><\/p>\n\n<p>The answer is simple.<\/p>\n\n<ol>\n<li>The rvm code which is loaded puts the rvm ruby binary directories at the \"front\" of <code>$PATH<\/code>, and <\/li>\n<li><code>.bashrc<\/code> (or equivalent for your default shell) is read and interpreted line-by-line from top to bottom.<\/li>\n<\/ol>\n\n<p>So imagine the following scenario :<\/p>\n\n<pre><code>$ echo $PATH\n  \/usr\/local\/bin:\/usr\/bin:\/bin:\/usr\/local\/sbin:\/usr\/sbin:\/sbin \n\n$ [[ -s \"$HOME\/.rvm\/scripts\/rvm\" ]] &amp;&amp; source \"$HOME\/.rvm\/scripts\/rvm\"\n  \/Users\/sankalp\/.rvm\/gems\/ruby-1.9.3-p547\/bin:\/Users\/sankalp\/.rvm\/gems\/ruby-1.9.3-p547@global\/bin:\/Users\/sankalp\/.rvm\/rubies\/ruby-1.9.3-p547\/bin:\/Users\/sankalp\/bin:\/usr\/texbin\/:\/usr\/local\/bin:\/usr\/bin:\/bin:\/usr\/local\/sbin:\/usr\/sbin:\/sbin\n\n$ export PATH=&lt;something&gt;:$PATH\n$ echo $PATH\n  &lt;something&gt;:\/Users\/sankalp\/.rvm\/gems\/ruby-1.9.3-p547\/bin:\/Users\/sankalp\/.rvm\/gems\/ruby-1.9.3-p547@global\/bin:\/Users\/sankalp\/.rvm\/rubies\/ruby-1.9.3-p547\/bin:\/Users\/sankalp\/bin:\/usr\/texbin\/:\/usr\/local\/bin:\/usr\/bin:\/bin:\/usr\/local\/sbin:\/usr\/sbin:\/sbin\n<\/code><\/pre>\n\n<p>Clearly if something is present in the shell init file <em>after<\/em> the RVM line and makes any changes to $PATH, more specifically if it prepends directories to <code>$PATH<\/code>, then those changes will push the directories added by rvm down from their first position. RVM, when invoked, will find that its ruby binary directories are <em>not<\/em> at the very beginning of <code>$PATH<\/code> and BAM! you'll get the warning :) .<\/p>\n\n<p>I hope that makes things clear.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 233238,
            "reputation": 20269,
            "user_id": 498594,
            "user_type": "registered",
            "accept_rate": 79,
            "profile_image": "https:\/\/i.stack.imgur.com\/EYtd3.png?s=256&g=1",
            "display_name": "Kelvin",
            "link": "https:\/\/stackoverflow.com\/users\/498594\/kelvin"
        },
        "is_accepted": false,
        "score": 9,
        "last_activity_date": 1426782785,
        "creation_date": 1426714141,
        "answer_id": 29133064,
        "question_id": 9373104,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "This doesn&#39;t answer the question of why ruby doesn&#39;t have method overloading, but third-party libraries can provide it.\r\n\r\nThe [contracts.ruby][1] library allows overloading. Example adapted from the tutorial:\r\n\r\n    class Factorial\r\n      include Contracts\r\n    \r\n      Contract 1 =&gt; 1\r\n      def fact(x)\r\n        x\r\n      end\r\n    \r\n      Contract Num =&gt; Num\r\n      def fact(x)\r\n        x * fact(x - 1)\r\n      end\r\n    end\r\n    \r\n    # try it out\r\n    Factorial.new.fact(5)  # =&gt; 120\r\n\r\nNote that this is actually more powerful than Java&#39;s overloading, because you can specify values to match (e.g. `1`), not merely types.\r\n\r\nYou will see decreased performance using this though; you will have to run benchmarks to decide how much you can tolerate.\r\n\r\n  [1]: https:\/\/github.com\/egonSchiele\/contracts.ruby\r\n\r\n\r\n",
        "body": "<p>This doesn't answer the question of why ruby doesn't have method overloading, but third-party libraries can provide it.<\/p>\n\n<p>The <a href=\"https:\/\/github.com\/egonSchiele\/contracts.ruby\" rel=\"noreferrer\">contracts.ruby<\/a> library allows overloading. Example adapted from the tutorial:<\/p>\n\n<pre><code>class Factorial\n  include Contracts\n\n  Contract 1 =&gt; 1\n  def fact(x)\n    x\n  end\n\n  Contract Num =&gt; Num\n  def fact(x)\n    x * fact(x - 1)\n  end\nend\n\n# try it out\nFactorial.new.fact(5)  # =&gt; 120\n<\/code><\/pre>\n\n<p>Note that this is actually more powerful than Java's overloading, because you can specify values to match (e.g. <code>1<\/code>), not merely types.<\/p>\n\n<p>You will see decreased performance using this though; you will have to run benchmarks to decide how much you can tolerate.<\/p>\n",
        "last_edit_date": 1426782785.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 3154947,
            "reputation": 1522,
            "user_id": 2667545,
            "user_type": "registered",
            "accept_rate": 12,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/77414e4cbee3c6687d580bbb7876d8c2?s=256&d=identicon&r=PG",
            "display_name": "Vic",
            "link": "https:\/\/stackoverflow.com\/users\/2667545\/vic"
        },
        "is_accepted": false,
        "score": 9,
        "last_activity_date": 1598525320,
        "creation_date": 1592474135,
        "answer_id": 62447310,
        "question_id": 8297624,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Had some issues with custom checkbox which is hidden behind label element. Needed a `allow_label_click: true`. \r\n\r\nWith reference to this [blog post][1],\r\n\r\n```\r\ncheck &#39;checkbox[name]&#39;, allow_label_click: true\r\n```\r\n\r\nFor cases where there is a link in your label like &quot;I agree to [terms and conditions](https:\/\/www.vic-l.com\/)&quot;, the above code will open the page, which is not what you want.\r\n\r\nDo this instead.\r\n```\r\nfind(:css, &quot;#checkbox_id&quot;, visible: false).execute_script(&#39;this.checked = true&#39;)\r\n```\r\n\r\n\r\n  [1]: https:\/\/accidentaltechnologist.com\/ruby-on-rails\/when-you-cant-check-a-checkbox-using-capybara\/",
        "body": "<p>Had some issues with custom checkbox which is hidden behind label element. Needed a <code>allow_label_click: true<\/code>.<\/p>\n<p>With reference to this <a href=\"https:\/\/accidentaltechnologist.com\/ruby-on-rails\/when-you-cant-check-a-checkbox-using-capybara\/\" rel=\"noreferrer\">blog post<\/a>,<\/p>\n<pre><code>check 'checkbox[name]', allow_label_click: true\n<\/code><\/pre>\n<p>For cases where there is a link in your label like &quot;I agree to <a href=\"https:\/\/www.vic-l.com\/\" rel=\"noreferrer\">terms and conditions<\/a>&quot;, the above code will open the page, which is not what you want.<\/p>\n<p>Do this instead.<\/p>\n<pre><code>find(:css, &quot;#checkbox_id&quot;, visible: false).execute_script('this.checked = true')\n<\/code><\/pre>\n",
        "last_edit_date": 1598525320.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 16008,
            "reputation": 166,
            "user_id": 34442,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/f61dace50709944022d6868ef925965e?s=256&d=identicon&r=PG",
            "display_name": "paulbonner",
            "link": "https:\/\/stackoverflow.com\/users\/34442\/paulbonner"
        },
        "is_accepted": false,
        "score": 8,
        "last_activity_date": 1225835231,
        "creation_date": 1225835231,
        "answer_id": 263581,
        "question_id": 260905,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "[Glimmer][1] is an interesting option for JRuby users which provides a very Ruby-ish interface to the SWT toolkit. (SWT is the user interface framework behind Eclipse, which delivers fast performance and familiar UI metaphors by making use of native widgets on the various platforms it supports: Windows, OS X, Linux, etc.) SWT always appealed to me as a Java developer, but coding it was painful in the extreme. Glimmer makes the process a lot more straightforward by emphasizing convention over configuration, and by valuing DRYness and all the other normal Ruby goodness.\r\n\r\nAnother neat option is [SproutCore][2], a Javascript-based GUI toolkit with Ruby bindings developed by Apple. At least, the demos for it look great, and otherinbox built a pretty slick looking [application][3] on top of it. Personally, I&#39;ve spent quite a few hours trying to get it running on two systems -- one Windows and one Linux -- and haven&#39;t succeeded on either one -- I keep running into dependency issues with Merb or other pieces of the SproutCore stack. But it&#39;s intriguing enough that I&#39;ll go back after a few weeks and try again, hoping that the issues get resolved in that time.\r\n\r\n\r\n  [1]: http:\/\/rubyforge.org\/projects\/glimmer\/\r\n  [2]: http:\/\/www.sproutcore.com\/\r\n  [3]: http:\/\/joshuabaer.blogs.com\/photos\/uncategorized\/2008\/09\/09\/ebay_2.png",
        "body": "<p><a href=\"http:\/\/rubyforge.org\/projects\/glimmer\/\" rel=\"noreferrer\">Glimmer<\/a> is an interesting option for JRuby users which provides a very Ruby-ish interface to the SWT toolkit. (SWT is the user interface framework behind Eclipse, which delivers fast performance and familiar UI metaphors by making use of native widgets on the various platforms it supports: Windows, OS X, Linux, etc.) SWT always appealed to me as a Java developer, but coding it was painful in the extreme. Glimmer makes the process a lot more straightforward by emphasizing convention over configuration, and by valuing DRYness and all the other normal Ruby goodness.<\/p>\n\n<p>Another neat option is <a href=\"http:\/\/www.sproutcore.com\/\" rel=\"noreferrer\">SproutCore<\/a>, a Javascript-based GUI toolkit with Ruby bindings developed by Apple. At least, the demos for it look great, and otherinbox built a pretty slick looking <a href=\"http:\/\/joshuabaer.blogs.com\/photos\/uncategorized\/2008\/09\/09\/ebay_2.png\" rel=\"noreferrer\">application<\/a> on top of it. Personally, I've spent quite a few hours trying to get it running on two systems -- one Windows and one Linux -- and haven't succeeded on either one -- I keep running into dependency issues with Merb or other pieces of the SproutCore stack. But it's intriguing enough that I'll go back after a few weeks and try again, hoping that the issues get resolved in that time.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1458,
            "reputation": 20345,
            "user_id": 1944,
            "user_type": "registered",
            "accept_rate": 93,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/93fc84c261cdce2e2f1d64c8e531ecb7?s=256&d=identicon&r=PG",
            "display_name": "Charles Roper",
            "link": "https:\/\/stackoverflow.com\/users\/1944\/charles-roper"
        },
        "is_accepted": false,
        "score": 8,
        "last_activity_date": 1226044277,
        "creation_date": 1226044277,
        "answer_id": 271474,
        "question_id": 260905,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "[wxWidgets][1] is worth checking out. It is well supported on Ruby via [wxRuby][2]. For an example app, have a look at [wxRIDE][3]. See it [compared to other toolkits][4]. You might also want to check out [Anvil][5], which is a sort of Rails-ish framework for working with wx. It looks moribund now, though.\r\n\r\n\r\n  [1]: http:\/\/www.wxwidgets.org\/\r\n  [2]: http:\/\/wxruby.rubyforge.org\/wiki\/wiki.pl?WxRuby\r\n  [3]: http:\/\/wxride.ruby-im.net\/\r\n  [4]: http:\/\/wiki.wxwidgets.org\/WxWidgets_Compared_To_Other_Toolkits\r\n  [5]: http:\/\/anvil.rubyforge.org\/",
        "body": "<p><a href=\"http:\/\/www.wxwidgets.org\/\" rel=\"noreferrer\">wxWidgets<\/a> is worth checking out. It is well supported on Ruby via <a href=\"http:\/\/wxruby.rubyforge.org\/wiki\/wiki.pl?WxRuby\" rel=\"noreferrer\">wxRuby<\/a>. For an example app, have a look at <a href=\"http:\/\/wxride.ruby-im.net\/\" rel=\"noreferrer\">wxRIDE<\/a>. See it <a href=\"http:\/\/wiki.wxwidgets.org\/WxWidgets_Compared_To_Other_Toolkits\" rel=\"noreferrer\">compared to other toolkits<\/a>. You might also want to check out <a href=\"http:\/\/anvil.rubyforge.org\/\" rel=\"noreferrer\">Anvil<\/a>, which is a sort of Rails-ish framework for working with wx. It looks moribund now, though.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4243,
            "reputation": 1306727,
            "user_id": 6309,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/i.stack.imgur.com\/I4fiW.jpg?s=256&g=1",
            "display_name": "VonC",
            "link": "https:\/\/stackoverflow.com\/users\/6309\/vonc"
        },
        "is_accepted": false,
        "score": 8,
        "last_activity_date": 1427868091,
        "creation_date": 1226849472,
        "answer_id": 293994,
        "question_id": 293981,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "You do have [`libdeprecated-ruby`][1] (2010-2012, not available anymore on rubygem in 2015)\r\n\r\n\r\nA small library intended to aid developers working with deprecated code.  \r\nThe idea comes from the &#39;`D`&#39; programming language, where developers can mark certain code as deprecated, and then allow\/disallow the ability to execute deprecated code.\r\n\r\n    require &#39;lib\/deprecated.rb&#39;\r\n    require &#39;test\/unit&#39;\r\n    \r\n    # this class is used to test the deprecate functionality\r\n    class DummyClass\r\n      def monkey\r\n        return true\r\n      end\r\n    \r\n      deprecate :monkey\r\n    end\r\n    \r\n    # we want exceptions for testing here.\r\n    Deprecate.set_action(:throw)\r\n    \r\n    class DeprecateTest &lt; Test::Unit::TestCase\r\n      def test_set_action\r\n         \r\n        assert_raise(DeprecatedError) { raise StandardError.new unless DummyClass.new.monkey }\r\n    \r\n        Deprecate.set_action(proc { |msg| raise DeprecatedError.new(&quot;#{msg} is deprecated.&quot;) })\r\n    \r\n        assert_raise(DeprecatedError) { raise StandardError.new unless DummyClass.new.monkey }\r\n       \r\n    \r\n        # set to warn and make sure our return values are getting through.\r\n        Deprecate.set_action(:warn)\r\n        \r\n        assert_nothing_raised(DeprecatedError) { raise StandardError.new unless DummyClass.new.monkey } \r\n      end\r\n    end\r\n\r\n\r\n  [1]: https:\/\/packages.debian.org\/search?keywords=libdeprecated-ruby\r\n  [2]: https:\/\/rubygems.org\/gems\/deprecated",
        "body": "<p>You do have <a href=\"https:\/\/packages.debian.org\/search?keywords=libdeprecated-ruby\" rel=\"nofollow noreferrer\"><code>libdeprecated-ruby<\/code><\/a> (2010-2012, not available anymore on rubygem in 2015)<\/p>\n\n<p>A small library intended to aid developers working with deprecated code.<br>\nThe idea comes from the '<code>D<\/code>' programming language, where developers can mark certain code as deprecated, and then allow\/disallow the ability to execute deprecated code.<\/p>\n\n<pre><code>require 'lib\/deprecated.rb'\nrequire 'test\/unit'\n\n# this class is used to test the deprecate functionality\nclass DummyClass\n  def monkey\n    return true\n  end\n\n  deprecate :monkey\nend\n\n# we want exceptions for testing here.\nDeprecate.set_action(:throw)\n\nclass DeprecateTest &lt; Test::Unit::TestCase\n  def test_set_action\n\n    assert_raise(DeprecatedError) { raise StandardError.new unless DummyClass.new.monkey }\n\n    Deprecate.set_action(proc { |msg| raise DeprecatedError.new(\"#{msg} is deprecated.\") })\n\n    assert_raise(DeprecatedError) { raise StandardError.new unless DummyClass.new.monkey }\n\n\n    # set to warn and make sure our return values are getting through.\n    Deprecate.set_action(:warn)\n\n    assert_nothing_raised(DeprecatedError) { raise StandardError.new unless DummyClass.new.monkey } \n  end\nend\n<\/code><\/pre>\n",
        "last_edit_date": 1427868091.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 21649,
            "reputation": 319,
            "user_id": 52804,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/f6be5fa791179726489b3bf445bc954e?s=256&d=identicon&r=PG",
            "display_name": "user52804",
            "link": "https:\/\/stackoverflow.com\/users\/52804\/user52804"
        },
        "is_accepted": false,
        "score": 8,
        "last_activity_date": 1247879978,
        "creation_date": 1247879978,
        "answer_id": 1146395,
        "question_id": 267237,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "&gt; I&#39;m sure somebody will pipe up and\r\n&gt; dogmatically assert that &quot;you should\r\n&gt; only unit test public methods; if it\r\n&gt; needs unit testing, it shouldn&#39;t be a\r\n&gt; protected or private method&quot;, but I&#39;m\r\n&gt; not really interested in debating\r\n&gt; that.\r\n\r\nYou could also refactor those into a new object in which those methods are public, and delegate to them privately in the original class.  This will allow you to test the methods without magic metaruby in your specs while yet keeping them private.\r\n\r\n&gt; I&#39;ve got several methods that are\r\n&gt; protected or private for good and\r\n&gt; valid reasons\r\n\r\nWhat are those valid reasons?  Other OOP languages can get away without private methods at all (smalltalk comes to mind - where private methods only exist as a convention).",
        "body": "<blockquote>\n  <p>I'm sure somebody will pipe up and\n  dogmatically assert that \"you should\n  only unit test public methods; if it\n  needs unit testing, it shouldn't be a\n  protected or private method\", but I'm\n  not really interested in debating\n  that.<\/p>\n<\/blockquote>\n\n<p>You could also refactor those into a new object in which those methods are public, and delegate to them privately in the original class.  This will allow you to test the methods without magic metaruby in your specs while yet keeping them private.<\/p>\n\n<blockquote>\n  <p>I've got several methods that are\n  protected or private for good and\n  valid reasons<\/p>\n<\/blockquote>\n\n<p>What are those valid reasons?  Other OOP languages can get away without private methods at all (smalltalk comes to mind - where private methods only exist as a convention).<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 13066,
            "reputation": 54210,
            "user_id": 26051,
            "user_type": "registered",
            "accept_rate": 96,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/2fa54de0e0bc8c43e8ee93ef9d27a97d?s=256&d=identicon&r=PG",
            "display_name": "August Lilleaas",
            "link": "https:\/\/stackoverflow.com\/users\/26051\/august-lilleaas"
        },
        "is_accepted": false,
        "score": 8,
        "last_activity_date": 1249508890,
        "creation_date": 1249508576,
        "answer_id": 1235921,
        "question_id": 1235863,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "    class String\r\n      def integer?\r\n        Integer(self)\r\n        return true\r\n      rescue ArgumentError\r\n        return false\r\n      end\r\n    end\r\n\r\n 1. It isn&#39;t prefixed with `is_`. I find that silly on questionmark methods, I like `&quot;04&quot;.integer?` a lot better than `&quot;foo&quot;.is_integer?`.\r\n 2. It uses the sensible solution by sepp2k, which passes for `&quot;01&quot;` and such.\r\n 3. Object oriented, yay.\r\n",
        "body": "<pre><code>class String\n  def integer?\n    Integer(self)\n    return true\n  rescue ArgumentError\n    return false\n  end\nend\n<\/code><\/pre>\n\n<ol>\n<li>It isn't prefixed with <code>is_<\/code>. I find that silly on questionmark methods, I like <code>\"04\".integer?<\/code> a lot better than <code>\"foo\".is_integer?<\/code>.<\/li>\n<li>It uses the sensible solution by sepp2k, which passes for <code>\"01\"<\/code> and such.<\/li>\n<li>Object oriented, yay.<\/li>\n<\/ol>\n",
        "last_edit_date": 1249508890.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 69565,
            "reputation": 327,
            "user_id": 202295,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/bb108e4ccd3d3d79350b167b62e2db2a?s=256&d=identicon&r=PG",
            "display_name": "bry4n",
            "link": "https:\/\/stackoverflow.com\/users\/202295\/bry4n"
        },
        "is_accepted": false,
        "score": 8,
        "last_activity_date": 1259562188,
        "creation_date": 1259562188,
        "answer_id": 1818133,
        "question_id": 1816378,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "For ruby 1.8.6 as sepp2k&#39;s example, but you still want use &quot;shuffle&quot; method.\r\n\r\n    class Array\r\n      def shuffle\r\n        sort_by { rand }\r\n      end\r\n    end\r\n\r\n    [1,2,3,4].shuffle #=&gt; [2,4,3,1]\r\n    [1,2,3,4].shuffle #=&gt; [4,2,1,3]\r\n\r\ncheers",
        "body": "<p>For ruby 1.8.6 as sepp2k's example, but you still want use \"shuffle\" method.<\/p>\n\n<pre><code>class Array\n  def shuffle\n    sort_by { rand }\n  end\nend\n\n[1,2,3,4].shuffle #=&gt; [2,4,3,1]\n[1,2,3,4].shuffle #=&gt; [4,2,1,3]\n<\/code><\/pre>\n\n<p>cheers<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "user_type": "does_not_exist",
            "display_name": "user395760"
        },
        "is_accepted": false,
        "score": 8,
        "last_activity_date": 1295718028,
        "creation_date": 1295714958,
        "answer_id": 4769134,
        "question_id": 4769004,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "I know little Ruby, but here are a few bullet points about the things you mentioned:\r\n\r\n- `nil`, the value indicating lack of a value, would be `None` (note that you check for it like `x is None` or `x is not None`, not with `==` - or by coercion to boolean, see next point).\r\n- `None`, zero-esque numbers (`0`, `0.0`, `0j` (complex number)) and empty collections (`[]`, `{}`, `set()`, the empty string `&quot;&quot;`, etc.) are considered falsy, everything else is considered truthy.\r\n- For side effects, (`for`-)loop explicitly. For generating a new bunch of stuff without side-effects, use list comprehensions (or their relatives - generator expressions for lazy one-time iterators, dict\/set comprehensions for the said collections).\r\n\r\nConcerning looping: You have `for`, which operates on an iterable(! no counting), and `while`, which does what you would expect. The fromer is far more powerful, thanks to the extensive support for iterators. Not only nearly everything that can be an iterator instead of a list is an iterator (at least in Python 3 - in Python 2, you have both and the default is a list, sadly). The are numerous tools for working with iterators - `zip` iterates any number of iterables in parallel, `enumerate` gives you `(index, item)` (on *any* iterable, not just on lists), even slicing abritary (possibly large or infinite) iterables! I found that these make many many looping tasks much simpler. Needless to say, they integrate just fine with list comprehensions, generator expressions, etc.",
        "body": "<p>I know little Ruby, but here are a few bullet points about the things you mentioned:<\/p>\n\n<ul>\n<li><code>nil<\/code>, the value indicating lack of a value, would be <code>None<\/code> (note that you check for it like <code>x is None<\/code> or <code>x is not None<\/code>, not with <code>==<\/code> - or by coercion to boolean, see next point).<\/li>\n<li><code>None<\/code>, zero-esque numbers (<code>0<\/code>, <code>0.0<\/code>, <code>0j<\/code> (complex number)) and empty collections (<code>[]<\/code>, <code>{}<\/code>, <code>set()<\/code>, the empty string <code>\"\"<\/code>, etc.) are considered falsy, everything else is considered truthy.<\/li>\n<li>For side effects, (<code>for<\/code>-)loop explicitly. For generating a new bunch of stuff without side-effects, use list comprehensions (or their relatives - generator expressions for lazy one-time iterators, dict\/set comprehensions for the said collections).<\/li>\n<\/ul>\n\n<p>Concerning looping: You have <code>for<\/code>, which operates on an iterable(! no counting), and <code>while<\/code>, which does what you would expect. The fromer is far more powerful, thanks to the extensive support for iterators. Not only nearly everything that can be an iterator instead of a list is an iterator (at least in Python 3 - in Python 2, you have both and the default is a list, sadly). The are numerous tools for working with iterators - <code>zip<\/code> iterates any number of iterables in parallel, <code>enumerate<\/code> gives you <code>(index, item)<\/code> (on <em>any<\/em> iterable, not just on lists), even slicing abritary (possibly large or infinite) iterables! I found that these make many many looping tasks much simpler. Needless to say, they integrate just fine with list comprehensions, generator expressions, etc.<\/p>\n",
        "last_edit_date": 1295718028.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 161781,
            "reputation": 64585,
            "user_id": 382818,
            "user_type": "registered",
            "accept_rate": 89,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/0c5167a4e5d39de902fcc44c2b8af197?s=256&d=identicon&r=PG",
            "display_name": "Zabba",
            "link": "https:\/\/stackoverflow.com\/users\/382818\/zabba"
        },
        "is_accepted": false,
        "score": 8,
        "last_activity_date": 1306647305,
        "creation_date": 1306647305,
        "answer_id": 6166147,
        "question_id": 6166081,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "The command is `bundle update` (there is no &quot;r&quot; in the &quot;bundle&quot;).\r\n\r\nTo check if bundler is installed do : `gem list bundler` or even `which bundle` and the command will list either the bundler version or the path to it. If nothing is shown, then install bundler by typing `gem install bundler`.\r\n",
        "body": "<p>The command is <code>bundle update<\/code> (there is no \"r\" in the \"bundle\").<\/p>\n\n<p>To check if bundler is installed do : <code>gem list bundler<\/code> or even <code>which bundle<\/code> and the command will list either the bundler version or the path to it. If nothing is shown, then install bundler by typing <code>gem install bundler<\/code>.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 51397,
            "reputation": 9872,
            "user_id": 153574,
            "user_type": "registered",
            "accept_rate": 57,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/240fded6e397da0150db90ce28b91ac0?s=256&d=identicon&r=PG",
            "display_name": "bjelli",
            "link": "https:\/\/stackoverflow.com\/users\/153574\/bjelli"
        },
        "is_accepted": false,
        "score": 8,
        "last_activity_date": 1403282748,
        "creation_date": 1329805930,
        "answer_id": 9373191,
        "question_id": 9373104,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Method overloading makes sense in a language with static typing, where you can distinguish between different types of arguments\r\n\r\n    f(1)\r\n    f(&#39;foo&#39;)\r\n    f(true)\r\n\r\nas well as between different number of arguments\r\n\r\n    f(1)\r\n    f(1, &#39;foo&#39;)\r\n    f(1, &#39;foo&#39;, true)\r\n\r\nThe first distinction does not exist in ruby. Ruby uses dynamic typing or &quot;duck typing&quot;.  The second distinction can be handled by default arguments or by working with arguments:\r\n\r\n    def f(n, s = &#39;foo&#39;, flux_compensator = true)\r\n       ...\r\n    end\r\n\r\n\r\n    def f(*args)\r\n      case args.size\r\n      when  \r\n         ...\r\n      when 2\r\n        ...\r\n      when 3\r\n        ...\r\n      end\r\n    end",
        "body": "<p>Method overloading makes sense in a language with static typing, where you can distinguish between different types of arguments<\/p>\n\n<pre><code>f(1)\nf('foo')\nf(true)\n<\/code><\/pre>\n\n<p>as well as between different number of arguments<\/p>\n\n<pre><code>f(1)\nf(1, 'foo')\nf(1, 'foo', true)\n<\/code><\/pre>\n\n<p>The first distinction does not exist in ruby. Ruby uses dynamic typing or \"duck typing\".  The second distinction can be handled by default arguments or by working with arguments:<\/p>\n\n<pre><code>def f(n, s = 'foo', flux_compensator = true)\n   ...\nend\n\n\ndef f(*args)\n  case args.size\n  when  \n     ...\n  when 2\n    ...\n  when 3\n    ...\n  end\nend\n<\/code><\/pre>\n",
        "last_edit_date": 1403282748.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 419444,
            "reputation": 101,
            "user_id": 796607,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/45dc42c30069cfcd8d336563e46f9a11?s=256&d=identicon&r=PG",
            "display_name": "Brian Vitrue",
            "link": "https:\/\/stackoverflow.com\/users\/796607\/brian-vitrue"
        },
        "is_accepted": false,
        "score": 8,
        "last_activity_date": 1374391670,
        "creation_date": 1332961860,
        "answer_id": 9914124,
        "question_id": 6166081,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "I had the same problem .. something happened to my bash profile that wasn&#39;t setting up the RVM stuff correctly.\r\n\r\nMake sure your bash profile has the following line:\r\n\r\n    [[ -s &quot;$HOME\/.rvm\/scripts\/rvm&quot; ]] &amp;&amp; . &quot;$HOME\/.rvm\/scripts\/rvm&quot;  # This loads RVM into a shell session.\r\n\r\nThen I ran &quot;source ~\/.bash_profile&quot; and that reloaded everything that was in my bash profile.\r\n\r\nThat seemed to fix it for me.",
        "body": "<p>I had the same problem .. something happened to my bash profile that wasn't setting up the RVM stuff correctly.<\/p>\n\n<p>Make sure your bash profile has the following line:<\/p>\n\n<pre><code>[[ -s \"$HOME\/.rvm\/scripts\/rvm\" ]] &amp;&amp; . \"$HOME\/.rvm\/scripts\/rvm\"  # This loads RVM into a shell session.\n<\/code><\/pre>\n\n<p>Then I ran \"source ~\/.bash_profile\" and that reloaded everything that was in my bash profile.<\/p>\n\n<p>That seemed to fix it for me.<\/p>\n",
        "last_edit_date": 1374391670.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4424,
            "reputation": 1217,
            "user_id": 6634,
            "user_type": "registered",
            "accept_rate": 75,
            "profile_image": "https:\/\/i.stack.imgur.com\/o5VyA.jpg?s=256&g=1",
            "display_name": "marko",
            "link": "https:\/\/stackoverflow.com\/users\/6634\/marko"
        },
        "is_accepted": false,
        "score": 8,
        "last_activity_date": 1339499399,
        "creation_date": 1339499399,
        "answer_id": 10995460,
        "question_id": 220668,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "[Semaphore][1] is a new hosted CI app for Ruby and Rails apps. It integrates with GitHub, requires no setup and has a simple UI.\r\n\r\n\r\n  [1]: https:\/\/semaphoreapp.com",
        "body": "<p><a href=\"https:\/\/semaphoreapp.com\" rel=\"noreferrer\">Semaphore<\/a> is a new hosted CI app for Ruby and Rails apps. It integrates with GitHub, requires no setup and has a simple UI.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1317926,
            "reputation": 4864,
            "user_id": 1264409,
            "user_type": "registered",
            "accept_rate": 40,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/f035891064a9e06fdd2f1a8cb6f9ee71?s=256&d=identicon&r=PG",
            "display_name": "mrded",
            "link": "https:\/\/stackoverflow.com\/users\/1264409\/mrded"
        },
        "is_accepted": false,
        "score": 8,
        "last_activity_date": 1444393510,
        "creation_date": 1349636602,
        "answer_id": 12771873,
        "question_id": 9560335,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "    hash  = { :a =&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;], :b =&gt; [&quot;b&quot;, &quot;c&quot;] }\r\n    hash.values #=&gt; [[&quot;a&quot;,&quot;b&quot;,&quot;c&quot;],[&quot;b&quot;,&quot;c&quot;]]",
        "body": "<pre><code>hash  = { :a =&gt; [\"a\", \"b\", \"c\"], :b =&gt; [\"b\", \"c\"] }\nhash.values #=&gt; [[\"a\",\"b\",\"c\"],[\"b\",\"c\"]]\n<\/code><\/pre>\n",
        "last_edit_date": 1444393510.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2069029,
            "reputation": 81,
            "user_id": 1843895,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/126db9e1c28e492c0008549146febe73?s=256&d=identicon&r=PG",
            "display_name": "AG_",
            "link": "https:\/\/stackoverflow.com\/users\/1843895\/ag"
        },
        "is_accepted": false,
        "score": 8,
        "last_activity_date": 1468861267,
        "creation_date": 1353557409,
        "answer_id": 13505777,
        "question_id": 3154111,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Although Ruby doesn&#39;t have a `sort_by` in-place variant, you can do:\r\n\r\n    sort_me = sort_me.sort_by { |k| k[&quot;value&quot;] }\r\n\r\n---\r\n`Array.sort_by!` was added in 1.9.2\r\n",
        "body": "<p>Although Ruby doesn't have a <code>sort_by<\/code> in-place variant, you can do:<\/p>\n\n<pre><code>sort_me = sort_me.sort_by { |k| k[\"value\"] }\n<\/code><\/pre>\n\n<hr>\n\n<p><code>Array.sort_by!<\/code> was added in 1.9.2<\/p>\n",
        "last_edit_date": 1468861267.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 110909,
            "reputation": 45772,
            "user_id": 293280,
            "user_type": "registered",
            "accept_rate": 77,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/6e6e22d81a1f4f394f62301be40c2e20?s=256&d=identicon&r=PG",
            "display_name": "Joshua Pinter",
            "link": "https:\/\/stackoverflow.com\/users\/293280\/joshua-pinter"
        },
        "is_accepted": false,
        "score": 8,
        "last_activity_date": 1424891651,
        "creation_date": 1362602470,
        "answer_id": 15257560,
        "question_id": 220668,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "# Updated Feb-2015\r\n\r\n## [Codeship][2]\r\n\r\nThere was a lack of development on Drone.io so I switched to Codeship and I&#39;m thoroughly enjoying it. It&#39;s actively developed and improved, has great design and is very fast. Plus, for the bottom tier it&#39;s actually free (up to 100 builds per month) so it ended up being cheaper than Drone.io.\r\n\r\n# Original Answer\r\n\r\n## [Drone.io][1]\r\n\r\nI just setup our main Ruby on Rails application with http:\/\/drone.io\/. Was a piece of cake and it&#39;s got a great interface. I&#39;d say worth checking out if you&#39;re looking for a **simple, hosted solution**.\r\n\r\n\r\n  [1]: http:\/\/drone.io\r\n  [2]: https:\/\/codeship.com\/",
        "body": "<h1>Updated Feb-2015<\/h1>\n\n<h2><a href=\"https:\/\/codeship.com\/\" rel=\"nofollow\">Codeship<\/a><\/h2>\n\n<p>There was a lack of development on Drone.io so I switched to Codeship and I'm thoroughly enjoying it. It's actively developed and improved, has great design and is very fast. Plus, for the bottom tier it's actually free (up to 100 builds per month) so it ended up being cheaper than Drone.io.<\/p>\n\n<h1>Original Answer<\/h1>\n\n<h2><a href=\"http:\/\/drone.io\" rel=\"nofollow\">Drone.io<\/a><\/h2>\n\n<p>I just setup our main Ruby on Rails application with <a href=\"http:\/\/drone.io\/\" rel=\"nofollow\">http:\/\/drone.io\/<\/a>. Was a piece of cake and it's got a great interface. I'd say worth checking out if you're looking for a <strong>simple, hosted solution<\/strong>.<\/p>\n",
        "last_edit_date": 1424891651.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 156312,
            "reputation": 13331,
            "user_id": 373522,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/c0235f7d6e9cef30c7337506e067ed35?s=256&d=identicon&r=PG",
            "display_name": "gylaz",
            "link": "https:\/\/stackoverflow.com\/users\/373522\/gylaz"
        },
        "is_accepted": false,
        "score": 8,
        "last_activity_date": 1373045606,
        "creation_date": 1373045606,
        "answer_id": 17494191,
        "question_id": 17493080,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "I would say that there is no advantage to using `tap`. The only potential benefit, as [@sawa points out][1] is, and I quote: &quot;A reader would not have to read what is inside the block to know that an instance user is created.&quot; However, at that point the argument can be made that if you&#39;re doing non-simplistic record creation logic, your intent would be better communicated by extracting that logic into its own method.\r\n\r\nI hold to the opinion that `tap` is an unnecessary burden on the readability of the code, and could be done without, or substituted with a better technique, like [Extract Method][2].\r\n\r\nWhile `tap` is a convenience method, it&#39;s also personal preference. Give `tap` a try. Then write some code without using tap, see if you like one way over another.\r\n\r\n\r\n  [1]: https:\/\/stackoverflow.com\/a\/17493604\/373522\r\n  [2]: http:\/\/refactoring.com\/catalog\/extractMethod.html",
        "body": "<p>I would say that there is no advantage to using <code>tap<\/code>. The only potential benefit, as <a href=\"https:\/\/stackoverflow.com\/a\/17493604\/373522\">@sawa points out<\/a> is, and I quote: \"A reader would not have to read what is inside the block to know that an instance user is created.\" However, at that point the argument can be made that if you're doing non-simplistic record creation logic, your intent would be better communicated by extracting that logic into its own method.<\/p>\n\n<p>I hold to the opinion that <code>tap<\/code> is an unnecessary burden on the readability of the code, and could be done without, or substituted with a better technique, like <a href=\"http:\/\/refactoring.com\/catalog\/extractMethod.html\" rel=\"nofollow noreferrer\">Extract Method<\/a>.<\/p>\n\n<p>While <code>tap<\/code> is a convenience method, it's also personal preference. Give <code>tap<\/code> a try. Then write some code without using tap, see if you like one way over another.<\/p>\n",
        "last_edit_date": 1495542885.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1139740,
            "reputation": 1100,
            "user_id": 1123985,
            "user_type": "registered",
            "accept_rate": 33,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/1111520aa82a2b8aa1e020c51c00a5ed?s=256&d=identicon&r=PG",
            "display_name": "davidtingsu",
            "link": "https:\/\/stackoverflow.com\/users\/1123985\/davidtingsu"
        },
        "is_accepted": false,
        "score": 8,
        "last_activity_date": 1668743161,
        "creation_date": 1374770967,
        "answer_id": 17864056,
        "question_id": 5778295,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "[Consider BigDecimal in the ruby docs][1]\r\n\r\n    1.9.3p429 :025 &gt; BigDecimal(&#39;Infinity&#39;)\r\n     =&gt; #&lt;BigDecimal:7f8a6c548140,&#39;Infinity&#39;,9(9)&gt;\r\n    1.9.3p429 :026 &gt; BigDecimal(&#39;-Infinity&#39;)\r\n     =&gt; #&lt;BigDecimal:7f8a6a0e3728,&#39;-Infinity&#39;,9(9)&gt;\r\n    1.9.3p429 :027 &gt; 3 &lt; BigDecimal(&#39;Infinity&#39;)\r\n     =&gt; true\r\n\r\n    1.9.3p429 :028 &gt; BigDecimal::INFINITY\r\n     =&gt; #&lt;BigDecimal:7f8a6ad046d8,&#39;Infinity&#39;,9(9)&gt;\r\n\r\n\r\n  [1]: http:\/\/www.ruby-doc.org\/stdlib-1.9.3\/libdoc\/bigdecimal\/rdoc\/BigDecimal.html#label-Infinity",
        "body": "<p><a href=\"http:\/\/www.ruby-doc.org\/stdlib-1.9.3\/libdoc\/bigdecimal\/rdoc\/BigDecimal.html#label-Infinity\" rel=\"nofollow noreferrer\">Consider BigDecimal in the ruby docs<\/a><\/p>\n<pre><code>1.9.3p429 :025 &gt; BigDecimal('Infinity')\n =&gt; #&lt;BigDecimal:7f8a6c548140,'Infinity',9(9)&gt;\n1.9.3p429 :026 &gt; BigDecimal('-Infinity')\n =&gt; #&lt;BigDecimal:7f8a6a0e3728,'-Infinity',9(9)&gt;\n1.9.3p429 :027 &gt; 3 &lt; BigDecimal('Infinity')\n =&gt; true\n\n1.9.3p429 :028 &gt; BigDecimal::INFINITY\n =&gt; #&lt;BigDecimal:7f8a6ad046d8,'Infinity',9(9)&gt;\n<\/code><\/pre>\n",
        "last_edit_date": 1668743161.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2672719,
            "reputation": 7850,
            "user_id": 2309704,
            "user_type": "registered",
            "accept_rate": 72,
            "profile_image": "https:\/\/i.stack.imgur.com\/WfvDZ.jpg?s=256&g=1",
            "display_name": "Siva",
            "link": "https:\/\/stackoverflow.com\/users\/2309704\/siva"
        },
        "is_accepted": false,
        "score": 8,
        "last_activity_date": 1385705619,
        "creation_date": 1385705619,
        "answer_id": 20279491,
        "question_id": 1235863,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "The Best and Simple way is using `Float`\r\n\r\n    val = Float &quot;234&quot; rescue nil\r\n    \r\n    Float &quot;234&quot; rescue nil #=&gt; 234.0\r\n    \r\n    Float &quot;abc&quot; rescue nil #=&gt; nil\r\n    \r\n    Float &quot;234abc&quot; rescue nil #=&gt; nil\r\n    \r\n    Float nil rescue nil #=&gt; nil\r\n    \r\n    Float &quot;&quot; rescue nil #=&gt; nil\r\n\r\n`Integer` is also good but it will return `0` for `Integer nil`\r\n\r\n\r\n",
        "body": "<p>The Best and Simple way is using <code>Float<\/code><\/p>\n\n<pre><code>val = Float \"234\" rescue nil\n\nFloat \"234\" rescue nil #=&gt; 234.0\n\nFloat \"abc\" rescue nil #=&gt; nil\n\nFloat \"234abc\" rescue nil #=&gt; nil\n\nFloat nil rescue nil #=&gt; nil\n\nFloat \"\" rescue nil #=&gt; nil\n<\/code><\/pre>\n\n<p><code>Integer<\/code> is also good but it will return <code>0<\/code> for <code>Integer nil<\/code><\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1723612,
            "reputation": 81,
            "user_id": 1618998,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/2fc1ef5a256fd30bda44b275c47fbb7d?s=256&d=identicon&r=PG",
            "display_name": "user81620",
            "link": "https:\/\/stackoverflow.com\/users\/1618998\/user81620"
        },
        "is_accepted": false,
        "score": 8,
        "last_activity_date": 1401792153,
        "creation_date": 1401792153,
        "answer_id": 24013084,
        "question_id": 9050419,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "I had a problem after update to Maverics. \r\nIt have lost a lot of linkings. \r\nIn my case I had to refresh links to pkg-config\r\n\r\n    brew unlink pkg-config\r\n    brew link pkg-config\r\n\r\nThen installing rmagick worked like a charm. ",
        "body": "<p>I had a problem after update to Maverics. \nIt have lost a lot of linkings. \nIn my case I had to refresh links to pkg-config<\/p>\n\n<pre><code>brew unlink pkg-config\nbrew link pkg-config\n<\/code><\/pre>\n\n<p>Then installing rmagick worked like a charm. <\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4769504,
            "reputation": 925,
            "user_id": 3854705,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/i.stack.imgur.com\/KW5Ku.jpg?s=256&g=1",
            "display_name": "alexanderjsingleton",
            "link": "https:\/\/stackoverflow.com\/users\/3854705\/alexanderjsingleton"
        },
        "is_accepted": false,
        "score": 8,
        "last_activity_date": 1456087658,
        "creation_date": 1455994722,
        "answer_id": 35527648,
        "question_id": 8675206,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "  Ruby hash-keys assigned by hash-rockets can facilitate strings for key-value pairs (*e.g*. `&#39;s&#39; =&gt; x`) whereas key assignment via **symbols** (*e.g.* `key: &quot;value&quot;` or `:key =&gt; &quot;value&quot;`) *cannot be assigned with strings.*  Although hash-rockets provide freedom and functionality for hash-tables, *specifically allowing strings as keys*, application performance may be slower than if the hash-tables were to be constructed with symbols as hash-keys.  The following resources may be able to clarify any differences between hashrockets and symbols:\r\n\r\n - [Ryan Sobol&#39;s Symbols in Ruby](https:\/\/gist.github.com\/ryansobol\/9b0b6995a7ae806cd008)\r\n - [Ruby Hashes Exaplained by Erik Trautman](http:\/\/www.eriktrautman.com\/posts\/ruby-explained-hashes)",
        "body": "<p>Ruby hash-keys assigned by hash-rockets can facilitate strings for key-value pairs (<em>e.g<\/em>. <code>'s' =&gt; x<\/code>) whereas key assignment via <strong>symbols<\/strong> (<em>e.g.<\/em> <code>key: \"value\"<\/code> or <code>:key =&gt; \"value\"<\/code>) <em>cannot be assigned with strings.<\/em>  Although hash-rockets provide freedom and functionality for hash-tables, <em>specifically allowing strings as keys<\/em>, application performance may be slower than if the hash-tables were to be constructed with symbols as hash-keys.  The following resources may be able to clarify any differences between hashrockets and symbols:<\/p>\n\n<ul>\n<li><a href=\"https:\/\/gist.github.com\/ryansobol\/9b0b6995a7ae806cd008\" rel=\"noreferrer\">Ryan Sobol's Symbols in Ruby<\/a><\/li>\n<li><a href=\"http:\/\/www.eriktrautman.com\/posts\/ruby-explained-hashes\" rel=\"noreferrer\">Ruby Hashes Exaplained by Erik Trautman<\/a><\/li>\n<\/ul>\n",
        "last_edit_date": 1456087658.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 6285146,
            "reputation": 811,
            "user_id": 4884692,
            "user_type": "registered",
            "accept_rate": 90,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/b17aabdef5c7225b7361c64a2aa31e3f?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "pronoob",
            "link": "https:\/\/stackoverflow.com\/users\/4884692\/pronoob"
        },
        "is_accepted": false,
        "score": 8,
        "last_activity_date": 1552167934,
        "creation_date": 1484962206,
        "answer_id": 41774853,
        "question_id": 28725500,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Arrays are a good option if you have only a few values. If you want multiple return values without having to know (and be confused by) the order of results, an alternative would be to return a Hash that contains whatever named values you want.\r\n\r\ne.g.\r\n\r\n    def make_hash\r\n      x = 1\r\n      y = 2\r\n      {x: x, y: y}\r\n    end\r\n\r\n    hash = make_hash\r\n    # =&gt; {:x=&gt;1, :y=&gt;2}\r\n    hash[:x]\r\n    # =&gt; 1\r\n    hash[:y]\r\n    # =&gt; 2",
        "body": "<p>Arrays are a good option if you have only a few values. If you want multiple return values without having to know (and be confused by) the order of results, an alternative would be to return a Hash that contains whatever named values you want.<\/p>\n\n<p>e.g.<\/p>\n\n<pre><code>def make_hash\n  x = 1\n  y = 2\n  {x: x, y: y}\nend\n\nhash = make_hash\n# =&gt; {:x=&gt;1, :y=&gt;2}\nhash[:x]\n# =&gt; 1\nhash[:y]\n# =&gt; 2\n<\/code><\/pre>\n",
        "last_edit_date": 1552167934.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2038944,
            "reputation": 967,
            "user_id": 1820610,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/f80c479f4ca6e76772b584c1b991ce57?s=256&d=identicon&r=PG",
            "display_name": "John Cleary",
            "link": "https:\/\/stackoverflow.com\/users\/1820610\/john-cleary"
        },
        "is_accepted": false,
        "score": 8,
        "last_activity_date": 1490705427,
        "creation_date": 1490705427,
        "answer_id": 43070073,
        "question_id": 19105706,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "ActiveRecord is clever enough to know that the parameter referred to by the `?` is a string, and so it encloses it in single quotes. You _could_ as one post suggests use Ruby string interpolation to pad the string with the required `%` symbols. However, this might expose you to SQL-injection (which is bad). I would suggest you use the SQL `CONCAT()` function to prepare the string like so:\r\n\r\n```\r\n&quot;name LIKE CONCAT(&#39;%&#39;,?,&#39;%&#39;) OR postal_code LIKE CONCAT(&#39;%&#39;,?,&#39;%&#39;)&quot;, search, search)\r\n```",
        "body": "<p>ActiveRecord is clever enough to know that the parameter referred to by the <code>?<\/code> is a string, and so it encloses it in single quotes. You <em>could<\/em> as one post suggests use Ruby string interpolation to pad the string with the required <code>%<\/code> symbols. However, this might expose you to SQL-injection (which is bad). I would suggest you use the SQL <code>CONCAT()<\/code> function to prepare the string like so:<\/p>\n\n<p><code>\n\"name LIKE CONCAT('%',?,'%') OR postal_code LIKE CONCAT('%',?,'%')\", search, search)\n<\/code><\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1669873,
            "reputation": 14579,
            "user_id": 1536527,
            "user_type": "registered",
            "accept_rate": 76,
            "profile_image": "https:\/\/i.stack.imgur.com\/Sgr8O.png?s=256&g=1",
            "display_name": "ironsand",
            "link": "https:\/\/stackoverflow.com\/users\/1536527\/ironsand"
        },
        "is_accepted": false,
        "score": 8,
        "last_activity_date": 1507921832,
        "creation_date": 1507921832,
        "answer_id": 46736592,
        "question_id": 12617152,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "How about using `Pathname`?\r\n\r\n    require &#39;pathname&#39;\r\n    some_path = Pathname(&quot;somedir\/some_subdir\/some-file.html&quot;)\r\n    some_path.dirname.mkdir_p\r\n    some_path.write(builder.to_html)\r\n\r\n\r\n\r\n",
        "body": "<p>How about using <code>Pathname<\/code>?<\/p>\n\n<pre><code>require 'pathname'\nsome_path = Pathname(\"somedir\/some_subdir\/some-file.html\")\nsome_path.dirname.mkdir_p\nsome_path.write(builder.to_html)\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2904173,
            "reputation": 10914,
            "user_id": 2490003,
            "user_type": "registered",
            "accept_rate": 53,
            "profile_image": "https:\/\/i.stack.imgur.com\/3dRD0.png?s=256&g=1",
            "display_name": "user2490003",
            "link": "https:\/\/stackoverflow.com\/users\/2490003\/user2490003"
        },
        "is_accepted": false,
        "score": 8,
        "last_activity_date": 1514424182,
        "creation_date": 1514424182,
        "answer_id": 48000517,
        "question_id": 20134085,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "To add yet another answer to the pile (because apparently there&#39;s so many ways of doing it depending on your setup) - I did it by selecting the literal `option` element and clicking it\r\n\r\n    find(&quot;.some-selector-for-dropdown option[value=&#39;1234&#39;]&quot;).select_option\r\n\r\n\r\nIt&#39;s not very pretty, but it works :\/",
        "body": "<p>To add yet another answer to the pile (because apparently there's so many ways of doing it depending on your setup) - I did it by selecting the literal <code>option<\/code> element and clicking it<\/p>\n\n<pre><code>find(\".some-selector-for-dropdown option[value='1234']\").select_option\n<\/code><\/pre>\n\n<p>It's not very pretty, but it works :\/<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 7312761,
            "reputation": 915,
            "user_id": 5571397,
            "user_type": "registered",
            "accept_rate": 67,
            "profile_image": "https:\/\/i.stack.imgur.com\/kaGhE.jpg?s=256&g=1",
            "display_name": "Salomanuel",
            "link": "https:\/\/stackoverflow.com\/users\/5571397\/salomanuel"
        },
        "is_accepted": false,
        "score": 8,
        "last_activity_date": 1560850249,
        "creation_date": 1560850249,
        "answer_id": 56645960,
        "question_id": 14513377,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "most of those solutions will not use Capybara&#39;s brilliant waiting features\r\n\r\nbetter do as this link suggests:   \r\nhttps:\/\/thoughtbot.com\/blog\/write-reliable-asynchronous-integration-tests-with-capybara#find-the-first-matching-element\r\n\r\n# Bad:\r\n\r\n`first(&quot;.active&quot;).click`   \r\nIf there isn\u2019t an .active element on the page yet, first will return nil and the click will fail.\r\n\r\n# Good:\r\n\r\n If you want to make sure there&#39;s exactly one   \r\n`find(&quot;.active&quot;).click`\r\n\r\n If you just want the first element   \r\n`find(&quot;.active&quot;, match: :first).click`   \r\nCapybara will wait for the element to appear before trying to click.   \r\n\r\nNote that `match: :first` is more brittle, because it will silently click on a different element if you introduce new elements which match.\r\n\r\n",
        "body": "<p>most of those solutions will not use Capybara's brilliant waiting features<\/p>\n\n<p>better do as this link suggests:<br>\n<a href=\"https:\/\/thoughtbot.com\/blog\/write-reliable-asynchronous-integration-tests-with-capybara#find-the-first-matching-element\" rel=\"noreferrer\">https:\/\/thoughtbot.com\/blog\/write-reliable-asynchronous-integration-tests-with-capybara#find-the-first-matching-element<\/a><\/p>\n\n<h1>Bad:<\/h1>\n\n<p><code>first(\".active\").click<\/code><br>\nIf there isn\u2019t an .active element on the page yet, first will return nil and the click will fail.<\/p>\n\n<h1>Good:<\/h1>\n\n<p>If you want to make sure there's exactly one<br>\n<code>find(\".active\").click<\/code><\/p>\n\n<p>If you just want the first element<br>\n<code>find(\".active\", match: :first).click<\/code><br>\nCapybara will wait for the element to appear before trying to click.   <\/p>\n\n<p>Note that <code>match: :first<\/code> is more brittle, because it will silently click on a different element if you introduce new elements which match.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4369130,
            "reputation": 12126,
            "user_id": 3563993,
            "user_type": "registered",
            "accept_rate": 89,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/6e213cbcdd4a7b892589300ac92a49ab?s=256&d=identicon&r=PG",
            "display_name": "K\u1d0f\u0274s\u1d1b\u1d00\u0274\u1d1b\u026a\u0274 S\u029c\u026a\u029f\u1d0f\u1d20",
            "link": "https:\/\/stackoverflow.com\/users\/3563993\/k%e1%b4%8f%c9%b4s%e1%b4%9b%e1%b4%80%c9%b4%e1%b4%9b%c9%aa%c9%b4-s%ca%9c%c9%aa%ca%9f%e1%b4%8f%e1%b4%a0"
        },
        "is_accepted": false,
        "score": 8,
        "last_activity_date": 1689333170,
        "creation_date": 1634744329,
        "answer_id": 69649047,
        "question_id": 37307346,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "1. In my case PostgreSQL updates from version `13.4` to `14` in background, so it fixes by:\r\n   \r\n       brew postgresql-upgrade-database\r\n\r\n2. In other case the problem fixed by:\r\n    \r\n       rm \/usr\/local\/var\/postgres\/postmaster.pid\r\n\r\n   or\r\n   \r\n       rm \/opt\/homebrew\/var\/postgres\/postmaster.pid\r\n\r\n   or by version (for example `postgresql@14`)\r\n     \r\n       rm \/opt\/homebrew\/var\/postgresql@14\/postmaster.pid\r\n3. Restart service `postgresql`:\r\n\r\n       brew services restart postgresql\r\n\r\nPS:\r\n\r\n**How can you understand** what is the problem?\r\n\r\n**For first** see what service is not correct started:\r\n\r\n    brew services list\r\n\r\n**For second** show file `postgres.log`, where will be the error:\r\n\r\n    tail -f \/usr\/local\/var\/log\/postgres.log\r\nor\r\n\r\n    tail -f \/opt\/homebrew\/var\/log\/postgres*\r\n\r\n**And so** find answer by this error&#39;s text\r\n",
        "body": "<ol>\n<li><p>In my case PostgreSQL updates from version <code>13.4<\/code> to <code>14<\/code> in background, so it fixes by:<\/p>\n<pre><code>brew postgresql-upgrade-database\n<\/code><\/pre>\n<\/li>\n<li><p>In other case the problem fixed by:<\/p>\n<pre><code>rm \/usr\/local\/var\/postgres\/postmaster.pid\n<\/code><\/pre>\n<p>or<\/p>\n<pre><code>rm \/opt\/homebrew\/var\/postgres\/postmaster.pid\n<\/code><\/pre>\n<p>or by version (for example <code>postgresql@14<\/code>)<\/p>\n<pre><code>rm \/opt\/homebrew\/var\/postgresql@14\/postmaster.pid\n<\/code><\/pre>\n<\/li>\n<li><p>Restart service <code>postgresql<\/code>:<\/p>\n<pre><code>brew services restart postgresql\n<\/code><\/pre>\n<\/li>\n<\/ol>\n<p>PS:<\/p>\n<p><strong>How can you understand<\/strong> what is the problem?<\/p>\n<p><strong>For first<\/strong> see what service is not correct started:<\/p>\n<pre><code>brew services list\n<\/code><\/pre>\n<p><strong>For second<\/strong> show file <code>postgres.log<\/code>, where will be the error:<\/p>\n<pre><code>tail -f \/usr\/local\/var\/log\/postgres.log\n<\/code><\/pre>\n<p>or<\/p>\n<pre><code>tail -f \/opt\/homebrew\/var\/log\/postgres*\n<\/code><\/pre>\n<p><strong>And so<\/strong> find answer by this error's text<\/p>\n",
        "last_edit_date": 1689333170.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 6640090,
            "reputation": 199,
            "user_id": 5126049,
            "user_type": "registered",
            "profile_image": "https:\/\/lh4.googleusercontent.com\/-cLUJOlUBgOM\/AAAAAAAAAAI\/AAAAAAAAABY\/UaaUag_nNlI\/photo.jpg?sz=256",
            "display_name": "Dmitrii Kharlamov",
            "link": "https:\/\/stackoverflow.com\/users\/5126049\/dmitrii-kharlamov"
        },
        "is_accepted": false,
        "score": 8,
        "last_activity_date": 1634924755,
        "creation_date": 1634924755,
        "answer_id": 69681137,
        "question_id": 2500462,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Using CGI might be an outdated approach with Ruby 2.7\/3.\r\n\r\nHere&#39;s a neat way to do this with URI:\r\n\r\n```ruby\r\nuri = URI.parse &#39;https:\/\/duckduckgo.com\/?q=ruby+programming+language&#39;\r\nparams = Hash[URI.decode_www_form uri.query]\r\n# =&gt; {&quot;q&quot;=&gt;&quot;ruby programming language&quot;} \r\n```",
        "body": "<p>Using CGI might be an outdated approach with Ruby 2.7\/3.<\/p>\n<p>Here's a neat way to do this with URI:<\/p>\n<pre class=\"lang-rb prettyprint-override\"><code>uri = URI.parse 'https:\/\/duckduckgo.com\/?q=ruby+programming+language'\nparams = Hash[URI.decode_www_form uri.query]\n# =&gt; {&quot;q&quot;=&gt;&quot;ruby programming language&quot;} \n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1105,
            "reputation": 7068,
            "user_id": 1467,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/i.stack.imgur.com\/32ln9.png?s=256&g=1",
            "display_name": "conmulligan",
            "link": "https:\/\/stackoverflow.com\/users\/1467\/conmulligan"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1219185131,
        "creation_date": 1219185131,
        "answer_id": 17110,
        "question_id": 16991,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "[NetBeans][1] has some really solid Ruby support.\r\n\r\n\r\n  [1]: http:\/\/netbeans.org",
        "body": "<p><a href=\"http:\/\/netbeans.org\" rel=\"nofollow noreferrer\">NetBeans<\/a> has some really solid Ruby support.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": 1303831022.0
    },
    {
        "owner": {
            "account_id": 1092,
            "reputation": 114008,
            "user_id": 1450,
            "user_type": "registered",
            "accept_rate": 96,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/3b687a35025c05dbc7627af428dff0da?s=256&d=identicon&r=PG",
            "display_name": "John Topley",
            "link": "https:\/\/stackoverflow.com\/users\/1450\/john-topley"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1221328346,
        "creation_date": 1221328346,
        "answer_id": 60727,
        "question_id": 60658,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "The Rails way is to have [skinny controllers and fat models][1].\r\n\r\n\r\n  [1]: http:\/\/weblog.jamisbuck.org\/2006\/10\/18\/skinny-controller-fat-model",
        "body": "<p>The Rails way is to have <a href=\"http:\/\/weblog.jamisbuck.org\/2006\/10\/18\/skinny-controller-fat-model\" rel=\"noreferrer\">skinny controllers and fat models<\/a>.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4505,
            "reputation": 12689,
            "user_id": 6805,
            "user_type": "registered",
            "accept_rate": 87,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/12d6a2e5971e661ee2bf2994526e848d?s=256&d=identicon&r=PG",
            "display_name": "srboisvert",
            "link": "https:\/\/stackoverflow.com\/users\/6805\/srboisvert"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1221483563,
        "creation_date": 1221483563,
        "answer_id": 62586,
        "question_id": 60658,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "Do put stuff related to authorization\/access control in the controller.  \r\n\r\nModels are all about your data.  Validation, Relationships, CRUD, Business Logic \r\n\r\nViews are about showing your data.  Display and getting input only.\r\n\r\nControllers are about controlling what data goes from your model to your view (and which view) and from your view to your model.  Controllers can also exist without models.\r\n\r\nI like to think of the controller as a security guard\/receptionist who directs you the customer(request) to the appropriate counter where you ask a teller (view) a question.  The teller (view) then goes and gets the answer from a manager (model), who you never see.  You the request then go back to the security guard\/receptionist (controller) and wait until you are directed to go another teller (view) who tells you the answer the manager (model) told them in response to the other teller&#39;s (view) question.  \r\n\r\nLikewise if you want to tell the teller (view) something then largely the same thing happens except the second teller will tell you whether the manager accepted your information.  It is also possible that the security guard\/receptionist (controller) may have told you to take a hike since you were not authorized to tell the manager that information.\r\n\r\nSo to extend the metaphor, in my stereotyped and unrealistic world, tellers (views) are pretty but empty-headed and often believe anything you tell them, security guard\/receptionists are minimally polite but are not very knowledgeable but they know where people should and shouldn&#39;t go and managers are really ugly and mean but know everything and can tell what is true and what isn&#39;t.",
        "body": "<p>Do put stuff related to authorization\/access control in the controller.  <\/p>\n\n<p>Models are all about your data.  Validation, Relationships, CRUD, Business Logic <\/p>\n\n<p>Views are about showing your data.  Display and getting input only.<\/p>\n\n<p>Controllers are about controlling what data goes from your model to your view (and which view) and from your view to your model.  Controllers can also exist without models.<\/p>\n\n<p>I like to think of the controller as a security guard\/receptionist who directs you the customer(request) to the appropriate counter where you ask a teller (view) a question.  The teller (view) then goes and gets the answer from a manager (model), who you never see.  You the request then go back to the security guard\/receptionist (controller) and wait until you are directed to go another teller (view) who tells you the answer the manager (model) told them in response to the other teller's (view) question.  <\/p>\n\n<p>Likewise if you want to tell the teller (view) something then largely the same thing happens except the second teller will tell you whether the manager accepted your information.  It is also possible that the security guard\/receptionist (controller) may have told you to take a hike since you were not authorized to tell the manager that information.<\/p>\n\n<p>So to extend the metaphor, in my stereotyped and unrealistic world, tellers (views) are pretty but empty-headed and often believe anything you tell them, security guard\/receptionists are minimally polite but are not very knowledgeable but they know where people should and shouldn't go and managers are really ugly and mean but know everything and can tell what is true and what isn't.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2136,
            "reputation": 8101,
            "user_id": 2947,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/08ff8b09ff4b88caafd4435ba297ebb1?s=256&d=identicon&r=PG",
            "display_name": "Nic Wise",
            "link": "https:\/\/stackoverflow.com\/users\/2947\/nic-wise"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1223390533,
        "creation_date": 1223390533,
        "answer_id": 178783,
        "question_id": 151595,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "I may be wrong, but I think you can package a JRuby on Rails app in a way you can&#39;t do with normal RoR - look at Mingle or similar. Makes it possible to sell without dropping your pants \/ opening the komono.\r\n\r\nThat said, I&#39;m not familiar enough with RoR packaging, so dont hold me to it :)",
        "body": "<p>I may be wrong, but I think you can package a JRuby on Rails app in a way you can't do with normal RoR - look at Mingle or similar. Makes it possible to sell without dropping your pants \/ opening the komono.<\/p>\n\n<p>That said, I'm not familiar enough with RoR packaging, so dont hold me to it :)<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 176363,
            "reputation": 6877,
            "user_id": 407003,
            "user_type": "registered",
            "accept_rate": 90,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/0ff2c560e1814dcaac8ae7439785a737?s=256&d=identicon&r=PG",
            "display_name": "Dema",
            "link": "https:\/\/stackoverflow.com\/users\/407003\/dema"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1225822007,
        "creation_date": 1225822007,
        "answer_id": 262765,
        "question_id": 260905,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "If you&#39;re looking for a cross-platform GUI, then I&#39;d highly recommend going with JRuby and Swing.\r\n\r\nAlso, take a look at the [monkeybars][1] library, which is a Ruby library for building MVC applications using JRuby and Swing, where you can also use the excellent Netbeans IDE to visually build your GUI. \r\n\r\n\r\n  [1]: http:\/\/monkeybars.rubyforge.org\/",
        "body": "<p>If you're looking for a cross-platform GUI, then I'd highly recommend going with JRuby and Swing.<\/p>\n\n<p>Also, take a look at the <a href=\"http:\/\/monkeybars.rubyforge.org\/\" rel=\"noreferrer\">monkeybars<\/a> library, which is a Ruby library for building MVC applications using JRuby and Swing, where you can also use the excellent Netbeans IDE to visually build your GUI. <\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 32641,
            "reputation": 32949,
            "user_id": 90723,
            "user_type": "registered",
            "accept_rate": 94,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/56ee28134dd0776825445e3551979b14?s=256&d=identicon&r=PG",
            "display_name": "Bob Aman",
            "link": "https:\/\/stackoverflow.com\/users\/90723\/bob-aman"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1241631916,
        "creation_date": 1241466400,
        "answer_id": 821670,
        "question_id": 819263,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "The answers so far are kinda weird.  Your original attempt was pretty close to the right way to do this:\r\n\r\n    birthday = DateTime.new(1900, 1, 1)\r\n    age = (DateTime.now - birthday) \/ 365.25 # or (1.year \/ 1.day)\r\n\r\nYou will get a fractional result, so feel free to convert the result to an integer with `to_i`.  This is a better solution because it correctly treats the date difference as a time period measured in days (or seconds in the case of the related Time class) since the event.  Then a simple division by the number of days in a year gives you the age.  When calculating age in years this way, as long as you retain the original DOB value, no allowance needs to be made for leap years.\r\n",
        "body": "<p>The answers so far are kinda weird.  Your original attempt was pretty close to the right way to do this:<\/p>\n\n<pre><code>birthday = DateTime.new(1900, 1, 1)\nage = (DateTime.now - birthday) \/ 365.25 # or (1.year \/ 1.day)\n<\/code><\/pre>\n\n<p>You will get a fractional result, so feel free to convert the result to an integer with <code>to_i<\/code>.  This is a better solution because it correctly treats the date difference as a time period measured in days (or seconds in the case of the related Time class) since the event.  Then a simple division by the number of days in a year gives you the age.  When calculating age in years this way, as long as you retain the original DOB value, no allowance needs to be made for leap years.<\/p>\n",
        "last_edit_date": 1241631916.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 941,
            "reputation": 50428,
            "user_id": 1237,
            "user_type": "registered",
            "accept_rate": 95,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/6704b031163fde4396bf1fdedecbfb44?s=256&d=identicon&r=PG",
            "display_name": "Jacob Mattison",
            "link": "https:\/\/stackoverflow.com\/users\/1237\/jacob-mattison"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1282336043,
        "creation_date": 1282336043,
        "answer_id": 3534632,
        "question_id": 3534449,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "Consider a private method in Java.  It can be called from within the same class, of course, but it can also be called by another instance of that same class:\r\n\r\n    public class Foo {\r\n    \r\n       private void myPrivateMethod() {\r\n         \/\/stuff\r\n       }\r\n    \r\n       private void anotherMethod() {\r\n           myPrivateMethod(); \/\/calls on self, no explicit receiver\r\n           Foo foo = new Foo();\r\n           foo.myPrivateMethod(); \/\/this works\r\n       }\r\n    }\r\n\r\nSo -- if the caller is a different instance of my same class -- my private method is actually accessible from the &quot;outside&quot;, so to speak.  This actually makes it seem not all that private.\r\n\r\nIn Ruby, on the other hand, a private method really is meant to be private only to the current instance.  This is what removing the option of an explicit receiver provides.\r\n\r\nOn the other hand, I should certainly point out that it&#39;s pretty common in the Ruby community to not use these visibility controls at all, given that Ruby gives you ways to get around them anyway.  Unlike in the Java world, the tendency is to make everything accessible and trust other developers not to screw things up.",
        "body": "<p>Consider a private method in Java.  It can be called from within the same class, of course, but it can also be called by another instance of that same class:<\/p>\n\n<pre><code>public class Foo {\n\n   private void myPrivateMethod() {\n     \/\/stuff\n   }\n\n   private void anotherMethod() {\n       myPrivateMethod(); \/\/calls on self, no explicit receiver\n       Foo foo = new Foo();\n       foo.myPrivateMethod(); \/\/this works\n   }\n}\n<\/code><\/pre>\n\n<p>So -- if the caller is a different instance of my same class -- my private method is actually accessible from the \"outside\", so to speak.  This actually makes it seem not all that private.<\/p>\n\n<p>In Ruby, on the other hand, a private method really is meant to be private only to the current instance.  This is what removing the option of an explicit receiver provides.<\/p>\n\n<p>On the other hand, I should certainly point out that it's pretty common in the Ruby community to not use these visibility controls at all, given that Ruby gives you ways to get around them anyway.  Unlike in the Java world, the tendency is to make everything accessible and trust other developers not to screw things up.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "user_type": "does_not_exist",
            "display_name": "user166390"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1293588240,
        "creation_date": 1293585050,
        "answer_id": 4550806,
        "question_id": 4550770,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "In most cases (e.g. [Array](http:\/\/ruby-doc.org\/ruby-1.9\/classes\/Array.html) or [String](http:\/\/ruby-doc.org\/ruby-1.9\/classes\/String.html)) `size` is an *alias* for `length`.\r\n\r\n`count` normally comes from [Enumerable](http:\/\/ruby-doc.org\/ruby-1.9\/classes\/Enumerable.html) and can take an optional predicate block. Thus `enumerable.count {cond}` is [roughly] `(enumerable.select {cond}).length` -- it can of course bypass the intermediate structure as it just needs the count of matching predicates.\r\n\r\nNote: I am not sure if `count` *forces* an evaluation of the enumeration if the block is not specified or if it short-circuits to the `length` if possible.\r\n\r\n**Edit (and thanks to Mark&#39;s answer!):** `count` *without a block* (at least for Arrays) *does not* force an evaluation. I suppose without formal behavior it&#39;s &quot;open&quot; for other implementations, if forcing an evaluation without a predicate ever even really makes sense anyway.",
        "body": "<p>In most cases (e.g. <a href=\"http:\/\/ruby-doc.org\/ruby-1.9\/classes\/Array.html\" rel=\"nofollow\">Array<\/a> or <a href=\"http:\/\/ruby-doc.org\/ruby-1.9\/classes\/String.html\" rel=\"nofollow\">String<\/a>) <code>size<\/code> is an <em>alias<\/em> for <code>length<\/code>.<\/p>\n\n<p><code>count<\/code> normally comes from <a href=\"http:\/\/ruby-doc.org\/ruby-1.9\/classes\/Enumerable.html\" rel=\"nofollow\">Enumerable<\/a> and can take an optional predicate block. Thus <code>enumerable.count {cond}<\/code> is [roughly] <code>(enumerable.select {cond}).length<\/code> -- it can of course bypass the intermediate structure as it just needs the count of matching predicates.<\/p>\n\n<p>Note: I am not sure if <code>count<\/code> <em>forces<\/em> an evaluation of the enumeration if the block is not specified or if it short-circuits to the <code>length<\/code> if possible.<\/p>\n\n<p><strong>Edit (and thanks to Mark's answer!):<\/strong> <code>count<\/code> <em>without a block<\/em> (at least for Arrays) <em>does not<\/em> force an evaluation. I suppose without formal behavior it's \"open\" for other implementations, if forcing an evaluation without a predicate ever even really makes sense anyway.<\/p>\n",
        "last_edit_date": 1293588240.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 217565,
            "reputation": 565,
            "user_id": 473429,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/60119c8463c5ba067c2c040a01e7bf95?s=256&d=identicon&r=PG",
            "display_name": "Nicklasos",
            "link": "https:\/\/stackoverflow.com\/users\/473429\/nicklasos"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1345154674,
        "creation_date": 1313145142,
        "answer_id": 7038863,
        "question_id": 512466,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "You can try 3 rubygems:&lt;br \/&gt;\r\n[interface][1]&lt;br \/&gt;\r\n[abstract][2]&lt;br \/&gt;\r\n[simple abstract][3]\r\n\r\n\r\n  [1]: http:\/\/rubygems.org\/gems\/interface\r\n  [2]: http:\/\/rubygems.org\/gems\/abstract\r\n  [3]: https:\/\/rubygems.org\/gems\/simple_abstract",
        "body": "<p>You can try 3 rubygems:<br \/>\n<a href=\"http:\/\/rubygems.org\/gems\/interface\" rel=\"noreferrer\">interface<\/a><br \/>\n<a href=\"http:\/\/rubygems.org\/gems\/abstract\" rel=\"noreferrer\">abstract<\/a><br \/>\n<a href=\"https:\/\/rubygems.org\/gems\/simple_abstract\" rel=\"noreferrer\">simple abstract<\/a><\/p>\n",
        "last_edit_date": 1345154674.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 241687,
            "reputation": 877,
            "user_id": 512658,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/9565714ee3e2026d448428c58312e6e8?s=256&d=identicon&r=PG",
            "display_name": "Jay Moorthi",
            "link": "https:\/\/stackoverflow.com\/users\/512658\/jay-moorthi"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1315542784,
        "creation_date": 1315542784,
        "answer_id": 7357180,
        "question_id": 220668,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Check out [Tddium](http:\/\/www.tddium.com).  Tddium support continuous integration, deployment and interactive testing of Ruby applications.  It provides a managed environment with support for Selenium, Headless Webkit, and Solr.  It hosts live Postgres, MySQL, Mongo, and Redis instances.  And it automatically parallelizes large test suites. ",
        "body": "<p>Check out <a href=\"http:\/\/www.tddium.com\">Tddium<\/a>.  Tddium support continuous integration, deployment and interactive testing of Ruby applications.  It provides a managed environment with support for Selenium, Headless Webkit, and Solr.  It hosts live Postgres, MySQL, Mongo, and Redis instances.  And it automatically parallelizes large test suites. <\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 196545,
            "reputation": 4887,
            "user_id": 440032,
            "user_type": "registered",
            "accept_rate": 90,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/e0c923fc805eae9dbc15fc11ac56de75?s=256&d=identicon&r=PG",
            "display_name": "Andreas Lyngstad",
            "link": "https:\/\/stackoverflow.com\/users\/440032\/andreas-lyngstad"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1324496016,
        "creation_date": 1324496016,
        "answer_id": 8595288,
        "question_id": 8595184,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "You can do \r\n\r\n    current_user.methods\r\n\r\nFor better listing\r\n\r\n    puts &quot;\\n\\current_user.methods : &quot;+ current_user.methods.sort.join(&quot;\\n&quot;).to_s+&quot;\\n\\n&quot;",
        "body": "<p>You can do <\/p>\n\n<pre><code>current_user.methods\n<\/code><\/pre>\n\n<p>For better listing<\/p>\n\n<pre><code>puts \"\\n\\current_user.methods : \"+ current_user.methods.sort.join(\"\\n\").to_s+\"\\n\\n\"\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 61528,
            "reputation": 5896,
            "user_id": 183331,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/c3577dd0bea553f1443833509fc6a1a3?s=256&d=identicon&r=PG",
            "display_name": "Alain Beauvois",
            "link": "https:\/\/stackoverflow.com\/users\/183331\/alain-beauvois"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1438327215,
        "creation_date": 1326046436,
        "answer_id": 8779942,
        "question_id": 1274605,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "This works for me:\r\n\r\n    filename = &quot;foo&quot;\r\n    text = File.read(filename) \r\n    content = text.gsub(\/search_regexp\/, &quot;replacestring&quot;)\r\n    File.open(filename, &quot;w&quot;) { |file| file &lt;&lt; content }",
        "body": "<p>This works for me:<\/p>\n\n<pre><code>filename = \"foo\"\ntext = File.read(filename) \ncontent = text.gsub(\/search_regexp\/, \"replacestring\")\nFile.open(filename, \"w\") { |file| file &lt;&lt; content }\n<\/code><\/pre>\n",
        "last_edit_date": 1438327215.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 35012,
            "reputation": 32128,
            "user_id": 99024,
            "user_type": "registered",
            "accept_rate": 47,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/8c4b4a99d5794c95f52c58a2bf8e1710?s=256&d=identicon&r=PG",
            "display_name": "Vanuan",
            "link": "https:\/\/stackoverflow.com\/users\/99024\/vanuan"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1339601633,
        "creation_date": 1332186020,
        "answer_id": 9776739,
        "question_id": 220668,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Travis CI has become popular in the ruby world: http:\/\/travis-ci.org\/",
        "body": "<p>Travis CI has become popular in the ruby world: <a href=\"http:\/\/travis-ci.org\/\" rel=\"noreferrer\">http:\/\/travis-ci.org\/<\/a><\/p>\n",
        "last_edit_date": 1339601633.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 81007,
            "reputation": 585,
            "user_id": 1369115,
            "user_type": "registered",
            "accept_rate": 40,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/2a61fac4987d6ffa7298b8c0dca0e245?s=256&d=identicon&r=PG",
            "display_name": "John Griffiths",
            "link": "https:\/\/stackoverflow.com\/users\/1369115\/john-griffiths"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1355930833,
        "creation_date": 1355930833,
        "answer_id": 13955621,
        "question_id": 3704919,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "this worked for me...\r\n\r\n    sudo apt-get install graphicsmagick-libmagick-dev-compat libmagickwand-dev \r\n\r\n    gem install rmagick\r\n\r\n    ...\r\n\r\n    Building native extensions.  This could take a while...\r\n    Successfully installed rmagick-2.13.1\r\n    1 gem installed\r\n\r\n\r\n(ubuntu 12.0.4 64bit)",
        "body": "<p>this worked for me...<\/p>\n\n<pre><code>sudo apt-get install graphicsmagick-libmagick-dev-compat libmagickwand-dev \n\ngem install rmagick\n\n...\n\nBuilding native extensions.  This could take a while...\nSuccessfully installed rmagick-2.13.1\n1 gem installed\n<\/code><\/pre>\n\n<p>(ubuntu 12.0.4 64bit)<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 403684,
            "reputation": 27655,
            "user_id": 771581,
            "user_type": "registered",
            "accept_rate": 78,
            "profile_image": "https:\/\/i.stack.imgur.com\/swQMb.jpg?s=256&g=1",
            "display_name": "0x4a6f4672",
            "link": "https:\/\/stackoverflow.com\/users\/771581\/0x4a6f4672"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1356015236,
        "creation_date": 1356013827,
        "answer_id": 13974357,
        "question_id": 9394338,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "The main difference seems to be [when and how ruby is switched][1]. Ruby is switched:\r\n\r\n - for RVM manually (rvm use) or automatically during change of directories\r\n - for rbenv automatically each time a ruby command is executed\r\n\r\nRVM relies on the modified `cd` command and manual selection of Ruby by `rvm use`. rbenv uses wrappers or &quot;shims&quot; for all basic ruby commands as the default mechanism to select ruby. RVM creates wrappers for basic command line tools like gem, rake, ruby, too. They are used for example in CronJobs ( see http:\/\/rvm.io\/integration\/cron\/ ), but they are not the default mechanism to switch the Ruby version.\r\n\r\nThus both methods select &quot;automatically&quot; the right Ruby version by overwriting commands and using wrappers. rvm overrides shell commands like cd. rbenv overrides all basic ruby commands such as ruby, irb, rake and gem.\r\n\r\n\r\n\r\n \r\n\r\n\r\n  [1]: http:\/\/niczsoft.com\/2011\/11\/what-you-should-know-about-rbenv-and-rvm\/",
        "body": "<p>The main difference seems to be <a href=\"http:\/\/niczsoft.com\/2011\/11\/what-you-should-know-about-rbenv-and-rvm\/\">when and how ruby is switched<\/a>. Ruby is switched:<\/p>\n\n<ul>\n<li>for RVM manually (rvm use) or automatically during change of directories<\/li>\n<li>for rbenv automatically each time a ruby command is executed<\/li>\n<\/ul>\n\n<p>RVM relies on the modified <code>cd<\/code> command and manual selection of Ruby by <code>rvm use<\/code>. rbenv uses wrappers or \"shims\" for all basic ruby commands as the default mechanism to select ruby. RVM creates wrappers for basic command line tools like gem, rake, ruby, too. They are used for example in CronJobs ( see <a href=\"http:\/\/rvm.io\/integration\/cron\/\">http:\/\/rvm.io\/integration\/cron\/<\/a> ), but they are not the default mechanism to switch the Ruby version.<\/p>\n\n<p>Thus both methods select \"automatically\" the right Ruby version by overwriting commands and using wrappers. rvm overrides shell commands like cd. rbenv overrides all basic ruby commands such as ruby, irb, rake and gem.<\/p>\n",
        "last_edit_date": 1356015236.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2227906,
            "reputation": 71,
            "user_id": 1966234,
            "user_type": "unregistered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/f2736c659cb228f5d2afd37d35e54533?s=256&d=identicon&r=PG",
            "display_name": "user1966234",
            "link": "https:\/\/stackoverflow.com\/users\/1966234\/user1966234"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1363736543,
        "creation_date": 1357811524,
        "answer_id": 14254975,
        "question_id": 3028243,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "An object that is a boolean will either have a class of TrueClass or FalseClass so the following one-liner should do the trick\r\n    \r\n    mybool = true\r\n    mybool.class == TrueClass || mybool.class == FalseClass\r\n    =&gt; true\r\n\r\nThe following would also give you true\/false boolean type check result\r\n\r\n    mybool = true    \r\n    [TrueClass, FalseClass].include?(mybool.class)\r\n    =&gt; true",
        "body": "<p>An object that is a boolean will either have a class of TrueClass or FalseClass so the following one-liner should do the trick<\/p>\n\n<pre><code>mybool = true\nmybool.class == TrueClass || mybool.class == FalseClass\n=&gt; true\n<\/code><\/pre>\n\n<p>The following would also give you true\/false boolean type check result<\/p>\n\n<pre><code>mybool = true    \n[TrueClass, FalseClass].include?(mybool.class)\n=&gt; true\n<\/code><\/pre>\n",
        "last_edit_date": 1363736543.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 269028,
            "reputation": 2405,
            "user_id": 558135,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/qNmzi.png?s=256&g=1",
            "display_name": "Tim Bull",
            "link": "https:\/\/stackoverflow.com\/users\/558135\/tim-bull"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1398786297,
        "creation_date": 1365626686,
        "answer_id": 15936016,
        "question_id": 9050419,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "I updated to Mountain Lion and started getting this same problem.  I had to re-install brew, XCode, the XCode tools - pretty much the whole environment!\r\n\r\nI eventually solved this problem using the answer from phopkins above...\r\n\r\n    brew install pkgconfig\r\n\r\nOnce that was successfully completed (I had to delete some old symlinks first) then I was able to successfully install the RMagick gem",
        "body": "<p>I updated to Mountain Lion and started getting this same problem.  I had to re-install brew, XCode, the XCode tools - pretty much the whole environment!<\/p>\n\n<p>I eventually solved this problem using the answer from phopkins above...<\/p>\n\n<pre><code>brew install pkgconfig\n<\/code><\/pre>\n\n<p>Once that was successfully completed (I had to delete some old symlinks first) then I was able to successfully install the RMagick gem<\/p>\n",
        "last_edit_date": 1398786297.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1048248,
            "reputation": 6938,
            "user_id": 1052788,
            "user_type": "registered",
            "accept_rate": 92,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/8bebcca09c4964239a4ccc97baab535d?s=256&d=identicon&r=PG",
            "display_name": "j_mcnally",
            "link": "https:\/\/stackoverflow.com\/users\/1052788\/j-mcnally"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1533398025,
        "creation_date": 1369844561,
        "answer_id": 16819187,
        "question_id": 16818180,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "You need to add the time offset to your time after you convert it.\r\n\r\nThe easiest way to do this is:\r\n\r\n    t = Foo.start_time.in_time_zone(&quot;America\/New_York&quot;)\r\n    t -= t.utc_offset\r\n\r\nI am not sure why you would want to do this, though it is probably best to actually work with times the way they are built. I guess some background on why you need to shift time and timezones would be helpful.\r\n",
        "body": "<p>You need to add the time offset to your time after you convert it.<\/p>\n\n<p>The easiest way to do this is:<\/p>\n\n<pre><code>t = Foo.start_time.in_time_zone(\"America\/New_York\")\nt -= t.utc_offset\n<\/code><\/pre>\n\n<p>I am not sure why you would want to do this, though it is probably best to actually work with times the way they are built. I guess some background on why you need to shift time and timezones would be helpful.<\/p>\n",
        "last_edit_date": 1533398025.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1031148,
            "reputation": 521,
            "user_id": 1039443,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/d74b857fb071334ea7a20da3cd7465a5?s=256&d=identicon&r=PG",
            "display_name": "jlebrijo",
            "link": "https:\/\/stackoverflow.com\/users\/1039443\/jlebrijo"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1382125563,
        "creation_date": 1382125563,
        "answer_id": 19457855,
        "question_id": 819263,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "My suggestion:\r\n\r\n    def age(birthday)\r\n        ((Time.now - birthday.to_time)\/(60*60*24*365)).floor\r\n    end\r\n\r\nThe trick is that the minus operation with Time returns seconds",
        "body": "<p>My suggestion:<\/p>\n\n<pre><code>def age(birthday)\n    ((Time.now - birthday.to_time)\/(60*60*24*365)).floor\nend\n<\/code><\/pre>\n\n<p>The trick is that the minus operation with Time returns seconds<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1246534,
            "reputation": 2195,
            "user_id": 1207863,
            "user_type": "registered",
            "accept_rate": 43,
            "profile_image": "https:\/\/i.stack.imgur.com\/VxRRc.png?s=256&g=1",
            "display_name": "Nate Symer",
            "link": "https:\/\/stackoverflow.com\/users\/1207863\/nate-symer"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1454531822,
        "creation_date": 1397451744,
        "answer_id": 23052279,
        "question_id": 5030553,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "You can write a very elegant solution using a functional style.\r\n    \r\n    class Object\r\n      def hashify\r\n        Hash[instance_variables.map { |v| [v.to_s[1..-1].to_sym, instance_variable_get v] }]\r\n      end\r\n    end",
        "body": "<p>You can write a very elegant solution using a functional style.<\/p>\n\n<pre><code>class Object\n  def hashify\n    Hash[instance_variables.map { |v| [v.to_s[1..-1].to_sym, instance_variable_get v] }]\n  end\nend\n<\/code><\/pre>\n",
        "last_edit_date": 1454531822.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 3020459,
            "reputation": 1801,
            "user_id": 2561638,
            "user_type": "registered",
            "accept_rate": 56,
            "profile_image": "https:\/\/i.stack.imgur.com\/I7pxJ.jpg?s=256&g=1",
            "display_name": "Awais",
            "link": "https:\/\/stackoverflow.com\/users\/2561638\/awais"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1449520391,
        "creation_date": 1400258385,
        "answer_id": 23700450,
        "question_id": 9050419,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "For **Ubuntu** users:\r\nIt will never done directly on Ubuntu. You should first install packages to run this command...:\r\n\r\n    sudo apt-get install libmagickwand-dev  \r\n\r\n...and then do install:\r\n\r\n    gem install rmagick\r\n\r\nYou may get the same issue, for that, Try clearing your apt repository and removing any broken packages first:\r\n\r\n    sudo apt-get update\r\n    sudo apt-get autoclean\r\n    sudo apt-get clean\r\n    sudo apt-get autoremove\r\n\r\nIf the system identifies any broken packages, forcefully remove them (replace `package_name` with your own):\r\n\r\n    sudo dpkg --remove -force --force-remove-reinstreq package_name\r\n\r\nThen re-install any missing packages again. :)",
        "body": "<p>For <strong>Ubuntu<\/strong> users:\nIt will never done directly on Ubuntu. You should first install packages to run this command...:<\/p>\n\n<pre><code>sudo apt-get install libmagickwand-dev  \n<\/code><\/pre>\n\n<p>...and then do install:<\/p>\n\n<pre><code>gem install rmagick\n<\/code><\/pre>\n\n<p>You may get the same issue, for that, Try clearing your apt repository and removing any broken packages first:<\/p>\n\n<pre><code>sudo apt-get update\nsudo apt-get autoclean\nsudo apt-get clean\nsudo apt-get autoremove\n<\/code><\/pre>\n\n<p>If the system identifies any broken packages, forcefully remove them (replace <code>package_name<\/code> with your own):<\/p>\n\n<pre><code>sudo dpkg --remove -force --force-remove-reinstreq package_name\n<\/code><\/pre>\n\n<p>Then re-install any missing packages again. :)<\/p>\n",
        "last_edit_date": 1449520391.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1891677,
            "reputation": 145806,
            "user_id": 1709587,
            "user_type": "registered",
            "accept_rate": 71,
            "profile_image": "https:\/\/i.stack.imgur.com\/cP8pZ.jpg?s=256&g=1",
            "display_name": "Mark Amery",
            "link": "https:\/\/stackoverflow.com\/users\/1709587\/mark-amery"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1412886376,
        "creation_date": 1412808632,
        "answer_id": 26267693,
        "question_id": 9690801,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "The API docs now describe this behaviour:\n\n&gt; Ranges constructed using `..` run from the beginning to the end inclusively. Those created using `...` exclude the end value.\n&gt;\n&gt; *-- http:\/\/ruby-doc.org\/core-2.1.3\/Range.html*\n\nIn other words:\n\n    2.1.3 :001 &gt; (&#39;a&#39;...&#39;d&#39;).to_a\n     =&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;] \n    2.1.3 :002 &gt; (&#39;a&#39;..&#39;d&#39;).to_a\n     =&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;] ",
        "body": "<p>The API docs now describe this behaviour:<\/p>\n<blockquote>\n<p>Ranges constructed using <code>..<\/code> run from the beginning to the end inclusively. Those created using <code>...<\/code> exclude the end value.<\/p>\n<p><em>-- <a href=\"http:\/\/ruby-doc.org\/core-2.1.3\/Range.html\" rel=\"nofollow noreferrer\">http:\/\/ruby-doc.org\/core-2.1.3\/Range.html<\/a><\/em><\/p>\n<\/blockquote>\n<p>In other words:<\/p>\n<pre><code>2.1.3 :001 &gt; ('a'...'d').to_a\n =&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;] \n2.1.3 :002 &gt; ('a'..'d').to_a\n =&gt; [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;] \n<\/code><\/pre>\n",
        "last_edit_date": 1592644375.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2542068,
            "reputation": 71,
            "user_id": 2207650,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/df886f5be581dd096ec9b82ed018ce93?s=256&d=identicon&r=PG",
            "display_name": "Bruno Meira",
            "link": "https:\/\/stackoverflow.com\/users\/2207650\/bruno-meira"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1415560353,
        "creation_date": 1415560353,
        "answer_id": 26832165,
        "question_id": 18358717,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "How about \r\n\r\n    [].push(anything).flatten",
        "body": "<p>How about <\/p>\n\n<pre><code>[].push(anything).flatten\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5056601,
            "reputation": 874,
            "user_id": 4059671,
            "user_type": "registered",
            "accept_rate": 60,
            "profile_image": "https:\/\/graph.facebook.com\/656640577\/picture?type=large",
            "display_name": "Michael Cruz",
            "link": "https:\/\/stackoverflow.com\/users\/4059671\/michael-cruz"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1415984055,
        "creation_date": 1415984055,
        "answer_id": 26935038,
        "question_id": 8297624,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "I know this is an older question, but I have been working through this myself, and having tried all of the above, this is what finally worked for me:\r\n\r\n    find(&quot;input[type=&#39;checkbox&#39;][value=&#39;#{cityID.id}&#39;]&quot;).set(true)\r\n\r\nHope this is helpful to someone. I am using Capybara 2.4.4.",
        "body": "<p>I know this is an older question, but I have been working through this myself, and having tried all of the above, this is what finally worked for me:<\/p>\n\n<pre><code>find(\"input[type='checkbox'][value='#{cityID.id}']\").set(true)\n<\/code><\/pre>\n\n<p>Hope this is helpful to someone. I am using Capybara 2.4.4.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4956938,
            "reputation": 123,
            "user_id": 3989253,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/3963631d4c1321b5ec6708f893726db4?s=256&d=identicon&r=PG",
            "display_name": "Brian",
            "link": "https:\/\/stackoverflow.com\/users\/3989253\/brian"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1418910641,
        "creation_date": 1418910641,
        "answer_id": 27548139,
        "question_id": 9050419,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "This worked for me on Mac OsX\r\n\r\nInstall Imagemagick:\r\n\r\n    brew remove imagemagick\r\n    brew install imagemagick\r\n\r\nMake sure pkg-config is correctly linked:\r\n\r\n    brew uninstall pkg-config\r\n    brew install pkg-config\r\n    brew unlink pkg-config &amp;&amp; brew link pkg-config\r\n\r\nInstall gem\r\n\r\n    gem install rmagick",
        "body": "<p>This worked for me on Mac OsX<\/p>\n\n<p>Install Imagemagick:<\/p>\n\n<pre><code>brew remove imagemagick\nbrew install imagemagick\n<\/code><\/pre>\n\n<p>Make sure pkg-config is correctly linked:<\/p>\n\n<pre><code>brew uninstall pkg-config\nbrew install pkg-config\nbrew unlink pkg-config &amp;&amp; brew link pkg-config\n<\/code><\/pre>\n\n<p>Install gem<\/p>\n\n<pre><code>gem install rmagick\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1104384,
            "reputation": 9678,
            "user_id": 1096110,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/XGVpR.jpg?s=256&g=1",
            "display_name": "Flavio Wuensche",
            "link": "https:\/\/stackoverflow.com\/users\/1096110\/flavio-wuensche"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1548784897,
        "creation_date": 1424621670,
        "answer_id": 28660072,
        "question_id": 4316940,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "If you want to **avoid sending confirmation emails**, the best choice is:\r\n\r\n        u = User.new({\r\n          email: &#39;demo@greenant.com.br&#39;,\r\n          password: &#39;12feijaocomarroz&#39;,\r\n          password_confirmation: &#39;12feijaocomarroz&#39;\r\n        })\r\n\r\n        u.confirm\r\n        u.save\r\n\r\nSo if you&#39;re using a fake email or have no internet connection, that&#39;ll avoid errors.",
        "body": "<p>If you want to <strong>avoid sending confirmation emails<\/strong>, the best choice is:<\/p>\n\n<pre><code>    u = User.new({\n      email: 'demo@greenant.com.br',\n      password: '12feijaocomarroz',\n      password_confirmation: '12feijaocomarroz'\n    })\n\n    u.confirm\n    u.save\n<\/code><\/pre>\n\n<p>So if you're using a fake email or have no internet connection, that'll avoid errors.<\/p>\n",
        "last_edit_date": 1548784897.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1212181,
            "reputation": 2223,
            "user_id": 1180523,
            "user_type": "registered",
            "accept_rate": 86,
            "profile_image": "https:\/\/i.stack.imgur.com\/DmDUU.jpg?s=256&g=1",
            "display_name": "skplunkerin",
            "link": "https:\/\/stackoverflow.com\/users\/1180523\/skplunkerin"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1428594180,
        "creation_date": 1428594180,
        "answer_id": 29543080,
        "question_id": 12617152,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Based on others answers, nothing happened (didn&#39;t work). There was no error, and no directory created.\r\n\r\nHere&#39;s what I needed to do:\r\n\r\n    require &#39;fileutils&#39;\r\n    response = FileUtils.mkdir_p(&#39;dir_name&#39;)\r\n\r\nI needed to create a variable to catch the response that `FileUtils.mkdir_p(&#39;dir_name&#39;)` sends back... then everything worked like a charm!",
        "body": "<p>Based on others answers, nothing happened (didn't work). There was no error, and no directory created.<\/p>\n\n<p>Here's what I needed to do:<\/p>\n\n<pre><code>require 'fileutils'\nresponse = FileUtils.mkdir_p('dir_name')\n<\/code><\/pre>\n\n<p>I needed to create a variable to catch the response that <code>FileUtils.mkdir_p('dir_name')<\/code> sends back... then everything worked like a charm!<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2136544,
            "reputation": 24496,
            "user_id": 1896169,
            "user_type": "registered",
            "accept_rate": 98,
            "profile_image": "https:\/\/i.stack.imgur.com\/jap8U.png?s=256&g=1",
            "display_name": "Justin",
            "link": "https:\/\/stackoverflow.com\/users\/1896169\/justin"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1437590095,
        "creation_date": 1437590095,
        "answer_id": 31571318,
        "question_id": 3580049,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Simply zipping the two arrays together works well if you are dealing with arrays. But what if you are dealing with never-ending enumerators, such as something like these:\r\n\r\n    enum1 = (1..5).cycle\r\n    enum2 = (10..12).cycle\r\n\r\n`enum1.zip(enum2)` fails because `zip` tries to evaluate all the elements and combine them. Instead, do this:\r\n\r\n    enum1.lazy.zip(enum2)\r\n\r\nThat one `lazy` saves you by making the resulting enumerator lazy-evaluate.",
        "body": "<p>Simply zipping the two arrays together works well if you are dealing with arrays. But what if you are dealing with never-ending enumerators, such as something like these:<\/p>\n\n<pre><code>enum1 = (1..5).cycle\nenum2 = (10..12).cycle\n<\/code><\/pre>\n\n<p><code>enum1.zip(enum2)<\/code> fails because <code>zip<\/code> tries to evaluate all the elements and combine them. Instead, do this:<\/p>\n\n<pre><code>enum1.lazy.zip(enum2)\n<\/code><\/pre>\n\n<p>That one <code>lazy<\/code> saves you by making the resulting enumerator lazy-evaluate.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1854924,
            "reputation": 4610,
            "user_id": 1680728,
            "user_type": "registered",
            "accept_rate": 56,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/934e55f3e3af79802f9e33bd0d6790d8?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "Felix",
            "link": "https:\/\/stackoverflow.com\/users\/1680728\/felix"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1556351800,
        "creation_date": 1443791150,
        "answer_id": 32907852,
        "question_id": 9303984,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "You have to decide whether it is a good idea, but ruby regexp can (automagically) *define local variables* for you!\r\n\r\n\r\n\r\nI am not yet sure whether this feature is awesome or just totally crazy, but your regex can define local variables.\r\n\r\n    ryan_string = &quot;RyanOnRails: This is a test&quot;\r\n    \/^(?&lt;webframework&gt;.*)(?&lt;colon&gt;:)(?&lt;rest&gt;)\/ =~ ryan_string\r\n    # This defined three variables for you. Crazy, but true.\r\n    webframework # =&gt; &quot;RyanOnRails&quot;\r\n    puts &quot;W: #{webframework} , C: #{colon}, R: #{rest}&quot;\r\n\r\n(Take a look at http:\/\/ruby-doc.org\/core-2.1.1\/Regexp.html , search for &quot;local variable&quot;).\r\n\r\n**Note:**\r\nAs pointed out in a comment, I see that there is a similar and earlier answer to this question by @toonsend (https:\/\/stackoverflow.com\/a\/21412455). I do not think I was &quot;stealing&quot;, but if you want to be fair with praises and honor the first answer, feel free :) I hope no animals were harmed.",
        "body": "<p>You have to decide whether it is a good idea, but ruby regexp can (automagically) <em>define local variables<\/em> for you!<\/p>\n\n<p>I am not yet sure whether this feature is awesome or just totally crazy, but your regex can define local variables.<\/p>\n\n<pre><code>ryan_string = \"RyanOnRails: This is a test\"\n\/^(?&lt;webframework&gt;.*)(?&lt;colon&gt;:)(?&lt;rest&gt;)\/ =~ ryan_string\n# This defined three variables for you. Crazy, but true.\nwebframework # =&gt; \"RyanOnRails\"\nputs \"W: #{webframework} , C: #{colon}, R: #{rest}\"\n<\/code><\/pre>\n\n<p>(Take a look at <a href=\"http:\/\/ruby-doc.org\/core-2.1.1\/Regexp.html\" rel=\"nofollow noreferrer\">http:\/\/ruby-doc.org\/core-2.1.1\/Regexp.html<\/a> , search for \"local variable\").<\/p>\n\n<p><strong>Note:<\/strong>\nAs pointed out in a comment, I see that there is a similar and earlier answer to this question by @toonsend (<a href=\"https:\/\/stackoverflow.com\/a\/21412455\">https:\/\/stackoverflow.com\/a\/21412455<\/a>). I do not think I was \"stealing\", but if you want to be fair with praises and honor the first answer, feel free :) I hope no animals were harmed.<\/p>\n",
        "last_edit_date": 1556351800.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 926568,
            "reputation": 2692,
            "user_id": 957253,
            "user_type": "registered",
            "accept_rate": 88,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/1a53d53e497e84d0a9ff735c7d519a59?s=256&d=identicon&r=PG",
            "display_name": "skozz",
            "link": "https:\/\/stackoverflow.com\/users\/957253\/skozz"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1563145420,
        "creation_date": 1463075245,
        "answer_id": 37194084,
        "question_id": 1235863,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "I prefer: \r\n\r\nconfig\/initializers\/string.rb\r\n\r\n    class String\r\n      def number?\r\n        Integer(self).is_a?(Integer)\r\n      rescue ArgumentError, TypeError\r\n        false\r\n      end\r\n    end\r\n\r\n\r\nand then: \r\n\r\n    [218] pry(main)&gt; &quot;123123123&quot;.number?\r\n    =&gt; true\r\n    [220] pry(main)&gt; &quot;123 123 123&quot;.gsub(\/ \/, &#39;&#39;).number?\r\n    =&gt; true\r\n    [222] pry(main)&gt; &quot;123 123 123&quot;.number?\r\n    =&gt; false\r\n\r\nor check phone number: \r\n\r\n    &quot;+34 123 456 789 2&quot;.gsub(\/ \/, &#39;&#39;).number?",
        "body": "<p>I prefer: <\/p>\n\n<p>config\/initializers\/string.rb<\/p>\n\n<pre><code>class String\n  def number?\n    Integer(self).is_a?(Integer)\n  rescue ArgumentError, TypeError\n    false\n  end\nend\n<\/code><\/pre>\n\n<p>and then: <\/p>\n\n<pre><code>[218] pry(main)&gt; \"123123123\".number?\n=&gt; true\n[220] pry(main)&gt; \"123 123 123\".gsub(\/ \/, '').number?\n=&gt; true\n[222] pry(main)&gt; \"123 123 123\".number?\n=&gt; false\n<\/code><\/pre>\n\n<p>or check phone number: <\/p>\n\n<pre><code>\"+34 123 456 789 2\".gsub(\/ \/, '').number?\n<\/code><\/pre>\n",
        "last_edit_date": 1563145420.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1704033,
            "reputation": 71,
            "user_id": 1563479,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/d42450f10c8efad4a2a21d9094386f33?s=256&d=identicon&r=PG",
            "display_name": "Navid",
            "link": "https:\/\/stackoverflow.com\/users\/1563479\/navid"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1465401143,
        "creation_date": 1465400865,
        "answer_id": 37707231,
        "question_id": 4115115,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "A simpler scan would be: \r\n\r\n    String1.scan(\/&lt;(\\S+)&gt;\/).last",
        "body": "<p>A simpler scan would be: <\/p>\n\n<pre><code>String1.scan(\/&lt;(\\S+)&gt;\/).last\n<\/code><\/pre>\n",
        "last_edit_date": 1465401143.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 134622,
            "reputation": 3350,
            "user_id": 336881,
            "user_type": "registered",
            "accept_rate": 25,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/c8dc8f86200d462a189ced773511798f?s=256&d=identicon&r=PG",
            "display_name": "kxmh42",
            "link": "https:\/\/stackoverflow.com\/users\/336881\/kxmh42"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1508339959,
        "creation_date": 1472221442,
        "answer_id": 39168576,
        "question_id": 23695653,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Instead of patching core classes yourself, as in the accepted answer, it&#39;s shorter and cleaner to use the functionality of the [Facets gem](https:\/\/rubygems.org\/gems\/facets\/versions\/3.1.0):\r\n\r\n    require &#39;facets&#39;\r\n    a = [1,3,5,7,9]\r\n    a.map &amp;:+.(2)\r\n",
        "body": "<p>Instead of patching core classes yourself, as in the accepted answer, it's shorter and cleaner to use the functionality of the <a href=\"https:\/\/rubygems.org\/gems\/facets\/versions\/3.1.0\" rel=\"nofollow noreferrer\">Facets gem<\/a>:<\/p>\n\n<pre><code>require 'facets'\na = [1,3,5,7,9]\na.map &amp;:+.(2)\n<\/code><\/pre>\n",
        "last_edit_date": 1508339959.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 9431291,
            "reputation": 1380,
            "user_id": 7014757,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/zzet0.jpg?s=256&g=1",
            "display_name": "farrellw",
            "link": "https:\/\/stackoverflow.com\/users\/7014757\/farrellw"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1486401168,
        "creation_date": 1486401168,
        "answer_id": 42073476,
        "question_id": 9050419,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "An issue for me was that rmagick is out of date and not updated regularly. If you have too new of an ImageMagick version, then it might not be compatible. Check your version of ImageMagick using the following:\r\n\r\n    $ convert --version\r\n\r\nIf the ImageMagick version is &gt; 7, it is not compatable with rmagick. The user will get errors such as \r\n\r\n    Can&#39;t install RMagick 2.16.0. Can&#39;t find MagickWand.h.\r\n    *** extconf.rb failed *** \r\n\r\nGo back to version six of ImageMagick until they update rmagick to be compatible with version seven of ImageMagick. Someone has hosted the appropriate version(6) in a separate gem - &#39;imagemagick@6&#39;.\r\n\r\nIf you need rmagick to work but currently have an imagemagick version 7 or higher, here are the steps to switch:\r\n\r\n    $ gem install imagemagick@6\r\n    $ brew unlink imagemagick\r\n    $ brew link imagemagick@6 --force",
        "body": "<p>An issue for me was that rmagick is out of date and not updated regularly. If you have too new of an ImageMagick version, then it might not be compatible. Check your version of ImageMagick using the following:<\/p>\n\n<pre><code>$ convert --version\n<\/code><\/pre>\n\n<p>If the ImageMagick version is > 7, it is not compatable with rmagick. The user will get errors such as <\/p>\n\n<pre><code>Can't install RMagick 2.16.0. Can't find MagickWand.h.\n*** extconf.rb failed *** \n<\/code><\/pre>\n\n<p>Go back to version six of ImageMagick until they update rmagick to be compatible with version seven of ImageMagick. Someone has hosted the appropriate version(6) in a separate gem - 'imagemagick@6'.<\/p>\n\n<p>If you need rmagick to work but currently have an imagemagick version 7 or higher, here are the steps to switch:<\/p>\n\n<pre><code>$ gem install imagemagick@6\n$ brew unlink imagemagick\n$ brew link imagemagick@6 --force\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5379522,
            "reputation": 513,
            "user_id": 4285237,
            "user_type": "registered",
            "accept_rate": 85,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/f803082925f486bc032637489630d6d2?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "Samuel",
            "link": "https:\/\/stackoverflow.com\/users\/4285237\/samuel"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1685710869,
        "creation_date": 1560947880,
        "answer_id": 56667837,
        "question_id": 8297624,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "An old topic but another solution is:\r\n\r\n    check(&#39;Option 3&#39;, allow_label_click: true)",
        "body": "<p>An old topic but another solution is:<\/p>\n<pre><code>check('Option 3', allow_label_click: true)\n<\/code><\/pre>\n",
        "last_edit_date": 1685710869.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2680559,
            "reputation": 5110,
            "user_id": 2317829,
            "user_type": "registered",
            "accept_rate": 76,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/e45dd81d0238dfb6d9a9adcf3dcf12f7?s=256&d=identicon&r=PG",
            "display_name": "eebbesen",
            "link": "https:\/\/stackoverflow.com\/users\/2317829\/eebbesen"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1582912325,
        "creation_date": 1582912325,
        "answer_id": 60456952,
        "question_id": 6166081,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "If you&#39;re using `rbenv` running `rbenv rehash` can solve this _after_ you&#39;ve installed `bundler` and are still getting the issue.",
        "body": "<p>If you're using <code>rbenv<\/code> running <code>rbenv rehash<\/code> can solve this <em>after<\/em> you've installed <code>bundler<\/code> and are still getting the issue.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 8668829,
            "reputation": 4701,
            "user_id": 6488361,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/QLWMu.jpg?s=256&g=1",
            "display_name": "Kaka Ruto",
            "link": "https:\/\/stackoverflow.com\/users\/6488361\/kaka-ruto"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1592344042,
        "creation_date": 1592344042,
        "answer_id": 62418107,
        "question_id": 37914702,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Two steps worked for me:\r\n\r\n```\r\ngem install bundler\r\n\r\nbundle install --redownload # Forces a redownload of all gems on the gemfile, assigning them to the new bundler\r\n```\r\n",
        "body": "<p>Two steps worked for me:<\/p>\n\n<pre><code>gem install bundler\n\nbundle install --redownload # Forces a redownload of all gems on the gemfile, assigning them to the new bundler\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4459156,
            "reputation": 727,
            "user_id": 3628565,
            "user_type": "registered",
            "accept_rate": 73,
            "profile_image": "https:\/\/i.stack.imgur.com\/MtNdj.jpg?s=256&g=1",
            "display_name": "mansim",
            "link": "https:\/\/stackoverflow.com\/users\/3628565\/mansim"
        },
        "is_accepted": false,
        "score": 7,
        "last_activity_date": 1598857913,
        "creation_date": 1598857913,
        "answer_id": 63666309,
        "question_id": 19105706,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "If someone is using column names like `&quot;key&quot;` or `&quot;value&quot;`, then you still see the same error that your mysql query syntax is bad. This should fix:\r\n\r\n    .where(&quot;`key` LIKE ?&quot;, &quot;%#{key}%&quot;)",
        "body": "<p>If someone is using column names like <code>&quot;key&quot;<\/code> or <code>&quot;value&quot;<\/code>, then you still see the same error that your mysql query syntax is bad. This should fix:<\/p>\n<pre><code>.where(&quot;`key` LIKE ?&quot;, &quot;%#{key}%&quot;)\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 421,
            "reputation": 3022,
            "user_id": 537,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/8f0e776cdc43e1169a8c965e62e474db?s=256&d=identicon&r=PG",
            "display_name": "James Avery",
            "link": "https:\/\/stackoverflow.com\/users\/537\/james-avery"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1336639454,
        "creation_date": 1218038012,
        "answer_id": 3588,
        "question_id": 3585,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "If you are creating a new rails application you can set the database using the -d switch like this:\r\n\r\n    rails -d mysql myapp\r\n\r\nIts always easy to switch your database later though, and using sqlite really is easier if you are developing on a Mac.",
        "body": "<p>If you are creating a new rails application you can set the database using the -d switch like this:<\/p>\n\n<pre><code>rails -d mysql myapp\n<\/code><\/pre>\n\n<p>Its always easy to switch your database later though, and using sqlite really is easier if you are developing on a Mac.<\/p>\n",
        "last_edit_date": 1336639454.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1230,
            "reputation": 12331,
            "user_id": 1632,
            "user_type": "registered",
            "accept_rate": 81,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/6d50cc8069d968d5f750787cc8683aed?s=256&d=identicon&r=PG",
            "display_name": "wusher",
            "link": "https:\/\/stackoverflow.com\/users\/1632\/wusher"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1297008277,
        "creation_date": 1219181558,
        "answer_id": 17006,
        "question_id": 16991,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "I have used [Komodo][1] and it&#39;s pretty good. I use [TextMate][2] now. \r\n\r\n  [1]: http:\/\/www.activestate.com\/Products\/komodo_ide\/index.mhtml &quot;Komodo&quot;\r\n  [2]: http:\/\/en.wikipedia.org\/wiki\/TextMate\r\n",
        "body": "<p>I have used <a href=\"http:\/\/www.activestate.com\/Products\/komodo_ide\/index.mhtml\" rel=\"nofollow noreferrer\" title=\"Komodo\">Komodo<\/a> and it's pretty good. I use <a href=\"http:\/\/en.wikipedia.org\/wiki\/TextMate\" rel=\"nofollow noreferrer\">TextMate<\/a> now. <\/p>\n",
        "last_edit_date": 1297008277.0,
        "community_owned_date": 1303831022.0
    },
    {
        "owner": {
            "account_id": 5874,
            "reputation": 2458,
            "user_id": 9652,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/49dd257df4c312a44b3f7a4b1bc24c10?s=256&d=identicon&r=PG",
            "display_name": "Alex M",
            "link": "https:\/\/stackoverflow.com\/users\/9652\/alex-m"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1221954787,
        "creation_date": 1221954315,
        "answer_id": 109794,
        "question_id": 109781,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "I had originally suggested using the `select` method on Array. To wit:\r\n\r\n`[1, 2, 3, 4, 5, 6, 7].select{|e| e%2 == 0}`\r\ngives us `[2,4,6]` back.\r\n\r\nBut if you want the first such object, use `detect`.\r\n\r\n`[1, 2, 3, 4, 5, 6, 7].detect{|e| e&gt;3}` gives us `4`.\r\n\r\nI&#39;m not sure what you&#39;re going for here, though.",
        "body": "<p>I had originally suggested using the <code>select<\/code> method on Array. To wit:<\/p>\n\n<p><code>[1, 2, 3, 4, 5, 6, 7].select{|e| e%2 == 0}<\/code>\ngives us <code>[2,4,6]<\/code> back.<\/p>\n\n<p>But if you want the first such object, use <code>detect<\/code>.<\/p>\n\n<p><code>[1, 2, 3, 4, 5, 6, 7].detect{|e| e&gt;3}<\/code> gives us <code>4<\/code>.<\/p>\n\n<p>I'm not sure what you're going for here, though.<\/p>\n",
        "last_edit_date": 1221954787.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 8018,
            "reputation": 48008,
            "user_id": 14160,
            "user_type": "registered",
            "accept_rate": 75,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/cec410ce905fd7ca755e844299e135e8?s=256&d=identicon&r=PG",
            "display_name": "madlep",
            "link": "https:\/\/stackoverflow.com\/users\/14160\/madlep"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1224559883,
        "creation_date": 1224559883,
        "answer_id": 220694,
        "question_id": 220668,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "cruisecontrol.rb would be the perfect match then.\r\n\r\nhttp:\/\/cruisecontrolrb.thoughtworks.com\/",
        "body": "<p>cruisecontrol.rb would be the perfect match then.<\/p>\n\n<p><a href=\"http:\/\/cruisecontrolrb.thoughtworks.com\/\" rel=\"noreferrer\">http:\/\/cruisecontrolrb.thoughtworks.com\/<\/a><\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 17923,
            "reputation": 10709,
            "user_id": 40620,
            "user_type": "registered",
            "accept_rate": 90,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/3c76327838ebb6f7ea07f783e862d863?s=256&d=identicon&r=PG",
            "display_name": "Tom",
            "link": "https:\/\/stackoverflow.com\/users\/40620\/tom"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1234047404,
        "creation_date": 1234047404,
        "answer_id": 524754,
        "question_id": 524658,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "Note that this idiom exists in other programming languages as well.  C didn&#39;t have an intrinsic `bool` type, so all booleans were typed as `int` instead, with canonical values of `0` or `1`.  Takes this example (parentheses added for clarity):\r\n\r\n    !(1234) == 0\r\n    !(0) == 1\r\n    !(!(1234)) == 1\r\n\r\nThe &quot;not-not&quot; syntax converts any non-zero integer to `1`, the canonical boolean true value.\r\n\r\nIn general, though, I find it much better to put in a reasonable comparison than to use this uncommon idiom:\r\n\r\n    int x = 1234;\r\n    if (!!x); \/\/ wtf mate\r\n    if (x != 0); \/\/ obvious\r\n",
        "body": "<p>Note that this idiom exists in other programming languages as well.  C didn't have an intrinsic <code>bool<\/code> type, so all booleans were typed as <code>int<\/code> instead, with canonical values of <code>0<\/code> or <code>1<\/code>.  Takes this example (parentheses added for clarity):<\/p>\n\n<pre><code>!(1234) == 0\n!(0) == 1\n!(!(1234)) == 1\n<\/code><\/pre>\n\n<p>The \"not-not\" syntax converts any non-zero integer to <code>1<\/code>, the canonical boolean true value.<\/p>\n\n<p>In general, though, I find it much better to put in a reasonable comparison than to use this uncommon idiom:<\/p>\n\n<pre><code>int x = 1234;\nif (!!x); \/\/ wtf mate\nif (x != 0); \/\/ obvious\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 9333,
            "reputation": 361,
            "user_id": 17191,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/89bfd5bbdd4e00745f9921097626b91e?s=256&d=identicon&r=PG",
            "display_name": "berlin.ab",
            "link": "https:\/\/stackoverflow.com\/users\/17191\/berlin-ab"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1236317575,
        "creation_date": 1236317575,
        "answer_id": 617754,
        "question_id": 614309,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "I attempt to mimic the Rails project structure because my team, which usually deals with Rails, will understand the structure better than another configuration.  Convention over Configuration - bleeding over from Rails.",
        "body": "<p>I attempt to mimic the Rails project structure because my team, which usually deals with Rails, will understand the structure better than another configuration.  Convention over Configuration - bleeding over from Rails.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5130,
            "reputation": 3285,
            "user_id": 8092,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/6f02b8ba8a3e4f55a6264e19fadbf09e?s=256&d=identicon&r=PG",
            "display_name": "Jonathan Adelson",
            "link": "https:\/\/stackoverflow.com\/users\/8092\/jonathan-adelson"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1238698996,
        "creation_date": 1238690038,
        "answer_id": 710529,
        "question_id": 710501,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "Inject applies the block \r\n\r\n    result + element\r\n\r\nto each item in the array. For the next item (&quot;element&quot;), the value returned from the block is &quot;result&quot;. The way you&#39;ve called it (with a parameter), &quot;result&quot; starts with the value of that parameter. So the effect is adding the elements up.",
        "body": "<p>Inject applies the block <\/p>\n\n<pre><code>result + element\n<\/code><\/pre>\n\n<p>to each item in the array. For the next item (\"element\"), the value returned from the block is \"result\". The way you've called it (with a parameter), \"result\" starts with the value of that parameter. So the effect is adding the elements up.<\/p>\n",
        "last_edit_date": 1238698996.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 10481,
            "reputation": 24281,
            "user_id": 19839,
            "user_type": "registered",
            "accept_rate": 81,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/971cfac6afb23c0f0fd3623284a02a81?s=256&d=identicon&r=PG",
            "display_name": "csexton",
            "link": "https:\/\/stackoverflow.com\/users\/19839\/csexton"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1242054798,
        "creation_date": 1242054798,
        "answer_id": 848581,
        "question_id": 220668,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "Like a number of people I was a huge fan of cruisecontrol.rb, but have recently switched my projects to [Integrity][1]. \r\n\r\nLightweight and easy to setup (much like cc.rb), but with a nicer interface.\r\n\r\n\r\n  [1]: http:\/\/integrityapp.com\/",
        "body": "<p>Like a number of people I was a huge fan of cruisecontrol.rb, but have recently switched my projects to <a href=\"http:\/\/integrityapp.com\/\" rel=\"noreferrer\">Integrity<\/a>. <\/p>\n\n<p>Lightweight and easy to setup (much like cc.rb), but with a nicer interface.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 121761,
            "reputation": 3047,
            "user_id": 315083,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/c898c5d633466c89d19db9852c79a264?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "George",
            "link": "https:\/\/stackoverflow.com\/users\/315083\/george"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1274231486,
        "creation_date": 1274231486,
        "answer_id": 2862237,
        "question_id": 533837,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "If you don&#39;t have the new version of `each_with_index`, you can use the [`zip`](http:\/\/ruby-doc.org\/core\/classes\/Enumerable.html#M003138 &quot;Enumerable#zip&quot;) method to pair indexes with elements:\r\n\r\n    blahs = %w{one two three four five}\r\n    puts (1..blahs.length).zip(blahs).map{|pair|&#39;%s %s&#39; % pair}\r\n\r\nwhich produces:\r\n\r\n    1 one\r\n    2 two\r\n    3 three\r\n    4 four\r\n    5 five\r\n\r\n",
        "body": "<p>If you don't have the new version of <code>each_with_index<\/code>, you can use the <a href=\"http:\/\/ruby-doc.org\/core\/classes\/Enumerable.html#M003138\" rel=\"noreferrer\" title=\"Enumerable#zip\"><code>zip<\/code><\/a> method to pair indexes with elements:<\/p>\n\n<pre><code>blahs = %w{one two three four five}\nputs (1..blahs.length).zip(blahs).map{|pair|'%s %s' % pair}\n<\/code><\/pre>\n\n<p>which produces:<\/p>\n\n<pre><code>1 one\n2 two\n3 three\n4 four\n5 five\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 151903,
            "reputation": 12656,
            "user_id": 366051,
            "user_type": "registered",
            "accept_rate": 89,
            "profile_image": "https:\/\/i.stack.imgur.com\/a0ZU0.png?s=256&g=1",
            "display_name": "Paul Hoffer",
            "link": "https:\/\/stackoverflow.com\/users\/366051\/paul-hoffer"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1292141063,
        "creation_date": 1291313067,
        "answer_id": 4338241,
        "question_id": 4333286,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "The Pickaxe has a snippet for this for 1.8. Here it is:\r\n\r\n    def require_relative(relative_feature)\r\n      c = caller.first\r\n      fail &quot;Can&#39;t parse #{c}&quot; unless c.rindex(\/:\\d+(:in `.*&#39;)?$\/)\r\n      file = $`\r\n      if \/\\A\\((.*)\\)\/ =~ file # eval, etc.\r\n        raise LoadError, &quot;require_relative is called in #{$1}&quot;\r\n      end\r\n      absolute = File.expand_path(relative_feature, File.dirname(file))\r\n      require absolute\r\n    end\r\n\r\nIt basically just uses what Theo answered, but so you can still use `require_relative`.",
        "body": "<p>The Pickaxe has a snippet for this for 1.8. Here it is:<\/p>\n\n<pre><code>def require_relative(relative_feature)\n  c = caller.first\n  fail \"Can't parse #{c}\" unless c.rindex(\/:\\d+(:in `.*')?$\/)\n  file = $`\n  if \/\\A\\((.*)\\)\/ =~ file # eval, etc.\n    raise LoadError, \"require_relative is called in #{$1}\"\n  end\n  absolute = File.expand_path(relative_feature, File.dirname(file))\n  require absolute\nend\n<\/code><\/pre>\n\n<p>It basically just uses what Theo answered, but so you can still use <code>require_relative<\/code>.<\/p>\n",
        "last_edit_date": 1292141063.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 698780,
            "reputation": 61,
            "user_id": 585834,
            "user_type": "unregistered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/73d571ce6e8dc5158eff05d33f4b8f10?s=256&d=identicon&r=PG",
            "display_name": "Paul Prescod",
            "link": "https:\/\/stackoverflow.com\/users\/585834\/paul-prescod"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1295721474,
        "creation_date": 1295721474,
        "answer_id": 4769754,
        "question_id": 4769004,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "In Ruby, instance variables and methods are completely unrelated, except when you explicitly relate them with attr_accessor or something like that.\r\n\r\nIn Python, methods are just a special class of attribute: one that is executable.\r\n\r\nSo for example:\r\n\r\n    &gt;&gt;&gt; class foo:\r\n    ...     x = 5\r\n    ...     def y(): pass\r\n    ... \r\n    &gt;&gt;&gt; f = foo()\r\n    &gt;&gt;&gt; type(f.x)\r\n    &lt;type &#39;int&#39;&gt;\r\n    &gt;&gt;&gt; type(f.y)\r\n    &lt;type &#39;instancemethod&#39;&gt;\r\n\r\nThat difference has a lot of implications, like for example that referring to f.x refers to the method object, rather than calling it. Also, as you can see, f.x is public by default, whereas in Ruby, instance variables are private by default.",
        "body": "<p>In Ruby, instance variables and methods are completely unrelated, except when you explicitly relate them with attr_accessor or something like that.<\/p>\n\n<p>In Python, methods are just a special class of attribute: one that is executable.<\/p>\n\n<p>So for example:<\/p>\n\n<pre><code>&gt;&gt;&gt; class foo:\n...     x = 5\n...     def y(): pass\n... \n&gt;&gt;&gt; f = foo()\n&gt;&gt;&gt; type(f.x)\n&lt;type 'int'&gt;\n&gt;&gt;&gt; type(f.y)\n&lt;type 'instancemethod'&gt;\n<\/code><\/pre>\n\n<p>That difference has a lot of implications, like for example that referring to f.x refers to the method object, rather than calling it. Also, as you can see, f.x is public by default, whereas in Ruby, instance variables are private by default.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 135850,
            "reputation": 7739,
            "user_id": 338982,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/494d05e14ff76e3a9f0441bdd2de7d5c?s=256&d=identicon&r=PG",
            "display_name": "mbreining",
            "link": "https:\/\/stackoverflow.com\/users\/338982\/mbreining"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1304809175,
        "creation_date": 1304809175,
        "answer_id": 5924555,
        "question_id": 5924495,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Try this:\r\n\r\n    Kernel.const_get(&quot;MyClass&quot;).new\r\n\r\nThen to loop through an object&#39;s instance variables: \r\n\r\n    obj.instance_variables.each do |v|\r\n      # do something\r\n    end",
        "body": "<p>Try this:<\/p>\n\n<pre><code>Kernel.const_get(\"MyClass\").new\n<\/code><\/pre>\n\n<p>Then to loop through an object's instance variables: <\/p>\n\n<pre><code>obj.instance_variables.each do |v|\n  # do something\nend\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 70393,
            "reputation": 542,
            "user_id": 204180,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/505343af4f4148fc47811b848f6500f5?s=256&d=identicon&r=PG",
            "display_name": "andy318",
            "link": "https:\/\/stackoverflow.com\/users\/204180\/andy318"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1336639373,
        "creation_date": 1305731341,
        "answer_id": 6046965,
        "question_id": 3585,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "In Rails 3, you could do\r\n\r\n    $rails new projectname --database=mysql",
        "body": "<p>In Rails 3, you could do<\/p>\n\n<pre><code>$rails new projectname --database=mysql\n<\/code><\/pre>\n",
        "last_edit_date": 1336639373.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 961536,
            "reputation": 2511,
            "user_id": 985792,
            "user_type": "registered",
            "accept_rate": 56,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/462183a7e1aa06a89cb656c024aa3b09?s=256&d=identicon&r=PG",
            "display_name": "Claudio Floreani",
            "link": "https:\/\/stackoverflow.com\/users\/985792\/claudio-floreani"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1319552110,
        "creation_date": 1319552110,
        "answer_id": 7890672,
        "question_id": 4333286,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "&gt;     $LOAD_PATH &lt;&lt; &#39;.&#39;\r\n\r\n&gt;     $LOAD_PATH &lt;&lt; File.dirname(__FILE__)\r\n\r\nIt&#39;s not a good security habit: why should you expose your whole directory?\r\n\r\n&gt;     require &#39;.\/path\/to\/file&#39;\r\n\r\nThis doesn&#39;t work if RUBY_VERSION &lt; 1.9.2\r\n\r\n&gt; use weird constructions such as\r\n&gt; \r\n&gt;     require File.join(File.dirname(__FILE__), &#39;path\/to\/file&#39;)\r\n\r\n&gt; Even weirder construction:\r\n&gt; \r\n&gt;     require File.join(File.expand_path(File.dirname(__FILE__)), &#39;path\/to\/file&#39;)\r\n\r\n&gt; Use backports gem - it&#39;s kind of heavy, it requires rubygems\r\n&gt; infrastructure and includes tons of other workarounds, while I just\r\n&gt; want require to work with relative files.\r\n\r\nYou have already answered why these are not the best options.\r\n\r\n&gt; check if RUBY_VERSION &lt; 1.9.2, then define require_relative as\r\n&gt; require, use require_relative everywhere where it&#39;s needed afterwards\r\n\r\n&gt; check if require_relative already exists, if it does, try to proceed\r\n&gt; as in previous case\r\n\r\nThis may work, but there&#39;s safer and quicker way: to deal with the LoadError exception:\r\n\r\n    begin\r\n      # require statements for 1.9.2 and above, such as:\r\n      require &quot;.\/path\/to\/file&quot;\r\n      # or\r\n      require_local &quot;path\/to\/file&quot;\r\n    rescue LoadError\r\n      # require statements other versions:\r\n      require &quot;path\/to\/file&quot;\r\n    end\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
        "body": "<blockquote>\n<pre><code>$LOAD_PATH &lt;&lt; '.'\n\n$LOAD_PATH &lt;&lt; File.dirname(__FILE__)\n<\/code><\/pre>\n<\/blockquote>\n\n<p>It's not a good security habit: why should you expose your whole directory?<\/p>\n\n<blockquote>\n<pre><code>require '.\/path\/to\/file'\n<\/code><\/pre>\n<\/blockquote>\n\n<p>This doesn't work if RUBY_VERSION &lt; 1.9.2<\/p>\n\n<blockquote>\n  <p>use weird constructions such as<\/p>\n\n<pre><code>require File.join(File.dirname(__FILE__), 'path\/to\/file')\n<\/code><\/pre>\n  \n  <p>Even weirder construction:<\/p>\n\n<pre><code>require File.join(File.expand_path(File.dirname(__FILE__)), 'path\/to\/file')\n<\/code><\/pre>\n  \n  <p>Use backports gem - it's kind of heavy, it requires rubygems\n  infrastructure and includes tons of other workarounds, while I just\n  want require to work with relative files.<\/p>\n<\/blockquote>\n\n<p>You have already answered why these are not the best options.<\/p>\n\n<blockquote>\n  <p>check if RUBY_VERSION &lt; 1.9.2, then define require_relative as\n  require, use require_relative everywhere where it's needed afterwards<\/p>\n  \n  <p>check if require_relative already exists, if it does, try to proceed\n  as in previous case<\/p>\n<\/blockquote>\n\n<p>This may work, but there's safer and quicker way: to deal with the LoadError exception:<\/p>\n\n<pre><code>begin\n  # require statements for 1.9.2 and above, such as:\n  require \".\/path\/to\/file\"\n  # or\n  require_local \"path\/to\/file\"\nrescue LoadError\n  # require statements other versions:\n  require \"path\/to\/file\"\nend\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 360596,
            "reputation": 179,
            "user_id": 1068145,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/b3675f0ce034e07294035125adcf64bb?s=256&d=identicon&r=PG",
            "display_name": "tanner",
            "link": "https:\/\/stackoverflow.com\/users\/1068145\/tanner"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1327194464,
        "creation_date": 1327194464,
        "answer_id": 8958154,
        "question_id": 1274605,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Here&#39;s a solution for find\/replace in all files of a given directory. Basically I took the answer provided by sepp2k and expanded it.\r\n\r\n\r\n    # First set the files to search\/replace in\r\n    files = Dir.glob(&quot;\/PATH\/*&quot;)\r\n    \r\n    # Then set the variables for find\/replace\r\n    @original_string_or_regex = \/REGEX\/\r\n    @replacement_string = &quot;STRING&quot;\r\n    \r\n    files.each do |file_name|\r\n      text = File.read(file_name)\r\n      replace = text.gsub!(@original_string_or_regex, @replacement_string)\r\n      File.open(file_name, &quot;w&quot;) { |file| file.puts replace }\r\n    end\r\n\r\n",
        "body": "<p>Here's a solution for find\/replace in all files of a given directory. Basically I took the answer provided by sepp2k and expanded it.<\/p>\n\n<pre><code># First set the files to search\/replace in\nfiles = Dir.glob(\"\/PATH\/*\")\n\n# Then set the variables for find\/replace\n@original_string_or_regex = \/REGEX\/\n@replacement_string = \"STRING\"\n\nfiles.each do |file_name|\n  text = File.read(file_name)\n  replace = text.gsub!(@original_string_or_regex, @replacement_string)\n  File.open(file_name, \"w\") { |file| file.puts replace }\nend\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 237172,
            "reputation": 203927,
            "user_id": 505154,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/2e8b69989251cfc746626b802f610a2c?s=256&d=identicon&r=PG",
            "display_name": "Andrew Clark",
            "link": "https:\/\/stackoverflow.com\/users\/505154\/andrew-clark"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1329354096,
        "creation_date": 1329354096,
        "answer_id": 9304060,
        "question_id": 9303984,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "`scan()` will find all non-overlapping matches of the regex in your string, so instead of returning an array of your groups like you seem to be expecting, it is returning an array of arrays.\r\n\r\nYou are probably better off using `match()`, and then getting the array of captures using `MatchData#captures`:\r\n\r\n    g1, g2, g3 = ryan_string.match(\/(^.*)(:)(.*)\/i).captures\r\n\r\nHowever you could also do this with `scan()` if you wanted to:\r\n\r\n    g1, g2, g3 = ryan_string.scan(\/(^.*)(:)(.*)\/i)[0]",
        "body": "<p><code>scan()<\/code> will find all non-overlapping matches of the regex in your string, so instead of returning an array of your groups like you seem to be expecting, it is returning an array of arrays.<\/p>\n\n<p>You are probably better off using <code>match()<\/code>, and then getting the array of captures using <code>MatchData#captures<\/code>:<\/p>\n\n<pre><code>g1, g2, g3 = ryan_string.match(\/(^.*)(:)(.*)\/i).captures\n<\/code><\/pre>\n\n<p>However you could also do this with <code>scan()<\/code> if you wanted to:<\/p>\n\n<pre><code>g1, g2, g3 = ryan_string.scan(\/(^.*)(:)(.*)\/i)[0]\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 179352,
            "reputation": 21510,
            "user_id": 411944,
            "user_type": "registered",
            "accept_rate": 88,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/7bf057b98d0652db34842d1817234853?s=256&d=identicon&r=PG",
            "display_name": "Reactormonk",
            "link": "https:\/\/stackoverflow.com\/users\/411944\/reactormonk"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1350578234,
        "creation_date": 1329920639,
        "answer_id": 9396640,
        "question_id": 9394338,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "    rvm system\r\n    env &gt; before\r\n    rvm jruby # or whatever\r\n    env &gt; after\r\n    diff after before\r\n\r\nGives you approximately:\r\n\r\n    &lt; GEM_HOME=$HOME\/.gem\/ruby\/1.9.1\r\n    ---\r\n    &gt; GEM_HOME=$HOME\/.rvm\/gems\/jruby-1.6.6\r\n    &lt; GEM_PATH=$HOME\/.gem\/ruby\/1.9.1\r\n    ---\r\n    &gt; GEM_PATH=$HOME\/.rvm\/gems\/jruby-1.6.6:$HOME\/.rvm\/gems\/jruby-1.6.6@global\r\n    *bunch of rvm_*\r\n    &gt; MY_RUBY_HOME=$HOME\/.rvm\/rubies\/jruby-1.6.6\r\n    &gt; RUBY_VERSION=jruby-1.6.6\r\n    &gt; IRBRC=$HOME\/.rvm\/rubies\/jruby-1.6.6\/.irbrc\r\n\r\nAnd it prepends:\r\n\r\n    $HOME\/.rvm\/gems\/jruby-1.6.6\/bin:$HOME\/.rvm\/gems\/jruby-1.6.6@global\/bin\r\n\r\nto `$PATH`\r\n\r\n",
        "body": "<pre><code>rvm system\nenv &gt; before\nrvm jruby # or whatever\nenv &gt; after\ndiff after before\n<\/code><\/pre>\n\n<p>Gives you approximately:<\/p>\n\n<pre><code>&lt; GEM_HOME=$HOME\/.gem\/ruby\/1.9.1\n---\n&gt; GEM_HOME=$HOME\/.rvm\/gems\/jruby-1.6.6\n&lt; GEM_PATH=$HOME\/.gem\/ruby\/1.9.1\n---\n&gt; GEM_PATH=$HOME\/.rvm\/gems\/jruby-1.6.6:$HOME\/.rvm\/gems\/jruby-1.6.6@global\n*bunch of rvm_*\n&gt; MY_RUBY_HOME=$HOME\/.rvm\/rubies\/jruby-1.6.6\n&gt; RUBY_VERSION=jruby-1.6.6\n&gt; IRBRC=$HOME\/.rvm\/rubies\/jruby-1.6.6\/.irbrc\n<\/code><\/pre>\n\n<p>And it prepends:<\/p>\n\n<pre><code>$HOME\/.rvm\/gems\/jruby-1.6.6\/bin:$HOME\/.rvm\/gems\/jruby-1.6.6@global\/bin\n<\/code><\/pre>\n\n<p>to <code>$PATH<\/code><\/p>\n",
        "last_edit_date": 1350578234.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2505,
            "reputation": 50509,
            "user_id": 3488,
            "user_type": "registered",
            "accept_rate": 93,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/6857f171e3ac5eeee65afa4af8d52155?s=256&d=identicon&r=PG",
            "display_name": "Craig Walker",
            "link": "https:\/\/stackoverflow.com\/users\/3488\/craig-walker"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1358882531,
        "creation_date": 1358882531,
        "answer_id": 14466359,
        "question_id": 4693445,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "`rvm gemset empty &lt;gemset&gt;` works, but only if you specify a gemset name.\r\n\r\nIf you want to empty the *default* gemset, you need to pass an empty string for the gemset name.\r\n\r\n`rvm gemset empty mygems &quot;&quot;`",
        "body": "<p><code>rvm gemset empty &lt;gemset&gt;<\/code> works, but only if you specify a gemset name.<\/p>\n\n<p>If you want to empty the <em>default<\/em> gemset, you need to pass an empty string for the gemset name.<\/p>\n\n<p><code>rvm gemset empty mygems \"\"<\/code><\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 991828,
            "reputation": 28801,
            "user_id": 1008891,
            "user_type": "registered",
            "accept_rate": 51,
            "profile_image": "https:\/\/i.stack.imgur.com\/BbcgE.jpg?s=256&g=1",
            "display_name": "Peter Alfvin",
            "link": "https:\/\/stackoverflow.com\/users\/1008891\/peter-alfvin"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1369845597,
        "creation_date": 1369845597,
        "answer_id": 16819522,
        "question_id": 16818180,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Actually, I think you need to subtract the offset after you convert it, as in:\r\n\r\n    1.9.3p194 :042 &gt; utc_time = Time.now.utc\r\n    =&gt; 2013-05-29 16:37:36 UTC\r\n    1.9.3p194 :043 &gt; local_time = utc_time.in_time_zone(&#39;America\/New_York&#39;)\r\n     =&gt; Wed, 29 May 2013 12:37:36 EDT -04:00\r\n    1.9.3p194 :044 &gt; desired_time = local_time-local_time.utc_offset\r\n     =&gt; Wed, 29 May 2013 16:37:36 EDT -04:00 \r\n\r\n",
        "body": "<p>Actually, I think you need to subtract the offset after you convert it, as in:<\/p>\n\n<pre><code>1.9.3p194 :042 &gt; utc_time = Time.now.utc\n=&gt; 2013-05-29 16:37:36 UTC\n1.9.3p194 :043 &gt; local_time = utc_time.in_time_zone('America\/New_York')\n =&gt; Wed, 29 May 2013 12:37:36 EDT -04:00\n1.9.3p194 :044 &gt; desired_time = local_time-local_time.utc_offset\n =&gt; Wed, 29 May 2013 16:37:36 EDT -04:00 \n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 930780,
            "reputation": 2201,
            "user_id": 960702,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/r3f9A.jpg?s=256&g=1",
            "display_name": "mustafaturan",
            "link": "https:\/\/stackoverflow.com\/users\/960702\/mustafaturan"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1374866622,
        "creation_date": 1374866622,
        "answer_id": 17889367,
        "question_id": 5030553,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Recursively convert your objects to hash using &#39;hashable&#39; gem (https:\/\/rubygems.org\/gems\/hashable)\r\n**Example**\r\n\r\n    class A\r\n      include Hashable\r\n      attr_accessor :blist\r\n      def initialize\r\n        @blist = [ B.new(1), { &#39;b&#39; =&gt; B.new(2) } ]\r\n      end\r\n    end\r\n\r\n    class B\r\n      include Hashable\r\n      attr_accessor :id\r\n      def initialize(id); @id = id; end\r\n    end\r\n\r\n    a = A.new\r\n    a.to_dh # or a.to_deep_hash\r\n    # {:blist=&gt;[{:id=&gt;1}, {&quot;b&quot;=&gt;{:id=&gt;2}}]}",
        "body": "<p>Recursively convert your objects to hash using 'hashable' gem (<a href=\"https:\/\/rubygems.org\/gems\/hashable\" rel=\"noreferrer\">https:\/\/rubygems.org\/gems\/hashable<\/a>)\n<strong>Example<\/strong><\/p>\n\n<pre><code>class A\n  include Hashable\n  attr_accessor :blist\n  def initialize\n    @blist = [ B.new(1), { 'b' =&gt; B.new(2) } ]\n  end\nend\n\nclass B\n  include Hashable\n  attr_accessor :id\n  def initialize(id); @id = id; end\nend\n\na = A.new\na.to_dh # or a.to_deep_hash\n# {:blist=&gt;[{:id=&gt;1}, {\"b\"=&gt;{:id=&gt;2}}]}\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1101449,
            "reputation": 1367,
            "user_id": 1093765,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/d877e02080b7ab20b232dead2eae0f9c?s=256&d=identicon&r=PG",
            "display_name": "mat",
            "link": "https:\/\/stackoverflow.com\/users\/1093765\/mat"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1382381095,
        "creation_date": 1382381095,
        "answer_id": 19502265,
        "question_id": 9050419,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "**Helped me on Debian Wheezy 64bit**\r\n\r\n     apt-get install libmagickcore-dev libmagickwand-dev",
        "body": "<p><strong>Helped me on Debian Wheezy 64bit<\/strong><\/p>\n\n<pre><code> apt-get install libmagickcore-dev libmagickwand-dev\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2400950,
            "reputation": 8002,
            "user_id": 2098614,
            "user_type": "registered",
            "accept_rate": 45,
            "profile_image": "https:\/\/i.stack.imgur.com\/cslmi.jpg?s=256&g=1",
            "display_name": "Ajey",
            "link": "https:\/\/stackoverflow.com\/users\/2098614\/ajey"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1383825995,
        "creation_date": 1383825995,
        "answer_id": 19835507,
        "question_id": 6927442,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "The Gemfile.lock\r\n\r\nWhen you run bundle install, Bundler will persist the full names and versions of all gems that you used (including dependencies of the gems specified in the Gemfile(5)) into a file called Gemfile.lock.\r\n\r\nBundler uses this file in all subsequent calls to bundle install, which guarantees that you always use the same exact code, even as your application moves across machines.\r\n\r\nBecause of the way dependency resolution works, even a seemingly small change (for instance, an update to a point-release of a dependency of a gem in your Gemfile(5)) can result in radically different gems being needed to satisfy all dependencies.\r\n\r\nAs a result, you SHOULD check your Gemfile.lock into version control. If you do not, every machine that checks out your repository (including your production server) will resolve all dependencies again, which will result in different versions of third-party code being used if any of the gems in the Gemfile(5) or any of their dependencies have been updated.",
        "body": "<p>The Gemfile.lock<\/p>\n\n<p>When you run bundle install, Bundler will persist the full names and versions of all gems that you used (including dependencies of the gems specified in the Gemfile(5)) into a file called Gemfile.lock.<\/p>\n\n<p>Bundler uses this file in all subsequent calls to bundle install, which guarantees that you always use the same exact code, even as your application moves across machines.<\/p>\n\n<p>Because of the way dependency resolution works, even a seemingly small change (for instance, an update to a point-release of a dependency of a gem in your Gemfile(5)) can result in radically different gems being needed to satisfy all dependencies.<\/p>\n\n<p>As a result, you SHOULD check your Gemfile.lock into version control. If you do not, every machine that checks out your repository (including your production server) will resolve all dependencies again, which will result in different versions of third-party code being used if any of the gems in the Gemfile(5) or any of their dependencies have been updated.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 165549,
            "reputation": 1669,
            "user_id": 389103,
            "user_type": "registered",
            "accept_rate": 67,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/b1f6a7d9faffa90872d58946f3cce9e2?s=256&d=identicon&r=PG",
            "display_name": "A-Dubb",
            "link": "https:\/\/stackoverflow.com\/users\/389103\/a-dubb"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1387144626,
        "creation_date": 1386980658,
        "answer_id": 20578237,
        "question_id": 5924495,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "    module One\r\n      module Two\r\n        class Three\r\n          def say_hi\r\n            puts &quot;say hi&quot;\r\n          end\r\n        end\r\n      end\r\n    end\r\n    \r\n    one = Object.const_get &quot;One&quot;\r\n    \r\n    puts one.class # =&gt; Module\r\n    \r\n    three = One::Two.const_get &quot;Three&quot;\r\n    \r\n    puts three.class # =&gt; Class\r\n    \r\n    three.new.say_hi # =&gt; &quot;say hi&quot;\r\n\r\nIn ruby 2.0 and, possibly earlier releases, `Object.const_get` will [recursively perform a lookup](http:\/\/ruby-doc.org\/core-2.0.0\/Module.html#method-i-const_get) on a namespaces like `Foo::Bar`. The example above is when the namespace is known ahead of time and highlights the fact that `const_get` can be called on modules directly as opposed to exclusively on `Object`.",
        "body": "<pre><code>module One\n  module Two\n    class Three\n      def say_hi\n        puts \"say hi\"\n      end\n    end\n  end\nend\n\none = Object.const_get \"One\"\n\nputs one.class # =&gt; Module\n\nthree = One::Two.const_get \"Three\"\n\nputs three.class # =&gt; Class\n\nthree.new.say_hi # =&gt; \"say hi\"\n<\/code><\/pre>\n\n<p>In ruby 2.0 and, possibly earlier releases, <code>Object.const_get<\/code> will <a href=\"http:\/\/ruby-doc.org\/core-2.0.0\/Module.html#method-i-const_get\" rel=\"noreferrer\">recursively perform a lookup<\/a> on a namespaces like <code>Foo::Bar<\/code>. The example above is when the namespace is known ahead of time and highlights the fact that <code>const_get<\/code> can be called on modules directly as opposed to exclusively on <code>Object<\/code>.<\/p>\n",
        "last_edit_date": 1387144626.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 84283,
            "reputation": 3007,
            "user_id": 1373324,
            "user_type": "registered",
            "accept_rate": 78,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/fe313cc2818ef2188822e8debc3d91fa?s=256&d=identicon&r=PG",
            "display_name": "Ain Tohvri",
            "link": "https:\/\/stackoverflow.com\/users\/1373324\/ain-tohvri"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1406709643,
        "creation_date": 1406709643,
        "answer_id": 25032298,
        "question_id": 18276701,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Just adding my experience: __if you&#39;re using `.bash_profile`, check if `.bashrc` is not interfering__. Killing `.bashrc` in favour of single Bash configuration by `.bash_profile` works out in this case.",
        "body": "<p>Just adding my experience: <strong>if you're using <code>.bash_profile<\/code>, check if <code>.bashrc<\/code> is not interfering<\/strong>. Killing <code>.bashrc<\/code> in favour of single Bash configuration by <code>.bash_profile<\/code> works out in this case.<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 173880,
            "reputation": 10402,
            "user_id": 402870,
            "user_type": "registered",
            "accept_rate": 70,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/fcbce6b52271aee17138ac7432972378?s=256&d=identicon&r=PG",
            "display_name": "IAmNaN",
            "link": "https:\/\/stackoverflow.com\/users\/402870\/iamnan"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1466535281,
        "creation_date": 1426960339,
        "answer_id": 29186007,
        "question_id": 710501,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "**tldr;** `inject` differs from `map` in one important way: `inject` returns the value of the last execution of the block whereas `map` returns the array it iterated over.\r\n\r\n**More than that** the value of each block execution passed into the next execution via the first parameter (`result` in this case) and you can initialize that value (the `(0)` part).\r\n\r\nYour above example could be written using `map` like this:\r\n\r\n    result = 0 # initialize result\r\n    [1, 2, 3, 4].map { |element| result += element }\r\n    # result =&gt; 10\r\n\r\nSame effect but `inject` is more concise here.\r\n\r\nYou&#39;ll often find an assignment happens in the `map` block, whereas an evaluation happens in the `inject` block.\r\n\r\nWhich method you choose depends on the scope you want for `result`. When to *not* use it would be something like this:\r\n\r\n    result = [1, 2, 3, 4].inject(0) { |x, element| x + element }\r\n\r\nYou might be like all, &quot;Lookie me, I just combined that all into one line,&quot; but you also temporarily allocated memory for `x` as a scratch variable that wasn&#39;t necessary since you already had `result` to work with.",
        "body": "<p><strong>tldr;<\/strong> <code>inject<\/code> differs from <code>map<\/code> in one important way: <code>inject<\/code> returns the value of the last execution of the block whereas <code>map<\/code> returns the array it iterated over.<\/p>\n\n<p><strong>More than that<\/strong> the value of each block execution passed into the next execution via the first parameter (<code>result<\/code> in this case) and you can initialize that value (the <code>(0)<\/code> part).<\/p>\n\n<p>Your above example could be written using <code>map<\/code> like this:<\/p>\n\n<pre><code>result = 0 # initialize result\n[1, 2, 3, 4].map { |element| result += element }\n# result =&gt; 10\n<\/code><\/pre>\n\n<p>Same effect but <code>inject<\/code> is more concise here.<\/p>\n\n<p>You'll often find an assignment happens in the <code>map<\/code> block, whereas an evaluation happens in the <code>inject<\/code> block.<\/p>\n\n<p>Which method you choose depends on the scope you want for <code>result<\/code>. When to <em>not<\/em> use it would be something like this:<\/p>\n\n<pre><code>result = [1, 2, 3, 4].inject(0) { |x, element| x + element }\n<\/code><\/pre>\n\n<p>You might be like all, \"Lookie me, I just combined that all into one line,\" but you also temporarily allocated memory for <code>x<\/code> as a scratch variable that wasn't necessary since you already had <code>result<\/code> to work with.<\/p>\n",
        "last_edit_date": 1466535281.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 483118,
            "reputation": 455,
            "user_id": 1025230,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/537231f07f093f07f8210510b2b043f1?s=256&d=identicon&r=PG",
            "display_name": "Muhammad Aamir Talib",
            "link": "https:\/\/stackoverflow.com\/users\/1025230\/muhammad-aamir-talib"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1631080658,
        "creation_date": 1431011924,
        "answer_id": 30105269,
        "question_id": 2437390,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Add below line in main rb file\r\n\r\n    set :public_folder, &#39;public&#39;\r\n\r\nref: http:\/\/sinatrarb.com\/configuration.html#static---enabledisable-static-file-routes",
        "body": "<p>Add below line in main rb file<\/p>\n<pre><code>set :public_folder, 'public'\n<\/code><\/pre>\n<p>ref: <a href=\"http:\/\/sinatrarb.com\/configuration.html#static---enabledisable-static-file-routes\" rel=\"nofollow noreferrer\">http:\/\/sinatrarb.com\/configuration.html#static---enabledisable-static-file-routes<\/a><\/p>\n",
        "last_edit_date": 1631080658.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4523049,
            "reputation": 845,
            "user_id": 3675670,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/54094c3a94d6388af078b24f212db27d?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "ryan",
            "link": "https:\/\/stackoverflow.com\/users\/3675670\/ryan"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1442488828,
        "creation_date": 1442488828,
        "answer_id": 32629093,
        "question_id": 8652715,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "The gem [to_regexp](https:\/\/github.com\/seamusabshere\/to_regexp) can do the work.\r\n\r\n    &quot;\/[\\w\\s]+\/&quot;.to_regexp =&gt; \/[\\w\\s]+\/\r\n\r\nYou also can use the modifier:\r\n\r\n    &#39;\/foo\/i&#39;.to_regexp =&gt; \/foo\/i\r\n\r\n&gt;Finally, you can be more lazy using :detect\r\n\r\n    &#39;foo&#39;.to_regexp(detect: true)     #=&gt; \/foo\/\r\n    &#39;foo\\b&#39;.to_regexp(detect: true)   #=&gt; %r{foo\\\\b}\r\n    &#39;\/foo\\b\/&#39;.to_regexp(detect: true) #=&gt; %r{foo\\b}\r\n    &#39;foo\\b\/&#39;.to_regexp(detect: true)  #=&gt; %r{foo\\\\b\/}",
        "body": "<p>The gem <a href=\"https:\/\/github.com\/seamusabshere\/to_regexp\" rel=\"noreferrer\">to_regexp<\/a> can do the work.<\/p>\n\n<pre><code>\"\/[\\w\\s]+\/\".to_regexp =&gt; \/[\\w\\s]+\/\n<\/code><\/pre>\n\n<p>You also can use the modifier:<\/p>\n\n<pre><code>'\/foo\/i'.to_regexp =&gt; \/foo\/i\n<\/code><\/pre>\n\n<blockquote>\n  <p>Finally, you can be more lazy using :detect<\/p>\n<\/blockquote>\n\n<pre><code>'foo'.to_regexp(detect: true)     #=&gt; \/foo\/\n'foo\\b'.to_regexp(detect: true)   #=&gt; %r{foo\\\\b}\n'\/foo\\b\/'.to_regexp(detect: true) #=&gt; %r{foo\\b}\n'foo\\b\/'.to_regexp(detect: true)  #=&gt; %r{foo\\\\b\/}\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 6721528,
            "reputation": 87,
            "user_id": 5181356,
            "user_type": "registered",
            "profile_image": "https:\/\/lh4.googleusercontent.com\/-6SwkyYIZDc0\/AAAAAAAAAAI\/AAAAAAAAAGo\/aDWpVCjQ9Fg\/photo.jpg?sz=256",
            "display_name": "Andy Young",
            "link": "https:\/\/stackoverflow.com\/users\/5181356\/andy-young"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1448909389,
        "creation_date": 1448909389,
        "answer_id": 34005759,
        "question_id": 4284421,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Embedded Ruby, also called ERb, is the primary template system for including dynamic content in web pages. --Michael Hertl",
        "body": "<p>Embedded Ruby, also called ERb, is the primary template system for including dynamic content in web pages. --Michael Hertl<\/p>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 923404,
            "reputation": 7438,
            "user_id": 954643,
            "user_type": "registered",
            "accept_rate": 80,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/4179aad8a57c39de31d8ef12a9bf7e84?s=256&d=identicon&r=PG",
            "display_name": "qix",
            "link": "https:\/\/stackoverflow.com\/users\/954643\/qix"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1457041266,
        "creation_date": 1457041266,
        "answer_id": 35783607,
        "question_id": 267237,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Similar to @WillSargent&#39;s response, here&#39;s what I&#39;ve used in a `describe` block for the special case of testing some protected validators without needing to go through the heavyweight process of creating\/updating them with FactoryGirl (and you could use `private_instance_methods` similarly):\r\n\r\n      describe &quot;protected custom `validates` methods&quot; do\r\n        # Test these methods directly to avoid needing FactoryGirl.create\r\n        # to trigger before_create, etc.\r\n        before(:all) do\r\n          @protected_methods = MyClass.protected_instance_methods\r\n          MyClass.send(:public, *@protected_methods)\r\n        end\r\n        after(:all) do\r\n          MyClass.send(:protected, *@protected_methods)\r\n          @protected_methods = nil\r\n        end\r\n\r\n        # ...do some tests...\r\n      end",
        "body": "<p>Similar to @WillSargent's response, here's what I've used in a <code>describe<\/code> block for the special case of testing some protected validators without needing to go through the heavyweight process of creating\/updating them with FactoryGirl (and you could use <code>private_instance_methods<\/code> similarly):<\/p>\n\n<pre><code>  describe \"protected custom `validates` methods\" do\n    # Test these methods directly to avoid needing FactoryGirl.create\n    # to trigger before_create, etc.\n    before(:all) do\n      @protected_methods = MyClass.protected_instance_methods\n      MyClass.send(:public, *@protected_methods)\n    end\n    after(:all) do\n      MyClass.send(:protected, *@protected_methods)\n      @protected_methods = nil\n    end\n\n    # ...do some tests...\n  end\n<\/code><\/pre>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 9226871,
            "reputation": 171,
            "user_id": 6854400,
            "user_type": "registered",
            "profile_image": "https:\/\/graph.facebook.com\/10153917546681344\/picture?type=large",
            "display_name": "Andrew Khouzam",
            "link": "https:\/\/stackoverflow.com\/users\/6854400\/andrew-khouzam"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1474402176,
        "creation_date": 1474387034,
        "answer_id": 39598747,
        "question_id": 6166081,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "According to this [answer](https:\/\/stackoverflow.com\/a\/6278502\/5687152) to a similar question, it should be enough:\r\n\r\n    rvmsudo gem install bundler.\r\n\r\nCheers",
        "body": "<p>According to this <a href=\"https:\/\/stackoverflow.com\/a\/6278502\/5687152\">answer<\/a> to a similar question, it should be enough:<\/p>\n\n<pre><code>rvmsudo gem install bundler.\n<\/code><\/pre>\n\n<p>Cheers<\/p>\n",
        "last_edit_date": 1495540049.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1516287,
            "reputation": 32633,
            "user_id": 1417223,
            "user_type": "registered",
            "accept_rate": 79,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/dbdfe3d2d5f87f172757ada1438f3d16?s=256&d=identicon&r=PG",
            "display_name": "Fellow Stranger",
            "link": "https:\/\/stackoverflow.com\/users\/1417223\/fellow-stranger"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1478700355,
        "creation_date": 1478700355,
        "answer_id": 40508898,
        "question_id": 870507,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Not a direct answer to the question, but if you want the opposite to &quot;within&quot;:\r\n\r\n    (2..5).exclude?(7)\r\n&gt;true",
        "body": "<p>Not a direct answer to the question, but if you want the opposite to \"within\":<\/p>\n\n<pre><code>(2..5).exclude?(7)\n<\/code><\/pre>\n\n<blockquote>\n  <p>true<\/p>\n<\/blockquote>\n",
        "last_edit_date": null,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 8503347,
            "reputation": 141,
            "user_id": 6375692,
            "user_type": "registered",
            "accept_rate": 0,
            "profile_image": "https:\/\/lh3.googleusercontent.com\/-khfPMhQeJa0\/AAAAAAAAAAI\/AAAAAAAADcU\/8kPPg7lwkXg\/photo.jpg?sz=256",
            "display_name": "Amarpreet Jethra",
            "link": "https:\/\/stackoverflow.com\/users\/6375692\/amarpreet-jethra"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1489474164,
        "creation_date": 1487143922,
        "answer_id": 42243150,
        "question_id": 3585,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Just go to rails console and type:\r\n\r\n    rails new YOURAPPNAME -d mysql",
        "body": "<p>Just go to rails console and type:<\/p>\n\n<pre><code>rails new YOURAPPNAME -d mysql\n<\/code><\/pre>\n",
        "last_edit_date": 1489474164.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1029411,
            "reputation": 5890,
            "user_id": 1038034,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/P1rwn.jpg?s=256&g=1",
            "display_name": "Matt",
            "link": "https:\/\/stackoverflow.com\/users\/1038034\/matt"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1623678666,
        "creation_date": 1488246091,
        "answer_id": 42498710,
        "question_id": 10313181,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Consider creating a rake task. \r\n\r\nFor code that I need to create records or support migrations, for example, I often create a rake task like that from [this answer](https:\/\/stackoverflow.com\/a\/42498691\/1038034). For example:  \r\n\r\n\r\nIn `lib\/tasks\/example.rake`:  \r\n\r\n    namespace :example do\r\n      desc &quot;Sample description you&#39;d see if you ran: &#39;rake --tasks&#39; in the terminal&quot;\r\n      task create_user: :environment do\r\n        User.create! first_name: &quot;Foo&quot;, last_name: &quot;Bar&quot;\r\n      end\r\n    end\r\n\r\nAnd then in the terminal run:  \r\n\r\n    rake example:create_user",
        "body": "<p>Consider creating a rake task.<\/p>\n<p>For code that I need to create records or support migrations, for example, I often create a rake task like that from <a href=\"https:\/\/stackoverflow.com\/a\/42498691\/1038034\">this answer<\/a>. For example:<\/p>\n<p>In <code>lib\/tasks\/example.rake<\/code>:<\/p>\n<pre><code>namespace :example do\n  desc &quot;Sample description you'd see if you ran: 'rake --tasks' in the terminal&quot;\n  task create_user: :environment do\n    User.create! first_name: &quot;Foo&quot;, last_name: &quot;Bar&quot;\n  end\nend\n<\/code><\/pre>\n<p>And then in the terminal run:<\/p>\n<pre><code>rake example:create_user\n<\/code><\/pre>\n",
        "last_edit_date": 1623678666.0,
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 120990,
            "reputation": 9962,
            "user_id": 313756,
            "user_type": "registered",
            "accept_rate": 42,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/5984cce01b50eb0b544f79fd57433779?s=256&d=identicon&r=PG",
            "display_name": "lindes",
            "link": "https:\/\/stackoverflow.com\/users\/313756\/lindes"
        },
        "is_accepted": false,
        "score": 6,
        "last_activity_date": 1512318511,
        "creation_date": 1512265657,
        "answer_id": 47614488,
        "question_id": 39567,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "# Summary &amp; TL;DR:\r\n\r\nThis answer hopes to be a comprehensive wrap-up of information from other answers.\r\n\r\nThe very short version, given the data from the question plus a couple extras:\r\n\r\n    flat_array   = [  apple, 1,   banana, 2  ] # count=4\r\n    nested_array = [ [apple, 1], [banana, 2] ] # count=2 of count=2 k,v arrays\r\n    incomplete_f = [  apple, 1,   banana     ] # count=3 - missing last value\r\n    incomplete_n = [ [apple, 1], [banana   ] ] # count=2 of either k or k,v arrays\r\n\r\n\r\n    # there&#39;s one option for flat_array:\r\n    h1  = Hash[*flat_array]                     # =&gt; {apple=&gt;1, banana=&gt;2}\r\n\r\n    # two options for nested_array:\r\n    h2a = nested_array.to_h # since ruby 2.1.0    =&gt; {apple=&gt;1, banana=&gt;2}\r\n    h2b = Hash[nested_array]                    # =&gt; {apple=&gt;1, banana=&gt;2}\r\n\r\n    # ok if *only* the last value is missing:\r\n    h3  = Hash[incomplete_f.each_slice(2).to_a] # =&gt; {apple=&gt;1, banana=&gt;nil}\r\n    # always ok for k without v in nested array:\r\n    h4  = Hash[incomplete_n] # or .to_h           =&gt; {apple=&gt;1, banana=&gt;nil}\r\n\r\n    # as one might expect:\r\n    h1 == h2a # =&gt; true\r\n    h1 == h2b # =&gt; true\r\n    h1 == h3  # =&gt; false\r\n    h3 == h4  # =&gt; true\r\n\r\nDiscussion and details follow.\r\n\r\n---\r\n\r\n# Setup: variables\r\n\r\nIn order to show the data we&#39;ll be using up front, I&#39;ll create some variables to represent various possibilities for the data. They fit into the following categories:\r\n\r\n### Based on what was directly in the question, as `a1` and `a2`:\r\n\r\n&lt;i&gt;(Note: I presume that `apple` and `banana` were meant to represent variables. As others have done, I&#39;ll be using strings from here on so that input and results can match.)&lt;\/i&gt;\r\n\r\n&lt;!-- language-all: lang-ruby --&gt;\r\n\r\n    a1 = [  &#39;apple&#39;, 1 ,  &#39;banana&#39;, 2  ] # flat input\r\n    a2 = [ [&#39;apple&#39;, 1], [&#39;banana&#39;, 2] ] # key\/value paired input\r\n\r\n### Multi-value keys and\/or values, as `a3`:\r\n\r\nIn some other answers, another possibility was presented (which I expand on here) \u2013 keys and\/or values may be arrays on their own:\r\n\r\n    a3 = [ [ &#39;apple&#39;,                   1   ],\r\n           [ &#39;banana&#39;,                  2   ],\r\n           [ [&#39;orange&#39;,&#39;seedless&#39;],     3   ],\r\n           [ &#39;pear&#39;,                 [4, 5] ],\r\n         ]\r\n\r\n### Unbalanced array, as `a4`:\r\n\r\nFor good measure, I thought I&#39;d add one for a case where we might have an incomplete input:\r\n\r\n    a4 = [ [ &#39;apple&#39;,                   1],\r\n           [ &#39;banana&#39;,                  2],\r\n           [ [&#39;orange&#39;,&#39;seedless&#39;],     3],\r\n           [ &#39;durian&#39;                    ], # a spiky fruit pricks us: no value!\r\n         ]\r\n\r\n---\r\n\r\n# Now, to work:\r\n\r\n## Starting with an initially-flat array, `a1`:\r\n\r\nSome have suggested using [`#to_h`][1] (which showed up in Ruby 2.1.0, and can be [backported][2] to earlier versions). For an initially-flat array, this doesn&#39;t work:\r\n\r\n    a1.to_h   # =&gt; TypeError: wrong element type String at 0 (expected array)\r\n\r\nUsing [`Hash::[]`][3] combined with the [splat operator][4] does:\r\n\r\n    Hash[*a1] # =&gt; {&quot;apple&quot;=&gt;1, &quot;banana&quot;=&gt;2}\r\n\r\nSo that&#39;s the solution for the simple case represented by `a1`.\r\n\r\n## With an array of key\/value pair arrays, `a2`:\r\n\r\nWith an array of `[key,value]` type arrays, there are two ways to go.\r\n\r\nFirst, `Hash::[]` still works (as it did with `*a1`):\r\n\r\n    Hash[a2] # =&gt; {&quot;apple&quot;=&gt;1, &quot;banana&quot;=&gt;2}\r\n\r\nAnd then also `#to_h` works now:\r\n\r\n    a2.to_h  # =&gt; {&quot;apple&quot;=&gt;1, &quot;banana&quot;=&gt;2}\r\n\r\nSo, two easy answers for the simple nested array case.\r\n\r\n### This remains true even with sub-arrays as keys or values, as with `a3`:\r\n\r\n    Hash[a3] # =&gt; {&quot;apple&quot;=&gt;1, &quot;banana&quot;=&gt;2, [&quot;orange&quot;, &quot;seedless&quot;]=&gt;3, &quot;pear&quot;=&gt;[4, 5]} \r\n    a3.to_h  # =&gt; {&quot;apple&quot;=&gt;1, &quot;banana&quot;=&gt;2, [&quot;orange&quot;, &quot;seedless&quot;]=&gt;3, &quot;pear&quot;=&gt;[4, 5]}\r\n\r\n## But durians have spikes (anomalous structures give problems):\r\n\r\nIf we&#39;ve gotten input data that&#39;s not balanced, we&#39;ll run into problems with `#to_h`:\r\n\r\n    a4.to_h  # =&gt; ArgumentError: wrong array length at 3 (expected 2, was 1)\r\n\r\nBut `Hash::[]` still works, just setting `nil` as the value for `durian` (and any other array element in a4 that&#39;s just a 1-value array):\r\n\r\n    Hash[a4] # =&gt; {&quot;apple&quot;=&gt;1, &quot;banana&quot;=&gt;2, [&quot;orange&quot;, &quot;seedless&quot;]=&gt;3, &quot;durian&quot;=&gt;nil}\r\n\r\n### Flattening - using new variables `a5` and `a6`\r\n\r\nA few other answers mentioned [`flatten`][5], with or without a `1` argument, so let&#39;s create some new variables:\r\n\r\n    a5 = a4.flatten\r\n    # =&gt; [&quot;apple&quot;, 1, &quot;banana&quot;, 2,  &quot;orange&quot;, &quot;seedless&quot; , 3, &quot;durian&quot;] \r\n    a6 = a4.flatten(1)\r\n    # =&gt; [&quot;apple&quot;, 1, &quot;banana&quot;, 2, [&quot;orange&quot;, &quot;seedless&quot;], 3, &quot;durian&quot;] \r\n\r\nI chose to use `a4` as the base data because of the balance problem we had, which showed up with `a4.to_h`.  I figure calling `flatten` might be one approach someone might use to try to solve that, which might look like the following.\r\n\r\n### `flatten` without arguments (`a5`):\r\n\r\n    Hash[*a5]       # =&gt; {&quot;apple&quot;=&gt;1, &quot;banana&quot;=&gt;2, &quot;orange&quot;=&gt;&quot;seedless&quot;, 3=&gt;&quot;durian&quot;}\r\n    # (This is the same as calling `Hash[*a4.flatten]`.)\r\n\r\nAt a na&#239;ve glance, this appears to work \u2013 but it got us off on the wrong foot with the seedless oranges, thus also making `3` a *key* and `durian` a *value*.\r\n\r\nAnd this, as with `a1`, just doesn&#39;t work:\r\n\r\n    a5.to_h # =&gt; TypeError: wrong element type String at 0 (expected array)\r\n\r\nSo `a4.flatten` isn&#39;t useful to us, we&#39;d just want to use `Hash[a4]`\r\n\r\n### The `flatten(1)` case (`a6`):\r\n\r\nBut what about only partially flattening?  It&#39;s worth noting that calling `Hash::[]` using `splat` on the partially-flattened array (`a6`) is *not* the same as calling `Hash[a4]`:\r\n\r\n    Hash[*a6] # =&gt; ArgumentError: odd number of arguments for Hash\r\n\r\n### Pre-flattened array, still nested (alternate way of getting `a6`):\r\n\r\nBut what if this was how we&#39;d gotten the array in the first place?\r\n (That is, comparably to `a1`, it was our input data - just this time some of the data can be arrays or other objects.)  We&#39;ve seen that `Hash[*a6]` doesn&#39;t work, but what if we still wanted to get the behavior where the *last element* (important! see below) acted as a key for a `nil` value?\r\n\r\nIn such a situation, there&#39;s still a way to do this, using [`Enumerable#each_slice`][6] to get ourselves back to key\/value *pairs* as elements in the outer array:\r\n\r\n    a7 = a6.each_slice(2).to_a\r\n    # =&gt; [[&quot;apple&quot;, 1], [&quot;banana&quot;, 2], [[&quot;orange&quot;, &quot;seedless&quot;], 3], [&quot;durian&quot;]] \r\n\r\nNote that this ends up getting us a new array that isn&#39;t &quot;[identical][7]&quot; to `a4`, but does have the [same values][8]:\r\n\r\n    a4.equal?(a7) # =&gt; false\r\n    a4 == a7      # =&gt; true\r\n\r\nAnd thus we can again use `Hash::[]`:\r\n\r\n    Hash[a7] # =&gt; {&quot;apple&quot;=&gt;1, &quot;banana&quot;=&gt;2, [&quot;orange&quot;, &quot;seedless&quot;]=&gt;3, &quot;durian&quot;=&gt;nil}\r\n    # or Hash[a6.each_slice(2).to_a]\r\n\r\n### But there&#39;s a problem!\r\n\r\nIt&#39;s important to note that the `each_slice(2)` solution only gets things back to sanity if the ***last*** key was the one missing a value.  If we later added an extra key\/value pair:\r\n\r\n    a4_plus = a4.dup # just to have a new-but-related variable name\r\n    a4_plus.push([&#39;lychee&#39;, 4])\r\n    # =&gt; [[&quot;apple&quot;,                1],\r\n    #     [&quot;banana&quot;,               2],\r\n    #     [[&quot;orange&quot;, &quot;seedless&quot;], 3], # multi-value key\r\n    #     [&quot;durian&quot;],              # missing value\r\n    #     [&quot;lychee&quot;, 4]]           # new well-formed item\r\n\r\n    a6_plus = a4_plus.flatten(1)\r\n    # =&gt; [&quot;apple&quot;, 1, &quot;banana&quot;, 2, [&quot;orange&quot;, &quot;seedless&quot;], 3, &quot;durian&quot;, &quot;lychee&quot;, 4]\r\n\r\n    a7_plus = a6_plus.each_slice(2).to_a\r\n    # =&gt; [[&quot;apple&quot;,                1],\r\n    #     [&quot;banana&quot;,               2],\r\n    #     [[&quot;orange&quot;, &quot;seedless&quot;], 3], # so far so good\r\n    #     [&quot;durian&quot;,               &quot;lychee&quot;], # oops! key became value!\r\n    #     [4]]                     # and we still have a key without a value\r\n\r\n    a4_plus == a7_plus # =&gt; false, unlike a4 == a7\r\n\r\nAnd the two hashes we&#39;d get from this are different in important ways:\r\n\r\n    ap Hash[a4_plus] # prints:\r\n    {\r\n                         &quot;apple&quot; =&gt; 1,\r\n                        &quot;banana&quot; =&gt; 2,\r\n        [ &quot;orange&quot;, &quot;seedless&quot; ] =&gt; 3,\r\n                        &quot;durian&quot; =&gt; nil, # correct\r\n                        &quot;lychee&quot; =&gt; 4    # correct\r\n    }\r\n\r\n    ap Hash[a7_plus] # prints:\r\n    {\r\n                         &quot;apple&quot; =&gt; 1,\r\n                        &quot;banana&quot; =&gt; 2,\r\n        [ &quot;orange&quot;, &quot;seedless&quot; ] =&gt; 3,\r\n                        &quot;durian&quot; =&gt; &quot;lychee&quot;, # incorrect\r\n                               4 =&gt; nil       # incorrect\r\n    }\r\n\r\n &lt;i&gt;(Note: I&#39;m using [`awesome_print`][9]&#39;s `ap` just to make it easier to show the structure here; there&#39;s no conceptual requirement for this.)&lt;\/i&gt;\r\n\r\nSo the `each_slice` solution to an unbalanced flat input only works if the unbalanced bit is at the very end.\r\n\r\n---\r\n# Take-aways:\r\n\r\n1. Whenever possible, set up input to these things as `[key, value]` pairs (a sub-array for each item in the outer array).\r\n2. When you can indeed do that, either `#to_h` or `Hash::[]` will both work.\r\n3. If you&#39;re unable to, `Hash::[]` combined with the splat (`*`) will work, *so long as inputs are balanced*.\r\n4. With an *unbalanced* and *flat* array as input, the only way this will work at all reasonably is if the ***last*** `value` item is the only one that&#39;s missing.\r\n\r\n---\r\n&lt;i&gt;Side-note: I&#39;m posting this answer because I feel there&#39;s value to be added \u2013 some of the existing answers have incorrect information, and none (that I read) gave as complete an answer as I&#39;m endeavoring to do here.  I hope that it&#39;s helpful.  I nevertheless give thanks to those who came before me, several of whom provided inspiration for portions of this answer.&lt;\/i&gt;\r\n\r\n\r\n  [1]: https:\/\/ruby-doc.org\/core\/Array.html#method-i-to_h\r\n  [2]: https:\/\/github.com\/marcandre\/backports\r\n  [3]: https:\/\/ruby-doc.org\/core\/Hash.html#method-c-5B-5D\r\n  [4]: https:\/\/ruby-doc.org\/core\/doc\/syntax\/calling_methods_rdoc.html#label-Array+to+Arguments+Conversion\r\n  [5]: https:\/\/ruby-doc.org\/core\/Array.html#method-i-flatten\r\n  [6]: https:\/\/ruby-doc.org\/core\/Enumerable.html#method-i-each_slice\r\n  [7]: https:\/\/ruby-doc.org\/core\/BasicObject.html#method-i-equal-3F\r\n  [8]: https:\/\/ruby-doc.org\/core\/Array.html#method-i-3D-3D\r\n  [9]: https:\/\/github.com\/awesome-print\/awesome_print",
        "body": "<h1>Summary &amp; TL;DR:<\/h1>\n\n<p>This answer hopes to be a comprehensive wrap-up of information from other answers.<\/p>\n\n<p>The very short version, given the data from the question plus a couple extras:<\/p>\n\n<pre><code>flat_array   = [  apple, 1,   banana, 2  ] # count=4\nnested_array = [ [apple, 1], [banana, 2] ] # count=2 of count=2 k,v arrays\nincomplete_f = [  apple, 1,   banana     ] # count=3 - missing last value\nincomplete_n = [ [apple, 1], [banana   ] ] # count=2 of either k or k,v arrays\n\n\n# there's one option for flat_array:\nh1  = Hash[*flat_array]                     # =&gt; {apple=&gt;1, banana=&gt;2}\n\n# two options for nested_array:\nh2a = nested_array.to_h # since ruby 2.1.0    =&gt; {apple=&gt;1, banana=&gt;2}\nh2b = Hash[nested_array]                    # =&gt; {apple=&gt;1, banana=&gt;2}\n\n# ok if *only* the last value is missing:\nh3  = Hash[incomplete_f.each_slice(2).to_a] # =&gt; {apple=&gt;1, banana=&gt;nil}\n# always ok for k without v in nested array:\nh4  = Hash[incomplete_n] # or .to_h           =&gt; {apple=&gt;1, banana=&gt;nil}\n\n# as one might expect:\nh1 == h2a # =&gt; true\nh1 == h2b # =&gt; true\nh1 == h3  # =&gt; false\nh3 == h4  # =&gt; true\n<\/code><\/pre>\n\n<p>Discussion and details follow.<\/p>\n\n<hr>\n\n<h1>Setup: variables<\/h1>\n\n<p>In order to show the data we'll be using up front, I'll create some variables to represent various possibilities for the data. They fit into the following categories:<\/p>\n\n<h3>Based on what was directly in the question, as <code>a1<\/code> and <code>a2<\/code>:<\/h3>\n\n<p><i>(Note: I presume that <code>apple<\/code> and <code>banana<\/code> were meant to represent variables. As others have done, I'll be using strings from here on so that input and results can match.)<\/i><\/p>\n\n\n\n<pre class=\"lang-ruby prettyprint-override\"><code>a1 = [  'apple', 1 ,  'banana', 2  ] # flat input\na2 = [ ['apple', 1], ['banana', 2] ] # key\/value paired input\n<\/code><\/pre>\n\n<h3>Multi-value keys and\/or values, as <code>a3<\/code>:<\/h3>\n\n<p>In some other answers, another possibility was presented (which I expand on here) \u2013 keys and\/or values may be arrays on their own:<\/p>\n\n<pre class=\"lang-ruby prettyprint-override\"><code>a3 = [ [ 'apple',                   1   ],\n       [ 'banana',                  2   ],\n       [ ['orange','seedless'],     3   ],\n       [ 'pear',                 [4, 5] ],\n     ]\n<\/code><\/pre>\n\n<h3>Unbalanced array, as <code>a4<\/code>:<\/h3>\n\n<p>For good measure, I thought I'd add one for a case where we might have an incomplete input:<\/p>\n\n<pre class=\"lang-ruby prettyprint-override\"><code>a4 = [ [ 'apple',                   1],\n       [ 'banana',                  2],\n       [ ['orange','seedless'],     3],\n       [ 'durian'                    ], # a spiky fruit pricks us: no value!\n     ]\n<\/code><\/pre>\n\n<hr>\n\n<h1>Now, to work:<\/h1>\n\n<h2>Starting with an initially-flat array, <code>a1<\/code>:<\/h2>\n\n<p>Some have suggested using <a href=\"https:\/\/ruby-doc.org\/core\/Array.html#method-i-to_h\" rel=\"noreferrer\"><code>#to_h<\/code><\/a> (which showed up in Ruby 2.1.0, and can be <a href=\"https:\/\/github.com\/marcandre\/backports\" rel=\"noreferrer\">backported<\/a> to earlier versions). For an initially-flat array, this doesn't work:<\/p>\n\n<pre class=\"lang-ruby prettyprint-override\"><code>a1.to_h   # =&gt; TypeError: wrong element type String at 0 (expected array)\n<\/code><\/pre>\n\n<p>Using <a href=\"https:\/\/ruby-doc.org\/core\/Hash.html#method-c-5B-5D\" rel=\"noreferrer\"><code>Hash::[]<\/code><\/a> combined with the <a href=\"https:\/\/ruby-doc.org\/core\/doc\/syntax\/calling_methods_rdoc.html#label-Array+to+Arguments+Conversion\" rel=\"noreferrer\">splat operator<\/a> does:<\/p>\n\n<pre class=\"lang-ruby prettyprint-override\"><code>Hash[*a1] # =&gt; {\"apple\"=&gt;1, \"banana\"=&gt;2}\n<\/code><\/pre>\n\n<p>So that's the solution for the simple case represented by <code>a1<\/code>.<\/p>\n\n<h2>With an array of key\/value pair arrays, <code>a2<\/code>:<\/h2>\n\n<p>With an array of <code>[key,value]<\/code> type arrays, there are two ways to go.<\/p>\n\n<p>First, <code>Hash::[]<\/code> still works (as it did with <code>*a1<\/code>):<\/p>\n\n<pre class=\"lang-ruby prettyprint-override\"><code>Hash[a2] # =&gt; {\"apple\"=&gt;1, \"banana\"=&gt;2}\n<\/code><\/pre>\n\n<p>And then also <code>#to_h<\/code> works now:<\/p>\n\n<pre class=\"lang-ruby prettyprint-override\"><code>a2.to_h  # =&gt; {\"apple\"=&gt;1, \"banana\"=&gt;2}\n<\/code><\/pre>\n\n<p>So, two easy answers for the simple nested array case.<\/p>\n\n<h3>This remains true even with sub-arrays as keys or values, as with <code>a3<\/code>:<\/h3>\n\n<pre class=\"lang-ruby prettyprint-override\"><code>Hash[a3] # =&gt; {\"apple\"=&gt;1, \"banana\"=&gt;2, [\"orange\", \"seedless\"]=&gt;3, \"pear\"=&gt;[4, 5]} \na3.to_h  # =&gt; {\"apple\"=&gt;1, \"banana\"=&gt;2, [\"orange\", \"seedless\"]=&gt;3, \"pear\"=&gt;[4, 5]}\n<\/code><\/pre>\n\n<h2>But durians have spikes (anomalous structures give problems):<\/h2>\n\n<p>If we've gotten input data that's not balanced, we'll run into problems with <code>#to_h<\/code>:<\/p>\n\n<pre class=\"lang-ruby prettyprint-override\"><code>a4.to_h  # =&gt; ArgumentError: wrong array length at 3 (expected 2, was 1)\n<\/code><\/pre>\n\n<p>But <code>Hash::[]<\/code> still works, just setting <code>nil<\/code> as the value for <code>durian<\/code> (and any other array element in a4 that's just a 1-value array):<\/p>\n\n<pre class=\"lang-ruby prettyprint-override\"><code>Hash[a4] # =&gt; {\"apple\"=&gt;1, \"banana\"=&gt;2, [\"orange\", \"seedless\"]=&gt;3, \"durian\"=&gt;nil}\n<\/code><\/pre>\n\n<h3>Flattening - using new variables <code>a5<\/code> and <code>a6<\/code><\/h3>\n\n<p>A few other answers mentioned <a href=\"https:\/\/ruby-doc.org\/core\/Array.html#method-i-flatten\" rel=\"noreferrer\"><code>flatten<\/code><\/a>, with or without a <code>1<\/code> argument, so let's create some new variables:<\/p>\n\n<pre class=\"lang-ruby prettyprint-override\"><code>a5 = a4.flatten\n# =&gt; [\"apple\", 1, \"banana\", 2,  \"orange\", \"seedless\" , 3, \"durian\"] \na6 = a4.flatten(1)\n# =&gt; [\"apple\", 1, \"banana\", 2, [\"orange\", \"seedless\"], 3, \"durian\"] \n<\/code><\/pre>\n\n<p>I chose to use <code>a4<\/code> as the base data because of the balance problem we had, which showed up with <code>a4.to_h<\/code>.  I figure calling <code>flatten<\/code> might be one approach someone might use to try to solve that, which might look like the following.<\/p>\n\n<h3><code>flatten<\/code> without arguments (<code>a5<\/code>):<\/h3>\n\n<pre class=\"lang-ruby prettyprint-override\"><code>Hash[*a5]       # =&gt; {\"apple\"=&gt;1, \"banana\"=&gt;2, \"orange\"=&gt;\"seedless\", 3=&gt;\"durian\"}\n# (This is the same as calling `Hash[*a4.flatten]`.)\n<\/code><\/pre>\n\n<p>At a na\u00efve glance, this appears to work \u2013 but it got us off on the wrong foot with the seedless oranges, thus also making <code>3<\/code> a <em>key<\/em> and <code>durian<\/code> a <em>value<\/em>.<\/p>\n\n<p>And this, as with <code>a1<\/code>, just doesn't work:<\/p>\n\n<pre class=\"lang-ruby prettyprint-override\"><code>a5.to_h # =&gt; TypeError: wrong element type String at 0 (expected array)\n<\/code><\/pre>\n\n<p>So <code>a4.flatten<\/code> isn't useful to us, we'd just want to use <code>Hash[a4]<\/code><\/p>\n\n<h3>The <code>flatten(1)<\/code> case (<code>a6<\/code>):<\/h3>\n\n<p>But what about only partially flattening?  It's worth noting that calling <code>Hash::[]<\/code> using <code>splat<\/code> on the partially-flattened array (<code>a6<\/code>) is <em>not<\/em> the same as calling <code>Hash[a4]<\/code>:<\/p>\n\n<pre class=\"lang-ruby prettyprint-override\"><code>Hash[*a6] # =&gt; ArgumentError: odd number of arguments for Hash\n<\/code><\/pre>\n\n<h3>Pre-flattened array, still nested (alternate way of getting <code>a6<\/code>):<\/h3>\n\n<p>But what if this was how we'd gotten the array in the first place?\n (That is, comparably to <code>a1<\/code>, it was our input data - just this time some of the data can be arrays or other objects.)  We've seen that <code>Hash[*a6]<\/code> doesn't work, but what if we still wanted to get the behavior where the <em>last element<\/em> (important! see below) acted as a key for a <code>nil<\/code> value?<\/p>\n\n<p>In such a situation, there's still a way to do this, using <a href=\"https:\/\/ruby-doc.org\/core\/Enumerable.html#method-i-each_slice\" rel=\"noreferrer\"><code>Enumerable#each_slice<\/code><\/a> to get ourselves back to key\/value <em>pairs<\/em> as elements in the outer array:<\/p>\n\n<pre class=\"lang-ruby prettyprint-override\"><code>a7 = a6.each_slice(2).to_a\n# =&gt; [[\"apple\", 1], [\"banana\", 2], [[\"orange\", \"seedless\"], 3], [\"durian\"]] \n<\/code><\/pre>\n\n<p>Note that this ends up getting us a new array that isn't \"<a href=\"https:\/\/ruby-doc.org\/core\/BasicObject.html#method-i-equal-3F\" rel=\"noreferrer\">identical<\/a>\" to <code>a4<\/code>, but does have the <a href=\"https:\/\/ruby-doc.org\/core\/Array.html#method-i-3D-3D\" rel=\"noreferrer\">same values<\/a>:<\/p>\n\n<pre class=\"lang-ruby prettyprint-override\"><code>a4.equal?(a7) # =&gt; false\na4 == a7      # =&gt; true\n<\/code><\/pre>\n\n<p>And thus we can again use <code>Hash::[]<\/code>:<\/p>\n\n<pre class=\"lang-ruby prettyprint-override\"><code>Hash[a7] # =&gt; {\"apple\"=&gt;1, \"banana\"=&gt;2, [\"orange\", \"seedless\"]=&gt;3, \"durian\"=&gt;nil}\n# or Hash[a6.each_slice(2).to_a]\n<\/code><\/pre>\n\n<h3>But there's a problem!<\/h3>\n\n<p>It's important to note that the <code>each_slice(2)<\/code> solution only gets things back to sanity if the <strong><em>last<\/em><\/strong> key was the one missing a value.  If we later added an extra key\/value pair:<\/p>\n\n<pre class=\"lang-ruby prettyprint-override\"><code>a4_plus = a4.dup # just to have a new-but-related variable name\na4_plus.push(['lychee', 4])\n# =&gt; [[\"apple\",                1],\n#     [\"banana\",               2],\n#     [[\"orange\", \"seedless\"], 3], # multi-value key\n#     [\"durian\"],              # missing value\n#     [\"lychee\", 4]]           # new well-formed item\n\na6_plus = a4_plus.flatten(1)\n# =&gt; [\"apple\", 1, \"banana\", 2, [\"orange\", \"seedless\"], 3, \"durian\", \"lychee\", 4]\n\na7_plus = a6_plus.each_slice(2).to_a\n# =&gt; [[\"apple\",                1],\n#     [\"banana\",               2],\n#     [[\"orange\", \"seedless\"], 3], # so far so good\n#     [\"durian\",               \"lychee\"], # oops! key became value!\n#     [4]]                     # and we still have a key without a value\n\na4_plus == a7_plus # =&gt; false, unlike a4 == a7\n<\/code><\/pre>\n\n<p>And the two hashes we'd get from this are different in important ways:<\/p>\n\n<pre class=\"lang-ruby prettyprint-override\"><code>ap Hash[a4_plus] # prints:\n{\n                     \"apple\" =&gt; 1,\n                    \"banana\" =&gt; 2,\n    [ \"orange\", \"seedless\" ] =&gt; 3,\n                    \"durian\" =&gt; nil, # correct\n                    \"lychee\" =&gt; 4    # correct\n}\n\nap Hash[a7_plus] # prints:\n{\n                     \"apple\" =&gt; 1,\n                    \"banana\" =&gt; 2,\n    [ \"orange\", \"seedless\" ] =&gt; 3,\n                    \"durian\" =&gt; \"lychee\", # incorrect\n                           4 =&gt; nil       # incorrect\n}\n<\/code><\/pre>\n\n<p><i>(Note: I'm using <a href=\"https:\/\/github.com\/awesome-print\/awesome_print\" rel=\"noreferrer\"><code>awesome_print<\/code><\/a>'s <code>ap<\/code> just to make it easier to show the structure here; there's no conceptual requirement for this.)<\/i><\/p>\n\n<p>So the <code>each_slice<\/code> solution to an unbalanced flat input only works if the unbalanced bit is at the very end.<\/p>\n\n<hr>\n\n<h1>Take-aways:<\/h1>\n\n<ol>\n<li>Whenever possible, set up input to these things as <code>[key, value]<\/code> pairs (a sub-array for each item in the outer array).<\/li>\n<li>When you can indeed do that, either <code>#to_h<\/code> or <code>Hash::[]<\/code> will both work.<\/li>\n<li>If you're unable to, <code>Hash::[]<\/code> combined with the splat (<code>*<\/code>) will work, <em>so long as inputs are balanced<\/em>.<\/li>\n<li>With an <em>unbalanced<\/em> and <em>flat<\/em> array as input, the only way this will work at all reasonably is if the <strong><em>last<\/em><\/strong> <code>value<\/code> item is the only one that's missing.<\/li>\n<\/ol>\n\n<hr>\n\n<p><i>Side-note: I'm posting this answer because I feel there's value to be added \u2013 some of the existing answers have incorrect information, and none (that I read) gave as complete an answer as I'm endeavoring to do here.  I hope that it's helpful.  I nevertheless give thanks to those who came before me, several of whom provided inspiration for portions of this answer.<\/i><\/p>\n",
        "last_edit_date": 1512318511.0,
        "community_owned_date": null
    }
]

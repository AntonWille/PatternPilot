[{"owner":{"account_id":8372,"reputation":225392,"user_id":15055,"user_type":"registered","accept_rate":80,"profile_image":"https:\/\/www.gravatar.com\/avatar\/7f71287b47b7189d11fe6d3fbc7ed2fe?s=256&d=identicon&r=PG","display_name":"Claudiu","link":"https:\/\/stackoverflow.com\/users\/15055\/claudiu"},"is_accepted":true,"score":987,"last_activity_date":1657499436,"last_edit_date":1657499436.0,"creation_date":1298400561,"answer_id":5082482,"question_id":5082452,"content_license":"CC BY-SA 4.0","body_markdown":"To answer your first question... `.format` just seems more sophisticated in many ways. An annoying thing about `%` is also how it can either take a variable or a tuple. You&#39;d think the following would always work:\r\n\r\n    &quot;Hello %s&quot; % name\r\n\r\nyet, if `name` happens to be `(1, 2, 3)`, it will throw a `TypeError`. To guarantee that it always prints, you&#39;d need to do\r\n\r\n    &quot;Hello %s&quot; % (name,)   # supply the single argument as a single-item tuple\r\n\r\nwhich is just ugly. `.format` doesn&#39;t have those issues. Also in the second example you gave, the `.format` example is much cleaner looking.\r\n\r\nOnly use it for backwards compatibility with Python 2.5.\r\n\r\n---\r\n\r\nTo answer your second question, string formatting happens at the same time as any other operation - when the string formatting expression is evaluated. And Python, not being a lazy language, evaluates expressions before calling functions, so the expression `log.debug(&quot;some debug info: %s&quot; % some_info)` will first evaluate the string to, e.g. `&quot;some debug info: roflcopters are active&quot;`, then that string will be passed to `log.debug()`. ","body":"<p>To answer your first question... <code>.format<\/code> just seems more sophisticated in many ways. An annoying thing about <code>%<\/code> is also how it can either take a variable or a tuple. You'd think the following would always work:<\/p>\n<pre><code>&quot;Hello %s&quot; % name\n<\/code><\/pre>\n<p>yet, if <code>name<\/code> happens to be <code>(1, 2, 3)<\/code>, it will throw a <code>TypeError<\/code>. To guarantee that it always prints, you'd need to do<\/p>\n<pre><code>&quot;Hello %s&quot; % (name,)   # supply the single argument as a single-item tuple\n<\/code><\/pre>\n<p>which is just ugly. <code>.format<\/code> doesn't have those issues. Also in the second example you gave, the <code>.format<\/code> example is much cleaner looking.<\/p>\n<p>Only use it for backwards compatibility with Python 2.5.<\/p>\n<hr \/>\n<p>To answer your second question, string formatting happens at the same time as any other operation - when the string formatting expression is evaluated. And Python, not being a lazy language, evaluates expressions before calling functions, so the expression <code>log.debug(&quot;some debug info: %s&quot; % some_info)<\/code> will first evaluate the string to, e.g. <code>&quot;some debug info: roflcopters are active&quot;<\/code>, then that string will be passed to <code>log.debug()<\/code>.<\/p>\n","community_owned_date":null},{"owner":{"account_id":1603,"reputation":193645,"user_id":2147,"user_type":"registered","accept_rate":85,"profile_image":"https:\/\/www.gravatar.com\/avatar\/b8e26b9942e7193a4fe32c407aacfef5?s=256&d=identicon&r=PG","display_name":"Jason Baker","link":"https:\/\/stackoverflow.com\/users\/2147\/jason-baker"},"is_accepted":true,"score":972,"last_activity_date":1530709957,"last_edit_date":1530709957.0,"creation_date":1234559717,"answer_id":547714,"question_id":533631,"content_license":"CC BY-SA 4.0","body_markdown":"A mixin is a special kind of multiple inheritance.  There are two main situations where mixins are used:\r\n\r\n 1. You want to provide a lot of optional features for a class.\r\n 2. You want to use one particular feature in a lot of different classes.\r\n\r\nFor an example of number one, consider [werkzeug&#39;s request and response system][1].  I can make a plain old request object by saying:\r\n\r\n    from werkzeug import BaseRequest\r\n    \r\n    class Request(BaseRequest):\r\n        pass\r\n\r\nIf I want to add accept header support, I would make that\r\n\r\n    from werkzeug import BaseRequest, AcceptMixin\r\n    \r\n    class Request(AcceptMixin, BaseRequest):\r\n        pass\r\n\r\nIf I wanted to make a request object that supports accept headers, etags, authentication, and user agent support, I could do this:\r\n\r\n    from werkzeug import BaseRequest, AcceptMixin, ETagRequestMixin, UserAgentMixin, AuthenticationMixin\r\n    \r\n    class Request(AcceptMixin, ETagRequestMixin, UserAgentMixin, AuthenticationMixin, BaseRequest):\r\n        pass\r\n\r\nThe difference is subtle, but in the above examples, the mixin classes weren&#39;t made to stand on their own.  In more traditional multiple inheritance, the `AuthenticationMixin` (for example) would probably be something more like `Authenticator`.  That is, the class would probably be designed to stand on its own.\r\n\r\n\r\n  [1]: http:\/\/werkzeug.pocoo.org\/docs\/wrappers\/","body":"<p>A mixin is a special kind of multiple inheritance.  There are two main situations where mixins are used:<\/p>\n\n<ol>\n<li>You want to provide a lot of optional features for a class.<\/li>\n<li>You want to use one particular feature in a lot of different classes.<\/li>\n<\/ol>\n\n<p>For an example of number one, consider <a href=\"http:\/\/werkzeug.pocoo.org\/docs\/wrappers\/\" rel=\"noreferrer\">werkzeug's request and response system<\/a>.  I can make a plain old request object by saying:<\/p>\n\n<pre><code>from werkzeug import BaseRequest\n\nclass Request(BaseRequest):\n    pass\n<\/code><\/pre>\n\n<p>If I want to add accept header support, I would make that<\/p>\n\n<pre><code>from werkzeug import BaseRequest, AcceptMixin\n\nclass Request(AcceptMixin, BaseRequest):\n    pass\n<\/code><\/pre>\n\n<p>If I wanted to make a request object that supports accept headers, etags, authentication, and user agent support, I could do this:<\/p>\n\n<pre><code>from werkzeug import BaseRequest, AcceptMixin, ETagRequestMixin, UserAgentMixin, AuthenticationMixin\n\nclass Request(AcceptMixin, ETagRequestMixin, UserAgentMixin, AuthenticationMixin, BaseRequest):\n    pass\n<\/code><\/pre>\n\n<p>The difference is subtle, but in the above examples, the mixin classes weren't made to stand on their own.  In more traditional multiple inheritance, the <code>AuthenticationMixin<\/code> (for example) would probably be something more like <code>Authenticator<\/code>.  That is, the class would probably be designed to stand on its own.<\/p>\n","community_owned_date":null},{"owner":{"account_id":53119,"reputation":43952,"user_id":158773,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/txDho.png?s=256&g=1","display_name":"rbp","link":"https:\/\/stackoverflow.com\/users\/158773\/rbp"},"is_accepted":true,"score":912,"last_activity_date":1630352985,"last_edit_date":1630352985.0,"creation_date":1279489972,"answer_id":3277407,"question_id":3277367,"content_license":"CC BY-SA 4.0","body_markdown":"This is detailed with a reasonable amount of detail by Guido himself in his blog post [Method Resolution Order][1] (including two earlier attempts).\r\n\r\nIn your example, `Third()` will call `First.__init__`. Python looks for each attribute in the class&#39;s parents as they are listed left to right. In this case, we are looking for `__init__`. So, if you define\r\n\r\n    class Third(First, Second):\r\n        ...\r\n\r\nPython will start by looking at `First`, and, if `First` doesn&#39;t have the attribute, then it will look at `Second`.\r\n\r\nThis situation becomes more complex when inheritance starts crossing paths (for example if `First` inherited from `Second`). Read the link above for more details, but, in a nutshell, Python will try to maintain the order in which each class appears on the inheritance list, starting with the child class itself.\r\n\r\nSo, for instance, if you had:\r\n\r\n    class First(object):\r\n        def __init__(self):\r\n            print &quot;first&quot;\r\n    \r\n    class Second(First):\r\n        def __init__(self):\r\n            print &quot;second&quot;\r\n    \r\n    class Third(First):\r\n        def __init__(self):\r\n            print &quot;third&quot;\r\n    \r\n    class Fourth(Second, Third):\r\n        def __init__(self):\r\n            super(Fourth, self).__init__()\r\n            print &quot;that&#39;s it&quot;\r\n\r\nthe MRO would be `[Fourth, Second, Third, First].`\r\n\r\nBy the way: if Python cannot find a coherent method resolution order, it&#39;ll raise an exception, instead of falling back to behavior which might surprise the user.\r\n\r\nExample of an ambiguous MRO:\r\n\r\n    class First(object):\r\n        def __init__(self):\r\n            print &quot;first&quot;\r\n            \r\n    class Second(First):\r\n        def __init__(self):\r\n            print &quot;second&quot;\r\n    \r\n    class Third(First, Second):\r\n        def __init__(self):\r\n            print &quot;third&quot;\r\n\r\nShould `Third`&#39;s MRO be `[First, Second]` or `[Second, First]`? There&#39;s no obvious expectation, and Python will raise an error:\r\n\r\n    TypeError: Error when calling the metaclass bases\r\n        Cannot create a consistent method resolution order (MRO) for bases Second, First\r\n\r\n \r\nWhy do the examples above lack `super()` calls? The point of the examples is to show how the MRO is constructed. They are **not** intended to print `&quot;first\\nsecond\\third&quot;` or whatever. You can \u2013 and should, of course, play around with the example, add `super()` calls, see what happens, and gain a deeper understanding of Python&#39;s inheritance model. But my goal here is to keep it simple and show how the MRO is built. And it is built as I explained:\r\n\r\n\r\n    &gt;&gt;&gt; Fourth.__mro__\r\n    (&lt;class &#39;__main__.Fourth&#39;&gt;,\r\n     &lt;class &#39;__main__.Second&#39;&gt;, &lt;class &#39;__main__.Third&#39;&gt;,\r\n     &lt;class &#39;__main__.First&#39;&gt;,\r\n     &lt;type &#39;object&#39;&gt;)\r\n\r\n\r\n  [1]: http:\/\/python-history.blogspot.com\/2010\/06\/method-resolution-order.html","body":"<p>This is detailed with a reasonable amount of detail by Guido himself in his blog post <a href=\"http:\/\/python-history.blogspot.com\/2010\/06\/method-resolution-order.html\" rel=\"noreferrer\">Method Resolution Order<\/a> (including two earlier attempts).<\/p>\n<p>In your example, <code>Third()<\/code> will call <code>First.__init__<\/code>. Python looks for each attribute in the class's parents as they are listed left to right. In this case, we are looking for <code>__init__<\/code>. So, if you define<\/p>\n<pre><code>class Third(First, Second):\n    ...\n<\/code><\/pre>\n<p>Python will start by looking at <code>First<\/code>, and, if <code>First<\/code> doesn't have the attribute, then it will look at <code>Second<\/code>.<\/p>\n<p>This situation becomes more complex when inheritance starts crossing paths (for example if <code>First<\/code> inherited from <code>Second<\/code>). Read the link above for more details, but, in a nutshell, Python will try to maintain the order in which each class appears on the inheritance list, starting with the child class itself.<\/p>\n<p>So, for instance, if you had:<\/p>\n<pre><code>class First(object):\n    def __init__(self):\n        print &quot;first&quot;\n\nclass Second(First):\n    def __init__(self):\n        print &quot;second&quot;\n\nclass Third(First):\n    def __init__(self):\n        print &quot;third&quot;\n\nclass Fourth(Second, Third):\n    def __init__(self):\n        super(Fourth, self).__init__()\n        print &quot;that's it&quot;\n<\/code><\/pre>\n<p>the MRO would be <code>[Fourth, Second, Third, First].<\/code><\/p>\n<p>By the way: if Python cannot find a coherent method resolution order, it'll raise an exception, instead of falling back to behavior which might surprise the user.<\/p>\n<p>Example of an ambiguous MRO:<\/p>\n<pre><code>class First(object):\n    def __init__(self):\n        print &quot;first&quot;\n        \nclass Second(First):\n    def __init__(self):\n        print &quot;second&quot;\n\nclass Third(First, Second):\n    def __init__(self):\n        print &quot;third&quot;\n<\/code><\/pre>\n<p>Should <code>Third<\/code>'s MRO be <code>[First, Second]<\/code> or <code>[Second, First]<\/code>? There's no obvious expectation, and Python will raise an error:<\/p>\n<pre><code>TypeError: Error when calling the metaclass bases\n    Cannot create a consistent method resolution order (MRO) for bases Second, First\n<\/code><\/pre>\n<p>Why do the examples above lack <code>super()<\/code> calls? The point of the examples is to show how the MRO is constructed. They are <strong>not<\/strong> intended to print <code>&quot;first\\nsecond\\third&quot;<\/code> or whatever. You can \u2013 and should, of course, play around with the example, add <code>super()<\/code> calls, see what happens, and gain a deeper understanding of Python's inheritance model. But my goal here is to keep it simple and show how the MRO is built. And it is built as I explained:<\/p>\n<pre><code>&gt;&gt;&gt; Fourth.__mro__\n(&lt;class '__main__.Fourth'&gt;,\n &lt;class '__main__.Second'&gt;, &lt;class '__main__.Third'&gt;,\n &lt;class '__main__.First'&gt;,\n &lt;type 'object'&gt;)\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":1891677,"reputation":145806,"user_id":1709587,"user_type":"registered","accept_rate":71,"profile_image":"https:\/\/i.stack.imgur.com\/cP8pZ.jpg?s=256&g=1","display_name":"Mark Amery","link":"https:\/\/stackoverflow.com\/users\/1709587\/mark-amery"},"is_accepted":false,"score":902,"last_activity_date":1519047893,"last_edit_date":1519047893.0,"creation_date":1473897114,"answer_id":39501288,"question_id":237079,"content_license":"CC BY-SA 3.0","body_markdown":"Getting some sort of modification date in a cross-platform way is easy - just call [&lt;code&gt;os.path.getmtime(&lt;i&gt;path&lt;\/i&gt;)&lt;\/code&gt;][1] and you&#39;ll get the Unix timestamp of when the file at `path` was last modified.\r\n\r\nGetting file *creation* dates, on the other hand, is fiddly and platform-dependent, differing even between the three big OSes:\r\n\r\n- On **Windows**, a file&#39;s `ctime` (documented at https:\/\/msdn.microsoft.com\/en-us\/library\/14h5k7ff.aspx) stores its creation date. You can access this in Python through [`os.path.getctime()`](https:\/\/docs.python.org\/library\/os.path.html#os.path.getctime) or the [`.st_ctime`][2] attribute of the result of a call to [`os.stat()`][4]. This *won&#39;t* work on Unix, where the `ctime` [is the last time that the file&#39;s attributes *or* content were changed](http:\/\/www.linux-faqs.info\/general\/difference-between-mtime-ctime-and-atime).\r\n* On **Mac**, as well as some other Unix-based OSes, you can use the [`.st_birthtime`](https:\/\/docs.python.org\/3\/library\/os.html#os.stat_result.st_birthtime) attribute of the result of a call to `os.stat()`.\r\n* On **Linux**, this is currently impossible, at least without writing a C extension for Python. Although some file systems commonly used with Linux [do store creation dates](https:\/\/unix.stackexchange.com\/questions\/7562\/what-file-systems-on-linux-store-the-creation-time) (for example, `ext4` stores them in `st_crtime`) , the Linux kernel [offers no way of accessing them](https:\/\/unix.stackexchange.com\/questions\/91197\/how-to-find-creation-date-of-file); in particular, the structs it returns from `stat()` calls in C, as of the latest kernel version, [don&#39;t contain any creation date fields](https:\/\/github.com\/torvalds\/linux\/blob\/v4.8-rc6\/include\/linux\/stat.h). You can also see that the identifier `st_crtime` doesn&#39;t currently feature anywhere in the [Python source](https:\/\/github.com\/python\/cpython\/search?utf8=%E2%9C%93&amp;q=st_crtime). At least if you&#39;re on `ext4`, the data *is* attached to the inodes in the file system, but there&#39;s no convenient way of accessing it.\r\n\r\n  The next-best thing on Linux is to access the file&#39;s `mtime`, through either [`os.path.getmtime()`](https:\/\/docs.python.org\/library\/os.path.html#os.path.getmtime) or the [`.st_mtime`][3] attribute of an `os.stat()` result. This will give you the last time the file&#39;s content was modified, which may be adequate for some use cases.\r\n\r\nPutting this all together, cross-platform code should look something like this...\r\n\r\n    import os\r\n    import platform\r\n\r\n    def creation_date(path_to_file):\r\n        &quot;&quot;&quot;\r\n        Try to get the date that a file was created, falling back to when it was\r\n        last modified if that isn&#39;t possible.\r\n        See http:\/\/stackoverflow.com\/a\/39501288\/1709587 for explanation.\r\n        &quot;&quot;&quot;\r\n        if platform.system() == &#39;Windows&#39;:\r\n            return os.path.getctime(path_to_file)\r\n        else:\r\n            stat = os.stat(path_to_file)\r\n            try:\r\n                return stat.st_birthtime\r\n            except AttributeError:\r\n                # We&#39;re probably on Linux. No easy way to get creation dates here,\r\n                # so we&#39;ll settle for when its content was last modified.\r\n                return stat.st_mtime\r\n\r\n\r\n  [1]: https:\/\/docs.python.org\/library\/os.path.html#os.path.getmtime\r\n  [2]: https:\/\/docs.python.org\/3\/library\/os.html#os.stat_result.st_ctime\r\n  [3]: https:\/\/docs.python.org\/3\/library\/os.html#os.stat_result.st_mtime\r\n  [4]: https:\/\/docs.python.org\/3\/library\/os.html#os.stat","body":"<p>Getting some sort of modification date in a cross-platform way is easy - just call <a href=\"https:\/\/docs.python.org\/library\/os.path.html#os.path.getmtime\" rel=\"noreferrer\"><code>os.path.getmtime(<i>path<\/i>)<\/code><\/a> and you'll get the Unix timestamp of when the file at <code>path<\/code> was last modified.<\/p>\n\n<p>Getting file <em>creation<\/em> dates, on the other hand, is fiddly and platform-dependent, differing even between the three big OSes:<\/p>\n\n<ul>\n<li>On <strong>Windows<\/strong>, a file's <code>ctime<\/code> (documented at <a href=\"https:\/\/msdn.microsoft.com\/en-us\/library\/14h5k7ff.aspx\" rel=\"noreferrer\">https:\/\/msdn.microsoft.com\/en-us\/library\/14h5k7ff.aspx<\/a>) stores its creation date. You can access this in Python through <a href=\"https:\/\/docs.python.org\/library\/os.path.html#os.path.getctime\" rel=\"noreferrer\"><code>os.path.getctime()<\/code><\/a> or the <a href=\"https:\/\/docs.python.org\/3\/library\/os.html#os.stat_result.st_ctime\" rel=\"noreferrer\"><code>.st_ctime<\/code><\/a> attribute of the result of a call to <a href=\"https:\/\/docs.python.org\/3\/library\/os.html#os.stat\" rel=\"noreferrer\"><code>os.stat()<\/code><\/a>. This <em>won't<\/em> work on Unix, where the <code>ctime<\/code> <a href=\"http:\/\/www.linux-faqs.info\/general\/difference-between-mtime-ctime-and-atime\" rel=\"noreferrer\">is the last time that the file's attributes <em>or<\/em> content were changed<\/a>.<\/li>\n<li>On <strong>Mac<\/strong>, as well as some other Unix-based OSes, you can use the <a href=\"https:\/\/docs.python.org\/3\/library\/os.html#os.stat_result.st_birthtime\" rel=\"noreferrer\"><code>.st_birthtime<\/code><\/a> attribute of the result of a call to <code>os.stat()<\/code>.<\/li>\n<li><p>On <strong>Linux<\/strong>, this is currently impossible, at least without writing a C extension for Python. Although some file systems commonly used with Linux <a href=\"https:\/\/unix.stackexchange.com\/questions\/7562\/what-file-systems-on-linux-store-the-creation-time\">do store creation dates<\/a> (for example, <code>ext4<\/code> stores them in <code>st_crtime<\/code>) , the Linux kernel <a href=\"https:\/\/unix.stackexchange.com\/questions\/91197\/how-to-find-creation-date-of-file\">offers no way of accessing them<\/a>; in particular, the structs it returns from <code>stat()<\/code> calls in C, as of the latest kernel version, <a href=\"https:\/\/github.com\/torvalds\/linux\/blob\/v4.8-rc6\/include\/linux\/stat.h\" rel=\"noreferrer\">don't contain any creation date fields<\/a>. You can also see that the identifier <code>st_crtime<\/code> doesn't currently feature anywhere in the <a href=\"https:\/\/github.com\/python\/cpython\/search?utf8=%E2%9C%93&amp;q=st_crtime\" rel=\"noreferrer\">Python source<\/a>. At least if you're on <code>ext4<\/code>, the data <em>is<\/em> attached to the inodes in the file system, but there's no convenient way of accessing it.<\/p>\n\n<p>The next-best thing on Linux is to access the file's <code>mtime<\/code>, through either <a href=\"https:\/\/docs.python.org\/library\/os.path.html#os.path.getmtime\" rel=\"noreferrer\"><code>os.path.getmtime()<\/code><\/a> or the <a href=\"https:\/\/docs.python.org\/3\/library\/os.html#os.stat_result.st_mtime\" rel=\"noreferrer\"><code>.st_mtime<\/code><\/a> attribute of an <code>os.stat()<\/code> result. This will give you the last time the file's content was modified, which may be adequate for some use cases.<\/p><\/li>\n<\/ul>\n\n<p>Putting this all together, cross-platform code should look something like this...<\/p>\n\n<pre><code>import os\nimport platform\n\ndef creation_date(path_to_file):\n    \"\"\"\n    Try to get the date that a file was created, falling back to when it was\n    last modified if that isn't possible.\n    See http:\/\/stackoverflow.com\/a\/39501288\/1709587 for explanation.\n    \"\"\"\n    if platform.system() == 'Windows':\n        return os.path.getctime(path_to_file)\n    else:\n        stat = os.stat(path_to_file)\n        try:\n            return stat.st_birthtime\n        except AttributeError:\n            # We're probably on Linux. No easy way to get creation dates here,\n            # so we'll settle for when its content was last modified.\n            return stat.st_mtime\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":1348919,"reputation":9822,"user_id":1289107,"user_type":"registered","accept_rate":60,"profile_image":"https:\/\/www.gravatar.com\/avatar\/b8e0c4a0ea801b27e2fb1ed1d06107a0?s=256&d=identicon&r=PG","display_name":"fred","link":"https:\/\/stackoverflow.com\/users\/1289107\/fred"},"is_accepted":true,"score":898,"last_activity_date":1608303626,"last_edit_date":1608303626.0,"creation_date":1406034625,"answer_id":24888331,"question_id":10715965,"content_license":"CC BY-SA 4.0","body_markdown":"You can use `df.loc[i]`, where the row with index `i` will be what you specify it to be in the dataframe.\r\n\r\n\r\n    &gt;&gt;&gt; import pandas as pd\r\n    &gt;&gt;&gt; from numpy.random import randint\r\n\r\n    &gt;&gt;&gt; df = pd.DataFrame(columns=[&#39;lib&#39;, &#39;qty1&#39;, &#39;qty2&#39;])\r\n    &gt;&gt;&gt; for i in range(5):\r\n    &gt;&gt;&gt;     df.loc[i] = [&#39;name&#39; + str(i)] + list(randint(10, size=2))\r\n    \r\n    &gt;&gt;&gt; df\r\n         lib qty1 qty2\r\n    0  name0    3    3\r\n    1  name1    2    4\r\n    2  name2    2    8\r\n    3  name3    2    1\r\n    4  name4    9    6\r\n\r\n \r\n","body":"<p>You can use <code>df.loc[i]<\/code>, where the row with index <code>i<\/code> will be what you specify it to be in the dataframe.<\/p>\n<pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; from numpy.random import randint\n\n&gt;&gt;&gt; df = pd.DataFrame(columns=['lib', 'qty1', 'qty2'])\n&gt;&gt;&gt; for i in range(5):\n&gt;&gt;&gt;     df.loc[i] = ['name' + str(i)] + list(randint(10, size=2))\n\n&gt;&gt;&gt; df\n     lib qty1 qty2\n0  name0    3    3\n1  name1    2    4\n2  name2    2    8\n3  name3    2    1\n4  name4    9    6\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":9633731,"reputation":9239,"user_id":7150634,"user_type":"registered","profile_image":"https:\/\/lh3.googleusercontent.com\/-zHMS7H27Mak\/AAAAAAAAAAI\/AAAAAAAAChk\/uDE30t-oYy8\/photo.jpg?sz=256","display_name":"Harshad Kavathiya","link":"https:\/\/stackoverflow.com\/users\/7150634\/harshad-kavathiya"},"is_accepted":false,"score":883,"last_activity_date":1683701766,"last_edit_date":1683701766.0,"creation_date":1478974085,"answer_id":40566052,"question_id":11248073,"content_license":"CC BY-SA 4.0","body_markdown":"This will work for all Mac, Windows, and Linux systems.\r\nTo get the list of all pip packages in the requirements.txt file (Note: This will overwrite requirements.txt if exist else will create the new one, also if you don&#39;t want to replace old requirements.txt then give different file name in the all following command in place requirements.txt).\r\n\r\n    pip freeze &gt; requirements.txt\r\n\r\nNow to remove one by one\r\n\r\n    pip uninstall -r requirements.txt\r\n\r\nIf we want to remove all at once then \r\n\r\n    pip uninstall -r requirements.txt -y\r\n\r\nIf you&#39;re working on an existing project that has a `requirements.txt` file and your environment has diverged, simply replace `requirements.txt` from the above examples with `toberemoved.txt`. Then, once you have gone through the steps above, you can use the `requirements.txt` to update your now clean environment.\r\n\r\nAnd For single command without creating any file as @joeb [suggested][1]\r\n\r\n\r\n\r\n    pip uninstall -y -r &lt;(pip freeze)\r\n\r\n\r\n  [1]: https:\/\/stackoverflow.com\/questions\/11248073\/how-do-i-remove-all-packages-installed-by-pip#comment75874178_40566052","body":"<p>This will work for all Mac, Windows, and Linux systems.\nTo get the list of all pip packages in the requirements.txt file (Note: This will overwrite requirements.txt if exist else will create the new one, also if you don't want to replace old requirements.txt then give different file name in the all following command in place requirements.txt).<\/p>\n<pre><code>pip freeze &gt; requirements.txt\n<\/code><\/pre>\n<p>Now to remove one by one<\/p>\n<pre><code>pip uninstall -r requirements.txt\n<\/code><\/pre>\n<p>If we want to remove all at once then<\/p>\n<pre><code>pip uninstall -r requirements.txt -y\n<\/code><\/pre>\n<p>If you're working on an existing project that has a <code>requirements.txt<\/code> file and your environment has diverged, simply replace <code>requirements.txt<\/code> from the above examples with <code>toberemoved.txt<\/code>. Then, once you have gone through the steps above, you can use the <code>requirements.txt<\/code> to update your now clean environment.<\/p>\n<p>And For single command without creating any file as @joeb <a href=\"https:\/\/stackoverflow.com\/questions\/11248073\/how-do-i-remove-all-packages-installed-by-pip#comment75874178_40566052\">suggested<\/a><\/p>\n<pre><code>pip uninstall -y -r &lt;(pip freeze)\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":2965147,"reputation":9338,"user_id":2518486,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/29bb1bb955f85d24b7a5a9248b0d11a0?s=256&d=identicon&r=PG","display_name":"freddygv","link":"https:\/\/stackoverflow.com\/users\/2518486\/freddygv"},"is_accepted":false,"score":858,"last_activity_date":1400512833,"last_edit_date":null,"creation_date":1400512833,"answer_id":23741480,"question_id":13148429,"content_license":"CC BY-SA 3.0","body_markdown":"You could also do something like this:\r\n\r\n    df = df[[&#39;mean&#39;, &#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;]]\r\n\r\nYou can get the list of columns with:\r\n\r\n    cols = list(df.columns.values)\r\n\r\nThe output will produce:\r\n\r\n    [&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;mean&#39;]\r\n\r\n...which is then easy to rearrange manually before dropping it into the first function","body":"<p>You could also do something like this:<\/p>\n\n<pre><code>df = df[['mean', '0', '1', '2', '3']]\n<\/code><\/pre>\n\n<p>You can get the list of columns with:<\/p>\n\n<pre><code>cols = list(df.columns.values)\n<\/code><\/pre>\n\n<p>The output will produce:<\/p>\n\n<pre><code>['0', '1', '2', '3', 'mean']\n<\/code><\/pre>\n\n<p>...which is then easy to rearrange manually before dropping it into the first function<\/p>\n","community_owned_date":null},{"owner":{"account_id":234440,"reputation":172624,"user_id":500584,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/02cbc0104ac1794c222b2d3e11d325e4?s=256&d=identicon&r=PG","display_name":"agf","link":"https:\/\/stackoverflow.com\/users\/500584\/agf"},"is_accepted":true,"score":854,"last_activity_date":1642950051,"last_edit_date":1642950051.0,"creation_date":1317223678,"answer_id":7585619,"question_id":7585435,"content_license":"CC BY-SA 4.0","body_markdown":"If you look at the docs for `bytes`, it points you to [`bytearray`](https:\/\/docs.python.org\/3\/library\/functions.html#func-bytearray):\r\n\r\n&gt; bytearray([source[, encoding[, errors]]])\r\n&gt;\r\n&gt;Return a new array of bytes. The bytearray type is a mutable sequence of integers in the range 0 &amp;lt;= x &amp;lt; 256. It has most of the usual methods of mutable sequences, described in Mutable Sequence Types, as well as most methods that the bytes type has, see Bytes and Byte Array Methods.\r\n&gt;\r\n&gt;The optional source parameter can be used to initialize the array in a few different ways:\r\n&gt;\r\n&gt;__If it is a string, you must also give the encoding (and optionally, errors) parameters; bytearray() then converts the string to bytes using str.encode().__\r\n&gt;\r\n&gt;__If it is an integer, the array will have that size and will be initialized with null bytes.__\r\n&gt;\r\n&gt;__If it is an object conforming to the buffer interface, a read-only buffer of the object will be used to initialize the bytes array.__\r\n&gt;\r\n&gt;__If it is an iterable, it must be an iterable of integers in the range 0 &lt;= x &lt; 256, which are used as the initial contents of the array.__\r\n&gt;\r\n&gt; __Without an argument, an array of size 0 is created.__\r\n\r\nSo `bytes` can do much more than just encode a string. It&#39;s Pythonic that it would allow you to call the constructor with any type of source parameter that makes sense. \r\n\r\nFor  encoding a string, I think that `some_string.encode(encoding)` is more Pythonic than using the constructor, because it is the most self documenting -- &quot;take this string and encode it with this encoding&quot; is clearer than `bytes(some_string, encoding)` -- there is no explicit verb when you use the constructor.\r\n\r\nI checked the Python source. If you pass a unicode string to `bytes` using CPython, it calls [PyUnicode_AsEncodedString](http:\/\/hg.python.org\/cpython\/file\/5a12416890c0\/Objects\/unicodeobject.c#l2328), which is the implementation of `encode`; so you&#39;re just skipping a level of indirection if you call `encode` yourself.\r\n\r\nAlso, see Serdalis&#39; comment -- `unicode_string.encode(encoding)` is also more Pythonic because its inverse is `byte_string.decode(encoding)` and symmetry is nice.","body":"<p>If you look at the docs for <code>bytes<\/code>, it points you to <a href=\"https:\/\/docs.python.org\/3\/library\/functions.html#func-bytearray\" rel=\"noreferrer\"><code>bytearray<\/code><\/a>:<\/p>\n<blockquote>\n<p>bytearray([source[, encoding[, errors]]])<\/p>\n<p>Return a new array of bytes. The bytearray type is a mutable sequence of integers in the range 0 &lt;= x &lt; 256. It has most of the usual methods of mutable sequences, described in Mutable Sequence Types, as well as most methods that the bytes type has, see Bytes and Byte Array Methods.<\/p>\n<p>The optional source parameter can be used to initialize the array in a few different ways:<\/p>\n<p><strong>If it is a string, you must also give the encoding (and optionally, errors) parameters; bytearray() then converts the string to bytes using str.encode().<\/strong><\/p>\n<p><strong>If it is an integer, the array will have that size and will be initialized with null bytes.<\/strong><\/p>\n<p><strong>If it is an object conforming to the buffer interface, a read-only buffer of the object will be used to initialize the bytes array.<\/strong><\/p>\n<p><strong>If it is an iterable, it must be an iterable of integers in the range 0 &lt;= x &lt; 256, which are used as the initial contents of the array.<\/strong><\/p>\n<p><strong>Without an argument, an array of size 0 is created.<\/strong><\/p>\n<\/blockquote>\n<p>So <code>bytes<\/code> can do much more than just encode a string. It's Pythonic that it would allow you to call the constructor with any type of source parameter that makes sense.<\/p>\n<p>For  encoding a string, I think that <code>some_string.encode(encoding)<\/code> is more Pythonic than using the constructor, because it is the most self documenting -- &quot;take this string and encode it with this encoding&quot; is clearer than <code>bytes(some_string, encoding)<\/code> -- there is no explicit verb when you use the constructor.<\/p>\n<p>I checked the Python source. If you pass a unicode string to <code>bytes<\/code> using CPython, it calls <a href=\"http:\/\/hg.python.org\/cpython\/file\/5a12416890c0\/Objects\/unicodeobject.c#l2328\" rel=\"noreferrer\">PyUnicode_AsEncodedString<\/a>, which is the implementation of <code>encode<\/code>; so you're just skipping a level of indirection if you call <code>encode<\/code> yourself.<\/p>\n<p>Also, see Serdalis' comment -- <code>unicode_string.encode(encoding)<\/code> is also more Pythonic because its inverse is <code>byte_string.decode(encoding)<\/code> and symmetry is nice.<\/p>\n","community_owned_date":null},{"owner":{"account_id":3121,"reputation":89616,"user_id":4435,"user_type":"registered","accept_rate":95,"profile_image":"https:\/\/www.gravatar.com\/avatar\/3040ef463d4606c55ef70b54c6add636?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"Jimmy","link":"https:\/\/stackoverflow.com\/users\/4435\/jimmy"},"is_accepted":true,"score":849,"last_activity_date":1488988212,"last_edit_date":1488988212.0,"creation_date":1220563846,"answer_id":44842,"question_id":44834,"content_license":"CC BY-SA 3.0","body_markdown":"It&#39;s a list of public objects of that module, as interpreted by `import *`. It overrides the default of hiding everything that begins with an underscore.\r\n","body":"<p>It's a list of public objects of that module, as interpreted by <code>import *<\/code>. It overrides the default of hiding everything that begins with an underscore.<\/p>\n","community_owned_date":null},{"owner":{"account_id":39114,"reputation":32782,"user_id":112731,"user_type":"registered","accept_rate":76,"profile_image":"https:\/\/i.stack.imgur.com\/PrcQQ.jpg?s=256&g=1","display_name":"Onur Y\u0131ld\u0131r\u0131m","link":"https:\/\/stackoverflow.com\/users\/112731\/onur-y%c4%b1ld%c4%b1r%c4%b1m"},"is_accepted":false,"score":847,"last_activity_date":1620347496,"last_edit_date":1620347496.0,"creation_date":1363832768,"answer_id":15538391,"question_id":3768895,"content_license":"CC BY-SA 4.0","body_markdown":"Here is a simple solution for a simple feature:\n\n## `.toJSON()` Method\nInstead of a JSON serializable class, implement a serializer method:\n\n&lt;!-- language: lang-py --&gt;\n\n    import json\n\n    class Object:\n        def toJSON(self):\n            return json.dumps(self, default=lambda o: o.__dict__, \n                sort_keys=True, indent=4)\n\nSo you just call it to serialize:\n\n&lt;!-- language: lang-py --&gt;\n\n    me = Object()\n    me.name = &quot;Onur&quot;\n    me.age = 35\n    me.dog = Object()\n    me.dog.name = &quot;Apollo&quot;\n\n    print(me.toJSON())\n\nwill output:\n\n&lt;!-- language: lang-js --&gt;\n\n    {\n        &quot;age&quot;: 35,\n        &quot;dog&quot;: {\n            &quot;name&quot;: &quot;Apollo&quot;\n        },\n        &quot;name&quot;: &quot;Onur&quot;\n    }\n","body":"<p>Here is a simple solution for a simple feature:<\/p>\n<h2><code>.toJSON()<\/code> Method<\/h2>\n<p>Instead of a JSON serializable class, implement a serializer method:<\/p>\n<pre class=\"lang-py prettyprint-override\"><code>import json\n\nclass Object:\n    def toJSON(self):\n        return json.dumps(self, default=lambda o: o.__dict__, \n            sort_keys=True, indent=4)\n<\/code><\/pre>\n<p>So you just call it to serialize:<\/p>\n<pre class=\"lang-py prettyprint-override\"><code>me = Object()\nme.name = &quot;Onur&quot;\nme.age = 35\nme.dog = Object()\nme.dog.name = &quot;Apollo&quot;\n\nprint(me.toJSON())\n<\/code><\/pre>\n<p>will output:<\/p>\n<pre class=\"lang-js prettyprint-override\"><code>{\n    &quot;age&quot;: 35,\n    &quot;dog&quot;: {\n        &quot;name&quot;: &quot;Apollo&quot;\n    },\n    &quot;name&quot;: &quot;Onur&quot;\n}\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":2742496,"reputation":50556,"user_id":2363712,"user_type":"registered","accept_rate":50,"profile_image":"https:\/\/i.stack.imgur.com\/beAJU.jpg?s=256&g=1","display_name":"Sylvain Leroux","link":"https:\/\/stackoverflow.com\/users\/2363712\/sylvain-leroux"},"is_accepted":true,"score":838,"last_activity_date":1434984180,"last_edit_date":1434984180.0,"creation_date":1370455551,"answer_id":16946886,"question_id":3702675,"content_license":"CC BY-SA 3.0","body_markdown":"Some other answer have already pointed out the [traceback](http:\/\/docs.python.org\/3\/library\/traceback.html) module.\r\n\r\nPlease notice that with `print_exc`, in some corner cases, you will not obtain what you would expect. In Python 2.x:\r\n\r\n    import traceback\r\n    \r\n    try:\r\n        raise TypeError(&quot;Oups!&quot;)\r\n    except Exception, err:\r\n        try:\r\n            raise TypeError(&quot;Again !?!&quot;)\r\n        except:\r\n            pass\r\n    \r\n        traceback.print_exc()\r\n\r\n...will display the traceback of the _last_ exception:\r\n\r\n&lt;!-- language: lang-none --&gt;\r\n\r\n    Traceback (most recent call last):\r\n      File &quot;e.py&quot;, line 7, in &lt;module&gt;\r\n        raise TypeError(&quot;Again !?!&quot;)\r\n    TypeError: Again !?!\r\n\r\n**If you really need to access the original _traceback_** one solution is to cache the _exception infos_ as returned from [`exc_info`](https:\/\/docs.python.org\/2\/library\/sys.html#sys.exc_info) in a local variable and display it using [`print_exception`](https:\/\/docs.python.org\/2\/library\/traceback.html#traceback.print_exception):\r\n\r\n    import traceback\r\n    import sys\r\n    \r\n    try:\r\n        raise TypeError(&quot;Oups!&quot;)\r\n    except Exception, err:\r\n        try:\r\n            exc_info = sys.exc_info()\r\n    \r\n            # do you usefull stuff here\r\n            # (potentially raising an exception)\r\n            try:\r\n                raise TypeError(&quot;Again !?!&quot;)\r\n            except:\r\n                pass\r\n            # end of useful stuff\r\n    \r\n    \r\n        finally:\r\n            # Display the *original* exception\r\n            traceback.print_exception(*exc_info)\r\n            del exc_info\r\n\r\nProducing:\r\n\r\n&lt;!-- language: lang-none --&gt;\r\n\r\n    Traceback (most recent call last):\r\n      File &quot;t.py&quot;, line 6, in &lt;module&gt;\r\n        raise TypeError(&quot;Oups!&quot;)\r\n    TypeError: Oups!\r\n\r\n\r\nFew pitfalls with this though:\r\n\r\n+ From the doc of [`sys_info`](https:\/\/docs.python.org\/2\/library\/sys.html#sys.exc_info):\r\n  &gt; Assigning the traceback return value to a local variable in a function that is handling an exception will cause a **circular reference**. This will prevent anything referenced by a local variable in the same function or by the traceback from being garbage collected. [...] **If you do need the traceback, make sure to delete it after use** (best done with a try ... finally statement)\r\n\r\n+ but, from the same doc:\r\n  &gt; **Beginning with Python 2.2, such cycles are automatically reclaimed** when garbage collection is enabled and they become unreachable, but it remains more efficient to avoid creating cycles.\r\n\r\n\r\n&lt;hr&gt;\r\n\r\nOn the other hand, by allowing you to access the traceback _associated with_ an exception, Python 3 produce a less surprising result:\r\n\r\n    import traceback\r\n    \r\n    try:\r\n        raise TypeError(&quot;Oups!&quot;)\r\n    except Exception as err:\r\n        try:\r\n            raise TypeError(&quot;Again !?!&quot;)\r\n        except:\r\n            pass\r\n\r\n        traceback.print_tb(err.__traceback__)\r\n\r\n\r\n... will display:\r\n\r\n&lt;!-- language: lang-none --&gt;\r\n\r\n      File &quot;e3.py&quot;, line 4, in &lt;module&gt;\r\n        raise TypeError(&quot;Oups!&quot;)\r\n\r\n\r\n","body":"<p>Some other answer have already pointed out the <a href=\"http:\/\/docs.python.org\/3\/library\/traceback.html\">traceback<\/a> module.<\/p>\n\n<p>Please notice that with <code>print_exc<\/code>, in some corner cases, you will not obtain what you would expect. In Python 2.x:<\/p>\n\n<pre><code>import traceback\n\ntry:\n    raise TypeError(\"Oups!\")\nexcept Exception, err:\n    try:\n        raise TypeError(\"Again !?!\")\n    except:\n        pass\n\n    traceback.print_exc()\n<\/code><\/pre>\n\n<p>...will display the traceback of the <em>last<\/em> exception:<\/p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Traceback (most recent call last):\n  File \"e.py\", line 7, in &lt;module&gt;\n    raise TypeError(\"Again !?!\")\nTypeError: Again !?!\n<\/code><\/pre>\n\n<p><strong>If you really need to access the original <em>traceback<\/em><\/strong> one solution is to cache the <em>exception infos<\/em> as returned from <a href=\"https:\/\/docs.python.org\/2\/library\/sys.html#sys.exc_info\"><code>exc_info<\/code><\/a> in a local variable and display it using <a href=\"https:\/\/docs.python.org\/2\/library\/traceback.html#traceback.print_exception\"><code>print_exception<\/code><\/a>:<\/p>\n\n<pre><code>import traceback\nimport sys\n\ntry:\n    raise TypeError(\"Oups!\")\nexcept Exception, err:\n    try:\n        exc_info = sys.exc_info()\n\n        # do you usefull stuff here\n        # (potentially raising an exception)\n        try:\n            raise TypeError(\"Again !?!\")\n        except:\n            pass\n        # end of useful stuff\n\n\n    finally:\n        # Display the *original* exception\n        traceback.print_exception(*exc_info)\n        del exc_info\n<\/code><\/pre>\n\n<p>Producing:<\/p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Traceback (most recent call last):\n  File \"t.py\", line 6, in &lt;module&gt;\n    raise TypeError(\"Oups!\")\nTypeError: Oups!\n<\/code><\/pre>\n\n<p>Few pitfalls with this though:<\/p>\n\n<ul>\n<li><p>From the doc of <a href=\"https:\/\/docs.python.org\/2\/library\/sys.html#sys.exc_info\"><code>sys_info<\/code><\/a>:<\/p>\n\n<blockquote>\n  <p>Assigning the traceback return value to a local variable in a function that is handling an exception will cause a <strong>circular reference<\/strong>. This will prevent anything referenced by a local variable in the same function or by the traceback from being garbage collected. [...] <strong>If you do need the traceback, make sure to delete it after use<\/strong> (best done with a try ... finally statement)<\/p>\n<\/blockquote><\/li>\n<li><p>but, from the same doc:<\/p>\n\n<blockquote>\n  <p><strong>Beginning with Python 2.2, such cycles are automatically reclaimed<\/strong> when garbage collection is enabled and they become unreachable, but it remains more efficient to avoid creating cycles.<\/p>\n<\/blockquote><\/li>\n<\/ul>\n\n<hr>\n\n<p>On the other hand, by allowing you to access the traceback <em>associated with<\/em> an exception, Python 3 produce a less surprising result:<\/p>\n\n<pre><code>import traceback\n\ntry:\n    raise TypeError(\"Oups!\")\nexcept Exception as err:\n    try:\n        raise TypeError(\"Again !?!\")\n    except:\n        pass\n\n    traceback.print_tb(err.__traceback__)\n<\/code><\/pre>\n\n<p>... will display:<\/p>\n\n<pre class=\"lang-none prettyprint-override\"><code>  File \"e3.py\", line 4, in &lt;module&gt;\n    raise TypeError(\"Oups!\")\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":6321039,"reputation":386303,"user_id":4909087,"user_type":"registered","accept_rate":97,"profile_image":"https:\/\/i.stack.imgur.com\/Zcszo.png?s=256&g=1","display_name":"cs95","link":"https:\/\/stackoverflow.com\/users\/4909087\/cs95"},"is_accepted":false,"score":832,"last_activity_date":1681541638,"last_edit_date":1681541638.0,"creation_date":1545981535,"answer_id":53954986,"question_id":20625582,"content_license":"CC BY-SA 4.0","body_markdown":"&gt; ### How to deal with `SettingWithCopyWarning` and `ChainedAssignmentError` in Pandas?\r\n\r\n\r\nThis post is meant for readers who,\r\n\r\n1. Would like to understand what this warning means\r\n2. Would like to understand different ways of suppressing this warning\r\n3. Would like to understand how to improve their code and follow good practices to avoid this warning in the future.\r\n\r\n\r\n**Setup**\r\n\r\n```lang-none\r\nnp.random.seed(0)\r\ndf = pd.DataFrame(np.random.choice(10, (3, 5)), columns=list(&#39;ABCDE&#39;))\r\ndf\r\n   A  B  C  D  E\r\n0  5  0  3  3  7\r\n1  9  3  5  2  4\r\n2  7  6  8  8  1\r\n```\r\n\r\n----\r\n\r\n# What is the `SettingWithCopyWarning`?\r\n\r\nTo know how to deal with this warning, it is important to understand what it means and why it is raised in the first place.\r\n\r\nWhen filtering DataFrames, it is possible slice\/index a frame to return either a _view_, or a _copy_, depending on the internal layout and various implementation details. A &quot;view&quot; is, as the term suggests, a view into the original data, so modifying the view may modify the original object. On the other hand, a &quot;copy&quot; is a replication of data from the original, and modifying the copy has no effect on the original.\r\n\r\nAs mentioned by other answers, the `SettingWithCopyWarning` was created to flag &quot;chained assignment&quot; operations. Consider `df` in the setup above. Suppose you would like to select all values in column &quot;B&quot; where values in column &quot;A&quot; is &gt; 5. Pandas allows you to do this in different ways, some more correct than others. For example,\r\n\r\n```lang-none\r\ndf[df.A &gt; 5][&#39;B&#39;]\r\n\r\n1    3\r\n2    6\r\nName: B, dtype: int64\r\n```\r\n\r\nAnd,\r\n\r\n```lang-none\r\ndf.loc[df.A &gt; 5, &#39;B&#39;]\r\n\r\n1    3\r\n2    6\r\nName: B, dtype: int64\r\n```\r\n\r\nThese return the same result, so if you are only reading these values, it makes no difference. So, what is the issue? The problem with chained assignment, is that it is generally difficult to predict whether a view or a copy is returned, **so this largely becomes an issue when you are attempting to assign values back.** To build on the earlier example, consider how this code is executed by the interpreter:\r\n\r\n    df.loc[df.A &gt; 5, &#39;B&#39;] = 4\r\n    # becomes\r\n    df.__setitem__((df.A &gt; 5, &#39;B&#39;), 4)\r\n\r\nWith a single `__setitem__` call to `df`. OTOH, consider this code:\r\n\r\n    df[df.A &gt; 5][&#39;B&#39;] = 4\r\n    # becomes\r\n    df.__getitem__(df.A &gt; 5).__setitem__(&#39;B&#39;, 4)\r\n\r\nNow, depending on whether `__getitem__` returned a view or a copy, the `__setitem__` operation **may not work**.\r\n\r\nIn general, you should use [`loc`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.loc.html) for label-based assignment, and [`iloc`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.iloc.html) for integer\/positional based assignment, as the spec guarantees that they always operate on the original. Additionally, for setting a single cell, you should use [`at`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.at.html) and [`iat`](https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.iat.html).\r\n\r\n\r\nMore can be found in the [documentation](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/indexing.html#returning-a-view-versus-a-copy).\r\n\r\n&gt; **Note**\r\n&gt; All boolean indexing operations done with `loc` can also be done with `iloc`. The only difference is that `iloc` expects either\r\n&gt; integers\/positions for index or a numpy array of boolean values, and\r\n&gt; integer\/position indexes for the columns.\r\n&gt;\r\n&gt; For example,\r\n&gt;\r\n&gt;     df.loc[df.A &gt; 5, &#39;B&#39;] = 4\r\n&gt;\r\n&gt; Can be written nas\r\n&gt;\r\n&gt;     df.iloc[(df.A &gt; 5).values, 1] = 4\r\n&gt;\r\n&gt; And,\r\n&gt;\r\n&gt;     df.loc[1, &#39;A&#39;] = 100\r\n&gt;\r\n&gt; Can be written as\r\n&gt;\r\n&gt;     df.iloc[1, 0] = 100\r\n&gt;\r\n&gt; And so on.\r\n\r\n### from pandas &gt;= 2.0, you can enable [Copy-on-write optimizations](https:\/\/pandas.pydata.org\/docs\/user_guide\/copy_on_write.html#copy-on-write-optimizations) to save on memory and avoid making copies of data until written to (if possible).\r\n\r\nThis can be enabled by \r\n\r\n    pd.options.mode.copy_on_write = True\r\n\r\nAfter this, attempts to make chained assignments will result in \r\n\r\n```\r\nChainedAssignmentError: A value is trying to be set on a copy of a DataFrame or Series through chained assignment.\r\nWhen using the Copy-on-Write mode, such chained assignment never works to update the original DataFrame or Series, because the intermediate object on which we are setting values always behaves as a copy.\r\n\r\nTry using &#39;.loc[row_indexer, col_indexer] = value&#39; instead, to perform the assignment in a single step.\r\n```\r\nThe error is raised in a similar setting to the `SettingWithCopyWarning`.\r\n\r\n\r\n----\r\n\r\n# Just tell me how to suppress the warning!\r\n\r\nConsider a simple operation on the &quot;A&quot; column of `df`. Selecting &quot;A&quot; and dividing by 2 will raise the warning, but the operation will work.\r\n\r\n```lang-none\r\ndf2 = df[[&#39;A&#39;]]\r\ndf2[&#39;A&#39;] \/= 2\r\n\/Library\/Frameworks\/Python.framework\/Versions\/3.6\/lib\/python3.6\/site-packages\/IPython\/__main__.py:1: SettingWithCopyWarning:\r\nA value is trying to be set on a copy of a slice from a DataFrame.\r\nTry using .loc[row_indexer,col_indexer] = value instead\r\n\r\ndf2\r\n     A\r\n0  2.5\r\n1  4.5\r\n2  3.5\r\n```\r\n\r\nThere are a couple ways of directly silencing this warning:\r\n\r\n1. (recommended) **Use `loc` to slice subsets**:\r\n\r\n        df2 = df.loc[:, [&#39;A&#39;]]\r\n        df2[&#39;A&#39;] \/= 2     # Does not raise\r\n\r\n2. **Change `pd.options.mode.chained_assignment`**\r\n    Can be set to `None`, `&quot;warn&quot;`, or `&quot;raise&quot;`. `&quot;warn&quot;` is the default. `None` will suppress the warning entirely, and `&quot;raise&quot;` will throw a `SettingWithCopyError`, preventing the operation from going through.\r\n\r\n        pd.options.mode.chained_assignment = None\r\n        df2[&#39;A&#39;] \/= 2\r\n\r\n3. **Make a `deepcopy`**\r\n\r\n        df2 = df[[&#39;A&#39;]].copy(deep=True)\r\n        df2[&#39;A&#39;] \/= 2\r\n\r\n\r\n[@Peter Cotton](https:\/\/stackoverflow.com\/questions\/20625582\/how-to-deal-with-settingwithcopywarning-in-pandas#comment62589711_20625582) in the comments, came up with a nice way of non-intrusively changing the mode (modified from [this gist](https:\/\/gist.github.com\/notbanker\/2be3ed34539c86e22ffdd88fd95ad8bc)) using a context manager, to set the mode only as long as it is required, and the reset it back to the original state when finished.\r\n\r\n\r\n&gt;     class ChainedAssignent:\r\n&gt;         def __init__(self, chained=None):\r\n&gt;             acceptable = [None, &#39;warn&#39;, &#39;raise&#39;]\r\n&gt;             assert chained in acceptable, &quot;chained must be in &quot; + str(acceptable)\r\n&gt;             self.swcw = chained\r\n&gt;\r\n&gt;         def __enter__(self):\r\n&gt;             self.saved_swcw = pd.options.mode.chained_assignment\r\n&gt;             pd.options.mode.chained_assignment = self.swcw\r\n&gt;             return self\r\n&gt;\r\n&gt;         def __exit__(self, *args):\r\n&gt;             pd.options.mode.chained_assignment = self.saved_swcw\r\n\r\nThe usage is as follows:\r\n\r\n    # Some code here\r\n    with ChainedAssignent():\r\n        df2[&#39;A&#39;] \/= 2\r\n    # More code follows\r\n\r\nOr, to raise the exception\r\n\r\n```lang-none\r\nwith ChainedAssignent(chained=&#39;raise&#39;):\r\n    df2[&#39;A&#39;] \/= 2\r\n\r\nSettingWithCopyError:\r\nA value is trying to be set on a copy of a slice from a DataFrame.\r\nTry using .loc[row_indexer,col_indexer] = value instead\r\n```\r\n\r\n---\r\n\r\n# The &quot;XY Problem&quot;: What am I doing wrong?\r\n\r\nA lot of the time, users attempt to look for ways of suppressing this exception without fully understanding why it was raised in the first place. This is a good example of an [XY problem](https:\/\/meta.stackexchange.com\/q\/66377), where users attempt to solve a problem &quot;Y&quot; that is actually a symptom of a deeper rooted problem &quot;X&quot;. Questions will be raised based on common problems that encounter this warning, and solutions will then be presented.\r\n\r\n\r\n\r\n&gt; **Question 1**\r\n&gt; I have a DataFrame\r\n&gt;\r\n&gt; ```lang-none\r\n&gt; df\r\n&gt;        A  B  C  D  E\r\n&gt;     0  5  0  3  3  7\r\n&gt;     1  9  3  5  2  4\r\n&gt;     2  7  6  8  8  1\r\n&gt; ```\r\n&gt;\r\n&gt; I want to assign values in col &quot;A&quot; &gt; 5 to 1000. My expected output is\r\n&gt;\r\n&gt; ```lang-none\r\n&gt;       A  B  C  D  E\r\n&gt; 0     5  0  3  3  7\r\n&gt; 1  1000  3  5  2  4\r\n&gt; 2  1000  6  8  8  1\r\n&gt; ```\r\n\r\nWrong way to do this:\r\n\r\n    df.A[df.A &gt; 5] = 1000         # works, because df.A returns a view\r\n    df[df.A &gt; 5][&#39;A&#39;] = 1000      # does not work\r\n    df.loc[df.A &gt; 5][&#39;A&#39;] = 1000   # does not work\r\n\r\nRight way using `loc`:\r\n\r\n    df.loc[df.A &gt; 5, &#39;A&#39;] = 1000\r\n\r\n&lt;br\/&gt;\r\n\r\n&gt; **Question 2&lt;sup&gt;1&lt;\/sup&gt;**\r\n&gt; I am trying to set the value in cell (1, &#39;D&#39;) to 12345. My expected output is\r\n&gt;\r\n&gt; ```lang-none\r\n&gt;    A  B  C      D  E\r\n&gt; 0  5  0  3      3  7\r\n&gt; 1  9  3  5  12345  4\r\n&gt; 2  7  6  8      8  1\r\n&gt; ```\r\n&gt;\r\n&gt; I have tried different ways of accessing this cell, such as\r\n&gt; `df[&#39;D&#39;][1]`. What is the best way to do this?\r\n&gt;\r\n&gt; &lt;sub&gt;1. This question isn&#39;t specifically related to the warning, but\r\n&gt; it is good to understand how to do this particular operation correctly\r\n&gt; so as to avoid situations where the warning could potentially arise in\r\n&gt; future.&lt;\/sub&gt;\r\n\r\nYou can use any of the following methods to do this.\r\n\r\n    df.loc[1, &#39;D&#39;] = 12345\r\n    df.iloc[1, 3] = 12345\r\n    df.at[1, &#39;D&#39;] = 12345\r\n    df.iat[1, 3] = 12345\r\n\r\n&lt;br\/&gt;\r\n\r\n&gt; **Question 3**\r\n&gt; I am trying to subset values based on some condition. I have a\r\n&gt; DataFrame\r\n&gt;\r\n&gt; ```lang-none\r\n&gt;    A  B  C  D  E\r\n&gt; 1  9  3  5  2  4\r\n&gt; 2  7  6  8  8  1\r\n&gt; ```\r\n&gt;\r\n&gt; I would like to assign values in &quot;D&quot; to 123 such that &quot;C&quot; == 5. I\r\n&gt; tried\r\n&gt;\r\n&gt;     df2.loc[df2.C == 5, &#39;D&#39;] = 123\r\n&gt;\r\n&gt; Which seems fine but I am _still_ getting the\r\n&gt; `SettingWithCopyWarning`! How do I fix this?\r\n\r\nThis is actually probably because of code higher up in your pipeline. Did you create `df2` from something larger, like\r\n\r\n    df2 = df[df.A &gt; 5]\r\n\r\n? In this case, boolean indexing will return a view, so `df2` will reference the original. What you&#39;d need to do is assign `df2` to a _copy_:\r\n\r\n    df2 = df[df.A &gt; 5].copy()\r\n    # Or,\r\n    # df2 = df.loc[df.A &gt; 5, :]\r\n\r\n&lt;br\/&gt;\r\n\r\n&gt; **Question 4**\r\n&gt; I&#39;m trying to drop column &quot;C&quot; in-place from\r\n&gt;\r\n&gt; ```lang-none\r\n&gt;    A  B  C  D  E\r\n&gt; 1  9  3  5  2  4\r\n&gt; 2  7  6  8  8  1\r\n&gt; ```\r\n&gt;\r\n&gt; But using\r\n&gt;\r\n&gt;     df2.drop(&#39;C&#39;, axis=1, inplace=True)\r\n&gt;\r\n&gt; Throws `SettingWithCopyWarning`. Why is this happening?\r\n\r\nThis is because `df2` must have been created as a view from some other slicing operation, such as\r\n\r\n    df2 = df[df.A &gt; 5]\r\n\r\nThe solution here is to either make a `copy()` of `df`, or use `loc`, as before.\r\n\r\n&lt;!--  --&gt;\r\n\r\n\r\n\r\n","body":"<blockquote>\n<h3>How to deal with <code>SettingWithCopyWarning<\/code> and <code>ChainedAssignmentError<\/code> in Pandas?<\/h3>\n<\/blockquote>\n<p>This post is meant for readers who,<\/p>\n<ol>\n<li>Would like to understand what this warning means<\/li>\n<li>Would like to understand different ways of suppressing this warning<\/li>\n<li>Would like to understand how to improve their code and follow good practices to avoid this warning in the future.<\/li>\n<\/ol>\n<p><strong>Setup<\/strong><\/p>\n<pre class=\"lang-none prettyprint-override\"><code>np.random.seed(0)\ndf = pd.DataFrame(np.random.choice(10, (3, 5)), columns=list('ABCDE'))\ndf\n   A  B  C  D  E\n0  5  0  3  3  7\n1  9  3  5  2  4\n2  7  6  8  8  1\n<\/code><\/pre>\n<hr \/>\n<h1>What is the <code>SettingWithCopyWarning<\/code>?<\/h1>\n<p>To know how to deal with this warning, it is important to understand what it means and why it is raised in the first place.<\/p>\n<p>When filtering DataFrames, it is possible slice\/index a frame to return either a <em>view<\/em>, or a <em>copy<\/em>, depending on the internal layout and various implementation details. A &quot;view&quot; is, as the term suggests, a view into the original data, so modifying the view may modify the original object. On the other hand, a &quot;copy&quot; is a replication of data from the original, and modifying the copy has no effect on the original.<\/p>\n<p>As mentioned by other answers, the <code>SettingWithCopyWarning<\/code> was created to flag &quot;chained assignment&quot; operations. Consider <code>df<\/code> in the setup above. Suppose you would like to select all values in column &quot;B&quot; where values in column &quot;A&quot; is &gt; 5. Pandas allows you to do this in different ways, some more correct than others. For example,<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>df[df.A &gt; 5]['B']\n\n1    3\n2    6\nName: B, dtype: int64\n<\/code><\/pre>\n<p>And,<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>df.loc[df.A &gt; 5, 'B']\n\n1    3\n2    6\nName: B, dtype: int64\n<\/code><\/pre>\n<p>These return the same result, so if you are only reading these values, it makes no difference. So, what is the issue? The problem with chained assignment, is that it is generally difficult to predict whether a view or a copy is returned, <strong>so this largely becomes an issue when you are attempting to assign values back.<\/strong> To build on the earlier example, consider how this code is executed by the interpreter:<\/p>\n<pre><code>df.loc[df.A &gt; 5, 'B'] = 4\n# becomes\ndf.__setitem__((df.A &gt; 5, 'B'), 4)\n<\/code><\/pre>\n<p>With a single <code>__setitem__<\/code> call to <code>df<\/code>. OTOH, consider this code:<\/p>\n<pre><code>df[df.A &gt; 5]['B'] = 4\n# becomes\ndf.__getitem__(df.A &gt; 5).__setitem__('B', 4)\n<\/code><\/pre>\n<p>Now, depending on whether <code>__getitem__<\/code> returned a view or a copy, the <code>__setitem__<\/code> operation <strong>may not work<\/strong>.<\/p>\n<p>In general, you should use <a href=\"https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.loc.html\" rel=\"noreferrer\"><code>loc<\/code><\/a> for label-based assignment, and <a href=\"https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.iloc.html\" rel=\"noreferrer\"><code>iloc<\/code><\/a> for integer\/positional based assignment, as the spec guarantees that they always operate on the original. Additionally, for setting a single cell, you should use <a href=\"https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.at.html\" rel=\"noreferrer\"><code>at<\/code><\/a> and <a href=\"https:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.DataFrame.iat.html\" rel=\"noreferrer\"><code>iat<\/code><\/a>.<\/p>\n<p>More can be found in the <a href=\"http:\/\/pandas.pydata.org\/pandas-docs\/stable\/indexing.html#returning-a-view-versus-a-copy\" rel=\"noreferrer\">documentation<\/a>.<\/p>\n<blockquote>\n<p><strong>Note<\/strong>\nAll boolean indexing operations done with <code>loc<\/code> can also be done with <code>iloc<\/code>. The only difference is that <code>iloc<\/code> expects either\nintegers\/positions for index or a numpy array of boolean values, and\ninteger\/position indexes for the columns.<\/p>\n<p>For example,<\/p>\n<pre><code>df.loc[df.A &gt; 5, 'B'] = 4\n<\/code><\/pre>\n<p>Can be written nas<\/p>\n<pre><code>df.iloc[(df.A &gt; 5).values, 1] = 4\n<\/code><\/pre>\n<p>And,<\/p>\n<pre><code>df.loc[1, 'A'] = 100\n<\/code><\/pre>\n<p>Can be written as<\/p>\n<pre><code>df.iloc[1, 0] = 100\n<\/code><\/pre>\n<p>And so on.<\/p>\n<\/blockquote>\n<h3>from pandas &gt;= 2.0, you can enable <a href=\"https:\/\/pandas.pydata.org\/docs\/user_guide\/copy_on_write.html#copy-on-write-optimizations\" rel=\"noreferrer\">Copy-on-write optimizations<\/a> to save on memory and avoid making copies of data until written to (if possible).<\/h3>\n<p>This can be enabled by<\/p>\n<pre><code>pd.options.mode.copy_on_write = True\n<\/code><\/pre>\n<p>After this, attempts to make chained assignments will result in<\/p>\n<pre><code>ChainedAssignmentError: A value is trying to be set on a copy of a DataFrame or Series through chained assignment.\nWhen using the Copy-on-Write mode, such chained assignment never works to update the original DataFrame or Series, because the intermediate object on which we are setting values always behaves as a copy.\n\nTry using '.loc[row_indexer, col_indexer] = value' instead, to perform the assignment in a single step.\n<\/code><\/pre>\n<p>The error is raised in a similar setting to the <code>SettingWithCopyWarning<\/code>.<\/p>\n<hr \/>\n<h1>Just tell me how to suppress the warning!<\/h1>\n<p>Consider a simple operation on the &quot;A&quot; column of <code>df<\/code>. Selecting &quot;A&quot; and dividing by 2 will raise the warning, but the operation will work.<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>df2 = df[['A']]\ndf2['A'] \/= 2\n\/Library\/Frameworks\/Python.framework\/Versions\/3.6\/lib\/python3.6\/site-packages\/IPython\/__main__.py:1: SettingWithCopyWarning:\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\ndf2\n     A\n0  2.5\n1  4.5\n2  3.5\n<\/code><\/pre>\n<p>There are a couple ways of directly silencing this warning:<\/p>\n<ol>\n<li><p>(recommended) <strong>Use <code>loc<\/code> to slice subsets<\/strong>:<\/p>\n<pre><code> df2 = df.loc[:, ['A']]\n df2['A'] \/= 2     # Does not raise\n<\/code><\/pre>\n<\/li>\n<li><p><strong>Change <code>pd.options.mode.chained_assignment<\/code><\/strong>\nCan be set to <code>None<\/code>, <code>&quot;warn&quot;<\/code>, or <code>&quot;raise&quot;<\/code>. <code>&quot;warn&quot;<\/code> is the default. <code>None<\/code> will suppress the warning entirely, and <code>&quot;raise&quot;<\/code> will throw a <code>SettingWithCopyError<\/code>, preventing the operation from going through.<\/p>\n<pre><code> pd.options.mode.chained_assignment = None\n df2['A'] \/= 2\n<\/code><\/pre>\n<\/li>\n<li><p><strong>Make a <code>deepcopy<\/code><\/strong><\/p>\n<pre><code> df2 = df[['A']].copy(deep=True)\n df2['A'] \/= 2\n<\/code><\/pre>\n<\/li>\n<\/ol>\n<p><a href=\"https:\/\/stackoverflow.com\/questions\/20625582\/how-to-deal-with-settingwithcopywarning-in-pandas#comment62589711_20625582\">@Peter Cotton<\/a> in the comments, came up with a nice way of non-intrusively changing the mode (modified from <a href=\"https:\/\/gist.github.com\/notbanker\/2be3ed34539c86e22ffdd88fd95ad8bc\" rel=\"noreferrer\">this gist<\/a>) using a context manager, to set the mode only as long as it is required, and the reset it back to the original state when finished.<\/p>\n<blockquote>\n<pre><code>class ChainedAssignent:\n    def __init__(self, chained=None):\n        acceptable = [None, 'warn', 'raise']\n        assert chained in acceptable, &quot;chained must be in &quot; + str(acceptable)\n        self.swcw = chained\n\n    def __enter__(self):\n        self.saved_swcw = pd.options.mode.chained_assignment\n        pd.options.mode.chained_assignment = self.swcw\n        return self\n\n    def __exit__(self, *args):\n        pd.options.mode.chained_assignment = self.saved_swcw\n<\/code><\/pre>\n<\/blockquote>\n<p>The usage is as follows:<\/p>\n<pre><code># Some code here\nwith ChainedAssignent():\n    df2['A'] \/= 2\n# More code follows\n<\/code><\/pre>\n<p>Or, to raise the exception<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>with ChainedAssignent(chained='raise'):\n    df2['A'] \/= 2\n\nSettingWithCopyError:\nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n<\/code><\/pre>\n<hr \/>\n<h1>The &quot;XY Problem&quot;: What am I doing wrong?<\/h1>\n<p>A lot of the time, users attempt to look for ways of suppressing this exception without fully understanding why it was raised in the first place. This is a good example of an <a href=\"https:\/\/meta.stackexchange.com\/q\/66377\">XY problem<\/a>, where users attempt to solve a problem &quot;Y&quot; that is actually a symptom of a deeper rooted problem &quot;X&quot;. Questions will be raised based on common problems that encounter this warning, and solutions will then be presented.<\/p>\n<blockquote>\n<p><strong>Question 1<\/strong>\nI have a DataFrame<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>df\n       A  B  C  D  E\n    0  5  0  3  3  7\n    1  9  3  5  2  4\n    2  7  6  8  8  1\n<\/code><\/pre>\n<p>I want to assign values in col &quot;A&quot; &gt; 5 to 1000. My expected output is<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>      A  B  C  D  E\n0     5  0  3  3  7\n1  1000  3  5  2  4\n2  1000  6  8  8  1\n<\/code><\/pre>\n<\/blockquote>\n<p>Wrong way to do this:<\/p>\n<pre><code>df.A[df.A &gt; 5] = 1000         # works, because df.A returns a view\ndf[df.A &gt; 5]['A'] = 1000      # does not work\ndf.loc[df.A &gt; 5]['A'] = 1000   # does not work\n<\/code><\/pre>\n<p>Right way using <code>loc<\/code>:<\/p>\n<pre><code>df.loc[df.A &gt; 5, 'A'] = 1000\n<\/code><\/pre>\n<br\/>\n<blockquote>\n<p><strong>Question 2<sup>1<\/sup><\/strong>\nI am trying to set the value in cell (1, 'D') to 12345. My expected output is<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>   A  B  C      D  E\n0  5  0  3      3  7\n1  9  3  5  12345  4\n2  7  6  8      8  1\n<\/code><\/pre>\n<p>I have tried different ways of accessing this cell, such as\n<code>df['D'][1]<\/code>. What is the best way to do this?<\/p>\n<p><sub>1. This question isn't specifically related to the warning, but\nit is good to understand how to do this particular operation correctly\nso as to avoid situations where the warning could potentially arise in\nfuture.<\/sub><\/p>\n<\/blockquote>\n<p>You can use any of the following methods to do this.<\/p>\n<pre><code>df.loc[1, 'D'] = 12345\ndf.iloc[1, 3] = 12345\ndf.at[1, 'D'] = 12345\ndf.iat[1, 3] = 12345\n<\/code><\/pre>\n<br\/>\n<blockquote>\n<p><strong>Question 3<\/strong>\nI am trying to subset values based on some condition. I have a\nDataFrame<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>   A  B  C  D  E\n1  9  3  5  2  4\n2  7  6  8  8  1\n<\/code><\/pre>\n<p>I would like to assign values in &quot;D&quot; to 123 such that &quot;C&quot; == 5. I\ntried<\/p>\n<pre><code>df2.loc[df2.C == 5, 'D'] = 123\n<\/code><\/pre>\n<p>Which seems fine but I am <em>still<\/em> getting the\n<code>SettingWithCopyWarning<\/code>! How do I fix this?<\/p>\n<\/blockquote>\n<p>This is actually probably because of code higher up in your pipeline. Did you create <code>df2<\/code> from something larger, like<\/p>\n<pre><code>df2 = df[df.A &gt; 5]\n<\/code><\/pre>\n<p>? In this case, boolean indexing will return a view, so <code>df2<\/code> will reference the original. What you'd need to do is assign <code>df2<\/code> to a <em>copy<\/em>:<\/p>\n<pre><code>df2 = df[df.A &gt; 5].copy()\n# Or,\n# df2 = df.loc[df.A &gt; 5, :]\n<\/code><\/pre>\n<br\/>\n<blockquote>\n<p><strong>Question 4<\/strong>\nI'm trying to drop column &quot;C&quot; in-place from<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>   A  B  C  D  E\n1  9  3  5  2  4\n2  7  6  8  8  1\n<\/code><\/pre>\n<p>But using<\/p>\n<pre><code>df2.drop('C', axis=1, inplace=True)\n<\/code><\/pre>\n<p>Throws <code>SettingWithCopyWarning<\/code>. Why is this happening?<\/p>\n<\/blockquote>\n<p>This is because <code>df2<\/code> must have been created as a view from some other slicing operation, such as<\/p>\n<pre><code>df2 = df[df.A &gt; 5]\n<\/code><\/pre>\n<p>The solution here is to either make a <code>copy()<\/code> of <code>df<\/code>, or use <code>loc<\/code>, as before.<\/p>\n\n","community_owned_date":null},{"owner":{"user_type":"does_not_exist","display_name":"user3850"},"is_accepted":true,"score":803,"last_activity_date":1493906676,"last_edit_date":1493906676.0,"creation_date":1223659626,"answer_id":192365,"question_id":192109,"content_license":"CC BY-SA 3.0","body_markdown":"You are really mixing together two different things.\r\n\r\nUse [`dir()`](https:\/\/docs.python.org\/3\/library\/functions.html#dir), [`vars()`](https:\/\/docs.python.org\/3\/library\/functions.html#vars) or the [`inspect`](https:\/\/docs.python.org\/3\/library\/inspect.html) module to get what you are interested in (I use `__builtins__` as an example; you can use any object instead).\r\n\r\n    &gt;&gt;&gt; l = dir(__builtins__)\r\n    &gt;&gt;&gt; d = __builtins__.__dict__\r\n\r\nPrint that dictionary however fancy you like:\r\n\r\n    &gt;&gt;&gt; print l\r\n    [&#39;ArithmeticError&#39;, &#39;AssertionError&#39;, &#39;AttributeError&#39;,...\r\n\r\nor\r\n\r\n    &gt;&gt;&gt; from pprint import pprint\r\n    &gt;&gt;&gt; pprint(l)\r\n    [&#39;ArithmeticError&#39;,\r\n     &#39;AssertionError&#39;,\r\n     &#39;AttributeError&#39;,\r\n     &#39;BaseException&#39;,\r\n     &#39;DeprecationWarning&#39;,\r\n    ...\r\n\r\n    &gt;&gt;&gt; pprint(d, indent=2)\r\n    { &#39;ArithmeticError&#39;: &lt;type &#39;exceptions.ArithmeticError&#39;&gt;,\r\n      &#39;AssertionError&#39;: &lt;type &#39;exceptions.AssertionError&#39;&gt;,\r\n      &#39;AttributeError&#39;: &lt;type &#39;exceptions.AttributeError&#39;&gt;,\r\n    ...\r\n      &#39;_&#39;: [ &#39;ArithmeticError&#39;,\r\n             &#39;AssertionError&#39;,\r\n             &#39;AttributeError&#39;,\r\n             &#39;BaseException&#39;,\r\n             &#39;DeprecationWarning&#39;,\r\n    ...\r\n\r\nPretty printing is also available in the interactive debugger as a command:\r\n\r\n    (Pdb) pp vars()\r\n    {&#39;__builtins__&#39;: {&#39;ArithmeticError&#39;: &lt;type &#39;exceptions.ArithmeticError&#39;&gt;,\r\n                      &#39;AssertionError&#39;: &lt;type &#39;exceptions.AssertionError&#39;&gt;,\r\n                      &#39;AttributeError&#39;: &lt;type &#39;exceptions.AttributeError&#39;&gt;,\r\n                      &#39;BaseException&#39;: &lt;type &#39;exceptions.BaseException&#39;&gt;,\r\n                      &#39;BufferError&#39;: &lt;type &#39;exceptions.BufferError&#39;&gt;,\r\n                      ...\r\n                      &#39;zip&#39;: &lt;built-in function zip&gt;},\r\n     &#39;__file__&#39;: &#39;pass.py&#39;,\r\n     &#39;__name__&#39;: &#39;__main__&#39;}\r\n\r\n\r\n","body":"<p>You are really mixing together two different things.<\/p>\n\n<p>Use <a href=\"https:\/\/docs.python.org\/3\/library\/functions.html#dir\" rel=\"noreferrer\"><code>dir()<\/code><\/a>, <a href=\"https:\/\/docs.python.org\/3\/library\/functions.html#vars\" rel=\"noreferrer\"><code>vars()<\/code><\/a> or the <a href=\"https:\/\/docs.python.org\/3\/library\/inspect.html\" rel=\"noreferrer\"><code>inspect<\/code><\/a> module to get what you are interested in (I use <code>__builtins__<\/code> as an example; you can use any object instead).<\/p>\n\n<pre><code>&gt;&gt;&gt; l = dir(__builtins__)\n&gt;&gt;&gt; d = __builtins__.__dict__\n<\/code><\/pre>\n\n<p>Print that dictionary however fancy you like:<\/p>\n\n<pre><code>&gt;&gt;&gt; print l\n['ArithmeticError', 'AssertionError', 'AttributeError',...\n<\/code><\/pre>\n\n<p>or<\/p>\n\n<pre><code>&gt;&gt;&gt; from pprint import pprint\n&gt;&gt;&gt; pprint(l)\n['ArithmeticError',\n 'AssertionError',\n 'AttributeError',\n 'BaseException',\n 'DeprecationWarning',\n...\n\n&gt;&gt;&gt; pprint(d, indent=2)\n{ 'ArithmeticError': &lt;type 'exceptions.ArithmeticError'&gt;,\n  'AssertionError': &lt;type 'exceptions.AssertionError'&gt;,\n  'AttributeError': &lt;type 'exceptions.AttributeError'&gt;,\n...\n  '_': [ 'ArithmeticError',\n         'AssertionError',\n         'AttributeError',\n         'BaseException',\n         'DeprecationWarning',\n...\n<\/code><\/pre>\n\n<p>Pretty printing is also available in the interactive debugger as a command:<\/p>\n\n<pre><code>(Pdb) pp vars()\n{'__builtins__': {'ArithmeticError': &lt;type 'exceptions.ArithmeticError'&gt;,\n                  'AssertionError': &lt;type 'exceptions.AssertionError'&gt;,\n                  'AttributeError': &lt;type 'exceptions.AttributeError'&gt;,\n                  'BaseException': &lt;type 'exceptions.BaseException'&gt;,\n                  'BufferError': &lt;type 'exceptions.BufferError'&gt;,\n                  ...\n                  'zip': &lt;built-in function zip&gt;},\n '__file__': 'pass.py',\n '__name__': '__main__'}\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":43135,"reputation":8553,"user_id":125924,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/53070ad2890f568f5b7346a27fea9f6d?s=256&d=identicon&r=PG","display_name":"Kyle","link":"https:\/\/stackoverflow.com\/users\/125924\/kyle"},"is_accepted":false,"score":803,"last_activity_date":1698977566,"last_edit_date":1698977566.0,"creation_date":1245438426,"answer_id":1019572,"question_id":845058,"content_license":"CC BY-SA 4.0","body_markdown":"One line, faster than the `for` loop of the OP (although not the fastest) and very concise:\r\n\r\n    num_lines = sum(1 for _ in open(&#39;myfile.txt&#39;))\r\n\r\nYou can also **boost the speed** (and robustness) by using `rbU` mode and include it in a `with` block to close the file:\r\n\r\n    with open(&quot;myfile.txt&quot;, &quot;rbU&quot;) as f:\r\n        num_lines = sum(1 for _ in f)\r\n\r\n\r\n***Note**: The `U` in `rbU` mode is deprecated since Python 3.3 and above, so iwe should use `rb` instead of `rbU` (and it has been removed in [Python 3.11][1]).*\r\n\r\n\r\n  [1]: https:\/\/docs.python.org\/3\/whatsnew\/3.11.html#porting-to-python-3-11","body":"<p>One line, faster than the <code>for<\/code> loop of the OP (although not the fastest) and very concise:<\/p>\n<pre><code>num_lines = sum(1 for _ in open('myfile.txt'))\n<\/code><\/pre>\n<p>You can also <strong>boost the speed<\/strong> (and robustness) by using <code>rbU<\/code> mode and include it in a <code>with<\/code> block to close the file:<\/p>\n<pre><code>with open(&quot;myfile.txt&quot;, &quot;rbU&quot;) as f:\n    num_lines = sum(1 for _ in f)\n<\/code><\/pre>\n<p><em><strong>Note<\/strong>: The <code>U<\/code> in <code>rbU<\/code> mode is deprecated since Python 3.3 and above, so iwe should use <code>rb<\/code> instead of <code>rbU<\/code> (and it has been removed in <a href=\"https:\/\/docs.python.org\/3\/whatsnew\/3.11.html#porting-to-python-3-11\" rel=\"noreferrer\">Python 3.11<\/a>).<\/em><\/p>\n","community_owned_date":null},{"owner":{"account_id":64456,"reputation":11662,"user_id":1292238,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/9b41e8dc5fb7440e261335294cd11b35?s=256&d=identicon&r=PG","display_name":"azalea","link":"https:\/\/stackoverflow.com\/users\/1292238\/azalea"},"is_accepted":false,"score":795,"last_activity_date":1524778979,"last_edit_date":1524778979.0,"creation_date":1404880094,"answer_id":24645416,"question_id":11618898,"content_license":"CC BY-SA 3.0","body_markdown":"On Mac OS X, I solved it using the [homebrew](https:\/\/brew.sh\/) package manager\r\n\r\n    brew install postgresql\r\n\r\n","body":"<p>On Mac OS X, I solved it using the <a href=\"https:\/\/brew.sh\/\" rel=\"noreferrer\">homebrew<\/a> package manager<\/p>\n\n<pre><code>brew install postgresql\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":9516,"reputation":131036,"user_id":17624,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/90285a816eda046ff55a0dcacc0c5ee8?s=256&d=identicon&r=PG","display_name":"Thomas Wouters","link":"https:\/\/stackoverflow.com\/users\/17624\/thomas-wouters"},"is_accepted":true,"score":792,"last_activity_date":1662361356,"last_edit_date":1662361356.0,"creation_date":1272227137,"answer_id":2709832,"question_id":2709821,"content_license":"CC BY-SA 4.0","body_markdown":"The reason you need to use `self.` is because Python does not use special syntax to refer to instance attributes. Python decided to do methods in a way that makes the instance to which the method belongs be *passed* automatically, but not *received* automatically: the first parameter of methods is the instance the method is called on. That makes methods entirely the same as functions, and leaves the actual name to use up to you (although `self` is the convention, and people will generally frown at you when you use something else.) `self` is not special to the code, it&#39;s just another object.\r\n\r\nPython could have done something else to distinguish normal names from attributes -- special syntax like Ruby has, or requiring declarations like C++ and Java do, or perhaps something  yet more different -- but it didn&#39;t. Python&#39;s all for making things explicit, making it obvious what&#39;s what, and although it doesn&#39;t do it entirely everywhere, it does do it for instance attributes. That&#39;s why assigning to an instance attribute needs to know what instance to assign to, and that&#39;s why it needs `self.`.","body":"<p>The reason you need to use <code>self.<\/code> is because Python does not use special syntax to refer to instance attributes. Python decided to do methods in a way that makes the instance to which the method belongs be <em>passed<\/em> automatically, but not <em>received<\/em> automatically: the first parameter of methods is the instance the method is called on. That makes methods entirely the same as functions, and leaves the actual name to use up to you (although <code>self<\/code> is the convention, and people will generally frown at you when you use something else.) <code>self<\/code> is not special to the code, it's just another object.<\/p>\n<p>Python could have done something else to distinguish normal names from attributes -- special syntax like Ruby has, or requiring declarations like C++ and Java do, or perhaps something  yet more different -- but it didn't. Python's all for making things explicit, making it obvious what's what, and although it doesn't do it entirely everywhere, it does do it for instance attributes. That's why assigning to an instance attribute needs to know what instance to assign to, and that's why it needs <code>self.<\/code>.<\/p>\n","community_owned_date":null},{"owner":{"account_id":3538323,"reputation":58289,"user_id":2956066,"user_type":"registered","accept_rate":74,"profile_image":"https:\/\/i.stack.imgur.com\/Bqbcr.png?s=256&g=1","display_name":"kmario23","link":"https:\/\/stackoverflow.com\/users\/2956066\/kmario23"},"is_accepted":false,"score":788,"last_activity_date":1657186391,"last_edit_date":1657186391.0,"creation_date":1475359488,"answer_id":39811884,"question_id":1471994,"content_license":"CC BY-SA 4.0","body_markdown":"It helps to install a python package `foo` on your machine (can also be in `virtualenv`) so that you can import the package `foo` from other projects and also from [I]Python prompts.\r\n\r\n***It does the similar job of `pip`, `easy_install` etc.,***\r\n\r\n----------\r\n**Using `setup.py`**\r\n\r\nLet&#39;s start with some definitions:\r\n\r\n*Package* - A folder\/directory that contains `__init__.py` file.\r\n*Module*  - A valid python file with `.py` extension.\r\n*Distribution* - How one *package* relates to other *packages* and *modules*.\r\n\r\nLet&#39;s say you want to install a package named `foo`. Then you do,\r\n\r\n    $ git clone https:\/\/github.com\/user\/foo\r\n    $ cd foo\r\n    $ python setup.py install\r\n\r\nInstead, if you don&#39;t want to actually install it but still would like to use it. Then do,\r\n\r\n    $ python setup.py develop\r\nThis command will create symlinks to the source directory within site-packages instead of copying things. Because of this, it is quite fast (particularly for large packages).\r\n\r\n----------\r\n\r\n**Creating `setup.py`**\r\n\r\nIf you have your package tree like,\r\n\r\n    foo\r\n    \u251c\u2500\u2500 foo\r\n    \u2502&#160;&#160; \u251c\u2500\u2500 data_struct.py\r\n    \u2502&#160;&#160; \u251c\u2500\u2500 __init__.py\r\n    \u2502&#160;&#160; \u2514\u2500\u2500 internals.py\r\n    \u251c\u2500\u2500 README\r\n    \u251c\u2500\u2500 requirements.txt\r\n    \u2514\u2500\u2500 setup.py\r\n\r\nThen, you do the following in your **`setup.py`** script so that it can be installed on some machine:\r\n\r\n    from setuptools import setup\r\n\r\n    setup(\r\n       name=&#39;foo&#39;,\r\n       version=&#39;1.0&#39;,\r\n       description=&#39;A useful module&#39;,\r\n       author=&#39;Man Foo&#39;,\r\n       author_email=&#39;foomail@foo.example&#39;,\r\n       packages=[&#39;foo&#39;],  #same as name\r\n       install_requires=[&#39;wheel&#39;, &#39;bar&#39;, &#39;greek&#39;], #external packages as dependencies\r\n    )\r\n\r\nInstead, if your package tree is more complex like the one below:\r\n\r\n    foo\r\n    \u251c\u2500\u2500 foo\r\n    \u2502&#160;&#160; \u251c\u2500\u2500 data_struct.py\r\n    \u2502&#160;&#160; \u251c\u2500\u2500 __init__.py\r\n    \u2502&#160;&#160; \u2514\u2500\u2500 internals.py\r\n    \u251c\u2500\u2500 README\r\n    \u251c\u2500\u2500 requirements.txt\r\n    \u251c\u2500\u2500 scripts\r\n    \u2502&#160;&#160; \u251c\u2500\u2500 cool\r\n    \u2502&#160;&#160; \u2514\u2500\u2500 skype\r\n    \u2514\u2500\u2500 setup.py\r\n\r\nThen, your **`setup.py`** in this case would be like:\r\n\r\n    from setuptools import setup\r\n\r\n    setup(\r\n       name=&#39;foo&#39;,\r\n       version=&#39;1.0&#39;,\r\n       description=&#39;A useful module&#39;,\r\n       author=&#39;Man Foo&#39;,\r\n       author_email=&#39;foomail@foo.example&#39;,\r\n       packages=[&#39;foo&#39;],  #same as name\r\n       install_requires=[&#39;wheel&#39;, &#39;bar&#39;, &#39;greek&#39;], #external packages as dependencies\r\n       scripts=[\r\n                &#39;scripts\/cool&#39;,\r\n                &#39;scripts\/skype&#39;,\r\n               ]\r\n    )\r\n\r\n----------\r\n\r\n**Add more stuff to (`setup.py`)** &amp; make it decent:\r\n\r\n    from setuptools import setup\r\n\r\n    with open(&quot;README&quot;, &#39;r&#39;) as f:\r\n        long_description = f.read()\r\n\r\n    setup(\r\n       name=&#39;foo&#39;,\r\n       version=&#39;1.0&#39;,\r\n       description=&#39;A useful module&#39;,\r\n       license=&quot;MIT&quot;,\r\n       long_description=long_description,\r\n       author=&#39;Man Foo&#39;,\r\n       author_email=&#39;foomail@foo.example&#39;,\r\n       url=&quot;http:\/\/www.foopackage.example\/&quot;,\r\n       packages=[&#39;foo&#39;],  #same as name\r\n       install_requires=[&#39;wheel&#39;, &#39;bar&#39;, &#39;greek&#39;], #external packages as dependencies\r\n       scripts=[\r\n                &#39;scripts\/cool&#39;,\r\n                &#39;scripts\/skype&#39;,\r\n               ]\r\n    )\r\n\r\nThe `long_description` is used in [pypi.org][1] as the README description of your package.\r\n\r\n----------\r\n\r\nAnd finally, you&#39;re now ready to upload your package to [PyPi.org][1] so that others can install your package using `pip install yourpackage`.\r\n\r\nAt this point there are two options.\r\n  - publish in the **temporary** [test.pypi.org][8] server to make oneself familiarize with the procedure, and then publish it on the *permanent* [pypi.org][5] server for the public to use your package.\r\n  - publish straight away on the **permanent** [pypi.org][5] server, if you are already familiar with the procedure and have your user credentials (e.g., username, password, package name)\r\n\r\nOnce your package name is registered in [pypi.org][5], nobody can claim or use it. [Python packaging suggests the **twine** package][7] for uploading purposes (of your package to PyPi). Thus,\r\n\r\n1. the first step is to locally *build* the distributions using:\r\n\r\n       # prereq: wheel (pip install wheel)\r\n       $ python setup.py sdist bdist_wheel\r\n\r\n2. then using `twine` for uploading either to `test.pypi.org` or `pypi.org`:\r\n\r\n       $ twine upload --repository testpypi dist\/*\r\n       username: ***\r\n       password: ***\r\n\r\nIt will take few minutes for the package to appear on `test.pypi.org`. Once you&#39;re satisfied with it, you can then upload your package to the real &amp; permanent index of [pypi.org][5] simply with:\r\n\r\n    $ twine upload dist\/*\r\n\r\nOptionally, you can also sign the files in your package with a `GPG` by:\r\n\r\n    $ twine upload dist\/* --sign\r\n\r\n--------------------------------\r\n**Bonus Reading**:\r\n  - See a sample **`setup.py`** from a real project here: [**`torchvision-setup.py`**][2]\r\n\r\n - [PEP 517][3], [setuptools][4]\r\n - [why twine? using twine][9]\r\n\r\n  [1]: https:\/\/pypi.org\/\r\n  [2]: https:\/\/github.com\/pytorch\/vision\/blob\/master\/setup.py\r\n  [3]: https:\/\/www.python.org\/dev\/peps\/pep-0517\/\r\n  [4]: https:\/\/setuptools.readthedocs.io\/en\/latest\/userguide\/quickstart.html\r\n  [5]: https:\/\/pypi.org\/account\/register\r\n  [6]: https:\/\/test.pypi.org\/account\/register\r\n  [7]: https:\/\/packaging.python.org\/tutorials\/packaging-projects\/#uploading-the-distribution-archives\r\n  [8]: https:\/\/packaging.python.org\/guides\/using-testpypi\r\n  [9]: https:\/\/twine.readthedocs.io\/en\/latest\/#using-twine","body":"<p>It helps to install a python package <code>foo<\/code> on your machine (can also be in <code>virtualenv<\/code>) so that you can import the package <code>foo<\/code> from other projects and also from [I]Python prompts.<\/p>\n<p><em><strong>It does the similar job of <code>pip<\/code>, <code>easy_install<\/code> etc.,<\/strong><\/em><\/p>\n<hr \/>\n<p><strong>Using <code>setup.py<\/code><\/strong><\/p>\n<p>Let's start with some definitions:<\/p>\n<p><em>Package<\/em> - A folder\/directory that contains <code>__init__.py<\/code> file.\n<em>Module<\/em>  - A valid python file with <code>.py<\/code> extension.\n<em>Distribution<\/em> - How one <em>package<\/em> relates to other <em>packages<\/em> and <em>modules<\/em>.<\/p>\n<p>Let's say you want to install a package named <code>foo<\/code>. Then you do,<\/p>\n<pre><code>$ git clone https:\/\/github.com\/user\/foo\n$ cd foo\n$ python setup.py install\n<\/code><\/pre>\n<p>Instead, if you don't want to actually install it but still would like to use it. Then do,<\/p>\n<pre><code>$ python setup.py develop\n<\/code><\/pre>\n<p>This command will create symlinks to the source directory within site-packages instead of copying things. Because of this, it is quite fast (particularly for large packages).<\/p>\n<hr \/>\n<p><strong>Creating <code>setup.py<\/code><\/strong><\/p>\n<p>If you have your package tree like,<\/p>\n<pre><code>foo\n\u251c\u2500\u2500 foo\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 data_struct.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 internals.py\n\u251c\u2500\u2500 README\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 setup.py\n<\/code><\/pre>\n<p>Then, you do the following in your <strong><code>setup.py<\/code><\/strong> script so that it can be installed on some machine:<\/p>\n<pre><code>from setuptools import setup\n\nsetup(\n   name='foo',\n   version='1.0',\n   description='A useful module',\n   author='Man Foo',\n   author_email='foomail@foo.example',\n   packages=['foo'],  #same as name\n   install_requires=['wheel', 'bar', 'greek'], #external packages as dependencies\n)\n<\/code><\/pre>\n<p>Instead, if your package tree is more complex like the one below:<\/p>\n<pre><code>foo\n\u251c\u2500\u2500 foo\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 data_struct.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 internals.py\n\u251c\u2500\u2500 README\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 scripts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 cool\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 skype\n\u2514\u2500\u2500 setup.py\n<\/code><\/pre>\n<p>Then, your <strong><code>setup.py<\/code><\/strong> in this case would be like:<\/p>\n<pre><code>from setuptools import setup\n\nsetup(\n   name='foo',\n   version='1.0',\n   description='A useful module',\n   author='Man Foo',\n   author_email='foomail@foo.example',\n   packages=['foo'],  #same as name\n   install_requires=['wheel', 'bar', 'greek'], #external packages as dependencies\n   scripts=[\n            'scripts\/cool',\n            'scripts\/skype',\n           ]\n)\n<\/code><\/pre>\n<hr \/>\n<p><strong>Add more stuff to (<code>setup.py<\/code>)<\/strong> &amp; make it decent:<\/p>\n<pre><code>from setuptools import setup\n\nwith open(&quot;README&quot;, 'r') as f:\n    long_description = f.read()\n\nsetup(\n   name='foo',\n   version='1.0',\n   description='A useful module',\n   license=&quot;MIT&quot;,\n   long_description=long_description,\n   author='Man Foo',\n   author_email='foomail@foo.example',\n   url=&quot;http:\/\/www.foopackage.example\/&quot;,\n   packages=['foo'],  #same as name\n   install_requires=['wheel', 'bar', 'greek'], #external packages as dependencies\n   scripts=[\n            'scripts\/cool',\n            'scripts\/skype',\n           ]\n)\n<\/code><\/pre>\n<p>The <code>long_description<\/code> is used in <a href=\"https:\/\/pypi.org\/\" rel=\"noreferrer\">pypi.org<\/a> as the README description of your package.<\/p>\n<hr \/>\n<p>And finally, you're now ready to upload your package to <a href=\"https:\/\/pypi.org\/\" rel=\"noreferrer\">PyPi.org<\/a> so that others can install your package using <code>pip install yourpackage<\/code>.<\/p>\n<p>At this point there are two options.<\/p>\n<ul>\n<li>publish in the <strong>temporary<\/strong> <a href=\"https:\/\/packaging.python.org\/guides\/using-testpypi\" rel=\"noreferrer\">test.pypi.org<\/a> server to make oneself familiarize with the procedure, and then publish it on the <em>permanent<\/em> <a href=\"https:\/\/pypi.org\/account\/register\" rel=\"noreferrer\">pypi.org<\/a> server for the public to use your package.<\/li>\n<li>publish straight away on the <strong>permanent<\/strong> <a href=\"https:\/\/pypi.org\/account\/register\" rel=\"noreferrer\">pypi.org<\/a> server, if you are already familiar with the procedure and have your user credentials (e.g., username, password, package name)<\/li>\n<\/ul>\n<p>Once your package name is registered in <a href=\"https:\/\/pypi.org\/account\/register\" rel=\"noreferrer\">pypi.org<\/a>, nobody can claim or use it. <a href=\"https:\/\/packaging.python.org\/tutorials\/packaging-projects\/#uploading-the-distribution-archives\" rel=\"noreferrer\">Python packaging suggests the <strong>twine<\/strong> package<\/a> for uploading purposes (of your package to PyPi). Thus,<\/p>\n<ol>\n<li><p>the first step is to locally <em>build<\/em> the distributions using:<\/p>\n<pre><code># prereq: wheel (pip install wheel)\n$ python setup.py sdist bdist_wheel\n<\/code><\/pre>\n<\/li>\n<li><p>then using <code>twine<\/code> for uploading either to <code>test.pypi.org<\/code> or <code>pypi.org<\/code>:<\/p>\n<pre><code>$ twine upload --repository testpypi dist\/*\nusername: ***\npassword: ***\n<\/code><\/pre>\n<\/li>\n<\/ol>\n<p>It will take few minutes for the package to appear on <code>test.pypi.org<\/code>. Once you're satisfied with it, you can then upload your package to the real &amp; permanent index of <a href=\"https:\/\/pypi.org\/account\/register\" rel=\"noreferrer\">pypi.org<\/a> simply with:<\/p>\n<pre><code>$ twine upload dist\/*\n<\/code><\/pre>\n<p>Optionally, you can also sign the files in your package with a <code>GPG<\/code> by:<\/p>\n<pre><code>$ twine upload dist\/* --sign\n<\/code><\/pre>\n<hr \/>\n<p><strong>Bonus Reading<\/strong>:<\/p>\n<ul>\n<li><p>See a sample <strong><code>setup.py<\/code><\/strong> from a real project here: <a href=\"https:\/\/github.com\/pytorch\/vision\/blob\/master\/setup.py\" rel=\"noreferrer\"><strong><code>torchvision-setup.py<\/code><\/strong><\/a><\/p>\n<\/li>\n<li><p><a href=\"https:\/\/www.python.org\/dev\/peps\/pep-0517\/\" rel=\"noreferrer\">PEP 517<\/a>, <a href=\"https:\/\/setuptools.readthedocs.io\/en\/latest\/userguide\/quickstart.html\" rel=\"noreferrer\">setuptools<\/a><\/p>\n<\/li>\n<li><p><a href=\"https:\/\/twine.readthedocs.io\/en\/latest\/#using-twine\" rel=\"noreferrer\">why twine? using twine<\/a><\/p>\n<\/li>\n<\/ul>\n","community_owned_date":null},{"owner":{"account_id":8847,"reputation":127022,"user_id":16102,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/0c4f4df702b23c8983f57d7113e809c8?s=256&d=identicon&r=PG","display_name":"Cat Plus Plus","link":"https:\/\/stackoverflow.com\/users\/16102\/cat-plus-plus"},"is_accepted":false,"score":786,"last_activity_date":1537371867,"last_edit_date":1537371867.0,"creation_date":1254054348,"answer_id":1483494,"question_id":1483429,"content_license":"CC BY-SA 4.0","body_markdown":"The [`traceback`][1] module provides methods for [formatting and printing exceptions][2] and their tracebacks, e.g. this would print exception like the default handler does:\r\n\r\n\r\n    import traceback\r\n    \r\n    try:\r\n    \t1\/0\r\n    except Exception:\r\n    \ttraceback.print_exc()\r\n\r\nOutput:\r\n\r\n    Traceback (most recent call last):\r\n      File &quot;C:\\scripts\\divide_by_zero.py&quot;, line 4, in &lt;module&gt;\r\n        1\/0\r\n    ZeroDivisionError: division by zero\r\n\r\n\r\n  [1]: http:\/\/docs.python.org\/library\/traceback.html\r\n  [2]: https:\/\/docs.python.org\/3\/library\/traceback.html#traceback-examples","body":"<p>The <a href=\"http:\/\/docs.python.org\/library\/traceback.html\" rel=\"noreferrer\"><code>traceback<\/code><\/a> module provides methods for <a href=\"https:\/\/docs.python.org\/3\/library\/traceback.html#traceback-examples\" rel=\"noreferrer\">formatting and printing exceptions<\/a> and their tracebacks, e.g. this would print exception like the default handler does:<\/p>\n\n<pre><code>import traceback\n\ntry:\n    1\/0\nexcept Exception:\n    traceback.print_exc()\n<\/code><\/pre>\n\n<p>Output:<\/p>\n\n<pre><code>Traceback (most recent call last):\n  File \"C:\\scripts\\divide_by_zero.py\", line 4, in &lt;module&gt;\n    1\/0\nZeroDivisionError: division by zero\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":4815,"reputation":374778,"user_id":7432,"user_type":"registered","accept_rate":94,"profile_image":"https:\/\/i.stack.imgur.com\/eYejG.png?s=256&g=1","display_name":"Bryan Oakley","link":"https:\/\/stackoverflow.com\/users\/7432\/bryan-oakley"},"is_accepted":false,"score":784,"last_activity_date":1643315384,"last_edit_date":1643315384.0,"creation_date":1224972054,"answer_id":237084,"question_id":237079,"content_license":"CC BY-SA 4.0","body_markdown":"You have a couple of choices. For one, you can use the [`os.path.getmtime`][1] and [`os.path.getctime`][2] functions:\r\n\r\n    import os.path, time\r\n    print(&quot;last modified: %s&quot; % time.ctime(os.path.getmtime(file)))\r\n    print(&quot;created: %s&quot; % time.ctime(os.path.getctime(file)))\r\n\r\nYour other option is to use [`os.stat`][3]:\r\n\r\n    import os, time\r\n    (mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) = os.stat(file)\r\n    print(&quot;last modified: %s&quot; % time.ctime(mtime))\r\n\r\n**Note**: `ctime()` does _not_ refer to creation time on *nix systems, but rather the last time the [inode][4] data changed. (Thanks to [kojiro for making that fact more clear][5] in the comments by providing a link to an interesting blog post.)\r\n\r\n\r\n  [1]: https:\/\/docs.python.org\/library\/os.path.html#os.path.getmtime\r\n  [2]: https:\/\/docs.python.org\/library\/os.path.html#os.path.getctime\r\n  [3]: https:\/\/docs.python.org\/library\/os.html#os.stat\r\n  [4]: https:\/\/en.wikipedia.org\/wiki\/Inode\r\n  [5]: https:\/\/stackoverflow.com\/questions\/237079\/how-to-get-file-creation-modification-date-times#comment9847709_237084","body":"<p>You have a couple of choices. For one, you can use the <a href=\"https:\/\/docs.python.org\/library\/os.path.html#os.path.getmtime\" rel=\"noreferrer\"><code>os.path.getmtime<\/code><\/a> and <a href=\"https:\/\/docs.python.org\/library\/os.path.html#os.path.getctime\" rel=\"noreferrer\"><code>os.path.getctime<\/code><\/a> functions:<\/p>\n<pre><code>import os.path, time\nprint(&quot;last modified: %s&quot; % time.ctime(os.path.getmtime(file)))\nprint(&quot;created: %s&quot; % time.ctime(os.path.getctime(file)))\n<\/code><\/pre>\n<p>Your other option is to use <a href=\"https:\/\/docs.python.org\/library\/os.html#os.stat\" rel=\"noreferrer\"><code>os.stat<\/code><\/a>:<\/p>\n<pre><code>import os, time\n(mode, ino, dev, nlink, uid, gid, size, atime, mtime, ctime) = os.stat(file)\nprint(&quot;last modified: %s&quot; % time.ctime(mtime))\n<\/code><\/pre>\n<p><strong>Note<\/strong>: <code>ctime()<\/code> does <em>not<\/em> refer to creation time on *nix systems, but rather the last time the <a href=\"https:\/\/en.wikipedia.org\/wiki\/Inode\" rel=\"noreferrer\">inode<\/a> data changed. (Thanks to <a href=\"https:\/\/stackoverflow.com\/questions\/237079\/how-to-get-file-creation-modification-date-times#comment9847709_237084\">kojiro for making that fact more clear<\/a> in the comments by providing a link to an interesting blog post.)<\/p>\n","community_owned_date":null},{"owner":{"account_id":2842085,"reputation":9631,"user_id":2441506,"user_type":"registered","accept_rate":0,"profile_image":"https:\/\/www.gravatar.com\/avatar\/6c40ce248e1f42380d3dbc1afc02c38b?s=256&d=identicon&r=PG","display_name":"ShikharDua","link":"https:\/\/stackoverflow.com\/users\/2441506\/shikhardua"},"is_accepted":false,"score":781,"last_activity_date":1689802041,"last_edit_date":1689802041.0,"creation_date":1373056693,"answer_id":17496530,"question_id":10715965,"content_license":"CC BY-SA 4.0","body_markdown":"In case you can get all data for the data frame upfront, there is a much faster approach than appending to a data frame: \r\n\r\n1. Create a list of dictionaries in which each dictionary corresponds to an input data row. \r\n2. Create a data frame from this list.\r\n\r\nI had a similar task for which appending to a data frame row by row took 30 min, and creating a data frame from a list of dictionaries completed within seconds.\r\n\r\n    rows_list = []\r\n    for row in input_rows:\r\n        dict1 = {}\r\n        # get input row in dictionary format\r\n        # key = col_name\r\n        dict1.update(blah..) \r\n\r\n        rows_list.append(dict1)\r\n\r\n    df = pd.DataFrame(rows_list)               \r\n\r\n","body":"<p>In case you can get all data for the data frame upfront, there is a much faster approach than appending to a data frame:<\/p>\n<ol>\n<li>Create a list of dictionaries in which each dictionary corresponds to an input data row.<\/li>\n<li>Create a data frame from this list.<\/li>\n<\/ol>\n<p>I had a similar task for which appending to a data frame row by row took 30 min, and creating a data frame from a list of dictionaries completed within seconds.<\/p>\n<pre><code>rows_list = []\nfor row in input_rows:\n    dict1 = {}\n    # get input row in dictionary format\n    # key = col_name\n    dict1.update(blah..) \n\n    rows_list.append(dict1)\n\ndf = pd.DataFrame(rows_list)               \n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":917680,"reputation":34336,"user_id":950111,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/fae697f476a1d1271cb98f73e43ac1a1?s=256&d=identicon&r=PG","display_name":"Ahmad Awais","link":"https:\/\/stackoverflow.com\/users\/950111\/ahmad-awais"},"is_accepted":false,"score":772,"last_activity_date":1663431802,"last_edit_date":1663431802.0,"creation_date":1466974645,"answer_id":38043109,"question_id":17271319,"content_license":"CC BY-SA 4.0","body_markdown":"### \u26a1\ufe0f **TL;DR** \u2014 One-line solution.\r\n\r\nRun the following command for Python v2.7 (default on Mac as of 2021)\r\n\r\n```lang-none\r\ncurl https:\/\/bootstrap.pypa.io\/pip\/2.7\/get-pip.py | python\r\n```\r\n\r\nRun the following command for Python v3\r\n\r\n```lang-none\r\ncurl https:\/\/bootstrap.pypa.io\/get-pip.py | python\r\n```\r\n\r\n*Or* the following if you have it installed as Python&amp;nbsp;3\r\n\r\n```lang-none\r\ncurl https:\/\/bootstrap.pypa.io\/get-pip.py | python3\r\n```\r\n\r\nAnother GIF image you said? Here you go!\r\n\r\n[![GIF install pip][4]][4]\r\n\r\n---\r\n\r\n**The** ***following used to work*** **in 2019 and before**\r\n\r\nAll you had to do was:\r\n\r\n```lang-none\r\nsudo easy_install pip\r\n```\r\n\r\n### 2019: \u26a0\ufe0f`easy_install` [has been deprecated][1]. Check **Method #2** below for the preferred installation!\r\n\r\n\r\n**Details:**\r\n\r\n&gt; \u26a1\ufe0f OK, I read the solutions given above, but here&#39;s an **easy** solution to install `pip`.\r\n\r\nThe macOS comes with the Python environment installed. But to make sure that you have Python installed open the terminal and run the following command.\r\n\r\n```lang-none\r\npython --version\r\n```\r\n\r\nIf this command returns a version number that means Python exists. This also means that you already have access to `easy_install` considering you are using macOS or OS&amp;nbsp;X.\r\n\r\n\u2139\ufe0f Now, all you have to do is run the following command.\r\n\r\n```lang-none\r\nsudo easy_install pip\r\n```\r\n\r\nAfter that, `pip` will be installed and you&#39;ll be able to use it for installing other packages.\r\n\r\nP.S. I ended up blogging a post about it. [QuickTip: How Do I Install pip on macOS or OS X?][2]\r\n\r\n---\r\n\r\n### \u2705 Method #2: Two line solution\r\n\r\n`easy_install` [has been deprecated][1]. Please use [`get-pip.py`][3] instead.\r\n\r\nDownload and install PIP\r\n\r\n```lang-none\r\ncurl https:\/\/bootstrap.pypa.io\/get-pip.py | python\r\n```\r\n\r\n  [1]: https:\/\/setuptools.readthedocs.io\/en\/latest\/easy_install.html\r\n  [2]: https:\/\/ahmadawais.com\/install-pip-macos-os-x-python\/\r\n  [3]: https:\/\/pip.pypa.io\/en\/stable\/installing\/#installing-with-get-pip-py\r\n  [4]: https:\/\/i.stack.imgur.com\/UWcuZ.gif\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","body":"<h3>\u26a1\ufe0f <strong>TL;DR<\/strong> \u2014 One-line solution.<\/h3>\n<p>Run the following command for Python v2.7 (default on Mac as of 2021)<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>curl https:\/\/bootstrap.pypa.io\/pip\/2.7\/get-pip.py | python\n<\/code><\/pre>\n<p>Run the following command for Python v3<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>curl https:\/\/bootstrap.pypa.io\/get-pip.py | python\n<\/code><\/pre>\n<p><em>Or<\/em> the following if you have it installed as Python\u00a03<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>curl https:\/\/bootstrap.pypa.io\/get-pip.py | python3\n<\/code><\/pre>\n<p>Another GIF image you said? Here you go!<\/p>\n<p><a href=\"https:\/\/i.stack.imgur.com\/UWcuZ.gif\" rel=\"noreferrer\"><img src=\"https:\/\/i.stack.imgur.com\/UWcuZ.gif\" alt=\"GIF install pip\" \/><\/a><\/p>\n<hr \/>\n<p><strong>The<\/strong> <em><strong>following used to work<\/strong><\/em> <strong>in 2019 and before<\/strong><\/p>\n<p>All you had to do was:<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>sudo easy_install pip\n<\/code><\/pre>\n<h3>2019: \u26a0\ufe0f<code>easy_install<\/code> <a href=\"https:\/\/setuptools.readthedocs.io\/en\/latest\/easy_install.html\" rel=\"noreferrer\">has been deprecated<\/a>. Check <strong>Method #2<\/strong> below for the preferred installation!<\/h3>\n<p><strong>Details:<\/strong><\/p>\n<blockquote>\n<p>\u26a1\ufe0f OK, I read the solutions given above, but here's an <strong>easy<\/strong> solution to install <code>pip<\/code>.<\/p>\n<\/blockquote>\n<p>The macOS comes with the Python environment installed. But to make sure that you have Python installed open the terminal and run the following command.<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>python --version\n<\/code><\/pre>\n<p>If this command returns a version number that means Python exists. This also means that you already have access to <code>easy_install<\/code> considering you are using macOS or OS\u00a0X.<\/p>\n<p>\u2139\ufe0f Now, all you have to do is run the following command.<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>sudo easy_install pip\n<\/code><\/pre>\n<p>After that, <code>pip<\/code> will be installed and you'll be able to use it for installing other packages.<\/p>\n<p>P.S. I ended up blogging a post about it. <a href=\"https:\/\/ahmadawais.com\/install-pip-macos-os-x-python\/\" rel=\"noreferrer\">QuickTip: How Do I Install pip on macOS or OS X?<\/a><\/p>\n<hr \/>\n<h3>\u2705 Method #2: Two line solution<\/h3>\n<p><code>easy_install<\/code> <a href=\"https:\/\/setuptools.readthedocs.io\/en\/latest\/easy_install.html\" rel=\"noreferrer\">has been deprecated<\/a>. Please use <a href=\"https:\/\/pip.pypa.io\/en\/stable\/installing\/#installing-with-get-pip-py\" rel=\"noreferrer\"><code>get-pip.py<\/code><\/a> instead.<\/p>\n<p>Download and install PIP<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>curl https:\/\/bootstrap.pypa.io\/get-pip.py | python\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"user_type":"does_not_exist","display_name":"unbeknown"},"is_accepted":true,"score":770,"last_activity_date":1648545693,"last_edit_date":1648545693.0,"creation_date":1225969125,"answer_id":268285,"question_id":268272,"content_license":"CC BY-SA 4.0","body_markdown":"You can use &lt;code&gt;operator.itemgetter&lt;\/code&gt; for that:\r\n\r\n    import operator\r\n    stats = {&#39;a&#39;: 1000, &#39;b&#39;: 3000, &#39;c&#39;: 100}\r\n    max(stats.iteritems(), key=operator.itemgetter(1))[0]\r\nAnd instead of building a new list in memory use `stats.iteritems()`. The `key` parameter to the `max()` function is a function that computes a key that is used to determine how to rank items.\r\n\r\nPlease note that if you were to have another key-value pair &#39;d&#39;: 3000 that this method will only return **one** of the **two** even though they both have the maximum value. \r\n\r\n    &gt;&gt;&gt; import operator\r\n    &gt;&gt;&gt; stats = {&#39;a&#39;: 1000, &#39;b&#39;: 3000, &#39;c&#39;: 100, &#39;d&#39;: 3000}\r\n    &gt;&gt;&gt; max(stats.iteritems(), key=operator.itemgetter(1))[0]\r\n    &#39;b&#39; \r\n\r\nIf using Python3:\r\n\r\n    &gt;&gt;&gt; max(stats.items(), key=operator.itemgetter(1))[0]\r\n    &#39;b&#39;","body":"<p>You can use <code>operator.itemgetter<\/code> for that:<\/p>\n<pre><code>import operator\nstats = {'a': 1000, 'b': 3000, 'c': 100}\nmax(stats.iteritems(), key=operator.itemgetter(1))[0]\n<\/code><\/pre>\n<p>And instead of building a new list in memory use <code>stats.iteritems()<\/code>. The <code>key<\/code> parameter to the <code>max()<\/code> function is a function that computes a key that is used to determine how to rank items.<\/p>\n<p>Please note that if you were to have another key-value pair 'd': 3000 that this method will only return <strong>one<\/strong> of the <strong>two<\/strong> even though they both have the maximum value.<\/p>\n<pre><code>&gt;&gt;&gt; import operator\n&gt;&gt;&gt; stats = {'a': 1000, 'b': 3000, 'c': 100, 'd': 3000}\n&gt;&gt;&gt; max(stats.iteritems(), key=operator.itemgetter(1))[0]\n'b' \n<\/code><\/pre>\n<p>If using Python3:<\/p>\n<pre><code>&gt;&gt;&gt; max(stats.items(), key=operator.itemgetter(1))[0]\n'b'\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":13903,"reputation":393857,"user_id":28169,"user_type":"registered","accept_rate":88,"profile_image":"https:\/\/www.gravatar.com\/avatar\/ec9385dc533f1a6a93769077f852503e?s=256&d=identicon&r=PG","display_name":"unwind","link":"https:\/\/stackoverflow.com\/users\/28169\/unwind"},"is_accepted":true,"score":766,"last_activity_date":1628307794,"last_edit_date":1628307794.0,"creation_date":1276007320,"answer_id":2998228,"question_id":2998215,"content_license":"CC BY-SA 4.0","body_markdown":"They contain [byte code][1], which is what the Python interpreter compiles the source to. This code is then executed by Python&#39;s virtual machine. \r\n\r\n[Python&#39;s documentation][2] explains the definition like this:\r\n\r\n&gt; Python is an interpreted language, as\r\n&gt; opposed to a compiled one, though the\r\n&gt; distinction can be blurry because of\r\n&gt; the presence of the bytecode compiler.\r\n&gt; This means that source files can be\r\n&gt; run directly without explicitly\r\n&gt; creating an executable which is then\r\n&gt; run.\r\n\r\n\r\n  [1]: http:\/\/en.wikipedia.org\/wiki\/Bytecode\r\n  [2]: https:\/\/docs.python.org\/3\/glossary.html#term-interpreted","body":"<p>They contain <a href=\"http:\/\/en.wikipedia.org\/wiki\/Bytecode\" rel=\"noreferrer\">byte code<\/a>, which is what the Python interpreter compiles the source to. This code is then executed by Python's virtual machine.<\/p>\n<p><a href=\"https:\/\/docs.python.org\/3\/glossary.html#term-interpreted\" rel=\"noreferrer\">Python's documentation<\/a> explains the definition like this:<\/p>\n<blockquote>\n<p>Python is an interpreted language, as\nopposed to a compiled one, though the\ndistinction can be blurry because of\nthe presence of the bytecode compiler.\nThis means that source files can be\nrun directly without explicitly\ncreating an executable which is then\nrun.<\/p>\n<\/blockquote>\n","community_owned_date":null},{"owner":{"account_id":34048,"reputation":861721,"user_id":95810,"user_type":"registered","accept_rate":80,"profile_image":"https:\/\/www.gravatar.com\/avatar\/e8d5fe90f1fe2148bf130cccd4dc311c?s=256&d=identicon&r=PG","display_name":"Alex Martelli","link":"https:\/\/stackoverflow.com\/users\/95810\/alex-martelli"},"is_accepted":false,"score":763,"last_activity_date":1599420641,"last_edit_date":1599420641.0,"creation_date":1274070965,"answer_id":2846697,"question_id":2846653,"content_license":"CC BY-SA 4.0","body_markdown":"Here&#39;s a simple example: you need to try a few alternative URLs and return the contents of the first one to respond.\r\n\r\n    import Queue\r\n    import threading\r\n    import urllib2\r\n\r\n    # Called by each thread\r\n    def get_url(q, url):\r\n        q.put(urllib2.urlopen(url).read())\r\n\r\n    theurls = [&quot;http:\/\/google.com&quot;, &quot;http:\/\/yahoo.com&quot;]\r\n\r\n    q = Queue.Queue()\r\n\r\n    for u in theurls:\r\n        t = threading.Thread(target=get_url, args = (q,u))\r\n        t.daemon = True\r\n        t.start()\r\n\r\n    s = q.get()\r\n    print s\r\n\r\nThis is a case where threading is used as a simple optimization: each subthread is waiting for a URL to resolve and respond, to put its contents on the queue; each thread is a daemon (won&#39;t keep the process up if the main thread ends -- that&#39;s more common than not); the main thread starts all subthreads, does a `get` on the queue to wait until one of them has done a `put`, then emits the results and terminates (which takes down any subthreads that might still be running, since they&#39;re daemon threads).\r\n\r\nProper use of threads in Python is invariably connected to I\/O operations (since CPython doesn&#39;t use multiple cores to run CPU-bound tasks anyway, the only reason for threading is not blocking the process while there&#39;s a wait for some I\/O). Queues are almost invariably the best way to farm out work to threads and\/or collect the work&#39;s results, by the way, and they&#39;re intrinsically threadsafe, so they save you from worrying about locks, conditions, events, semaphores, and other inter-thread coordination\/communication concepts.","body":"<p>Here's a simple example: you need to try a few alternative URLs and return the contents of the first one to respond.<\/p>\n<pre><code>import Queue\nimport threading\nimport urllib2\n\n# Called by each thread\ndef get_url(q, url):\n    q.put(urllib2.urlopen(url).read())\n\ntheurls = [&quot;http:\/\/google.com&quot;, &quot;http:\/\/yahoo.com&quot;]\n\nq = Queue.Queue()\n\nfor u in theurls:\n    t = threading.Thread(target=get_url, args = (q,u))\n    t.daemon = True\n    t.start()\n\ns = q.get()\nprint s\n<\/code><\/pre>\n<p>This is a case where threading is used as a simple optimization: each subthread is waiting for a URL to resolve and respond, to put its contents on the queue; each thread is a daemon (won't keep the process up if the main thread ends -- that's more common than not); the main thread starts all subthreads, does a <code>get<\/code> on the queue to wait until one of them has done a <code>put<\/code>, then emits the results and terminates (which takes down any subthreads that might still be running, since they're daemon threads).<\/p>\n<p>Proper use of threads in Python is invariably connected to I\/O operations (since CPython doesn't use multiple cores to run CPU-bound tasks anyway, the only reason for threading is not blocking the process while there's a wait for some I\/O). Queues are almost invariably the best way to farm out work to threads and\/or collect the work's results, by the way, and they're intrinsically threadsafe, so they save you from worrying about locks, conditions, events, semaphores, and other inter-thread coordination\/communication concepts.<\/p>\n","community_owned_date":null},{"owner":{"account_id":4350,"reputation":84112,"user_id":6491,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/fd7da9bf7b009ceb7a7037906361c9eb?s=256&d=identicon&r=PG","display_name":"gimel","link":"https:\/\/stackoverflow.com\/users\/6491\/gimel"},"is_accepted":false,"score":760,"last_activity_date":1562690674,"last_edit_date":1562690674.0,"creation_date":1237913393,"answer_id":678266,"question_id":678236,"content_license":"CC BY-SA 4.0","body_markdown":"You can make your own with:\r\n\r\n    &gt;&gt;&gt; import os\r\n    &gt;&gt;&gt; base=os.path.basename(&#39;\/root\/dir\/sub\/file.ext&#39;)\r\n    &gt;&gt;&gt; base\r\n    &#39;file.ext&#39;\r\n    &gt;&gt;&gt; os.path.splitext(base)\r\n    (&#39;file&#39;, &#39;.ext&#39;)\r\n    &gt;&gt;&gt; os.path.splitext(base)[0]\r\n    &#39;file&#39;\r\n\r\nImportant note: If there is more than one `.` in the filename, only the last one is removed. For example:\r\n\r\n    \/root\/dir\/sub\/file.ext.zip -&gt; file.ext\r\n\r\n    \/root\/dir\/sub\/file.ext.tar.gz -&gt; file.ext.tar\r\n\r\nSee below for other answers that address that.\r\n\r\n\r\n\r\n    \r\n    ","body":"<p>You can make your own with:<\/p>\n\n<pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; base=os.path.basename('\/root\/dir\/sub\/file.ext')\n&gt;&gt;&gt; base\n'file.ext'\n&gt;&gt;&gt; os.path.splitext(base)\n('file', '.ext')\n&gt;&gt;&gt; os.path.splitext(base)[0]\n'file'\n<\/code><\/pre>\n\n<p>Important note: If there is more than one <code>.<\/code> in the filename, only the last one is removed. For example:<\/p>\n\n<pre><code>\/root\/dir\/sub\/file.ext.zip -&gt; file.ext\n\n\/root\/dir\/sub\/file.ext.tar.gz -&gt; file.ext.tar\n<\/code><\/pre>\n\n<p>See below for other answers that address that.<\/p>\n","community_owned_date":null},{"owner":{"account_id":9516,"reputation":131036,"user_id":17624,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/90285a816eda046ff55a0dcacc0c5ee8?s=256&d=identicon&r=PG","display_name":"Thomas Wouters","link":"https:\/\/stackoverflow.com\/users\/17624\/thomas-wouters"},"is_accepted":false,"score":739,"last_activity_date":1326903830,"last_edit_date":1326903830.0,"creation_date":1221832035,"answer_id":101945,"question_id":101268,"content_license":"CC BY-SA 3.0","body_markdown":"Chaining comparison operators:\r\n------------------------------\r\n\r\n    &gt;&gt;&gt; x = 5\r\n    &gt;&gt;&gt; 1 &lt; x &lt; 10\r\n    True\r\n    &gt;&gt;&gt; 10 &lt; x &lt; 20 \r\n    False\r\n    &gt;&gt;&gt; x &lt; 10 &lt; x*10 &lt; 100\r\n    True\r\n    &gt;&gt;&gt; 10 &gt; x &lt;= 9\r\n    True\r\n    &gt;&gt;&gt; 5 == x &gt; 4\r\n    True\r\n\r\nIn case you&#39;re thinking it&#39;s doing `1 &lt; x`, which comes out as `True`, and then comparing `True &lt; 10`, which is also `True`, then no, that&#39;s really not what happens (see the last example.) It&#39;s really translating into `1 &lt; x and x &lt; 10`, and `x &lt; 10 and 10 &lt; x * 10 and x*10 &lt; 100`, but with less typing and each term is only evaluated once.","body":"<h2>Chaining comparison operators:<\/h2>\n\n<pre><code>&gt;&gt;&gt; x = 5\n&gt;&gt;&gt; 1 &lt; x &lt; 10\nTrue\n&gt;&gt;&gt; 10 &lt; x &lt; 20 \nFalse\n&gt;&gt;&gt; x &lt; 10 &lt; x*10 &lt; 100\nTrue\n&gt;&gt;&gt; 10 &gt; x &lt;= 9\nTrue\n&gt;&gt;&gt; 5 == x &gt; 4\nTrue\n<\/code><\/pre>\n\n<p>In case you're thinking it's doing <code>1 &lt; x<\/code>, which comes out as <code>True<\/code>, and then comparing <code>True &lt; 10<\/code>, which is also <code>True<\/code>, then no, that's really not what happens (see the last example.) It's really translating into <code>1 &lt; x and x &lt; 10<\/code>, and <code>x &lt; 10 and 10 &lt; x * 10 and x*10 &lt; 100<\/code>, but with less typing and each term is only evaluated once.<\/p>\n","community_owned_date":1222009237.0},{"owner":{"account_id":47344,"reputation":72997,"user_id":140185,"user_type":"registered","accept_rate":93,"profile_image":"https:\/\/www.gravatar.com\/avatar\/3d8fead2a83893fb2f03eec42ece2de3?s=256&d=identicon&r=PG","display_name":"Manoj Govindan","link":"https:\/\/stackoverflow.com\/users\/140185\/manoj-govindan"},"is_accepted":true,"score":715,"last_activity_date":1592085624,"last_edit_date":1592085624.0,"creation_date":1285156938,"answer_id":3768975,"question_id":3768895,"content_license":"CC BY-SA 4.0","body_markdown":"Do you have an idea about the expected output? For example, will this do?\r\n\r\n    &gt;&gt;&gt; f  = FileItem(&quot;\/foo\/bar&quot;)\r\n    &gt;&gt;&gt; magic(f)\r\n    &#39;{&quot;fname&quot;: &quot;\/foo\/bar&quot;}&#39;\r\n\r\nIn that case you can merely call `json.dumps(f.__dict__)`. \r\n\r\nIf you want more customized output then you will have to subclass [`JSONEncoder`][1] and implement your own custom serialization. \r\n\r\nFor a trivial example, see below.\r\n\r\n    &gt;&gt;&gt; from json import JSONEncoder\r\n    &gt;&gt;&gt; class MyEncoder(JSONEncoder):\r\n    \t    def default(self, o):\r\n    \t        return o.__dict__    \r\n    \t\r\n    &gt;&gt;&gt; MyEncoder().encode(f)\r\n    &#39;{&quot;fname&quot;: &quot;\/foo\/bar&quot;}&#39;\r\n\r\nThen you pass this class into the [`json.dumps()`][2] method as `cls` kwarg:\r\n\r\n    json.dumps(cls=MyEncoder)\r\n\r\nIf you also want to decode then you&#39;ll have to supply a custom `object_hook` to the [`JSONDecoder`][3] class. For example:\r\n\r\n    &gt;&gt;&gt; def from_json(json_object):\r\n    \t\tif &#39;fname&#39; in json_object:\r\n    \t\t\treturn FileItem(json_object[&#39;fname&#39;])\r\n    &gt;&gt;&gt; f = JSONDecoder(object_hook = from_json).decode(&#39;{&quot;fname&quot;: &quot;\/foo\/bar&quot;}&#39;)\r\n    &gt;&gt;&gt; f\r\n    &lt;__main__.FileItem object at 0x9337fac&gt;\r\n    &gt;&gt;&gt; \r\n\r\n\r\n  [1]: https:\/\/docs.python.org\/library\/json.html#json.JSONEncoder\r\n  [2]: https:\/\/docs.python.org\/library\/json.html#json.dumps\r\n  [3]: https:\/\/docs.python.org\/library\/json.html#json.JSONDecoder","body":"<p>Do you have an idea about the expected output? For example, will this do?<\/p>\n\n<pre><code>&gt;&gt;&gt; f  = FileItem(\"\/foo\/bar\")\n&gt;&gt;&gt; magic(f)\n'{\"fname\": \"\/foo\/bar\"}'\n<\/code><\/pre>\n\n<p>In that case you can merely call <code>json.dumps(f.__dict__)<\/code>. <\/p>\n\n<p>If you want more customized output then you will have to subclass <a href=\"https:\/\/docs.python.org\/library\/json.html#json.JSONEncoder\" rel=\"noreferrer\"><code>JSONEncoder<\/code><\/a> and implement your own custom serialization. <\/p>\n\n<p>For a trivial example, see below.<\/p>\n\n<pre><code>&gt;&gt;&gt; from json import JSONEncoder\n&gt;&gt;&gt; class MyEncoder(JSONEncoder):\n        def default(self, o):\n            return o.__dict__    \n\n&gt;&gt;&gt; MyEncoder().encode(f)\n'{\"fname\": \"\/foo\/bar\"}'\n<\/code><\/pre>\n\n<p>Then you pass this class into the <a href=\"https:\/\/docs.python.org\/library\/json.html#json.dumps\" rel=\"noreferrer\"><code>json.dumps()<\/code><\/a> method as <code>cls<\/code> kwarg:<\/p>\n\n<pre><code>json.dumps(cls=MyEncoder)\n<\/code><\/pre>\n\n<p>If you also want to decode then you'll have to supply a custom <code>object_hook<\/code> to the <a href=\"https:\/\/docs.python.org\/library\/json.html#json.JSONDecoder\" rel=\"noreferrer\"><code>JSONDecoder<\/code><\/a> class. For example:<\/p>\n\n<pre><code>&gt;&gt;&gt; def from_json(json_object):\n        if 'fname' in json_object:\n            return FileItem(json_object['fname'])\n&gt;&gt;&gt; f = JSONDecoder(object_hook = from_json).decode('{\"fname\": \"\/foo\/bar\"}')\n&gt;&gt;&gt; f\n&lt;__main__.FileItem object at 0x9337fac&gt;\n&gt;&gt;&gt; \n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":12480,"reputation":124645,"user_id":24587,"user_type":"registered","accept_rate":83,"profile_image":"https:\/\/www.gravatar.com\/avatar\/eee8bfaac21bd749ecbf1f1a1783d9d0?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"Georg Sch&#246;lly","link":"https:\/\/stackoverflow.com\/users\/24587\/georg-sch%c3%b6lly"},"is_accepted":false,"score":701,"last_activity_date":1646413354,"last_edit_date":1646413354.0,"creation_date":1261572818,"answer_id":1952655,"question_id":1952464,"content_license":"CC BY-SA 4.0","body_markdown":"Duck typing\r\n-----------\r\n\r\n    try:\r\n        iterator = iter(the_element)\r\n    except TypeError:\r\n        # not iterable\r\n    else:\r\n        # iterable\r\n\r\n    # for obj in iterator:\r\n    #     pass\r\n\r\nType checking\r\n-------------\r\n\r\nUse the [Abstract Base Classes][abc]. They need at least Python 2.6 and work only for new-style classes.\r\n\r\n    from collections.abc import Iterable   # import directly from collections for Python &lt; 3.3\r\n\r\n    if isinstance(the_element, Iterable):\r\n        # iterable\r\n    else:\r\n        # not iterable\r\n\r\nHowever, `iter()` is a bit more reliable as described [by the documentation][iterable]:\r\n\r\n&gt; Checking `isinstance(obj, Iterable)` detects classes that are\r\n&gt; registered as Iterable or that have an `__iter__()` method, but\r\n&gt; it does not detect classes that iterate with the `__getitem__()`\r\n&gt; method. The only reliable way to determine whether an object\r\n&gt; is iterable is to call `iter(obj)`.\r\n\r\n  [abc]: https:\/\/docs.python.org\/library\/abc.html\r\n  [iterable]: https:\/\/docs.python.org\/library\/collections.abc.html#collections.abc.Iterable","body":"<h2>Duck typing<\/h2>\n<pre><code>try:\n    iterator = iter(the_element)\nexcept TypeError:\n    # not iterable\nelse:\n    # iterable\n\n# for obj in iterator:\n#     pass\n<\/code><\/pre>\n<h2>Type checking<\/h2>\n<p>Use the <a href=\"https:\/\/docs.python.org\/library\/abc.html\" rel=\"noreferrer\">Abstract Base Classes<\/a>. They need at least Python 2.6 and work only for new-style classes.<\/p>\n<pre><code>from collections.abc import Iterable   # import directly from collections for Python &lt; 3.3\n\nif isinstance(the_element, Iterable):\n    # iterable\nelse:\n    # not iterable\n<\/code><\/pre>\n<p>However, <code>iter()<\/code> is a bit more reliable as described <a href=\"https:\/\/docs.python.org\/library\/collections.abc.html#collections.abc.Iterable\" rel=\"noreferrer\">by the documentation<\/a>:<\/p>\n<blockquote>\n<p>Checking <code>isinstance(obj, Iterable)<\/code> detects classes that are\nregistered as Iterable or that have an <code>__iter__()<\/code> method, but\nit does not detect classes that iterate with the <code>__getitem__()<\/code>\nmethod. The only reliable way to determine whether an object\nis iterable is to call <code>iter(obj)<\/code>.<\/p>\n<\/blockquote>\n","community_owned_date":null},{"owner":{"account_id":397124,"reputation":18635,"user_id":761090,"user_type":"registered","accept_rate":70,"profile_image":"https:\/\/www.gravatar.com\/avatar\/f1f2a78bb5182bae8adb98e08aa214c6?s=256&d=identicon&r=PG","display_name":"eudoxos","link":"https:\/\/stackoverflow.com\/users\/761090\/eudoxos"},"is_accepted":false,"score":700,"last_activity_date":1440856218,"last_edit_date":1440856218.0,"creation_date":1350548385,"answer_id":12950101,"question_id":122327,"content_license":"CC BY-SA 3.0","body_markdown":"    &gt;&gt;&gt; import site; site.getsitepackages()\r\n    [&#39;\/usr\/local\/lib\/python2.7\/dist-packages&#39;, &#39;\/usr\/lib\/python2.7\/dist-packages&#39;]\r\n\r\n(or just first item with `site.getsitepackages()[0]`)\r\n\r\n","body":"<pre><code>&gt;&gt;&gt; import site; site.getsitepackages()\n['\/usr\/local\/lib\/python2.7\/dist-packages', '\/usr\/lib\/python2.7\/dist-packages']\n<\/code><\/pre>\n\n<p>(or just first item with <code>site.getsitepackages()[0]<\/code>)<\/p>\n","community_owned_date":null},{"owner":{"account_id":49351,"reputation":8181,"user_id":146898,"user_type":"registered","accept_rate":0,"profile_image":"https:\/\/www.gravatar.com\/avatar\/04ba7f82aff394750a565b2de80e3d12?s=256&d=identicon&r=PG","display_name":"hasanatkazmi","link":"https:\/\/stackoverflow.com\/users\/146898\/hasanatkazmi"},"is_accepted":false,"score":696,"last_activity_date":1654780161,"last_edit_date":1654780161.0,"creation_date":1373094568,"answer_id":17500651,"question_id":7585435,"content_license":"CC BY-SA 4.0","body_markdown":"It&#39;s easier than it is thought:\r\n\r\n    my_str = &quot;hello world&quot;\r\n    my_str_as_bytes = str.encode(my_str)\r\n    print(type(my_str_as_bytes)) # ensure it is byte representation\r\n    my_decoded_str = my_str_as_bytes.decode()\r\n    print(type(my_decoded_str)) # ensure it is string representation\r\n\r\nyou can verify by printing the types. Refer to output below.\r\n\r\n    &lt;class &#39;bytes&#39;&gt;\r\n    &lt;class &#39;str&#39;&gt;","body":"<p>It's easier than it is thought:<\/p>\n<pre><code>my_str = &quot;hello world&quot;\nmy_str_as_bytes = str.encode(my_str)\nprint(type(my_str_as_bytes)) # ensure it is byte representation\nmy_decoded_str = my_str_as_bytes.decode()\nprint(type(my_decoded_str)) # ensure it is string representation\n<\/code><\/pre>\n<p>you can verify by printing the types. Refer to output below.<\/p>\n<pre><code>&lt;class 'bytes'&gt;\n&lt;class 'str'&gt;\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":21147,"reputation":130581,"user_id":51197,"user_type":"registered","accept_rate":80,"profile_image":"https:\/\/i.stack.imgur.com\/QG9pG.jpg?s=256&g=1","display_name":"Adam Matan","link":"https:\/\/stackoverflow.com\/users\/51197\/adam-matan"},"is_accepted":true,"score":664,"last_activity_date":1696110177,"last_edit_date":1696110177.0,"creation_date":1401181542,"answer_id":23885252,"question_id":739993,"content_license":"CC BY-SA 4.0","body_markdown":"## Solution\r\n\r\n# Do not use with pip &gt; 10.0!\r\n\r\nMy 50 cents for getting a `pip freeze`-like list from a Python script:\r\n\r\n&lt;!-- language: lang-python --&gt;\r\n\r\n    import pip\r\n    installed_packages = pip.get_installed_distributions()\r\n    installed_packages_list = sorted([&quot;%s==%s&quot; % (i.key, i.version)\r\n         for i in installed_packages])\r\n    print(installed_packages_list)\r\n\r\nAs a (too long) one liner:\r\n\r\n&lt;!-- language: lang-python --&gt;\r\n\r\n    sorted([&quot;%s==%s&quot; % (i.key, i.version) for i in pip.get_installed_distributions()])\r\n\r\nGiving:\r\n\r\n```lang-none\r\n[&#39;behave==1.2.4&#39;, &#39;enum34==1.0&#39;, &#39;flask==0.10.1&#39;, &#39;itsdangerous==0.24&#39;,\r\n &#39;jinja2==2.7.2&#39;, &#39;jsonschema==2.3.0&#39;, &#39;markupsafe==0.23&#39;, &#39;nose==1.3.3&#39;,\r\n &#39;parse-type==0.3.4&#39;, &#39;parse==1.6.4&#39;, &#39;prettytable==0.7.2&#39;, &#39;requests==2.3.0&#39;,\r\n &#39;six==1.6.1&#39;, &#39;vioozer-metadata==0.1&#39;, &#39;vioozer-users-server==0.1&#39;,\r\n &#39;werkzeug==0.9.4&#39;]\r\n```\r\n\r\n## Scope\r\n\r\nThis solution applies to the system scope or to a virtual environment scope, and covers packages installed by `setuptools`, `pip` and ([god forbid][1]) `easy_install`.\r\n\r\n## My use case\r\n\r\nI added the result of this call to my Flask server, so when I call it with `http:\/\/example.com\/exampleServer\/environment` I get the list of packages installed on the server&#39;s virtualenv. It makes debugging a whole lot easier.\r\n\r\n## Caveats\r\n\r\nI have noticed a strange behaviour of this technique - when the Python interpreter is invoked in the same directory as a `setup.py` file, it does not list the package installed by `setup.py`.\r\n\r\n### Steps to reproduce:\r\n\r\n#### Create a virtual environment\r\n\r\n```lang-none\r\n$ cd \/tmp\r\n$ virtualenv test_env\r\nNew python executable in test_env\/bin\/python\r\nInstalling setuptools, pip...done.\r\n$ source test_env\/bin\/activate\r\n(test_env) $\r\n```\r\n\r\n#### Clone a Git repository with `setup.py`\r\n\r\n```lang-none\r\n(test_env) $ git clone https:\/\/github.com\/behave\/behave.git\r\nCloning into &#39;behave&#39;...\r\nremote: Reusing existing pack: 4350, done.\r\nremote: Total 4350 (delta 0), reused 0 (delta 0)\r\nReceiving objects: 100% (4350\/4350), 1.85 MiB | 418.00 KiB\/s, done.\r\nResolving deltas: 100% (2388\/2388), done.\r\nChecking connectivity... done.\r\n```\r\n\r\nWe have behave&#39;s `setup.py` in `\/tmp\/behave`:\r\n\r\n```lang-none\r\n(test_env) $ ls \/tmp\/behave\/setup.py\r\n    \/tmp\/behave\/setup.py\r\n```\r\n\r\n#### Install the Python package from the Git repository\r\n\r\n```lang-none\r\n(test_env) $ cd \/tmp\/behave &amp;&amp; pip install .\r\nrunning install\r\n...\r\nInstalled \/private\/tmp\/test_env\/lib\/python2.7\/site-packages\/enum34-1.0-py2.7.egg\r\nFinished processing dependencies for behave==1.2.5a1\r\n```\r\n\r\n### If we run the aforementioned solution from `\/tmp`\r\n\r\n```lang-none\r\n&gt;&gt;&gt; import pip\r\n&gt;&gt;&gt; sorted([&quot;%s==%s&quot; % (i.key, i.version) for i in pip.get_installed_distributions()])\r\n[&#39;behave==1.2.5a1&#39;, &#39;enum34==1.0&#39;, &#39;parse-type==0.3.4&#39;, &#39;parse==1.6.4&#39;, &#39;six==1.6.1&#39;]\r\n&gt;&gt;&gt; import os\r\n&gt;&gt;&gt; os.getcwd()\r\n&#39;\/private\/tmp&#39;\r\n```\r\n\r\n### If we run the aforementioned solution from `\/tmp\/behave`\r\n\r\n```lang-none\r\n&gt;&gt;&gt; import pip\r\n&gt;&gt;&gt; sorted([&quot;%s==%s&quot; % (i.key, i.version) for i in pip.get_installed_distributions()])\r\n[&#39;enum34==1.0&#39;, &#39;parse-type==0.3.4&#39;, &#39;parse==1.6.4&#39;, &#39;six==1.6.1&#39;]\r\n&gt;&gt;&gt; import os\r\n&gt;&gt;&gt; os.getcwd()\r\n&#39;\/private\/tmp\/behave&#39;\r\n```\r\n\r\n`behave==1.2.5a1` is missing from the second example, because the working directory contains `behave`&#39;s `setup.py` file.\r\n\r\nI could not find any reference to this issue in the documentation. Perhaps I shall open a bug for it.\r\n\r\n  [1]: https:\/\/stackoverflow.com\/questions\/3220404\/why-use-pip-over-easy-install\r\n","body":"<h2>Solution<\/h2>\n<h1>Do not use with pip &gt; 10.0!<\/h1>\n<p>My 50 cents for getting a <code>pip freeze<\/code>-like list from a Python script:<\/p>\n<pre class=\"lang-python prettyprint-override\"><code>import pip\ninstalled_packages = pip.get_installed_distributions()\ninstalled_packages_list = sorted([&quot;%s==%s&quot; % (i.key, i.version)\n     for i in installed_packages])\nprint(installed_packages_list)\n<\/code><\/pre>\n<p>As a (too long) one liner:<\/p>\n<pre class=\"lang-python prettyprint-override\"><code>sorted([&quot;%s==%s&quot; % (i.key, i.version) for i in pip.get_installed_distributions()])\n<\/code><\/pre>\n<p>Giving:<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>['behave==1.2.4', 'enum34==1.0', 'flask==0.10.1', 'itsdangerous==0.24',\n 'jinja2==2.7.2', 'jsonschema==2.3.0', 'markupsafe==0.23', 'nose==1.3.3',\n 'parse-type==0.3.4', 'parse==1.6.4', 'prettytable==0.7.2', 'requests==2.3.0',\n 'six==1.6.1', 'vioozer-metadata==0.1', 'vioozer-users-server==0.1',\n 'werkzeug==0.9.4']\n<\/code><\/pre>\n<h2>Scope<\/h2>\n<p>This solution applies to the system scope or to a virtual environment scope, and covers packages installed by <code>setuptools<\/code>, <code>pip<\/code> and (<a href=\"https:\/\/stackoverflow.com\/questions\/3220404\/why-use-pip-over-easy-install\">god forbid<\/a>) <code>easy_install<\/code>.<\/p>\n<h2>My use case<\/h2>\n<p>I added the result of this call to my Flask server, so when I call it with <code>http:\/\/example.com\/exampleServer\/environment<\/code> I get the list of packages installed on the server's virtualenv. It makes debugging a whole lot easier.<\/p>\n<h2>Caveats<\/h2>\n<p>I have noticed a strange behaviour of this technique - when the Python interpreter is invoked in the same directory as a <code>setup.py<\/code> file, it does not list the package installed by <code>setup.py<\/code>.<\/p>\n<h3>Steps to reproduce:<\/h3>\n<h4>Create a virtual environment<\/h4>\n<pre class=\"lang-none prettyprint-override\"><code>$ cd \/tmp\n$ virtualenv test_env\nNew python executable in test_env\/bin\/python\nInstalling setuptools, pip...done.\n$ source test_env\/bin\/activate\n(test_env) $\n<\/code><\/pre>\n<h4>Clone a Git repository with <code>setup.py<\/code><\/h4>\n<pre class=\"lang-none prettyprint-override\"><code>(test_env) $ git clone https:\/\/github.com\/behave\/behave.git\nCloning into 'behave'...\nremote: Reusing existing pack: 4350, done.\nremote: Total 4350 (delta 0), reused 0 (delta 0)\nReceiving objects: 100% (4350\/4350), 1.85 MiB | 418.00 KiB\/s, done.\nResolving deltas: 100% (2388\/2388), done.\nChecking connectivity... done.\n<\/code><\/pre>\n<p>We have behave's <code>setup.py<\/code> in <code>\/tmp\/behave<\/code>:<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>(test_env) $ ls \/tmp\/behave\/setup.py\n    \/tmp\/behave\/setup.py\n<\/code><\/pre>\n<h4>Install the Python package from the Git repository<\/h4>\n<pre class=\"lang-none prettyprint-override\"><code>(test_env) $ cd \/tmp\/behave &amp;&amp; pip install .\nrunning install\n...\nInstalled \/private\/tmp\/test_env\/lib\/python2.7\/site-packages\/enum34-1.0-py2.7.egg\nFinished processing dependencies for behave==1.2.5a1\n<\/code><\/pre>\n<h3>If we run the aforementioned solution from <code>\/tmp<\/code><\/h3>\n<pre class=\"lang-none prettyprint-override\"><code>&gt;&gt;&gt; import pip\n&gt;&gt;&gt; sorted([&quot;%s==%s&quot; % (i.key, i.version) for i in pip.get_installed_distributions()])\n['behave==1.2.5a1', 'enum34==1.0', 'parse-type==0.3.4', 'parse==1.6.4', 'six==1.6.1']\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.getcwd()\n'\/private\/tmp'\n<\/code><\/pre>\n<h3>If we run the aforementioned solution from <code>\/tmp\/behave<\/code><\/h3>\n<pre class=\"lang-none prettyprint-override\"><code>&gt;&gt;&gt; import pip\n&gt;&gt;&gt; sorted([&quot;%s==%s&quot; % (i.key, i.version) for i in pip.get_installed_distributions()])\n['enum34==1.0', 'parse-type==0.3.4', 'parse==1.6.4', 'six==1.6.1']\n&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.getcwd()\n'\/private\/tmp\/behave'\n<\/code><\/pre>\n<p><code>behave==1.2.5a1<\/code> is missing from the second example, because the working directory contains <code>behave<\/code>'s <code>setup.py<\/code> file.<\/p>\n<p>I could not find any reference to this issue in the documentation. Perhaps I shall open a bug for it.<\/p>\n","community_owned_date":null},{"owner":{"account_id":43861,"reputation":59796,"user_id":128397,"user_type":"registered","accept_rate":82,"profile_image":"https:\/\/www.gravatar.com\/avatar\/22b05e50077230ba919b240af4bc13cd?s=256&d=identicon&r=PG","display_name":"Daniel Pryden","link":"https:\/\/stackoverflow.com\/users\/128397\/daniel-pryden"},"is_accepted":false,"score":661,"last_activity_date":1517581736,"last_edit_date":1517581736.0,"creation_date":1254412934,"answer_id":1504848,"question_id":1504717,"content_license":"CC BY-SA 3.0","body_markdown":"Other answers here are correct: `is` is used for *identity* comparison, while `==` is used for *equality* comparison. Since what you care about is equality (the two strings should contain the same characters), in this case the `is` operator is simply wrong and you should be using `==` instead.\r\n\r\nThe reason `is` works interactively is that (most) string literals are [interned](https:\/\/en.wikipedia.org\/wiki\/String_interning) by default. From Wikipedia:\r\n\r\n&gt; Interned strings speed up string\r\n&gt; comparisons, which are sometimes a\r\n&gt; performance bottleneck in applications\r\n&gt; (such as compilers and dynamic\r\n&gt; programming language runtimes) that\r\n&gt; rely heavily on hash tables with\r\n&gt; string keys. Without interning,\r\n&gt; checking that two different strings\r\n&gt; are equal involves examining every\r\n&gt; character of both strings. This is\r\n&gt; slow for several reasons: it is\r\n&gt; inherently O(n) in the length of the\r\n&gt; strings; it typically requires reads\r\n&gt; from several regions of memory, which\r\n&gt; take time; and the reads fills up the\r\n&gt; processor cache, meaning there is less\r\n&gt; cache available for other needs. With\r\n&gt; interned strings, a simple object\r\n&gt; identity test suffices after the\r\n&gt; original intern operation; this is\r\n&gt; typically implemented as a pointer\r\n&gt; equality test, normally just a single\r\n&gt; machine instruction with no memory\r\n&gt; reference at all.\r\n\r\nSo, when you have two string literals (words that are literally typed into your program source code, surrounded by quotation marks) in your program that have the same value, the Python compiler will automatically intern the strings, making them both stored at the same memory location.  (Note that this doesn&#39;t *always* happen, and the rules for when this happens are quite convoluted, so please don&#39;t rely on this behavior in production code!)\r\n\r\nSince in your interactive session both strings are actually stored in the same memory location, they have the same *identity*, so the `is` operator works as expected.  But if you construct a string by some other method (even if that string contains *exactly* the same characters), then the string may be *equal*, but it is not *the same string* -- that is, it has a different *identity*, because it is stored in a different place in memory.","body":"<p>Other answers here are correct: <code>is<\/code> is used for <em>identity<\/em> comparison, while <code>==<\/code> is used for <em>equality<\/em> comparison. Since what you care about is equality (the two strings should contain the same characters), in this case the <code>is<\/code> operator is simply wrong and you should be using <code>==<\/code> instead.<\/p>\n\n<p>The reason <code>is<\/code> works interactively is that (most) string literals are <a href=\"https:\/\/en.wikipedia.org\/wiki\/String_interning\" rel=\"noreferrer\">interned<\/a> by default. From Wikipedia:<\/p>\n\n<blockquote>\n  <p>Interned strings speed up string\n  comparisons, which are sometimes a\n  performance bottleneck in applications\n  (such as compilers and dynamic\n  programming language runtimes) that\n  rely heavily on hash tables with\n  string keys. Without interning,\n  checking that two different strings\n  are equal involves examining every\n  character of both strings. This is\n  slow for several reasons: it is\n  inherently O(n) in the length of the\n  strings; it typically requires reads\n  from several regions of memory, which\n  take time; and the reads fills up the\n  processor cache, meaning there is less\n  cache available for other needs. With\n  interned strings, a simple object\n  identity test suffices after the\n  original intern operation; this is\n  typically implemented as a pointer\n  equality test, normally just a single\n  machine instruction with no memory\n  reference at all.<\/p>\n<\/blockquote>\n\n<p>So, when you have two string literals (words that are literally typed into your program source code, surrounded by quotation marks) in your program that have the same value, the Python compiler will automatically intern the strings, making them both stored at the same memory location.  (Note that this doesn't <em>always<\/em> happen, and the rules for when this happens are quite convoluted, so please don't rely on this behavior in production code!)<\/p>\n\n<p>Since in your interactive session both strings are actually stored in the same memory location, they have the same <em>identity<\/em>, so the <code>is<\/code> operator works as expected.  But if you construct a string by some other method (even if that string contains <em>exactly<\/em> the same characters), then the string may be <em>equal<\/em>, but it is not <em>the same string<\/em> -- that is, it has a different <em>identity<\/em>, because it is stored in a different place in memory.<\/p>\n","community_owned_date":null},{"owner":{"account_id":3818984,"reputation":6589,"user_id":3167549,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/JPRM6.jpg?s=256&g=1","display_name":"Randy Marsh","link":"https:\/\/stackoverflow.com\/users\/3167549\/randy-marsh"},"is_accepted":false,"score":648,"last_activity_date":1561553168,"last_edit_date":1561553168.0,"creation_date":1400463716,"answer_id":23728630,"question_id":2257441,"content_license":"CC BY-SA 4.0","body_markdown":"This Stack Overflow quesion is the current top Google result for &quot;random string Python&quot;. The current top answer is:\r\n\r\n    &#39;&#39;.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))\r\n\r\nThis is an excellent method, but the [PRNG][1] in random is not cryptographically secure. I assume many people researching this question will want to generate random strings for encryption or passwords. You can do this securely by making a small change in the above code:\r\n\r\n    &#39;&#39;.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))\r\n\r\nUsing `random.SystemRandom()` instead of just random uses \/dev\/urandom on *nix machines and `CryptGenRandom()` in Windows.  These are cryptographically secure PRNGs. Using `random.choice` instead of `random.SystemRandom().choice` in an application that requires a secure PRNG could be potentially devastating, and given the popularity of this question, I bet that mistake has been made many times already.\r\n\r\nIf you&#39;re using python3.6 or above, you can use the new [secrets][2] module as mentioned in [MSeifert&#39;s answer](https:\/\/stackoverflow.com\/a\/41464693\/7851470):\r\n\r\n    &#39;&#39;.join(secrets.choice(string.ascii_uppercase + string.digits) for _ in range(N))\r\n\r\nThe module docs also discuss convenient ways to [generate secure tokens][3] and [best practices][4].\r\n\r\n  [1]: http:\/\/en.wikipedia.org\/wiki\/Pseudorandom_number_generator\r\n  [2]: https:\/\/docs.python.org\/3\/library\/secrets.html\r\n  [3]: https:\/\/docs.python.org\/3\/library\/secrets.html#generating-tokens\r\n  [4]: https:\/\/docs.python.org\/3\/library\/secrets.html#recipes-and-best-practices","body":"<p>This Stack Overflow quesion is the current top Google result for \"random string Python\". The current top answer is:<\/p>\n\n<pre><code>''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(N))\n<\/code><\/pre>\n\n<p>This is an excellent method, but the <a href=\"http:\/\/en.wikipedia.org\/wiki\/Pseudorandom_number_generator\" rel=\"noreferrer\">PRNG<\/a> in random is not cryptographically secure. I assume many people researching this question will want to generate random strings for encryption or passwords. You can do this securely by making a small change in the above code:<\/p>\n\n<pre><code>''.join(random.SystemRandom().choice(string.ascii_uppercase + string.digits) for _ in range(N))\n<\/code><\/pre>\n\n<p>Using <code>random.SystemRandom()<\/code> instead of just random uses \/dev\/urandom on *nix machines and <code>CryptGenRandom()<\/code> in Windows.  These are cryptographically secure PRNGs. Using <code>random.choice<\/code> instead of <code>random.SystemRandom().choice<\/code> in an application that requires a secure PRNG could be potentially devastating, and given the popularity of this question, I bet that mistake has been made many times already.<\/p>\n\n<p>If you're using python3.6 or above, you can use the new <a href=\"https:\/\/docs.python.org\/3\/library\/secrets.html\" rel=\"noreferrer\">secrets<\/a> module as mentioned in <a href=\"https:\/\/stackoverflow.com\/a\/41464693\/7851470\">MSeifert's answer<\/a>:<\/p>\n\n<pre><code>''.join(secrets.choice(string.ascii_uppercase + string.digits) for _ in range(N))\n<\/code><\/pre>\n\n<p>The module docs also discuss convenient ways to <a href=\"https:\/\/docs.python.org\/3\/library\/secrets.html#generating-tokens\" rel=\"noreferrer\">generate secure tokens<\/a> and <a href=\"https:\/\/docs.python.org\/3\/library\/secrets.html#recipes-and-best-practices\" rel=\"noreferrer\">best practices<\/a>.<\/p>\n","community_owned_date":null},{"owner":{"account_id":2662014,"reputation":44876,"user_id":2301450,"user_type":"registered","accept_rate":93,"profile_image":"https:\/\/i.stack.imgur.com\/4xgoZ.png?s=256&g=1","display_name":"vaultah","link":"https:\/\/stackoverflow.com\/users\/2301450\/vaultah"},"is_accepted":false,"score":645,"last_activity_date":1514720435,"last_edit_date":1514720435.0,"creation_date":1422291246,"answer_id":28154841,"question_id":16981921,"content_license":"CC BY-SA 3.0","body_markdown":"# Explanation\r\n\r\nFrom [PEP 328][2]\r\n&gt; Relative imports use a module&#39;s \\_\\_name\\_\\_ attribute to determine that\r\n&gt; module&#39;s position in the package hierarchy. If the module&#39;s name does\r\n&gt; not contain any package information (e.g. it is set to &#39;\\_\\_main\\_\\_&#39;)\r\n&gt; **then relative imports are resolved as if the module were a top level\r\n&gt; module**, regardless of where the module is actually located on the file\r\n&gt; system.\r\n\r\nAt some point [PEP 338][1] conflicted with [PEP 328][2]:\r\n\r\n&gt; ... relative imports rely on *\\_\\_name\\_\\_* to determine the current\r\n&gt; module&#39;s position in the package hierarchy. In a main module, the\r\n&gt; value of *\\_\\_name\\_\\_* is always *&#39;\\_\\_main\\_\\_&#39;*, so explicit relative imports\r\n&gt; will always fail (as they only work for a module inside a package)\r\n\r\nand to address the issue, [PEP 366][3] introduced the top level variable [`__package__`][4]:\r\n\r\n&gt; By adding a new module level attribute, this PEP allows relative\r\n&gt; imports to work automatically if the module is executed using the *-m*\r\n&gt; switch. A small amount of boilerplate in the module itself will allow\r\n&gt; the relative imports to work when the file is executed by name. [...] When it [the attribute] is present, relative imports will be based on this attribute\r\n&gt; rather than the module *\\_\\_name\\_\\_* attribute. [...] When the main module is specified by its filename, then the *\\_\\_package\\_\\_* attribute will be set to *None*. [...] **When the import system encounters an explicit relative import in a\r\n&gt; module without \\_\\_package\\_\\_ set (or with it set to None), it will\r\n&gt; calculate and store the correct value** (**\\_\\_name\\_\\_.rpartition(&#39;.&#39;)[0]\r\n&gt; for normal modules** and *\\_\\_name\\_\\_* for package initialisation modules)\r\n\r\n(emphasis mine)\r\n\r\nIf the `__name__` is `&#39;__main__&#39;`, `__name__.rpartition(&#39;.&#39;)[0]` returns empty string. This is why there&#39;s empty string literal in the error description:\r\n\r\n&lt;!-- language: lang-none --&gt;\r\n\r\n    SystemError: Parent module &#39;&#39; not loaded, cannot perform relative import\r\n\r\nThe relevant part of the CPython&#39;s [`PyImport_ImportModuleLevelObject` function][5]:\r\n\r\n&lt;!-- language: c --&gt;\r\n\r\n    if (PyDict_GetItem(interp-&gt;modules, package) == NULL) {\r\n        PyErr_Format(PyExc_SystemError,\r\n                &quot;Parent module %R not loaded, cannot perform relative &quot;\r\n                &quot;import&quot;, package);\r\n        goto error;\r\n    }\r\n\r\nCPython raises this exception if it was unable to find `package` (the name of the package) in `interp-&gt;modules` (accessible as [`sys.modules`][6]). Since `sys.modules` is *&quot;a dictionary that maps module names to modules which have already been loaded&quot;*, it&#39;s now clear that **the parent module must be explicitly absolute-imported before performing relative import**.\r\n\r\n***Note:***  The patch from the [issue 18018][7] has added [another `if` block][8], which will be executed **before** the code above:\r\n\r\n&lt;!-- language: c --&gt;\r\n\r\n    if (PyUnicode_CompareWithASCIIString(package, &quot;&quot;) == 0) {\r\n        PyErr_SetString(PyExc_ImportError,\r\n                &quot;attempted relative import with no known parent package&quot;);\r\n        goto error;\r\n    } \/* else if (PyDict_GetItem(interp-&gt;modules, package) == NULL) {\r\n        ...\r\n    *\/\r\n\r\nIf `package` (same as above) is empty string, the error message will be\r\n\r\n&lt;!-- language: lang-none --&gt;\r\n\r\n    ImportError: attempted relative import with no known parent package\r\n\r\nHowever, you will only see this in Python 3.6 or newer.\r\n\r\n\r\n\r\n# Solution #1: Run your script using -m\r\n\r\nConsider a directory (which is a Python [package][9]):\r\n\r\n&lt;!-- language: lang-none --&gt;\r\n\r\n    .\r\n    \u251c\u2500\u2500 package\r\n    \u2502&#160;&#160; \u251c\u2500\u2500 __init__.py\r\n    \u2502&#160;&#160; \u251c\u2500\u2500 module.py\r\n    \u2502&#160;&#160; \u2514\u2500\u2500 standalone.py\r\n\r\nAll of the files in *package* begin with the same 2 lines of code:\r\n\r\n    from pathlib import Path\r\n    print(&#39;Running&#39; if __name__ == &#39;__main__&#39; else &#39;Importing&#39;, Path(__file__).resolve())\r\n\r\nI&#39;m including these two lines *only* to make the order of operations obvious. We can ignore them completely, since they don&#39;t affect the execution.\r\n\r\n*\\_\\_init\\_\\_.py* and *module.py* contain only those two lines (i.e., they are effectively empty).\r\n\r\n*standalone.py* additionally attempts to import *module.py* via relative import:\r\n\r\n    from . import module  # explicit relative import\r\n\r\nWe&#39;re well aware that `\/path\/to\/python\/interpreter package\/standalone.py` will fail. However, we can run the module with the [`-m` command line option][10] that will *&quot;search [`sys.path`][11] for the named module and execute its contents as the `__main__` module&quot;*:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    vaultah@base:~$ python3 -i -m package.standalone\r\n    Importing \/home\/vaultah\/package\/__init__.py\r\n    Running \/home\/vaultah\/package\/standalone.py\r\n    Importing \/home\/vaultah\/package\/module.py\r\n    &gt;&gt;&gt; __file__\r\n    &#39;\/home\/vaultah\/package\/standalone.py&#39;\r\n    &gt;&gt;&gt; __package__\r\n    &#39;package&#39;\r\n    &gt;&gt;&gt; # The __package__ has been correctly set and module.py has been imported.\r\n    ... # What&#39;s inside sys.modules?\r\n    ... import sys\r\n    &gt;&gt;&gt; sys.modules[&#39;__main__&#39;]\r\n    &lt;module &#39;package.standalone&#39; from &#39;\/home\/vaultah\/package\/standalone.py&#39;&gt;\r\n    &gt;&gt;&gt; sys.modules[&#39;package.module&#39;]\r\n    &lt;module &#39;package.module&#39; from &#39;\/home\/vaultah\/package\/module.py&#39;&gt;\r\n    &gt;&gt;&gt; sys.modules[&#39;package&#39;]\r\n    &lt;module &#39;package&#39; from &#39;\/home\/vaultah\/package\/__init__.py&#39;&gt;\r\n\r\n`-m` does all the importing stuff for you and automatically sets `__package__`, but you can do that yourself in the\r\n\r\n\r\n\r\n# Solution #2: Set \\_\\_package\\_\\_ manually\r\n\r\n***Please treat it as a proof of concept rather than an actual solution. It isn&#39;t well-suited for use in real-world code.***\r\n\r\n[PEP 366][3] has a workaround to this problem, however, it&#39;s incomplete, because setting `__package__` alone is not enough. You&#39;re going to need to import at least *N* preceding packages in the module hierarchy, where *N* is the number of parent directories (relative to the directory of the script) that will be searched for the module being imported.\r\n\r\nThus,\r\n\r\n 1. Add the parent directory of the *Nth* predecessor of the current module to `sys.path`\r\n\r\n 2. Remove the current file&#39;s directory from `sys.path`\r\n\r\n 3. Import the parent module of the current module using its fully-qualified name\r\n\r\n 4. Set `__package__` to the fully-qualified name from *2*\r\n\r\n 5. Perform the relative import\r\n\r\n\r\nI&#39;ll borrow files from the *Solution #1* and add some more subpackages:\r\n\r\n&lt;!-- language: lang-none --&gt;\r\n\r\n    package\r\n    \u251c\u2500\u2500 __init__.py\r\n    \u251c\u2500\u2500 module.py\r\n    \u2514\u2500\u2500 subpackage\r\n        \u251c\u2500\u2500 __init__.py\r\n        \u2514\u2500\u2500 subsubpackage\r\n            \u251c\u2500\u2500 __init__.py\r\n            \u2514\u2500\u2500 standalone.py\r\n\r\nThis time *standalone.py* will import *module.py* from the *package* package using the following relative import\r\n\r\n    from ... import module  # N = 3\r\n\r\nWe&#39;ll need to precede that line with the boilerplate code, to make it work.\r\n\r\n    import sys\r\n    from pathlib import Path\r\n\r\n    if __name__ == &#39;__main__&#39; and __package__ is None:\r\n        file = Path(__file__).resolve()\r\n        parent, top = file.parent, file.parents[3]\r\n\r\n        sys.path.append(str(top))\r\n        try:\r\n            sys.path.remove(str(parent))\r\n        except ValueError: # Already removed\r\n            pass\r\n\r\n        import package.subpackage.subsubpackage\r\n        __package__ = &#39;package.subpackage.subsubpackage&#39;\r\n\r\n    from ... import module # N = 3\r\n\r\nIt allows us to execute *standalone.py* by filename:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    vaultah@base:~$ python3 package\/subpackage\/subsubpackage\/standalone.py\r\n    Running \/home\/vaultah\/package\/subpackage\/subsubpackage\/standalone.py\r\n    Importing \/home\/vaultah\/package\/__init__.py\r\n    Importing \/home\/vaultah\/package\/subpackage\/__init__.py\r\n    Importing \/home\/vaultah\/package\/subpackage\/subsubpackage\/__init__.py\r\n    Importing \/home\/vaultah\/package\/module.py\r\n\r\nA more general solution wrapped in a function can be found [here][12]. Example usage:\r\n\r\n    if __name__ == &#39;__main__&#39; and __package__ is None:\r\n        import_parents(level=3) # N = 3\r\n\r\n    from ... import module\r\n    from ...module.submodule import thing\r\n\r\n\r\n\r\n# Solution #3: Use absolute imports and [setuptools][13]\r\n\r\nThe steps are -\r\n\r\n 1. Replace explicit relative imports with equivalent absolute imports\r\n\r\n 2. Install `package` to make it importable\r\n\r\nFor instance, the directory structure may be as follows\r\n\r\n&lt;!-- language: lang-none --&gt;\r\n\r\n    .\r\n    \u251c\u2500\u2500 project\r\n    \u2502&#160;&#160; \u251c\u2500\u2500 package\r\n    \u2502&#160;&#160; \u2502&#160;&#160; \u251c\u2500\u2500 __init__.py\r\n    \u2502&#160;&#160; \u2502&#160;&#160; \u251c\u2500\u2500 module.py\r\n    \u2502&#160;&#160; \u2502&#160;&#160; \u2514\u2500\u2500 standalone.py\r\n    \u2502&#160;&#160; \u2514\u2500\u2500 setup.py\r\n\r\nwhere *setup.py* is\r\n\r\n    from setuptools import setup, find_packages\r\n    setup(\r\n        name = &#39;your_package_name&#39;,\r\n        packages = find_packages(),\r\n    )\r\n\r\nThe rest of the files were borrowed from the *Solution #1*.\r\n\r\nInstallation will allow you to import the package regardless of your working directory (assuming there&#39;ll be no naming issues).\r\n\r\nWe can modify *standalone.py* to use this advantage (step 1):\r\n\r\n    from package import module  # absolute import\r\n\r\nChange your working directory to `project` and run `\/path\/to\/python\/interpreter setup.py install --user` (`--user` installs the package in [your site-packages directory][14]) (step 2):\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    vaultah@base:~$ cd project\r\n    vaultah@base:~\/project$ python3 setup.py install --user\r\n\r\nLet&#39;s verify that it&#39;s now possible to run *standalone.py* as a script:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    vaultah@base:~\/project$ python3 -i package\/standalone.py\r\n    Running \/home\/vaultah\/project\/package\/standalone.py\r\n    Importing \/home\/vaultah\/.local\/lib\/python3.6\/site-packages\/your_package_name-0.0.0-py3.6.egg\/package\/__init__.py\r\n    Importing \/home\/vaultah\/.local\/lib\/python3.6\/site-packages\/your_package_name-0.0.0-py3.6.egg\/package\/module.py\r\n    &gt;&gt;&gt; module\r\n    &lt;module &#39;package.module&#39; from &#39;\/home\/vaultah\/.local\/lib\/python3.6\/site-packages\/your_package_name-0.0.0-py3.6.egg\/package\/module.py&#39;&gt;\r\n    &gt;&gt;&gt; import sys\r\n    &gt;&gt;&gt; sys.modules[&#39;package&#39;]\r\n    &lt;module &#39;package&#39; from &#39;\/home\/vaultah\/.local\/lib\/python3.6\/site-packages\/your_package_name-0.0.0-py3.6.egg\/package\/__init__.py&#39;&gt;\r\n    &gt;&gt;&gt; sys.modules[&#39;package.module&#39;]\r\n    &lt;module &#39;package.module&#39; from &#39;\/home\/vaultah\/.local\/lib\/python3.6\/site-packages\/your_package_name-0.0.0-py3.6.egg\/package\/module.py&#39;&gt;\r\n\r\n***Note***: If you decide to go down this route, you&#39;d be better off using [virtual environments][15] to install packages in isolation.\r\n\r\n\r\n# Solution #4: Use absolute imports and some boilerplate code\r\n\r\nFrankly, the installation is not necessary - you could add some boilerplate code to your script to make absolute imports work.\r\n\r\nI&#39;m going to borrow files from *Solution #1* and change *standalone.py*:\r\n\r\n 1. Add the parent directory of *package* to `sys.path` *before* attempting to import anything from *package* using absolute imports:\r\n\r\n        import sys\r\n        from pathlib import Path # if you haven&#39;t already done so\r\n        file = Path(__file__).resolve()\r\n        parent, root = file.parent, file.parents[1]\r\n        sys.path.append(str(root))\r\n        \r\n        # Additionally remove the current file&#39;s directory from sys.path\r\n        try:\r\n            sys.path.remove(str(parent))\r\n        except ValueError: # Already removed\r\n            pass\r\n\r\n 2. Replace the relative import by the absolute import:\r\n\r\n        from package import module  # absolute import\r\n\r\n*standalone.py* runs without problems:\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    vaultah@base:~$ python3 -i package\/standalone.py\r\n    Running \/home\/vaultah\/package\/standalone.py\r\n    Importing \/home\/vaultah\/package\/__init__.py\r\n    Importing \/home\/vaultah\/package\/module.py\r\n    &gt;&gt;&gt; module\r\n    &lt;module &#39;package.module&#39; from &#39;\/home\/vaultah\/package\/module.py&#39;&gt;\r\n    &gt;&gt;&gt; import sys\r\n    &gt;&gt;&gt; sys.modules[&#39;package&#39;]\r\n    &lt;module &#39;package&#39; from &#39;\/home\/vaultah\/package\/__init__.py&#39;&gt;\r\n    &gt;&gt;&gt; sys.modules[&#39;package.module&#39;]\r\n    &lt;module &#39;package.module&#39; from &#39;\/home\/vaultah\/package\/module.py&#39;&gt;\r\n\r\nI feel that I should warn you: try not to do this, *especially* if your project has a complex structure.\r\n\r\n----------------------\r\n\r\nAs a side note, [PEP 8][16] recommends the use of absolute imports, but states that in some scenarios explicit relative imports are acceptable:\r\n\r\n&gt; Absolute imports are recommended, as they are usually more readable\r\n&gt; and tend to be better behaved (or at least give better error\r\n&gt; messages). [...] However, explicit relative imports are an acceptable\r\n&gt; alternative to absolute imports, especially when dealing with complex\r\n&gt; package layouts where using absolute imports would be unnecessarily\r\n&gt; verbose.\r\n\r\n\r\n  [1]: https:\/\/www.python.org\/dev\/peps\/pep-0338\/\r\n  [2]: https:\/\/www.python.org\/dev\/peps\/pep-0328\/\r\n  [3]: https:\/\/www.python.org\/dev\/peps\/pep-0366\/\r\n  [4]: https:\/\/docs.python.org\/3\/reference\/import.html#__package__\r\n  [5]: https:\/\/hg.python.org\/cpython\/file\/9d65a195246b\/Python\/import.c#l1494\r\n  [6]: https:\/\/docs.python.org\/3\/library\/sys.html#sys.modules\r\n  [7]: http:\/\/bugs.python.org\/issue18018\r\n  [8]: https:\/\/hg.python.org\/cpython\/file\/c4e4886c6052\/Python\/import.c#l1494\r\n  [9]: https:\/\/docs.python.org\/3\/glossary.html#term-package\r\n  [10]: https:\/\/docs.python.org\/3\/using\/cmdline.html?highlight=#cmdoption-m\r\n  [11]: https:\/\/docs.python.org\/3\/library\/sys.html#sys.path\r\n  [12]: https:\/\/gist.github.com\/vaultah\/d63cb4c86be2774377aa674b009f759a\r\n  [13]: https:\/\/setuptools.readthedocs.io\/en\/latest\/\r\n  [14]: https:\/\/docs.python.org\/3\/library\/site.html#site.USER_SITE\r\n  [15]: https:\/\/docs.python.org\/3\/library\/venv.html\r\n  [16]: https:\/\/www.python.org\/dev\/peps\/pep-0008\/#imports","body":"<h1>Explanation<\/h1>\n\n<p>From <a href=\"https:\/\/www.python.org\/dev\/peps\/pep-0328\/\" rel=\"noreferrer\">PEP 328<\/a><\/p>\n\n<blockquote>\n  <p>Relative imports use a module's __name__ attribute to determine that\n  module's position in the package hierarchy. If the module's name does\n  not contain any package information (e.g. it is set to '__main__')\n  <strong>then relative imports are resolved as if the module were a top level\n  module<\/strong>, regardless of where the module is actually located on the file\n  system.<\/p>\n<\/blockquote>\n\n<p>At some point <a href=\"https:\/\/www.python.org\/dev\/peps\/pep-0338\/\" rel=\"noreferrer\">PEP 338<\/a> conflicted with <a href=\"https:\/\/www.python.org\/dev\/peps\/pep-0328\/\" rel=\"noreferrer\">PEP 328<\/a>:<\/p>\n\n<blockquote>\n  <p>... relative imports rely on <em>__name__<\/em> to determine the current\n  module's position in the package hierarchy. In a main module, the\n  value of <em>__name__<\/em> is always <em>'__main__'<\/em>, so explicit relative imports\n  will always fail (as they only work for a module inside a package)<\/p>\n<\/blockquote>\n\n<p>and to address the issue, <a href=\"https:\/\/www.python.org\/dev\/peps\/pep-0366\/\" rel=\"noreferrer\">PEP 366<\/a> introduced the top level variable <a href=\"https:\/\/docs.python.org\/3\/reference\/import.html#__package__\" rel=\"noreferrer\"><code>__package__<\/code><\/a>:<\/p>\n\n<blockquote>\n  <p>By adding a new module level attribute, this PEP allows relative\n  imports to work automatically if the module is executed using the <em>-m<\/em>\n  switch. A small amount of boilerplate in the module itself will allow\n  the relative imports to work when the file is executed by name. [...] When it [the attribute] is present, relative imports will be based on this attribute\n  rather than the module <em>__name__<\/em> attribute. [...] When the main module is specified by its filename, then the <em>__package__<\/em> attribute will be set to <em>None<\/em>. [...] <strong>When the import system encounters an explicit relative import in a\n  module without __package__ set (or with it set to None), it will\n  calculate and store the correct value<\/strong> (<strong>__name__.rpartition('.')[0]\n  for normal modules<\/strong> and <em>__name__<\/em> for package initialisation modules)<\/p>\n<\/blockquote>\n\n<p>(emphasis mine)<\/p>\n\n<p>If the <code>__name__<\/code> is <code>'__main__'<\/code>, <code>__name__.rpartition('.')[0]<\/code> returns empty string. This is why there's empty string literal in the error description:<\/p>\n\n<pre class=\"lang-none prettyprint-override\"><code>SystemError: Parent module '' not loaded, cannot perform relative import\n<\/code><\/pre>\n\n<p>The relevant part of the CPython's <a href=\"https:\/\/hg.python.org\/cpython\/file\/9d65a195246b\/Python\/import.c#l1494\" rel=\"noreferrer\"><code>PyImport_ImportModuleLevelObject<\/code> function<\/a>:<\/p>\n\n<pre class=\"lang-c prettyprint-override\"><code>if (PyDict_GetItem(interp-&gt;modules, package) == NULL) {\n    PyErr_Format(PyExc_SystemError,\n            \"Parent module %R not loaded, cannot perform relative \"\n            \"import\", package);\n    goto error;\n}\n<\/code><\/pre>\n\n<p>CPython raises this exception if it was unable to find <code>package<\/code> (the name of the package) in <code>interp-&gt;modules<\/code> (accessible as <a href=\"https:\/\/docs.python.org\/3\/library\/sys.html#sys.modules\" rel=\"noreferrer\"><code>sys.modules<\/code><\/a>). Since <code>sys.modules<\/code> is <em>\"a dictionary that maps module names to modules which have already been loaded\"<\/em>, it's now clear that <strong>the parent module must be explicitly absolute-imported before performing relative import<\/strong>.<\/p>\n\n<p><strong><em>Note:<\/em><\/strong>  The patch from the <a href=\"http:\/\/bugs.python.org\/issue18018\" rel=\"noreferrer\">issue 18018<\/a> has added <a href=\"https:\/\/hg.python.org\/cpython\/file\/c4e4886c6052\/Python\/import.c#l1494\" rel=\"noreferrer\">another <code>if<\/code> block<\/a>, which will be executed <strong>before<\/strong> the code above:<\/p>\n\n<pre class=\"lang-c prettyprint-override\"><code>if (PyUnicode_CompareWithASCIIString(package, \"\") == 0) {\n    PyErr_SetString(PyExc_ImportError,\n            \"attempted relative import with no known parent package\");\n    goto error;\n} \/* else if (PyDict_GetItem(interp-&gt;modules, package) == NULL) {\n    ...\n*\/\n<\/code><\/pre>\n\n<p>If <code>package<\/code> (same as above) is empty string, the error message will be<\/p>\n\n<pre class=\"lang-none prettyprint-override\"><code>ImportError: attempted relative import with no known parent package\n<\/code><\/pre>\n\n<p>However, you will only see this in Python 3.6 or newer.<\/p>\n\n<h1>Solution #1: Run your script using -m<\/h1>\n\n<p>Consider a directory (which is a Python <a href=\"https:\/\/docs.python.org\/3\/glossary.html#term-package\" rel=\"noreferrer\">package<\/a>):<\/p>\n\n<pre class=\"lang-none prettyprint-override\"><code>.\n\u251c\u2500\u2500 package\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 module.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 standalone.py\n<\/code><\/pre>\n\n<p>All of the files in <em>package<\/em> begin with the same 2 lines of code:<\/p>\n\n<pre><code>from pathlib import Path\nprint('Running' if __name__ == '__main__' else 'Importing', Path(__file__).resolve())\n<\/code><\/pre>\n\n<p>I'm including these two lines <em>only<\/em> to make the order of operations obvious. We can ignore them completely, since they don't affect the execution.<\/p>\n\n<p><em>__init__.py<\/em> and <em>module.py<\/em> contain only those two lines (i.e., they are effectively empty).<\/p>\n\n<p><em>standalone.py<\/em> additionally attempts to import <em>module.py<\/em> via relative import:<\/p>\n\n<pre><code>from . import module  # explicit relative import\n<\/code><\/pre>\n\n<p>We're well aware that <code>\/path\/to\/python\/interpreter package\/standalone.py<\/code> will fail. However, we can run the module with the <a href=\"https:\/\/docs.python.org\/3\/using\/cmdline.html?highlight=#cmdoption-m\" rel=\"noreferrer\"><code>-m<\/code> command line option<\/a> that will <em>\"search <a href=\"https:\/\/docs.python.org\/3\/library\/sys.html#sys.path\" rel=\"noreferrer\"><code>sys.path<\/code><\/a> for the named module and execute its contents as the <code>__main__<\/code> module\"<\/em>:<\/p>\n\n<pre class=\"lang-bash prettyprint-override\"><code>vaultah@base:~$ python3 -i -m package.standalone\nImporting \/home\/vaultah\/package\/__init__.py\nRunning \/home\/vaultah\/package\/standalone.py\nImporting \/home\/vaultah\/package\/module.py\n&gt;&gt;&gt; __file__\n'\/home\/vaultah\/package\/standalone.py'\n&gt;&gt;&gt; __package__\n'package'\n&gt;&gt;&gt; # The __package__ has been correctly set and module.py has been imported.\n... # What's inside sys.modules?\n... import sys\n&gt;&gt;&gt; sys.modules['__main__']\n&lt;module 'package.standalone' from '\/home\/vaultah\/package\/standalone.py'&gt;\n&gt;&gt;&gt; sys.modules['package.module']\n&lt;module 'package.module' from '\/home\/vaultah\/package\/module.py'&gt;\n&gt;&gt;&gt; sys.modules['package']\n&lt;module 'package' from '\/home\/vaultah\/package\/__init__.py'&gt;\n<\/code><\/pre>\n\n<p><code>-m<\/code> does all the importing stuff for you and automatically sets <code>__package__<\/code>, but you can do that yourself in the<\/p>\n\n<h1>Solution #2: Set __package__ manually<\/h1>\n\n<p><strong><em>Please treat it as a proof of concept rather than an actual solution. It isn't well-suited for use in real-world code.<\/em><\/strong><\/p>\n\n<p><a href=\"https:\/\/www.python.org\/dev\/peps\/pep-0366\/\" rel=\"noreferrer\">PEP 366<\/a> has a workaround to this problem, however, it's incomplete, because setting <code>__package__<\/code> alone is not enough. You're going to need to import at least <em>N<\/em> preceding packages in the module hierarchy, where <em>N<\/em> is the number of parent directories (relative to the directory of the script) that will be searched for the module being imported.<\/p>\n\n<p>Thus,<\/p>\n\n<ol>\n<li><p>Add the parent directory of the <em>Nth<\/em> predecessor of the current module to <code>sys.path<\/code><\/p><\/li>\n<li><p>Remove the current file's directory from <code>sys.path<\/code><\/p><\/li>\n<li><p>Import the parent module of the current module using its fully-qualified name<\/p><\/li>\n<li><p>Set <code>__package__<\/code> to the fully-qualified name from <em>2<\/em><\/p><\/li>\n<li><p>Perform the relative import<\/p><\/li>\n<\/ol>\n\n<p>I'll borrow files from the <em>Solution #1<\/em> and add some more subpackages:<\/p>\n\n<pre class=\"lang-none prettyprint-override\"><code>package\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 module.py\n\u2514\u2500\u2500 subpackage\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 subsubpackage\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 standalone.py\n<\/code><\/pre>\n\n<p>This time <em>standalone.py<\/em> will import <em>module.py<\/em> from the <em>package<\/em> package using the following relative import<\/p>\n\n<pre><code>from ... import module  # N = 3\n<\/code><\/pre>\n\n<p>We'll need to precede that line with the boilerplate code, to make it work.<\/p>\n\n<pre><code>import sys\nfrom pathlib import Path\n\nif __name__ == '__main__' and __package__ is None:\n    file = Path(__file__).resolve()\n    parent, top = file.parent, file.parents[3]\n\n    sys.path.append(str(top))\n    try:\n        sys.path.remove(str(parent))\n    except ValueError: # Already removed\n        pass\n\n    import package.subpackage.subsubpackage\n    __package__ = 'package.subpackage.subsubpackage'\n\nfrom ... import module # N = 3\n<\/code><\/pre>\n\n<p>It allows us to execute <em>standalone.py<\/em> by filename:<\/p>\n\n<pre class=\"lang-bash prettyprint-override\"><code>vaultah@base:~$ python3 package\/subpackage\/subsubpackage\/standalone.py\nRunning \/home\/vaultah\/package\/subpackage\/subsubpackage\/standalone.py\nImporting \/home\/vaultah\/package\/__init__.py\nImporting \/home\/vaultah\/package\/subpackage\/__init__.py\nImporting \/home\/vaultah\/package\/subpackage\/subsubpackage\/__init__.py\nImporting \/home\/vaultah\/package\/module.py\n<\/code><\/pre>\n\n<p>A more general solution wrapped in a function can be found <a href=\"https:\/\/gist.github.com\/vaultah\/d63cb4c86be2774377aa674b009f759a\" rel=\"noreferrer\">here<\/a>. Example usage:<\/p>\n\n<pre><code>if __name__ == '__main__' and __package__ is None:\n    import_parents(level=3) # N = 3\n\nfrom ... import module\nfrom ...module.submodule import thing\n<\/code><\/pre>\n\n<h1>Solution #3: Use absolute imports and <a href=\"https:\/\/setuptools.readthedocs.io\/en\/latest\/\" rel=\"noreferrer\">setuptools<\/a><\/h1>\n\n<p>The steps are -<\/p>\n\n<ol>\n<li><p>Replace explicit relative imports with equivalent absolute imports<\/p><\/li>\n<li><p>Install <code>package<\/code> to make it importable<\/p><\/li>\n<\/ol>\n\n<p>For instance, the directory structure may be as follows<\/p>\n\n<pre class=\"lang-none prettyprint-override\"><code>.\n\u251c\u2500\u2500 project\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 package\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 module.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 standalone.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 setup.py\n<\/code><\/pre>\n\n<p>where <em>setup.py<\/em> is<\/p>\n\n<pre><code>from setuptools import setup, find_packages\nsetup(\n    name = 'your_package_name',\n    packages = find_packages(),\n)\n<\/code><\/pre>\n\n<p>The rest of the files were borrowed from the <em>Solution #1<\/em>.<\/p>\n\n<p>Installation will allow you to import the package regardless of your working directory (assuming there'll be no naming issues).<\/p>\n\n<p>We can modify <em>standalone.py<\/em> to use this advantage (step 1):<\/p>\n\n<pre><code>from package import module  # absolute import\n<\/code><\/pre>\n\n<p>Change your working directory to <code>project<\/code> and run <code>\/path\/to\/python\/interpreter setup.py install --user<\/code> (<code>--user<\/code> installs the package in <a href=\"https:\/\/docs.python.org\/3\/library\/site.html#site.USER_SITE\" rel=\"noreferrer\">your site-packages directory<\/a>) (step 2):<\/p>\n\n<pre class=\"lang-bash prettyprint-override\"><code>vaultah@base:~$ cd project\nvaultah@base:~\/project$ python3 setup.py install --user\n<\/code><\/pre>\n\n<p>Let's verify that it's now possible to run <em>standalone.py<\/em> as a script:<\/p>\n\n<pre class=\"lang-bash prettyprint-override\"><code>vaultah@base:~\/project$ python3 -i package\/standalone.py\nRunning \/home\/vaultah\/project\/package\/standalone.py\nImporting \/home\/vaultah\/.local\/lib\/python3.6\/site-packages\/your_package_name-0.0.0-py3.6.egg\/package\/__init__.py\nImporting \/home\/vaultah\/.local\/lib\/python3.6\/site-packages\/your_package_name-0.0.0-py3.6.egg\/package\/module.py\n&gt;&gt;&gt; module\n&lt;module 'package.module' from '\/home\/vaultah\/.local\/lib\/python3.6\/site-packages\/your_package_name-0.0.0-py3.6.egg\/package\/module.py'&gt;\n&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.modules['package']\n&lt;module 'package' from '\/home\/vaultah\/.local\/lib\/python3.6\/site-packages\/your_package_name-0.0.0-py3.6.egg\/package\/__init__.py'&gt;\n&gt;&gt;&gt; sys.modules['package.module']\n&lt;module 'package.module' from '\/home\/vaultah\/.local\/lib\/python3.6\/site-packages\/your_package_name-0.0.0-py3.6.egg\/package\/module.py'&gt;\n<\/code><\/pre>\n\n<p><strong><em>Note<\/em><\/strong>: If you decide to go down this route, you'd be better off using <a href=\"https:\/\/docs.python.org\/3\/library\/venv.html\" rel=\"noreferrer\">virtual environments<\/a> to install packages in isolation.<\/p>\n\n<h1>Solution #4: Use absolute imports and some boilerplate code<\/h1>\n\n<p>Frankly, the installation is not necessary - you could add some boilerplate code to your script to make absolute imports work.<\/p>\n\n<p>I'm going to borrow files from <em>Solution #1<\/em> and change <em>standalone.py<\/em>:<\/p>\n\n<ol>\n<li><p>Add the parent directory of <em>package<\/em> to <code>sys.path<\/code> <em>before<\/em> attempting to import anything from <em>package<\/em> using absolute imports:<\/p>\n\n<pre><code>import sys\nfrom pathlib import Path # if you haven't already done so\nfile = Path(__file__).resolve()\nparent, root = file.parent, file.parents[1]\nsys.path.append(str(root))\n\n# Additionally remove the current file's directory from sys.path\ntry:\n    sys.path.remove(str(parent))\nexcept ValueError: # Already removed\n    pass\n<\/code><\/pre><\/li>\n<li><p>Replace the relative import by the absolute import:<\/p>\n\n<pre><code>from package import module  # absolute import\n<\/code><\/pre><\/li>\n<\/ol>\n\n<p><em>standalone.py<\/em> runs without problems:<\/p>\n\n<pre class=\"lang-bash prettyprint-override\"><code>vaultah@base:~$ python3 -i package\/standalone.py\nRunning \/home\/vaultah\/package\/standalone.py\nImporting \/home\/vaultah\/package\/__init__.py\nImporting \/home\/vaultah\/package\/module.py\n&gt;&gt;&gt; module\n&lt;module 'package.module' from '\/home\/vaultah\/package\/module.py'&gt;\n&gt;&gt;&gt; import sys\n&gt;&gt;&gt; sys.modules['package']\n&lt;module 'package' from '\/home\/vaultah\/package\/__init__.py'&gt;\n&gt;&gt;&gt; sys.modules['package.module']\n&lt;module 'package.module' from '\/home\/vaultah\/package\/module.py'&gt;\n<\/code><\/pre>\n\n<p>I feel that I should warn you: try not to do this, <em>especially<\/em> if your project has a complex structure.<\/p>\n\n<hr>\n\n<p>As a side note, <a href=\"https:\/\/www.python.org\/dev\/peps\/pep-0008\/#imports\" rel=\"noreferrer\">PEP 8<\/a> recommends the use of absolute imports, but states that in some scenarios explicit relative imports are acceptable:<\/p>\n\n<blockquote>\n  <p>Absolute imports are recommended, as they are usually more readable\n  and tend to be better behaved (or at least give better error\n  messages). [...] However, explicit relative imports are an acceptable\n  alternative to absolute imports, especially when dealing with complex\n  package layouts where using absolute imports would be unnecessarily\n  verbose.<\/p>\n<\/blockquote>\n","community_owned_date":null},{"owner":{"account_id":24377,"reputation":818761,"user_id":61974,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/ad240ed5cc406759f0fd72591dc8ca47?s=256&d=identicon&r=PG","display_name":"Mark Byers","link":"https:\/\/stackoverflow.com\/users\/61974\/mark-byers"},"is_accepted":false,"score":643,"last_activity_date":1281558925,"last_edit_date":1281558925.0,"creation_date":1281555887,"answer_id":3462202,"question_id":3462143,"content_license":"CC BY-SA 2.5","body_markdown":"The existing solutions all offer either one or the other of:\r\n\r\n * Faster than O(n*m) performance.\r\n * Preserve order of input list.\r\n\r\nBut so far no solution has both. If you want both, try this:\r\n\r\n    s = set(temp2)\r\n    temp3 = [x for x in temp1 if x not in s]\r\n\r\n**Performance test**\r\n\r\n    import timeit\r\n    init = &#39;temp1 = list(range(100)); temp2 = [i * 2 for i in range(50)]&#39;\r\n    print timeit.timeit(&#39;list(set(temp1) - set(temp2))&#39;, init, number = 100000)\r\n    print timeit.timeit(&#39;s = set(temp2);[x for x in temp1 if x not in s]&#39;, init, number = 100000)\r\n    print timeit.timeit(&#39;[item for item in temp1 if item not in temp2]&#39;, init, number = 100000)\r\n\r\nResults:\r\n\r\n    4.34620224079 # ars&#39; answer\r\n    4.2770634955  # This answer\r\n    30.7715615392 # matt b&#39;s answer\r\n\r\nThe method I presented as well as preserving order is also (slightly) faster than the set subtraction because it doesn&#39;t require construction of an unnecessary set. The performance difference would be more noticable if the first list is considerably longer than the second and if hashing is expensive. Here&#39;s a second test demonstrating this:\r\n\r\n    init = &#39;&#39;&#39;\r\n    temp1 = [str(i) for i in range(100000)]\r\n    temp2 = [str(i * 2) for i in range(50)]\r\n    &#39;&#39;&#39;\r\n\r\nResults:\r\n\r\n    11.3836875916 # ars&#39; answer\r\n    3.63890368748 # this answer (3 times faster!)\r\n    37.7445402279 # matt b&#39;s answer\r\n\r\n","body":"<p>The existing solutions all offer either one or the other of:<\/p>\n\n<ul>\n<li>Faster than O(n*m) performance.<\/li>\n<li>Preserve order of input list.<\/li>\n<\/ul>\n\n<p>But so far no solution has both. If you want both, try this:<\/p>\n\n<pre><code>s = set(temp2)\ntemp3 = [x for x in temp1 if x not in s]\n<\/code><\/pre>\n\n<p><strong>Performance test<\/strong><\/p>\n\n<pre><code>import timeit\ninit = 'temp1 = list(range(100)); temp2 = [i * 2 for i in range(50)]'\nprint timeit.timeit('list(set(temp1) - set(temp2))', init, number = 100000)\nprint timeit.timeit('s = set(temp2);[x for x in temp1 if x not in s]', init, number = 100000)\nprint timeit.timeit('[item for item in temp1 if item not in temp2]', init, number = 100000)\n<\/code><\/pre>\n\n<p>Results:<\/p>\n\n<pre><code>4.34620224079 # ars' answer\n4.2770634955  # This answer\n30.7715615392 # matt b's answer\n<\/code><\/pre>\n\n<p>The method I presented as well as preserving order is also (slightly) faster than the set subtraction because it doesn't require construction of an unnecessary set. The performance difference would be more noticable if the first list is considerably longer than the second and if hashing is expensive. Here's a second test demonstrating this:<\/p>\n\n<pre><code>init = '''\ntemp1 = [str(i) for i in range(100000)]\ntemp2 = [str(i * 2) for i in range(50)]\n'''\n<\/code><\/pre>\n\n<p>Results:<\/p>\n\n<pre><code>11.3836875916 # ars' answer\n3.63890368748 # this answer (3 times faster!)\n37.7445402279 # matt b's answer\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":4865575,"reputation":14100,"user_id":3923962,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/9a1a27cd3e4d489417ee9428cfc200c5?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"The Aelfinn","link":"https:\/\/stackoverflow.com\/users\/3923962\/the-aelfinn"},"is_accepted":false,"score":621,"last_activity_date":1677366984,"last_edit_date":1677366984.0,"creation_date":1474929996,"answer_id":39713544,"question_id":1534210,"content_license":"CC BY-SA 4.0","body_markdown":"Since Python 3, the [documentation][1] suggests creating the virtual environment using:\r\n\r\n    python3 -m venv &quot;my_env_name&quot;\r\n\r\nAlso, if we want a particular version of python, lets say 3.6, then we can install as\r\n\r\n    python3.6 -m venv &quot;my_env_name&quot;\r\n\r\nMake sure to install the referenced version of python along with your existing system python. For example, if the installed version in your system is `python 3.8` only, you will encounter an error stating that &quot;Command &#39;python3.6&#39; not found&quot;.\r\n\r\n### Obsolete information\r\n\r\nThe [`pyvenv`][1] script can be used to create a virtual environment:\r\n\r\n    pyvenv &quot;\/path\/to\/new\/virtual\/environment&quot;\r\n\r\n**Deprecated since Python 3.6.**\r\n\r\n  [1]: https:\/\/docs.python.org\/3\/library\/venv.html &quot;Python 3.6.4 documentation - Creation of virtual environments&quot;\r\n  [2]: https:\/\/pypi.python.org\/pypi\/virtualenv","body":"<p>Since Python 3, the <a href=\"https:\/\/docs.python.org\/3\/library\/venv.html\" rel=\"noreferrer\" title=\"Python 3.6.4 documentation - Creation of virtual environments\">documentation<\/a> suggests creating the virtual environment using:<\/p>\n<pre><code>python3 -m venv &quot;my_env_name&quot;\n<\/code><\/pre>\n<p>Also, if we want a particular version of python, lets say 3.6, then we can install as<\/p>\n<pre><code>python3.6 -m venv &quot;my_env_name&quot;\n<\/code><\/pre>\n<p>Make sure to install the referenced version of python along with your existing system python. For example, if the installed version in your system is <code>python 3.8<\/code> only, you will encounter an error stating that &quot;Command 'python3.6' not found&quot;.<\/p>\n<h3>Obsolete information<\/h3>\n<p>The <a href=\"https:\/\/docs.python.org\/3\/library\/venv.html\" rel=\"noreferrer\" title=\"Python 3.6.4 documentation - Creation of virtual environments\"><code>pyvenv<\/code><\/a> script can be used to create a virtual environment:<\/p>\n<pre><code>pyvenv &quot;\/path\/to\/new\/virtual\/environment&quot;\n<\/code><\/pre>\n<p><strong>Deprecated since Python 3.6.<\/strong><\/p>\n","community_owned_date":null},{"owner":{"account_id":976973,"reputation":11093,"user_id":997813,"user_type":"registered","accept_rate":64,"profile_image":"https:\/\/www.gravatar.com\/avatar\/e917968317abb617b39d12613b1975a9?s=256&d=identicon&r=PG","display_name":"Arjun Sreedharan","link":"https:\/\/stackoverflow.com\/users\/997813\/arjun-sreedharan"},"is_accepted":false,"score":620,"last_activity_date":1683792581,"last_edit_date":1683792581.0,"creation_date":1390757518,"answer_id":21366809,"question_id":2709821,"content_license":"CC BY-SA 4.0","body_markdown":"Let&#39;s say you have a class `ClassA` which contains a method `methodA` defined as:\r\n\r\n    class ClassA:\r\n        def methodA(self, arg1, arg2):\r\n            ... # do something\r\n\r\n\r\nand `objectA` is an instance of this class.\r\n\r\nNow when `objectA.methodA(arg1, arg2)` is called, python internally converts it for you as:\r\n\r\n    ClassA.methodA(objectA, arg1, arg2)\r\n\r\nThe `self` variable refers to the object itself.","body":"<p>Let's say you have a class <code>ClassA<\/code> which contains a method <code>methodA<\/code> defined as:<\/p>\n<pre><code>class ClassA:\n    def methodA(self, arg1, arg2):\n        ... # do something\n<\/code><\/pre>\n<p>and <code>objectA<\/code> is an instance of this class.<\/p>\n<p>Now when <code>objectA.methodA(arg1, arg2)<\/code> is called, python internally converts it for you as:<\/p>\n<pre><code>ClassA.methodA(objectA, arg1, arg2)\n<\/code><\/pre>\n<p>The <code>self<\/code> variable refers to the object itself.<\/p>\n","community_owned_date":null},{"owner":{"account_id":2370546,"reputation":7434,"user_id":2075265,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/b7081d0131ad47821467b8e81434cf7a?s=256&d=identicon&r=PG","display_name":"jgbarah","link":"https:\/\/stackoverflow.com\/users\/2075265\/jgbarah"},"is_accepted":false,"score":612,"last_activity_date":1520556563,"last_edit_date":1520556563.0,"creation_date":1394149577,"answer_id":22238613,"question_id":11875770,"content_license":"CC BY-SA 3.0","body_markdown":"Building on other answers, a simple solution based on a specific serializer that just converts `datetime.datetime` and `datetime.date` objects to strings.\r\n\r\n    from datetime import date, datetime\r\n    \r\n    def json_serial(obj):\r\n        &quot;&quot;&quot;JSON serializer for objects not serializable by default json code&quot;&quot;&quot;\r\n    \r\n        if isinstance(obj, (datetime, date)):\r\n            return obj.isoformat()\r\n        raise TypeError (&quot;Type %s not serializable&quot; % type(obj))\r\n\r\nAs seen, the code just checks to find out if object is of class `datetime.datetime` or `datetime.date`, and then uses `.isoformat()` to produce a serialized version of it, according to ISO 8601 format, YYYY-MM-DDTHH:MM:SS (which is easily decoded by JavaScript). If more complex serialized representations are sought, other code could be used instead of str() (see other answers to this question for examples). The code ends by raising an exception, to deal with the case it is called with a non-serializable type.\r\n\r\nThis json_serial function can be used as follows:\r\n\r\n    from datetime import datetime\r\n    from json import dumps\r\n    \r\n    print dumps(datetime.now(), default=json_serial)\r\n\r\nThe details about how the default parameter to json.dumps works can be found in [Section Basic Usage of the json module documentation][2]. \r\n\r\n\r\n  [1]: https:\/\/stackoverflow.com\/a\/36142844\/293064\r\n  [2]: http:\/\/docs.python.org\/2\/library\/json.html#basic-usage","body":"<p>Building on other answers, a simple solution based on a specific serializer that just converts <code>datetime.datetime<\/code> and <code>datetime.date<\/code> objects to strings.<\/p>\n\n<pre><code>from datetime import date, datetime\n\ndef json_serial(obj):\n    \"\"\"JSON serializer for objects not serializable by default json code\"\"\"\n\n    if isinstance(obj, (datetime, date)):\n        return obj.isoformat()\n    raise TypeError (\"Type %s not serializable\" % type(obj))\n<\/code><\/pre>\n\n<p>As seen, the code just checks to find out if object is of class <code>datetime.datetime<\/code> or <code>datetime.date<\/code>, and then uses <code>.isoformat()<\/code> to produce a serialized version of it, according to ISO 8601 format, YYYY-MM-DDTHH:MM:SS (which is easily decoded by JavaScript). If more complex serialized representations are sought, other code could be used instead of str() (see other answers to this question for examples). The code ends by raising an exception, to deal with the case it is called with a non-serializable type.<\/p>\n\n<p>This json_serial function can be used as follows:<\/p>\n\n<pre><code>from datetime import datetime\nfrom json import dumps\n\nprint dumps(datetime.now(), default=json_serial)\n<\/code><\/pre>\n\n<p>The details about how the default parameter to json.dumps works can be found in <a href=\"http:\/\/docs.python.org\/2\/library\/json.html#basic-usage\" rel=\"noreferrer\">Section Basic Usage of the json module documentation<\/a>. <\/p>\n","community_owned_date":null},{"owner":{"account_id":1164345,"reputation":22795,"user_id":1143274,"user_type":"registered","accept_rate":56,"profile_image":"https:\/\/www.gravatar.com\/avatar\/bf11af111cab6e513d68e5e30762deb5?s=256&d=identicon&r=PG","display_name":"Evgeni Sergeev","link":"https:\/\/stackoverflow.com\/users\/1143274\/evgeni-sergeev"},"is_accepted":false,"score":606,"last_activity_date":1632950707,"last_edit_date":1632950707.0,"creation_date":1433988930,"answer_id":30770447,"question_id":5142418,"content_license":"CC BY-SA 4.0","body_markdown":"Watch out for the parentheses. As has been pointed out in other answers, [in Python 3, `assert` is still a statement][1], so by analogy with `print(..)`, one may extrapolate the same to `assert(..)` or `raise(..)` but you shouldn&#39;t.\r\n\r\nThis is wrong:\r\n\r\n    assert(2 + 2 == 5, &quot;Houston we&#39;ve got a problem&quot;)\r\n\r\nThis is correct:\r\n\r\n    assert 2 + 2 == 5, &quot;Houston we&#39;ve got a problem&quot;\r\n\r\nThe reason the first one will not work is that `bool( (False, &quot;Houston we&#39;ve got a problem&quot;) )` evaluates to `True`.\r\n\r\nIn the statement `assert(False)`, these are just redundant parentheses around `False`, which evaluate to their contents. But with `assert(False,)` the parentheses are now a tuple, and a non-empty tuple evaluates to `True` in a boolean context.\r\n\r\n\r\n  [1]: https:\/\/docs.python.org\/3\/reference\/simple_stmts.html#assert","body":"<p>Watch out for the parentheses. As has been pointed out in other answers, <a href=\"https:\/\/docs.python.org\/3\/reference\/simple_stmts.html#assert\" rel=\"noreferrer\">in Python 3, <code>assert<\/code> is still a statement<\/a>, so by analogy with <code>print(..)<\/code>, one may extrapolate the same to <code>assert(..)<\/code> or <code>raise(..)<\/code> but you shouldn't.<\/p>\n<p>This is wrong:<\/p>\n<pre><code>assert(2 + 2 == 5, &quot;Houston we've got a problem&quot;)\n<\/code><\/pre>\n<p>This is correct:<\/p>\n<pre><code>assert 2 + 2 == 5, &quot;Houston we've got a problem&quot;\n<\/code><\/pre>\n<p>The reason the first one will not work is that <code>bool( (False, &quot;Houston we've got a problem&quot;) )<\/code> evaluates to <code>True<\/code>.<\/p>\n<p>In the statement <code>assert(False)<\/code>, these are just redundant parentheses around <code>False<\/code>, which evaluate to their contents. But with <code>assert(False,)<\/code> the parentheses are now a tuple, and a non-empty tuple evaluates to <code>True<\/code> in a boolean context.<\/p>\n","community_owned_date":null},{"owner":{"account_id":55331,"reputation":176273,"user_id":165673,"user_type":"registered","accept_rate":81,"profile_image":"https:\/\/www.gravatar.com\/avatar\/e43e620f96a26bf6ee7fa70750c0302a?s=256&d=identicon&r=PG","display_name":"Yarin","link":"https:\/\/stackoverflow.com\/users\/165673\/yarin"},"is_accepted":false,"score":605,"last_activity_date":1587294973,"last_edit_date":1587294973.0,"creation_date":1330204532,"answer_id":9448136,"question_id":4015417,"content_license":"CC BY-SA 4.0","body_markdown":"**Python 3**\r\n\r\n- `class MyClass(object):` = New-style class\r\n- `class MyClass:` = New-style class (implicitly inherits from `object`)\r\n\r\n**Python 2**\r\n\r\n- `class MyClass(object):` = New-style class\r\n- `class MyClass:` = *OLD-STYLE CLASS*\r\n\r\n\r\n----------\r\n\r\n\r\n**Explanation**:\r\n\r\nWhen defining base classes in Python 3.x, you\u2019re allowed to drop the `object` from the definition. However, this can open the door for a seriously hard to track problem\u2026\r\n\r\nPython introduced new-style classes back in Python 2.2, and by now old-style classes are really quite old. Discussion of old-style classes is [buried in the 2.x docs][1], and non-existent in the 3.x docs.\r\n\r\nThe problem is, **the syntax for old-style classes in Python 2.x is the same as the alternative syntax for new-style classes in Python 3.x**. Python 2.x is still very widely used (e.g. GAE, Web2Py), and any code (or coder) unwittingly bringing 3.x-style class definitions into 2.x code is going to end up with some seriously outdated base objects. And because old-style classes aren\u2019t on anyone\u2019s radar, they likely won\u2019t know what hit them.\r\n\r\nSo just spell it out the long way and save some 2.x developer the tears.\r\n\r\n\r\n  [1]: http:\/\/docs.python.org\/2\/reference\/datamodel.html#new-style-and-classic-classes\r\n","body":"<p><strong>Python 3<\/strong><\/p>\n\n<ul>\n<li><code>class MyClass(object):<\/code> = New-style class<\/li>\n<li><code>class MyClass:<\/code> = New-style class (implicitly inherits from <code>object<\/code>)<\/li>\n<\/ul>\n\n<p><strong>Python 2<\/strong><\/p>\n\n<ul>\n<li><code>class MyClass(object):<\/code> = New-style class<\/li>\n<li><code>class MyClass:<\/code> = <em>OLD-STYLE CLASS<\/em><\/li>\n<\/ul>\n\n<hr>\n\n<p><strong>Explanation<\/strong>:<\/p>\n\n<p>When defining base classes in Python 3.x, you\u2019re allowed to drop the <code>object<\/code> from the definition. However, this can open the door for a seriously hard to track problem\u2026<\/p>\n\n<p>Python introduced new-style classes back in Python 2.2, and by now old-style classes are really quite old. Discussion of old-style classes is <a href=\"http:\/\/docs.python.org\/2\/reference\/datamodel.html#new-style-and-classic-classes\" rel=\"noreferrer\">buried in the 2.x docs<\/a>, and non-existent in the 3.x docs.<\/p>\n\n<p>The problem is, <strong>the syntax for old-style classes in Python 2.x is the same as the alternative syntax for new-style classes in Python 3.x<\/strong>. Python 2.x is still very widely used (e.g. GAE, Web2Py), and any code (or coder) unwittingly bringing 3.x-style class definitions into 2.x code is going to end up with some seriously outdated base objects. And because old-style classes aren\u2019t on anyone\u2019s radar, they likely won\u2019t know what hit them.<\/p>\n\n<p>So just spell it out the long way and save some 2.x developer the tears.<\/p>\n","community_owned_date":null},{"owner":{"account_id":9,"reputation":220393,"user_id":13,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/i.stack.imgur.com\/1XtZi.jpg?s=256&g=1","display_name":"C. K. Young","link":"https:\/\/stackoverflow.com\/users\/13\/c-k-young"},"is_accepted":false,"score":598,"last_activity_date":1244035325,"last_edit_date":null,"creation_date":1244035325,"answer_id":944712,"question_id":944700,"content_license":"CC BY-SA 2.5","body_markdown":"The usual way to test for a NaN is to see if it&#39;s equal to itself:\r\n\r\n    def isNaN(num):\r\n        return num != num\r\n","body":"<p>The usual way to test for a NaN is to see if it's equal to itself:<\/p>\n\n<pre><code>def isNaN(num):\n    return num != num\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":258754,"reputation":379785,"user_id":541136,"user_type":"moderator","accept_rate":96,"profile_image":"https:\/\/i.stack.imgur.com\/wftMn.jpg?s=256&g=1","display_name":"Russia Must Remove Putin","link":"https:\/\/stackoverflow.com\/users\/541136\/russia-must-remove-putin"},"is_accepted":false,"score":591,"last_activity_date":1648480054,"last_edit_date":1648480054.0,"creation_date":1456783130,"answer_id":35710527,"question_id":44834,"content_license":"CC BY-SA 4.0","body_markdown":"&gt; **Explain __all__ in Python?**\r\n&gt; \r\n&gt; I keep seeing the variable `__all__` set in different `__init__.py` files.\r\n&gt; \r\n&gt; \r\n&gt; What does this do?\r\n\r\n## What does `__all__` do?\r\n\r\nIt declares the semantically &quot;public&quot; names from a module. If there is a name in `__all__`, users are expected to use it, and they can have the expectation that it will not change. \r\n\r\nIt also will have programmatic effects:\r\n\r\n### `import *`\r\n\r\n`__all__` in a module, e.g. `module.py`:\r\n```\r\n__all__ = [&#39;foo&#39;, &#39;Bar&#39;]\r\n```\r\nmeans that when you `import *` from the module, only those names in the `__all__` are imported:\r\n```\r\nfrom module import *               # imports foo and Bar\r\n```\r\n### Documentation tools\r\n\r\nDocumentation and code autocompletion tools may (in fact, should) also inspect the `__all__` to determine what names to show as available from a module.\r\n\r\n## `__init__.py` makes a directory a Python package\r\n\r\nFrom the [docs][1]:\r\n\r\n&gt; The `__init__.py` files are required to make Python treat the directories as containing packages; this is done to prevent directories with a common name, such as string, from unintentionally hiding valid modules that occur later on the module search path.\r\n\r\n&gt; In the simplest case, `__init__.py` can just be an empty file, but it can also execute initialization code for the package or set the `__all__` variable.\r\n\r\nSo the `__init__.py` can declare the `__all__` for a *package*.\r\n\r\n# Managing an API:\r\n\r\nA package is typically made up of modules that may import one another, but that are necessarily tied together with an `__init__.py` file. That file is what makes the directory an actual Python package. For example, say you have the following files in a package:\r\n```none\r\npackage\r\n\u251c\u2500\u2500 __init__.py\r\n\u251c\u2500\u2500 module_1.py\r\n\u2514\u2500\u2500 module_2.py\r\n```\r\nLet&#39;s create these files with Python so you can follow along - you could paste the following into a Python 3 shell:\r\n\r\n```\r\nfrom pathlib import Path\r\n\r\npackage = Path(&#39;package&#39;)\r\npackage.mkdir()\r\n\r\n(package \/ &#39;__init__.py&#39;).write_text(&quot;&quot;&quot;\r\nfrom .module_1 import *\r\nfrom .module_2 import *\r\n&quot;&quot;&quot;)\r\n\r\npackage_module_1 = package \/ &#39;module_1.py&#39;\r\npackage_module_1.write_text(&quot;&quot;&quot;\r\n__all__ = [&#39;foo&#39;]\r\nimp_detail1 = imp_detail2 = imp_detail3 = None\r\ndef foo(): pass\r\n&quot;&quot;&quot;)\r\n\r\npackage_module_2 = package \/ &#39;module_2.py&#39;\r\npackage_module_2.write_text(&quot;&quot;&quot;\r\n__all__ = [&#39;Bar&#39;]\r\nimp_detail1 = imp_detail2 = imp_detail3 = None\r\nclass Bar: pass\r\n&quot;&quot;&quot;)\r\n```\r\n\r\nAnd now you have presented a complete api that someone else can use when they import your package, like so: \r\n\r\n    import package\r\n    package.foo()\r\n    package.Bar()\r\n\r\nAnd the package won&#39;t have all the other implementation details you used when creating your modules cluttering up the `package` namespace.\r\n\r\n## `__all__` in `__init__.py`\r\n\r\nAfter more work, maybe you&#39;ve decided that the modules are too big (like many thousands of lines?) and need to be split up. So you do the following:\r\n```none\r\npackage\r\n\u251c\u2500\u2500 __init__.py\r\n\u251c\u2500\u2500 module_1\r\n\u2502&#160;&#160; \u251c\u2500\u2500 foo_implementation.py\r\n\u2502&#160;&#160; \u2514\u2500\u2500 __init__.py\r\n\u2514\u2500\u2500 module_2\r\n    \u251c\u2500\u2500 Bar_implementation.py\r\n    \u2514\u2500\u2500 __init__.py\r\n```\r\nFirst make the subpackage directories with the same names as the modules:\r\n```\r\nsubpackage_1 = package \/ &#39;module_1&#39;\r\nsubpackage_1.mkdir()\r\nsubpackage_2 = package \/ &#39;module_2&#39;\r\nsubpackage_2.mkdir()\r\n```\r\nMove the implementations:\r\n```\r\npackage_module_1.rename(subpackage_1 \/ &#39;foo_implementation.py&#39;)\r\npackage_module_2.rename(subpackage_2 \/ &#39;Bar_implementation.py&#39;)\r\n```\r\ncreate `__init__.py`s for the subpackages that declare the `__all__` for each:\r\n```\r\n(subpackage_1 \/ &#39;__init__.py&#39;).write_text(&quot;&quot;&quot;\r\nfrom .foo_implementation import *\r\n__all__ = [&#39;foo&#39;]\r\n&quot;&quot;&quot;)\r\n(subpackage_2 \/ &#39;__init__.py&#39;).write_text(&quot;&quot;&quot;\r\nfrom .Bar_implementation import *\r\n__all__ = [&#39;Bar&#39;]\r\n&quot;&quot;&quot;)\r\n```\r\n\r\nAnd now you still have the api provisioned at the package level:\r\n\r\n```\r\n&gt;&gt;&gt; import package\r\n&gt;&gt;&gt; package.foo()\r\n&gt;&gt;&gt; package.Bar()\r\n&lt;package.module_2.Bar_implementation.Bar object at 0x7f0c2349d210&gt;\r\n```\r\n\r\n\r\nAnd you can easily add things to your API that you can manage at the subpackage level instead of the subpackage&#39;s module level. If you want to add a new name to the API, you simply update the `__init__.py`, e.g. in module_2:\r\n\r\n    from .Bar_implementation import *\r\n    from .Baz_implementation import *\r\n    __all__ = [&#39;Bar&#39;, &#39;Baz&#39;]\r\n\r\nAnd if you&#39;re not ready to publish `Baz` in the top level API, in your top level `__init__.py` you could have:\r\n\r\n    from .module_1 import *       # also constrained by __all__&#39;s\r\n    from .module_2 import *       # in the __init__.py&#39;s\r\n    __all__ = [&#39;foo&#39;, &#39;Bar&#39;]     # further constraining the names advertised\r\n\r\nand if your users are aware of the availability of `Baz`, they can use it:\r\n\r\n    import package\r\n    package.Baz()\r\n\r\nbut if they don&#39;t know about it, other tools (like [pydoc][2]) won&#39;t inform them.\r\n\r\nYou can later change that when `Baz` is ready for prime time:\r\n\r\n    from .module_1 import *\r\n    from .module_2 import *\r\n    __all__ = [&#39;foo&#39;, &#39;Bar&#39;, &#39;Baz&#39;]\r\n\r\n# Prefixing `_` versus `__all__`:\r\n\r\nBy default, Python will export all names that do not start with an `_` when imported with `import *`. As demonstrated by the shell session here, `import *` does not bring in the `_us_non_public` name from the `us.py` module: \r\n\r\n```python\r\n$ cat us.py\r\nUSALLCAPS = &quot;all caps&quot;\r\nus_snake_case = &quot;snake_case&quot;\r\n_us_non_public = &quot;shouldn&#39;t import&quot;\r\n$ python\r\nPython 3.10.0 (default, Oct  4 2021, 17:55:55) [GCC 10.3.0] on linux\r\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\r\n&gt;&gt;&gt; from us import *\r\n&gt;&gt;&gt; dir()\r\n[&#39;USALLCAPS&#39;, &#39;__annotations__&#39;, &#39;__builtins__&#39;, &#39;__doc__&#39;, &#39;__loader__&#39;, &#39;__name__&#39;, &#39;__package__&#39;, &#39;__spec__&#39;, &#39;us_snake_case&#39;]\r\n```\r\n\r\n\r\nYou certainly *could* rely on this mechanism. Some packages in the Python standard library, in fact, *do* rely on this, but to do so, they alias their imports, for example, in [`ctypes\/__init__.py`][3]:\r\n\r\n    import os as _os, sys as _sys\r\n\r\nUsing the `_` convention can be more elegant because it removes the redundancy of naming the names again. But it adds the redundancy for imports (if you have a lot of them) and it is *easy* to forget to do this consistently - and the last thing you want is to have to indefinitely support something you intended to only be an implementation detail, just because you forgot to prefix an `_` when naming a function.\r\n\r\nI personally write an `__all__` early in my development lifecycle for modules so that others who might use my code know what they should use and not use.\r\n\r\nMost packages in the standard library also use `__all__`.\r\n\r\n# When avoiding `__all__` makes sense\r\n\r\nIt makes sense to stick to the `_` prefix convention in lieu of `__all__` when:\r\n\r\n- You&#39;re still in early development mode and have no users, and are constantly tweaking your API.\r\n- Maybe you do have users, but you have unittests that cover the API, and you&#39;re still actively adding to the API and tweaking in development.\r\n\r\n\r\n# An `export` decorator\r\n\r\nThe downside of using `__all__` is that you have to write the names of functions and classes being exported twice - and the information is kept separate from the definitions. We *could* use a decorator to solve this problem.\r\n\r\nI got the idea for such an export decorator from David Beazley&#39;s talk on packaging. This implementation seems to work well in CPython&#39;s traditional importer. If you have a special import hook or system, I do not guarantee it, but if you adopt it, it is fairly trivial to back out - you&#39;ll just need to manually add the names back into the `__all__`\r\n\r\nSo in, for example, a utility library, you would define the decorator:\r\n\r\n    import sys\r\n    \r\n    def export(fn):\r\n        mod = sys.modules[fn.__module__]\r\n        if hasattr(mod, &#39;__all__&#39;):\r\n            mod.__all__.append(fn.__name__)\r\n        else:\r\n            mod.__all__ = [fn.__name__]\r\n        return fn\r\n\r\nand then, where you would define an `__all__`, you do this:\r\n\r\n    $ cat &gt; main.py\r\n    from lib import export\r\n    __all__ = [] # optional - we create a list if __all__ is not there.\r\n    \r\n    @export\r\n    def foo(): pass\r\n    \r\n    @export\r\n    def bar():\r\n        &#39;bar&#39;\r\n    \r\n    def main():\r\n        print(&#39;main&#39;)\r\n    \r\n    if __name__ == &#39;__main__&#39;:\r\n        main()\r\n\r\n\r\nAnd this works fine whether run as main or imported by another function.\r\n\r\n    $ cat &gt; run.py\r\n    import main\r\n    main.main()\r\n    \r\n    $ python run.py\r\n    main\r\n\r\nAnd API provisioning with `import *` will work too:\r\n\r\n    $ cat &gt; run.py\r\n    from main import *\r\n    foo()\r\n    bar()\r\n    main() # expected to error here, not exported\r\n\r\n    $ python run.py\r\n    Traceback (most recent call last):\r\n      File &quot;run.py&quot;, line 4, in &lt;module&gt;\r\n        main() # expected to error here, not exported\r\n    NameError: name &#39;main&#39; is not defined\r\n\r\n\r\n  [1]: https:\/\/docs.python.org\/tutorial\/modules.html#packages\r\n  [2]: https:\/\/hg.python.org\/cpython\/file\/2.7\/Lib\/pydoc.py#l173\r\n  [3]: https:\/\/hg.python.org\/cpython\/file\/default\/Lib\/ctypes\/__init__.py#l3\r\n","body":"<blockquote>\n<p><strong>Explain <strong>all<\/strong> in Python?<\/strong><\/p>\n<p>I keep seeing the variable <code>__all__<\/code> set in different <code>__init__.py<\/code> files.<\/p>\n<p>What does this do?<\/p>\n<\/blockquote>\n<h2>What does <code>__all__<\/code> do?<\/h2>\n<p>It declares the semantically &quot;public&quot; names from a module. If there is a name in <code>__all__<\/code>, users are expected to use it, and they can have the expectation that it will not change.<\/p>\n<p>It also will have programmatic effects:<\/p>\n<h3><code>import *<\/code><\/h3>\n<p><code>__all__<\/code> in a module, e.g. <code>module.py<\/code>:<\/p>\n<pre><code>__all__ = ['foo', 'Bar']\n<\/code><\/pre>\n<p>means that when you <code>import *<\/code> from the module, only those names in the <code>__all__<\/code> are imported:<\/p>\n<pre><code>from module import *               # imports foo and Bar\n<\/code><\/pre>\n<h3>Documentation tools<\/h3>\n<p>Documentation and code autocompletion tools may (in fact, should) also inspect the <code>__all__<\/code> to determine what names to show as available from a module.<\/p>\n<h2><code>__init__.py<\/code> makes a directory a Python package<\/h2>\n<p>From the <a href=\"https:\/\/docs.python.org\/tutorial\/modules.html#packages\" rel=\"noreferrer\">docs<\/a>:<\/p>\n<blockquote>\n<p>The <code>__init__.py<\/code> files are required to make Python treat the directories as containing packages; this is done to prevent directories with a common name, such as string, from unintentionally hiding valid modules that occur later on the module search path.<\/p>\n<\/blockquote>\n<blockquote>\n<p>In the simplest case, <code>__init__.py<\/code> can just be an empty file, but it can also execute initialization code for the package or set the <code>__all__<\/code> variable.<\/p>\n<\/blockquote>\n<p>So the <code>__init__.py<\/code> can declare the <code>__all__<\/code> for a <em>package<\/em>.<\/p>\n<h1>Managing an API:<\/h1>\n<p>A package is typically made up of modules that may import one another, but that are necessarily tied together with an <code>__init__.py<\/code> file. That file is what makes the directory an actual Python package. For example, say you have the following files in a package:<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>package\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 module_1.py\n\u2514\u2500\u2500 module_2.py\n<\/code><\/pre>\n<p>Let's create these files with Python so you can follow along - you could paste the following into a Python 3 shell:<\/p>\n<pre><code>from pathlib import Path\n\npackage = Path('package')\npackage.mkdir()\n\n(package \/ '__init__.py').write_text(&quot;&quot;&quot;\nfrom .module_1 import *\nfrom .module_2 import *\n&quot;&quot;&quot;)\n\npackage_module_1 = package \/ 'module_1.py'\npackage_module_1.write_text(&quot;&quot;&quot;\n__all__ = ['foo']\nimp_detail1 = imp_detail2 = imp_detail3 = None\ndef foo(): pass\n&quot;&quot;&quot;)\n\npackage_module_2 = package \/ 'module_2.py'\npackage_module_2.write_text(&quot;&quot;&quot;\n__all__ = ['Bar']\nimp_detail1 = imp_detail2 = imp_detail3 = None\nclass Bar: pass\n&quot;&quot;&quot;)\n<\/code><\/pre>\n<p>And now you have presented a complete api that someone else can use when they import your package, like so:<\/p>\n<pre><code>import package\npackage.foo()\npackage.Bar()\n<\/code><\/pre>\n<p>And the package won't have all the other implementation details you used when creating your modules cluttering up the <code>package<\/code> namespace.<\/p>\n<h2><code>__all__<\/code> in <code>__init__.py<\/code><\/h2>\n<p>After more work, maybe you've decided that the modules are too big (like many thousands of lines?) and need to be split up. So you do the following:<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>package\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 module_1\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 foo_implementation.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 module_2\n    \u251c\u2500\u2500 Bar_implementation.py\n    \u2514\u2500\u2500 __init__.py\n<\/code><\/pre>\n<p>First make the subpackage directories with the same names as the modules:<\/p>\n<pre><code>subpackage_1 = package \/ 'module_1'\nsubpackage_1.mkdir()\nsubpackage_2 = package \/ 'module_2'\nsubpackage_2.mkdir()\n<\/code><\/pre>\n<p>Move the implementations:<\/p>\n<pre><code>package_module_1.rename(subpackage_1 \/ 'foo_implementation.py')\npackage_module_2.rename(subpackage_2 \/ 'Bar_implementation.py')\n<\/code><\/pre>\n<p>create <code>__init__.py<\/code>s for the subpackages that declare the <code>__all__<\/code> for each:<\/p>\n<pre><code>(subpackage_1 \/ '__init__.py').write_text(&quot;&quot;&quot;\nfrom .foo_implementation import *\n__all__ = ['foo']\n&quot;&quot;&quot;)\n(subpackage_2 \/ '__init__.py').write_text(&quot;&quot;&quot;\nfrom .Bar_implementation import *\n__all__ = ['Bar']\n&quot;&quot;&quot;)\n<\/code><\/pre>\n<p>And now you still have the api provisioned at the package level:<\/p>\n<pre><code>&gt;&gt;&gt; import package\n&gt;&gt;&gt; package.foo()\n&gt;&gt;&gt; package.Bar()\n&lt;package.module_2.Bar_implementation.Bar object at 0x7f0c2349d210&gt;\n<\/code><\/pre>\n<p>And you can easily add things to your API that you can manage at the subpackage level instead of the subpackage's module level. If you want to add a new name to the API, you simply update the <code>__init__.py<\/code>, e.g. in module_2:<\/p>\n<pre><code>from .Bar_implementation import *\nfrom .Baz_implementation import *\n__all__ = ['Bar', 'Baz']\n<\/code><\/pre>\n<p>And if you're not ready to publish <code>Baz<\/code> in the top level API, in your top level <code>__init__.py<\/code> you could have:<\/p>\n<pre><code>from .module_1 import *       # also constrained by __all__'s\nfrom .module_2 import *       # in the __init__.py's\n__all__ = ['foo', 'Bar']     # further constraining the names advertised\n<\/code><\/pre>\n<p>and if your users are aware of the availability of <code>Baz<\/code>, they can use it:<\/p>\n<pre><code>import package\npackage.Baz()\n<\/code><\/pre>\n<p>but if they don't know about it, other tools (like <a href=\"https:\/\/hg.python.org\/cpython\/file\/2.7\/Lib\/pydoc.py#l173\" rel=\"noreferrer\">pydoc<\/a>) won't inform them.<\/p>\n<p>You can later change that when <code>Baz<\/code> is ready for prime time:<\/p>\n<pre><code>from .module_1 import *\nfrom .module_2 import *\n__all__ = ['foo', 'Bar', 'Baz']\n<\/code><\/pre>\n<h1>Prefixing <code>_<\/code> versus <code>__all__<\/code>:<\/h1>\n<p>By default, Python will export all names that do not start with an <code>_<\/code> when imported with <code>import *<\/code>. As demonstrated by the shell session here, <code>import *<\/code> does not bring in the <code>_us_non_public<\/code> name from the <code>us.py<\/code> module:<\/p>\n<pre class=\"lang-py prettyprint-override\"><code>$ cat us.py\nUSALLCAPS = &quot;all caps&quot;\nus_snake_case = &quot;snake_case&quot;\n_us_non_public = &quot;shouldn't import&quot;\n$ python\nPython 3.10.0 (default, Oct  4 2021, 17:55:55) [GCC 10.3.0] on linux\nType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.\n&gt;&gt;&gt; from us import *\n&gt;&gt;&gt; dir()\n['USALLCAPS', '__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__', 'us_snake_case']\n<\/code><\/pre>\n<p>You certainly <em>could<\/em> rely on this mechanism. Some packages in the Python standard library, in fact, <em>do<\/em> rely on this, but to do so, they alias their imports, for example, in <a href=\"https:\/\/hg.python.org\/cpython\/file\/default\/Lib\/ctypes\/__init__.py#l3\" rel=\"noreferrer\"><code>ctypes\/__init__.py<\/code><\/a>:<\/p>\n<pre><code>import os as _os, sys as _sys\n<\/code><\/pre>\n<p>Using the <code>_<\/code> convention can be more elegant because it removes the redundancy of naming the names again. But it adds the redundancy for imports (if you have a lot of them) and it is <em>easy<\/em> to forget to do this consistently - and the last thing you want is to have to indefinitely support something you intended to only be an implementation detail, just because you forgot to prefix an <code>_<\/code> when naming a function.<\/p>\n<p>I personally write an <code>__all__<\/code> early in my development lifecycle for modules so that others who might use my code know what they should use and not use.<\/p>\n<p>Most packages in the standard library also use <code>__all__<\/code>.<\/p>\n<h1>When avoiding <code>__all__<\/code> makes sense<\/h1>\n<p>It makes sense to stick to the <code>_<\/code> prefix convention in lieu of <code>__all__<\/code> when:<\/p>\n<ul>\n<li>You're still in early development mode and have no users, and are constantly tweaking your API.<\/li>\n<li>Maybe you do have users, but you have unittests that cover the API, and you're still actively adding to the API and tweaking in development.<\/li>\n<\/ul>\n<h1>An <code>export<\/code> decorator<\/h1>\n<p>The downside of using <code>__all__<\/code> is that you have to write the names of functions and classes being exported twice - and the information is kept separate from the definitions. We <em>could<\/em> use a decorator to solve this problem.<\/p>\n<p>I got the idea for such an export decorator from David Beazley's talk on packaging. This implementation seems to work well in CPython's traditional importer. If you have a special import hook or system, I do not guarantee it, but if you adopt it, it is fairly trivial to back out - you'll just need to manually add the names back into the <code>__all__<\/code><\/p>\n<p>So in, for example, a utility library, you would define the decorator:<\/p>\n<pre><code>import sys\n\ndef export(fn):\n    mod = sys.modules[fn.__module__]\n    if hasattr(mod, '__all__'):\n        mod.__all__.append(fn.__name__)\n    else:\n        mod.__all__ = [fn.__name__]\n    return fn\n<\/code><\/pre>\n<p>and then, where you would define an <code>__all__<\/code>, you do this:<\/p>\n<pre><code>$ cat &gt; main.py\nfrom lib import export\n__all__ = [] # optional - we create a list if __all__ is not there.\n\n@export\ndef foo(): pass\n\n@export\ndef bar():\n    'bar'\n\ndef main():\n    print('main')\n\nif __name__ == '__main__':\n    main()\n<\/code><\/pre>\n<p>And this works fine whether run as main or imported by another function.<\/p>\n<pre><code>$ cat &gt; run.py\nimport main\nmain.main()\n\n$ python run.py\nmain\n<\/code><\/pre>\n<p>And API provisioning with <code>import *<\/code> will work too:<\/p>\n<pre><code>$ cat &gt; run.py\nfrom main import *\nfoo()\nbar()\nmain() # expected to error here, not exported\n\n$ python run.py\nTraceback (most recent call last):\n  File &quot;run.py&quot;, line 4, in &lt;module&gt;\n    main() # expected to error here, not exported\nNameError: name 'main' is not defined\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":1729031,"reputation":7269,"user_id":1583052,"user_type":"registered","accept_rate":86,"profile_image":"https:\/\/www.gravatar.com\/avatar\/a8ac8174d6655935bbe8bba5267260f6?s=256&d=identicon&r=PG","display_name":"Dipu","link":"https:\/\/stackoverflow.com\/users\/1583052\/dipu"},"is_accepted":false,"score":580,"last_activity_date":1566917074,"last_edit_date":1566917074.0,"creation_date":1509374017,"answer_id":47017849,"question_id":9001509,"content_license":"CC BY-SA 4.0","body_markdown":"For CPython\/PyPy 3.6, and any Python 3.7 or higher, this is easily done with:\r\n    \r\n    &gt;&gt;&gt; d = {2:3, 1:89, 4:5, 3:0}\r\n    &gt;&gt;&gt; dict(sorted(d.items()))\r\n    {1: 89, 2: 3, 3: 0, 4: 5}\r\n","body":"<p>For CPython\/PyPy 3.6, and any Python 3.7 or higher, this is easily done with:<\/p>\n\n<pre><code>&gt;&gt;&gt; d = {2:3, 1:89, 4:5, 3:0}\n&gt;&gt;&gt; dict(sorted(d.items()))\n{1: 89, 2: 3, 3: 0, 4: 5}\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":3162849,"reputation":6013,"user_id":2673464,"user_type":"registered","accept_rate":86,"profile_image":"https:\/\/www.gravatar.com\/avatar\/7378df20f450484c9e3a1d1c26615083?s=256&d=identicon&r=PG","display_name":"felixphew","link":"https:\/\/stackoverflow.com\/users\/2673464\/felixphew"},"is_accepted":false,"score":553,"last_activity_date":1553142269,"last_edit_date":1553142269.0,"creation_date":1473646518,"answer_id":39442556,"question_id":17271319,"content_license":"CC BY-SA 4.0","body_markdown":"I&#39;m surprised no-one has mentioned this - since 2013, python itself is capable of installing `pip`, no external commands (and no internet connection) required.\r\n\r\n    sudo -H python -m ensurepip\r\n\r\nThis will create a similar install to what `easy_install` would.","body":"<p>I'm surprised no-one has mentioned this - since 2013, python itself is capable of installing <code>pip<\/code>, no external commands (and no internet connection) required.<\/p>\n\n<pre><code>sudo -H python -m ensurepip\n<\/code><\/pre>\n\n<p>This will create a similar install to what <code>easy_install<\/code> would.<\/p>\n","community_owned_date":null},{"owner":{"account_id":231940,"reputation":91102,"user_id":496445,"user_type":"registered","accept_rate":97,"profile_image":"https:\/\/www.gravatar.com\/avatar\/db00d7b4388686c6d280e8f0578c7e39?s=256&d=identicon&r=PG","display_name":"jdi","link":"https:\/\/stackoverflow.com\/users\/496445\/jdi"},"is_accepted":true,"score":549,"last_activity_date":1544559964,"last_edit_date":1544559964.0,"creation_date":1344478077,"answer_id":11875813,"question_id":11875770,"content_license":"CC BY-SA 4.0","body_markdown":"# Updated for 2018\r\n\r\nThe original answer accommodated the way MongoDB &quot;date&quot; fields were represented as:\r\n\r\n`{&quot;$date&quot;: 1506816000000}`\r\n\r\nIf you want a generic Python solution for serializing `datetime` to json, check out [@jjmontes&#39; answer](https:\/\/stackoverflow.com\/a\/36142844\/293064) for a quick solution which requires no dependencies.\r\n\r\n---\r\n\r\nAs you are using mongoengine (per comments) and pymongo is a dependency, pymongo has built-in utilities to help with json serialization:  \r\nhttp:\/\/api.mongodb.org\/python\/1.10.1\/api\/bson\/json_util.html\r\n\r\nExample usage (serialization):\r\n    \r\n    from bson import json_util\r\n    import json\r\n\r\n    json.dumps(anObject, default=json_util.default)\r\n    \r\nExample usage (deserialization):\r\n    \r\n    json.loads(aJsonString, object_hook=json_util.object_hook)\r\n\r\n---\r\n\r\n## Django\r\n\r\nDjango provides a native `DjangoJSONEncoder` serializer that deals with this kind of properly.\r\n\r\nSee https:\/\/docs.djangoproject.com\/en\/dev\/topics\/serialization\/#djangojsonencoder\r\n\r\n    from django.core.serializers.json import DjangoJSONEncoder\r\n\r\n    return json.dumps(\r\n      item,\r\n      sort_keys=True,\r\n      indent=1,\r\n      cls=DjangoJSONEncoder\r\n    )\r\n\r\nOne difference I&#39;ve noticed between `DjangoJSONEncoder` and using a custom `default` like this:\r\n\r\n    import datetime\r\n    import json\r\n    \r\n    def default(o):\r\n        if isinstance(o, (datetime.date, datetime.datetime)):\r\n            return o.isoformat()\r\n    \r\n    return json.dumps(\r\n      item,\r\n      sort_keys=True,\r\n      indent=1,\r\n      default=default\r\n    )\r\n\r\nIs that Django strips a bit of the data:\r\n\r\n     &quot;last_login&quot;: &quot;2018-08-03T10:51:42.990&quot;, # DjangoJSONEncoder \r\n     &quot;last_login&quot;: &quot;2018-08-03T10:51:42.990239&quot;, # default\r\n\r\nSo, you may need to be careful about that in some cases.\r\n","body":"<h1>Updated for 2018<\/h1>\n\n<p>The original answer accommodated the way MongoDB \"date\" fields were represented as:<\/p>\n\n<p><code>{\"$date\": 1506816000000}<\/code><\/p>\n\n<p>If you want a generic Python solution for serializing <code>datetime<\/code> to json, check out <a href=\"https:\/\/stackoverflow.com\/a\/36142844\/293064\">@jjmontes' answer<\/a> for a quick solution which requires no dependencies.<\/p>\n\n<hr>\n\n<p>As you are using mongoengine (per comments) and pymongo is a dependency, pymongo has built-in utilities to help with json serialization:<br>\n<a href=\"http:\/\/api.mongodb.org\/python\/1.10.1\/api\/bson\/json_util.html\" rel=\"noreferrer\">http:\/\/api.mongodb.org\/python\/1.10.1\/api\/bson\/json_util.html<\/a><\/p>\n\n<p>Example usage (serialization):<\/p>\n\n<pre><code>from bson import json_util\nimport json\n\njson.dumps(anObject, default=json_util.default)\n<\/code><\/pre>\n\n<p>Example usage (deserialization):<\/p>\n\n<pre><code>json.loads(aJsonString, object_hook=json_util.object_hook)\n<\/code><\/pre>\n\n<hr>\n\n<h2>Django<\/h2>\n\n<p>Django provides a native <code>DjangoJSONEncoder<\/code> serializer that deals with this kind of properly.<\/p>\n\n<p>See <a href=\"https:\/\/docs.djangoproject.com\/en\/dev\/topics\/serialization\/#djangojsonencoder\" rel=\"noreferrer\">https:\/\/docs.djangoproject.com\/en\/dev\/topics\/serialization\/#djangojsonencoder<\/a><\/p>\n\n<pre><code>from django.core.serializers.json import DjangoJSONEncoder\n\nreturn json.dumps(\n  item,\n  sort_keys=True,\n  indent=1,\n  cls=DjangoJSONEncoder\n)\n<\/code><\/pre>\n\n<p>One difference I've noticed between <code>DjangoJSONEncoder<\/code> and using a custom <code>default<\/code> like this:<\/p>\n\n<pre><code>import datetime\nimport json\n\ndef default(o):\n    if isinstance(o, (datetime.date, datetime.datetime)):\n        return o.isoformat()\n\nreturn json.dumps(\n  item,\n  sort_keys=True,\n  indent=1,\n  default=default\n)\n<\/code><\/pre>\n\n<p>Is that Django strips a bit of the data:<\/p>\n\n<pre><code> \"last_login\": \"2018-08-03T10:51:42.990\", # DjangoJSONEncoder \n \"last_login\": \"2018-08-03T10:51:42.990239\", # default\n<\/code><\/pre>\n\n<p>So, you may need to be careful about that in some cases.<\/p>\n","community_owned_date":null},{"owner":{"account_id":83948,"reputation":7486,"user_id":234998,"user_type":"registered","accept_rate":88,"profile_image":"https:\/\/www.gravatar.com\/avatar\/f3f8e8bc25c717b3abc8626b31642fb1?s=256&d=identicon&r=PG","display_name":"tabdulradi","link":"https:\/\/stackoverflow.com\/users\/234998\/tabdulradi"},"is_accepted":true,"score":547,"last_activity_date":1609071166,"last_edit_date":1609071166.0,"creation_date":1267328553,"answer_id":2349998,"question_id":2349991,"content_license":"CC BY-SA 4.0","body_markdown":"[`importlib`][1] was added to Python 3 to programmatically import a module. \r\n\r\n```lang-python\r\nimport importlib\r\n\r\nmoduleName = input(&#39;Enter module name:&#39;)\r\nimportlib.import_module(moduleName)\r\n```\r\n\r\nThe .py extension should be removed from `moduleName`. The function also defines a `package` argument for relative imports.\r\n\r\nIn python 2.x:\r\n\r\n- Just `import file` without the .py extension\r\n- A folder can be marked as a package, by adding an empty `__init__.py` file\r\n- You can use the `__import__` function, which takes the module name (without extension) as a string extension\r\n\r\n```lang-python\r\npmName = input(&#39;Enter module name:&#39;)\r\npm = __import__(pmName)\r\nprint(dir(pm))\r\n```\r\n\r\nType `help(__import__)` for more details.\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  [1]: https:\/\/docs.python.org\/3\/library\/importlib.html#module-importlib\r\n\r\n","body":"<p><a href=\"https:\/\/docs.python.org\/3\/library\/importlib.html#module-importlib\" rel=\"noreferrer\"><code>importlib<\/code><\/a> was added to Python 3 to programmatically import a module.<\/p>\n<pre class=\"lang-python prettyprint-override\"><code>import importlib\n\nmoduleName = input('Enter module name:')\nimportlib.import_module(moduleName)\n<\/code><\/pre>\n<p>The .py extension should be removed from <code>moduleName<\/code>. The function also defines a <code>package<\/code> argument for relative imports.<\/p>\n<p>In python 2.x:<\/p>\n<ul>\n<li>Just <code>import file<\/code> without the .py extension<\/li>\n<li>A folder can be marked as a package, by adding an empty <code>__init__.py<\/code> file<\/li>\n<li>You can use the <code>__import__<\/code> function, which takes the module name (without extension) as a string extension<\/li>\n<\/ul>\n<pre class=\"lang-python prettyprint-override\"><code>pmName = input('Enter module name:')\npm = __import__(pmName)\nprint(dir(pm))\n<\/code><\/pre>\n<p>Type <code>help(__import__)<\/code> for more details.<\/p>\n","community_owned_date":null},{"owner":{"account_id":873215,"reputation":8262,"user_id":923599,"user_type":"registered","accept_rate":83,"profile_image":"https:\/\/www.gravatar.com\/avatar\/b34f368fb57c46dfc9a54adcbef0b335?s=256&d=identicon&r=PG","display_name":"jzwiener","link":"https:\/\/stackoverflow.com\/users\/923599\/jzwiener"},"is_accepted":false,"score":547,"last_activity_date":1678911740,"last_edit_date":1678911740.0,"creation_date":1377625342,"answer_id":18472142,"question_id":715417,"content_license":"CC BY-SA 4.0","body_markdown":"#### Warning: This answer will no longer work as of Python 3.12 (it&#39;s deprecated as of 3.10)\r\n\r\nUse:\r\n\r\n    bool(distutils.util.strtobool(some_string))\r\n\r\n- **Python 2**: [`distutils.util.strtobool`](https:\/\/docs.python.org\/2\/distutils\/apiref.html#distutils.util.strtobool)\r\n- **Python &gt;=3, &lt;3.12**: [`distutils.util.strtobool`](https:\/\/docs.python.org\/3\/distutils\/apiref.html#distutils.util.strtobool)\r\n- **Python &gt;=3.12**: No longer part of the standard library due to [PEP 632 \u2013 Deprecate distutils module][1]\r\n\r\n&gt; True values are y, yes, t, true, on and 1; false values are n, no, f, false, off and 0. Raises ValueError if val is anything else.\r\n\r\nBe aware that `distutils.util.strtobool()` returns integer representations and thus it needs to be wrapped with `bool()` to get Boolean values.\r\n\r\nGiven that distutils will no longer be part of the standard library, here is the code for `distutils.util.strtobool()` (see the [source code][2] for 3.11.2).\r\n\r\n```python\r\ndef strtobool (val):\r\n    &quot;&quot;&quot;Convert a string representation of truth to true (1) or false (0).\r\n    True values are &#39;y&#39;, &#39;yes&#39;, &#39;t&#39;, &#39;true&#39;, &#39;on&#39;, and &#39;1&#39;; false values\r\n    are &#39;n&#39;, &#39;no&#39;, &#39;f&#39;, &#39;false&#39;, &#39;off&#39;, and &#39;0&#39;.  Raises ValueError if\r\n    &#39;val&#39; is anything else.\r\n    &quot;&quot;&quot;\r\n    val = val.lower()\r\n    if val in (&#39;y&#39;, &#39;yes&#39;, &#39;t&#39;, &#39;true&#39;, &#39;on&#39;, &#39;1&#39;):\r\n        return 1\r\n    elif val in (&#39;n&#39;, &#39;no&#39;, &#39;f&#39;, &#39;false&#39;, &#39;off&#39;, &#39;0&#39;):\r\n        return 0\r\n    else:\r\n        raise ValueError(&quot;invalid truth value %r&quot; % (val,))\r\n```\r\n\r\n\r\n  [1]: https:\/\/peps.python.org\/pep-0632\/\r\n  [2]: https:\/\/github.com\/python\/cpython\/blob\/v3.11.2\/Lib\/distutils\/util.py#L308","body":"<h4>Warning: This answer will no longer work as of Python 3.12 (it's deprecated as of 3.10)<\/h4>\n<p>Use:<\/p>\n<pre><code>bool(distutils.util.strtobool(some_string))\n<\/code><\/pre>\n<ul>\n<li><strong>Python 2<\/strong>: <a href=\"https:\/\/docs.python.org\/2\/distutils\/apiref.html#distutils.util.strtobool\" rel=\"noreferrer\"><code>distutils.util.strtobool<\/code><\/a><\/li>\n<li><strong>Python &gt;=3, &lt;3.12<\/strong>: <a href=\"https:\/\/docs.python.org\/3\/distutils\/apiref.html#distutils.util.strtobool\" rel=\"noreferrer\"><code>distutils.util.strtobool<\/code><\/a><\/li>\n<li><strong>Python &gt;=3.12<\/strong>: No longer part of the standard library due to <a href=\"https:\/\/peps.python.org\/pep-0632\/\" rel=\"noreferrer\">PEP 632 \u2013 Deprecate distutils module<\/a><\/li>\n<\/ul>\n<blockquote>\n<p>True values are y, yes, t, true, on and 1; false values are n, no, f, false, off and 0. Raises ValueError if val is anything else.<\/p>\n<\/blockquote>\n<p>Be aware that <code>distutils.util.strtobool()<\/code> returns integer representations and thus it needs to be wrapped with <code>bool()<\/code> to get Boolean values.<\/p>\n<p>Given that distutils will no longer be part of the standard library, here is the code for <code>distutils.util.strtobool()<\/code> (see the <a href=\"https:\/\/github.com\/python\/cpython\/blob\/v3.11.2\/Lib\/distutils\/util.py#L308\" rel=\"noreferrer\">source code<\/a> for 3.11.2).<\/p>\n<pre class=\"lang-py prettyprint-override\"><code>def strtobool (val):\n    &quot;&quot;&quot;Convert a string representation of truth to true (1) or false (0).\n    True values are 'y', 'yes', 't', 'true', 'on', and '1'; false values\n    are 'n', 'no', 'f', 'false', 'off', and '0'.  Raises ValueError if\n    'val' is anything else.\n    &quot;&quot;&quot;\n    val = val.lower()\n    if val in ('y', 'yes', 't', 'true', 'on', '1'):\n        return 1\n    elif val in ('n', 'no', 'f', 'false', 'off', '0'):\n        return 0\n    else:\n        raise ValueError(&quot;invalid truth value %r&quot; % (val,))\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":148191,"reputation":6900,"user_id":359786,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/ebb3326286b3a8df5cdd8b1b7d1dd349?s=256&d=identicon&r=PG","display_name":"hernamesbarbara","link":"https:\/\/stackoverflow.com\/users\/359786\/hernamesbarbara"},"is_accepted":false,"score":542,"last_activity_date":1671651234,"last_edit_date":1671651234.0,"creation_date":1366568127,"answer_id":16134561,"question_id":15891038,"content_license":"CC BY-SA 4.0","body_markdown":"Use this:\r\n\r\n```python\r\na = [[&#39;a&#39;, &#39;1.2&#39;, &#39;4.2&#39;], [&#39;b&#39;, &#39;70&#39;, &#39;0.03&#39;], [&#39;x&#39;, &#39;5&#39;, &#39;0&#39;]]\r\ndf = pd.DataFrame(a, columns=[&#39;one&#39;, &#39;two&#39;, &#39;three&#39;])\r\ndf\r\n\r\nOut[16]:\r\n  one  two three\r\n0   a  1.2   4.2\r\n1   b   70  0.03\r\n2   x    5     0\r\n\r\ndf.dtypes\r\n\r\nOut[17]:\r\none      object\r\ntwo      object\r\nthree    object\r\n\r\ndf[[&#39;two&#39;, &#39;three&#39;]] = df[[&#39;two&#39;, &#39;three&#39;]].astype(float)\r\n\r\ndf.dtypes\r\n\r\nOut[19]:\r\none       object\r\ntwo      float64\r\nthree    float64\r\n```\r\n","body":"<p>Use this:<\/p>\n<pre class=\"lang-py prettyprint-override\"><code>a = [['a', '1.2', '4.2'], ['b', '70', '0.03'], ['x', '5', '0']]\ndf = pd.DataFrame(a, columns=['one', 'two', 'three'])\ndf\n\nOut[16]:\n  one  two three\n0   a  1.2   4.2\n1   b   70  0.03\n2   x    5     0\n\ndf.dtypes\n\nOut[17]:\none      object\ntwo      object\nthree    object\n\ndf[['two', 'three']] = df[['two', 'three']].astype(float)\n\ndf.dtypes\n\nOut[19]:\none       object\ntwo      float64\nthree    float64\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":152622,"reputation":490342,"user_id":367273,"user_type":"registered","accept_rate":96,"profile_image":"https:\/\/www.gravatar.com\/avatar\/f1ed2b0c87f602ef30229f5c4b04eff6?s=256&d=identicon&r=PG","display_name":"NPE","link":"https:\/\/stackoverflow.com\/users\/367273\/npe"},"is_accepted":true,"score":541,"last_activity_date":1541562380,"last_edit_date":1541562380.0,"creation_date":1307470582,"answer_id":6269785,"question_id":6269765,"content_license":"CC BY-SA 4.0","body_markdown":"To quote [the Python 2.x documentation][1]:\r\n\r\n&gt; A prefix of &#39;b&#39; or &#39;B&#39; is ignored in\r\n&gt; Python 2; it indicates that the\r\n&gt; literal should become a bytes literal\r\n&gt; in Python 3 (e.g. when code is\r\n&gt; automatically converted with 2to3). A\r\n&gt; &#39;u&#39; or &#39;b&#39; prefix may be followed by\r\n&gt; an &#39;r&#39; prefix.\r\n\r\n\r\nThe [Python 3 documentation][2] states:\r\n\r\n&gt; Bytes literals are always prefixed with &#39;b&#39; or &#39;B&#39;; they produce an instance of the bytes type instead of the str type. They may only contain ASCII characters; bytes with a numeric value of 128 or greater must be expressed with escapes.\r\n\r\n\r\n[1]: https:\/\/docs.python.org\/2\/reference\/lexical_analysis.html#string-literals\r\n[2]: https:\/\/docs.python.org\/3\/reference\/lexical_analysis.html#string-and-bytes-literals","body":"<p>To quote <a href=\"https:\/\/docs.python.org\/2\/reference\/lexical_analysis.html#string-literals\" rel=\"noreferrer\">the Python 2.x documentation<\/a>:<\/p>\n\n<blockquote>\n  <p>A prefix of 'b' or 'B' is ignored in\n  Python 2; it indicates that the\n  literal should become a bytes literal\n  in Python 3 (e.g. when code is\n  automatically converted with 2to3). A\n  'u' or 'b' prefix may be followed by\n  an 'r' prefix.<\/p>\n<\/blockquote>\n\n<p>The <a href=\"https:\/\/docs.python.org\/3\/reference\/lexical_analysis.html#string-and-bytes-literals\" rel=\"noreferrer\">Python 3 documentation<\/a> states:<\/p>\n\n<blockquote>\n  <p>Bytes literals are always prefixed with 'b' or 'B'; they produce an instance of the bytes type instead of the str type. They may only contain ASCII characters; bytes with a numeric value of 128 or greater must be expressed with escapes.<\/p>\n<\/blockquote>\n","community_owned_date":null},{"owner":{"account_id":2841781,"reputation":12146,"user_id":2441252,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/KwYqP.jpg?s=256&g=1","display_name":"Leigh","link":"https:\/\/stackoverflow.com\/users\/2441252\/leigh"},"is_accepted":false,"score":533,"last_activity_date":1442423521,"last_edit_date":1442423521.0,"creation_date":1372065081,"answer_id":17271838,"question_id":17271319,"content_license":"CC BY-SA 3.0","body_markdown":"You can install it through Homebrew on OS X.  Why would you install Python with Homebrew?\r\n\r\n&gt; The version of Python that ships with OS X is great for learning but\r\n&gt; it\u2019s not good for development. The version shipped with OS X may be\r\n&gt; out of date from the official current Python release, which is\r\n&gt; considered the stable production version. ([source][1])\r\n\r\nHomebrew is something of a package manager for OS X.  Find more details on the [Homebrew page][2].  Once Homebrew is installed, run the following to install the latest Python, Pip &amp; Setuptools:\r\n\r\n    brew install python\r\n\r\n\r\n  [1]: http:\/\/docs.python-guide.org\/en\/latest\/starting\/install\/osx\/\r\n  [2]: http:\/\/mxcl.github.io\/homebrew\/","body":"<p>You can install it through Homebrew on OS X.  Why would you install Python with Homebrew?<\/p>\n\n<blockquote>\n  <p>The version of Python that ships with OS X is great for learning but\n  it\u2019s not good for development. The version shipped with OS X may be\n  out of date from the official current Python release, which is\n  considered the stable production version. (<a href=\"http:\/\/docs.python-guide.org\/en\/latest\/starting\/install\/osx\/\">source<\/a>)<\/p>\n<\/blockquote>\n\n<p>Homebrew is something of a package manager for OS X.  Find more details on the <a href=\"http:\/\/mxcl.github.io\/homebrew\/\">Homebrew page<\/a>.  Once Homebrew is installed, run the following to install the latest Python, Pip &amp; Setuptools:<\/p>\n\n<pre><code>brew install python\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":6583,"reputation":32291,"user_id":11125,"user_type":"registered","accept_rate":86,"profile_image":"https:\/\/www.gravatar.com\/avatar\/4e291c239daeaf0bb1de295b1fdced5b?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"gak","link":"https:\/\/stackoverflow.com\/users\/11125\/gak"},"is_accepted":false,"score":520,"last_activity_date":1546837330,"last_edit_date":1546837330.0,"creation_date":1344231427,"answer_id":11822995,"question_id":582336,"content_license":"CC BY-SA 4.0","body_markdown":"A while ago I made [`pycallgraph`][1] which generates a visualisation from your Python code. **Edit:** I&#39;ve updated the example to work with 3.3, the latest release as of this writing.\r\n\r\nAfter a `pip install pycallgraph` and installing [GraphViz][gv] you can run it from the command line:\r\n\r\n    pycallgraph graphviz -- .\/mypythonscript.py\r\n\r\nOr, you can profile particular parts of your code:\r\n\r\n    from pycallgraph import PyCallGraph\r\n    from pycallgraph.output import GraphvizOutput\r\n    \r\n    with PyCallGraph(output=GraphvizOutput()):\r\n        code_to_profile()\r\n\r\nEither of these will generate a `pycallgraph.png` file similar to the image below:\r\n\r\n![enter image description here][2]\r\n\r\n  [1]: http:\/\/pycallgraph.slowchop.com\/\r\n  [2]: http:\/\/i.stack.imgur.com\/aiNEA.png\r\n  [gv]: http:\/\/www.graphviz.org\/","body":"<p>A while ago I made <a href=\"http:\/\/pycallgraph.slowchop.com\/\" rel=\"noreferrer\"><code>pycallgraph<\/code><\/a> which generates a visualisation from your Python code. <strong>Edit:<\/strong> I've updated the example to work with 3.3, the latest release as of this writing.<\/p>\n\n<p>After a <code>pip install pycallgraph<\/code> and installing <a href=\"http:\/\/www.graphviz.org\/\" rel=\"noreferrer\">GraphViz<\/a> you can run it from the command line:<\/p>\n\n<pre><code>pycallgraph graphviz -- .\/mypythonscript.py\n<\/code><\/pre>\n\n<p>Or, you can profile particular parts of your code:<\/p>\n\n<pre><code>from pycallgraph import PyCallGraph\nfrom pycallgraph.output import GraphvizOutput\n\nwith PyCallGraph(output=GraphvizOutput()):\n    code_to_profile()\n<\/code><\/pre>\n\n<p>Either of these will generate a <code>pycallgraph.png<\/code> file similar to the image below:<\/p>\n\n<p><img src=\"https:\/\/i.stack.imgur.com\/aiNEA.png\" alt=\"enter image description here\"><\/p>\n","community_owned_date":null},{"owner":{"account_id":6383531,"reputation":153646,"user_id":4952130,"user_type":"registered","accept_rate":95,"profile_image":"https:\/\/i.stack.imgur.com\/kKQZw.png?s=256&g=1","display_name":"Dimitris Fasarakis Hilliard","link":"https:\/\/stackoverflow.com\/users\/4952130\/dimitris-fasarakis-hilliard"},"is_accepted":false,"score":519,"last_activity_date":1523100044,"last_edit_date":1523100044.0,"creation_date":1500721052,"answer_id":45253740,"question_id":16819222,"content_license":"CC BY-SA 3.0","body_markdown":"**Python &gt;= 3.5 alternative: unpack into a list literal** `[*newdict]`\r\n\r\nNew [unpacking generalizations (PEP 448)][1] were introduced with Python 3.5 allowing you to now easily do:\r\n\r\n    &gt;&gt;&gt; newdict = {1:0, 2:0, 3:0}\r\n    &gt;&gt;&gt; [*newdict]\r\n    [1, 2, 3]\r\n\r\nUnpacking with `*` works with *any* object that is iterable and, since dictionaries return their keys when iterated through, you can easily create a list by using it within a list literal. \r\n\r\nAdding `.keys()` i.e `[*newdict.keys()]` might help in making your intent a bit more explicit though it will cost you a function look-up and invocation. (which, in all honesty, isn&#39;t something you should *really* be worried about).\r\n\r\n&lt;sub&gt;\r\nThe `*iterable` syntax is similar to doing `list(iterable)` and its behaviour was initially documented in the [Calls section][2] of the Python Reference manual. With PEP 448 the restriction on where `*iterable` could appear was loosened allowing it to also be placed in list, set and tuple literals, the reference manual on [Expression lists][3] was also updated to state this.\r\n&lt;\/sub&gt;\r\n\r\n---\r\n\r\nThough equivalent to `list(newdict)` with the difference that it&#39;s faster (at least for small dictionaries) because no function call is actually performed:\r\n\r\n    %timeit [*newdict]\r\n    1000000 loops, best of 3: 249 ns per loop\r\n\r\n    %timeit list(newdict)\r\n    1000000 loops, best of 3: 508 ns per loop\r\n\r\n    %timeit [k for k in newdict]\r\n    1000000 loops, best of 3: 574 ns per loop\r\n\r\nwith larger dictionaries the speed is pretty much the same (the overhead of iterating through a large collection trumps the small cost of a function call).\r\n\r\n---\r\n\r\nIn a similar fashion, you can create tuples and sets of dictionary keys:\r\n\r\n    &gt;&gt;&gt; *newdict,\r\n    (1, 2, 3)\r\n    &gt;&gt;&gt; {*newdict}\r\n    {1, 2, 3}\r\n\r\nbeware of the trailing comma in the tuple case!\r\n\r\n\r\n  [1]: https:\/\/www.python.org\/dev\/peps\/pep-0448\/\r\n  [2]: https:\/\/docs.python.org\/3\/reference\/expressions.html#calls\r\n  [3]: https:\/\/docs.python.org\/3\/reference\/expressions.html#expression-lists","body":"<p><strong>Python >= 3.5 alternative: unpack into a list literal<\/strong> <code>[*newdict]<\/code><\/p>\n\n<p>New <a href=\"https:\/\/www.python.org\/dev\/peps\/pep-0448\/\" rel=\"noreferrer\">unpacking generalizations (PEP 448)<\/a> were introduced with Python 3.5 allowing you to now easily do:<\/p>\n\n<pre><code>&gt;&gt;&gt; newdict = {1:0, 2:0, 3:0}\n&gt;&gt;&gt; [*newdict]\n[1, 2, 3]\n<\/code><\/pre>\n\n<p>Unpacking with <code>*<\/code> works with <em>any<\/em> object that is iterable and, since dictionaries return their keys when iterated through, you can easily create a list by using it within a list literal. <\/p>\n\n<p>Adding <code>.keys()<\/code> i.e <code>[*newdict.keys()]<\/code> might help in making your intent a bit more explicit though it will cost you a function look-up and invocation. (which, in all honesty, isn't something you should <em>really<\/em> be worried about).<\/p>\n\n<p><sub>\nThe <code>*iterable<\/code> syntax is similar to doing <code>list(iterable)<\/code> and its behaviour was initially documented in the <a href=\"https:\/\/docs.python.org\/3\/reference\/expressions.html#calls\" rel=\"noreferrer\">Calls section<\/a> of the Python Reference manual. With PEP 448 the restriction on where <code>*iterable<\/code> could appear was loosened allowing it to also be placed in list, set and tuple literals, the reference manual on <a href=\"https:\/\/docs.python.org\/3\/reference\/expressions.html#expression-lists\" rel=\"noreferrer\">Expression lists<\/a> was also updated to state this.\n<\/sub><\/p>\n\n<hr>\n\n<p>Though equivalent to <code>list(newdict)<\/code> with the difference that it's faster (at least for small dictionaries) because no function call is actually performed:<\/p>\n\n<pre><code>%timeit [*newdict]\n1000000 loops, best of 3: 249 ns per loop\n\n%timeit list(newdict)\n1000000 loops, best of 3: 508 ns per loop\n\n%timeit [k for k in newdict]\n1000000 loops, best of 3: 574 ns per loop\n<\/code><\/pre>\n\n<p>with larger dictionaries the speed is pretty much the same (the overhead of iterating through a large collection trumps the small cost of a function call).<\/p>\n\n<hr>\n\n<p>In a similar fashion, you can create tuples and sets of dictionary keys:<\/p>\n\n<pre><code>&gt;&gt;&gt; *newdict,\n(1, 2, 3)\n&gt;&gt;&gt; {*newdict}\n{1, 2, 3}\n<\/code><\/pre>\n\n<p>beware of the trailing comma in the tuple case!<\/p>\n","community_owned_date":null},{"owner":{"account_id":735810,"reputation":381989,"user_id":704848,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/3f9be2c2958e208c8d9b629ac43c9c42?s=256&d=identicon&r=PG","display_name":"EdChum","link":"https:\/\/stackoverflow.com\/users\/704848\/edchum"},"is_accepted":false,"score":514,"last_activity_date":1634905455,"last_edit_date":1634905455.0,"creation_date":1382307915,"answer_id":19483602,"question_id":19482970,"content_license":"CC BY-SA 4.0","body_markdown":"There is a built-in method which is the most performant:\r\n\r\n    my_dataframe.columns.values.tolist()\r\n\r\n`.columns` returns an `Index`, `.columns.values` returns an array and this has a helper function `.tolist` to return a list.\r\n\r\nIf performance is not as important to you, `Index` objects define a `.tolist()` method that you can call directly:\r\n\r\n    my_dataframe.columns.tolist()\r\n\r\nThe difference in performance is obvious:\r\n\r\n```lang-none\r\n%timeit df.columns.tolist()\r\n16.7 &#181;s &#177; 317 ns per loop (mean &#177; std. dev. of 7 runs, 100000 loops each)\r\n\r\n%timeit df.columns.values.tolist()\r\n1.24 &#181;s &#177; 12.3 ns per loop (mean &#177; std. dev. of 7 runs, 1000000 loops each)\r\n```\r\n\r\n---\r\n\r\nFor those who hate typing, you can just call `list` on `df`, as so:\r\n\r\n    list(df)\r\n\r\n\r\n","body":"<p>There is a built-in method which is the most performant:<\/p>\n<pre><code>my_dataframe.columns.values.tolist()\n<\/code><\/pre>\n<p><code>.columns<\/code> returns an <code>Index<\/code>, <code>.columns.values<\/code> returns an array and this has a helper function <code>.tolist<\/code> to return a list.<\/p>\n<p>If performance is not as important to you, <code>Index<\/code> objects define a <code>.tolist()<\/code> method that you can call directly:<\/p>\n<pre><code>my_dataframe.columns.tolist()\n<\/code><\/pre>\n<p>The difference in performance is obvious:<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>%timeit df.columns.tolist()\n16.7 \u00b5s \u00b1 317 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n\n%timeit df.columns.values.tolist()\n1.24 \u00b5s \u00b1 12.3 ns per loop (mean \u00b1 std. dev. of 7 runs, 1000000 loops each)\n<\/code><\/pre>\n<hr \/>\n<p>For those who hate typing, you can just call <code>list<\/code> on <code>df<\/code>, as so:<\/p>\n<pre><code>list(df)\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":42127,"reputation":12691,"user_id":122661,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/430405a9c76f7dad73a091f237624743?s=256&d=identicon&r=PG","display_name":"Mark van Lent","link":"https:\/\/stackoverflow.com\/users\/122661\/mark-van-lent"},"is_accepted":false,"score":513,"last_activity_date":1305208710,"last_edit_date":1305208710.0,"creation_date":1280824748,"answer_id":3394902,"question_id":3394835,"content_license":"CC BY-SA 3.0","body_markdown":"One place where the use of `*args` and `**kwargs` is quite useful is for subclassing.\r\n\r\n    class Foo(object):\r\n        def __init__(self, value1, value2):\r\n            # do something with the values\r\n            print value1, value2\r\n\r\n    class MyFoo(Foo):\r\n        def __init__(self, *args, **kwargs):\r\n            # do something else, don&#39;t care about the args\r\n            print &#39;myfoo&#39;\r\n            super(MyFoo, self).__init__(*args, **kwargs)\r\n\r\nThis way you can extend the behaviour of the Foo class, without having to know too much about Foo. This can be quite convenient if you are programming to an API which might change. MyFoo just passes all arguments to the Foo class.\r\n        ","body":"<p>One place where the use of <code>*args<\/code> and <code>**kwargs<\/code> is quite useful is for subclassing.<\/p>\n\n<pre><code>class Foo(object):\n    def __init__(self, value1, value2):\n        # do something with the values\n        print value1, value2\n\nclass MyFoo(Foo):\n    def __init__(self, *args, **kwargs):\n        # do something else, don't care about the args\n        print 'myfoo'\n        super(MyFoo, self).__init__(*args, **kwargs)\n<\/code><\/pre>\n\n<p>This way you can extend the behaviour of the Foo class, without having to know too much about Foo. This can be quite convenient if you are programming to an API which might change. MyFoo just passes all arguments to the Foo class.<\/p>\n","community_owned_date":null},{"owner":{"account_id":178236,"reputation":30876,"user_id":410072,"user_type":"registered","accept_rate":77,"profile_image":"https:\/\/www.gravatar.com\/avatar\/22f57fe1a55d01c728d33cbcfda204b5?s=256&d=identicon&r=PG","display_name":"James","link":"https:\/\/stackoverflow.com\/users\/410072\/james"},"is_accepted":false,"score":512,"last_activity_date":1397573307,"last_edit_date":1397573307.0,"creation_date":1356094896,"answer_id":13990710,"question_id":9001509,"content_license":"CC BY-SA 3.0","body_markdown":"Dictionaries themselves do not have ordered items as such, should you want to print them etc to some order, here are some examples:\r\n\r\n**In Python 2.4 and above:**\r\n\r\n    mydict = {&#39;carl&#39;:40,\r\n              &#39;alan&#39;:2,\r\n              &#39;bob&#39;:1,\r\n              &#39;danny&#39;:3}\r\n\r\n    for key in sorted(mydict):\r\n        print &quot;%s: %s&quot; % (key, mydict[key])\r\n\r\ngives:\r\n\r\n    alan: 2\r\n    bob: 1\r\n    carl: 40\r\n    danny: 3\r\n\r\n**(Python below 2.4:)**\r\n\r\n    keylist = mydict.keys()\r\n    keylist.sort()\r\n    for key in keylist:\r\n        print &quot;%s: %s&quot; % (key, mydict[key])\r\n\r\nSource: [http:\/\/www.saltycrane.com\/blog\/2007\/09\/how-to-sort-python-dictionary-by-keys\/][1]\r\n\r\n\r\n  [1]: http:\/\/www.saltycrane.com\/blog\/2007\/09\/how-to-sort-python-dictionary-by-keys\/","body":"<p>Dictionaries themselves do not have ordered items as such, should you want to print them etc to some order, here are some examples:<\/p>\n\n<p><strong>In Python 2.4 and above:<\/strong><\/p>\n\n<pre><code>mydict = {'carl':40,\n          'alan':2,\n          'bob':1,\n          'danny':3}\n\nfor key in sorted(mydict):\n    print \"%s: %s\" % (key, mydict[key])\n<\/code><\/pre>\n\n<p>gives:<\/p>\n\n<pre><code>alan: 2\nbob: 1\ncarl: 40\ndanny: 3\n<\/code><\/pre>\n\n<p><strong>(Python below 2.4:)<\/strong><\/p>\n\n<pre><code>keylist = mydict.keys()\nkeylist.sort()\nfor key in keylist:\n    print \"%s: %s\" % (key, mydict[key])\n<\/code><\/pre>\n\n<p>Source: <a href=\"http:\/\/www.saltycrane.com\/blog\/2007\/09\/how-to-sort-python-dictionary-by-keys\/\">http:\/\/www.saltycrane.com\/blog\/2007\/09\/how-to-sort-python-dictionary-by-keys\/<\/a><\/p>\n","community_owned_date":null},{"owner":{"account_id":11820,"reputation":4996,"user_id":22985,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/1a25de8028f84ff98feb97e1b85738b2?s=256&d=identicon&r=PG","display_name":"BatchyX","link":"https:\/\/stackoverflow.com\/users\/22985\/batchyx"},"is_accepted":false,"score":511,"last_activity_date":1331044127,"last_edit_date":1331044127.0,"creation_date":1222521489,"answer_id":143636,"question_id":101268,"content_license":"CC BY-SA 3.0","body_markdown":"**Get the python regex parse tree to debug your regex.**\r\n\r\nRegular expressions are a great feature of python, but debugging them can be a pain, and it&#39;s all too easy to get a regex wrong.\r\n\r\nFortunately, python can print the regex parse tree, by passing the undocumented, experimental, hidden flag `re.DEBUG` (actually, 128) to `re.compile`.\r\n\r\n    &gt;&gt;&gt; re.compile(&quot;^\\[font(?:=(?P&lt;size&gt;[-+][0-9]{1,2}))?\\](.*?)[\/font]&quot;,\r\n        re.DEBUG)\r\n    at at_beginning\r\n    literal 91\r\n    literal 102\r\n    literal 111\r\n    literal 110\r\n    literal 116\r\n    max_repeat 0 1\r\n      subpattern None\r\n        literal 61\r\n        subpattern 1\r\n          in\r\n            literal 45\r\n            literal 43\r\n          max_repeat 1 2\r\n            in\r\n              range (48, 57)\r\n    literal 93\r\n    subpattern 2\r\n      min_repeat 0 65535\r\n        any None\r\n    in\r\n      literal 47\r\n      literal 102\r\n      literal 111\r\n      literal 110\r\n      literal 116\r\n\r\nOnce you understand the syntax, you can spot your errors.  There we can see that I forgot to escape the `[]` in `[\/font]`.\r\n\r\nOf course you can combine it with whatever flags you want, like commented regexes:\r\n\r\n    &gt;&gt;&gt; re.compile(&quot;&quot;&quot;\r\n     ^              # start of a line\r\n     \\[font         # the font tag\r\n     (?:=(?P&lt;size&gt;  # optional [font=+size]\r\n     [-+][0-9]{1,2} # size specification\r\n     ))?\r\n     \\]             # end of tag\r\n     (.*?)          # text between the tags\r\n     \\[\/font\\]      # end of the tag\r\n     &quot;&quot;&quot;, re.DEBUG|re.VERBOSE|re.DOTALL)","body":"<p><strong>Get the python regex parse tree to debug your regex.<\/strong><\/p>\n\n<p>Regular expressions are a great feature of python, but debugging them can be a pain, and it's all too easy to get a regex wrong.<\/p>\n\n<p>Fortunately, python can print the regex parse tree, by passing the undocumented, experimental, hidden flag <code>re.DEBUG<\/code> (actually, 128) to <code>re.compile<\/code>.<\/p>\n\n<pre><code>&gt;&gt;&gt; re.compile(\"^\\[font(?:=(?P&lt;size&gt;[-+][0-9]{1,2}))?\\](.*?)[\/font]\",\n    re.DEBUG)\nat at_beginning\nliteral 91\nliteral 102\nliteral 111\nliteral 110\nliteral 116\nmax_repeat 0 1\n  subpattern None\n    literal 61\n    subpattern 1\n      in\n        literal 45\n        literal 43\n      max_repeat 1 2\n        in\n          range (48, 57)\nliteral 93\nsubpattern 2\n  min_repeat 0 65535\n    any None\nin\n  literal 47\n  literal 102\n  literal 111\n  literal 110\n  literal 116\n<\/code><\/pre>\n\n<p>Once you understand the syntax, you can spot your errors.  There we can see that I forgot to escape the <code>[]<\/code> in <code>[\/font]<\/code>.<\/p>\n\n<p>Of course you can combine it with whatever flags you want, like commented regexes:<\/p>\n\n<pre><code>&gt;&gt;&gt; re.compile(\"\"\"\n ^              # start of a line\n \\[font         # the font tag\n (?:=(?P&lt;size&gt;  # optional [font=+size]\n [-+][0-9]{1,2} # size specification\n ))?\n \\]             # end of tag\n (.*?)          # text between the tags\n \\[\/font\\]      # end of the tag\n \"\"\", re.DEBUG|re.VERBOSE|re.DOTALL)\n<\/code><\/pre>\n","community_owned_date":1222521489.0},{"owner":{"account_id":2357941,"reputation":5279,"user_id":2065348,"user_type":"registered","accept_rate":60,"profile_image":"https:\/\/i.stack.imgur.com\/AmJOF.jpg?s=256&g=1","display_name":"j.m.g.r","link":"https:\/\/stackoverflow.com\/users\/2065348\/j-m-g-r"},"is_accepted":false,"score":504,"last_activity_date":1587500592,"last_edit_date":1587500592.0,"creation_date":1360684206,"answer_id":14836329,"question_id":73663,"content_license":"CC BY-SA 4.0","body_markdown":"A simple way to terminate a Python script early is to use the built-in `quit()` function. There is no need to import any library, and it is efficient and simple.\r\n\r\nExample:\r\n\r\n    #do stuff\r\n    if this == that:\r\n      quit()","body":"<p>A simple way to terminate a Python script early is to use the built-in <code>quit()<\/code> function. There is no need to import any library, and it is efficient and simple.<\/p>\n\n<p>Example:<\/p>\n\n<pre><code>#do stuff\nif this == that:\n  quit()\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":247,"reputation":147841,"user_id":305,"user_type":"registered","accept_rate":93,"profile_image":"https:\/\/www.gravatar.com\/avatar\/040ffc7f3327b05f01c54a8bef3ba60a?s=256&d=identicon&r=PG","display_name":"Mark Biek","link":"https:\/\/stackoverflow.com\/users\/305\/mark-biek"},"is_accepted":false,"score":487,"last_activity_date":1392527202,"last_edit_date":1392527202.0,"creation_date":1221266506,"answer_id":60215,"question_id":60208,"content_license":"CC BY-SA 3.0","body_markdown":"I&#39;ve always liked doing it this way\r\n\r\n    result = {\r\n      &#39;a&#39;: lambda x: x * 5,\r\n      &#39;b&#39;: lambda x: x + 7,\r\n      &#39;c&#39;: lambda x: x - 2\r\n    }[value](x)\r\n\r\n[From here](http:\/\/blog.simonwillison.net\/post\/57956755106\/switch)\r\n","body":"<p>I've always liked doing it this way<\/p>\n\n<pre><code>result = {\n  'a': lambda x: x * 5,\n  'b': lambda x: x + 7,\n  'c': lambda x: x - 2\n}[value](x)\n<\/code><\/pre>\n\n<p><a href=\"http:\/\/blog.simonwillison.net\/post\/57956755106\/switch\" rel=\"noreferrer\">From here<\/a><\/p>\n","community_owned_date":null},{"owner":{"account_id":294933,"reputation":11838,"user_id":599075,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/pQ3x5.png?s=256&g=1","display_name":"Andbdrew","link":"https:\/\/stackoverflow.com\/users\/599075\/andbdrew"},"is_accepted":false,"score":487,"last_activity_date":1343916965,"last_edit_date":1343916965.0,"creation_date":1333110308,"answer_id":9942885,"question_id":9942594,"content_license":"CC BY-SA 3.0","body_markdown":"This is a classic python unicode pain point! Consider the following:\r\n\r\n    a = u&#39;bats\\u00E0&#39;\r\n    print a\r\n     =&gt; bats&#224;\r\nAll good so far, but if we call str(a), let&#39;s see what happens:\r\n\r\n    str(a)\r\n    Traceback (most recent call last):\r\n      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\r\n    UnicodeEncodeError: &#39;ascii&#39; codec can&#39;t encode character u&#39;\\xe0&#39; in position 4: ordinal not in range(128)\r\nOh dip, that&#39;s not gonna do anyone any good! To fix the error, encode the bytes explicitly with .encode and tell python what codec to use:\r\n\r\n    a.encode(&#39;utf-8&#39;)\r\n     =&gt; &#39;bats\\xc3\\xa0&#39;\r\n    print a.encode(&#39;utf-8&#39;)\r\n     =&gt; bats&#224;\r\n \r\nVoil\\u00E0!\r\n\r\nThe issue is that when you call str(), python uses the default character encoding to try and encode the bytes you gave it, which in your case are sometimes representations of unicode characters. To fix the problem, you have to tell python how to deal with the string you give it by using .encode(&#39;whatever_unicode&#39;). Most of the time, you should be fine using utf-8.\r\n\r\nFor an excellent exposition on this topic, see Ned Batchelder&#39;s PyCon talk here: http:\/\/nedbatchelder.com\/text\/unipain.html\r\n\r\n","body":"<p>This is a classic python unicode pain point! Consider the following:<\/p>\n\n<pre><code>a = u'bats\\u00E0'\nprint a\n =&gt; bats\u00e0\n<\/code><\/pre>\n\n<p>All good so far, but if we call str(a), let's see what happens:<\/p>\n\n<pre><code>str(a)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nUnicodeEncodeError: 'ascii' codec can't encode character u'\\xe0' in position 4: ordinal not in range(128)\n<\/code><\/pre>\n\n<p>Oh dip, that's not gonna do anyone any good! To fix the error, encode the bytes explicitly with .encode and tell python what codec to use:<\/p>\n\n<pre><code>a.encode('utf-8')\n =&gt; 'bats\\xc3\\xa0'\nprint a.encode('utf-8')\n =&gt; bats\u00e0\n<\/code><\/pre>\n\n<p>Voil\\u00E0!<\/p>\n\n<p>The issue is that when you call str(), python uses the default character encoding to try and encode the bytes you gave it, which in your case are sometimes representations of unicode characters. To fix the problem, you have to tell python how to deal with the string you give it by using .encode('whatever_unicode'). Most of the time, you should be fine using utf-8.<\/p>\n\n<p>For an excellent exposition on this topic, see Ned Batchelder's PyCon talk here: <a href=\"http:\/\/nedbatchelder.com\/text\/unipain.html\">http:\/\/nedbatchelder.com\/text\/unipain.html<\/a><\/p>\n","community_owned_date":null},{"owner":{"account_id":186862,"reputation":219056,"user_id":424499,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/bc2071afd499daef001e75e14d7f9cce?s=256&d=identicon&r=PG","display_name":"Raymond Hettinger","link":"https:\/\/stackoverflow.com\/users\/424499\/raymond-hettinger"},"is_accepted":false,"score":485,"last_activity_date":1513931201,"last_edit_date":1513931201.0,"creation_date":1320108835,"answer_id":7961425,"question_id":7961363,"content_license":"CC BY-SA 3.0","body_markdown":"**In Python 2.7**, the new way of removing duplicates from an iterable while keeping it in the original order is:\r\n\r\n    &gt;&gt;&gt; from collections import OrderedDict\r\n    &gt;&gt;&gt; list(OrderedDict.fromkeys(&#39;abracadabra&#39;))\r\n    [&#39;a&#39;, &#39;b&#39;, &#39;r&#39;, &#39;c&#39;, &#39;d&#39;]\r\n\r\n**In Python 3.5**, the OrderedDict has a C implementation. My timings show that this is now both the fastest and shortest of the various approaches for Python 3.5.\r\n\r\n**In Python 3.6**, the regular dict became both ordered and compact.  (This feature is holds for CPython and PyPy but may not present in other implementations).  That gives us a new fastest way of deduping while retaining order:\r\n\r\n    &gt;&gt;&gt; list(dict.fromkeys(&#39;abracadabra&#39;))\r\n    [&#39;a&#39;, &#39;b&#39;, &#39;r&#39;, &#39;c&#39;, &#39;d&#39;]\r\n\r\n**In Python 3.7**, the regular dict is guaranteed to both ordered across all implementations.  **So, the shortest and fastest solution is:**\r\n\r\n    &gt;&gt;&gt; list(dict.fromkeys(&#39;abracadabra&#39;))\r\n    [&#39;a&#39;, &#39;b&#39;, &#39;r&#39;, &#39;c&#39;, &#39;d&#39;]","body":"<p><strong>In Python 2.7<\/strong>, the new way of removing duplicates from an iterable while keeping it in the original order is:<\/p>\n\n<pre><code>&gt;&gt;&gt; from collections import OrderedDict\n&gt;&gt;&gt; list(OrderedDict.fromkeys('abracadabra'))\n['a', 'b', 'r', 'c', 'd']\n<\/code><\/pre>\n\n<p><strong>In Python 3.5<\/strong>, the OrderedDict has a C implementation. My timings show that this is now both the fastest and shortest of the various approaches for Python 3.5.<\/p>\n\n<p><strong>In Python 3.6<\/strong>, the regular dict became both ordered and compact.  (This feature is holds for CPython and PyPy but may not present in other implementations).  That gives us a new fastest way of deduping while retaining order:<\/p>\n\n<pre><code>&gt;&gt;&gt; list(dict.fromkeys('abracadabra'))\n['a', 'b', 'r', 'c', 'd']\n<\/code><\/pre>\n\n<p><strong>In Python 3.7<\/strong>, the regular dict is guaranteed to both ordered across all implementations.  <strong>So, the shortest and fastest solution is:<\/strong><\/p>\n\n<pre><code>&gt;&gt;&gt; list(dict.fromkeys('abracadabra'))\n['a', 'b', 'r', 'c', 'd']\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":151,"reputation":35251,"user_id":188,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/833bfbcc9940cfcf0af6def751c23b05?s=256&d=identicon&r=PG","display_name":"Matthew Schinckel","link":"https:\/\/stackoverflow.com\/users\/188\/matthew-schinckel"},"is_accepted":false,"score":461,"last_activity_date":1574193227,"last_edit_date":1574193227.0,"creation_date":1221268258,"answer_id":60236,"question_id":60208,"content_license":"CC BY-SA 4.0","body_markdown":"In addition to the dictionary methods (which I really like, BTW), you can also use `if`-`elif`-`else` to obtain the `switch`\/`case`\/`default` functionality:\r\n\r\n    if x == &#39;a&#39;:\r\n        # Do the thing\r\n    elif x == &#39;b&#39;:\r\n        # Do the other thing\r\n    if x in &#39;bc&#39;:\r\n        # Fall-through by not using elif, but now the default case includes case &#39;a&#39;!\r\n    elif x in &#39;xyz&#39;:\r\n        # Do yet another thing\r\n    else:\r\n        # Do the default\r\n\r\nThis of course is not identical to switch\/case - you cannot have fall-through as easily as leaving off the `break` statement, but you can have a more complicated test. Its formatting is nicer than a series of nested `if`s, even though functionally that&#39;s what it is closer to.\r\n","body":"<p>In addition to the dictionary methods (which I really like, BTW), you can also use <code>if<\/code>-<code>elif<\/code>-<code>else<\/code> to obtain the <code>switch<\/code>\/<code>case<\/code>\/<code>default<\/code> functionality:<\/p>\n\n<pre><code>if x == 'a':\n    # Do the thing\nelif x == 'b':\n    # Do the other thing\nif x in 'bc':\n    # Fall-through by not using elif, but now the default case includes case 'a'!\nelif x in 'xyz':\n    # Do yet another thing\nelse:\n    # Do the default\n<\/code><\/pre>\n\n<p>This of course is not identical to switch\/case - you cannot have fall-through as easily as leaving off the <code>break<\/code> statement, but you can have a more complicated test. Its formatting is nicer than a series of nested <code>if<\/code>s, even though functionally that's what it is closer to.<\/p>\n","community_owned_date":1590449355.0},{"owner":{"account_id":2875,"reputation":479,"user_id":4072,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/36230d9669057c3bbf6e5bbf7a553f3d?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"Dave","link":"https:\/\/stackoverflow.com\/users\/4072\/dave"},"is_accepted":false,"score":459,"last_activity_date":1279096746,"last_edit_date":1279096746.0,"creation_date":1222113080,"answer_id":117116,"question_id":101268,"content_license":"CC BY-SA 2.5","body_markdown":"**enumerate**\r\n\r\nWrap an iterable with enumerate and it will yield the item along with its index.\r\n\r\nFor example:\r\n&lt;pre&gt;&lt;code&gt;\r\n&amp;gt;&amp;gt;&amp;gt; a = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]\r\n&amp;gt;&amp;gt;&amp;gt; for index, item in enumerate(a): print index, item\r\n...\r\n0 a\r\n1 b\r\n2 c\r\n3 d\r\n4 e\r\n&amp;gt;&amp;gt;&amp;gt;\r\n&lt;\/code&gt;&lt;\/pre&gt;\r\n\r\nReferences:\r\n\r\n* [Python tutorial\u2014looping techniques][1]\r\n* [Python docs\u2014built-in functions\u2014`enumerate`][3]\r\n* [PEP 279][2]\r\n\r\n\r\n  [1]: http:\/\/docs.python.org\/tutorial\/datastructures.html#looping-techniques\r\n  [2]: http:\/\/www.python.org\/dev\/peps\/pep-0279\/\r\n  [3]: http:\/\/docs.python.org\/library\/functions.html#enumerate","body":"<p><strong>enumerate<\/strong><\/p>\n\n<p>Wrap an iterable with enumerate and it will yield the item along with its index.<\/p>\n\n<p>For example:<\/p>\n\n<pre><code>\n&gt;&gt;&gt; a = ['a', 'b', 'c', 'd', 'e']\n&gt;&gt;&gt; for index, item in enumerate(a): print index, item\n...\n0 a\n1 b\n2 c\n3 d\n4 e\n&gt;&gt;&gt;\n<\/code><\/pre>\n\n<p>References:<\/p>\n\n<ul>\n<li><a href=\"http:\/\/docs.python.org\/tutorial\/datastructures.html#looping-techniques\" rel=\"nofollow noreferrer\">Python tutorial\u2014looping techniques<\/a><\/li>\n<li><a href=\"http:\/\/docs.python.org\/library\/functions.html#enumerate\" rel=\"nofollow noreferrer\">Python docs\u2014built-in functions\u2014<code>enumerate<\/code><\/a><\/li>\n<li><a href=\"http:\/\/www.python.org\/dev\/peps\/pep-0279\/\" rel=\"nofollow noreferrer\">PEP 279<\/a><\/li>\n<\/ul>\n","community_owned_date":1222113080.0},{"owner":{"account_id":44762,"reputation":331639,"user_id":131527,"user_type":"registered","accept_rate":83,"profile_image":"https:\/\/www.gravatar.com\/avatar\/c2618d986361c695497c1a875ea8da01?s=256&d=identicon&r=PG","display_name":"ghostdog74","link":"https:\/\/stackoverflow.com\/users\/131527\/ghostdog74"},"is_accepted":false,"score":459,"last_activity_date":1660540732,"last_edit_date":1660540732.0,"creation_date":1287126182,"answer_id":3940149,"question_id":3940128,"content_license":"CC BY-SA 4.0","body_markdown":"Use [`list.reverse`](https:\/\/docs.python.org\/3\/library\/stdtypes.html#mutable-sequence-types) to reverse a list *in-place*:\r\n\r\n    &gt;&gt;&gt; xs = [0, 10, 20, 40]\r\n    &gt;&gt;&gt; xs.reverse()\r\n    &gt;&gt;&gt; xs\r\n    [40, 20, 10, 0]\r\n\r\nUse slices to create a *new* list with the items in reverse order:\r\n\r\n    &gt;&gt;&gt; xs[::-1]\r\n    [40, 20, 10, 0]","body":"<p>Use <a href=\"https:\/\/docs.python.org\/3\/library\/stdtypes.html#mutable-sequence-types\" rel=\"noreferrer\"><code>list.reverse<\/code><\/a> to reverse a list <em>in-place<\/em>:<\/p>\n<pre><code>&gt;&gt;&gt; xs = [0, 10, 20, 40]\n&gt;&gt;&gt; xs.reverse()\n&gt;&gt;&gt; xs\n[40, 20, 10, 0]\n<\/code><\/pre>\n<p>Use slices to create a <em>new<\/em> list with the items in reverse order:<\/p>\n<pre><code>&gt;&gt;&gt; xs[::-1]\n[40, 20, 10, 0]\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":52614,"reputation":128653,"user_id":157237,"user_type":"registered","accept_rate":97,"profile_image":"https:\/\/www.gravatar.com\/avatar\/7c6b50948624b1ccfba1872bc82ecaed?s=256&d=identicon&r=PG","display_name":"Peter","link":"https:\/\/stackoverflow.com\/users\/157237\/peter"},"is_accepted":false,"score":441,"last_activity_date":1683041632,"last_edit_date":1683041632.0,"creation_date":1255233534,"answer_id":1549814,"question_id":1549801,"content_license":"CC BY-SA 4.0","body_markdown":"Here&#39;s an example where `isinstance` achieves something that `type` cannot:\r\n\r\n    class Vehicle:\r\n        pass\r\n    \r\n    class Truck(Vehicle):\r\n        pass\r\n\r\nIn this case, a `Truck` object is a `Vehicle`, but you&#39;ll get this:\r\n\r\n    isinstance(Vehicle(), Vehicle)  # returns True\r\n    type(Vehicle()) == Vehicle      # returns True\r\n    isinstance(Truck(), Vehicle)    # returns True\r\n    type(Truck()) == Vehicle        # returns False, and this probably won&#39;t be what you want.\r\n\r\nIn other words, `isinstance()` is true for subclasses, too.\r\n\r\nAlso see: &lt;https:\/\/stackoverflow.com\/q\/707674\/1341006&gt;","body":"<p>Here's an example where <code>isinstance<\/code> achieves something that <code>type<\/code> cannot:<\/p>\n<pre><code>class Vehicle:\n    pass\n\nclass Truck(Vehicle):\n    pass\n<\/code><\/pre>\n<p>In this case, a <code>Truck<\/code> object is a <code>Vehicle<\/code>, but you'll get this:<\/p>\n<pre><code>isinstance(Vehicle(), Vehicle)  # returns True\ntype(Vehicle()) == Vehicle      # returns True\nisinstance(Truck(), Vehicle)    # returns True\ntype(Truck()) == Vehicle        # returns False, and this probably won't be what you want.\n<\/code><\/pre>\n<p>In other words, <code>isinstance()<\/code> is true for subclasses, too.<\/p>\n<p>Also see: <a href=\"https:\/\/stackoverflow.com\/q\/707674\/1341006\">How to compare type of an object in Python?<\/a><\/p>\n","community_owned_date":null},{"owner":{"account_id":68682,"reputation":67282,"user_id":200266,"user_type":"registered","accept_rate":77,"profile_image":"https:\/\/www.gravatar.com\/avatar\/c540396b5a69083fdacb529dc34d48c1?s=256&d=identicon&r=PG","display_name":"Debilski","link":"https:\/\/stackoverflow.com\/users\/200266\/debilski"},"is_accepted":false,"score":441,"last_activity_date":1502779238,"last_edit_date":1502779238.0,"creation_date":1272413013,"answer_id":2725996,"question_id":2709821,"content_license":"CC BY-SA 3.0","body_markdown":"Let\u2019s take a simple vector class:\r\n\r\n    class Vector:\r\n        def __init__(self, x, y):\r\n            self.x = x\r\n            self.y = y\r\n\r\nWe want to have a method which calculates the length. What would it look like if we wanted to define it inside the class?\r\n\r\n        def length(self):\r\n            return math.sqrt(self.x ** 2 + self.y ** 2)\r\n\r\nWhat should it look like when we were to define it as a global method\/function?\r\n\r\n    def length_global(vector):\r\n        return math.sqrt(vector.x ** 2 + vector.y ** 2)\r\n\r\nSo the whole structure stays the same. How can me make use of this? If we assume for a moment that we hadn\u2019t written a `length` method for our `Vector` class, we could do this:\r\n\r\n    Vector.length_new = length_global\r\n    v = Vector(3, 4)\r\n    print(v.length_new()) # 5.0\r\n\r\nThis works because the first parameter of `length_global`, can be re-used as the `self` parameter in `length_new`. This would not be possible without an explicit `self`.\r\n\r\n---\r\n\r\nAnother way of understanding the need for the explicit `self` is to see where Python adds some syntactical sugar. When you keep in mind, that basically, a call like\r\n\r\n    v_instance.length()\r\n\r\nis internally transformed to\r\n\r\n    Vector.length(v_instance)\r\n\r\nit is easy to see where the `self` fits in. You don&#39;t actually write instance methods in Python; what you write is class methods which must take an instance as a first parameter. And therefore, you\u2019ll have to place the instance parameter somewhere explicitly.\r\n\r\n","body":"<p>Let\u2019s take a simple vector class:<\/p>\n\n<pre><code>class Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n<\/code><\/pre>\n\n<p>We want to have a method which calculates the length. What would it look like if we wanted to define it inside the class?<\/p>\n\n<pre><code>    def length(self):\n        return math.sqrt(self.x ** 2 + self.y ** 2)\n<\/code><\/pre>\n\n<p>What should it look like when we were to define it as a global method\/function?<\/p>\n\n<pre><code>def length_global(vector):\n    return math.sqrt(vector.x ** 2 + vector.y ** 2)\n<\/code><\/pre>\n\n<p>So the whole structure stays the same. How can me make use of this? If we assume for a moment that we hadn\u2019t written a <code>length<\/code> method for our <code>Vector<\/code> class, we could do this:<\/p>\n\n<pre><code>Vector.length_new = length_global\nv = Vector(3, 4)\nprint(v.length_new()) # 5.0\n<\/code><\/pre>\n\n<p>This works because the first parameter of <code>length_global<\/code>, can be re-used as the <code>self<\/code> parameter in <code>length_new<\/code>. This would not be possible without an explicit <code>self<\/code>.<\/p>\n\n<hr>\n\n<p>Another way of understanding the need for the explicit <code>self<\/code> is to see where Python adds some syntactical sugar. When you keep in mind, that basically, a call like<\/p>\n\n<pre><code>v_instance.length()\n<\/code><\/pre>\n\n<p>is internally transformed to<\/p>\n\n<pre><code>Vector.length(v_instance)\n<\/code><\/pre>\n\n<p>it is easy to see where the <code>self<\/code> fits in. You don't actually write instance methods in Python; what you write is class methods which must take an instance as a first parameter. And therefore, you\u2019ll have to place the instance parameter somewhere explicitly.<\/p>\n","community_owned_date":null},{"owner":{"account_id":6396905,"reputation":10762,"user_id":4960953,"user_type":"registered","accept_rate":94,"profile_image":"https:\/\/www.gravatar.com\/avatar\/3db40772cbbd7ea18b3b3bee7ab9b981?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"Mikhail_Sam","link":"https:\/\/stackoverflow.com\/users\/4960953\/mikhail-sam"},"is_accepted":false,"score":438,"last_activity_date":1626256319,"last_edit_date":1626256319.0,"creation_date":1514296957,"answer_id":47979665,"question_id":10715965,"content_license":"CC BY-SA 4.0","body_markdown":"In the case of adding a lot of rows to dataframe, I am interested **in performance**. So I tried the four most popular methods and checked their speed.\r\n\r\n**Performance**\r\n---------------------\r\n\r\n1. Using .append ([NPE&#39;s answer][2])\r\n2. Using .loc ([fred&#39;s answer][3])\r\n3. Using .loc with preallocating ([FooBar&#39;s answer][4])\r\n4. Using dict and create DataFrame in the end ([ShikharDua&#39;s answer][5])\r\n\r\n**Runtime results (in seconds):**\r\n\r\n|  Approach             | 1000 rows | 5000 rows | 10 000 rows |\r\n|-----------------------|-----------|-----------|-------------|\r\n| .append               |   0.69    |   3.39    |    6.78     |\r\n| .loc without prealloc |   0.74    |   3.90    |    8.35     |\r\n| .loc with prealloc    |   0.24    |   2.58    |    8.70     |\r\n|  dict                 |   0.012   |  0.046    |   0.084     |\r\n\r\nSo I use addition through the dictionary for myself.\r\n\r\n----------\r\n**Code:**\r\n\r\n    import pandas as pd\r\n    import numpy as np\r\n    import time\r\n\r\n    del df1, df2, df3, df4\r\n    numOfRows = 1000\r\n    # append\r\n    startTime = time.perf_counter()\r\n    df1 = pd.DataFrame(np.random.randint(100, size=(5,5)), columns=[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;])\r\n    for i in range( 1,numOfRows-4):\r\n        df1 = df1.append( dict( (a,np.random.randint(100)) for a in [&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;,&#39;E&#39;]), ignore_index=True)\r\n    print(&#39;Elapsed time: {:6.3f} seconds for {:d} rows&#39;.format(time.perf_counter() - startTime, numOfRows))\r\n    print(df1.shape)\r\n\r\n    # .loc w\/o prealloc\r\n    startTime = time.perf_counter()\r\n    df2 = pd.DataFrame(np.random.randint(100, size=(5,5)), columns=[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;])\r\n    for i in range( 1,numOfRows):\r\n        df2.loc[i]  = np.random.randint(100, size=(1,5))[0]\r\n    print(&#39;Elapsed time: {:6.3f} seconds for {:d} rows&#39;.format(time.perf_counter() - startTime, numOfRows))\r\n    print(df2.shape)\r\n\r\n    # .loc with prealloc\r\n    df3 = pd.DataFrame(index=np.arange(0, numOfRows), columns=[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;, &#39;D&#39;, &#39;E&#39;] )\r\n    startTime = time.perf_counter()\r\n    for i in range( 1,numOfRows):\r\n        df3.loc[i]  = np.random.randint(100, size=(1,5))[0]\r\n    print(&#39;Elapsed time: {:6.3f} seconds for {:d} rows&#39;.format(time.perf_counter() - startTime, numOfRows))\r\n    print(df3.shape)\r\n\r\n    # dict\r\n    startTime = time.perf_counter()\r\n    row_list = []\r\n    for i in range (0,5):\r\n        row_list.append(dict( (a,np.random.randint(100)) for a in [&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;,&#39;E&#39;]))\r\n    for i in range( 1,numOfRows-4):\r\n        dict1 = dict( (a,np.random.randint(100)) for a in [&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;,&#39;E&#39;])\r\n        row_list.append(dict1)\r\n\r\n    df4 = pd.DataFrame(row_list, columns=[&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;,&#39;E&#39;])\r\n    print(&#39;Elapsed time: {:6.3f} seconds for {:d} rows&#39;.format(time.perf_counter() - startTime, numOfRows))\r\n    print(df4.shape)\r\n\r\nP.S.: I believe my realization isn&#39;t perfect, and maybe there is some optimization that could be done.\r\n\r\n  [1]: https:\/\/stackoverflow.com\/questions\/10715965\/add-one-row-to-pandas-dataframe\/47979665#comment101018271_47979665\r\n  [2]: https:\/\/stackoverflow.com\/a\/10716007\/4960953\r\n  [3]: https:\/\/stackoverflow.com\/a\/24888331\/4960953\r\n  [4]: https:\/\/stackoverflow.com\/a\/24913075\/4960953\r\n  [5]: https:\/\/stackoverflow.com\/a\/17496530\/4960953\r\n  [6]: https:\/\/stackoverflow.com\/questions\/10715965\/add-one-row-to-pandas-dataframe\/47979665#comment95488060_47979665\r\n\r\n\r\n\r\n","body":"<p>In the case of adding a lot of rows to dataframe, I am interested <strong>in performance<\/strong>. So I tried the four most popular methods and checked their speed.<\/p>\n<h2 id=\"performance\"><strong>Performance<\/strong><\/h2>\n<ol>\n<li>Using .append (<a href=\"https:\/\/stackoverflow.com\/a\/10716007\/4960953\">NPE's answer<\/a>)<\/li>\n<li>Using .loc (<a href=\"https:\/\/stackoverflow.com\/a\/24888331\/4960953\">fred's answer<\/a>)<\/li>\n<li>Using .loc with preallocating (<a href=\"https:\/\/stackoverflow.com\/a\/24913075\/4960953\">FooBar's answer<\/a>)<\/li>\n<li>Using dict and create DataFrame in the end (<a href=\"https:\/\/stackoverflow.com\/a\/17496530\/4960953\">ShikharDua's answer<\/a>)<\/li>\n<\/ol>\n<p><strong>Runtime results (in seconds):<\/strong><\/p>\n<div class=\"s-table-container\">\n<table class=\"s-table\">\n<thead>\n<tr>\n<th>Approach<\/th>\n<th>1000 rows<\/th>\n<th>5000 rows<\/th>\n<th>10 000 rows<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr>\n<td>.append<\/td>\n<td>0.69<\/td>\n<td>3.39<\/td>\n<td>6.78<\/td>\n<\/tr>\n<tr>\n<td>.loc without prealloc<\/td>\n<td>0.74<\/td>\n<td>3.90<\/td>\n<td>8.35<\/td>\n<\/tr>\n<tr>\n<td>.loc with prealloc<\/td>\n<td>0.24<\/td>\n<td>2.58<\/td>\n<td>8.70<\/td>\n<\/tr>\n<tr>\n<td>dict<\/td>\n<td>0.012<\/td>\n<td>0.046<\/td>\n<td>0.084<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<\/div>\n<p>So I use addition through the dictionary for myself.<\/p>\n<hr \/>\n<p><strong>Code:<\/strong><\/p>\n<pre><code>import pandas as pd\nimport numpy as np\nimport time\n\ndel df1, df2, df3, df4\nnumOfRows = 1000\n# append\nstartTime = time.perf_counter()\ndf1 = pd.DataFrame(np.random.randint(100, size=(5,5)), columns=['A', 'B', 'C', 'D', 'E'])\nfor i in range( 1,numOfRows-4):\n    df1 = df1.append( dict( (a,np.random.randint(100)) for a in ['A','B','C','D','E']), ignore_index=True)\nprint('Elapsed time: {:6.3f} seconds for {:d} rows'.format(time.perf_counter() - startTime, numOfRows))\nprint(df1.shape)\n\n# .loc w\/o prealloc\nstartTime = time.perf_counter()\ndf2 = pd.DataFrame(np.random.randint(100, size=(5,5)), columns=['A', 'B', 'C', 'D', 'E'])\nfor i in range( 1,numOfRows):\n    df2.loc[i]  = np.random.randint(100, size=(1,5))[0]\nprint('Elapsed time: {:6.3f} seconds for {:d} rows'.format(time.perf_counter() - startTime, numOfRows))\nprint(df2.shape)\n\n# .loc with prealloc\ndf3 = pd.DataFrame(index=np.arange(0, numOfRows), columns=['A', 'B', 'C', 'D', 'E'] )\nstartTime = time.perf_counter()\nfor i in range( 1,numOfRows):\n    df3.loc[i]  = np.random.randint(100, size=(1,5))[0]\nprint('Elapsed time: {:6.3f} seconds for {:d} rows'.format(time.perf_counter() - startTime, numOfRows))\nprint(df3.shape)\n\n# dict\nstartTime = time.perf_counter()\nrow_list = []\nfor i in range (0,5):\n    row_list.append(dict( (a,np.random.randint(100)) for a in ['A','B','C','D','E']))\nfor i in range( 1,numOfRows-4):\n    dict1 = dict( (a,np.random.randint(100)) for a in ['A','B','C','D','E'])\n    row_list.append(dict1)\n\ndf4 = pd.DataFrame(row_list, columns=['A','B','C','D','E'])\nprint('Elapsed time: {:6.3f} seconds for {:d} rows'.format(time.perf_counter() - startTime, numOfRows))\nprint(df4.shape)\n<\/code><\/pre>\n<p>P.S.: I believe my realization isn't perfect, and maybe there is some optimization that could be done.<\/p>\n","community_owned_date":null},{"owner":{"account_id":125447,"reputation":4779,"user_id":321237,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/d8c6c2b66b29db4fb666b1fc58e5c71a?s=256&d=identicon&r=PG","display_name":"inv","link":"https:\/\/stackoverflow.com\/users\/321237\/inv"},"is_accepted":false,"score":437,"last_activity_date":1649183288,"last_edit_date":1649183288.0,"creation_date":1271907579,"answer_id":2688086,"question_id":2682745,"content_license":"CC BY-SA 4.0","body_markdown":"There&#39;s no `const` keyword as in other languages, however it is possible to create a Property that **has a &quot;getter function&quot;** to read the data, but **no &quot;setter function&quot;** to re-write the data. **This essentially protects the identifier from being changed.**\r\n\r\nHere is an alternative implementation using class property:\r\n\r\n*Note that the code is far from easy for a reader wondering about constants. See explanation below.*\r\n\r\n```\r\ndef constant(f):\r\n    def fset(self, value):\r\n        raise TypeError\r\n    def fget(self):\r\n        return f()\r\n    return property(fget, fset)\r\n\r\nclass _Const(object):\r\n    @constant\r\n    def FOO():\r\n        return 0xBAADFACE\r\n    @constant\r\n    def BAR():\r\n        return 0xDEADBEEF\r\n\r\nCONST = _Const()\r\n\r\nprint(hex(CONST.FOO))  # -&gt; &#39;0xbaadfaceL&#39;\r\n\r\nCONST.FOO = 0\r\n##Traceback (most recent call last):\r\n##  File &quot;example1.py&quot;, line 22, in &lt;module&gt;\r\n##    CONST.FOO = 0\r\n##  File &quot;example1.py&quot;, line 5, in fset\r\n##    raise TypeError\r\n##TypeError\r\n```\r\n\r\n**Code Explanation:**\r\n\r\n 1. Define a function `constant` that takes an expression, and uses it to construct a &quot;getter&quot; - a function that solely returns the value of the expression.\r\n 2. The setter function raises a TypeError so it&#39;s read-only\r\n 3. Use the `constant` function we just created as a decoration to quickly define read-only properties.\r\n\r\n----------\r\nAnd in some other more old-fashioned way:\r\n\r\n*(The code is quite tricky, more explanations below)*\r\n\r\n```\r\nclass _Const(object):\r\n    def FOO():\r\n        def fset(self, value):\r\n            raise TypeError\r\n        def fget(self):\r\n            return 0xBAADFACE\r\n        return property(**locals())\r\n    FOO = FOO()  # Define property.\r\n\r\nCONST = _Const()\r\n\r\nprint(hex(CONST.FOO))  # -&gt; &#39;0xbaadfaceL&#39;\r\n\r\nCONST.FOO = 0\r\n##Traceback (most recent call last):\r\n##  File &quot;example2.py&quot;, line 16, in &lt;module&gt;\r\n##    CONST.FOO = 0\r\n##  File &quot;example2.py&quot;, line 6, in fset\r\n##    raise TypeError\r\n##TypeError\r\n```\r\n\r\n 1. To define the identifier FOO, firs define two functions (fset, fget - the names are at my choice).\r\n 2. Then use the built-in `property` function to construct an object that can be &quot;set&quot; or &quot;get&quot;.\r\n 3. Note hat the `property` function&#39;s first two parameters are named `fset` and `fget`.\r\n 4. Use the fact that we chose these very names for our own getter &amp; setter and create a keyword-dictionary using the ** (double asterisk) applied to all the local definitions of that scope to pass parameters to the `property` function\r\n","body":"<p>There's no <code>const<\/code> keyword as in other languages, however it is possible to create a Property that <strong>has a &quot;getter function&quot;<\/strong> to read the data, but <strong>no &quot;setter function&quot;<\/strong> to re-write the data. <strong>This essentially protects the identifier from being changed.<\/strong><\/p>\n<p>Here is an alternative implementation using class property:<\/p>\n<p><em>Note that the code is far from easy for a reader wondering about constants. See explanation below.<\/em><\/p>\n<pre><code>def constant(f):\n    def fset(self, value):\n        raise TypeError\n    def fget(self):\n        return f()\n    return property(fget, fset)\n\nclass _Const(object):\n    @constant\n    def FOO():\n        return 0xBAADFACE\n    @constant\n    def BAR():\n        return 0xDEADBEEF\n\nCONST = _Const()\n\nprint(hex(CONST.FOO))  # -&gt; '0xbaadfaceL'\n\nCONST.FOO = 0\n##Traceback (most recent call last):\n##  File &quot;example1.py&quot;, line 22, in &lt;module&gt;\n##    CONST.FOO = 0\n##  File &quot;example1.py&quot;, line 5, in fset\n##    raise TypeError\n##TypeError\n<\/code><\/pre>\n<p><strong>Code Explanation:<\/strong><\/p>\n<ol>\n<li>Define a function <code>constant<\/code> that takes an expression, and uses it to construct a &quot;getter&quot; - a function that solely returns the value of the expression.<\/li>\n<li>The setter function raises a TypeError so it's read-only<\/li>\n<li>Use the <code>constant<\/code> function we just created as a decoration to quickly define read-only properties.<\/li>\n<\/ol>\n<hr \/>\n<p>And in some other more old-fashioned way:<\/p>\n<p><em>(The code is quite tricky, more explanations below)<\/em><\/p>\n<pre><code>class _Const(object):\n    def FOO():\n        def fset(self, value):\n            raise TypeError\n        def fget(self):\n            return 0xBAADFACE\n        return property(**locals())\n    FOO = FOO()  # Define property.\n\nCONST = _Const()\n\nprint(hex(CONST.FOO))  # -&gt; '0xbaadfaceL'\n\nCONST.FOO = 0\n##Traceback (most recent call last):\n##  File &quot;example2.py&quot;, line 16, in &lt;module&gt;\n##    CONST.FOO = 0\n##  File &quot;example2.py&quot;, line 6, in fset\n##    raise TypeError\n##TypeError\n<\/code><\/pre>\n<ol>\n<li>To define the identifier FOO, firs define two functions (fset, fget - the names are at my choice).<\/li>\n<li>Then use the built-in <code>property<\/code> function to construct an object that can be &quot;set&quot; or &quot;get&quot;.<\/li>\n<li>Note hat the <code>property<\/code> function's first two parameters are named <code>fset<\/code> and <code>fget<\/code>.<\/li>\n<li>Use the fact that we chose these very names for our own getter &amp; setter and create a keyword-dictionary using the ** (double asterisk) applied to all the local definitions of that scope to pass parameters to the <code>property<\/code> function<\/li>\n<\/ol>\n","community_owned_date":null},{"owner":{"account_id":4350,"reputation":84112,"user_id":6491,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/fd7da9bf7b009ceb7a7037906361c9eb?s=256&d=identicon&r=PG","display_name":"gimel","link":"https:\/\/stackoverflow.com\/users\/6491\/gimel"},"is_accepted":false,"score":434,"last_activity_date":1617965281,"last_edit_date":1617965281.0,"creation_date":1224785209,"answer_id":230780,"question_id":230751,"content_license":"CC BY-SA 4.0","body_markdown":"Running `python -h`, I see a *command line option*:\r\n\r\n&gt; \r\n&gt; -u     : unbuffered binary stdout and stderr; also PYTHONUNBUFFERED=x\r\n         see man page for details on internal buffering relating to &#39;-u&#39;\r\n\r\nHere is the [relevant documentation][1].\r\n\r\n  [1]: http:\/\/docs.python.org\/using\/cmdline.html#cmdoption-u\r\n\r\n","body":"<p>Running <code>python -h<\/code>, I see a <em>command line option<\/em>:<\/p>\n<blockquote>\n<p>-u     : unbuffered binary stdout and stderr; also PYTHONUNBUFFERED=x\nsee man page for details on internal buffering relating to '-u'<\/p>\n<\/blockquote>\n<p>Here is the <a href=\"http:\/\/docs.python.org\/using\/cmdline.html#cmdoption-u\" rel=\"noreferrer\">relevant documentation<\/a>.<\/p>\n","community_owned_date":null},{"owner":{"account_id":2680,"reputation":48630,"user_id":3757,"user_type":"registered","accept_rate":86,"profile_image":"https:\/\/www.gravatar.com\/avatar\/886cefc5134a9df362fe871b0ab71d38?s=256&d=identicon&r=PG","display_name":"Christian Oudard","link":"https:\/\/stackoverflow.com\/users\/3757\/christian-oudard"},"is_accepted":false,"score":434,"last_activity_date":1643315644,"last_edit_date":1643315644.0,"creation_date":1254840686,"answer_id":1526089,"question_id":237079,"content_license":"CC BY-SA 4.0","body_markdown":"The best function to use for this is [os.path.getmtime()][1]. Internally, this just uses `os.stat(filename).st_mtime`.\r\n\r\nThe datetime module is the best for manipulating timestamps, so you can get the modification date as a `datetime` object like this:\r\n\r\n    import os\r\n    import datetime\r\n    def modification_date(filename):\r\n        t = os.path.getmtime(filename)\r\n        return datetime.datetime.fromtimestamp(t)\r\n\r\nUsage example:\r\n\r\n    &gt;&gt;&gt; d = modification_date(&#39;\/var\/log\/syslog&#39;)\r\n    &gt;&gt;&gt; print d\r\n    2009-10-06 10:50:01\r\n    &gt;&gt;&gt; print repr(d)\r\n    datetime.datetime(2009, 10, 6, 10, 50, 1)\r\n\r\n  [1]: http:\/\/docs.python.org\/library\/os.path.html#os.path.getmtime\r\n\r\n\r\n","body":"<p>The best function to use for this is <a href=\"http:\/\/docs.python.org\/library\/os.path.html#os.path.getmtime\" rel=\"noreferrer\">os.path.getmtime()<\/a>. Internally, this just uses <code>os.stat(filename).st_mtime<\/code>.<\/p>\n<p>The datetime module is the best for manipulating timestamps, so you can get the modification date as a <code>datetime<\/code> object like this:<\/p>\n<pre><code>import os\nimport datetime\ndef modification_date(filename):\n    t = os.path.getmtime(filename)\n    return datetime.datetime.fromtimestamp(t)\n<\/code><\/pre>\n<p>Usage example:<\/p>\n<pre><code>&gt;&gt;&gt; d = modification_date('\/var\/log\/syslog')\n&gt;&gt;&gt; print d\n2009-10-06 10:50:01\n&gt;&gt;&gt; print repr(d)\ndatetime.datetime(2009, 10, 6, 10, 50, 1)\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":12462,"reputation":162528,"user_id":24545,"user_type":"registered","accept_rate":99,"profile_image":"https:\/\/i.stack.imgur.com\/TIPwN.jpg?s=256&g=1","display_name":"Yuval Adam","link":"https:\/\/stackoverflow.com\/users\/24545\/yuval-adam"},"is_accepted":true,"score":429,"last_activity_date":1683525568,"last_edit_date":1683525568.0,"creation_date":1241951862,"answer_id":845081,"question_id":845058,"content_license":"CC BY-SA 4.0","body_markdown":"You can&#39;t get any better than that.\r\n\r\nAfter all, any solution will have to read the entire file, figure out how many `\\n` you have, and return that result.\r\n\r\nDo you have a better way of doing that without reading the entire file? Not sure... The best solution will always be I\/O-bound, best you can do is make sure you don&#39;t use unnecessary memory, but it looks like you have that covered.\r\n\r\n**[Edit May 2023]**\r\n\r\nAs commented in many other answers, in Python 3 there are better alternatives. The `for` loop is not the most efficient. For example, using `mmap` or buffers is more efficient.","body":"<p>You can't get any better than that.<\/p>\n<p>After all, any solution will have to read the entire file, figure out how many <code>\\n<\/code> you have, and return that result.<\/p>\n<p>Do you have a better way of doing that without reading the entire file? Not sure... The best solution will always be I\/O-bound, best you can do is make sure you don't use unnecessary memory, but it looks like you have that covered.<\/p>\n<p><strong>[Edit May 2023]<\/strong><\/p>\n<p>As commented in many other answers, in Python 3 there are better alternatives. The <code>for<\/code> loop is not the most efficient. For example, using <code>mmap<\/code> or buffers is more efficient.<\/p>\n","community_owned_date":null},{"owner":{"account_id":3079627,"reputation":4615,"user_id":2608155,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/M1ioA.jpg?s=256&g=1","display_name":"jcolino","link":"https:\/\/stackoverflow.com\/users\/2608155\/jcolino"},"is_accepted":false,"score":423,"last_activity_date":1596637649,"last_edit_date":1596637649.0,"creation_date":1374522640,"answer_id":17796193,"question_id":1093322,"content_license":"CC BY-SA 4.0","body_markdown":"From the command line (note the capital &#39;V&#39;):\r\n \r\n    python -V\r\n\r\nThis is documented in &#39;man python&#39;.\r\n\r\nFrom IPython console\r\n\r\n    !python -V","body":"<p>From the command line (note the capital 'V'):<\/p>\n<pre><code>python -V\n<\/code><\/pre>\n<p>This is documented in 'man python'.<\/p>\n<p>From IPython console<\/p>\n<pre><code>!python -V\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":5218,"reputation":16589,"user_id":8297,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/f18d0b80e1c47c64fd300c1895279099?s=256&d=identicon&r=PG","display_name":"freespace","link":"https:\/\/stackoverflow.com\/users\/8297\/freespace"},"is_accepted":false,"score":418,"last_activity_date":1258987013,"last_edit_date":1258987013.0,"creation_date":1221825568,"answer_id":101310,"question_id":101268,"content_license":"CC BY-SA 2.5","body_markdown":"**Creating generators objects**\r\n\r\nIf you write \r\n\r\n    x=(n for n in foo if bar(n))\r\n\r\nyou can get out the generator and assign it to x. Now it means you can do\r\n\r\n    for n in x:\r\n\r\nThe advantage of this is that you don&#39;t need intermediate storage, which you would need if you did\r\n\r\n    x = [n for n in foo if bar(n)]\r\n\r\nIn some cases this can lead to significant speed up.\r\n\r\nYou can append many if statements to the end of the generator, basically replicating nested for loops:\r\n  \r\n    &gt;&gt;&gt; n = ((a,b) for a in range(0,2) for b in range(4,6))\r\n    &gt;&gt;&gt; for i in n:\r\n    ...   print i \r\n \r\n    (0, 4)\r\n    (0, 5)\r\n    (1, 4)\r\n    (1, 5)\r\n","body":"<p><strong>Creating generators objects<\/strong><\/p>\n\n<p>If you write <\/p>\n\n<pre><code>x=(n for n in foo if bar(n))\n<\/code><\/pre>\n\n<p>you can get out the generator and assign it to x. Now it means you can do<\/p>\n\n<pre><code>for n in x:\n<\/code><\/pre>\n\n<p>The advantage of this is that you don't need intermediate storage, which you would need if you did<\/p>\n\n<pre><code>x = [n for n in foo if bar(n)]\n<\/code><\/pre>\n\n<p>In some cases this can lead to significant speed up.<\/p>\n\n<p>You can append many if statements to the end of the generator, basically replicating nested for loops:<\/p>\n\n<pre><code>&gt;&gt;&gt; n = ((a,b) for a in range(0,2) for b in range(4,6))\n&gt;&gt;&gt; for i in n:\n...   print i \n\n(0, 4)\n(0, 5)\n(1, 4)\n(1, 5)\n<\/code><\/pre>\n","community_owned_date":1222009237.0},{"owner":{"account_id":56749,"reputation":15738,"user_id":170005,"user_type":"registered","accept_rate":83,"profile_image":"https:\/\/www.gravatar.com\/avatar\/96ea4b5f341dc4204dac46b3f4de862b?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"fixxxer","link":"https:\/\/stackoverflow.com\/users\/170005\/fixxxer"},"is_accepted":false,"score":411,"last_activity_date":1522224823,"last_edit_date":1522224823.0,"creation_date":1430230789,"answer_id":29922207,"question_id":13148429,"content_license":"CC BY-SA 3.0","body_markdown":"Just assign the column names in the order you want them:\r\n\r\n    In [39]: df\r\n    Out[39]: \r\n              0         1         2         3         4  mean\r\n    0  0.172742  0.915661  0.043387  0.712833  0.190717     1\r\n    1  0.128186  0.424771  0.590779  0.771080  0.617472     1\r\n    2  0.125709  0.085894  0.989798  0.829491  0.155563     1\r\n    3  0.742578  0.104061  0.299708  0.616751  0.951802     1\r\n    4  0.721118  0.528156  0.421360  0.105886  0.322311     1\r\n    5  0.900878  0.082047  0.224656  0.195162  0.736652     1\r\n    6  0.897832  0.558108  0.318016  0.586563  0.507564     1\r\n    7  0.027178  0.375183  0.930248  0.921786  0.337060     1\r\n    8  0.763028  0.182905  0.931756  0.110675  0.423398     1\r\n    9  0.848996  0.310562  0.140873  0.304561  0.417808     1\r\n    \r\n    In [40]: df = df[[&#39;mean&#39;, 4,3,2,1]]\r\n    \r\nNow, &#39;mean&#39; column comes out in the front:\r\n\r\n    In [41]: df\r\n    Out[41]: \r\n       mean         4         3         2         1\r\n    0     1  0.190717  0.712833  0.043387  0.915661\r\n    1     1  0.617472  0.771080  0.590779  0.424771\r\n    2     1  0.155563  0.829491  0.989798  0.085894\r\n    3     1  0.951802  0.616751  0.299708  0.104061\r\n    4     1  0.322311  0.105886  0.421360  0.528156\r\n    5     1  0.736652  0.195162  0.224656  0.082047\r\n    6     1  0.507564  0.586563  0.318016  0.558108\r\n    7     1  0.337060  0.921786  0.930248  0.375183\r\n    8     1  0.423398  0.110675  0.931756  0.182905\r\n    9     1  0.417808  0.304561  0.140873  0.310562\r\n\r\n","body":"<p>Just assign the column names in the order you want them:<\/p>\n\n<pre><code>In [39]: df\nOut[39]: \n          0         1         2         3         4  mean\n0  0.172742  0.915661  0.043387  0.712833  0.190717     1\n1  0.128186  0.424771  0.590779  0.771080  0.617472     1\n2  0.125709  0.085894  0.989798  0.829491  0.155563     1\n3  0.742578  0.104061  0.299708  0.616751  0.951802     1\n4  0.721118  0.528156  0.421360  0.105886  0.322311     1\n5  0.900878  0.082047  0.224656  0.195162  0.736652     1\n6  0.897832  0.558108  0.318016  0.586563  0.507564     1\n7  0.027178  0.375183  0.930248  0.921786  0.337060     1\n8  0.763028  0.182905  0.931756  0.110675  0.423398     1\n9  0.848996  0.310562  0.140873  0.304561  0.417808     1\n\nIn [40]: df = df[['mean', 4,3,2,1]]\n<\/code><\/pre>\n\n<p>Now, 'mean' column comes out in the front:<\/p>\n\n<pre><code>In [41]: df\nOut[41]: \n   mean         4         3         2         1\n0     1  0.190717  0.712833  0.043387  0.915661\n1     1  0.617472  0.771080  0.590779  0.424771\n2     1  0.155563  0.829491  0.989798  0.085894\n3     1  0.951802  0.616751  0.299708  0.104061\n4     1  0.322311  0.105886  0.421360  0.528156\n5     1  0.736652  0.195162  0.224656  0.082047\n6     1  0.507564  0.586563  0.318016  0.558108\n7     1  0.337060  0.921786  0.930248  0.375183\n8     1  0.423398  0.110675  0.931756  0.182905\n9     1  0.417808  0.304561  0.140873  0.310562\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":8203,"reputation":42076,"user_id":14648,"user_type":"registered","accept_rate":91,"profile_image":"https:\/\/www.gravatar.com\/avatar\/84965d0d894b45875d8045bc5762ba57?s=256&d=identicon&r=PG","display_name":"Jerub","link":"https:\/\/stackoverflow.com\/users\/14648\/jerub"},"is_accepted":false,"score":410,"last_activity_date":1509130452,"last_edit_date":1509130452.0,"creation_date":1288016456,"answer_id":4015466,"question_id":4015417,"content_license":"CC BY-SA 3.0","body_markdown":"Yes, this is a &#39;new style&#39; object. It was a feature introduced in python2.2.\r\n\r\nNew style objects have a different object model to classic objects, and some things won&#39;t work properly with old style objects, for instance, `super()`, `@property` and descriptors. See [this article][1] for a good description of what a new style class is.\r\n\r\nSO link for a description of the differences: https:\/\/stackoverflow.com\/questions\/54867\/old-style-and-new-style-classes-in-python\r\n\r\n\r\n  [1]: http:\/\/docs.python.org\/release\/2.2.3\/whatsnew\/sect-rellinks.html","body":"<p>Yes, this is a 'new style' object. It was a feature introduced in python2.2.<\/p>\n\n<p>New style objects have a different object model to classic objects, and some things won't work properly with old style objects, for instance, <code>super()<\/code>, <code>@property<\/code> and descriptors. See <a href=\"http:\/\/docs.python.org\/release\/2.2.3\/whatsnew\/sect-rellinks.html\" rel=\"noreferrer\">this article<\/a> for a good description of what a new style class is.<\/p>\n\n<p>SO link for a description of the differences: <a href=\"https:\/\/stackoverflow.com\/questions\/54867\/old-style-and-new-style-classes-in-python\">What is the difference between old style and new style classes in Python?<\/a><\/p>\n","community_owned_date":null},{"owner":{"account_id":1597393,"reputation":5488,"user_id":1479143,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/ea63065bb27b8803844e460a30e5dfb7?s=256&d=identicon&r=PG","display_name":"thegauraw","link":"https:\/\/stackoverflow.com\/users\/1479143\/thegauraw"},"is_accepted":false,"score":389,"last_activity_date":1570793895,"last_edit_date":1570793895.0,"creation_date":1358682681,"answer_id":14424226,"question_id":11618898,"content_license":"CC BY-SA 4.0","body_markdown":"Have you installed `python-dev`?\r\nIf you already have, try also installing `libpq-dev`\r\n\r\n    sudo apt-get install libpq-dev python-dev\r\n\r\nFrom the article: [How to install psycopg2 under virtualenv][1]\r\n\r\n\r\n  [1]: http:\/\/web.archive.org\/web\/20140615091953\/http:\/\/goshawknest.wordpress.com\/2011\/02\/16\/how-to-install-psycopg2-under-virtualenv\/","body":"<p>Have you installed <code>python-dev<\/code>?\nIf you already have, try also installing <code>libpq-dev<\/code><\/p>\n\n<pre><code>sudo apt-get install libpq-dev python-dev\n<\/code><\/pre>\n\n<p>From the article: <a href=\"http:\/\/web.archive.org\/web\/20140615091953\/http:\/\/goshawknest.wordpress.com\/2011\/02\/16\/how-to-install-psycopg2-under-virtualenv\/\" rel=\"noreferrer\">How to install psycopg2 under virtualenv<\/a><\/p>\n","community_owned_date":null},{"owner":{"account_id":210792,"reputation":34126,"user_id":462604,"user_type":"registered","accept_rate":68,"profile_image":"https:\/\/www.gravatar.com\/avatar\/7176c041527db5489a2181a0f87f57d9?s=256&d=identicon&r=PG","display_name":"Jakob Bowyer","link":"https:\/\/stackoverflow.com\/users\/462604\/jakob-bowyer"},"is_accepted":false,"score":388,"last_activity_date":1516203818,"last_edit_date":1516203818.0,"creation_date":1323085514,"answer_id":8384786,"question_id":8384737,"content_license":"CC BY-SA 3.0","body_markdown":"[os.path.split][1]\r\nis the function you are looking for\r\n\r\n    head, tail = os.path.split(&quot;\/tmp\/d\/a.dat&quot;)\r\n\r\n    &gt;&gt;&gt; print(tail)\r\n    a.dat\r\n    &gt;&gt;&gt; print(head)\r\n    \/tmp\/d\r\n\r\n\r\n  [1]: http:\/\/docs.python.org\/library\/os.path.html#os.path.split","body":"<p><a href=\"http:\/\/docs.python.org\/library\/os.path.html#os.path.split\" rel=\"noreferrer\">os.path.split<\/a>\nis the function you are looking for<\/p>\n\n<pre><code>head, tail = os.path.split(\"\/tmp\/d\/a.dat\")\n\n&gt;&gt;&gt; print(tail)\na.dat\n&gt;&gt;&gt; print(head)\n\/tmp\/d\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":6780,"reputation":40790,"user_id":11527,"user_type":"registered","accept_rate":40,"profile_image":"https:\/\/i.stack.imgur.com\/2YJM0.jpg?s=256&g=1","display_name":"Ber","link":"https:\/\/stackoverflow.com\/users\/11527\/ber"},"is_accepted":false,"score":384,"last_activity_date":1479824862,"last_edit_date":1479824862.0,"creation_date":1222368186,"answer_id":135157,"question_id":134934,"content_license":"CC BY-SA 3.0","body_markdown":"In Python 2.6+ and 3.0+, you would use the [`format()`][1] string method:\r\n\r\n    for i in (1, 10, 100):\r\n        print(&#39;{num:02d}&#39;.format(num=i))\r\n\r\nor using the built-in (for a single number):\r\n\r\n    print(format(i, &#39;02d&#39;))\r\n\r\nSee the [PEP-3101][2] documentation for the new formatting functions.\r\n\r\n\r\n  [1]: https:\/\/docs.python.org\/library\/stdtypes.html#str.format\r\n  [2]: http:\/\/www.python.org\/dev\/peps\/pep-3101","body":"<p>In Python 2.6+ and 3.0+, you would use the <a href=\"https:\/\/docs.python.org\/library\/stdtypes.html#str.format\" rel=\"noreferrer\"><code>format()<\/code><\/a> string method:<\/p>\n\n<pre><code>for i in (1, 10, 100):\n    print('{num:02d}'.format(num=i))\n<\/code><\/pre>\n\n<p>or using the built-in (for a single number):<\/p>\n\n<pre><code>print(format(i, '02d'))\n<\/code><\/pre>\n\n<p>See the <a href=\"http:\/\/www.python.org\/dev\/peps\/pep-3101\" rel=\"noreferrer\">PEP-3101<\/a> documentation for the new formatting functions.<\/p>\n","community_owned_date":null},{"owner":{"account_id":3306,"reputation":144752,"user_id":4766,"user_type":"registered","accept_rate":96,"profile_image":"https:\/\/www.gravatar.com\/avatar\/56dbb3799dd6358c3bee3468d0328046?s=256&d=identicon&r=PG","display_name":"Daryl Spitzer","link":"https:\/\/stackoverflow.com\/users\/4766\/daryl-spitzer"},"is_accepted":false,"score":382,"last_activity_date":1583170311,"last_edit_date":1583170311.0,"creation_date":1222189619,"answer_id":122340,"question_id":122327,"content_license":"CC BY-SA 4.0","body_markdown":"A solution that:\r\n\r\n - outside of virtualenv - provides the path of **global** site-packages,\r\n - insidue a virtualenv - provides the **virtualenv&#39;s** site-packages\r\n\r\n...is this one-liner:\r\n\r\n```python\r\npython -c &quot;from distutils.sysconfig import get_python_lib; print(get_python_lib())&quot;\r\n```\r\n\r\nFormatted for readability (rather than use as a one-liner), that looks like the following:\r\n\r\n```python\r\nfrom distutils.sysconfig import get_python_lib\r\nprint(get_python_lib())\r\n```\r\n\r\n&lt;br\/&gt;\r\n\r\n*Source:* an very old version of [&quot;How to Install Django&quot; documentation][1] (though this is useful to more than just Django installation)\r\n\r\n  [1]: http:\/\/web.archive.org\/web\/20100723105725\/http:\/\/docs.djangoproject.com\/en\/1.2\/topics\/install#removing-old-versions-of-django","body":"<p>A solution that:<\/p>\n\n<ul>\n<li>outside of virtualenv - provides the path of <strong>global<\/strong> site-packages,<\/li>\n<li>insidue a virtualenv - provides the <strong>virtualenv's<\/strong> site-packages<\/li>\n<\/ul>\n\n<p>...is this one-liner:<\/p>\n\n<pre class=\"lang-py prettyprint-override\"><code>python -c \"from distutils.sysconfig import get_python_lib; print(get_python_lib())\"\n<\/code><\/pre>\n\n<p>Formatted for readability (rather than use as a one-liner), that looks like the following:<\/p>\n\n<pre class=\"lang-py prettyprint-override\"><code>from distutils.sysconfig import get_python_lib\nprint(get_python_lib())\n<\/code><\/pre>\n\n<p><br\/><\/p>\n\n<p><em>Source:<\/em> an very old version of <a href=\"http:\/\/web.archive.org\/web\/20100723105725\/http:\/\/docs.djangoproject.com\/en\/1.2\/topics\/install#removing-old-versions-of-django\" rel=\"noreferrer\">\"How to Install Django\" documentation<\/a> (though this is useful to more than just Django installation)<\/p>\n","community_owned_date":null},{"owner":{"account_id":2979251,"reputation":7074,"user_id":2529619,"user_type":"registered","accept_rate":48,"profile_image":"https:\/\/www.gravatar.com\/avatar\/8fe42206cbd503e03319de38fa7fd36b?s=256&d=identicon&r=PG","display_name":"ChaimG","link":"https:\/\/stackoverflow.com\/users\/2529619\/chaimg"},"is_accepted":false,"score":380,"last_activity_date":1692545965,"last_edit_date":1692545965.0,"creation_date":1434507910,"answer_id":30881320,"question_id":60208,"content_license":"CC BY-SA 4.0","body_markdown":"**Python &gt;= 3.10** \r\n\r\nWow, Python 3.10+ now has a [`match`\/`case`][1] syntax which is like `switch\/case` and more!\r\n\r\n[PEP 634 -- Structural Pattern Matching][2]\r\n\r\n**Selected features of `match\/case`**\r\n\r\n1 - Match values:\r\n\r\nMatching values is similar to a simple `switch\/case` in another language:\r\n\r\n    match something:\r\n        case 1 | 2 | 3:\r\n            # Match 1-3.\r\n        case _:\r\n            # Anything else.\r\n            # \r\n            # If `case _:` is omitted, an error will be thrown\r\n            # if `something` doesn&#39;t match any of the patterns.\r\n\r\n2 - Match structural patterns:\r\n\r\n    match something:\r\n        case str() | bytes():  \r\n            # Match a string like object.\r\n        case [str(), int()]:\r\n            # Match a `str` and an `int` sequence \r\n            # (A sequence can be a `list` or a `tuple` but not a `set` or an iterator). \r\n        case [_, _]:\r\n            # Match a sequence of 2 variables.\r\n            # To prevent a common mistake, sequence patterns don\u2019t match strings.\r\n        case {&quot;bandwidth&quot;: 100, &quot;latency&quot;: 300}:\r\n            # Match this dict. Extra keys are ignored.\r\n\r\n3 - Capture variables\r\n\r\nParse an object; saving it as variables: \r\n\r\n    match something:\r\n        case [name, count]\r\n            # Match a sequence of any two objects and parse them into the two variables.\r\n        case [x, y, *rest]:\r\n            # Match a sequence of two or more objects, \r\n            # binding object #3 and on into the rest variable.\r\n        case bytes() | str() as text:\r\n            # Match any string like object and save it to the text variable.\r\n\r\nCapture variables can be useful when parsing data (such as JSON or HTML) that may come in one of a number of different patterns.\r\n\r\nCapture variables is a feature. But it also means that you need to use dotted constants (ex: `COLOR.RED`) only. Otherwise, the constant will be treated as a capture variable and overwritten. \r\n\r\n[More sample usage][3]:\r\n\r\n    match something:\r\n        case 0 | 1 | 2:\r\n            # Matches 0, 1 or 2 (value).\r\n            print(&quot;Small number&quot;)\r\n        case [] | [_]:\r\n            # Matches an empty or single value sequence (structure).\r\n            # Matches lists and tuples but not sets.\r\n            print(&quot;A short sequence&quot;)\r\n        case str() | bytes():\r\n            # Something of `str` or `bytes` type (data type).\r\n            print(&quot;Something string-like&quot;)\r\n        case _:\r\n            # Anything not matched by the above.\r\n            print(&quot;Something else&quot;)\r\n\r\n\r\n---\r\n\r\n**Python &lt;= 3.9**\r\n\r\nMy favorite Python recipe for switch\/case was:\r\n\r\n    choices = {&#39;a&#39;: 1, &#39;b&#39;: 2}\r\n    result = choices.get(key, &#39;default&#39;)\r\n\r\nShort and simple for simple scenarios. \r\n\r\nCompare to 11+ lines of C code:\r\n\r\n    \/\/ C Language version of a simple &#39;switch\/case&#39;.\r\n    switch( key ) \r\n    {\r\n        case &#39;a&#39; :\r\n            result = 1;\r\n            break;\r\n        case &#39;b&#39; :\r\n            result = 2;\r\n            break;\r\n        default :\r\n            result = -1;\r\n    }\r\n\r\nYou can even assign multiple variables by using tuples:\r\n\r\n    choices = {&#39;a&#39;: (1, 2, 3), &#39;b&#39;: (4, 5, 6)}\r\n    (result1, result2, result3) = choices.get(key, (&#39;default1&#39;, &#39;default2&#39;, &#39;default3&#39;))\r\n\r\n\r\n  [1]: https:\/\/docs.python.org\/3.10\/whatsnew\/3.10.html#pep-634-structural-pattern-matching\r\n  [2]: https:\/\/www.python.org\/dev\/peps\/pep-0634\/\r\n  [3]: https:\/\/docs.python.org\/3.10\/tutorial\/controlflow.html#match-statements\r\n  [4]: https:\/\/docs.python.org\/3.10\/whatsnew\/3.10.html#other-key-features\r\n\r\n","body":"<p><strong>Python &gt;= 3.10<\/strong><\/p>\n<p>Wow, Python 3.10+ now has a <a href=\"https:\/\/docs.python.org\/3.10\/whatsnew\/3.10.html#pep-634-structural-pattern-matching\" rel=\"nofollow noreferrer\"><code>match<\/code>\/<code>case<\/code><\/a> syntax which is like <code>switch\/case<\/code> and more!<\/p>\n<p><a href=\"https:\/\/www.python.org\/dev\/peps\/pep-0634\/\" rel=\"nofollow noreferrer\">PEP 634 -- Structural Pattern Matching<\/a><\/p>\n<p><strong>Selected features of <code>match\/case<\/code><\/strong><\/p>\n<p>1 - Match values:<\/p>\n<p>Matching values is similar to a simple <code>switch\/case<\/code> in another language:<\/p>\n<pre><code>match something:\n    case 1 | 2 | 3:\n        # Match 1-3.\n    case _:\n        # Anything else.\n        # \n        # If `case _:` is omitted, an error will be thrown\n        # if `something` doesn't match any of the patterns.\n<\/code><\/pre>\n<p>2 - Match structural patterns:<\/p>\n<pre><code>match something:\n    case str() | bytes():  \n        # Match a string like object.\n    case [str(), int()]:\n        # Match a `str` and an `int` sequence \n        # (A sequence can be a `list` or a `tuple` but not a `set` or an iterator). \n    case [_, _]:\n        # Match a sequence of 2 variables.\n        # To prevent a common mistake, sequence patterns don\u2019t match strings.\n    case {&quot;bandwidth&quot;: 100, &quot;latency&quot;: 300}:\n        # Match this dict. Extra keys are ignored.\n<\/code><\/pre>\n<p>3 - Capture variables<\/p>\n<p>Parse an object; saving it as variables:<\/p>\n<pre><code>match something:\n    case [name, count]\n        # Match a sequence of any two objects and parse them into the two variables.\n    case [x, y, *rest]:\n        # Match a sequence of two or more objects, \n        # binding object #3 and on into the rest variable.\n    case bytes() | str() as text:\n        # Match any string like object and save it to the text variable.\n<\/code><\/pre>\n<p>Capture variables can be useful when parsing data (such as JSON or HTML) that may come in one of a number of different patterns.<\/p>\n<p>Capture variables is a feature. But it also means that you need to use dotted constants (ex: <code>COLOR.RED<\/code>) only. Otherwise, the constant will be treated as a capture variable and overwritten.<\/p>\n<p><a href=\"https:\/\/docs.python.org\/3.10\/tutorial\/controlflow.html#match-statements\" rel=\"nofollow noreferrer\">More sample usage<\/a>:<\/p>\n<pre><code>match something:\n    case 0 | 1 | 2:\n        # Matches 0, 1 or 2 (value).\n        print(&quot;Small number&quot;)\n    case [] | [_]:\n        # Matches an empty or single value sequence (structure).\n        # Matches lists and tuples but not sets.\n        print(&quot;A short sequence&quot;)\n    case str() | bytes():\n        # Something of `str` or `bytes` type (data type).\n        print(&quot;Something string-like&quot;)\n    case _:\n        # Anything not matched by the above.\n        print(&quot;Something else&quot;)\n<\/code><\/pre>\n<hr \/>\n<p><strong>Python &lt;= 3.9<\/strong><\/p>\n<p>My favorite Python recipe for switch\/case was:<\/p>\n<pre><code>choices = {'a': 1, 'b': 2}\nresult = choices.get(key, 'default')\n<\/code><\/pre>\n<p>Short and simple for simple scenarios.<\/p>\n<p>Compare to 11+ lines of C code:<\/p>\n<pre><code>\/\/ C Language version of a simple 'switch\/case'.\nswitch( key ) \n{\n    case 'a' :\n        result = 1;\n        break;\n    case 'b' :\n        result = 2;\n        break;\n    default :\n        result = -1;\n}\n<\/code><\/pre>\n<p>You can even assign multiple variables by using tuples:<\/p>\n<pre><code>choices = {'a': (1, 2, 3), 'b': (4, 5, 6)}\n(result1, result2, result3) = choices.get(key, ('default1', 'default2', 'default3'))\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":52478,"reputation":4115,"user_id":156831,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/d4a7fc39d443767abbe16fc219bf3910?s=256&d=identicon&r=PG","display_name":"lifeless","link":"https:\/\/stackoverflow.com\/users\/156831\/lifeless"},"is_accepted":false,"score":376,"last_activity_date":1650160563,"last_edit_date":1650160563.0,"creation_date":1367366050,"answer_id":16310777,"question_id":3277367,"content_license":"CC BY-SA 4.0","body_markdown":"Your code, and the other answers, are all buggy. They are missing the `super()` calls in the first two classes that are required for co-operative subclassing to work. Better is:\r\n\r\n    class First(object):\r\n        def __init__(self):\r\n            super(First, self).__init__()\r\n            print(&quot;first&quot;)\r\n\r\n    class Second(object):\r\n        def __init__(self):\r\n            super(Second, self).__init__()\r\n            print(&quot;second&quot;)\r\n\r\n    class Third(First, Second):\r\n        def __init__(self):\r\n            super(Third, self).__init__()\r\n            print(&quot;third&quot;)\r\n\r\nOutput:\r\n\r\n    &gt;&gt;&gt; Third()\r\n    second\r\n    first\r\n    third\r\n\r\nThe `super()` call finds the next method in the MRO at each step, which is why `First` and `Second` have to have it too, otherwise execution stops at the end of `Second.__init__()`.\r\n\r\n---\r\n\r\n**Without** the `super()` calls in `First` and `Second`, the output is missing `second`:\r\n\r\n    &gt;&gt;&gt; Third()\r\n    first\r\n    third","body":"<p>Your code, and the other answers, are all buggy. They are missing the <code>super()<\/code> calls in the first two classes that are required for co-operative subclassing to work. Better is:<\/p>\n<pre><code>class First(object):\n    def __init__(self):\n        super(First, self).__init__()\n        print(&quot;first&quot;)\n\nclass Second(object):\n    def __init__(self):\n        super(Second, self).__init__()\n        print(&quot;second&quot;)\n\nclass Third(First, Second):\n    def __init__(self):\n        super(Third, self).__init__()\n        print(&quot;third&quot;)\n<\/code><\/pre>\n<p>Output:<\/p>\n<pre><code>&gt;&gt;&gt; Third()\nsecond\nfirst\nthird\n<\/code><\/pre>\n<p>The <code>super()<\/code> call finds the next method in the MRO at each step, which is why <code>First<\/code> and <code>Second<\/code> have to have it too, otherwise execution stops at the end of <code>Second.__init__()<\/code>.<\/p>\n<hr \/>\n<p><strong>Without<\/strong> the <code>super()<\/code> calls in <code>First<\/code> and <code>Second<\/code>, the output is missing <code>second<\/code>:<\/p>\n<pre><code>&gt;&gt;&gt; Third()\nfirst\nthird\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":406832,"reputation":102537,"user_id":776560,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/2c08a3eed709a9d1a2654cea45aa466f?s=256&d=identicon&r=PG","display_name":"Wes McKinney","link":"https:\/\/stackoverflow.com\/users\/776560\/wes-mckinney"},"is_accepted":false,"score":368,"last_activity_date":1644276300,"last_edit_date":1644276300.0,"creation_date":1352495043,"answer_id":13316001,"question_id":13148429,"content_license":"CC BY-SA 4.0","body_markdown":"For pandas &gt;= 1.3 (Edited in 2022):\r\n\r\n    df.insert(0, &#39;mean&#39;, df.pop(&#39;mean&#39;))\r\n\r\nHow about   (for Pandas &lt; 1.3, the original answer)\r\n\r\n    df.insert(0, &#39;mean&#39;, df[&#39;mean&#39;])\r\n\r\nhttps:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/dsintro.html#column-selection-addition-deletion","body":"<p>For pandas &gt;= 1.3 (Edited in 2022):<\/p>\n<pre><code>df.insert(0, 'mean', df.pop('mean'))\n<\/code><\/pre>\n<p>How about   (for Pandas &lt; 1.3, the original answer)<\/p>\n<pre><code>df.insert(0, 'mean', df['mean'])\n<\/code><\/pre>\n<p><a href=\"https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/dsintro.html#column-selection-addition-deletion\" rel=\"noreferrer\">https:\/\/pandas.pydata.org\/pandas-docs\/stable\/user_guide\/dsintro.html#column-selection-addition-deletion<\/a><\/p>\n","community_owned_date":null},{"owner":{"account_id":1444766,"reputation":4886,"user_id":1363677,"user_type":"registered","accept_rate":88,"profile_image":"https:\/\/www.gravatar.com\/avatar\/5c380b8db82ff533fb62582854120d3a?s=256&d=identicon&r=PG","display_name":"xslittlegrass","link":"https:\/\/stackoverflow.com\/users\/1363677\/xslittlegrass"},"is_accepted":false,"score":368,"last_activity_date":1632474235,"last_edit_date":1632474235.0,"creation_date":1480884279,"answer_id":40963434,"question_id":7571635,"content_license":"CC BY-SA 4.0","body_markdown":"As stated by others, `in` can be very slow for large lists. Here are some comparisons of the performances for `in`, `set` and `bisect`. Note the time (in second) is in log scale.\r\n\r\n\r\n[![enter image description here][1]][1]\r\n\r\nCode for testing:\r\n\r\n    import random\r\n    import bisect\r\n    import matplotlib.pyplot as plt\r\n    import math\r\n    import time\r\n    \r\n    \r\n    def method_in(a, b, c):\r\n        start_time = time.time()\r\n        for i, x in enumerate(a):\r\n            if x in b:\r\n                c[i] = 1\r\n        return time.time() - start_time\r\n    \r\n    \r\n    def method_set_in(a, b, c):\r\n        start_time = time.time()\r\n        s = set(b)\r\n        for i, x in enumerate(a):\r\n            if x in s:\r\n                c[i] = 1\r\n        return time.time() - start_time\r\n    \r\n    \r\n    def method_bisect(a, b, c):\r\n        start_time = time.time()\r\n        b.sort()\r\n        for i, x in enumerate(a):\r\n            index = bisect.bisect_left(b, x)\r\n            if index &lt; len(a):\r\n                if x == b[index]:\r\n                    c[i] = 1\r\n        return time.time() - start_time\r\n    \r\n    \r\n    def profile():\r\n        time_method_in = []\r\n        time_method_set_in = []\r\n        time_method_bisect = []\r\n    \r\n        # adjust range down if runtime is too long or up if there are too many zero entries in any of the time_method lists\r\n        Nls = [x for x in range(10000, 30000, 1000)]\r\n        for N in Nls:\r\n            a = [x for x in range(0, N)]\r\n            random.shuffle(a)\r\n            b = [x for x in range(0, N)]\r\n            random.shuffle(b)\r\n            c = [0 for x in range(0, N)]\r\n    \r\n            time_method_in.append(method_in(a, b, c))\r\n            time_method_set_in.append(method_set_in(a, b, c))\r\n            time_method_bisect.append(method_bisect(a, b, c))\r\n    \r\n        plt.plot(Nls, time_method_in, marker=&#39;o&#39;, color=&#39;r&#39;, linestyle=&#39;-&#39;, label=&#39;in&#39;)\r\n        plt.plot(Nls, time_method_set_in, marker=&#39;o&#39;, color=&#39;b&#39;, linestyle=&#39;-&#39;, label=&#39;set&#39;)\r\n        plt.plot(Nls, time_method_bisect, marker=&#39;o&#39;, color=&#39;g&#39;, linestyle=&#39;-&#39;, label=&#39;bisect&#39;)\r\n        plt.xlabel(&#39;list size&#39;, fontsize=18)\r\n        plt.ylabel(&#39;log(time)&#39;, fontsize=18)\r\n        plt.legend(loc=&#39;upper left&#39;)\r\n        plt.yscale(&#39;log&#39;)\r\n        plt.show()\r\n    \r\n    \r\n    profile()\r\n\r\n\r\n  [1]: https:\/\/i.stack.imgur.com\/HSRgg.png\r\n","body":"<p>As stated by others, <code>in<\/code> can be very slow for large lists. Here are some comparisons of the performances for <code>in<\/code>, <code>set<\/code> and <code>bisect<\/code>. Note the time (in second) is in log scale.<\/p>\n<p><a href=\"https:\/\/i.stack.imgur.com\/HSRgg.png\" rel=\"noreferrer\"><img src=\"https:\/\/i.stack.imgur.com\/HSRgg.png\" alt=\"enter image description here\" \/><\/a><\/p>\n<p>Code for testing:<\/p>\n<pre><code>import random\nimport bisect\nimport matplotlib.pyplot as plt\nimport math\nimport time\n\n\ndef method_in(a, b, c):\n    start_time = time.time()\n    for i, x in enumerate(a):\n        if x in b:\n            c[i] = 1\n    return time.time() - start_time\n\n\ndef method_set_in(a, b, c):\n    start_time = time.time()\n    s = set(b)\n    for i, x in enumerate(a):\n        if x in s:\n            c[i] = 1\n    return time.time() - start_time\n\n\ndef method_bisect(a, b, c):\n    start_time = time.time()\n    b.sort()\n    for i, x in enumerate(a):\n        index = bisect.bisect_left(b, x)\n        if index &lt; len(a):\n            if x == b[index]:\n                c[i] = 1\n    return time.time() - start_time\n\n\ndef profile():\n    time_method_in = []\n    time_method_set_in = []\n    time_method_bisect = []\n\n    # adjust range down if runtime is too long or up if there are too many zero entries in any of the time_method lists\n    Nls = [x for x in range(10000, 30000, 1000)]\n    for N in Nls:\n        a = [x for x in range(0, N)]\n        random.shuffle(a)\n        b = [x for x in range(0, N)]\n        random.shuffle(b)\n        c = [0 for x in range(0, N)]\n\n        time_method_in.append(method_in(a, b, c))\n        time_method_set_in.append(method_set_in(a, b, c))\n        time_method_bisect.append(method_bisect(a, b, c))\n\n    plt.plot(Nls, time_method_in, marker='o', color='r', linestyle='-', label='in')\n    plt.plot(Nls, time_method_set_in, marker='o', color='b', linestyle='-', label='set')\n    plt.plot(Nls, time_method_bisect, marker='o', color='g', linestyle='-', label='bisect')\n    plt.xlabel('list size', fontsize=18)\n    plt.ylabel('log(time)', fontsize=18)\n    plt.legend(loc='upper left')\n    plt.yscale('log')\n    plt.show()\n\n\nprofile()\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":680,"reputation":961801,"user_id":893,"user_type":"registered","accept_rate":84,"profile_image":"https:\/\/www.gravatar.com\/avatar\/747ffa5da3538e66840ebc0548b8fd58?s=256&d=identicon&r=PG","display_name":"Greg Hewgill","link":"https:\/\/stackoverflow.com\/users\/893\/greg-hewgill"},"is_accepted":false,"score":364,"last_activity_date":1319959668,"last_edit_date":null,"creation_date":1319959668,"answer_id":7943764,"question_id":7943751,"content_license":"CC BY-SA 3.0","body_markdown":"The equivalent is:\r\n\r\n    python3 -m http.server\r\n\r\n","body":"<p>The equivalent is:<\/p>\n\n<pre><code>python3 -m http.server\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":39409,"reputation":47654,"user_id":113632,"user_type":"registered","accept_rate":84,"profile_image":"https:\/\/www.gravatar.com\/avatar\/f0aa6977c75f54ca9033d4f4d0244023?s=256&d=identicon&r=PG","display_name":"dimo414","link":"https:\/\/stackoverflow.com\/users\/113632\/dimo414"},"is_accepted":false,"score":364,"last_activity_date":1432017516,"last_edit_date":1432017516.0,"creation_date":1430257232,"answer_id":29930431,"question_id":3702675,"content_license":"CC BY-SA 3.0","body_markdown":"If you&#39;re debugging and just want to see the current stack trace, you can simply call:\r\n\r\n[`traceback.print_stack()`][1]\r\n\r\nThere&#39;s no need to manually raise an exception just to catch it again.\r\n\r\n\r\n  [1]: https:\/\/docs.python.org\/3\/library\/traceback.html#traceback.print_stack","body":"<p>If you're debugging and just want to see the current stack trace, you can simply call:<\/p>\n\n<p><a href=\"https:\/\/docs.python.org\/3\/library\/traceback.html#traceback.print_stack\"><code>traceback.print_stack()<\/code><\/a><\/p>\n\n<p>There's no need to manually raise an exception just to catch it again.<\/p>\n","community_owned_date":null},{"owner":{"account_id":2279,"reputation":341292,"user_id":3153,"user_type":"registered","accept_rate":98,"profile_image":"https:\/\/www.gravatar.com\/avatar\/47d8644c0ad8d89635fca422dd6d3ab5?s=256&d=identicon&r=PG","display_name":"Brian R. Bondy","link":"https:\/\/stackoverflow.com\/users\/3153\/brian-r-bondy"},"is_accepted":false,"score":362,"last_activity_date":1568734358,"last_edit_date":1568734358.0,"creation_date":1238788604,"answer_id":715468,"question_id":715417,"content_license":"CC BY-SA 4.0","body_markdown":"    def str2bool(v):\r\n      return v.lower() in (&quot;yes&quot;, &quot;true&quot;, &quot;t&quot;, &quot;1&quot;)\r\n\r\nThen call it like so:\r\n\r\n```python\r\n&gt;&gt;&gt; str2bool(&quot;yes&quot;)\r\nTrue\r\n&gt;&gt;&gt; str2bool(&quot;no&quot;)\r\nFalse\r\n&gt;&gt;&gt; str2bool(&quot;stuff&quot;)\r\nFalse\r\n&gt;&gt;&gt; str2bool(&quot;1&quot;)\r\nTrue\r\n&gt;&gt;&gt; str2bool(&quot;0&quot;)\r\nFalse\r\n```\r\n\r\n---\r\n\r\n**Handling true and false explicitly:**\r\n\r\nYou could also make your function explicitly check against a True list of words and a False list of words.  Then if it is in neither list, you could throw an exception. \r\n","body":"<pre><code>def str2bool(v):\n  return v.lower() in (\"yes\", \"true\", \"t\", \"1\")\n<\/code><\/pre>\n\n<p>Then call it like so:<\/p>\n\n<pre class=\"lang-py prettyprint-override\"><code>&gt;&gt;&gt; str2bool(\"yes\")\nTrue\n&gt;&gt;&gt; str2bool(\"no\")\nFalse\n&gt;&gt;&gt; str2bool(\"stuff\")\nFalse\n&gt;&gt;&gt; str2bool(\"1\")\nTrue\n&gt;&gt;&gt; str2bool(\"0\")\nFalse\n<\/code><\/pre>\n\n<hr>\n\n<p><strong>Handling true and false explicitly:<\/strong><\/p>\n\n<p>You could also make your function explicitly check against a True list of words and a False list of words.  Then if it is in neither list, you could throw an exception. <\/p>\n","community_owned_date":null},{"owner":{"account_id":473676,"reputation":26311,"user_id":882918,"user_type":"registered","accept_rate":71,"profile_image":"https:\/\/i.stack.imgur.com\/fIjw9.jpg?s=256&g=1","display_name":"J0HN","link":"https:\/\/stackoverflow.com\/users\/882918\/j0hn"},"is_accepted":false,"score":360,"last_activity_date":1654752691,"last_edit_date":1654752691.0,"creation_date":1372279971,"answer_id":17330236,"question_id":17330160,"content_license":"CC BY-SA 4.0","body_markdown":"The [documentation says][1] it&#39;s just a shortcut for creating read-only properties. So\r\n\r\n    @property\r\n    def x(self):\r\n        return self._x\r\n\r\nis equivalent to\r\n\r\n    def getx(self):\r\n        return self._x\r\n    x = property(getx)\r\n\r\n\r\n  [1]: http:\/\/docs.python.org\/3\/library\/functions.html#property","body":"<p>The <a href=\"http:\/\/docs.python.org\/3\/library\/functions.html#property\" rel=\"noreferrer\">documentation says<\/a> it's just a shortcut for creating read-only properties. So<\/p>\n<pre><code>@property\ndef x(self):\n    return self._x\n<\/code><\/pre>\n<p>is equivalent to<\/p>\n<pre><code>def getx(self):\n    return self._x\nx = property(getx)\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":152622,"reputation":490342,"user_id":367273,"user_type":"registered","accept_rate":96,"profile_image":"https:\/\/www.gravatar.com\/avatar\/f1ed2b0c87f602ef30229f5c4b04eff6?s=256&d=identicon&r=PG","display_name":"NPE","link":"https:\/\/stackoverflow.com\/users\/367273\/npe"},"is_accepted":false,"score":354,"last_activity_date":1663080266,"last_edit_date":1663080266.0,"creation_date":1337760883,"answer_id":10716007,"question_id":10715965,"content_license":"CC BY-SA 4.0","body_markdown":"You could use `pandas.concat()`. For details and examples, see [Merge, join, and concatenate][1].\r\n\r\nFor example:\r\n\r\n    def append_row(df, row):\r\n        return pd.concat([\r\n                    df, \r\n                    pd.DataFrame([row], columns=row.index)]\r\n               ).reset_index(drop=True)\r\n    \r\n    df = pd.DataFrame(columns=(&#39;lib&#39;, &#39;qty1&#39;, &#39;qty2&#39;))\r\n    new_row = pd.Series({&#39;lib&#39;:&#39;A&#39;, &#39;qty1&#39;:1, &#39;qty2&#39;: 2})\r\n    \r\n    df = append_row(df, new_row)\r\n\r\n\r\n  [1]: http:\/\/pandas.pydata.org\/pandas-docs\/stable\/merging.html\r\n","body":"<p>You could use <code>pandas.concat()<\/code>. For details and examples, see <a href=\"http:\/\/pandas.pydata.org\/pandas-docs\/stable\/merging.html\" rel=\"noreferrer\">Merge, join, and concatenate<\/a>.<\/p>\n<p>For example:<\/p>\n<pre><code>def append_row(df, row):\n    return pd.concat([\n                df, \n                pd.DataFrame([row], columns=row.index)]\n           ).reset_index(drop=True)\n\ndf = pd.DataFrame(columns=('lib', 'qty1', 'qty2'))\nnew_row = pd.Series({'lib':'A', 'qty1':1, 'qty2': 2})\n\ndf = append_row(df, new_row)\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":9890,"reputation":11503,"user_id":18446,"user_type":"registered","accept_rate":84,"profile_image":"https:\/\/www.gravatar.com\/avatar\/9b148ba202291626ddcd07f2f160c062?s=256&d=identicon&r=PG","display_name":"mbac32768","link":"https:\/\/stackoverflow.com\/users\/18446\/mbac32768"},"is_accepted":false,"score":352,"last_activity_date":1275059167,"last_edit_date":1275059167.0,"creation_date":1221834038,"answer_id":102202,"question_id":101268,"content_license":"CC BY-SA 2.5","body_markdown":"**iter() can take a callable argument**\r\n\r\nFor instance:\r\n\r\n    def seek_next_line(f):\r\n        for c in iter(lambda: f.read(1),&#39;\\n&#39;):\r\n            pass\r\n\r\nThe `iter(callable, until_value)` function repeatedly calls `callable` and yields its result until `until_value` is returned. ","body":"<p><strong>iter() can take a callable argument<\/strong><\/p>\n\n<p>For instance:<\/p>\n\n<pre><code>def seek_next_line(f):\n    for c in iter(lambda: f.read(1),'\\n'):\n        pass\n<\/code><\/pre>\n\n<p>The <code>iter(callable, until_value)<\/code> function repeatedly calls <code>callable<\/code> and yields its result until <code>until_value<\/code> is returned. <\/p>\n","community_owned_date":1222009237.0},{"owner":{"account_id":7575,"reputation":8223,"user_id":13202,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/i.stack.imgur.com\/61nk6.jpg?s=256&g=1","display_name":"chiggsy","link":"https:\/\/stackoverflow.com\/users\/13202\/chiggsy"},"is_accepted":false,"score":343,"last_activity_date":1696108156,"last_edit_date":1696108156.0,"creation_date":1295149335,"answer_id":4703670,"question_id":739993,"content_license":"CC BY-SA 4.0","body_markdown":"Now, these methods I tried myself, and I got exactly what was advertised:  All the modules.\r\n\r\nAlas, really you don&#39;t care much about the stdlib. You know what you get with a Python install.\r\n\r\nReally, I want the stuff that _I_ installed.\r\n\r\nWhat actually, surprisingly, worked just fine was:\r\n\r\n    pip freeze\r\n\r\nWhich returned:\r\n\r\n```lang-none\r\nFabric==0.9.3\r\napache-libcloud==0.4.0\r\nbzr==2.3b4\r\ndistribute==0.6.14\r\ndocutils==0.7\r\ngreenlet==0.3.1\r\nipython==0.10.1\r\niterpipes==0.4\r\nlibxml2-python==2.6.21\r\n```\r\n\r\nI say &quot;surprisingly&quot;, because the package install tool is the exact place one would expect to find this functionality, although not under the name &#39;freeze&#39;, but Python packaging is so weird that I am flabbergasted that this tool makes sense.  Pip 0.8.2 and Python 2.7.\r\n","body":"<p>Now, these methods I tried myself, and I got exactly what was advertised:  All the modules.<\/p>\n<p>Alas, really you don't care much about the stdlib. You know what you get with a Python install.<\/p>\n<p>Really, I want the stuff that <em>I<\/em> installed.<\/p>\n<p>What actually, surprisingly, worked just fine was:<\/p>\n<pre><code>pip freeze\n<\/code><\/pre>\n<p>Which returned:<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>Fabric==0.9.3\napache-libcloud==0.4.0\nbzr==2.3b4\ndistribute==0.6.14\ndocutils==0.7\ngreenlet==0.3.1\nipython==0.10.1\niterpipes==0.4\nlibxml2-python==2.6.21\n<\/code><\/pre>\n<p>I say &quot;surprisingly&quot;, because the package install tool is the exact place one would expect to find this functionality, although not under the name 'freeze', but Python packaging is so weird that I am flabbergasted that this tool makes sense.  Pip 0.8.2 and Python 2.7.<\/p>\n","community_owned_date":null},{"owner":{"account_id":342320,"reputation":8164,"user_id":673423,"user_type":"registered","accept_rate":86,"profile_image":"https:\/\/www.gravatar.com\/avatar\/974eb0144e3b0b4f94196bb6b3ca064a?s=256&d=identicon&r=PG","display_name":"Eugene Sajine","link":"https:\/\/stackoverflow.com\/users\/673423\/eugene-sajine"},"is_accepted":false,"score":342,"last_activity_date":1413937940,"last_edit_date":1413937940.0,"creation_date":1397765431,"answer_id":23142556,"question_id":230751,"content_license":"CC BY-SA 3.0","body_markdown":"Since Python 3.3, you can force the normal `print()` function to flush without the need to use `sys.stdout.flush()`; just set the &quot;flush&quot; keyword argument to true.  From [the documentation](https:\/\/docs.python.org\/3.3\/library\/functions.html#print):\r\n\r\n\r\n&gt; **print(*objects, sep=&#39; &#39;, end=&#39;\\n&#39;, file=sys.stdout, flush=False)**\r\n\r\n&gt;    Print objects to the stream file, separated by sep and followed by end. sep, end and file, if present, must be given as keyword arguments.\r\n\r\n&gt;    All non-keyword arguments are converted to strings like str() does and written to the stream, separated by sep and followed by end. Both sep and end must be strings; they can also be None, which means to use the default values. If no objects are given, print() will just write end.\r\n\r\n&gt;    The file argument must be an object with a write(string) method; if it is not present or None, sys.stdout will be used. **Whether output is buffered is usually determined by file, but if the flush keyword argument is true, the stream is forcibly flushed.**","body":"<p>Since Python 3.3, you can force the normal <code>print()<\/code> function to flush without the need to use <code>sys.stdout.flush()<\/code>; just set the \"flush\" keyword argument to true.  From <a href=\"https:\/\/docs.python.org\/3.3\/library\/functions.html#print\">the documentation<\/a>:<\/p>\n\n<blockquote>\n  <p><strong>print(*objects, sep=' ', end='\\n', file=sys.stdout, flush=False)<\/strong><\/p>\n  \n  <p>Print objects to the stream file, separated by sep and followed by end. sep, end and file, if present, must be given as keyword arguments.<\/p>\n  \n  <p>All non-keyword arguments are converted to strings like str() does and written to the stream, separated by sep and followed by end. Both sep and end must be strings; they can also be None, which means to use the default values. If no objects are given, print() will just write end.<\/p>\n  \n  <p>The file argument must be an object with a write(string) method; if it is not present or None, sys.stdout will be used. <strong>Whether output is buffered is usually determined by file, but if the flush keyword argument is true, the stream is forcibly flushed.<\/strong><\/p>\n<\/blockquote>\n","community_owned_date":null},{"owner":{"account_id":152057,"reputation":30715,"user_id":366309,"user_type":"registered","accept_rate":72,"profile_image":"https:\/\/www.gravatar.com\/avatar\/c06614881687ce3bdab86d3b5d1ae0f8?s=256&d=identicon&r=PG","display_name":"Kit","link":"https:\/\/stackoverflow.com\/users\/366309\/kit"},"is_accepted":false,"score":341,"last_activity_date":1383353410,"last_edit_date":1383353410.0,"creation_date":1280824950,"answer_id":3394924,"question_id":3394835,"content_license":"CC BY-SA 3.0","body_markdown":"Here&#39;s an example that uses 3 different types of parameters.\r\n\r\n    def func(required_arg, *args, **kwargs):\r\n        # required_arg is a positional-only parameter.\r\n        print required_arg\r\n\r\n        # args is a tuple of positional arguments,\r\n        # because the parameter name has * prepended.\r\n        if args: # If args is not empty.\r\n            print args\r\n\r\n        # kwargs is a dictionary of keyword arguments,\r\n        # because the parameter name has ** prepended.\r\n        if kwargs: # If kwargs is not empty.\r\n            print kwargs\r\n\r\n    &gt;&gt;&gt; func()\r\n    Traceback (most recent call last):\r\n      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\r\n    TypeError: func() takes at least 1 argument (0 given)\r\n    \r\n    &gt;&gt;&gt; func(&quot;required argument&quot;)\r\n    required argument\r\n    \r\n    &gt;&gt;&gt; func(&quot;required argument&quot;, 1, 2, &#39;3&#39;)\r\n    required argument\r\n    (1, 2, &#39;3&#39;)\r\n    \r\n    &gt;&gt;&gt; func(&quot;required argument&quot;, 1, 2, &#39;3&#39;, keyword1=4, keyword2=&quot;foo&quot;)\r\n    required argument\r\n    (1, 2, &#39;3&#39;)\r\n    {&#39;keyword2&#39;: &#39;foo&#39;, &#39;keyword1&#39;: 4}","body":"<p>Here's an example that uses 3 different types of parameters.<\/p>\n\n<pre><code>def func(required_arg, *args, **kwargs):\n    # required_arg is a positional-only parameter.\n    print required_arg\n\n    # args is a tuple of positional arguments,\n    # because the parameter name has * prepended.\n    if args: # If args is not empty.\n        print args\n\n    # kwargs is a dictionary of keyword arguments,\n    # because the parameter name has ** prepended.\n    if kwargs: # If kwargs is not empty.\n        print kwargs\n\n&gt;&gt;&gt; func()\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: func() takes at least 1 argument (0 given)\n\n&gt;&gt;&gt; func(\"required argument\")\nrequired argument\n\n&gt;&gt;&gt; func(\"required argument\", 1, 2, '3')\nrequired argument\n(1, 2, '3')\n\n&gt;&gt;&gt; func(\"required argument\", 1, 2, '3', keyword1=4, keyword2=\"foo\")\nrequired argument\n(1, 2, '3')\n{'keyword2': 'foo', 'keyword1': 4}\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":1603,"reputation":193645,"user_id":2147,"user_type":"registered","accept_rate":85,"profile_image":"https:\/\/www.gravatar.com\/avatar\/b8e26b9942e7193a4fe32c407aacfef5?s=256&d=identicon&r=PG","display_name":"Jason Baker","link":"https:\/\/stackoverflow.com\/users\/2147\/jason-baker"},"is_accepted":false,"score":339,"last_activity_date":1279073567,"last_edit_date":1279073567.0,"creation_date":1222058079,"answer_id":113198,"question_id":101268,"content_license":"CC BY-SA 2.5","body_markdown":"**Be careful with mutable default arguments**\r\n\r\n    &gt;&gt;&gt; def foo(x=[]):\r\n    ...     x.append(1)\r\n    ...     print x\r\n    ... \r\n    &gt;&gt;&gt; foo()\r\n    [1]\r\n    &gt;&gt;&gt; foo()\r\n    [1, 1]\r\n    &gt;&gt;&gt; foo()\r\n    [1, 1, 1]\r\n\r\nInstead, you should use a sentinel value denoting &quot;not given&quot; and replace with the mutable you&#39;d like as default:\r\n   \r\n    &gt;&gt;&gt; def foo(x=None):\r\n    ...     if x is None:\r\n    ...         x = []\r\n    ...     x.append(1)\r\n    ...     print x\r\n    &gt;&gt;&gt; foo()\r\n    [1]\r\n    &gt;&gt;&gt; foo()\r\n    [1]\r\n","body":"<p><strong>Be careful with mutable default arguments<\/strong><\/p>\n\n<pre><code>&gt;&gt;&gt; def foo(x=[]):\n...     x.append(1)\n...     print x\n... \n&gt;&gt;&gt; foo()\n[1]\n&gt;&gt;&gt; foo()\n[1, 1]\n&gt;&gt;&gt; foo()\n[1, 1, 1]\n<\/code><\/pre>\n\n<p>Instead, you should use a sentinel value denoting \"not given\" and replace with the mutable you'd like as default:<\/p>\n\n<pre><code>&gt;&gt;&gt; def foo(x=None):\n...     if x is None:\n...         x = []\n...     x.append(1)\n...     print x\n&gt;&gt;&gt; foo()\n[1]\n&gt;&gt;&gt; foo()\n[1]\n<\/code><\/pre>\n","community_owned_date":1222058079.0},{"owner":{"account_id":2838096,"reputation":3361,"user_id":2438279,"user_type":"unregistered","profile_image":"https:\/\/www.gravatar.com\/avatar\/61c061be78c93f3501e7a137041096f8?s=256&d=identicon&r=PG","display_name":"Jim Calfas","link":"https:\/\/stackoverflow.com\/users\/2438279\/jim-calfas"},"is_accepted":false,"score":336,"last_activity_date":1641445001,"last_edit_date":1641445001.0,"creation_date":1369948333,"answer_id":16845955,"question_id":8858008,"content_license":"CC BY-SA 4.0","body_markdown":"Although `os.rename()` and `shutil.move()` will both rename files, the command that is closest to the Unix mv command is `shutil.move()`.  The difference is that `os.rename()` doesn&#39;t work if the source and destination are on different disks, while `shutil.move()` is files disk agnostic.","body":"<p>Although <code>os.rename()<\/code> and <code>shutil.move()<\/code> will both rename files, the command that is closest to the Unix mv command is <code>shutil.move()<\/code>.  The difference is that <code>os.rename()<\/code> doesn't work if the source and destination are on different disks, while <code>shutil.move()<\/code> is files disk agnostic.<\/p>\n","community_owned_date":null},{"owner":{"account_id":84915,"reputation":32425,"user_id":237105,"user_type":"registered","accept_rate":52,"profile_image":"https:\/\/www.gravatar.com\/avatar\/a6e329efbf7cdfd89d8f1f5b5d05896d?s=256&d=identicon&r=PG","display_name":"Antony Hatchkins","link":"https:\/\/stackoverflow.com\/users\/237105\/antony-hatchkins"},"is_accepted":false,"score":328,"last_activity_date":1546861532,"last_edit_date":1546861532.0,"creation_date":1360830156,"answer_id":14870531,"question_id":12309269,"content_license":"CC BY-SA 4.0","body_markdown":"To get ***utf8**-encoded* file as opposed to ***ascii**-encoded* in the accepted answer for Python 2 use:\r\n\r\n    import io, json\r\n    with io.open(&#39;data.txt&#39;, &#39;w&#39;, encoding=&#39;utf-8&#39;) as f:\r\n      f.write(json.dumps(data, ensure_ascii=False))\r\n\r\nThe code is simpler in Python 3:\r\n\r\n    import json\r\n    with open(&#39;data.txt&#39;, &#39;w&#39;) as f:\r\n      json.dump(data, f, ensure_ascii=False)\r\n\r\nOn Windows, the `encoding=&#39;utf-8&#39;` argument to `open` is still necessary.\r\n\r\nTo avoid storing an encoded copy of the data in memory (result of `dumps`) and to output *utf8-encoded* bytestrings in both Python 2 and 3, use:\r\n\r\n    import json, codecs\r\n    with open(&#39;data.txt&#39;, &#39;wb&#39;) as f:\r\n        json.dump(data, codecs.getwriter(&#39;utf-8&#39;)(f), ensure_ascii=False)\r\n\r\n*The `codecs.getwriter` call is redundant in Python 3 but required for Python 2*\r\n\r\n----------\r\n**Readability and size:**\r\n\r\nThe use of `ensure_ascii=False` gives better readability and smaller size:\r\n\r\n    &gt;&gt;&gt; json.dumps({&#39;price&#39;: &#39;\u20ac10&#39;})\r\n    &#39;{&quot;price&quot;: &quot;\\\\u20ac10&quot;}&#39;\r\n    &gt;&gt;&gt; json.dumps({&#39;price&#39;: &#39;\u20ac10&#39;}, ensure_ascii=False)\r\n    &#39;{&quot;price&quot;: &quot;\u20ac10&quot;}&#39;\r\n\r\n    &gt;&gt;&gt; len(json.dumps({&#39;\u0430\u0431\u0432\u0433\u0434&#39;: 1}))\r\n    37\r\n    &gt;&gt;&gt; len(json.dumps({&#39;\u0430\u0431\u0432\u0433\u0434&#39;: 1}, ensure_ascii=False).encode(&#39;utf8&#39;))\r\n    17\r\n\r\nFurther improve readability by adding flags `indent=4, sort_keys=True` (as suggested by [dinos66][1]) to arguments of `dump` or `dumps`. This way you&#39;ll get a nicely indented sorted structure in the json file at the cost of a slightly larger file size.\r\n\r\n\r\n  [1]: https:\/\/stackoverflow.com\/a\/31343739\/237105","body":"<p>To get <strong><em>utf8<\/strong>-encoded<\/em> file as opposed to <strong><em>ascii<\/strong>-encoded<\/em> in the accepted answer for Python 2 use:<\/p>\n\n<pre><code>import io, json\nwith io.open('data.txt', 'w', encoding='utf-8') as f:\n  f.write(json.dumps(data, ensure_ascii=False))\n<\/code><\/pre>\n\n<p>The code is simpler in Python 3:<\/p>\n\n<pre><code>import json\nwith open('data.txt', 'w') as f:\n  json.dump(data, f, ensure_ascii=False)\n<\/code><\/pre>\n\n<p>On Windows, the <code>encoding='utf-8'<\/code> argument to <code>open<\/code> is still necessary.<\/p>\n\n<p>To avoid storing an encoded copy of the data in memory (result of <code>dumps<\/code>) and to output <em>utf8-encoded<\/em> bytestrings in both Python 2 and 3, use:<\/p>\n\n<pre><code>import json, codecs\nwith open('data.txt', 'wb') as f:\n    json.dump(data, codecs.getwriter('utf-8')(f), ensure_ascii=False)\n<\/code><\/pre>\n\n<p><em>The <code>codecs.getwriter<\/code> call is redundant in Python 3 but required for Python 2<\/em><\/p>\n\n<hr>\n\n<p><strong>Readability and size:<\/strong><\/p>\n\n<p>The use of <code>ensure_ascii=False<\/code> gives better readability and smaller size:<\/p>\n\n<pre><code>&gt;&gt;&gt; json.dumps({'price': '\u20ac10'})\n'{\"price\": \"\\\\u20ac10\"}'\n&gt;&gt;&gt; json.dumps({'price': '\u20ac10'}, ensure_ascii=False)\n'{\"price\": \"\u20ac10\"}'\n\n&gt;&gt;&gt; len(json.dumps({'\u0430\u0431\u0432\u0433\u0434': 1}))\n37\n&gt;&gt;&gt; len(json.dumps({'\u0430\u0431\u0432\u0433\u0434': 1}, ensure_ascii=False).encode('utf8'))\n17\n<\/code><\/pre>\n\n<p>Further improve readability by adding flags <code>indent=4, sort_keys=True<\/code> (as suggested by <a href=\"https:\/\/stackoverflow.com\/a\/31343739\/237105\">dinos66<\/a>) to arguments of <code>dump<\/code> or <code>dumps<\/code>. This way you'll get a nicely indented sorted structure in the json file at the cost of a slightly larger file size.<\/p>\n","community_owned_date":null},{"owner":{"account_id":1809491,"reputation":10555,"user_id":1645853,"user_type":"registered","accept_rate":77,"profile_image":"https:\/\/i.stack.imgur.com\/MEqhA.png?s=256&g=1","display_name":"Kathirmani Sukumar","link":"https:\/\/stackoverflow.com\/users\/1645853\/kathirmani-sukumar"},"is_accepted":false,"score":324,"last_activity_date":1481352838,"last_edit_date":1481352838.0,"creation_date":1355328271,"answer_id":13843741,"question_id":12555323,"content_license":"CC BY-SA 3.0","body_markdown":"This is the simple way of adding a new column: `df[&#39;e&#39;] = e`","body":"<p>This is the simple way of adding a new column: <code>df['e'] = e<\/code><\/p>\n","community_owned_date":null},{"owner":{"account_id":538874,"reputation":14101,"user_id":906658,"user_type":"registered","accept_rate":59,"profile_image":"https:\/\/www.gravatar.com\/avatar\/328de31775d6584cbf9ed230e27a7666?s=256&d=identicon&r=PG","display_name":"Bengt","link":"https:\/\/stackoverflow.com\/users\/906658\/bengt"},"is_accepted":false,"score":322,"last_activity_date":1429309892,"last_edit_date":1495541916.0,"creation_date":1354219803,"answer_id":13633860,"question_id":2835559,"content_license":"CC BY-SA 3.0","body_markdown":"Your `data.json` should look like this:\r\n\r\n    {\r\n     &quot;maps&quot;:[\r\n             {&quot;id&quot;:&quot;blabla&quot;,&quot;iscategorical&quot;:&quot;0&quot;},\r\n             {&quot;id&quot;:&quot;blabla&quot;,&quot;iscategorical&quot;:&quot;0&quot;}\r\n            ],\r\n    &quot;masks&quot;:\r\n             {&quot;id&quot;:&quot;valore&quot;},\r\n    &quot;om_points&quot;:&quot;value&quot;,\r\n    &quot;parameters&quot;:\r\n             {&quot;id&quot;:&quot;valore&quot;}\r\n    }\r\n\r\nYour code should be:\r\n\r\n    import json\r\n    from pprint import pprint\r\n\r\n    with open(&#39;data.json&#39;) as data_file:    \r\n        data = json.load(data_file)\r\n    pprint(data)\r\n\r\nNote that this only works in Python 2.6 and up, as it depends upon the [`with`-statement](http:\/\/docs.python.org\/2\/reference\/compound_stmts.html#the-with-statement). In Python 2.5 use `from __future__ import with_statement`, in Python &lt;= 2.4, see [Justin Peel&#39;s answer](https:\/\/stackoverflow.com\/a\/2835672\/906658), which this answer is based upon.\r\n\r\nYou can now also access single values like this:\r\n\r\n    data[&quot;maps&quot;][0][&quot;id&quot;]  # will return &#39;blabla&#39;\r\n    data[&quot;masks&quot;][&quot;id&quot;]    # will return &#39;valore&#39;\r\n    data[&quot;om_points&quot;]      # will return &#39;value&#39;","body":"<p>Your <code>data.json<\/code> should look like this:<\/p>\n\n<pre><code>{\n \"maps\":[\n         {\"id\":\"blabla\",\"iscategorical\":\"0\"},\n         {\"id\":\"blabla\",\"iscategorical\":\"0\"}\n        ],\n\"masks\":\n         {\"id\":\"valore\"},\n\"om_points\":\"value\",\n\"parameters\":\n         {\"id\":\"valore\"}\n}\n<\/code><\/pre>\n\n<p>Your code should be:<\/p>\n\n<pre><code>import json\nfrom pprint import pprint\n\nwith open('data.json') as data_file:    \n    data = json.load(data_file)\npprint(data)\n<\/code><\/pre>\n\n<p>Note that this only works in Python 2.6 and up, as it depends upon the <a href=\"http:\/\/docs.python.org\/2\/reference\/compound_stmts.html#the-with-statement\" rel=\"noreferrer\"><code>with<\/code>-statement<\/a>. In Python 2.5 use <code>from __future__ import with_statement<\/code>, in Python &lt;= 2.4, see <a href=\"https:\/\/stackoverflow.com\/a\/2835672\/906658\">Justin Peel's answer<\/a>, which this answer is based upon.<\/p>\n\n<p>You can now also access single values like this:<\/p>\n\n<pre><code>data[\"maps\"][0][\"id\"]  # will return 'blabla'\ndata[\"masks\"][\"id\"]    # will return 'valore'\ndata[\"om_points\"]      # will return 'value'\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":264856,"reputation":26977,"user_id":551449,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/aa73ded506f1dbec1741ff79856d4073?s=256&d=identicon&r=PG","display_name":"eyquem","link":"https:\/\/stackoverflow.com\/users\/551449\/eyquem"},"is_accepted":false,"score":319,"last_activity_date":1421263454,"last_edit_date":1421263454.0,"creation_date":1307996432,"answer_id":6335836,"question_id":5082452,"content_license":"CC BY-SA 3.0","body_markdown":"Something that the modulo operator ( % ) can&#39;t do, afaik:\r\n\r\n    tu = (12,45,22222,103,6)\r\n    print &#39;{0} {2} {1} {2} {3} {2} {4} {2}&#39;.format(*tu)\r\n\r\nresult\r\n\r\n\r\n    12 22222 45 22222 103 22222 6 22222\r\n\r\nVery useful.\r\n\r\nAnother point: `format()`, being a function, can be used as an argument in other functions: \r\n\r\n    li = [12,45,78,784,2,69,1254,4785,984]\r\n    print map(&#39;the number is {}&#39;.format,li)   \r\n    \r\n    print\r\n    \r\n    from datetime import datetime,timedelta\r\n    \r\n    once_upon_a_time = datetime(2010, 7, 1, 12, 0, 0)\r\n    delta = timedelta(days=13, hours=8,  minutes=20)\r\n    \r\n    gen =(once_upon_a_time +x*delta for x in xrange(20))\r\n    \r\n    print &#39;\\n&#39;.join(map(&#39;{:%Y-%m-%d %H:%M:%S}&#39;.format, gen))\r\n\r\n\r\nResults in:\r\n\r\n    [&#39;the number is 12&#39;, &#39;the number is 45&#39;, &#39;the number is 78&#39;, &#39;the number is 784&#39;, &#39;the number is 2&#39;, &#39;the number is 69&#39;, &#39;the number is 1254&#39;, &#39;the number is 4785&#39;, &#39;the number is 984&#39;]\r\n    \r\n    2010-07-01 12:00:00\r\n    2010-07-14 20:20:00\r\n    2010-07-28 04:40:00\r\n    2010-08-10 13:00:00\r\n    2010-08-23 21:20:00\r\n    2010-09-06 05:40:00\r\n    2010-09-19 14:00:00\r\n    2010-10-02 22:20:00\r\n    2010-10-16 06:40:00\r\n    2010-10-29 15:00:00\r\n    2010-11-11 23:20:00\r\n    2010-11-25 07:40:00\r\n    2010-12-08 16:00:00\r\n    2010-12-22 00:20:00\r\n    2011-01-04 08:40:00\r\n    2011-01-17 17:00:00\r\n    2011-01-31 01:20:00\r\n    2011-02-13 09:40:00\r\n    2011-02-26 18:00:00\r\n    2011-03-12 02:20:00","body":"<p>Something that the modulo operator ( % ) can't do, afaik:<\/p>\n\n<pre><code>tu = (12,45,22222,103,6)\nprint '{0} {2} {1} {2} {3} {2} {4} {2}'.format(*tu)\n<\/code><\/pre>\n\n<p>result<\/p>\n\n<pre><code>12 22222 45 22222 103 22222 6 22222\n<\/code><\/pre>\n\n<p>Very useful.<\/p>\n\n<p>Another point: <code>format()<\/code>, being a function, can be used as an argument in other functions: <\/p>\n\n<pre><code>li = [12,45,78,784,2,69,1254,4785,984]\nprint map('the number is {}'.format,li)   \n\nprint\n\nfrom datetime import datetime,timedelta\n\nonce_upon_a_time = datetime(2010, 7, 1, 12, 0, 0)\ndelta = timedelta(days=13, hours=8,  minutes=20)\n\ngen =(once_upon_a_time +x*delta for x in xrange(20))\n\nprint '\\n'.join(map('{:%Y-%m-%d %H:%M:%S}'.format, gen))\n<\/code><\/pre>\n\n<p>Results in:<\/p>\n\n<pre><code>['the number is 12', 'the number is 45', 'the number is 78', 'the number is 784', 'the number is 2', 'the number is 69', 'the number is 1254', 'the number is 4785', 'the number is 984']\n\n2010-07-01 12:00:00\n2010-07-14 20:20:00\n2010-07-28 04:40:00\n2010-08-10 13:00:00\n2010-08-23 21:20:00\n2010-09-06 05:40:00\n2010-09-19 14:00:00\n2010-10-02 22:20:00\n2010-10-16 06:40:00\n2010-10-29 15:00:00\n2010-11-11 23:20:00\n2010-11-25 07:40:00\n2010-12-08 16:00:00\n2010-12-22 00:20:00\n2011-01-04 08:40:00\n2011-01-17 17:00:00\n2011-01-31 01:20:00\n2011-02-13 09:40:00\n2011-02-26 18:00:00\n2011-03-12 02:20:00\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":4029140,"reputation":4927,"user_id":3316017,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/4a42d738e212790e81a0318c178ff78e?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"Kishan B","link":"https:\/\/stackoverflow.com\/users\/3316017\/kishan-b"},"is_accepted":false,"score":318,"last_activity_date":1650491242,"last_edit_date":1650491242.0,"creation_date":1517630771,"answer_id":48593823,"question_id":8384737,"content_license":"CC BY-SA 4.0","body_markdown":"In python 3.4 or later, with **`pathlib.Path`**:\r\n\r\n    &gt;&gt;&gt; from pathlib import Path    \r\n    &gt;&gt;&gt; Path(&quot;\/tmp\/d\/a.dat&quot;).name\r\n    &#39;a.dat&#39;\r\n\r\nThe `.name` property will give the full name of the final child element in the path, regardless of whether it is a file or a folder.","body":"<p>In python 3.4 or later, with <strong><code>pathlib.Path<\/code><\/strong>:<\/p>\n<pre><code>&gt;&gt;&gt; from pathlib import Path    \n&gt;&gt;&gt; Path(&quot;\/tmp\/d\/a.dat&quot;).name\n'a.dat'\n<\/code><\/pre>\n<p>The <code>.name<\/code> property will give the full name of the final child element in the path, regardless of whether it is a file or a folder.<\/p>\n","community_owned_date":null},{"owner":{"account_id":7094,"reputation":43656,"user_id":12166,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/8ae44dc366eacfc7e7eede0ae0ac065c?s=256&d=identicon&r=PG","display_name":"Rafa\u0142 Dowgird","link":"https:\/\/stackoverflow.com\/users\/12166\/rafa%c5%82-dowgird"},"is_accepted":false,"score":316,"last_activity_date":1302472470,"last_edit_date":1302472470.0,"creation_date":1221830299,"answer_id":101739,"question_id":101268,"content_license":"CC BY-SA 3.0","body_markdown":"[Sending values into generator functions](http:\/\/www.python.org\/dev\/peps\/pep-0342\/). For example having this function:\r\n\r\n    def mygen():\r\n        &quot;&quot;&quot;Yield 5 until something else is passed back via send()&quot;&quot;&quot;\r\n        a = 5\r\n        while True:\r\n            f = (yield a) #yield a and possibly get f in return\r\n            if f is not None: \r\n                a = f  #store the new value\r\nYou can:\r\n\r\n    &gt;&gt;&gt; g = mygen()\r\n    &gt;&gt;&gt; g.next()\r\n    5\r\n    &gt;&gt;&gt; g.next()\r\n    5\r\n    &gt;&gt;&gt; g.send(7)  #we send this back to the generator\r\n    7\r\n    &gt;&gt;&gt; g.next() #now it will yield 7 until we send something else\r\n    7\r\n\r\n","body":"<p><a href=\"http:\/\/www.python.org\/dev\/peps\/pep-0342\/\" rel=\"nofollow noreferrer\">Sending values into generator functions<\/a>. For example having this function:<\/p>\n\n<pre><code>def mygen():\n    \"\"\"Yield 5 until something else is passed back via send()\"\"\"\n    a = 5\n    while True:\n        f = (yield a) #yield a and possibly get f in return\n        if f is not None: \n            a = f  #store the new value\n<\/code><\/pre>\n\n<p>You can:<\/p>\n\n<pre><code>&gt;&gt;&gt; g = mygen()\n&gt;&gt;&gt; g.next()\n5\n&gt;&gt;&gt; g.next()\n5\n&gt;&gt;&gt; g.send(7)  #we send this back to the generator\n7\n&gt;&gt;&gt; g.next() #now it will yield 7 until we send something else\n7\n<\/code><\/pre>\n","community_owned_date":1222009237.0},{"owner":{"account_id":35556,"reputation":117234,"user_id":100754,"user_type":"registered","accept_rate":90,"profile_image":"https:\/\/i.stack.imgur.com\/g9hlb.jpg?s=256&g=1","display_name":"Sinan &#220;n&#252;r","link":"https:\/\/stackoverflow.com\/users\/100754\/sinan-%c3%9cn%c3%bcr"},"is_accepted":false,"score":313,"last_activity_date":1679765873,"last_edit_date":1679765873.0,"creation_date":1268351557,"answer_id":2429515,"question_id":2429511,"content_license":"CC BY-SA 4.0","body_markdown":"That is called the [shebang line](http:\/\/www.in-ulm.de\/~mascheck\/various\/shebang\/). As the [Wikipedia entry explains](http:\/\/en.wikipedia.org\/wiki\/Shebang_%28Unix%29):\r\n\r\n&gt; In computing, a shebang (also called a hashbang, hashpling, pound bang, or crunchbang) refers to the characters &quot;#!&quot; when they are the first two characters in an interpreter directive as the first line of a text file. In a Unix-like  operating system, the program loader takes the presence of these two characters as an indication that the file is a script, and tries to execute that script using the interpreter  specified by the rest of the first line in the file.\r\n\r\nSee also the [Unix FAQ entry](http:\/\/www.faqs.org\/faqs\/unix-faq\/faq\/part3\/section-16.html).\r\n\r\nEven on Windows, where the shebang line does not determine the interpreter to be run, you can pass options to the interpreter by specifying them on the shebang line. I find it useful to keep a generic shebang line in one-off scripts (such as the ones I write when answering questions on Stack&amp;nbsp;Overflow), so I can quickly test them on both Windows and [Arch Linux](http:\/\/www.archlinux.org\/).\r\n\r\nThe [env utility](http:\/\/ss64.com\/bash\/env.html) allows you to invoke a command on the path:\r\n\r\n&gt; The first remaining argument specifies the program name to invoke; it is searched for according to the `PATH` environment variable. Any remaining arguments are passed as arguments to that program.\r\n\r\n\r\n","body":"<p>That is called the <a href=\"http:\/\/www.in-ulm.de\/%7Emascheck\/various\/shebang\/\" rel=\"noreferrer\">shebang line<\/a>. As the <a href=\"http:\/\/en.wikipedia.org\/wiki\/Shebang_%28Unix%29\" rel=\"noreferrer\">Wikipedia entry explains<\/a>:<\/p>\n<blockquote>\n<p>In computing, a shebang (also called a hashbang, hashpling, pound bang, or crunchbang) refers to the characters &quot;#!&quot; when they are the first two characters in an interpreter directive as the first line of a text file. In a Unix-like  operating system, the program loader takes the presence of these two characters as an indication that the file is a script, and tries to execute that script using the interpreter  specified by the rest of the first line in the file.<\/p>\n<\/blockquote>\n<p>See also the <a href=\"http:\/\/www.faqs.org\/faqs\/unix-faq\/faq\/part3\/section-16.html\" rel=\"noreferrer\">Unix FAQ entry<\/a>.<\/p>\n<p>Even on Windows, where the shebang line does not determine the interpreter to be run, you can pass options to the interpreter by specifying them on the shebang line. I find it useful to keep a generic shebang line in one-off scripts (such as the ones I write when answering questions on Stack\u00a0Overflow), so I can quickly test them on both Windows and <a href=\"http:\/\/www.archlinux.org\/\" rel=\"noreferrer\">Arch Linux<\/a>.<\/p>\n<p>The <a href=\"http:\/\/ss64.com\/bash\/env.html\" rel=\"noreferrer\">env utility<\/a> allows you to invoke a command on the path:<\/p>\n<blockquote>\n<p>The first remaining argument specifies the program name to invoke; it is searched for according to the <code>PATH<\/code> environment variable. Any remaining arguments are passed as arguments to that program.<\/p>\n<\/blockquote>\n","community_owned_date":null}]
[
    {
        "owner": {
            "account_id": 11077,
            "reputation": 4866,
            "user_id": 21204,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/311a952915f46ae361492e7aa302e79d?s=256&d=identicon&r=PG",
            "display_name": "J.J.",
            "link": "https:\/\/stackoverflow.com\/users\/21204\/j-j"
        },
        "is_accepted": true,
        "score": 47,
        "last_activity_date": 1399473195,
        "last_edit_date": 1399473195.0,
        "creation_date": 1222287848,
        "answer_id": 129714,
        "question_id": 129607,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Dynamic Scoping. It is a neat concept. Many people don&#39;t use it, or understand it.\r\n\r\nBasically think of `my` as creating and anchoring a variable to one block of {}, A.K.A. scope.\r\n\r\n    my $foo if (true); # $foo lives and dies within the if statement.\r\n\r\nSo a `my` variable is what you are used to. whereas with dynamic scoping $var can be declared anywhere and used anywhere.\r\nSo with `local` you basically suspend the use of that global variable, and use a &quot;local value&quot; to work with it. So `local` creates a temporary scope for a temporary variable.\r\n\r\n    $var = 4;\r\n    print $var, &quot;\\n&quot;;\r\n    &amp;hello;\r\n    print $var, &quot;\\n&quot;;\r\n    \r\n    # subroutines\r\n    sub hello {\r\n         local $var = 10;\r\n         print $var, &quot;\\n&quot;;\r\n         &amp;gogo; # calling subroutine gogo\r\n         print $var, &quot;\\n&quot;;\r\n    }\r\n    sub gogo {\r\n         $var ++;\r\n    }\r\n\r\nThis should print:\r\n\r\n    4\r\n    10\r\n    11\r\n    4\r\n",
        "body": "<p>Dynamic Scoping. It is a neat concept. Many people don't use it, or understand it.<\/p>\n\n<p>Basically think of <code>my<\/code> as creating and anchoring a variable to one block of {}, A.K.A. scope.<\/p>\n\n<pre><code>my $foo if (true); # $foo lives and dies within the if statement.\n<\/code><\/pre>\n\n<p>So a <code>my<\/code> variable is what you are used to. whereas with dynamic scoping $var can be declared anywhere and used anywhere.\nSo with <code>local<\/code> you basically suspend the use of that global variable, and use a \"local value\" to work with it. So <code>local<\/code> creates a temporary scope for a temporary variable.<\/p>\n\n<pre><code>$var = 4;\nprint $var, \"\\n\";\n&amp;hello;\nprint $var, \"\\n\";\n\n# subroutines\nsub hello {\n     local $var = 10;\n     print $var, \"\\n\";\n     &amp;gogo; # calling subroutine gogo\n     print $var, \"\\n\";\n}\nsub gogo {\n     $var ++;\n}\n<\/code><\/pre>\n\n<p>This should print:<\/p>\n\n<pre><code>4\n10\n11\n4\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 20661,
            "reputation": 4104,
            "user_id": 49604,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/9db0544be31c439238e02b7b5894e4bc?s=256&d=identicon&r=PG",
            "display_name": "Ronald Blaschke",
            "link": "https:\/\/stackoverflow.com\/users\/49604\/ronald-blaschke"
        },
        "is_accepted": true,
        "score": 47,
        "last_activity_date": 1396887633,
        "last_edit_date": 1396887633.0,
        "creation_date": 1232740327,
        "answer_id": 474248,
        "question_id": 473666,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "No, there isn&#39;t a built-in enum construct.  Perl doesn&#39;t do a lot of strict typing, so I think there&#39;s actually little need for one.\r\n\r\nIn my opinion, the [`Readonly`][Readonly] approach you used is solid.\r\n\r\nThere&#39;s also the more traditional [`constant`][constant] pragma.\r\n\r\n    use constant {\r\n        HOME   =&gt; &#39;Home&#39;,\r\n        WORK   =&gt; &#39;Work&#39;,\r\n        MOBILE =&gt; &#39;Mobile&#39;,\r\n    };\r\n    \r\n    $phone_number-&gt;{type} = HOME;\r\n\r\nBehind the scenes, it sets up a function for each constant that returns the value, like so.\r\n\r\n    sub HOME () { &#39;Home&#39; }\r\n\r\nI&#39;d stick with [`Readonly`][Readonly] unless you want to take advantage of that property, for example:\r\n\r\n    package Phone::Type;\r\n\r\n    use constant {\r\n        HOME =&gt; &#39;Home&#39;,\r\n        #...\r\n    };\r\n\r\n    package main;\r\n\r\n    print Phone::Type-&gt;HOME, &quot;\\n&quot;;\r\n\r\n[Readonly]: https:\/\/metacpan.org\/pod\/Readonly\r\n[Constant]: http:\/\/perldoc.perl.org\/constant.html",
        "body": "<p>No, there isn't a built-in enum construct.  Perl doesn't do a lot of strict typing, so I think there's actually little need for one.<\/p>\n\n<p>In my opinion, the <a href=\"https:\/\/metacpan.org\/pod\/Readonly\" rel=\"noreferrer\"><code>Readonly<\/code><\/a> approach you used is solid.<\/p>\n\n<p>There's also the more traditional <a href=\"http:\/\/perldoc.perl.org\/constant.html\" rel=\"noreferrer\"><code>constant<\/code><\/a> pragma.<\/p>\n\n<pre><code>use constant {\n    HOME   =&gt; 'Home',\n    WORK   =&gt; 'Work',\n    MOBILE =&gt; 'Mobile',\n};\n\n$phone_number-&gt;{type} = HOME;\n<\/code><\/pre>\n\n<p>Behind the scenes, it sets up a function for each constant that returns the value, like so.<\/p>\n\n<pre><code>sub HOME () { 'Home' }\n<\/code><\/pre>\n\n<p>I'd stick with <a href=\"https:\/\/metacpan.org\/pod\/Readonly\" rel=\"noreferrer\"><code>Readonly<\/code><\/a> unless you want to take advantage of that property, for example:<\/p>\n\n<pre><code>package Phone::Type;\n\nuse constant {\n    HOME =&gt; 'Home',\n    #...\n};\n\npackage main;\n\nprint Phone::Type-&gt;HOME, \"\\n\";\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 8008,
            "reputation": 12750,
            "user_id": 14132,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/579c95ecf03cf9f61e5e6637e57feebe?s=256&d=identicon&r=PG",
            "display_name": "moritz",
            "link": "https:\/\/stackoverflow.com\/users\/14132\/moritz"
        },
        "is_accepted": false,
        "score": 46,
        "last_activity_date": 1222290782,
        "last_edit_date": null,
        "creation_date": 1222290782,
        "answer_id": 130027,
        "question_id": 129945,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "Additionally to what others said, `&quot;0 but true&quot;` is special-cased in that it doesn&#39;t warn in numeric context:\r\n\r\n    $ perl -wle &#39;print &quot;0 but true&quot; + 3&#39;\r\n    3\r\n    $ perl -wle &#39;print &quot;0 but crazy&quot; + 3&#39;\r\n    Argument &quot;0 but crazy&quot; isn&#39;t numeric in addition (+) at -e line 1.\r\n    3\r\n",
        "body": "<p>Additionally to what others said, <code>\"0 but true\"<\/code> is special-cased in that it doesn't warn in numeric context:<\/p>\n\n<pre><code>$ perl -wle 'print \"0 but true\" + 3'\n3\n$ perl -wle 'print \"0 but crazy\" + 3'\nArgument \"0 but crazy\" isn't numeric in addition (+) at -e line 1.\n3\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 10538,
            "reputation": 7650,
            "user_id": 19966,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/addc3d0e43d987eec169ca42a79ddaa6?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "bart",
            "link": "https:\/\/stackoverflow.com\/users\/19966\/bart"
        },
        "is_accepted": false,
        "score": 45,
        "last_activity_date": 1226316482,
        "last_edit_date": null,
        "creation_date": 1226316482,
        "answer_id": 277662,
        "question_id": 277485,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "In Perl, you want to use the &quot;x&quot; operator.\r\n\r\nNote the difference between\r\n\r\n    &quot;4&quot; x 4\r\n\r\nand\r\n\r\n    (&quot;4&quot;) x 4\r\n\r\n\r\nThe former produces a repeated string:\r\n\r\n    &quot;4444&quot;\r\n\r\nthe latter a repeated list:\r\n\r\n    (&quot;4&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;)\r\n\r\n",
        "body": "<p>In Perl, you want to use the \"x\" operator.<\/p>\n\n<p>Note the difference between<\/p>\n\n<pre><code>\"4\" x 4\n<\/code><\/pre>\n\n<p>and<\/p>\n\n<pre><code>(\"4\") x 4\n<\/code><\/pre>\n\n<p>The former produces a repeated string:<\/p>\n\n<pre><code>\"4444\"\n<\/code><\/pre>\n\n<p>the latter a repeated list:<\/p>\n\n<pre><code>(\"4\", \"4\", \"4\", \"4\")\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 25003,
            "reputation": 594,
            "user_id": 63972,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/b8a9f825a0c781fc901cff225bf44743?s=256&d=identicon&r=PG",
            "display_name": "XenF",
            "link": "https:\/\/stackoverflow.com\/users\/63972\/xenf"
        },
        "is_accepted": true,
        "score": 45,
        "last_activity_date": 1234436268,
        "last_edit_date": null,
        "creation_date": 1234436268,
        "answer_id": 540831,
        "question_id": 540640,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "I had a similar problem, where I couldn&#39;t even install local::lib\r\n\r\nI created an installer that installed the module somewhere relative to the .pl files\r\n\r\nThe install goes like:\r\n\r\n    perl Makefile.PL PREFIX=.\/modulos\r\n    make\r\n    make install\r\n\r\nThen, in the .pl file that requires the module, which is in .\/\r\n\r\n    use lib qw(.\/modulos\/share\/perl\/5.8.8\/); # You may need to change this path\r\n    use module::name;\r\n\r\nThe rest of the files (makefile.pl, module.pm, etc) require no changes.\r\n\r\nYou can call the .pl file with just\r\n\r\n    perl file.pl\r\n\r\n\r\n",
        "body": "<p>I had a similar problem, where I couldn't even install local::lib<\/p>\n\n<p>I created an installer that installed the module somewhere relative to the .pl files<\/p>\n\n<p>The install goes like:<\/p>\n\n<pre><code>perl Makefile.PL PREFIX=.\/modulos\nmake\nmake install\n<\/code><\/pre>\n\n<p>Then, in the .pl file that requires the module, which is in .\/<\/p>\n\n<pre><code>use lib qw(.\/modulos\/share\/perl\/5.8.8\/); # You may need to change this path\nuse module::name;\n<\/code><\/pre>\n\n<p>The rest of the files (makefile.pl, module.pm, etc) require no changes.<\/p>\n\n<p>You can call the .pl file with just<\/p>\n\n<pre><code>perl file.pl\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 12879,
            "reputation": 2558,
            "user_id": 25586,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/0b32f4322859bc26ab28b14e079336fa?s=256&d=identicon&r=PG",
            "display_name": "Bklyn",
            "link": "https:\/\/stackoverflow.com\/users\/25586\/bklyn"
        },
        "is_accepted": false,
        "score": 45,
        "last_activity_date": 1506792118,
        "last_edit_date": 1506792118.0,
        "creation_date": 1240236936,
        "answer_id": 768448,
        "question_id": 766397,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "If you don&#39;t have [Proc::Daemon][1] as suggested by Chas. Owens, here&#39;s how you&#39;d do it by hand:\r\n\r\n    sub daemonize {\r\n       use POSIX;\r\n       POSIX::setsid or die &quot;setsid: $!&quot;;\r\n       my $pid = fork() \/\/ die $!; #\/\/\r\n       exit(0) if $pid;\r\n\r\n       chdir &quot;\/&quot;;\r\n       umask 0;\r\n       for (0 .. (POSIX::sysconf (&amp;POSIX::_SC_OPEN_MAX) || 1024))\r\n          { POSIX::close $_ }\r\n       open (STDIN, &quot;&lt;\/dev\/null&quot;);\r\n       open (STDOUT, &quot;&gt;\/dev\/null&quot;);\r\n       open (STDERR, &quot;&gt;&amp;STDOUT&quot;);\r\n     }\r\n\r\n\r\n  [1]: http:\/\/search.cpan.org\/dist\/Proc-Daemon\/Daemon.pm &quot;Proc::Daemon&quot;",
        "body": "<p>If you don't have <a href=\"http:\/\/search.cpan.org\/dist\/Proc-Daemon\/Daemon.pm\" rel=\"noreferrer\" title=\"Proc::Daemon\">Proc::Daemon<\/a> as suggested by Chas. Owens, here's how you'd do it by hand:<\/p>\n\n<pre><code>sub daemonize {\n   use POSIX;\n   POSIX::setsid or die \"setsid: $!\";\n   my $pid = fork() \/\/ die $!; #\/\/\n   exit(0) if $pid;\n\n   chdir \"\/\";\n   umask 0;\n   for (0 .. (POSIX::sysconf (&amp;POSIX::_SC_OPEN_MAX) || 1024))\n      { POSIX::close $_ }\n   open (STDIN, \"&lt;\/dev\/null\");\n   open (STDOUT, \"&gt;\/dev\/null\");\n   open (STDERR, \"&gt;&amp;STDOUT\");\n }\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 17881,
            "reputation": 53314,
            "user_id": 40468,
            "user_type": "registered",
            "accept_rate": 60,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/43722cb1e955874a8eb721e9dfe101d1?s=256&d=identicon&r=PG",
            "display_name": "Ether",
            "link": "https:\/\/stackoverflow.com\/users\/40468\/ether"
        },
        "is_accepted": false,
        "score": 45,
        "last_activity_date": 1458754896,
        "last_edit_date": 1458754896.0,
        "creation_date": 1432945975,
        "answer_id": 30540984,
        "question_id": 260593,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "    cpan install App::cpanminus\r\n    cpanm Your::Module@1.23\r\n\r\n(Carton, as referenced in other answers, uses `cpanm` underneath to resolve explicit version requirements.)",
        "body": "<pre><code>cpan install App::cpanminus\ncpanm Your::Module@1.23\n<\/code><\/pre>\n\n<p>(Carton, as referenced in other answers, uses <code>cpanm<\/code> underneath to resolve explicit version requirements.)<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 6209,
            "reputation": 1250,
            "user_id": 10356,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/9350edf759bbbb500ccdf76c82f5425d?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "Yanick",
            "link": "https:\/\/stackoverflow.com\/users\/10356\/yanick"
        },
        "is_accepted": false,
        "score": 44,
        "last_activity_date": 1392251206,
        "last_edit_date": 1392251206.0,
        "creation_date": 1224685185,
        "answer_id": 225944,
        "question_id": 223393,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Although &#39;length()&#39; is the correct answer that should be used in any sane code, [Abigail&#39;s length horror][1] should be mentioned, if only for the sake of Perl lore. \r\n\r\nBasically, the trick consists of using the return value of the catch-all transliteration operator:\r\n\r\n    print &quot;foo&quot; =~ y===c;   # prints 3\r\n\r\ny\/\/\/c replaces all characters with themselves (thanks to the complement option &#39;c&#39;), and returns the number of character replaced (so, effectively, the length of the string).\r\n\r\n\r\n  [1]: https:\/\/web.archive.org\/web\/20071024192714\/http:\/\/www.perlfoundation.org\/perl5\/index.cgi?abigail_s_length_horror",
        "body": "<p>Although 'length()' is the correct answer that should be used in any sane code, <a href=\"https:\/\/web.archive.org\/web\/20071024192714\/http:\/\/www.perlfoundation.org\/perl5\/index.cgi?abigail_s_length_horror\" rel=\"noreferrer\">Abigail's length horror<\/a> should be mentioned, if only for the sake of Perl lore. <\/p>\n\n<p>Basically, the trick consists of using the return value of the catch-all transliteration operator:<\/p>\n\n<pre><code>print \"foo\" =~ y===c;   # prints 3\n<\/code><\/pre>\n\n<p>y\/\/\/c replaces all characters with themselves (thanks to the complement option 'c'), and returns the number of character replaced (so, effectively, the length of the string).<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 9417,
            "reputation": 96497,
            "user_id": 17389,
            "user_type": "registered",
            "accept_rate": 38,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/cd06d1314817ce946ab796af8750b56a?s=256&d=identicon&r=PG",
            "display_name": "ysth",
            "link": "https:\/\/stackoverflow.com\/users\/17389\/ysth"
        },
        "is_accepted": false,
        "score": 44,
        "last_activity_date": 1249545402,
        "last_edit_date": 1249545402.0,
        "creation_date": 1249541425,
        "answer_id": 1237313,
        "question_id": 1237286,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "[pp](http:\/\/search.cpan.org\/perldoc\/pp) can create an executable that includes perl and your script (and any module dependencies), but it will be specific to your architecture, so you couldn&#39;t run it on both Windows and linux for instance.\r\n\r\nFrom its doc:\r\n\r\n&gt; To make a stand-alone executable, suitable for running on a machine that doesn&#39;t have perl installed:\r\n&gt;\r\n&gt;        % pp -o packed.exe source.pl        # makes packed.exe\r\n&gt;        # Now, deploy &#39;packed.exe&#39; to target machine...\r\n&gt;        $ packed.exe                        # run it\r\n\r\n(% and $ there are command prompts on different machines).",
        "body": "<p><a href=\"http:\/\/search.cpan.org\/perldoc\/pp\" rel=\"noreferrer\">pp<\/a> can create an executable that includes perl and your script (and any module dependencies), but it will be specific to your architecture, so you couldn't run it on both Windows and linux for instance.<\/p>\n\n<p>From its doc:<\/p>\n\n<blockquote>\n  <p>To make a stand-alone executable, suitable for running on a machine that doesn't have perl installed:<\/p>\n\n<pre><code>   % pp -o packed.exe source.pl        # makes packed.exe\n   # Now, deploy 'packed.exe' to target machine...\n   $ packed.exe                        # run it\n<\/code><\/pre>\n<\/blockquote>\n\n<p>(% and $ there are command prompts on different machines).<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1241689,
            "reputation": 172719,
            "user_id": 1204143,
            "user_type": "registered",
            "accept_rate": 64,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/5ca341b160687d99b1317859f91054ee?s=256&d=identicon&r=PG",
            "display_name": "nneonneo",
            "link": "https:\/\/stackoverflow.com\/users\/1204143\/nneonneo"
        },
        "is_accepted": true,
        "score": 44,
        "last_activity_date": 1349926888,
        "last_edit_date": 1349926888.0,
        "creation_date": 1349924017,
        "answer_id": 12831475,
        "question_id": 12831417,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "I think you can just do something like\r\n\r\n    grep -ri -m1 --include &#39;*.coffee&#39; &#39;re&#39; . | head -n 2\r\n\r\nto e.g. pick the first match from each file, and pick at most two matches total.\r\n\r\nNote that this requires your `grep` to treat `-m` as a per-file match limit; GNU `grep` does do this, but BSD `grep` apparently treats it as a global match limit. ",
        "body": "<p>I think you can just do something like<\/p>\n\n<pre><code>grep -ri -m1 --include '*.coffee' 're' . | head -n 2\n<\/code><\/pre>\n\n<p>to e.g. pick the first match from each file, and pick at most two matches total.<\/p>\n\n<p>Note that this requires your <code>grep<\/code> to treat <code>-m<\/code> as a per-file match limit; GNU <code>grep<\/code> does do this, but BSD <code>grep<\/code> apparently treats it as a global match limit. <\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4721,
            "reputation": 68421,
            "user_id": 7231,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/81b76985f3985e35492e25880493d045?s=256&d=identicon&r=PG",
            "display_name": "Dave Cross",
            "link": "https:\/\/stackoverflow.com\/users\/7231\/dave-cross"
        },
        "is_accepted": false,
        "score": 44,
        "last_activity_date": 1464626268,
        "last_edit_date": 1464626268.0,
        "creation_date": 1367930166,
        "answer_id": 16419225,
        "question_id": 5733808,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "The HTTP\/CGI way to do this would be for your program to return an HTTP status code of 204 (No Content).",
        "body": "<p>The HTTP\/CGI way to do this would be for your program to return an HTTP status code of 204 (No Content).<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 6924,
            "reputation": 2985,
            "user_id": 11800,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/d37a63484d9878cf6c07dcc08adda9e2?s=256&d=identicon&r=PG",
            "display_name": "xdg",
            "link": "https:\/\/stackoverflow.com\/users\/11800\/xdg"
        },
        "is_accepted": false,
        "score": 43,
        "last_activity_date": 1222033693,
        "last_edit_date": 1222033693.0,
        "creation_date": 1221950915,
        "answer_id": 109672,
        "question_id": 109124,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "(**Update**: I updated the API for IO::CaptureOutput to make this even easier.)\r\n\r\nThere are several ways to do this.  Here&#39;s one option, using the [IO::CaptureOutput](http:\/\/search.cpan.org\/perldoc?IO::CaptureOutput) module:\r\n\r\n    use IO::CaptureOutput qw\/capture_exec\/;\r\n\r\n    my ($stdout, $stderr, $success, $exit_code) = capture_exec( @cmd );\r\n\r\nThis is the capture_exec() function, but IO::CaptureOutput also has a more general capture() function that can be used to capture either Perl output or output from external programs.  So if some Perl module happens to use some external program, you still get the output.\r\n\r\nIt also means you only need to remember one single approach to capturing STDOUT and STDERR (or merging them) instead of using IPC::Open3 for external programs and other modules for capturing Perl output.",
        "body": "<p>(<strong>Update<\/strong>: I updated the API for IO::CaptureOutput to make this even easier.)<\/p>\n\n<p>There are several ways to do this.  Here's one option, using the <a href=\"http:\/\/search.cpan.org\/perldoc?IO::CaptureOutput\" rel=\"noreferrer\">IO::CaptureOutput<\/a> module:<\/p>\n\n<pre><code>use IO::CaptureOutput qw\/capture_exec\/;\n\nmy ($stdout, $stderr, $success, $exit_code) = capture_exec( @cmd );\n<\/code><\/pre>\n\n<p>This is the capture_exec() function, but IO::CaptureOutput also has a more general capture() function that can be used to capture either Perl output or output from external programs.  So if some Perl module happens to use some external program, you still get the output.<\/p>\n\n<p>It also means you only need to remember one single approach to capturing STDOUT and STDERR (or merging them) instead of using IPC::Open3 for external programs and other modules for capturing Perl output.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 29074,
            "reputation": 64398,
            "user_id": 78259,
            "user_type": "registered",
            "accept_rate": 53,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/844c572938eaad1e44eb084fb39416f9?s=256&d=identicon&r=PG",
            "display_name": "Chas. Owens",
            "link": "https:\/\/stackoverflow.com\/users\/78259\/chas-owens"
        },
        "is_accepted": false,
        "score": 43,
        "last_activity_date": 1242654227,
        "last_edit_date": null,
        "creation_date": 1242654227,
        "answer_id": 877806,
        "question_id": 876471,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "Armed with the extra bit of information from ysth, I was able to see the differences in the docs:\r\n\r\nThe [`base`][1] pragma does the following things:\r\n\r\n - adds the named package to `@ISA`\r\n - loads the module with the same name as the named package using [`require`][2] (unless it detects that the package has already been loaded)\r\n - won&#39;t fail if a module with the same name as the package doesn&#39;t exist\r\n - dies if there are no symbols in the named package\r\n - if `$VERSION` does not exist in named package, base sets it to `&quot;-1, set by base.pm&quot;`\r\n - initializes the [`fields`][3] of the named package if they exist\r\n - does not call the import function of the named package\r\n\r\nThe [`parent`][4] pragma does the following things:\r\n\r\n - adds the named package to `@ISA`\r\n - loads the module with the same name as the named package using `require`\r\n - accepts an option that tells it not to die if a module with the same name as the package doesn&#39;t exist\r\n\r\n  [1]: http:\/\/perldoc.perl.org\/base.html\r\n  [2]: http:\/\/perldoc.perl.org\/functions\/require.html\r\n  [3]: http:\/\/perldoc.perl.org\/fields.html\r\n  [4]: http:\/\/search.cpan.org\/dist\/parent\/lib\/parent.pm",
        "body": "<p>Armed with the extra bit of information from ysth, I was able to see the differences in the docs:<\/p>\n\n<p>The <a href=\"http:\/\/perldoc.perl.org\/base.html\" rel=\"noreferrer\"><code>base<\/code><\/a> pragma does the following things:<\/p>\n\n<ul>\n<li>adds the named package to <code>@ISA<\/code><\/li>\n<li>loads the module with the same name as the named package using <a href=\"http:\/\/perldoc.perl.org\/functions\/require.html\" rel=\"noreferrer\"><code>require<\/code><\/a> (unless it detects that the package has already been loaded)<\/li>\n<li>won't fail if a module with the same name as the package doesn't exist<\/li>\n<li>dies if there are no symbols in the named package<\/li>\n<li>if <code>$VERSION<\/code> does not exist in named package, base sets it to <code>\"-1, set by base.pm\"<\/code><\/li>\n<li>initializes the <a href=\"http:\/\/perldoc.perl.org\/fields.html\" rel=\"noreferrer\"><code>fields<\/code><\/a> of the named package if they exist<\/li>\n<li>does not call the import function of the named package<\/li>\n<\/ul>\n\n<p>The <a href=\"http:\/\/search.cpan.org\/dist\/parent\/lib\/parent.pm\" rel=\"noreferrer\"><code>parent<\/code><\/a> pragma does the following things:<\/p>\n\n<ul>\n<li>adds the named package to <code>@ISA<\/code><\/li>\n<li>loads the module with the same name as the named package using <code>require<\/code><\/li>\n<li>accepts an option that tells it not to die if a module with the same name as the package doesn't exist<\/li>\n<\/ul>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 36844,
            "reputation": 5931,
            "user_id": 105170,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/e56145bcdc6133c1bf0a6e5e25d009b3?s=256&d=identicon&r=PG",
            "display_name": "Copas",
            "link": "https:\/\/stackoverflow.com\/users\/105170\/copas"
        },
        "is_accepted": false,
        "score": 43,
        "last_activity_date": 1244593197,
        "last_edit_date": 1244593197.0,
        "creation_date": 1244530264,
        "answer_id": 968533,
        "question_id": 968441,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "I would argue writing C in Perl is a much better situation than writing Perl in C. As is often brought up on the SO podcast, understanding C is a virtue that not all developers (even some good ones) have nowadays. Hire them and buy a copy of [Perl Best Practices][1] for them and you will be set. After best practices a copy of [Intermediate Perl][2] and they could work out.\r\n\r\n\r\n  [1]: http:\/\/www.amazon.com\/Perl-Best-Practices-Damian-Conway\/dp\/0596001738\r\n  [2]: http:\/\/www.amazon.com\/Intermediate-Perl-Randal-L-Schwartz\/dp\/0596102062\/ref=sr_1_3?ie=UTF8&amp;qid=1244530193&amp;sr=1-3",
        "body": "<p>I would argue writing C in Perl is a much better situation than writing Perl in C. As is often brought up on the SO podcast, understanding C is a virtue that not all developers (even some good ones) have nowadays. Hire them and buy a copy of <a href=\"https:\/\/rads.stackoverflow.com\/amzn\/click\/com\/0596001738\" rel=\"noreferrer\" rel=\"nofollow noreferrer\">Perl Best Practices<\/a> for them and you will be set. After best practices a copy of <a href=\"https:\/\/rads.stackoverflow.com\/amzn\/click\/com\/0596102062\" rel=\"noreferrer\" rel=\"nofollow noreferrer\">Intermediate Perl<\/a> and they could work out.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5473,
            "reputation": 130134,
            "user_id": 2766176,
            "user_type": "registered",
            "accept_rate": 61,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/edd8638efe875601bfe394a8aea5b16d?s=256&d=identicon&r=PG",
            "display_name": "brian d foy",
            "link": "https:\/\/stackoverflow.com\/users\/2766176\/brian-d-foy"
        },
        "is_accepted": true,
        "score": 43,
        "last_activity_date": 1430924973,
        "last_edit_date": 1430924973.0,
        "creation_date": 1254436740,
        "answer_id": 1506886,
        "question_id": 1506801,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "You missed the most important, biggest difference between them: `glob` gives you back a list, but `opendir` gives you a directory handle. You can pass that directory handle around to let other objects or subroutines use it. With the directory handle, the subroutine or object doesn&#39;t have to know anything about where it came from, who else is using it, and so on:\r\n\r\n     sub use_any_dir_handle {\r\n          my( $dh ) = @_;\r\n          rewinddir $dh;\r\n          ...do some filtering...\r\n          return \\@files;\r\n          }\r\n\r\nWith the dirhandle, you have a controllable iterator where you can move around with `seekdir`, although with `glob` you just get the next item.\r\n\r\nAs with anything though, the costs and benefits only make sense when applied to a certain context. They do not exist outside of a particular use. You have an excellent list of their differences, but I wouldn&#39;t classify those differences without knowing what you were trying to do with them.\r\n\r\nSome other things to remember:\r\n\r\n* You can implement your own glob with `opendir`, but not the other way around.\r\n\r\n* glob uses its own wildcard syntax, and that&#39;s all you get. \r\n\r\n* glob can return filenames that don&#39;t exist:\r\n\r\n        $ perl -le &#39;print glob &quot;{ab}{cd}&quot;&#39;\r\n\r\n\r\n",
        "body": "<p>You missed the most important, biggest difference between them: <code>glob<\/code> gives you back a list, but <code>opendir<\/code> gives you a directory handle. You can pass that directory handle around to let other objects or subroutines use it. With the directory handle, the subroutine or object doesn't have to know anything about where it came from, who else is using it, and so on:<\/p>\n\n<pre><code> sub use_any_dir_handle {\n      my( $dh ) = @_;\n      rewinddir $dh;\n      ...do some filtering...\n      return \\@files;\n      }\n<\/code><\/pre>\n\n<p>With the dirhandle, you have a controllable iterator where you can move around with <code>seekdir<\/code>, although with <code>glob<\/code> you just get the next item.<\/p>\n\n<p>As with anything though, the costs and benefits only make sense when applied to a certain context. They do not exist outside of a particular use. You have an excellent list of their differences, but I wouldn't classify those differences without knowing what you were trying to do with them.<\/p>\n\n<p>Some other things to remember:<\/p>\n\n<ul>\n<li><p>You can implement your own glob with <code>opendir<\/code>, but not the other way around.<\/p><\/li>\n<li><p>glob uses its own wildcard syntax, and that's all you get. <\/p><\/li>\n<li><p>glob can return filenames that don't exist:<\/p>\n\n<pre><code>$ perl -le 'print glob \"{ab}{cd}\"'\n<\/code><\/pre><\/li>\n<\/ul>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 7105,
            "reputation": 22469,
            "user_id": 12195,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/29cb106071d163d703484e63839d89cb?s=256&d=identicon&r=PG",
            "display_name": "draegtun",
            "link": "https:\/\/stackoverflow.com\/users\/12195\/draegtun"
        },
        "is_accepted": false,
        "score": 43,
        "last_activity_date": 1516911587,
        "last_edit_date": 1516911587.0,
        "creation_date": 1272474722,
        "answer_id": 2731640,
        "question_id": 2731542,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "A useful mnemonic for Perl sigils are:\r\n\r\n* $calar\r\n* @rray\r\n* %ash\r\n\r\n[Matt Trout](http:\/\/www.shadowcat.co.uk\/blog\/matt-s-trout\/) wrote a great comment on [blog.fogus.me](http:\/\/blog.fogus.me\/2009\/02\/26\/devolving-sigils\/) about Perl sigils which I think is useful so have pasted below:\r\n\r\n&gt; Actually, perl sigils don\u2019t denote variable type \u2013 they denote conjugation \u2013 $ is \u2018the\u2019, @ is \r\n&gt; \u2018these\u2019, % is \u2018map of\u2019 or so \u2013 variable type is denoted via [] or {}. You can see this with:\r\n&gt;\r\n\tmy $foo = &#39;foo&#39;;\r\n\tmy @foo = (&#39;zero&#39;, &#39;one&#39;, &#39;two&#39;);\r\n\tmy $second_foo = $foo[1];\r\n\tmy @first_and_third_foos = @foo[0,2];\r\n\tmy %foo = (key1 =&gt; &#39;value1&#39;, key2 =&gt; &#39;value2&#39;, key3 =&gt; &#39;value3&#39;);\r\n\tmy $key2_foo = $foo{key2};\r\n\tmy ($key1_foo, $key3_foo) = @foo{&#39;key1&#39;,&#39;key3&#39;};\r\n\r\n&gt; so looking at the sigil when skimming perl code tells you what you\u2019re going to -get- rather \r\n&gt; than what you\u2019re operating on, pretty much.\r\n&gt;\r\n&gt; This is, admittedly, really confusing until you get used to it, but once you -are- used to it \r\n&gt; it can be an extremely useful tool for absorbing information while skimming code.\r\n&gt;\r\n&gt; You\u2019re still perfectly entitled to hate it, of course, but it\u2019s an interesting concept and I \r\n&gt; figure you might prefer to hate what\u2019s -actually- going on rather than what you thought was \r\n&gt; going on :) ",
        "body": "<p>A useful mnemonic for Perl sigils are:<\/p>\n\n<ul>\n<li>$calar<\/li>\n<li>@rray<\/li>\n<li>%ash<\/li>\n<\/ul>\n\n<p><a href=\"http:\/\/www.shadowcat.co.uk\/blog\/matt-s-trout\/\" rel=\"noreferrer\">Matt Trout<\/a> wrote a great comment on <a href=\"http:\/\/blog.fogus.me\/2009\/02\/26\/devolving-sigils\/\" rel=\"noreferrer\">blog.fogus.me<\/a> about Perl sigils which I think is useful so have pasted below:<\/p>\n\n<blockquote>\n  <p>Actually, perl sigils don\u2019t denote variable type \u2013 they denote conjugation \u2013 $ is \u2018the\u2019, @ is \n  \u2018these\u2019, % is \u2018map of\u2019 or so \u2013 variable type is denoted via [] or {}. You can see this with:<\/p>\n\n<pre><code>my $foo = 'foo';\nmy @foo = ('zero', 'one', 'two');\nmy $second_foo = $foo[1];\nmy @first_and_third_foos = @foo[0,2];\nmy %foo = (key1 =&gt; 'value1', key2 =&gt; 'value2', key3 =&gt; 'value3');\nmy $key2_foo = $foo{key2};\nmy ($key1_foo, $key3_foo) = @foo{'key1','key3'};\n<\/code><\/pre>\n  \n  <p>so looking at the sigil when skimming perl code tells you what you\u2019re going to -get- rather \n  than what you\u2019re operating on, pretty much.<\/p>\n  \n  <p>This is, admittedly, really confusing until you get used to it, but once you -are- used to it \n  it can be an extremely useful tool for absorbing information while skimming code.<\/p>\n  \n  <p>You\u2019re still perfectly entitled to hate it, of course, but it\u2019s an interesting concept and I \n  figure you might prefer to hate what\u2019s -actually- going on rather than what you thought was \n  going on :) <\/p>\n<\/blockquote>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 8423,
            "reputation": 736751,
            "user_id": 15168,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/i.stack.imgur.com\/WtEI9.png?s=256&g=1",
            "display_name": "Jonathan Leffler",
            "link": "https:\/\/stackoverflow.com\/users\/15168\/jonathan-leffler"
        },
        "is_accepted": false,
        "score": 42,
        "last_activity_date": 1244532626,
        "last_edit_date": 1244532626.0,
        "creation_date": 1244529957,
        "answer_id": 968519,
        "question_id": 968441,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "It isn&#39;t dreadfully idiomatic Perl, but it isn&#39;t completely dreadful Perl either (though it could be much more compact).\r\n\r\nTwo warning bells - the shebang line doesn&#39;t include &#39;`-w`&#39; and there is neither &#39;`use strict;`&#39; nor &#39;`use warnings;`&#39;.  This is very old-style Perl; good Perl code uses both warnings and strict.\r\n\r\nThe use of old-style file handles is no longer recommended, but it isn&#39;t automatically bad (it could be code written more than 10 years ago, perhaps).\r\n\r\nThe non-use of regular expressions is a bit more surprising.  For example:\r\n\r\n    # Process every field in line.\r\n    while ($line ne &quot;&quot;) {\r\n        # Skip spaces and start with empty field.\r\n\r\n        if (substr ($line,0,1) eq &quot; &quot;) {\r\n            $line = substr ($line,1);\r\n            next;\r\n        }\r\n\r\nThat could be written:\r\n\r\n    while ($line ne &quot;&quot;) {\r\n        $line =~ s\/^\\s+\/\/;\r\n\r\nThis chops off all leading spaces using a regex, without making the code iterate around the loop.  A good deal of the rest of the code would benefit from carefully written regular expressions too.  These are a characteristically Perl idiom; it is surprising to see that they are not being used.\r\n\r\nIf efficiency was the proclaimed concern (reason for not using regexes), then the questions should be &quot;did you measure it&quot; and &quot;what sort of efficiency are you discussing - machine, or programmer&quot;?\r\n\r\nWorking code counts.  More or less idiomatic code is better.\r\n\r\nAlso, of course, there are modules Text::CSV and Text::CSV_XS that could be used to handle CSV parsing.  It would be interesting to enquire whether they are aware of Perl modules.\r\n\r\n&lt;hr&gt;\r\n\r\nThere are also multiple notations for handling quotes within quoted fields.  The code appears to assume that backslash-quote is appropriate; I believe Excel uses doubled up quotes:\r\n\r\n    &quot;He said, &quot;&quot;Don&#39;t do it&quot;&quot;, but they didn&#39;t listen&quot;\r\n\r\nThis could be matched by:\r\n\r\n    $line =~ \/^&quot;([^&quot;]|&quot;&quot;)*&quot;\/;\r\n\r\nWith a bit of care, you could capture just the text between the enclosing quotes.  You&#39;d still have to post-process the captured text to remove the embedded doubled up quotes.\r\n\r\nA non-quoted field would be matched by:\r\n\r\n    $line =~ \/^([^,]*)(?:,|$)\/;\r\n\r\nThis is enormously shorter than the looping and substringing shown.\r\n\r\n&lt;hr&gt;\r\n\r\nHere&#39;s a version of the code, using the backslash-double quote escape mechanism used in the code in the question, that does the same job.\r\n\r\n    #!\/usr\/bin\/perl -w\r\n    \r\n    use strict;\r\n    \r\n    open (IN, &quot;qq.in&quot;) || die &quot;Cannot open qq.in&quot;;\r\n    \r\n    while (my $line = &lt;IN&gt;) {\r\n        chomp $line;\r\n        print &quot;$line\\n&quot;;\r\n    \r\n        while ($line ne &quot;&quot;) {\r\n            $line =~ s\/^\\s+\/\/;\r\n            my $field = &quot;&quot;;\r\n            if ($line =~ m\/^&quot;((?:[^&quot;]|\\\\.)*)&quot;([^,]*)(?:,|$)\/) {\r\n                # Quoted field\r\n                $field = &quot;$1$2&quot;;\r\n                $line = substr($line, length($field)+2);\r\n                $field =~ s\/&quot;&quot;\/&quot;\/g;\r\n            }\r\n            elsif ($line =~ m\/^([^,]*)(?:,|$)\/) {\r\n                # Unquoted field\r\n                $field = &quot;$1&quot;;\r\n                $line = substr($line, length($field));\r\n            }\r\n            else {\r\n                print &quot;WTF?? ($line)\\n&quot;;\r\n            }\r\n            $line =~ s\/^,\/\/;\r\n            print &quot;   [$field]\\n&quot;;\r\n        }\r\n    }\r\n    close (IN);\r\n\r\nIt&#39;s under 30 non-blank, non-comment lines, compared with about 70 in the original.  The original version is bigger than it needs to be by some margin.  And I&#39;ve not gone out of my way to reduce this code to the minimum possible.\r\n",
        "body": "<p>It isn't dreadfully idiomatic Perl, but it isn't completely dreadful Perl either (though it could be much more compact).<\/p>\n\n<p>Two warning bells - the shebang line doesn't include '<code>-w<\/code>' and there is neither '<code>use strict;<\/code>' nor '<code>use warnings;<\/code>'.  This is very old-style Perl; good Perl code uses both warnings and strict.<\/p>\n\n<p>The use of old-style file handles is no longer recommended, but it isn't automatically bad (it could be code written more than 10 years ago, perhaps).<\/p>\n\n<p>The non-use of regular expressions is a bit more surprising.  For example:<\/p>\n\n<pre><code># Process every field in line.\nwhile ($line ne \"\") {\n    # Skip spaces and start with empty field.\n\n    if (substr ($line,0,1) eq \" \") {\n        $line = substr ($line,1);\n        next;\n    }\n<\/code><\/pre>\n\n<p>That could be written:<\/p>\n\n<pre><code>while ($line ne \"\") {\n    $line =~ s\/^\\s+\/\/;\n<\/code><\/pre>\n\n<p>This chops off all leading spaces using a regex, without making the code iterate around the loop.  A good deal of the rest of the code would benefit from carefully written regular expressions too.  These are a characteristically Perl idiom; it is surprising to see that they are not being used.<\/p>\n\n<p>If efficiency was the proclaimed concern (reason for not using regexes), then the questions should be \"did you measure it\" and \"what sort of efficiency are you discussing - machine, or programmer\"?<\/p>\n\n<p>Working code counts.  More or less idiomatic code is better.<\/p>\n\n<p>Also, of course, there are modules Text::CSV and Text::CSV_XS that could be used to handle CSV parsing.  It would be interesting to enquire whether they are aware of Perl modules.<\/p>\n\n<hr>\n\n<p>There are also multiple notations for handling quotes within quoted fields.  The code appears to assume that backslash-quote is appropriate; I believe Excel uses doubled up quotes:<\/p>\n\n<pre><code>\"He said, \"\"Don't do it\"\", but they didn't listen\"\n<\/code><\/pre>\n\n<p>This could be matched by:<\/p>\n\n<pre><code>$line =~ \/^\"([^\"]|\"\")*\"\/;\n<\/code><\/pre>\n\n<p>With a bit of care, you could capture just the text between the enclosing quotes.  You'd still have to post-process the captured text to remove the embedded doubled up quotes.<\/p>\n\n<p>A non-quoted field would be matched by:<\/p>\n\n<pre><code>$line =~ \/^([^,]*)(?:,|$)\/;\n<\/code><\/pre>\n\n<p>This is enormously shorter than the looping and substringing shown.<\/p>\n\n<hr>\n\n<p>Here's a version of the code, using the backslash-double quote escape mechanism used in the code in the question, that does the same job.<\/p>\n\n<pre><code>#!\/usr\/bin\/perl -w\n\nuse strict;\n\nopen (IN, \"qq.in\") || die \"Cannot open qq.in\";\n\nwhile (my $line = &lt;IN&gt;) {\n    chomp $line;\n    print \"$line\\n\";\n\n    while ($line ne \"\") {\n        $line =~ s\/^\\s+\/\/;\n        my $field = \"\";\n        if ($line =~ m\/^\"((?:[^\"]|\\\\.)*)\"([^,]*)(?:,|$)\/) {\n            # Quoted field\n            $field = \"$1$2\";\n            $line = substr($line, length($field)+2);\n            $field =~ s\/\"\"\/\"\/g;\n        }\n        elsif ($line =~ m\/^([^,]*)(?:,|$)\/) {\n            # Unquoted field\n            $field = \"$1\";\n            $line = substr($line, length($field));\n        }\n        else {\n            print \"WTF?? ($line)\\n\";\n        }\n        $line =~ s\/^,\/\/;\n        print \"   [$field]\\n\";\n    }\n}\nclose (IN);\n<\/code><\/pre>\n\n<p>It's under 30 non-blank, non-comment lines, compared with about 70 in the original.  The original version is bigger than it needs to be by some margin.  And I've not gone out of my way to reduce this code to the minimum possible.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 115066,
            "reputation": 5883,
            "user_id": 302283,
            "user_type": "registered",
            "accept_rate": 71,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/07c83c182922a5e077f60102959be811?s=256&d=identicon&r=PG",
            "display_name": "Alex",
            "link": "https:\/\/stackoverflow.com\/users\/302283\/alex"
        },
        "is_accepted": false,
        "score": 42,
        "last_activity_date": 1574427027,
        "last_edit_date": 1574427027.0,
        "creation_date": 1310341664,
        "answer_id": 6644519,
        "question_id": 6643939,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "As [Alexandr says][1], you can use the CPAN client via the start menu. You can also install modules just as you would on Unix from the DOS window:\r\n\r\n    perl -MCPAN -e shell\r\n    install Quantum::Entanglement\r\n\r\nYou can also download the .tar.gz from CPAN, unzip it and install as you would in Unix:\r\n\r\n    cd Module-Name-1.23\r\n    perl Makefile.PL\r\n    dmake\r\n    dmake test\r\n    dmake install\r\n\r\nYou may need to make sure your [%PATH%][2] environment variable has the right entry to get to Strawberry Perl, and does not contain other copies of dmake or gcc, which will sometimes lead to headaches.\r\n\r\n  [1]: https:\/\/stackoverflow.com\/questions\/6643939\/installing-modules-using-strawberry-perl\/6644328#6644328\r\n  [2]: https:\/\/en.wikipedia.org\/wiki\/PATH_(variable)\r\n\r\n\r\n",
        "body": "<p>As <a href=\"https:\/\/stackoverflow.com\/questions\/6643939\/installing-modules-using-strawberry-perl\/6644328#6644328\">Alexandr says<\/a>, you can use the CPAN client via the start menu. You can also install modules just as you would on Unix from the DOS window:<\/p>\n\n<pre><code>perl -MCPAN -e shell\ninstall Quantum::Entanglement\n<\/code><\/pre>\n\n<p>You can also download the .tar.gz from CPAN, unzip it and install as you would in Unix:<\/p>\n\n<pre><code>cd Module-Name-1.23\nperl Makefile.PL\ndmake\ndmake test\ndmake install\n<\/code><\/pre>\n\n<p>You may need to make sure your <a href=\"https:\/\/en.wikipedia.org\/wiki\/PATH_(variable)\" rel=\"noreferrer\">%PATH%<\/a> environment variable has the right entry to get to Strawberry Perl, and does not contain other copies of dmake or gcc, which will sometimes lead to headaches.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 14218,
            "reputation": 2099,
            "user_id": 29060,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/c12060f9913ccb147fc65c260fca2d2b?s=256&d=identicon&r=PG",
            "display_name": "JDrago",
            "link": "https:\/\/stackoverflow.com\/users\/29060\/jdrago"
        },
        "is_accepted": false,
        "score": 41,
        "last_activity_date": 1224634358,
        "last_edit_date": null,
        "creation_date": 1224634358,
        "answer_id": 224035,
        "question_id": 223393,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "    length($string)",
        "body": "<pre><code>length($string)\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 35556,
            "reputation": 117234,
            "user_id": 100754,
            "user_type": "registered",
            "accept_rate": 90,
            "profile_image": "https:\/\/i.stack.imgur.com\/g9hlb.jpg?s=256&g=1",
            "display_name": "Sinan &#220;n&#252;r",
            "link": "https:\/\/stackoverflow.com\/users\/100754\/sinan-%c3%9cn%c3%bcr"
        },
        "is_accepted": true,
        "score": 41,
        "last_activity_date": 1267049346,
        "last_edit_date": 1267049346.0,
        "creation_date": 1267048865,
        "answer_id": 2329941,
        "question_id": 2329385,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "[Data::Structure::Util](http:\/\/search.cpan.org\/perldoc\/Data::Structure::Util)\r\n\r\n&gt; `unbless($ref)`\r\n&gt;\r\n&gt;  Remove the blessing from any objects found within the passed data structure.\r\n\r\n    #!\/usr\/bin\/perl\r\n\r\n    use strict; use warnings;\r\n\r\n    use Scalar::Util qw( refaddr );\r\n    use Data::Structure::Util qw( unbless );\r\n\r\n    my $x = bless { a =&gt; 1, b =&gt; 2 } =&gt; &#39;My&#39;;\r\n\r\n    printf &quot;%s : %s\\n&quot;, ref $x, refaddr $x;\r\n\r\n    unbless $x;\r\n\r\n    printf &quot;%s : %s\\n&quot;, ref $x, refaddr $x;\r\n\r\nOutput:\r\n\r\n&lt;pre&gt;My : 237356\r\nHASH : 237356&lt;\/pre&gt;",
        "body": "<p><a href=\"http:\/\/search.cpan.org\/perldoc\/Data::Structure::Util\" rel=\"noreferrer\">Data::Structure::Util<\/a><\/p>\n\n<blockquote>\n  <p><code>unbless($ref)<\/code><\/p>\n  \n  <p>Remove the blessing from any objects found within the passed data structure.<\/p>\n<\/blockquote>\n\n<pre><code>#!\/usr\/bin\/perl\n\nuse strict; use warnings;\n\nuse Scalar::Util qw( refaddr );\nuse Data::Structure::Util qw( unbless );\n\nmy $x = bless { a =&gt; 1, b =&gt; 2 } =&gt; 'My';\n\nprintf \"%s : %s\\n\", ref $x, refaddr $x;\n\nunbless $x;\n\nprintf \"%s : %s\\n\", ref $x, refaddr $x;\n<\/code><\/pre>\n\n<p>Output:<\/p>\n\n<pre>My : 237356\nHASH : 237356<\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 48659,
            "reputation": 1924,
            "user_id": 144633,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/0b03ed572c45abf79295055c137cbdc2?s=256&d=identicon&r=PG",
            "display_name": "phaylon",
            "link": "https:\/\/stackoverflow.com\/users\/144633\/phaylon"
        },
        "is_accepted": true,
        "score": 41,
        "last_activity_date": 1281636919,
        "last_edit_date": 1281636919.0,
        "creation_date": 1281560024,
        "answer_id": 3462743,
        "question_id": 3462058,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "Since it hasn&#39;t been mentioned yet, &lt;a href=&quot;http:\/\/search.cpan.org\/dist\/App-cpanminus&quot;&gt;cpanminus&lt;\/a&gt; is a zero-conf cpan installer. And you can download a self-contained executable if it isn&#39;t available for your version control.\r\n\r\nThe cpanm executable is easily installed (as documented in the executable itself) with:\r\n\r\n    curl -L http:\/\/cpanmin.us | perl - --self-upgrade\r\n    # or\r\n    wget -O - http:\/\/cpanmin.us | perl - --self-upgrade\r\n\r\n",
        "body": "<p>Since it hasn't been mentioned yet, <a href=\"http:\/\/search.cpan.org\/dist\/App-cpanminus\" rel=\"noreferrer\">cpanminus<\/a> is a zero-conf cpan installer. And you can download a self-contained executable if it isn't available for your version control.<\/p>\n\n<p>The cpanm executable is easily installed (as documented in the executable itself) with:<\/p>\n\n<pre><code>curl -L http:\/\/cpanmin.us | perl - --self-upgrade\n# or\nwget -O - http:\/\/cpanmin.us | perl - --self-upgrade\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5248,
            "reputation": 61611,
            "user_id": 8355,
            "user_type": "registered",
            "accept_rate": 80,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/8d0099a2574719d7a67eab012851bf9b?s=256&d=identicon&r=PG",
            "display_name": "cjm",
            "link": "https:\/\/stackoverflow.com\/users\/8355\/cjm"
        },
        "is_accepted": true,
        "score": 41,
        "last_activity_date": 1528998631,
        "last_edit_date": 1528998631.0,
        "creation_date": 1300296031,
        "answer_id": 5329129,
        "question_id": 74358,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "This long-standing security hole has finally been fixed in version 6.00 of [libwww-perl][1].  Starting with that version, by default [LWP::UserAgent][2] verifies that HTTPS servers present a valid certificate matching the expected hostname (unless `$ENV{PERL_LWP_SSL_VERIFY_HOSTNAME}` is set to a false value or, for backwards compatibility if that variable is not set at all, either `$ENV{HTTPS_CA_FILE}` or `$ENV{HTTPS_CA_DIR}` is set).\r\n\r\nThis can be controlled by the new [ssl_opts][3] option of LWP::UserAgent.  See that link for details on how the Certificate Authority certificates are located.  But **be careful**, the way LWP::UserAgent used to work, if you provide a `ssl_opts` hash to the constructor, then **`verify_hostname` defaulted to 0** instead of 1.  ([This bug][4] was fixed in LWP 6.03.)  To be safe, always specify `verify_hostname =&gt; 1` in your `ssl_opts`.\r\n\r\nSo `use LWP::UserAgent 6;` should be sufficient to have server certificates validated.\r\n\r\n\r\n  [1]: https:\/\/metacpan.org\/release\/libwww-perl\r\n  [2]: https:\/\/metacpan.org\/pod\/LWP::UserAgent\r\n  [3]: https:\/\/metacpan.org\/pod\/LWP::UserAgent#ssl_opts\r\n  [4]: https:\/\/rt.cpan.org\/Public\/Bug\/Display.html?id=67947",
        "body": "<p>This long-standing security hole has finally been fixed in version 6.00 of <a href=\"https:\/\/metacpan.org\/release\/libwww-perl\" rel=\"noreferrer\">libwww-perl<\/a>.  Starting with that version, by default <a href=\"https:\/\/metacpan.org\/pod\/LWP::UserAgent\" rel=\"noreferrer\">LWP::UserAgent<\/a> verifies that HTTPS servers present a valid certificate matching the expected hostname (unless <code>$ENV{PERL_LWP_SSL_VERIFY_HOSTNAME}<\/code> is set to a false value or, for backwards compatibility if that variable is not set at all, either <code>$ENV{HTTPS_CA_FILE}<\/code> or <code>$ENV{HTTPS_CA_DIR}<\/code> is set).<\/p>\n\n<p>This can be controlled by the new <a href=\"https:\/\/metacpan.org\/pod\/LWP::UserAgent#ssl_opts\" rel=\"noreferrer\">ssl_opts<\/a> option of LWP::UserAgent.  See that link for details on how the Certificate Authority certificates are located.  But <strong>be careful<\/strong>, the way LWP::UserAgent used to work, if you provide a <code>ssl_opts<\/code> hash to the constructor, then <strong><code>verify_hostname<\/code> defaulted to 0<\/strong> instead of 1.  (<a href=\"https:\/\/rt.cpan.org\/Public\/Bug\/Display.html?id=67947\" rel=\"noreferrer\">This bug<\/a> was fixed in LWP 6.03.)  To be safe, always specify <code>verify_hostname =&gt; 1<\/code> in your <code>ssl_opts<\/code>.<\/p>\n\n<p>So <code>use LWP::UserAgent 6;<\/code> should be sufficient to have server certificates validated.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 37482,
            "reputation": 33426,
            "user_id": 107152,
            "user_type": "registered",
            "accept_rate": 87,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/71928e279dd76071cbe710e19d8f8697?s=256&d=identicon&r=PG",
            "display_name": "Qtax",
            "link": "https:\/\/stackoverflow.com\/users\/107152\/qtax"
        },
        "is_accepted": true,
        "score": 41,
        "last_activity_date": 1598454640,
        "last_edit_date": 1598454640.0,
        "creation_date": 1371585511,
        "answer_id": 17177790,
        "question_id": 17039670,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "# Answer to question 1\r\n\r\nTo answer the first question one could use:\r\n\r\n    (?xm)                    # ignore comments and whitespace, ^ matches beginning of line\r\n    ^                        # beginning of line\r\n    (?:\r\n        .                    # any character except \\n\r\n        (?=                  # lookahead\r\n            .*+\\n            # go to next line\r\n            ( \\1?+ . )       # add a character to the 1st capturing group\r\n            .*+\\n            # next line\r\n            ( \\2?+ . )       # add a character to the 2nd capturing group\r\n        )\r\n    )*?                      # repeat as few times as needed\r\n    X .*+\\n                  # X on the first line and advance to next line\r\n    \\1?+                     # if 1st capturing group is defined, use it, consuming exactly the same number of characters as on the first line\r\n    X .*+\\n                  # X on the 2nd line and advance to next line\r\n    \\2?+                     # if 2st capturing group is defined, use it, consuming exactly the same number of characters as on the first line\r\n    X                        # X on the 3rd line\r\n\r\n&lt;kbd&gt;[**Online demo**][1]&lt;\/kbd&gt;\r\n\r\nThis expression works in Perl, PCRE, Java and should work in .NET.\r\n\r\nThe expression uses lookaheads with self referencing capturing groups to add a character for every repetition of the lookahead (this is used to &quot;count&quot;).\r\n\r\n`\\1?+` means if `\\1` matches (or is defined) consume it, and don&#39;t give it back (don&#39;t backtrack). In this case it&#39;s equivalent to `(?(1) \\1 )`. Which means match `\\1` if `\\1` is defined.\r\n\r\n[polygenelubricants][2] explains this kinds of lookaheads with backreferences very nicely in [his answer for *How can we match a^n b^n with Java regex?*][3]. (He has also written about other impressive tricks for Java regex involving backreferences and lookarounds.)\r\n\r\n\r\n# Answer to question 2\r\n\r\n## Plain matching\r\n\r\nWhen just using matching and requiring the answer (count) in the number of matches, then the question 2 answer would be:\r\n\r\nIt can **not** be directly solved in regex flavors that have a limited lookbehind. While other flavors like Java and .NET could (as for example in [m.buettner&#39;s .NET solution][4]).\r\n\r\nThus plain regex matches in Perl and PCRE (PHP, etc) cannot directly answer this question in this case.\r\n\r\n\r\n### (Semi?)proof\r\n\r\nAssume that no variable length lookbehinds are available.\r\n\r\nYou have to in some way count the number of characters on a line before an `X`.&lt;br&gt;\r\nOnly way to do that is to match them, and since no variable length lookbehinds are available you have to start the match (at least) at the beginning of the line.&lt;br&gt;\r\nIf you start the match at the beginning of a line you can only get at most one match per line.\r\n\r\nSince there can be multiple occurrences per line, this would not count them all and would not give a correct answer.\r\n\r\n\r\n\r\n## Length\/indirect solution\r\n\r\nOn the other hand if we accept the answer as the length of a match or substitution result, then the 2nd question **can be answered** in PCRE and Perl (and other flavors).\r\n\r\nThis solution is based on\/inspired by [m.buettner&#39;s nice &quot;partial PCRE solution&quot;][5].\r\n\r\nOne could simply replace all matches of the following expression with `$3`, getting the answer to question two (the number of patterns of interests) as the length of the resulting string.\r\n\r\n    ^\r\n    (?:\r\n        (?:                   # match .+? characters\r\n            .\r\n            (?=               # counting the same number on the following two lines\r\n                .*+\\n\r\n                ( \\1?+ . )\r\n                .*+\\n\r\n                ( \\2?+ . )\r\n            )\r\n        )+?\r\n        (?&lt;= X )              # till the above consumes an X\r\n        (?=                   # that matches the following conditions\r\n            .*+\\n\r\n            \\1?+\r\n            (?&lt;= X )\r\n            .*+\\n\r\n            \\2?+\r\n            (?&lt;= X )\r\n        )\r\n        (?=                   # count the number of matches\r\n            .*+\\n\r\n            ( \\3?+ . )        # the number of matches = length of $3\r\n        )\r\n    )*                        # repeat as long as there are matches on this line\r\n    .*\\n?                     # remove the rest of the line\r\n\r\n\r\nWhich in Perl could be written as:\r\n\r\n    $in =~ s\/regex\/$3\/gmx;\r\n    $count = length $in;\r\n\r\n&lt;kbd&gt;[**Online demo**][6]&lt;\/kbd&gt;\r\n\r\n\r\nThis expression is similar to the solution to question 1 above, with some modifications to include `X` in the characters matched in the first lookahead, wrapped with a quantifier and counting number of matches of the quantifier.\r\n\r\n\r\nExcept for direct matches this is as close as it gets (extra code wise besides regex), and could be an acceptable answer to question 2.\r\n\r\n\r\n### Test cases\r\n\r\nSome test cases and results for the above solution. Result showing the numerical answer (length of the resulting string) and in parenthesis the resulting string after the substitution(s).\r\n\r\n\r\n    Test #0:\r\n    --------------------\r\n    X\r\n    X\r\n    X\r\n    \r\n    result: 1 (X)\r\n    \r\n    \r\n    Test #1:\r\n    --------------------\r\n    ..X....\r\n    ..X....\r\n    ..X....\r\n    \r\n    result: 1 (.)\r\n    \r\n    \r\n    Test #2:\r\n    --------------------\r\n    ..X.X..\r\n    ..X.X..\r\n    ....X..\r\n    \r\n    result: 1 (.)\r\n    \r\n    \r\n    Test #3:\r\n    --------------------\r\n    ..X....\r\n    ..X....\r\n    ...X...\r\n    \r\n    result: 0 ()\r\n    \r\n    \r\n    Test #4:\r\n    --------------------\r\n    ..X....\r\n    ...X...\r\n    ..X....\r\n    \r\n    result: 0 ()\r\n    \r\n    \r\n    Test #5:\r\n    --------------------\r\n    ....X..\r\n    .X..X..\r\n    .X.....\r\n    \r\n    result: 0 ()\r\n    \r\n    \r\n    Test #6:\r\n    --------------------\r\n    .X..X..\r\n    .X.X...\r\n    .X.X...\r\n    \r\n    result: 1 (.)\r\n    \r\n    \r\n    Test #7:\r\n    --------------------\r\n    .X..X..\r\n    .X..X..\r\n    .X..X..\r\n    \r\n    result: 2 (.X)\r\n    \r\n    \r\n    Test #8:\r\n    --------------------\r\n    XXX\r\n    XXX\r\n    XXX\r\n    \r\n    result: 3 (XXX)\r\n    \r\n    \r\n    Test #9:\r\n    --------------------\r\n    X.X.X\r\n    XXXXX\r\n    XXXXX\r\n    .X.X.\r\n    \r\n    result: 5 (XXXXX)\r\n    \r\n    \r\n    Test #10:\r\n    --------------------\r\n    1....X.......\r\n    2..X..X...X....\r\n    3X.X...X..X.....\r\n    4X....XXXXXX.....\r\n    5X..XXX...........\r\n    6.....X..........\r\n    7.........X....X\r\n    8..X......X....X....\r\n    9..X......X....X....X...\r\n    A....X.....\r\n    B.X..X..\r\n    C.....\r\n    XXX\r\n    XXX\r\n    XXX\r\n    .\r\n    \r\n    result: 8 (3458.XXX)\r\n\r\n\r\n\r\n\r\n  [1]: http:\/\/ideone.com\/iUFxBw\r\n  [2]: https:\/\/stackoverflow.com\/users\/276101\/polygenelubricants\r\n  [3]: https:\/\/stackoverflow.com\/questions\/3644266\/how-can-we-match-an-bn-with-java-regex\/\r\n  [4]: https:\/\/stackoverflow.com\/a\/17176756\/107152\r\n  [5]: https:\/\/stackoverflow.com\/a\/17176756\/107152\r\n  [6]: http:\/\/ideone.com\/FLfOLX",
        "body": "<h1>Answer to question 1<\/h1>\n<p>To answer the first question one could use:<\/p>\n<pre><code>(?xm)                    # ignore comments and whitespace, ^ matches beginning of line\n^                        # beginning of line\n(?:\n    .                    # any character except \\n\n    (?=                  # lookahead\n        .*+\\n            # go to next line\n        ( \\1?+ . )       # add a character to the 1st capturing group\n        .*+\\n            # next line\n        ( \\2?+ . )       # add a character to the 2nd capturing group\n    )\n)*?                      # repeat as few times as needed\nX .*+\\n                  # X on the first line and advance to next line\n\\1?+                     # if 1st capturing group is defined, use it, consuming exactly the same number of characters as on the first line\nX .*+\\n                  # X on the 2nd line and advance to next line\n\\2?+                     # if 2st capturing group is defined, use it, consuming exactly the same number of characters as on the first line\nX                        # X on the 3rd line\n<\/code><\/pre>\n<p><kbd><a href=\"http:\/\/ideone.com\/iUFxBw\" rel=\"nofollow noreferrer\"><strong>Online demo<\/strong><\/a><\/kbd><\/p>\n<p>This expression works in Perl, PCRE, Java and should work in .NET.<\/p>\n<p>The expression uses lookaheads with self referencing capturing groups to add a character for every repetition of the lookahead (this is used to &quot;count&quot;).<\/p>\n<p><code>\\1?+<\/code> means if <code>\\1<\/code> matches (or is defined) consume it, and don't give it back (don't backtrack). In this case it's equivalent to <code>(?(1) \\1 )<\/code>. Which means match <code>\\1<\/code> if <code>\\1<\/code> is defined.<\/p>\n<p><a href=\"https:\/\/stackoverflow.com\/users\/276101\/polygenelubricants\">polygenelubricants<\/a> explains this kinds of lookaheads with backreferences very nicely in <a href=\"https:\/\/stackoverflow.com\/questions\/3644266\/how-can-we-match-an-bn-with-java-regex\/\">his answer for <em>How can we match a^n b^n with Java regex?<\/em><\/a>. (He has also written about other impressive tricks for Java regex involving backreferences and lookarounds.)<\/p>\n<h1>Answer to question 2<\/h1>\n<h2>Plain matching<\/h2>\n<p>When just using matching and requiring the answer (count) in the number of matches, then the question 2 answer would be:<\/p>\n<p>It can <strong>not<\/strong> be directly solved in regex flavors that have a limited lookbehind. While other flavors like Java and .NET could (as for example in <a href=\"https:\/\/stackoverflow.com\/a\/17176756\/107152\">m.buettner's .NET solution<\/a>).<\/p>\n<p>Thus plain regex matches in Perl and PCRE (PHP, etc) cannot directly answer this question in this case.<\/p>\n<h3>(Semi?)proof<\/h3>\n<p>Assume that no variable length lookbehinds are available.<\/p>\n<p>You have to in some way count the number of characters on a line before an <code>X<\/code>.<br>\nOnly way to do that is to match them, and since no variable length lookbehinds are available you have to start the match (at least) at the beginning of the line.<br>\nIf you start the match at the beginning of a line you can only get at most one match per line.<\/p>\n<p>Since there can be multiple occurrences per line, this would not count them all and would not give a correct answer.<\/p>\n<h2>Length\/indirect solution<\/h2>\n<p>On the other hand if we accept the answer as the length of a match or substitution result, then the 2nd question <strong>can be answered<\/strong> in PCRE and Perl (and other flavors).<\/p>\n<p>This solution is based on\/inspired by <a href=\"https:\/\/stackoverflow.com\/a\/17176756\/107152\">m.buettner's nice &quot;partial PCRE solution&quot;<\/a>.<\/p>\n<p>One could simply replace all matches of the following expression with <code>$3<\/code>, getting the answer to question two (the number of patterns of interests) as the length of the resulting string.<\/p>\n<pre><code>^\n(?:\n    (?:                   # match .+? characters\n        .\n        (?=               # counting the same number on the following two lines\n            .*+\\n\n            ( \\1?+ . )\n            .*+\\n\n            ( \\2?+ . )\n        )\n    )+?\n    (?&lt;= X )              # till the above consumes an X\n    (?=                   # that matches the following conditions\n        .*+\\n\n        \\1?+\n        (?&lt;= X )\n        .*+\\n\n        \\2?+\n        (?&lt;= X )\n    )\n    (?=                   # count the number of matches\n        .*+\\n\n        ( \\3?+ . )        # the number of matches = length of $3\n    )\n)*                        # repeat as long as there are matches on this line\n.*\\n?                     # remove the rest of the line\n<\/code><\/pre>\n<p>Which in Perl could be written as:<\/p>\n<pre><code>$in =~ s\/regex\/$3\/gmx;\n$count = length $in;\n<\/code><\/pre>\n<p><kbd><a href=\"http:\/\/ideone.com\/FLfOLX\" rel=\"nofollow noreferrer\"><strong>Online demo<\/strong><\/a><\/kbd><\/p>\n<p>This expression is similar to the solution to question 1 above, with some modifications to include <code>X<\/code> in the characters matched in the first lookahead, wrapped with a quantifier and counting number of matches of the quantifier.<\/p>\n<p>Except for direct matches this is as close as it gets (extra code wise besides regex), and could be an acceptable answer to question 2.<\/p>\n<h3>Test cases<\/h3>\n<p>Some test cases and results for the above solution. Result showing the numerical answer (length of the resulting string) and in parenthesis the resulting string after the substitution(s).<\/p>\n<pre><code>Test #0:\n--------------------\nX\nX\nX\n\nresult: 1 (X)\n\n\nTest #1:\n--------------------\n..X....\n..X....\n..X....\n\nresult: 1 (.)\n\n\nTest #2:\n--------------------\n..X.X..\n..X.X..\n....X..\n\nresult: 1 (.)\n\n\nTest #3:\n--------------------\n..X....\n..X....\n...X...\n\nresult: 0 ()\n\n\nTest #4:\n--------------------\n..X....\n...X...\n..X....\n\nresult: 0 ()\n\n\nTest #5:\n--------------------\n....X..\n.X..X..\n.X.....\n\nresult: 0 ()\n\n\nTest #6:\n--------------------\n.X..X..\n.X.X...\n.X.X...\n\nresult: 1 (.)\n\n\nTest #7:\n--------------------\n.X..X..\n.X..X..\n.X..X..\n\nresult: 2 (.X)\n\n\nTest #8:\n--------------------\nXXX\nXXX\nXXX\n\nresult: 3 (XXX)\n\n\nTest #9:\n--------------------\nX.X.X\nXXXXX\nXXXXX\n.X.X.\n\nresult: 5 (XXXXX)\n\n\nTest #10:\n--------------------\n1....X.......\n2..X..X...X....\n3X.X...X..X.....\n4X....XXXXXX.....\n5X..XXX...........\n6.....X..........\n7.........X....X\n8..X......X....X....\n9..X......X....X....X...\nA....X.....\nB.X..X..\nC.....\nXXX\nXXX\nXXX\n.\n\nresult: 8 (3458.XXX)\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 405548,
            "reputation": 32642,
            "user_id": 774499,
            "user_type": "registered",
            "accept_rate": 90,
            "profile_image": "https:\/\/i.stack.imgur.com\/sju2a.jpg?s=256&g=1",
            "display_name": "David Hammen",
            "link": "https:\/\/stackoverflow.com\/users\/774499\/david-hammen"
        },
        "is_accepted": true,
        "score": 40,
        "last_activity_date": 1444329308,
        "last_edit_date": 1444329308.0,
        "creation_date": 1444308621,
        "answer_id": 33016360,
        "question_id": 33014080,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Your `!!` takes advantage of two obscure things in Perl: The specific values that `!` returns, and that one of the possible values is dualvar (a scalar containing both a string and a number). Using `!!` to compound these behaviors is admittedly pithy. While its pithiness can be a huge plus, it can also be a rather big minus. Don&#39;t use features that result in a project mandating that &quot;the use of Perl is forbidden on this project.&quot;\r\n\r\nThere are lots of alternatives to `$count += !! (some_expression)` to count occurrences of truthy values of that expression. One is the ternary, `$count += (some_expression) ? 1 : 0`. That too is a bit obscure. There is a nice compact way to do what you want, which is to use the post-if:\r\n\r\n    $x++ if some_expression;\r\n\r\nThis says exactly what you are doing.\r\n",
        "body": "<p>Your <code>!!<\/code> takes advantage of two obscure things in Perl: The specific values that <code>!<\/code> returns, and that one of the possible values is dualvar (a scalar containing both a string and a number). Using <code>!!<\/code> to compound these behaviors is admittedly pithy. While its pithiness can be a huge plus, it can also be a rather big minus. Don't use features that result in a project mandating that \"the use of Perl is forbidden on this project.\"<\/p>\n\n<p>There are lots of alternatives to <code>$count += !! (some_expression)<\/code> to count occurrences of truthy values of that expression. One is the ternary, <code>$count += (some_expression) ? 1 : 0<\/code>. That too is a bit obscure. There is a nice compact way to do what you want, which is to use the post-if:<\/p>\n\n<pre><code>$x++ if some_expression;\n<\/code><\/pre>\n\n<p>This says exactly what you are doing.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5473,
            "reputation": 130134,
            "user_id": 2766176,
            "user_type": "registered",
            "accept_rate": 61,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/edd8638efe875601bfe394a8aea5b16d?s=256&d=identicon&r=PG",
            "display_name": "brian d foy",
            "link": "https:\/\/stackoverflow.com\/users\/2766176\/brian-d-foy"
        },
        "is_accepted": true,
        "score": 39,
        "last_activity_date": 1677787189,
        "last_edit_date": 1677787189.0,
        "creation_date": 1225770061,
        "answer_id": 260796,
        "question_id": 260593,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Make your own CPAN mirror with exactly what you want.\r\n\r\nThe CPAN tools only install the latest version of any distribution because PAUSE only indexes the latest version. However, you can create your own, private CPAN that has exactly the distributions that you want. Once you have your own CPAN mirror with only what you want, you point your CPAN tools at only that mirror so it only installs those versions. More on that in a minute.\r\n\r\nNow, you want to have several versions of that. You can create as many mirrors as you like, and you can also put the mirrors in source control so you can check out any version of the mirror that you like. \r\n\r\nTools such as CPAN::Mini::Inject can help you set up your own CPAN. Check out [my talks on Slideshare](http:\/\/www.slideshare.net\/brian_d_foy) for the basic examples, and some of [my videos on Vimeo](http:\/\/vimeo.com\/user493904\/videos) for some of the demonstrations. Look at anything that has &quot;CPAN&quot; or &quot;BackPAN&quot; in the title. I think I might have some stuff about it in [The Perl Review](http:\/\/www.theperlreview.com) too, or should by the next issue. :)\r\n\r\nLately, I&#39;ve been working on a program called dpan (for DarkPAN) that can look at random directories, find Perl distributions in them, and create the structure and index files that you need. You run dpan, you get a URL to point your CPAN client toward, and off you go. It&#39;s part of my MyCPAN-Indexer project, which is in [Github](http:\/\/github.com\/briandfoy\/mycpan-indexer\/tree\/master). It&#39;s not quite ready for unsupervised public use because I mostly work with corporate clients to customize their setup. If you&#39;re interested in that, feel free to ask me questions though.\r\n\r\nAlso, I recently released [CPAN::PackageDetails](http:\/\/search.cpan.org\/dist\/CPAN-PackageDetails) that can help you build the right index file. It&#39;s still a bit young too, but again, if you need something special, just ask.",
        "body": "<p>Make your own CPAN mirror with exactly what you want.<\/p>\n<p>The CPAN tools only install the latest version of any distribution because PAUSE only indexes the latest version. However, you can create your own, private CPAN that has exactly the distributions that you want. Once you have your own CPAN mirror with only what you want, you point your CPAN tools at only that mirror so it only installs those versions. More on that in a minute.<\/p>\n<p>Now, you want to have several versions of that. You can create as many mirrors as you like, and you can also put the mirrors in source control so you can check out any version of the mirror that you like.<\/p>\n<p>Tools such as CPAN::Mini::Inject can help you set up your own CPAN. Check out <a href=\"http:\/\/www.slideshare.net\/brian_d_foy\" rel=\"nofollow noreferrer\">my talks on Slideshare<\/a> for the basic examples, and some of <a href=\"http:\/\/vimeo.com\/user493904\/videos\" rel=\"nofollow noreferrer\">my videos on Vimeo<\/a> for some of the demonstrations. Look at anything that has &quot;CPAN&quot; or &quot;BackPAN&quot; in the title. I think I might have some stuff about it in <a href=\"http:\/\/www.theperlreview.com\" rel=\"nofollow noreferrer\">The Perl Review<\/a> too, or should by the next issue. :)<\/p>\n<p>Lately, I've been working on a program called dpan (for DarkPAN) that can look at random directories, find Perl distributions in them, and create the structure and index files that you need. You run dpan, you get a URL to point your CPAN client toward, and off you go. It's part of my MyCPAN-Indexer project, which is in <a href=\"http:\/\/github.com\/briandfoy\/mycpan-indexer\/tree\/master\" rel=\"nofollow noreferrer\">Github<\/a>. It's not quite ready for unsupervised public use because I mostly work with corporate clients to customize their setup. If you're interested in that, feel free to ask me questions though.<\/p>\n<p>Also, I recently released <a href=\"http:\/\/search.cpan.org\/dist\/CPAN-PackageDetails\" rel=\"nofollow noreferrer\">CPAN::PackageDetails<\/a> that can help you build the right index file. It's still a bit young too, but again, if you need something special, just ask.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 6150,
            "reputation": 39211,
            "user_id": 10238,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/b8c3b1025babebf20168dd90ea8f268c?s=256&d=identicon&r=PG",
            "display_name": "jmcnamara",
            "link": "https:\/\/stackoverflow.com\/users\/10238\/jmcnamara"
        },
        "is_accepted": false,
        "score": 38,
        "last_activity_date": 1222379511,
        "last_edit_date": 1222379511.0,
        "creation_date": 1222377677,
        "answer_id": 136229,
        "question_id": 135755,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "VERSION is a [UNIVERSAL][1] method of all Perl classes. You can use it to get the module version (if it has been set which it usually has). \r\n\r\nHere is a one liner where you only have to add the module name once:\r\n\r\n    perl -le &#39;eval &quot;require $ARGV[0]&quot; and print $ARGV[0]-&gt;VERSION&#39; Some::Module\r\n\r\n\r\n  [1]: http:\/\/perldoc.perl.org\/UNIVERSAL.html",
        "body": "<p>VERSION is a <a href=\"http:\/\/perldoc.perl.org\/UNIVERSAL.html\" rel=\"noreferrer\">UNIVERSAL<\/a> method of all Perl classes. You can use it to get the module version (if it has been set which it usually has). <\/p>\n\n<p>Here is a one liner where you only have to add the module name once:<\/p>\n\n<pre><code>perl -le 'eval \"require $ARGV[0]\" and print $ARGV[0]-&gt;VERSION' Some::Module\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 20051,
            "reputation": 122533,
            "user_id": 47529,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/i.stack.imgur.com\/41zJA.png?s=256&g=1",
            "display_name": "chaos",
            "link": "https:\/\/stackoverflow.com\/users\/47529\/chaos"
        },
        "is_accepted": true,
        "score": 38,
        "last_activity_date": 1286987233,
        "last_edit_date": 1286987233.0,
        "creation_date": 1251470132,
        "answer_id": 1347410,
        "question_id": 1347396,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "IMO, the only time there&#39;s any reason to use `&amp;` is if you&#39;re obtaining or calling a coderef, like:\r\n\r\n    sub foo() {\r\n        print &quot;hi\\n&quot;;\r\n    }\r\n    \r\n    my $x = \\&amp;foo;\r\n    &amp;$x();\r\n\r\nThe main time that you *can* use it that you *absolutely shouldn&#39;t* in most circumstances is when calling a sub that has a prototype that specifies any non-default call behavior.  What I mean by this is that some prototypes allow reinterpretation of the argument list, for example converting `@array` and `%hash` specifications to references.  So the sub will be expecting those reinterpretations to have occurred, and unless you go to whatever lengths are necessary to mimic them by hand, the sub will get inputs wildly different from those it expects.\r\n\r\nI think mainly people are trying to tell you that you&#39;re still writing in Perl 4 style, and we have a much cleaner, nicer thing called Perl 5 now.\r\n\r\nRegarding performance, there are various ways that Perl optimizes sub calls which `&amp;` defeats, with one of the main ones being inlining of constants.\r\n\r\nThere is also one circumstance where using `&amp;` provides a performance benefit: if you&#39;re forwarding a sub call with `foo(@_)`.  Using `&amp;foo` is infinitesimally faster than `foo(@_)`.  I wouldn&#39;t recommend it unless you&#39;ve definitively found by profiling that you need that micro-optimization.",
        "body": "<p>IMO, the only time there's any reason to use <code>&amp;<\/code> is if you're obtaining or calling a coderef, like:<\/p>\n\n<pre><code>sub foo() {\n    print \"hi\\n\";\n}\n\nmy $x = \\&amp;foo;\n&amp;$x();\n<\/code><\/pre>\n\n<p>The main time that you <em>can<\/em> use it that you <em>absolutely shouldn't<\/em> in most circumstances is when calling a sub that has a prototype that specifies any non-default call behavior.  What I mean by this is that some prototypes allow reinterpretation of the argument list, for example converting <code>@array<\/code> and <code>%hash<\/code> specifications to references.  So the sub will be expecting those reinterpretations to have occurred, and unless you go to whatever lengths are necessary to mimic them by hand, the sub will get inputs wildly different from those it expects.<\/p>\n\n<p>I think mainly people are trying to tell you that you're still writing in Perl 4 style, and we have a much cleaner, nicer thing called Perl 5 now.<\/p>\n\n<p>Regarding performance, there are various ways that Perl optimizes sub calls which <code>&amp;<\/code> defeats, with one of the main ones being inlining of constants.<\/p>\n\n<p>There is also one circumstance where using <code>&amp;<\/code> provides a performance benefit: if you're forwarding a sub call with <code>foo(@_)<\/code>.  Using <code>&amp;foo<\/code> is infinitesimally faster than <code>foo(@_)<\/code>.  I wouldn't recommend it unless you've definitively found by profiling that you need that micro-optimization.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 225845,
            "reputation": 12492,
            "user_id": 486544,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/aaa59d4404e6e60dda9b63db31146d56?s=256&d=identicon&r=PG",
            "display_name": "Robert Wahler",
            "link": "https:\/\/stackoverflow.com\/users\/486544\/robert-wahler"
        },
        "is_accepted": false,
        "score": 38,
        "last_activity_date": 1291125645,
        "last_edit_date": null,
        "creation_date": 1291125645,
        "answer_id": 4314544,
        "question_id": 1023710,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "Not all the tests pass on all versions of Windows. You can most likely get 100% functionality from ack even if the install tests fail.  Here is the command to force installation if failing tests prevent a normal install:\r\n\r\n    perl -MCPAN -e &quot;CPAN::Shell-&gt;force(qw(install App::Ack));&quot;\r\n",
        "body": "<p>Not all the tests pass on all versions of Windows. You can most likely get 100% functionality from ack even if the install tests fail.  Here is the command to force installation if failing tests prevent a normal install:<\/p>\n\n<pre><code>perl -MCPAN -e \"CPAN::Shell-&gt;force(qw(install App::Ack));\"\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 374917,
            "reputation": 66886,
            "user_id": 725418,
            "user_type": "registered",
            "accept_rate": 86,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/82ac2dc3e1ad4b7187f245c416528df9?s=256&d=identicon&r=PG",
            "display_name": "TLP",
            "link": "https:\/\/stackoverflow.com\/users\/725418\/tlp"
        },
        "is_accepted": false,
        "score": 38,
        "last_activity_date": 1305586847,
        "last_edit_date": 1305586847.0,
        "creation_date": 1305586337,
        "answer_id": 6024312,
        "question_id": 6023821,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "The square brackets are used to create an anonymous array. When evaluated, it returns a reference to this array, not the actual array values.\r\n\r\nParentheses have no such hidden property, but simply override [precedence][2] inside expressions, much like in math. For example:\r\n\r\n    my @array = 1,2,3;\r\n\r\nIs actually evaluated like this:\r\n\r\n    my @array = 1;\r\n    2,3; # causes the warning &quot;Useless use of constant in void context&quot;\r\n\r\nbecause the `=` operator has higher precedence than the commas. So to get around that, we use parentheses when assigning arrays, like so:\r\n\r\n    my @array = (1,2,3);\r\n\r\nYour example:\r\n\r\n    my @array = [1,2,3];\r\n\r\nis somewhat like saying this:\r\n\r\n    my @tmp = (1,2,3);\r\n    my @array = \\@tmp;\r\n\r\nWhere the `\\` is used to create a reference to the `@tmp` array.\r\n\r\n  [2]: http:\/\/perldoc.perl.org\/perlop.html\r\n\r\n\r\n",
        "body": "<p>The square brackets are used to create an anonymous array. When evaluated, it returns a reference to this array, not the actual array values.<\/p>\n\n<p>Parentheses have no such hidden property, but simply override <a href=\"http:\/\/perldoc.perl.org\/perlop.html\" rel=\"noreferrer\">precedence<\/a> inside expressions, much like in math. For example:<\/p>\n\n<pre><code>my @array = 1,2,3;\n<\/code><\/pre>\n\n<p>Is actually evaluated like this:<\/p>\n\n<pre><code>my @array = 1;\n2,3; # causes the warning \"Useless use of constant in void context\"\n<\/code><\/pre>\n\n<p>because the <code>=<\/code> operator has higher precedence than the commas. So to get around that, we use parentheses when assigning arrays, like so:<\/p>\n\n<pre><code>my @array = (1,2,3);\n<\/code><\/pre>\n\n<p>Your example:<\/p>\n\n<pre><code>my @array = [1,2,3];\n<\/code><\/pre>\n\n<p>is somewhat like saying this:<\/p>\n\n<pre><code>my @tmp = (1,2,3);\nmy @array = \\@tmp;\n<\/code><\/pre>\n\n<p>Where the <code>\\<\/code> is used to create a reference to the <code>@tmp<\/code> array.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 892,
            "reputation": 20028,
            "user_id": 1577190,
            "user_type": "registered",
            "accept_rate": 94,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/9a09b0df40ac0eb9bdebb8702e21eb7e?s=256&d=identicon&r=PG",
            "display_name": "SpoonMeiser",
            "link": "https:\/\/stackoverflow.com\/users\/1577190\/spoonmeiser"
        },
        "is_accepted": false,
        "score": 37,
        "last_activity_date": 1395785185,
        "last_edit_date": 1395785185.0,
        "creation_date": 1221763765,
        "answer_id": 95604,
        "question_id": 95492,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "If you&#39;re using the &lt;a href=&quot;https:\/\/metacpan.org\/pod\/DateTime&quot;&gt;DateTime&lt;\/a&gt; module, you can call the &lt;a href=&quot;https:\/\/metacpan.org\/pod\/DateTime#METHODS&quot;&gt;epoch()&lt;\/a&gt; method on a DateTime object, since that&#39;s what you think of as unix time.\r\n\r\nUsing DateTimes allows you to convert fairly easily from epoch, to date objects.\r\n\r\nAlternativly, &lt;a href=&quot;http:\/\/perldoc.perl.org\/functions\/localtime.html&quot;&gt;localtime&lt;\/a&gt; and gmtime will convert an epoch into an array containing day month and year, and timelocal and timegm from the &lt;a href=&quot;https:\/\/metacpan.org\/pod\/Time::Local&quot;&gt;Time::Local module&lt;\/a&gt; will do the opposite, converting an array of time elements (seconds, minutes, ..., days, months etc.) into an epoch.",
        "body": "<p>If you're using the <a href=\"https:\/\/metacpan.org\/pod\/DateTime\" rel=\"noreferrer\">DateTime<\/a> module, you can call the <a href=\"https:\/\/metacpan.org\/pod\/DateTime#METHODS\" rel=\"noreferrer\">epoch()<\/a> method on a DateTime object, since that's what you think of as unix time.<\/p>\n\n<p>Using DateTimes allows you to convert fairly easily from epoch, to date objects.<\/p>\n\n<p>Alternativly, <a href=\"http:\/\/perldoc.perl.org\/functions\/localtime.html\" rel=\"noreferrer\">localtime<\/a> and gmtime will convert an epoch into an array containing day month and year, and timelocal and timegm from the <a href=\"https:\/\/metacpan.org\/pod\/Time::Local\" rel=\"noreferrer\">Time::Local module<\/a> will do the opposite, converting an array of time elements (seconds, minutes, ..., days, months etc.) into an epoch.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 289134,
            "reputation": 372786,
            "user_id": 589924,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/b2cf53d5a3d25f95c0db4e025aed4153?s=256&d=identicon&r=PG",
            "display_name": "ikegami",
            "link": "https:\/\/stackoverflow.com\/users\/589924\/ikegami"
        },
        "is_accepted": false,
        "score": 37,
        "last_activity_date": 1694527655,
        "last_edit_date": 1694527655.0,
        "creation_date": 1370399134,
        "answer_id": 16930588,
        "question_id": 16927024,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "There are problems with the design of smart-matching. The decision of what any given `TYPE ~~ TYPE` should do is most often unobvious, inconsistent and\/or disputed. The idea isn&#39;t to remove smart matching; it&#39;s to fix it.\r\n\r\n[Update: In the release notes for 5.38, it was announced that smart matching will be completely removed from Perl 5.42. The following prediction is no longer accurate.]\r\n\r\nSpecifically, `~~` will be greatly simplified, as you can see in a [proposal](http:\/\/markmail.org\/message\/u22titrq5ljclz4b) by the 5.18 pumpking. Decisions as to how two things should match will be done with helpers such as those that already exist in [Smart::Match](http:\/\/search.cpan.org\/perldoc?Smart::Match).\r\n\r\n    ... ~~ any(...)\r\n\r\nIt is much more readable, much more flexible (fully extensible), and solves a number of problems (such as &quot;When should X be considered a number, and when should it be considered a string?&quot;).\r\n",
        "body": "<p>There are problems with the design of smart-matching. The decision of what any given <code>TYPE ~~ TYPE<\/code> should do is most often unobvious, inconsistent and\/or disputed. The idea isn't to remove smart matching; it's to fix it.<\/p>\n<p>[Update: In the release notes for 5.38, it was announced that smart matching will be completely removed from Perl 5.42. The following prediction is no longer accurate.]<\/p>\n<p>Specifically, <code>~~<\/code> will be greatly simplified, as you can see in a <a href=\"http:\/\/markmail.org\/message\/u22titrq5ljclz4b\" rel=\"nofollow noreferrer\">proposal<\/a> by the 5.18 pumpking. Decisions as to how two things should match will be done with helpers such as those that already exist in <a href=\"http:\/\/search.cpan.org\/perldoc?Smart::Match\" rel=\"nofollow noreferrer\">Smart::Match<\/a>.<\/p>\n<pre><code>... ~~ any(...)\n<\/code><\/pre>\n<p>It is much more readable, much more flexible (fully extensible), and solves a number of problems (such as &quot;When should X be considered a number, and when should it be considered a string?&quot;).<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5191,
            "reputation": 30711,
            "user_id": 8233,
            "user_type": "registered",
            "accept_rate": 69,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/5ed2571484765d12fcb3230f235a8ecc?s=256&d=identicon&r=PG",
            "display_name": "Michael Carman",
            "link": "https:\/\/stackoverflow.com\/users\/8233\/michael-carman"
        },
        "is_accepted": false,
        "score": 36,
        "last_activity_date": 1547653495,
        "last_edit_date": 1547653495.0,
        "creation_date": 1276637727,
        "answer_id": 3049257,
        "question_id": 3048726,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Aside from one esoteric case&lt;sup&gt;1&lt;\/sup&gt; `unless` is just syntactic sugar for `if !`. It exists to allow you to write code that is clearer and more expressive. It should be used when it achieves this goal and shunned when it impairs it.\r\n\r\nI find `unless` to be most useful for flow control in loops. e.g.\r\n\r\n    while (&lt;$fh&gt;) {\r\n        next unless \/\\S\/;\r\n        # ...\r\n    }\r\n\r\nFor simple negations I find it clearer than a negated `if` -- it&#39;s easy to miss that leading `!` when reading code.\r\n\r\n    unless ($condition) {\r\n        do_something();\r\n    }\r\n\r\n    if (!$condition) {\r\n        do_something();\r\n    }\r\n\r\nBut don&#39;t write `unless ... else`, because that&#39;s just jarring.\r\n\r\nIn postfix form it provides a hint about what the expected path through the code is.\r\n\r\n    do_normal_thing() unless $some_unlikely_condition;\r\n&lt;hr&gt;\r\n&lt;sub&gt;1) The last expression evaluated is different, which can affect the behavior of subs without an explicit `return`.&lt;\/sub&gt;",
        "body": "<p>Aside from one esoteric case<sup>1<\/sup> <code>unless<\/code> is just syntactic sugar for <code>if !<\/code>. It exists to allow you to write code that is clearer and more expressive. It should be used when it achieves this goal and shunned when it impairs it.<\/p>\n\n<p>I find <code>unless<\/code> to be most useful for flow control in loops. e.g.<\/p>\n\n<pre><code>while (&lt;$fh&gt;) {\n    next unless \/\\S\/;\n    # ...\n}\n<\/code><\/pre>\n\n<p>For simple negations I find it clearer than a negated <code>if<\/code> -- it's easy to miss that leading <code>!<\/code> when reading code.<\/p>\n\n<pre><code>unless ($condition) {\n    do_something();\n}\n\nif (!$condition) {\n    do_something();\n}\n<\/code><\/pre>\n\n<p>But don't write <code>unless ... else<\/code>, because that's just jarring.<\/p>\n\n<p>In postfix form it provides a hint about what the expected path through the code is.<\/p>\n\n<pre><code>do_normal_thing() unless $some_unlikely_condition;\n<\/code><\/pre>\n\n<p><hr>\n<sub>1) The last expression evaluated is different, which can affect the behavior of subs without an explicit <code>return<\/code>.<\/sub><\/p>\n",
        "community_owned_date": 1276637727.0
    },
    {
        "owner": {
            "account_id": 11386,
            "reputation": 119260,
            "user_id": 21926,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/f6e61d47f9a6ec0a7a286835e51f3332?s=256&d=identicon&r=PG",
            "display_name": "Sean Bright",
            "link": "https:\/\/stackoverflow.com\/users\/21926\/sean-bright"
        },
        "is_accepted": false,
        "score": 36,
        "last_activity_date": 1312982896,
        "last_edit_date": null,
        "creation_date": 1312982896,
        "answer_id": 7011557,
        "question_id": 7011524,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "    if ($string =~ m\/something\/) {\r\n       # Do work\r\n    }\r\n\r\nWhere `something` is a regular expression.",
        "body": "<pre><code>if ($string =~ m\/something\/) {\n   # Do work\n}\n<\/code><\/pre>\n\n<p>Where <code>something<\/code> is a regular expression.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 8210,
            "reputation": 155382,
            "user_id": 14660,
            "user_type": "registered",
            "accept_rate": 62,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/e55e0ec3c00f834d78fbdddeaa36e308?s=256&d=identicon&r=PG",
            "display_name": "Schwern",
            "link": "https:\/\/stackoverflow.com\/users\/14660\/schwern"
        },
        "is_accepted": false,
        "score": 35,
        "last_activity_date": 1224318958,
        "last_edit_date": null,
        "creation_date": 1224318958,
        "answer_id": 214761,
        "question_id": 206661,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "In writing [File::Slurp][1] (which is the best way), Uri Guttman did a lot of research in the many ways of slurping and which is most efficient.  He wrote down [his findings here][2] and incorporated them info File::Slurp.\r\n\r\n\r\n  [1]: http:\/\/search.cpan.org\/perldoc?File::Slurp\r\n  [2]: http:\/\/search.cpan.org\/~drolsky\/File-Slurp-9999.13\/extras\/slurp_article.pod",
        "body": "<p>In writing <a href=\"http:\/\/search.cpan.org\/perldoc?File::Slurp\" rel=\"noreferrer\">File::Slurp<\/a> (which is the best way), Uri Guttman did a lot of research in the many ways of slurping and which is most efficient.  He wrote down <a href=\"http:\/\/search.cpan.org\/~drolsky\/File-Slurp-9999.13\/extras\/slurp_article.pod\" rel=\"noreferrer\">his findings here<\/a> and incorporated them info File::Slurp.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5473,
            "reputation": 130134,
            "user_id": 2766176,
            "user_type": "registered",
            "accept_rate": 61,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/edd8638efe875601bfe394a8aea5b16d?s=256&d=identicon&r=PG",
            "display_name": "brian d foy",
            "link": "https:\/\/stackoverflow.com\/users\/2766176\/brian-d-foy"
        },
        "is_accepted": false,
        "score": 35,
        "last_activity_date": 1636742384,
        "last_edit_date": 1636742384.0,
        "creation_date": 1255417559,
        "answer_id": 1558600,
        "question_id": 1557959,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Mostly I use `perldoc` to get a location:\r\n\r\n    $ perldoc -l Module\r\n\r\n\r\nYou can also get module details with the `cpan` tool that comes with Perl:\r\n\r\n    $ cpan -D Time::HiRes\r\n    Time::HiRes\r\n    -------------------------------------------------------------------------\r\n        High resolution time, sleep, and alarm\r\n        J\/JH\/JHI\/Time-HiRes-1.9719.tar.gz\r\n        \/usr\/local\/perls\/perl-5.10.0\/lib\/5.10.0\/darwin-2level\/Time\/HiRes.pm\r\n        Installed: 1.9711\r\n        CPAN:      1.9719  Not up to date\r\n        Andrew Main (Zefram) (ZEFRAM)\r\n        zefram@fysh.org\r\n\r\nIt even works on modules that you haven&#39;t installed:\r\n\r\n    $ cpan -D Win32::Process\r\n    Win32::Process\r\n    -------------------------------------------------------------------------\r\n        Interface to Win32 Process functions\r\n        J\/JD\/JDB\/Win32-Process-0.14.tar.gz\r\n        Installed: \r\n        CPAN:      0.14  Not up to date\r\n        Jan Dubois (JDB)\r\n        jand@activestate.com\r\n\r\nI think maybe I need an XML option like svn.",
        "body": "<p>Mostly I use <code>perldoc<\/code> to get a location:<\/p>\n<pre><code>$ perldoc -l Module\n<\/code><\/pre>\n<p>You can also get module details with the <code>cpan<\/code> tool that comes with Perl:<\/p>\n<pre><code>$ cpan -D Time::HiRes\nTime::HiRes\n-------------------------------------------------------------------------\n    High resolution time, sleep, and alarm\n    J\/JH\/JHI\/Time-HiRes-1.9719.tar.gz\n    \/usr\/local\/perls\/perl-5.10.0\/lib\/5.10.0\/darwin-2level\/Time\/HiRes.pm\n    Installed: 1.9711\n    CPAN:      1.9719  Not up to date\n    Andrew Main (Zefram) (ZEFRAM)\n    zefram@fysh.org\n<\/code><\/pre>\n<p>It even works on modules that you haven't installed:<\/p>\n<pre><code>$ cpan -D Win32::Process\nWin32::Process\n-------------------------------------------------------------------------\n    Interface to Win32 Process functions\n    J\/JD\/JDB\/Win32-Process-0.14.tar.gz\n    Installed: \n    CPAN:      0.14  Not up to date\n    Jan Dubois (JDB)\n    jand@activestate.com\n<\/code><\/pre>\n<p>I think maybe I need an XML option like svn.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 129990,
            "reputation": 7516,
            "user_id": 328936,
            "user_type": "registered",
            "accept_rate": 73,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/7d78ffab3120d149909146eca05b7b28?s=256&d=identicon&r=PG",
            "display_name": "Rich",
            "link": "https:\/\/stackoverflow.com\/users\/328936\/rich"
        },
        "is_accepted": false,
        "score": 35,
        "last_activity_date": 1381836619,
        "last_edit_date": 1381836619.0,
        "creation_date": 1295952773,
        "answer_id": 4792583,
        "question_id": 1023710,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "If you already have msysgit installed, then you don&#39;t need to install Perl, because you already have a version. You just need to download [the standalone version of ack](http:\/\/betterthangrep.com\/ack-standalone) and put it somewhere in your bash path&lt;sup&gt;1&lt;\/sup&gt;. You can then run ack from your msysgit bash prompt.\r\n\r\nIf you also want to be able to run ack from the Windows command prompt, then you will need to create a batch script somewhere in your Windows path&lt;sup&gt;2&lt;\/sup&gt; with the contents:\r\n\r\n    @&quot;C:\\Program Files\\Git\\bin\\perl&quot; C:\\path\\to\\ack-standalone.pl %*\r\n\r\n(You&#39;ll obviously need to edit the paths above to match your msysgit installation and where you placed the ack script.)\r\n\r\n&lt;sub&gt;\r\n1: I just stuck mine in the mysysgit bin directory: `C:\\Program Files\\Git\\bin\\ack`. This isn&#39;t the most sensible location for it, but it works.  \r\n2: Again, I just created the file `ack.bat` in the msysgit bin directory `C:\\Program File\\Git\\bin`.&lt;\/sub&gt;",
        "body": "<p>If you already have msysgit installed, then you don't need to install Perl, because you already have a version. You just need to download <a href=\"http:\/\/betterthangrep.com\/ack-standalone\" rel=\"noreferrer\">the standalone version of ack<\/a> and put it somewhere in your bash path<sup>1<\/sup>. You can then run ack from your msysgit bash prompt.<\/p>\n\n<p>If you also want to be able to run ack from the Windows command prompt, then you will need to create a batch script somewhere in your Windows path<sup>2<\/sup> with the contents:<\/p>\n\n<pre><code>@\"C:\\Program Files\\Git\\bin\\perl\" C:\\path\\to\\ack-standalone.pl %*\n<\/code><\/pre>\n\n<p>(You'll obviously need to edit the paths above to match your msysgit installation and where you placed the ack script.)<\/p>\n\n<p><sub>\n1: I just stuck mine in the mysysgit bin directory: <code>C:\\Program Files\\Git\\bin\\ack<\/code>. This isn't the most sensible location for it, but it works.<br>\n2: Again, I just created the file <code>ack.bat<\/code> in the msysgit bin directory <code>C:\\Program File\\Git\\bin<\/code>.<\/sub><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 87951,
            "reputation": 4373,
            "user_id": 243588,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/ece68216deba7addd3ad89774758c383?s=256&d=identicon&r=PG",
            "display_name": "Demosthenex",
            "link": "https:\/\/stackoverflow.com\/users\/243588\/demosthenex"
        },
        "is_accepted": true,
        "score": 35,
        "last_activity_date": 1308165439,
        "last_edit_date": null,
        "creation_date": 1308165439,
        "answer_id": 6363029,
        "question_id": 6361312,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Sample text:\r\n\r\n&gt; Clinton said&lt;br&gt;\r\n&gt; Bush used crayons&lt;bR&gt;\r\n&gt; Reagan forgot&lt;br&gt;\r\n\r\nJust omitting a Bush match:\r\n\r\n    $ perl -ne &#39;print if \/^(Clinton|Reagan)\/&#39; textfile\r\n    Clinton said\r\n    Reagan forgot\r\n\r\nOr if you really want to specify:\r\n\r\n    $ perl -ne &#39;print if \/^(?!Bush)(Clinton|Reagan)\/&#39; textfile\r\n    Clinton said\r\n    Reagan forgot\r\n\r\n\r\n",
        "body": "<p>Sample text:<\/p>\n\n<blockquote>\n  <p>Clinton said<br>\n  Bush used crayons<bR>\n  Reagan forgot<br><\/p>\n<\/blockquote>\n\n<p>Just omitting a Bush match:<\/p>\n\n<pre><code>$ perl -ne 'print if \/^(Clinton|Reagan)\/' textfile\nClinton said\nReagan forgot\n<\/code><\/pre>\n\n<p>Or if you really want to specify:<\/p>\n\n<pre><code>$ perl -ne 'print if \/^(?!Bush)(Clinton|Reagan)\/' textfile\nClinton said\nReagan forgot\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1118036,
            "reputation": 1297,
            "user_id": 1106924,
            "user_type": "registered",
            "accept_rate": 63,
            "profile_image": "https:\/\/i.stack.imgur.com\/pOdBu.jpg?s=256&g=1",
            "display_name": "Clayton Dukes",
            "link": "https:\/\/stackoverflow.com\/users\/1106924\/clayton-dukes"
        },
        "is_accepted": false,
        "score": 35,
        "last_activity_date": 1351267203,
        "last_edit_date": null,
        "creation_date": 1351267203,
        "answer_id": 13090364,
        "question_id": 3462058,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "I was looking for an easy solution for this as well and found that this works:\r\n\r\n    (echo y;echo o conf prerequisites_policy follow;echo o conf commit)|cpan\r\n\r\nJust thought I would post it here in case anyone else comes along.\r\n",
        "body": "<p>I was looking for an easy solution for this as well and found that this works:<\/p>\n\n<pre><code>(echo y;echo o conf prerequisites_policy follow;echo o conf commit)|cpan\n<\/code><\/pre>\n\n<p>Just thought I would post it here in case anyone else comes along.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5473,
            "reputation": 130134,
            "user_id": 2766176,
            "user_type": "registered",
            "accept_rate": 61,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/edd8638efe875601bfe394a8aea5b16d?s=256&d=identicon&r=PG",
            "display_name": "brian d foy",
            "link": "https:\/\/stackoverflow.com\/users\/2766176\/brian-d-foy"
        },
        "is_accepted": false,
        "score": 34,
        "last_activity_date": 1589660733,
        "last_edit_date": 1589660733.0,
        "creation_date": 1267050087,
        "answer_id": 2330077,
        "question_id": 2329385,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "[Data::Structure::Util](http:\/\/www.metacpan.org\/module\/Data::Structure::Util) has an `unbless` function that will do it for you. As Erik points out, [JSON::XS](http:\/\/www.metacpan.org\/module\/JSON::XS) won&#39;t normally accept blessed references (although I wish it would just ignore that and deal with the data structure). There&#39;s no way around it in this case.\r\n\r\nBut consider why do you think you need to unbless it. Are you doing this for one of your own classes or a different class? This sounds suspiciously like The Wrong Thing To Do. There might be a better way.\r\n\r\nYou have the same problem as breaking encapsulation because you have to assume that you know what the internal structure of the reference is. If you are going to do that, you can just ignore the object-oriented stuff and access the structure directly.\r\n\r\nIf you are going to do this for your own class, consider providing a method to return a data structure (which doesn&#39;t have to be the original structure) instead of changing the object.\r\n\r\nYou mention in a follow-up comment that you might be doing this to get around some Template Toolkit behavior. I had this situation in two ways depending on the situation:\r\n\r\n* Only pass the data you need to the template instead of the whole object.\r\n* Add methods to the object to get the data you want in the template.\r\n\r\nPerl is DWIM, but TT is even DWIMmier, which is unfortunate sometimes.\r\n\r\n&lt;hr&gt;\r\n\r\nHere&#39;s a quick hack where I define a `TO_JSON` in `UNIVERSAL` so it applies to all objects. It makes a deep copy, unblesses it, and returns the data structure.\r\n\r\n\t#!perl\r\n\tuse v5.10;\r\n\r\n\tsub UNIVERSAL::TO_JSON {\r\n\t\tmy( $self ) = shift;\r\n\t\r\n\t\tuse Storable qw(dclone);\r\n\t\tuse Data::Structure::Util qw(unbless);\r\n\t\r\n\t\tmy $clone = unbless( dclone( $self ) );\r\n\t\r\n\t\t$clone;\r\n\t\t}\r\n\r\n\tmy $data = bless {\r\n\t\tfoo =&gt; bless( [], &#39;Local::Array&#39; ),\r\n\t\tquack =&gt; bless( {\r\n\t\t\tmap { $_ =&gt; bless [$_, $_**2], &#39;Local::Array&#39; } \r\n\t\t\t    grep { is_prime } 1 .. 10\r\n\t\t\t}, &#39;Local::Hash&#39; ),\r\n\t\t}, &#39;Local::Hash&#39;;\r\n\r\n\tuse JSON::XS;\r\n\tmy $jsonner = JSON::XS-&gt;new-&gt;pretty-&gt;convert_blessed(1);\r\n\tsay $jsonner-&gt;encode( $data );\r\n",
        "body": "<p><a href=\"http:\/\/www.metacpan.org\/module\/Data::Structure::Util\" rel=\"nofollow noreferrer\">Data::Structure::Util<\/a> has an <code>unbless<\/code> function that will do it for you. As Erik points out, <a href=\"http:\/\/www.metacpan.org\/module\/JSON::XS\" rel=\"nofollow noreferrer\">JSON::XS<\/a> won't normally accept blessed references (although I wish it would just ignore that and deal with the data structure). There's no way around it in this case.<\/p>\n\n<p>But consider why do you think you need to unbless it. Are you doing this for one of your own classes or a different class? This sounds suspiciously like The Wrong Thing To Do. There might be a better way.<\/p>\n\n<p>You have the same problem as breaking encapsulation because you have to assume that you know what the internal structure of the reference is. If you are going to do that, you can just ignore the object-oriented stuff and access the structure directly.<\/p>\n\n<p>If you are going to do this for your own class, consider providing a method to return a data structure (which doesn't have to be the original structure) instead of changing the object.<\/p>\n\n<p>You mention in a follow-up comment that you might be doing this to get around some Template Toolkit behavior. I had this situation in two ways depending on the situation:<\/p>\n\n<ul>\n<li>Only pass the data you need to the template instead of the whole object.<\/li>\n<li>Add methods to the object to get the data you want in the template.<\/li>\n<\/ul>\n\n<p>Perl is DWIM, but TT is even DWIMmier, which is unfortunate sometimes.<\/p>\n\n<hr>\n\n<p>Here's a quick hack where I define a <code>TO_JSON<\/code> in <code>UNIVERSAL<\/code> so it applies to all objects. It makes a deep copy, unblesses it, and returns the data structure.<\/p>\n\n<pre><code>#!perl\nuse v5.10;\n\nsub UNIVERSAL::TO_JSON {\n    my( $self ) = shift;\n\n    use Storable qw(dclone);\n    use Data::Structure::Util qw(unbless);\n\n    my $clone = unbless( dclone( $self ) );\n\n    $clone;\n    }\n\nmy $data = bless {\n    foo =&gt; bless( [], 'Local::Array' ),\n    quack =&gt; bless( {\n        map { $_ =&gt; bless [$_, $_**2], 'Local::Array' } \n            grep { is_prime } 1 .. 10\n        }, 'Local::Hash' ),\n    }, 'Local::Hash';\n\nuse JSON::XS;\nmy $jsonner = JSON::XS-&gt;new-&gt;pretty-&gt;convert_blessed(1);\nsay $jsonner-&gt;encode( $data );\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 289134,
            "reputation": 372786,
            "user_id": 589924,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/b2cf53d5a3d25f95c0db4e025aed4153?s=256&d=identicon&r=PG",
            "display_name": "ikegami",
            "link": "https:\/\/stackoverflow.com\/users\/589924\/ikegami"
        },
        "is_accepted": false,
        "score": 33,
        "last_activity_date": 1571087114,
        "last_edit_date": 1571087114.0,
        "creation_date": 1445488639,
        "answer_id": 33273488,
        "question_id": 33267765,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "XML::Simple is the most complex XML parser available\r\n---\r\n\r\nThe main problem with XML::Simple is that the resulting structure is extremely hard to navigate correctly. `$ele-&gt;{ele_name}` can return any of the following (even for elements that follow the same spec):\r\n\r\n    [ { att =&gt; &#39;val&#39;, ..., content =&gt; [ &#39;content&#39;, &#39;content&#39; ] }, ... ]\r\n    [ { att =&gt; &#39;val&#39;, ..., content =&gt; &#39;content&#39; }, ... ]\r\n    [ { att =&gt; &#39;val&#39;, ..., }, ... ]\r\n    [ &#39;content&#39;, ... ]\r\n    { &#39;id&#39; =&gt; { att =&gt; &#39;val&#39;, ..., content =&gt; [ &#39;content&#39;, &#39;content&#39; ] }, ... }\r\n    { &#39;id&#39; =&gt; { att =&gt; &#39;val&#39;, ..., content =&gt; &#39;content&#39; }, ... }\r\n    { &#39;id&#39; =&gt; { att =&gt; &#39;val&#39;, ... }, ... }\r\n    { &#39;id&#39; =&gt; { content =&gt; [ &#39;content&#39;, &#39;content&#39; ] }, ... }\r\n    { &#39;id&#39; =&gt; { content =&gt; &#39;content&#39; }, ... }\r\n    { att =&gt; &#39;val&#39;, ..., content =&gt; [ &#39;content&#39;, &#39;content&#39; ] }\r\n    { att =&gt; &#39;val&#39;, ..., content =&gt; &#39;content&#39; }\r\n    { att =&gt; &#39;val&#39;, ..., }\r\n    &#39;content&#39;\r\n\r\nThis means that you have to perform all kinds of checks to see what you actually got. But the sheer complexity of this encourages developers to make very bad assumptions instead. This leads to all kinds of problems slipping into production, causing live code to fail when corner cases are encountered.\r\n\r\nThe options for making a more regular tree fall short\r\n---\r\n\r\nYou can use the following options to create a more regular tree:\r\n\r\n    ForceArray =&gt; 1, KeyAttr =&gt; [], ForceContent =&gt; 1\r\n\r\nBut even with these options, many checks are still needed to extract information from a tree. For example, getting the `\/root\/eles\/ele` nodes from a document is a common operation that should be trivial to perform, but the following is required when using XML::Simple:\r\n\r\n    # Requires: ForceArray =&gt; 1, KeyAttr =&gt; [], ForceContent =&gt; 1, KeepRoot =&gt; 0\r\n    # Assumes the format doesn&#39;t allow for more than one \/root\/eles.\r\n    # The format wouldn&#39;t be supported if it allowed \/root to have an attr named eles.\r\n    # The format wouldn&#39;t be supported if it allowed \/root\/eles to have an attr named ele.\r\n    my @eles;\r\n    if ($doc-&gt;{eles} &amp;&amp; $doc-&gt;{eles}[0]{ele}) {\r\n        @eles = @{ $doc-&gt;{eles}[0]{ele} };\r\n    }\r\n\r\nIn another parser, one would use the following:\r\n\r\n    my @eles = $doc-&gt;findnodes(&#39;\/root\/eles\/ele&#39;);\r\n\r\nXML::Simple imposes *numerous* limitations, and it lacks common features\r\n---\r\n\r\n* It&#39;s completely useless for producing XML. Even with `ForceArray =&gt; 1, ForceContent =&gt; 1, KeyAttr =&gt; [], KeepRoot =&gt; 1`, there are far too many details that can&#39;t be controlled.\r\n\r\n* It doesn&#39;t preserve the relative order of children with different names.\r\n\r\n* It has limited (with XML::SAX backend) or no (with XML::Parser backend) support for namespaces and namespace prefixes.\r\n\r\n* Some backends (e.g. XML::Parser) are unable to handle encodings not based on ASCII (e.g. UTF-16le).\r\n\r\n* An element can&#39;t have a child element and an attribute with the same name.\r\n\r\n* It can&#39;t create XML documents with comments.\r\n\r\nIgnoring the major issues previously mentioned, XML::Simple could still be usable with these limitations. But why go to the trouble of checking if XML::Simple can handle your document format and risk having to switch to another parser later? You could simply use a better parser for all your documents from the start.\r\n\r\nNot only do some other parsers not subject you to these limitations, they provide loads of other useful features in addition. The following are a few features they might have that XML::Simple doesn&#39;t:\r\n\r\n* Speed. XML::Simple is extremely slow, especially if you use a backend other than XML::Parser. I&#39;m talking orders of magnitude slower than other parsers.\r\n\r\n* XPath selectors or similar.\r\n\r\n* Support for extremely large documents.\r\n\r\n* Support for pretty printing.\r\n\r\nIs XML::Simple ever useful?\r\n---\r\n\r\nThe only format for which XML::Simple is simplest is one where no element is optional. I&#39;ve had experience with countless XML formats, and I&#39;ve never encountered such a format.\r\n\r\nThis fragility and complexity alone are reasons enough to warrant staying away from XML::Simple, but there are others.\r\n\r\nAlternatives\r\n---\r\n\r\nI use XML::LibXML. It&#39;s an extremely fast, full-featured parser. If I ever needed to handle documents that didn&#39;t fit into memory, I&#39;d use XML::LibXML::Reader (and its `copyCurrentNode(1)`) or XML::Twig (using `twig_roots`).\r\n",
        "body": "<h2>XML::Simple is the most complex XML parser available<\/h2>\n\n<p>The main problem with XML::Simple is that the resulting structure is extremely hard to navigate correctly. <code>$ele-&gt;{ele_name}<\/code> can return any of the following (even for elements that follow the same spec):<\/p>\n\n<pre><code>[ { att =&gt; 'val', ..., content =&gt; [ 'content', 'content' ] }, ... ]\n[ { att =&gt; 'val', ..., content =&gt; 'content' }, ... ]\n[ { att =&gt; 'val', ..., }, ... ]\n[ 'content', ... ]\n{ 'id' =&gt; { att =&gt; 'val', ..., content =&gt; [ 'content', 'content' ] }, ... }\n{ 'id' =&gt; { att =&gt; 'val', ..., content =&gt; 'content' }, ... }\n{ 'id' =&gt; { att =&gt; 'val', ... }, ... }\n{ 'id' =&gt; { content =&gt; [ 'content', 'content' ] }, ... }\n{ 'id' =&gt; { content =&gt; 'content' }, ... }\n{ att =&gt; 'val', ..., content =&gt; [ 'content', 'content' ] }\n{ att =&gt; 'val', ..., content =&gt; 'content' }\n{ att =&gt; 'val', ..., }\n'content'\n<\/code><\/pre>\n\n<p>This means that you have to perform all kinds of checks to see what you actually got. But the sheer complexity of this encourages developers to make very bad assumptions instead. This leads to all kinds of problems slipping into production, causing live code to fail when corner cases are encountered.<\/p>\n\n<h2>The options for making a more regular tree fall short<\/h2>\n\n<p>You can use the following options to create a more regular tree:<\/p>\n\n<pre><code>ForceArray =&gt; 1, KeyAttr =&gt; [], ForceContent =&gt; 1\n<\/code><\/pre>\n\n<p>But even with these options, many checks are still needed to extract information from a tree. For example, getting the <code>\/root\/eles\/ele<\/code> nodes from a document is a common operation that should be trivial to perform, but the following is required when using XML::Simple:<\/p>\n\n<pre><code># Requires: ForceArray =&gt; 1, KeyAttr =&gt; [], ForceContent =&gt; 1, KeepRoot =&gt; 0\n# Assumes the format doesn't allow for more than one \/root\/eles.\n# The format wouldn't be supported if it allowed \/root to have an attr named eles.\n# The format wouldn't be supported if it allowed \/root\/eles to have an attr named ele.\nmy @eles;\nif ($doc-&gt;{eles} &amp;&amp; $doc-&gt;{eles}[0]{ele}) {\n    @eles = @{ $doc-&gt;{eles}[0]{ele} };\n}\n<\/code><\/pre>\n\n<p>In another parser, one would use the following:<\/p>\n\n<pre><code>my @eles = $doc-&gt;findnodes('\/root\/eles\/ele');\n<\/code><\/pre>\n\n<h2>XML::Simple imposes <em>numerous<\/em> limitations, and it lacks common features<\/h2>\n\n<ul>\n<li><p>It's completely useless for producing XML. Even with <code>ForceArray =&gt; 1, ForceContent =&gt; 1, KeyAttr =&gt; [], KeepRoot =&gt; 1<\/code>, there are far too many details that can't be controlled.<\/p><\/li>\n<li><p>It doesn't preserve the relative order of children with different names.<\/p><\/li>\n<li><p>It has limited (with XML::SAX backend) or no (with XML::Parser backend) support for namespaces and namespace prefixes.<\/p><\/li>\n<li><p>Some backends (e.g. XML::Parser) are unable to handle encodings not based on ASCII (e.g. UTF-16le).<\/p><\/li>\n<li><p>An element can't have a child element and an attribute with the same name.<\/p><\/li>\n<li><p>It can't create XML documents with comments.<\/p><\/li>\n<\/ul>\n\n<p>Ignoring the major issues previously mentioned, XML::Simple could still be usable with these limitations. But why go to the trouble of checking if XML::Simple can handle your document format and risk having to switch to another parser later? You could simply use a better parser for all your documents from the start.<\/p>\n\n<p>Not only do some other parsers not subject you to these limitations, they provide loads of other useful features in addition. The following are a few features they might have that XML::Simple doesn't:<\/p>\n\n<ul>\n<li><p>Speed. XML::Simple is extremely slow, especially if you use a backend other than XML::Parser. I'm talking orders of magnitude slower than other parsers.<\/p><\/li>\n<li><p>XPath selectors or similar.<\/p><\/li>\n<li><p>Support for extremely large documents.<\/p><\/li>\n<li><p>Support for pretty printing.<\/p><\/li>\n<\/ul>\n\n<h2>Is XML::Simple ever useful?<\/h2>\n\n<p>The only format for which XML::Simple is simplest is one where no element is optional. I've had experience with countless XML formats, and I've never encountered such a format.<\/p>\n\n<p>This fragility and complexity alone are reasons enough to warrant staying away from XML::Simple, but there are others.<\/p>\n\n<h2>Alternatives<\/h2>\n\n<p>I use XML::LibXML. It's an extremely fast, full-featured parser. If I ever needed to handle documents that didn't fit into memory, I'd use XML::LibXML::Reader (and its <code>copyCurrentNode(1)<\/code>) or XML::Twig (using <code>twig_roots<\/code>).<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 6565,
            "reputation": 15953,
            "user_id": 11095,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/1c911d40f47f422f820d8a524658bd5a?s=256&d=identicon&r=PG",
            "display_name": "mirod",
            "link": "https:\/\/stackoverflow.com\/users\/11095\/mirod"
        },
        "is_accepted": false,
        "score": 32,
        "last_activity_date": 1295347668,
        "last_edit_date": 1295347668.0,
        "creation_date": 1244538991,
        "answer_id": 969025,
        "question_id": 968441,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "No use strict\/use warnings, systematic use of substr instead of regexp, no use of modules. This is definitely not someone who has &quot;*very good Perl experience*&quot;. At least not for real-life Perl projects. Like you, I suspect that it&#39;s probably a C programmer with a basic knowledge of Perl.\r\n\r\nThat doesn&#39;t mean that they can&#39;t learn, especially as there are other Perl people around. It does seem to mean that they overstated their qualification for the job though. A few more questions about how exactly they acquired that *very good Perl experience* would be in order.",
        "body": "<p>No use strict\/use warnings, systematic use of substr instead of regexp, no use of modules. This is definitely not someone who has \"<em>very good Perl experience<\/em>\". At least not for real-life Perl projects. Like you, I suspect that it's probably a C programmer with a basic knowledge of Perl.<\/p>\n\n<p>That doesn't mean that they can't learn, especially as there are other Perl people around. It does seem to mean that they overstated their qualification for the job though. A few more questions about how exactly they acquired that <em>very good Perl experience<\/em> would be in order.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 153395,
            "reputation": 105635,
            "user_id": 368630,
            "user_type": "registered",
            "accept_rate": 83,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/107085826cfbb2700f535417a12c89cb?s=256&d=identicon&r=PG",
            "display_name": "David W.",
            "link": "https:\/\/stackoverflow.com\/users\/368630\/david-w"
        },
        "is_accepted": false,
        "score": 32,
        "last_activity_date": 1300226651,
        "last_edit_date": 1300226651.0,
        "creation_date": 1300225665,
        "answer_id": 5318503,
        "question_id": 129945,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "The value `0 but true` is a special case in Perl. Although to your mere mortal eyes, it doesn&#39;t look like a number, wise and all knowing Perl understands it really is a number.\r\n\r\nIt has to do with the fact that when a Perl subroutine returns a 0 value, it is assumed that the routine failed or returned a false value.\r\n\r\nImagine I have a subroutine that returns the sum of two numbers:\r\n\r\n    die &quot;You can only add two numbers\\n&quot; if (not add(3, -2));\r\n    die &quot;You can only add two numbers\\n&quot; if (not add(&quot;cow&quot;, &quot;dog&quot;));\r\n    die &quot;You can only add two numbers\\n&quot; if (not add(3, -3));\r\n\r\nThe first statement won&#39;t die because the subroutine will return a `1`. That&#39;s good.\r\nThe second statement will die because the subroutine won&#39;t be able to add _cow_ to _dog_.\r\n\r\nAnd, the third statement?\r\n\r\nHmmm, I can add `3` to `-3`. I just get `0`, but then my program will die even though the `add` subroutine worked!\r\n\r\nTo get around this, Perl considers `0 but true` to be a number. If my _add_ subroutine returns not merely _0_, but _0 but true_, my third statement will work.\r\n\r\nBut is _0 but true_ a numeric zero? Try these:\r\n\r\n    my $value = &quot;0 but true&quot;;\r\n    print qq(Add 1,000,000 to it: ) . (1_000_000 + $value) . &quot;\\n&quot;;\r\n    print &quot;Multiply it by 1,000,000: &quot; . 1_000_000 * $value . &quot;\\n&quot;;\r\n\r\nYup, it&#39;s zero!\r\n\r\nThe [index](http:\/\/perldoc.perl.org\/functions\/index.html) subroutine is a very old piece of Perl and existed before the concept of _0 but true_ was around. It is suppose to return the position of the substring located in the string:\r\n\r\n    index(&quot;barfoo&quot;, &quot;foo&quot;);   #This returns 3\r\n    index(&quot;barfoo&quot;, &quot;bar&quot;);   #This returns 0\r\n    index(&quot;barfoo&quot;, &quot;fu&quot;);    #This returns ...uh...\r\n\r\nThe last statment returns a `-1`. Which means if I did this:\r\n\r\n    if ($position = index($string, $substring)) {\r\n       print &quot;It worked!\\n&quot;;\r\n    }\r\n    else {\r\n       print &quot;If failed!\\n&quot;;\r\n    }\r\n\r\nAs I normally do with standard functions, it wouldn&#39;t work. If I used &quot;barfoo&quot; and &quot;bar&quot; like I did in the second statement, The `else` clause would execute, but if I used &quot;barfoo&quot; and &quot;fu&quot; as in the third, the `if` clause would execute. Not what I want.\r\n\r\nHowever, if the `index` subroutine returned _0 but true_ for the second statement and `undef` for the third statement, my `if`\/`else` clause would have worked.",
        "body": "<p>The value <code>0 but true<\/code> is a special case in Perl. Although to your mere mortal eyes, it doesn't look like a number, wise and all knowing Perl understands it really is a number.<\/p>\n\n<p>It has to do with the fact that when a Perl subroutine returns a 0 value, it is assumed that the routine failed or returned a false value.<\/p>\n\n<p>Imagine I have a subroutine that returns the sum of two numbers:<\/p>\n\n<pre><code>die \"You can only add two numbers\\n\" if (not add(3, -2));\ndie \"You can only add two numbers\\n\" if (not add(\"cow\", \"dog\"));\ndie \"You can only add two numbers\\n\" if (not add(3, -3));\n<\/code><\/pre>\n\n<p>The first statement won't die because the subroutine will return a <code>1<\/code>. That's good.\nThe second statement will die because the subroutine won't be able to add <em>cow<\/em> to <em>dog<\/em>.<\/p>\n\n<p>And, the third statement?<\/p>\n\n<p>Hmmm, I can add <code>3<\/code> to <code>-3<\/code>. I just get <code>0<\/code>, but then my program will die even though the <code>add<\/code> subroutine worked!<\/p>\n\n<p>To get around this, Perl considers <code>0 but true<\/code> to be a number. If my <em>add<\/em> subroutine returns not merely <em>0<\/em>, but <em>0 but true<\/em>, my third statement will work.<\/p>\n\n<p>But is <em>0 but true<\/em> a numeric zero? Try these:<\/p>\n\n<pre><code>my $value = \"0 but true\";\nprint qq(Add 1,000,000 to it: ) . (1_000_000 + $value) . \"\\n\";\nprint \"Multiply it by 1,000,000: \" . 1_000_000 * $value . \"\\n\";\n<\/code><\/pre>\n\n<p>Yup, it's zero!<\/p>\n\n<p>The <a href=\"http:\/\/perldoc.perl.org\/functions\/index.html\" rel=\"noreferrer\">index<\/a> subroutine is a very old piece of Perl and existed before the concept of <em>0 but true<\/em> was around. It is suppose to return the position of the substring located in the string:<\/p>\n\n<pre><code>index(\"barfoo\", \"foo\");   #This returns 3\nindex(\"barfoo\", \"bar\");   #This returns 0\nindex(\"barfoo\", \"fu\");    #This returns ...uh...\n<\/code><\/pre>\n\n<p>The last statment returns a <code>-1<\/code>. Which means if I did this:<\/p>\n\n<pre><code>if ($position = index($string, $substring)) {\n   print \"It worked!\\n\";\n}\nelse {\n   print \"If failed!\\n\";\n}\n<\/code><\/pre>\n\n<p>As I normally do with standard functions, it wouldn't work. If I used \"barfoo\" and \"bar\" like I did in the second statement, The <code>else<\/code> clause would execute, but if I used \"barfoo\" and \"fu\" as in the third, the <code>if<\/code> clause would execute. Not what I want.<\/p>\n\n<p>However, if the <code>index<\/code> subroutine returned <em>0 but true<\/em> for the second statement and <code>undef<\/code> for the third statement, my <code>if<\/code>\/<code>else<\/code> clause would have worked.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 7714,
            "reputation": 7366,
            "user_id": 13467,
            "user_type": "registered",
            "accept_rate": 25,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/0daa23328fbc008f80a960674cd267cf?s=256&d=identicon&r=PG",
            "display_name": "Alexandr Ciornii",
            "link": "https:\/\/stackoverflow.com\/users\/13467\/alexandr-ciornii"
        },
        "is_accepted": false,
        "score": 31,
        "last_activity_date": 1380744630,
        "last_edit_date": 1380744630.0,
        "creation_date": 1249592061,
        "answer_id": 1241379,
        "question_id": 1237286,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "1.  Install [`PAR::Packer`][PAR::Packer]. Example for *nix:\r\n\r\n    &lt;pre&gt;sudo cpan -i PAR::Packer&lt;\/pre&gt;\r\n\r\n    For Strawberry Perl for Windows or for ActivePerl and MSVC installed:\r\n\r\n    &lt;pre&gt;cpan -i PAR::Packer&lt;\/pre&gt;\r\n\r\n2.  Pack it with &lt;a href=&quot;http:\/\/search.cpan.org\/perldoc?pp&quot;&gt;`pp`&lt;\/a&gt;. It will create an executable named &quot;example&quot; or &quot;example.exe&quot; on Windows.\r\n\r\n    &lt;pre&gt;pp -o example example.pl&lt;\/pre&gt;\r\n\r\n\r\nThis would work only on the OS where it was built.\r\n\r\n*P.S. It is really hard to find a Unix clone without Perl. Did you mean Windows?*\r\n\r\n[PAR::Packer]: http:\/\/search.cpan.org\/perldoc?PAR::Packer",
        "body": "<ol>\n<li><p>Install <a href=\"http:\/\/search.cpan.org\/perldoc?PAR::Packer\" rel=\"noreferrer\"><code>PAR::Packer<\/code><\/a>. Example for *nix:<\/p>\n\n<pre>sudo cpan -i PAR::Packer<\/pre>\n\n<p>For Strawberry Perl for Windows or for ActivePerl and MSVC installed:<\/p>\n\n<pre>cpan -i PAR::Packer<\/pre><\/li>\n<li><p>Pack it with <a href=\"http:\/\/search.cpan.org\/perldoc?pp\" rel=\"noreferrer\"><code>pp<\/code><\/a>. It will create an executable named \"example\" or \"example.exe\" on Windows.<\/p>\n\n<pre>pp -o example example.pl<\/pre><\/li>\n<\/ol>\n\n<p>This would work only on the OS where it was built.<\/p>\n\n<p><em>P.S. It is really hard to find a Unix clone without Perl. Did you mean Windows?<\/em><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 440903,
            "reputation": 2316,
            "user_id": 830741,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/0685bc4f9d869526098968f72812ab75?s=256&d=identicon&r=PG",
            "display_name": "frezik",
            "link": "https:\/\/stackoverflow.com\/users\/830741\/frezik"
        },
        "is_accepted": true,
        "score": 31,
        "last_activity_date": 1320264666,
        "last_edit_date": null,
        "creation_date": 1320264666,
        "answer_id": 7986723,
        "question_id": 7983115,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Excluding any kind of embedded code, such as `?{ }`, they probably don&#39;t cover all of context-free, much less Turing Machines. They might, but to my knowledge, nobody has actually proven it one way or another. Given that people have been trying to solve certain context-free problems with Perl regexes for a while and haven&#39;t come up with a solution yet, it&#39;s likely that they are not context-free.\r\n\r\nThere is an interesting discussion to be had about what features are merely convenient, and which actually add power.  For instance, matching 0&lt;sup&gt;n&lt;\/sup&gt;*1*0&lt;sup&gt;n&lt;\/sup&gt; (that&#39;s notation for &quot;any number of zeros, followed by a one, followed by the same number of zeros as before&quot;) is not something that can be done with pure regexes.  You can prove this can&#39;t be done with regexes using the Pumping Lemma, but the simple, informal proof is that the regex would have to count an arbitrary number of zeros, and regexes can&#39;t do counting.\r\n\r\nHowever, backreferences can match that with:\r\n\r\n    \/(0*) 1 \\1\/x;\r\n\r\nSo that means backreferences give you more power, and are not a mere convenience. What else might give us more power, I wonder?\r\n\r\nAlso, Perl6 &quot;patterns&quot; (they&#39;re not even pretending they&#39;re regexes anymore) are designed to look kinda like Perl5 regexes (so you don&#39;t need to relearn much), but they have enough features added to be fully context-free. They&#39;re actually designed so you can use them to alter the way the language is parsed within a lexical scope.",
        "body": "<p>Excluding any kind of embedded code, such as <code>?{ }<\/code>, they probably don't cover all of context-free, much less Turing Machines. They might, but to my knowledge, nobody has actually proven it one way or another. Given that people have been trying to solve certain context-free problems with Perl regexes for a while and haven't come up with a solution yet, it's likely that they are not context-free.<\/p>\n\n<p>There is an interesting discussion to be had about what features are merely convenient, and which actually add power.  For instance, matching 0<sup>n<\/sup>*1*0<sup>n<\/sup> (that's notation for \"any number of zeros, followed by a one, followed by the same number of zeros as before\") is not something that can be done with pure regexes.  You can prove this can't be done with regexes using the Pumping Lemma, but the simple, informal proof is that the regex would have to count an arbitrary number of zeros, and regexes can't do counting.<\/p>\n\n<p>However, backreferences can match that with:<\/p>\n\n<pre><code>\/(0*) 1 \\1\/x;\n<\/code><\/pre>\n\n<p>So that means backreferences give you more power, and are not a mere convenience. What else might give us more power, I wonder?<\/p>\n\n<p>Also, Perl6 \"patterns\" (they're not even pretending they're regexes anymore) are designed to look kinda like Perl5 regexes (so you don't need to relearn much), but they have enough features added to be fully context-free. They're actually designed so you can use them to alter the way the language is parsed within a lexical scope.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 9399,
            "reputation": 17367,
            "user_id": 17339,
            "user_type": "registered",
            "accept_rate": 87,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/d1ed8a9e71adc2b356cfc4e020e0dd0f?s=256&d=identicon&r=PG",
            "display_name": "Drew Stephens",
            "link": "https:\/\/stackoverflow.com\/users\/17339\/drew-stephens"
        },
        "is_accepted": false,
        "score": 30,
        "last_activity_date": 1222297090,
        "last_edit_date": null,
        "creation_date": 1222297090,
        "answer_id": 130460,
        "question_id": 129607,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "Quoting from [*Learning Perl*][1]:\r\n\r\n&gt; But local is misnamed, or at least misleadingly named. Our friend Chip Salzenberg says that if he ever gets a chance to go back in a time machine to 1986 and give Larry one piece of advice, he&#39;d tell Larry to call local by the name &quot;save&quot; instead.[14] That&#39;s because local actually will save the given global variable&#39;s value away, so it will later automatically be restored to the global variable. (That&#39;s right: these so-called &quot;local&quot; variables are actually globals!) This save-and-restore mechanism is the same one we&#39;ve already seen twice now, in the control variable of a foreach loop, and in the @_ array of subroutine parameters.\r\n\r\nSo, `local` saves a global variable&#39;s current value and then set it to some form of empty value.  You&#39;ll often see it used to slurp an entire file, rather than leading just a line:\r\n\r\n    my $file_content;\r\n    {\r\n        local $\/;\r\n        open IN, &quot;foo.txt&quot;;\r\n        $file_content = &lt;IN&gt;;\r\n    } \r\n\r\nCalling `local $\/` sets the input record separator (the value that Perl stops reading a &quot;line&quot; at) to an empty value, causing the spaceship operator to read the entire file, so it never hits the input record separator.\r\n\r\n  [1]:http:\/\/oreilly.com\/catalog\/lperl3\/chapter\/ch04.html",
        "body": "<p>Quoting from <a href=\"http:\/\/oreilly.com\/catalog\/lperl3\/chapter\/ch04.html\" rel=\"noreferrer\"><em>Learning Perl<\/em><\/a>:<\/p>\n\n<blockquote>\n  <p>But local is misnamed, or at least misleadingly named. Our friend Chip Salzenberg says that if he ever gets a chance to go back in a time machine to 1986 and give Larry one piece of advice, he'd tell Larry to call local by the name \"save\" instead.[14] That's because local actually will save the given global variable's value away, so it will later automatically be restored to the global variable. (That's right: these so-called \"local\" variables are actually globals!) This save-and-restore mechanism is the same one we've already seen twice now, in the control variable of a foreach loop, and in the @_ array of subroutine parameters.<\/p>\n<\/blockquote>\n\n<p>So, <code>local<\/code> saves a global variable's current value and then set it to some form of empty value.  You'll often see it used to slurp an entire file, rather than leading just a line:<\/p>\n\n<pre><code>my $file_content;\n{\n    local $\/;\n    open IN, \"foo.txt\";\n    $file_content = &lt;IN&gt;;\n} \n<\/code><\/pre>\n\n<p>Calling <code>local $\/<\/code> sets the input record separator (the value that Perl stops reading a \"line\" at) to an empty value, causing the spaceship operator to read the entire file, so it never hits the input record separator.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 831,
            "reputation": 123977,
            "user_id": 1084,
            "user_type": "registered",
            "accept_rate": 86,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/898c2217a5457bdef0a0ed58283010dc?s=256&d=identicon&r=PG",
            "display_name": "Nathan Fellman",
            "link": "https:\/\/stackoverflow.com\/users\/1084\/nathan-fellman"
        },
        "is_accepted": false,
        "score": 29,
        "last_activity_date": 1575017839,
        "last_edit_date": 1575017839.0,
        "creation_date": 1245842266,
        "answer_id": 1037736,
        "question_id": 473666,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Perl does in fact have an enum type like in C.  Try this for details.\r\n\r\n[`perldoc enum`][enum]\r\n\r\nFor instance:\r\n\r\n    use enum qw(HOME WORK MOBILE);\r\n\r\nNow we have:\r\n\r\n    HOME == 0\r\n    WORK == 1\r\n    MOBILE == 2\r\n\r\nYou can also set the indices yourself:\r\n\r\n    use enum qw(HOME=0 WORK MOBILE=10 FAX);\r\n\r\nNow we have:\r\n\r\n    HOME == 0\r\n    WORK == 1\r\n    MOBILE == 10\r\n    FAX == 11\r\n\r\nLook [here][enum] for more details.\r\n\r\nNote that this isn&#39;t supported in every version of Perl.  I know that v5.8.3 doesn&#39;t support it, while v5.8.7 does.\r\n\r\n\r\n[enum]: https:\/\/metacpan.org\/pod\/enum &quot;enum - C style enumerated types and bitmask flags in Perl&quot;",
        "body": "<p>Perl does in fact have an enum type like in C.  Try this for details.<\/p>\n\n<p><a href=\"https:\/\/metacpan.org\/pod\/enum\" rel=\"nofollow noreferrer\" title=\"enum - C style enumerated types and bitmask flags in Perl\"><code>perldoc enum<\/code><\/a><\/p>\n\n<p>For instance:<\/p>\n\n<pre><code>use enum qw(HOME WORK MOBILE);\n<\/code><\/pre>\n\n<p>Now we have:<\/p>\n\n<pre><code>HOME == 0\nWORK == 1\nMOBILE == 2\n<\/code><\/pre>\n\n<p>You can also set the indices yourself:<\/p>\n\n<pre><code>use enum qw(HOME=0 WORK MOBILE=10 FAX);\n<\/code><\/pre>\n\n<p>Now we have:<\/p>\n\n<pre><code>HOME == 0\nWORK == 1\nMOBILE == 10\nFAX == 11\n<\/code><\/pre>\n\n<p>Look <a href=\"https:\/\/metacpan.org\/pod\/enum\" rel=\"nofollow noreferrer\" title=\"enum - C style enumerated types and bitmask flags in Perl\">here<\/a> for more details.<\/p>\n\n<p>Note that this isn't supported in every version of Perl.  I know that v5.8.3 doesn't support it, while v5.8.7 does.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 871917,
            "reputation": 499,
            "user_id": 922575,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/56418ff21d96f27b82c80b589df95ad6?s=256&d=identicon&r=PG",
            "display_name": "RandomMonkey",
            "link": "https:\/\/stackoverflow.com\/users\/922575\/randommonkey"
        },
        "is_accepted": false,
        "score": 29,
        "last_activity_date": 1314831255,
        "last_edit_date": null,
        "creation_date": 1314831255,
        "answer_id": 7264394,
        "question_id": 2329385,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "If you know what your object is backed by, you could do this without using packages.\r\n\r\nHash\r\n\r\n    $obj = bless {}, &#39;Obj&#39;;\r\n    print ref $obj, &quot;\\n&quot;;\r\n    $obj = { %$obj };\r\n    print ref $obj, &quot;\\n&quot;;\r\n\r\nArray\r\n\r\n    $obj = bless [], &#39;Obj&#39;;\r\n    print ref $obj , &quot;\\n&quot;;\r\n    $obj = [ @$obj ];\r\n    print ref $obj, &quot;\\n&quot;;\r\n\r\nScalar\r\n\r\n    $obj = bless \\$a, &quot;Obj&quot;;\r\n    print ref $obj, &quot;\\n&quot;;\r\n    $obj = \\${ $$obj };\r\n    print ref $obj, &quot;\\n&quot;;",
        "body": "<p>If you know what your object is backed by, you could do this without using packages.<\/p>\n\n<p>Hash<\/p>\n\n<pre><code>$obj = bless {}, 'Obj';\nprint ref $obj, \"\\n\";\n$obj = { %$obj };\nprint ref $obj, \"\\n\";\n<\/code><\/pre>\n\n<p>Array<\/p>\n\n<pre><code>$obj = bless [], 'Obj';\nprint ref $obj , \"\\n\";\n$obj = [ @$obj ];\nprint ref $obj, \"\\n\";\n<\/code><\/pre>\n\n<p>Scalar<\/p>\n\n<pre><code>$obj = bless \\$a, \"Obj\";\nprint ref $obj, \"\\n\";\n$obj = \\${ $$obj };\nprint ref $obj, \"\\n\";\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1650465,
            "reputation": 57288,
            "user_id": 1521179,
            "user_type": "registered",
            "accept_rate": 89,
            "profile_image": "https:\/\/i.stack.imgur.com\/MH7pk.png?s=256&g=1",
            "display_name": "amon",
            "link": "https:\/\/stackoverflow.com\/users\/1521179\/amon"
        },
        "is_accepted": false,
        "score": 29,
        "last_activity_date": 1372006228,
        "last_edit_date": 1592644375.0,
        "creation_date": 1371024665,
        "answer_id": 17060655,
        "question_id": 17039670,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "### Edit\n\nThe following solutions have two grave problems:\n\n 1. They can&#39;t match multiple `XXX` sequences starting on the same line, as the `pos` advances too much.\n 2. The second solution is incorrect: it matches consecutive lines where two `X` are above each other. There don&#39;t neccessarily have to be three in a row.\n\nTherefore, all upvotes (and the bounty) should go to either of [m.buettner](https:\/\/stackoverflow.com\/users\/1633117\/m-buettner)&#39;s [comprehensive .NET answer](https:\/\/stackoverflow.com\/a\/17176756\/1521179) or the [fascinating PCRE answer](https:\/\/stackoverflow.com\/a\/17177790\/1521179) from [Qtax](https:\/\/stackoverflow.com\/users\/107152\/qtax) himself.\n\n---\n\n## Original Answer\n\nThis is an answer using embedding of Perl code into regexes. Because a Perl regex can use code to assert arbitrary conditions inside regexes or emit partial regexes, they are not limited to  matching regular languages or context-free languages, but can match some parts of languages higher up in the Chomsky hierarchy.\n\nThe language you want to match can be described in regex terms as\n\n    ^ .{n} X .*\\n\n      .{n} X .*\\n\n      .{n} X\n\nwhere `n` is a number. This is about as complex as matching the *a&lt;sup&gt;n&lt;\/sup&gt;b&lt;sup&gt;n&lt;\/sup&gt;c&lt;sup&gt;n&lt;\/sup&gt;* language which is the canonical example for a context-sensitive language.\n\nWe can match the first line easily, and use some Perl code to emit the regex for the other lines:\n\n        \/^ (.*?) X\n           (?: .*\\n (??{&quot;.&quot; x length($1)}) X){2}\n        \/mx\n\nThat was short! What does it do?\n\n * `^ (.*?) X` anchores at the start of a line, matches as few non-newline characters as possible and then the `X`. We remember the line up to the `X` as capture group `$1`.\n\n * We repeat a group two times which matches the rest of the line, a newline, and then injects a regex that matches a string of the same length as `$1`. After that, there must be an `X`.\n\nThis regex will now match every string that has three `X` on top of each other.\n\nIf we want to extract *all* such sequences, we&#39;ll have to be nifty. Because sequences may overlap, e.g.\n\n    .X\n    XX\n    XX\n    X.\n\nthe position where the next match starts must not proceed past the first `X`. We can do this via a lookbehind and lookahead. Perl only supports constant-length lookbehind, but has the  `\\K` escape which provides similar semantics. Thus\n\n    \/^ (.*?) \\K X\n       (?=( (?: .*\\n (??{&quot;.&quot;x length($1)}) X ){2} ))\n    \/gmx\n\nwill match every sequence of three vertical `X`es. Testing time:\n\n    $ perl -E&#39;my$_=join&quot;&quot;,&lt;&gt;; say &quot;===\\n$1X$2&quot; while \/^(.*?)\\KX(?=((?:.*\\n(??{&quot;.&quot;x length($1)})X){2}))\/gmx&#39; &lt;&lt;&#39;END&#39;\n    ....X.......\n    ..X..X...X....\n    X.X...X..X.....\n    X....XXXXXX.....\n    X..XXX...........\n    .....X..........\n    ..............X\n    ..X...........X....\n    ..X...........X....X...\n    ....X.....\n    END\n    ===\n    ..X..X...X....\n    X.X...X..X.....\n    X....XXXXX\n    ===\n    X.X...X..X.....\n    X....XXXXXX.....\n    X\n    ===\n    X....XXXXXX.....\n    X..XXX...........\n    .....X\n    ===\n    ..............X\n    ..X...........X....\n    ..X...........X\n\nNote: this relies on experimental regex features that are available from at least Perl 5, v10 onward. The code was tested with a v16 perl.\n\n\n-----\n\n## Solution without embedded code\n\nLet us look at the lines\n\n    ...X...\\n\n    ...X..\\n\n\nWe want to assert that the leading `...` part of each line is of same length. We can do so by recursion with base case `X.*\\n`:\n\n    (X.*\\n|.(?-1).)X\n\nIf we anchor that at the start of a line, we can match two vertical `X`es. To match more than two lines, we have to do the recursion in a lookahead and then advance the match position to the next line, and repeat. For this, we simply match `.*\\n`.\n\nThis results in the following regex which can match a string with three vertical `X`es:\n\n    \/ ^\n      (?:\n        (?=( X.*\\n | .(?-1). ) X)\n        .*\\n # go to next line\n      ){2}\n    \/mx\n\nBut this isn&#39;t good enough, as we want to match all such sequences. To do this, we essentially put the whole regex into a lookahead. The regex engine makes sure to advance the position every time to produce a new match.\n\n    \/ ^\n      (?=\n        (\n          (?:\n              (?= (X.*\\n | .(?-1). ) X)\n              .*\\n # go to next line\n          ){2}\n          .* # include next line in $1\n        )\n      )\n    \/mx\n\nTesting time:\n\n    $ perl -E&#39;my$_=join&quot;&quot;,&lt;&gt;; say &quot;===\\n$1&quot; while \/^(?=((?:(?=(X.*\\n|.(?-1).)X).*\\n){2}.*))\/gmx&#39; &lt;&lt;&#39;END&#39;\n    ....X.......\n    ..X..X...X....\n    X.X...X..X.....\n    X....XXXXXX.....\n    X..XXX...........\n    .....X..........\n    ..............X\n    ..X...........X....\n    ..X...........X....X...\n    ....X.....\n    END\n    ===\n    ..X..X...X....\n    X.X...X..X.....\n    X....XXXXXX.....\n    ===\n    X.X...X..X.....\n    X....XXXXXX.....\n    X..XXX...........\n    ===\n    X....XXXXXX.....\n    X..XXX...........\n    .....X..........\n    ===\n    ..............X\n    ..X...........X....\n    ..X...........X....X...\n\nSo this works as well as the solution with embedded code, that is, it matches each group of lines with vertical `X`es, not each group of `X`es. (Actually, this solution seems more fragile to me than embedded code)",
        "body": "<h3>Edit<\/h3>\n<p>The following solutions have two grave problems:<\/p>\n<ol>\n<li>They can't match multiple <code>XXX<\/code> sequences starting on the same line, as the <code>pos<\/code> advances too much.<\/li>\n<li>The second solution is incorrect: it matches consecutive lines where two <code>X<\/code> are above each other. There don't neccessarily have to be three in a row.<\/li>\n<\/ol>\n<p>Therefore, all upvotes (and the bounty) should go to either of <a href=\"https:\/\/stackoverflow.com\/users\/1633117\/m-buettner\">m.buettner<\/a>'s <a href=\"https:\/\/stackoverflow.com\/a\/17176756\/1521179\">comprehensive .NET answer<\/a> or the <a href=\"https:\/\/stackoverflow.com\/a\/17177790\/1521179\">fascinating PCRE answer<\/a> from <a href=\"https:\/\/stackoverflow.com\/users\/107152\/qtax\">Qtax<\/a> himself.<\/p>\n<hr \/>\n<h2>Original Answer<\/h2>\n<p>This is an answer using embedding of Perl code into regexes. Because a Perl regex can use code to assert arbitrary conditions inside regexes or emit partial regexes, they are not limited to  matching regular languages or context-free languages, but can match some parts of languages higher up in the Chomsky hierarchy.<\/p>\n<p>The language you want to match can be described in regex terms as<\/p>\n<pre><code>^ .{n} X .*\\n\n  .{n} X .*\\n\n  .{n} X\n<\/code><\/pre>\n<p>where <code>n<\/code> is a number. This is about as complex as matching the <em>a<sup>n<\/sup>b<sup>n<\/sup>c<sup>n<\/sup><\/em> language which is the canonical example for a context-sensitive language.<\/p>\n<p>We can match the first line easily, and use some Perl code to emit the regex for the other lines:<\/p>\n<pre><code>    \/^ (.*?) X\n       (?: .*\\n (??{&quot;.&quot; x length($1)}) X){2}\n    \/mx\n<\/code><\/pre>\n<p>That was short! What does it do?<\/p>\n<ul>\n<li><p><code>^ (.*?) X<\/code> anchores at the start of a line, matches as few non-newline characters as possible and then the <code>X<\/code>. We remember the line up to the <code>X<\/code> as capture group <code>$1<\/code>.<\/p>\n<\/li>\n<li><p>We repeat a group two times which matches the rest of the line, a newline, and then injects a regex that matches a string of the same length as <code>$1<\/code>. After that, there must be an <code>X<\/code>.<\/p>\n<\/li>\n<\/ul>\n<p>This regex will now match every string that has three <code>X<\/code> on top of each other.<\/p>\n<p>If we want to extract <em>all<\/em> such sequences, we'll have to be nifty. Because sequences may overlap, e.g.<\/p>\n<pre><code>.X\nXX\nXX\nX.\n<\/code><\/pre>\n<p>the position where the next match starts must not proceed past the first <code>X<\/code>. We can do this via a lookbehind and lookahead. Perl only supports constant-length lookbehind, but has the  <code>\\K<\/code> escape which provides similar semantics. Thus<\/p>\n<pre><code>\/^ (.*?) \\K X\n   (?=( (?: .*\\n (??{&quot;.&quot;x length($1)}) X ){2} ))\n\/gmx\n<\/code><\/pre>\n<p>will match every sequence of three vertical <code>X<\/code>es. Testing time:<\/p>\n<pre><code>$ perl -E'my$_=join&quot;&quot;,&lt;&gt;; say &quot;===\\n$1X$2&quot; while \/^(.*?)\\KX(?=((?:.*\\n(??{&quot;.&quot;x length($1)})X){2}))\/gmx' &lt;&lt;'END'\n....X.......\n..X..X...X....\nX.X...X..X.....\nX....XXXXXX.....\nX..XXX...........\n.....X..........\n..............X\n..X...........X....\n..X...........X....X...\n....X.....\nEND\n===\n..X..X...X....\nX.X...X..X.....\nX....XXXXX\n===\nX.X...X..X.....\nX....XXXXXX.....\nX\n===\nX....XXXXXX.....\nX..XXX...........\n.....X\n===\n..............X\n..X...........X....\n..X...........X\n<\/code><\/pre>\n<p>Note: this relies on experimental regex features that are available from at least Perl 5, v10 onward. The code was tested with a v16 perl.<\/p>\n<hr \/>\n<h2>Solution without embedded code<\/h2>\n<p>Let us look at the lines<\/p>\n<pre><code>...X...\\n\n...X..\\n\n<\/code><\/pre>\n<p>We want to assert that the leading <code>...<\/code> part of each line is of same length. We can do so by recursion with base case <code>X.*\\n<\/code>:<\/p>\n<pre><code>(X.*\\n|.(?-1).)X\n<\/code><\/pre>\n<p>If we anchor that at the start of a line, we can match two vertical <code>X<\/code>es. To match more than two lines, we have to do the recursion in a lookahead and then advance the match position to the next line, and repeat. For this, we simply match <code>.*\\n<\/code>.<\/p>\n<p>This results in the following regex which can match a string with three vertical <code>X<\/code>es:<\/p>\n<pre><code>\/ ^\n  (?:\n    (?=( X.*\\n | .(?-1). ) X)\n    .*\\n # go to next line\n  ){2}\n\/mx\n<\/code><\/pre>\n<p>But this isn't good enough, as we want to match all such sequences. To do this, we essentially put the whole regex into a lookahead. The regex engine makes sure to advance the position every time to produce a new match.<\/p>\n<pre><code>\/ ^\n  (?=\n    (\n      (?:\n          (?= (X.*\\n | .(?-1). ) X)\n          .*\\n # go to next line\n      ){2}\n      .* # include next line in $1\n    )\n  )\n\/mx\n<\/code><\/pre>\n<p>Testing time:<\/p>\n<pre><code>$ perl -E'my$_=join&quot;&quot;,&lt;&gt;; say &quot;===\\n$1&quot; while \/^(?=((?:(?=(X.*\\n|.(?-1).)X).*\\n){2}.*))\/gmx' &lt;&lt;'END'\n....X.......\n..X..X...X....\nX.X...X..X.....\nX....XXXXXX.....\nX..XXX...........\n.....X..........\n..............X\n..X...........X....\n..X...........X....X...\n....X.....\nEND\n===\n..X..X...X....\nX.X...X..X.....\nX....XXXXXX.....\n===\nX.X...X..X.....\nX....XXXXXX.....\nX..XXX...........\n===\nX....XXXXXX.....\nX..XXX...........\n.....X..........\n===\n..............X\n..X...........X....\n..X...........X....X...\n<\/code><\/pre>\n<p>So this works as well as the solution with embedded code, that is, it matches each group of lines with vertical <code>X<\/code>es, not each group of <code>X<\/code>es. (Actually, this solution seems more fragile to me than embedded code)<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5191,
            "reputation": 30711,
            "user_id": 8233,
            "user_type": "registered",
            "accept_rate": 69,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/5ed2571484765d12fcb3230f235a8ecc?s=256&d=identicon&r=PG",
            "display_name": "Michael Carman",
            "link": "https:\/\/stackoverflow.com\/users\/8233\/michael-carman"
        },
        "is_accepted": true,
        "score": 28,
        "last_activity_date": 1254331213,
        "last_edit_date": 1254331213.0,
        "creation_date": 1221940151,
        "answer_id": 109139,
        "question_id": 109124,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "If you reread the documentation for IPC::Open3, you&#39;ll see a note that you should call [waitpid](http:\/\/perldoc.perl.org\/functions\/waitpid.html) to reap the child process. Once you do this, the status should be available in `$?`. The exit value is `$? &gt;&gt; 8`. See \r\n[`$?` in perldoc perlvar](http:\/\/perldoc.perl.org\/perlvar.html#&amp;#36;CHILD_ERROR).",
        "body": "<p>If you reread the documentation for IPC::Open3, you'll see a note that you should call <a href=\"http:\/\/perldoc.perl.org\/functions\/waitpid.html\" rel=\"noreferrer\">waitpid<\/a> to reap the child process. Once you do this, the status should be available in <code>$?<\/code>. The exit value is <code>$? &gt;&gt; 8<\/code>. See \n<a href=\"http:\/\/perldoc.perl.org\/perlvar.html#&#36;CHILD_ERROR\" rel=\"noreferrer\"><code>$?<\/code> in perldoc perlvar<\/a>.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 7002,
            "reputation": 2558,
            "user_id": 11952,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/06671115f7811c97920d85d7ad072872?s=256&d=identicon&r=PG",
            "display_name": "Penfold",
            "link": "https:\/\/stackoverflow.com\/users\/11952\/penfold"
        },
        "is_accepted": false,
        "score": 28,
        "last_activity_date": 1222375719,
        "last_edit_date": null,
        "creation_date": 1222375719,
        "answer_id": 135978,
        "question_id": 135755,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "There is a less-typing trick, that works provided your module doesn&#39;t have something insane like a Unix timestamp as a version number.\r\n\r\n    perl -MFoo::Bar\\ 9999\r\n\r\nThis works because what it translates to is\r\n\r\n    use Foo::Bar 9999;\r\n\r\ni.e. a version of Foo::Bar that&#39;s at least version 9999 or newer.\r\nAnd what you get is\r\n\r\n    Foo::Bar version 9999 required--this is only version 1.1.\r\n    BEGIN failed--compilation aborted.\r\n\r\n(Neat trick I learned from Matt Trout.)",
        "body": "<p>There is a less-typing trick, that works provided your module doesn't have something insane like a Unix timestamp as a version number.<\/p>\n\n<pre><code>perl -MFoo::Bar\\ 9999\n<\/code><\/pre>\n\n<p>This works because what it translates to is<\/p>\n\n<pre><code>use Foo::Bar 9999;\n<\/code><\/pre>\n\n<p>i.e. a version of Foo::Bar that's at least version 9999 or newer.\nAnd what you get is<\/p>\n\n<pre><code>Foo::Bar version 9999 required--this is only version 1.1.\nBEGIN failed--compilation aborted.\n<\/code><\/pre>\n\n<p>(Neat trick I learned from Matt Trout.)<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4850,
            "reputation": 47566,
            "user_id": 7498,
            "user_type": "registered",
            "accept_rate": 71,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/aa6a7a12f4cd03bc8c98fa8e9af9ad41?s=256&d=identicon&r=PG",
            "display_name": "innaM",
            "link": "https:\/\/stackoverflow.com\/users\/7498\/innam"
        },
        "is_accepted": false,
        "score": 28,
        "last_activity_date": 1269633561,
        "last_edit_date": 1269633561.0,
        "creation_date": 1244539538,
        "answer_id": 969052,
        "question_id": 968441,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "I don&#39;t care whether he used regular expressions or not. I also don&#39;t care whether his Perl looks like C or not. The question that really matters is: is this good Perl? And I&#39;d say it&#39;s not:\r\n\r\n 1. He didn&#39;t use `use strict`\r\n 2. He didn&#39;t enable warnings.\r\n 3. He&#39;s using the old-fashioned two-argument version of open.\r\n 4. The &quot;open file&quot; comment hurts and gives me the impression that code he usually writes doesn&#39;t contain any comments.\r\n 5. The code is hard to maintain\r\n 6. Was he allowed to use CPAN modules? A good Perl programmer would look at that option first.\r\n",
        "body": "<p>I don't care whether he used regular expressions or not. I also don't care whether his Perl looks like C or not. The question that really matters is: is this good Perl? And I'd say it's not:<\/p>\n\n<ol>\n<li>He didn't use <code>use strict<\/code><\/li>\n<li>He didn't enable warnings.<\/li>\n<li>He's using the old-fashioned two-argument version of open.<\/li>\n<li>The \"open file\" comment hurts and gives me the impression that code he usually writes doesn't contain any comments.<\/li>\n<li>The code is hard to maintain<\/li>\n<li>Was he allowed to use CPAN modules? A good Perl programmer would look at that option first.<\/li>\n<\/ol>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 8210,
            "reputation": 155382,
            "user_id": 14660,
            "user_type": "registered",
            "accept_rate": 62,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/e55e0ec3c00f834d78fbdddeaa36e308?s=256&d=identicon&r=PG",
            "display_name": "Schwern",
            "link": "https:\/\/stackoverflow.com\/users\/14660\/schwern"
        },
        "is_accepted": false,
        "score": 28,
        "last_activity_date": 1330205401,
        "last_edit_date": null,
        "creation_date": 1330205401,
        "answer_id": 9448256,
        "question_id": 9444915,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "There was [a bug][1] which caused tied hashes in scalar context to always return false.  The bug was [fixed in 5.8.5][2].  If you&#39;re concerned with backwards compatibility that far back I would stick with `if( !keys %hash )`.  Otherwise use `if( !%hash )` as recommended by others.\r\n\r\n\r\n  [1]: https:\/\/rt.perl.org\/rt3\/Public\/Bug\/Display.html?id=22973\r\n  [2]: https:\/\/github.com\/mirrors\/perl\/commit\/a3bcc51ebd4e201d85a37d8410b7a375b8d94244",
        "body": "<p>There was <a href=\"https:\/\/rt.perl.org\/rt3\/Public\/Bug\/Display.html?id=22973\" rel=\"noreferrer\">a bug<\/a> which caused tied hashes in scalar context to always return false.  The bug was <a href=\"https:\/\/github.com\/mirrors\/perl\/commit\/a3bcc51ebd4e201d85a37d8410b7a375b8d94244\" rel=\"noreferrer\">fixed in 5.8.5<\/a>.  If you're concerned with backwards compatibility that far back I would stick with <code>if( !keys %hash )<\/code>.  Otherwise use <code>if( !%hash )<\/code> as recommended by others.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1793115,
            "reputation": 43707,
            "user_id": 1633117,
            "user_type": "registered",
            "accept_rate": 50,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/a74d068cb1057e1588cfce3f41023df0?s=256&d=identicon&r=PG",
            "display_name": "Martin Ender",
            "link": "https:\/\/stackoverflow.com\/users\/1633117\/martin-ender"
        },
        "is_accepted": false,
        "score": 28,
        "last_activity_date": 1413810334,
        "last_edit_date": 1495540801.0,
        "creation_date": 1371581918,
        "answer_id": 17176756,
        "question_id": 17039670,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "First of all: brilliant question. I think it can be very instructive to try to take regex engines to their limits.\r\n\r\n## The basic .NET solution\r\n\r\nYou guys said in the comments that it would be easy with .NET, but since there is no answer for that yet, I thought I&#39;d write one.\r\n\r\nYou can solve both question 1. and 2. using .NET&#39;s variable-length lookbehind and balancing groups. Most of the work is done by the balancing groups, but the variable-length lookbehind is crucial to be able to detected multiple matches starting on the same line.\r\n\r\nAnyway, here is the pattern:\r\n\r\n    (?&lt;=                  # lookbehind counts position of X into stack\r\n      ^(?:(?&lt;a&gt;).)*       # push an empty capture on the &#39;a&#39; stack for each character\r\n                          # in front of X\r\n    )                     # end of lookbehind\r\n\r\n    X                     # match X\r\n\r\n    (?=.*\\n               # lookahead checks that there are two more Xs right below\r\n      (?:(?&lt;-a&gt;)(?&lt;b&gt;).)* # while we can pop an element from stack &#39;a&#39;, push an\r\n                          # element onto &#39;b&#39; and consume a character\r\n      (?(a)(?!))          # make sure that stack &#39;a&#39; is empty\r\n      X.*\\n               # match X and the rest of the line\r\n      (?:(?&lt;-b&gt;).)*       # while we can pop an element from stack &#39;b&#39;, and consume\r\n                          # a character\r\n      (?(b)(?!))          # make sure that stack &#39;b&#39; is empty\r\n      X                   # match a final X\r\n    )                     # end of lookahead\r\n\r\nThis pattern has to be used with `RegexOptions.Multiline` for the `^` to match the beginnings of lines (and obviously with `RegexOptions.IgnorePatternWhitespace` for freespacing mode to work).\r\n\r\nHere are some additional comments:\r\n\r\nBy putting everything except the initial X into lookarounds, we have no problems with overlapping matches or even matches starting on the same line. However, the lookbehind has to be of variable-length which certainly constrains any solution of this kind to .NET.\r\n\r\nThe rest relies on a good grasp on balancing groups. I won&#39;t go into this in detail here, because it makes for [quite long answers in itself][1]. (see [MSDN][2] and [this blog post][3] for even more information)\r\n\r\nThe lookbehind just matches `^.*`, so everything until the start of the line, but for every `.` we push an empty capture onto stack `a`, thereby counting the position of our `X` as the size of the stack.\r\n\r\nThen after consuming the rest of the line in the lookahead, we match again just `.*`, but before consuming each `.`, we pop one element from stack `a` (which leads to failure, once `a` is empty) and push an empty capture onto `b` (so that we don&#39;t forget how many characters there have to be for the third line).\r\n\r\nTo make sure that we really empty the entire stack, we use `(?(a)(?!))`. This is a conditional pattern, that tries to match `(?!)` if stack `a` is not empty (and is simply skipped otherwise). And `(?!)` is an empty negative lookahead, which always fails. Hence, this simply encodes, &quot;is `a` not empty? fail. otherwise, continue&quot;.\r\n\r\nNow that know we&#39;ve consumed exactly the right amount of characters in the new line, we try to match a `X` and the rest of the line. Then we repeat the same process again with stack `b`. Now there is no need to push onto any new stack, because if this works, we&#39;re done. We check that `b` is empty after this, and match a third `X`.\r\n\r\nFinally, an optimization side note: this pattern still works if all repetitions are wrapped in atomic groups (thereby emulating possessive quantifiers, which are not supported by .NET)! This would save a lot of backtracking. Moreover, **if** we put at least the stack-popping quantifiers in atomic groups, we can get rid of both `(?(...)(?!))` checks (as these are only needed for cases, where the preceding repetition had to backtrack).\r\n\r\n## The full .NET solution\r\n\r\n(Only the bravest of adventurers should follow me into the really dark cave I&#39;m about to descend into...)\r\n\r\nAs discussed in the comments, this solution has one drawback: it counts overlapping matches. E.g.\r\n\r\n    ..X..\r\n    ..X..\r\n    ..X..\r\n    ..X..\r\n\r\nGives two matches, one in the first and one in the second line. We&#39;d like to avoid this, and report only one match (or two if there are 6 to 8 `X`s and three if there are 9 to 11 `X`s and so on). Moreover, we want to report the matches at the 1st, 4th, 7th, ... `X`.\r\n\r\nWe can adjust the above pattern to allow for this solution by requiring that the first `X` is preceded by an integer multiple of 3 other `X`s that statisfy our requirements. The basic idea of checking this uses the same stack manipulation as before (except we shift things around between 3 stacks so that after finding three `X`s we end up where we started). To do this we have to fiddle a bit with the lookbehind.\r\n\r\nThere is a catch though. .NET&#39;s variable-length lookbehind uses another .NET-unique feature, `RightToLeftMode`, in which the pattern is read (and matched) from right to left. Normally this doesn&#39;t need to bother us, but when we combine this with balancing groups, we might be in [for some unpleasant surprises][4]. In particular, when considering how our capture stacks evolve, we need to construct (and read) the expression from right to left (or bottom to top) as well.\r\n\r\nSo when you read the following expression (and my annotations), start at the end of the outermost lookbehind (you&#39;ll have to scroll a bit) - i.e. just before the only top-level `X`; then read all the way up to the top. And then continue after the lookbehind.\r\n\r\n    (?&lt;=                  \r\n      # note that the lookbehind below does NOT affect the state of stack &#39;a&#39;!\r\n      # in fact, negative lookarounds can never change any capturing state.\r\n      # this is because they have to fail for the engine to continue matching.\r\n      # and if they fail, the engine needs to backtrack out of them, in which\r\n      # case the previous capturing state will be restored.\r\n      (?&lt;!                # if we get here, there is another X on top of the last\r\n                          # one in the loop, and the pattern fails\r\n        ^                 # make sure we reached the beginning of the line\r\n        (?(a)(?!))        # make sure that stack &#39;a&#39; is empty\r\n        (?:(?&lt;-a&gt;).)*     # while we can pop an element from stack &#39;a&#39;, and consume\r\n                          # a character\r\n        X.*\\n             # consume the next line and a potential X\r\n      )\r\n      # at this point we know that there are less than 3 Xs in the same column\r\n      # above this position. but there might still be one or two more. these\r\n      # are the cases we now have to eliminate, and we use a nested negative\r\n      # lookbehind for this. the lookbehind simply checks the next row and\r\n      # asserts that there is no further X in the same column.\r\n      # this, together with the loop, below means that the X we are going to match\r\n      # is either the topmost in its column or preceded by an integer multiple of 3\r\n      # Xs - exactly what we are looking for.\r\n      (?:\r\n\r\n        # at this point we&#39;ve advanced the lookbehind&#39;s &quot;cursor&quot; by exactly 3 Xs\r\n        # in the same column, AND we&#39;ve restored the same amount of captures on\r\n        # stack &#39;a&#39;, so we&#39;re left in exactly the same state as before and can\r\n        # potentially match another 3 Xs upwards this way.\r\n        # the fact that stack &#39;a&#39; is unaffected by a full iteration of this loop is\r\n        # also crucial for the later (lookahead) part to work regardless of the\r\n        # amount of Xs we&#39;ve looked at here.\r\n\r\n        ^                 # make sure we reached the beginning of the line\r\n        (?(c)(?!))        # make sure that stack &#39;a&#39; is empty\r\n        (?:(?&lt;-c&gt;)(?&lt;a&gt;).)* # while we can pop an element from stack &#39;c&#39;, push an\r\n                          # element onto &#39;a&#39; and consume a character\r\n        X.*\\n             # consume the next line and a potential X\r\n        (?(b)(?!))        # make sure that stack &#39;b&#39; is empty\r\n        (?:(?&lt;-b&gt;)(?&lt;c&gt;).)* # while we can pop an element from stack &#39;b&#39;, push an\r\n                          # element onto &#39;c&#39; and consume a character\r\n        X.*\\n             # consume the next line and a potential X\r\n        (?(a)(?!))        # make sure that stack &#39;a&#39; is empty\r\n        (?:(?&lt;-a&gt;)(?&lt;b&gt;).)* # while we can pop an element from stack &#39;a&#39;, push an\r\n                          # element onto &#39;b&#39; and consume a character\r\n        X.*\\n             # consume the next line and a potential X\r\n      )*                  # this non-capturing group will match exactly 3 leading\r\n                          # Xs in the same column. we repeat this group 0 or more\r\n                          # times to match an integer-multiple of 3 occurrences.\r\n      ^                   # make sure we reached the beginning of the line\r\n      (?:(?&lt;a&gt;).)*        # push an empty capture on the &#39;a&#39; stack for each\r\n                          # character in front of X\r\n    )                     # end of lookbehind (or rather beginning)\r\n    \r\n    # the rest is the same as before    \r\n\r\n    X                     # match X\r\n    (?=.*\\n               # lookahead checks that there are two more Xs right below\r\n      (?:(?&lt;-a&gt;)(?&lt;b&gt;).)* # while we can pop an element from stack &#39;a&#39;, push an\r\n                          # element onto &#39;b&#39; and consume a character\r\n      (?(a)(?!))          # make sure that stack &#39;a&#39; is empty\r\n      X.*\\n               # match X and the rest of the line\r\n      (?:(?&lt;-b&gt;).)*       # while we can pop an element from stack &#39;b&#39;, and consume\r\n                          # a character\r\n      (?(b)(?!))          # make sure that stack &#39;b&#39; is empty\r\n      X                   # match a final X\r\n    )                     # end of lookahead\r\n\r\n[Working demo on RegexHero.net.][5]\r\n\r\nI interspersed all explanation right with the pattern this time. So if you read the pattern in the way I recommended above, you get the explanation right when you need it...\r\n\r\nNow that was one hell of a beast. But it satisfies the entire specification now and shows off just how powerful .NET&#39;s regex flavor really is. And, although this seems quite horrible, I think (once you realise the right-to-left-thing) this is much more easily understandable than a comparable solution with PCRE (using recursion or otherwise).\r\n\r\nAs Kobi mentioned in a comment below, this could be shortened a good bit, if you accept that your results are found in multiple captures of a single match (e.g., if you have a column of 7 `X`s you only get one match, but with 2 captures in a certain group). You can do this by repeating the main (lookahead) part 1 or more times and capturing the initial `X` (put everything in a lookahead though). Then the lookbehind does not need to count off triples of `X`s, but only has to check that there is no leading `X`. This would probably cut the size of the pattern in half.\r\n\r\n## The partial PCRE solution\r\n\r\n(If only the bravest of adventurers followed me through the last solution, I am probably only left with madmen on the next journey...)\r\n\r\nTo prove what I just said about how the above solution compares to PCRE, let&#39;s look at how we can even remotely solve the full problem in PCRE. We&#39;ll have to work a good bit harder without variable-length lookbehinds and balancing groups.\r\n\r\nQtax (the OP) provided a brilliant solution to his first question (checking whether the string contains any `X`-column) using self-referencing groups to count. This is a very elegant and compact solution. But because each match goes from the beginning of the line to the `X` that starts the column, and matches cannot overlap, we can&#39;t get multiple matches per line. We could try to put everything in a lookahead (so that nothing is actually matched), but two zero-width matches will also never start at the same position - so we&#39;ll still get only one match per candidate line.\r\n\r\nHowever it is indeed possible to solve at least the first part of question 2 with PCRE: count the number of columns starting in each line (and hence to total amount of `X` columns). Since we cannot get this count in the form of individual matches (see previous paragraph), and we cannot get this count in the form of individual groups or captures (since PCRE provides only a fixed and finite number of captures, as opposed to .NET). What we can do instead is to encode the number of columns in the matches.\r\n\r\nHere is how: for each line we check if there&#39;s a column starting. If so, we include one character in a certain capturing group. Then, before reporting a successful match, we try to find as many further columns as possible - for each one adding a character to that particular group. By doing this, we encode the number of columns starting in each line in the length of that particular capture.\r\n\r\nActually realizing this concept in a regex is a lot more complicated than it may first sound (and it already sounds quite complicated). Anyway, here it is:\r\n\r\n    ^                        \r\n    (?:(?|\r\n      (?(5)(?![\\s\\S]*+\\5))      \r\n      (?!(?!)()()) \r\n      (?=\r\n        (?:\r\n          .                  \r\n          (?=                \r\n            .*+\\n            \r\n            ( \\3? . )   \r\n            .*+\\n        \r\n            ( \\4? . )    \r\n          )\r\n        )*?              \r\n        X .*+\\n          \r\n        \\3               \r\n        X .*+\\n          \r\n        \\4               \r\n      )\r\n      ()\r\n    |\r\n      (?(5)(?=[\\s\\S]*+\\5)|(?!))\r\n      (?:\r\n        .\r\n        (?=\r\n          .*+\\n\r\n          ( \\1? .)\r\n          .*+\\n\r\n          ( \\2? .)\r\n        )\r\n      )+?\r\n      (?=\r\n        (?&lt;=X).*+\\n\r\n        (\\1)         \r\n        (?&lt;=X).*+\\n\r\n        (\\2)         \r\n        (?&lt;=X)     \r\n      )\r\n      (?=\r\n        ([\\s\\S])   \r\n        [\\s\\S]*\r\n        ([\\s\\S] (?(6)\\6))\r\n      )\r\n    ){2})+\r\n\r\n*(Actually, it&#39;s a bit easier than that - see Qtax&#39;s answer for how to simplify this approach. I&#39;ll leave this approach here anyway for academic reasons, as some very advanced and interesting techniques can be learned from it - see the summary at the end.)*\r\n\r\nYes, there are no annotations. I figured, no one would actually read them anyway, so instead I&#39;ll try to break this expression down in parts (I&#39;ll go for a top-down approach).\r\n\r\nSo let&#39;s look at the outer layer of onion from hell:\r\n\r\n    ^                        \r\n    (?:(?|\r\n      checkForNextColumn\r\n    |\r\n      countAndAdvance\r\n    ){2})+\r\n\r\nSo our matches are again anchored to the beginnings of lines. Then we have a `(?:...{2})+` which means an even number of repetitions of something. And that something is an alternation of two subpatterns. These subpatterns represent the steps I mentioned above. The first one checks that there is another column starting in the current line, the second one registers a count and prepares the engine&#39;s state for another application of the first subpattern. So control is given to the second pattern - the first just checks for another column using a lookahead and is hence a zero-width pattern. This is why I cannot simply wrap everything in `+` but have to do the `{2})+` thing - otherwise the zero-width component would be tried only once; that&#39;s a necessary optimization applied by pretty much all engines to avoid infinite loops with patterns like `(a*)+`.\r\n\r\nThere is one more (very important detail): I used `(?|...)` for the alternation. In this kind of grouping, each alternative starts with the same group number. Hence in `\/(?|(a)|(b))\/` both `a` and `b` can be captured into group `1`. This is the crucial trick that allows &quot;communication&quot; between subpatterns, as they can modify the same groups.\r\n\r\nAnyway... so we have these two subpatterns. We&#39;d like to make sure that control really alternates between them. So that each group fails if it was the last one that matched. We do this by wrapping the pattern in some grouping-and-referencing magic:\r\n\r\n    ^(?:(?|\r\n      (?(5)(?![\\s\\S]*+\\5))       # if group 5 has matched before make sure that\r\n                                 # it didn&#39;t match empty\r\n      checkForNextColumn         # contains 4 capturing groups\r\n      ()                         # this is group 5, match empty\r\n    |\r\n      (?(5)(?=[\\s\\S]*+\\5)|(?!))  # make sure that group 5 is defined and that it\r\n                                 # matched empty\r\n      advanceEngineState         # contains 4 capturing groups\r\n      (?=\r\n        ([\\s\\S])                 # this is group 5, match non-empty\r\n        [\\s\\S]*                  # advance to the end very end of the string\r\n        ([\\s\\S] (?(6)\\6))             # add a character from the end of the string to\r\n                                 # group 6\r\n      )\r\n    ){2})+\r\n\r\nSo at the end of each alternative, we&#39;ll invalidate the condition for this alternative to even start matching. At the end of the second alternative we&#39;ll also include a character into group `6`, using the technique outlined by Qtax. This is the counting step. I.e., group `6` will contain as many characters as there are columns starting in the current line.\r\n\r\nNow `checkForNextColumn` will really just be Qtax&#39;s solution inside a lookahead. It needs one more modification though and to justify this we&#39;ll look into `advanceEngineState` first.\r\n\r\nLet&#39;s think about how we would want to modify the state, for Qtax&#39;s solution to match a second column in a row. Say we have input\r\n\r\n    ..X..X..\r\n    ..X..X..\r\n    ..X..X..\r\n\r\nand we want to find the second column. This could be accomplished, by starting the match from the position just after the first `X` and having groups `\\1` and `\\2` already initialised to the first three characters (`..X`) of rows 2 and 3, respectively (instead of them being empty).\r\n\r\nNow let&#39;s try to do this: match everything up to and including the next `X` that starts a column, then fill two groups with the corresponding line-prefixes for use in the `checkForNextColumn` pattern. This is again pretty much Qtax&#39;s pattern, except that we count the `X` in (instead of stopping right before it), and that we need to add the capturing into a separate group. So here is `advanceEngineState`:\r\n\r\n    (?:\r\n      .\r\n      (?=\r\n        .*+\\n\r\n        ( \\1? .)\r\n        .*+\\n\r\n        ( \\2? .)\r\n      )\r\n    )+?\r\n    (?=\r\n      (?&lt;=X) .*+\\n\r\n      (\\1)        \r\n      (?&lt;=X) .*+\\n\r\n      (\\2)        \r\n      (?&lt;=X)\r\n    )\r\n\r\nNote how I turned the `X`s into lookbehinds, to go one character further, and how I effectively copy the final contents of `\\1` into `\\3` and those of `\\2` into `\\4`.\r\n\r\nSo if we now use Qtax&#39;s solution as `checkForNextColumn` in a lookahead, using groups `\\3` and `\\4` instead of `\\1` and `\\2`, we should be done.\r\n\r\nBut just how do we make those groups `\\3` and `\\4` instead of `\\1` and `\\2`? We could start the pattern with `()()`, which would always match, without affecting the engine&#39;s cursor, but increase the group count by 2. However, this is problematic: this resets groups `1` and `2` to empty strings, which **if** we find a second column, `advanceEngineState` will be in an inconsistent state (as the engine&#39;s global position has been advanced, but the counting groups are zero again). So we want to get those two groups into the pattern, but without affecting what they are currently capturing. We can do this by utilizing something I already mentioned with the .NET solutions: groups in negative lookarounds do not affect the captured contents (because the engine needs to backtrack out of the lookaround to proceed). Hence we can use `(?!(?!)()())` (a negative lookahead that can never cause the pattern to fail) to include two sets of parentheses in our pattern, that are never used. This allows us to work with groups `3` and `4` in our first subpattern, while keeping groups `1` and `2` untouched for the second subpatterns next iteration. In conclusion this is `checkForNextColumn`:\r\n\r\n    (?!(?!)()()) \r\n    (?=\r\n      (?:\r\n        .                  \r\n        (?=                \r\n          .*+\\n            \r\n          ( \\3? . )   \r\n          .*+\\n        \r\n          ( \\4? . )    \r\n        )\r\n      )*?              \r\n      X .*+\\n          \r\n      \\3               \r\n      X .*+\\n          \r\n      \\4               \r\n    )\r\n\r\nWhich, for the most part actually looks really familiar.\r\n\r\nSo this is it. Running this against some input will give us a group `6` which contains one capture for each line that has a column starting - and the capture&#39;s length will tell us how many columns started there.\r\n\r\n[Yes, it really works (live demo).][6]\r\n\r\nNote that this (like the basic .NET solution) will overcount columns that are more than 3 `X`s long. I suppose it is possible to correct this count with lookaheads (in a similar way to the lookbehind of the full .NET solution), but this is left as an exercise to the reader.\r\n\r\nIt&#39;s a bit unfortunate that the base problem of this solution is already very convoluted and bloats the solution (75% of the lines are mostly just copies of Qtax&#39;s solution). Because the surrounding framework has some really interesting techniques and lessons:\r\n\r\n- We can have multiple subpatterns that accomplish specific matching\/counting tasks, and have them &quot;communicate&quot; through mutual capturing groups, by putting them in a `(?|...)` alternation and looping over them.\r\n- We can force zero-width alternatives to be carried out over and over again by wrapping them in a finite quantifier like `{2}` before putting everything into `+`.\r\n- Group numbers can be skipped in one subpattern (without affecting the captured contents) by putting them into a never-failing negative lookahead like `(?!(?!)())`.\r\n- Control can be passed back and forth between subpatterns by capturing something or nothing in a certain group that is checked upon entering the alternation.\r\n\r\nThis allows for some very powerful computations (I&#39;ve seen claims that PCRE is in fact Turing-complete) - although this is certainly the wrong approach for productive use. But still trying to understand (and come up) with such solutions can be a very challenging and somehow rewarding exercise in problem solving.\r\n\r\n\r\n  [1]: https:\/\/stackoverflow.com\/questions\/17003799\/what-are-regular-expression-balancing-groups\r\n  [2]: http:\/\/msdn.microsoft.com\/en-us\/library\/bs2twtah.aspx#balancing_group_definition\r\n  [3]: http:\/\/blog.stevenlevithan.com\/archives\/balancing-groups\r\n  [4]: https:\/\/stackoverflow.com\/questions\/13389560\/balancing-groups-in-variable-length-lookbehind\r\n  [5]: http:\/\/regexhero.net\/tester\/?id=f03440f2-36f6-4ff5-8d81-e821e420177d\r\n  [6]: http:\/\/ideone.com\/gDtDZD",
        "body": "<p>First of all: brilliant question. I think it can be very instructive to try to take regex engines to their limits.<\/p>\n\n<h2>The basic .NET solution<\/h2>\n\n<p>You guys said in the comments that it would be easy with .NET, but since there is no answer for that yet, I thought I'd write one.<\/p>\n\n<p>You can solve both question 1. and 2. using .NET's variable-length lookbehind and balancing groups. Most of the work is done by the balancing groups, but the variable-length lookbehind is crucial to be able to detected multiple matches starting on the same line.<\/p>\n\n<p>Anyway, here is the pattern:<\/p>\n\n<pre><code>(?&lt;=                  # lookbehind counts position of X into stack\n  ^(?:(?&lt;a&gt;).)*       # push an empty capture on the 'a' stack for each character\n                      # in front of X\n)                     # end of lookbehind\n\nX                     # match X\n\n(?=.*\\n               # lookahead checks that there are two more Xs right below\n  (?:(?&lt;-a&gt;)(?&lt;b&gt;).)* # while we can pop an element from stack 'a', push an\n                      # element onto 'b' and consume a character\n  (?(a)(?!))          # make sure that stack 'a' is empty\n  X.*\\n               # match X and the rest of the line\n  (?:(?&lt;-b&gt;).)*       # while we can pop an element from stack 'b', and consume\n                      # a character\n  (?(b)(?!))          # make sure that stack 'b' is empty\n  X                   # match a final X\n)                     # end of lookahead\n<\/code><\/pre>\n\n<p>This pattern has to be used with <code>RegexOptions.Multiline<\/code> for the <code>^<\/code> to match the beginnings of lines (and obviously with <code>RegexOptions.IgnorePatternWhitespace<\/code> for freespacing mode to work).<\/p>\n\n<p>Here are some additional comments:<\/p>\n\n<p>By putting everything except the initial X into lookarounds, we have no problems with overlapping matches or even matches starting on the same line. However, the lookbehind has to be of variable-length which certainly constrains any solution of this kind to .NET.<\/p>\n\n<p>The rest relies on a good grasp on balancing groups. I won't go into this in detail here, because it makes for <a href=\"https:\/\/stackoverflow.com\/questions\/17003799\/what-are-regular-expression-balancing-groups\">quite long answers in itself<\/a>. (see <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/bs2twtah.aspx#balancing_group_definition\" rel=\"nofollow noreferrer\">MSDN<\/a> and <a href=\"http:\/\/blog.stevenlevithan.com\/archives\/balancing-groups\" rel=\"nofollow noreferrer\">this blog post<\/a> for even more information)<\/p>\n\n<p>The lookbehind just matches <code>^.*<\/code>, so everything until the start of the line, but for every <code>.<\/code> we push an empty capture onto stack <code>a<\/code>, thereby counting the position of our <code>X<\/code> as the size of the stack.<\/p>\n\n<p>Then after consuming the rest of the line in the lookahead, we match again just <code>.*<\/code>, but before consuming each <code>.<\/code>, we pop one element from stack <code>a<\/code> (which leads to failure, once <code>a<\/code> is empty) and push an empty capture onto <code>b<\/code> (so that we don't forget how many characters there have to be for the third line).<\/p>\n\n<p>To make sure that we really empty the entire stack, we use <code>(?(a)(?!))<\/code>. This is a conditional pattern, that tries to match <code>(?!)<\/code> if stack <code>a<\/code> is not empty (and is simply skipped otherwise). And <code>(?!)<\/code> is an empty negative lookahead, which always fails. Hence, this simply encodes, \"is <code>a<\/code> not empty? fail. otherwise, continue\".<\/p>\n\n<p>Now that know we've consumed exactly the right amount of characters in the new line, we try to match a <code>X<\/code> and the rest of the line. Then we repeat the same process again with stack <code>b<\/code>. Now there is no need to push onto any new stack, because if this works, we're done. We check that <code>b<\/code> is empty after this, and match a third <code>X<\/code>.<\/p>\n\n<p>Finally, an optimization side note: this pattern still works if all repetitions are wrapped in atomic groups (thereby emulating possessive quantifiers, which are not supported by .NET)! This would save a lot of backtracking. Moreover, <strong>if<\/strong> we put at least the stack-popping quantifiers in atomic groups, we can get rid of both <code>(?(...)(?!))<\/code> checks (as these are only needed for cases, where the preceding repetition had to backtrack).<\/p>\n\n<h2>The full .NET solution<\/h2>\n\n<p>(Only the bravest of adventurers should follow me into the really dark cave I'm about to descend into...)<\/p>\n\n<p>As discussed in the comments, this solution has one drawback: it counts overlapping matches. E.g.<\/p>\n\n<pre><code>..X..\n..X..\n..X..\n..X..\n<\/code><\/pre>\n\n<p>Gives two matches, one in the first and one in the second line. We'd like to avoid this, and report only one match (or two if there are 6 to 8 <code>X<\/code>s and three if there are 9 to 11 <code>X<\/code>s and so on). Moreover, we want to report the matches at the 1st, 4th, 7th, ... <code>X<\/code>.<\/p>\n\n<p>We can adjust the above pattern to allow for this solution by requiring that the first <code>X<\/code> is preceded by an integer multiple of 3 other <code>X<\/code>s that statisfy our requirements. The basic idea of checking this uses the same stack manipulation as before (except we shift things around between 3 stacks so that after finding three <code>X<\/code>s we end up where we started). To do this we have to fiddle a bit with the lookbehind.<\/p>\n\n<p>There is a catch though. .NET's variable-length lookbehind uses another .NET-unique feature, <code>RightToLeftMode<\/code>, in which the pattern is read (and matched) from right to left. Normally this doesn't need to bother us, but when we combine this with balancing groups, we might be in <a href=\"https:\/\/stackoverflow.com\/questions\/13389560\/balancing-groups-in-variable-length-lookbehind\">for some unpleasant surprises<\/a>. In particular, when considering how our capture stacks evolve, we need to construct (and read) the expression from right to left (or bottom to top) as well.<\/p>\n\n<p>So when you read the following expression (and my annotations), start at the end of the outermost lookbehind (you'll have to scroll a bit) - i.e. just before the only top-level <code>X<\/code>; then read all the way up to the top. And then continue after the lookbehind.<\/p>\n\n<pre><code>(?&lt;=                  \n  # note that the lookbehind below does NOT affect the state of stack 'a'!\n  # in fact, negative lookarounds can never change any capturing state.\n  # this is because they have to fail for the engine to continue matching.\n  # and if they fail, the engine needs to backtrack out of them, in which\n  # case the previous capturing state will be restored.\n  (?&lt;!                # if we get here, there is another X on top of the last\n                      # one in the loop, and the pattern fails\n    ^                 # make sure we reached the beginning of the line\n    (?(a)(?!))        # make sure that stack 'a' is empty\n    (?:(?&lt;-a&gt;).)*     # while we can pop an element from stack 'a', and consume\n                      # a character\n    X.*\\n             # consume the next line and a potential X\n  )\n  # at this point we know that there are less than 3 Xs in the same column\n  # above this position. but there might still be one or two more. these\n  # are the cases we now have to eliminate, and we use a nested negative\n  # lookbehind for this. the lookbehind simply checks the next row and\n  # asserts that there is no further X in the same column.\n  # this, together with the loop, below means that the X we are going to match\n  # is either the topmost in its column or preceded by an integer multiple of 3\n  # Xs - exactly what we are looking for.\n  (?:\n\n    # at this point we've advanced the lookbehind's \"cursor\" by exactly 3 Xs\n    # in the same column, AND we've restored the same amount of captures on\n    # stack 'a', so we're left in exactly the same state as before and can\n    # potentially match another 3 Xs upwards this way.\n    # the fact that stack 'a' is unaffected by a full iteration of this loop is\n    # also crucial for the later (lookahead) part to work regardless of the\n    # amount of Xs we've looked at here.\n\n    ^                 # make sure we reached the beginning of the line\n    (?(c)(?!))        # make sure that stack 'a' is empty\n    (?:(?&lt;-c&gt;)(?&lt;a&gt;).)* # while we can pop an element from stack 'c', push an\n                      # element onto 'a' and consume a character\n    X.*\\n             # consume the next line and a potential X\n    (?(b)(?!))        # make sure that stack 'b' is empty\n    (?:(?&lt;-b&gt;)(?&lt;c&gt;).)* # while we can pop an element from stack 'b', push an\n                      # element onto 'c' and consume a character\n    X.*\\n             # consume the next line and a potential X\n    (?(a)(?!))        # make sure that stack 'a' is empty\n    (?:(?&lt;-a&gt;)(?&lt;b&gt;).)* # while we can pop an element from stack 'a', push an\n                      # element onto 'b' and consume a character\n    X.*\\n             # consume the next line and a potential X\n  )*                  # this non-capturing group will match exactly 3 leading\n                      # Xs in the same column. we repeat this group 0 or more\n                      # times to match an integer-multiple of 3 occurrences.\n  ^                   # make sure we reached the beginning of the line\n  (?:(?&lt;a&gt;).)*        # push an empty capture on the 'a' stack for each\n                      # character in front of X\n)                     # end of lookbehind (or rather beginning)\n\n# the rest is the same as before    \n\nX                     # match X\n(?=.*\\n               # lookahead checks that there are two more Xs right below\n  (?:(?&lt;-a&gt;)(?&lt;b&gt;).)* # while we can pop an element from stack 'a', push an\n                      # element onto 'b' and consume a character\n  (?(a)(?!))          # make sure that stack 'a' is empty\n  X.*\\n               # match X and the rest of the line\n  (?:(?&lt;-b&gt;).)*       # while we can pop an element from stack 'b', and consume\n                      # a character\n  (?(b)(?!))          # make sure that stack 'b' is empty\n  X                   # match a final X\n)                     # end of lookahead\n<\/code><\/pre>\n\n<p><a href=\"http:\/\/regexhero.net\/tester\/?id=f03440f2-36f6-4ff5-8d81-e821e420177d\" rel=\"nofollow noreferrer\">Working demo on RegexHero.net.<\/a><\/p>\n\n<p>I interspersed all explanation right with the pattern this time. So if you read the pattern in the way I recommended above, you get the explanation right when you need it...<\/p>\n\n<p>Now that was one hell of a beast. But it satisfies the entire specification now and shows off just how powerful .NET's regex flavor really is. And, although this seems quite horrible, I think (once you realise the right-to-left-thing) this is much more easily understandable than a comparable solution with PCRE (using recursion or otherwise).<\/p>\n\n<p>As Kobi mentioned in a comment below, this could be shortened a good bit, if you accept that your results are found in multiple captures of a single match (e.g., if you have a column of 7 <code>X<\/code>s you only get one match, but with 2 captures in a certain group). You can do this by repeating the main (lookahead) part 1 or more times and capturing the initial <code>X<\/code> (put everything in a lookahead though). Then the lookbehind does not need to count off triples of <code>X<\/code>s, but only has to check that there is no leading <code>X<\/code>. This would probably cut the size of the pattern in half.<\/p>\n\n<h2>The partial PCRE solution<\/h2>\n\n<p>(If only the bravest of adventurers followed me through the last solution, I am probably only left with madmen on the next journey...)<\/p>\n\n<p>To prove what I just said about how the above solution compares to PCRE, let's look at how we can even remotely solve the full problem in PCRE. We'll have to work a good bit harder without variable-length lookbehinds and balancing groups.<\/p>\n\n<p>Qtax (the OP) provided a brilliant solution to his first question (checking whether the string contains any <code>X<\/code>-column) using self-referencing groups to count. This is a very elegant and compact solution. But because each match goes from the beginning of the line to the <code>X<\/code> that starts the column, and matches cannot overlap, we can't get multiple matches per line. We could try to put everything in a lookahead (so that nothing is actually matched), but two zero-width matches will also never start at the same position - so we'll still get only one match per candidate line.<\/p>\n\n<p>However it is indeed possible to solve at least the first part of question 2 with PCRE: count the number of columns starting in each line (and hence to total amount of <code>X<\/code> columns). Since we cannot get this count in the form of individual matches (see previous paragraph), and we cannot get this count in the form of individual groups or captures (since PCRE provides only a fixed and finite number of captures, as opposed to .NET). What we can do instead is to encode the number of columns in the matches.<\/p>\n\n<p>Here is how: for each line we check if there's a column starting. If so, we include one character in a certain capturing group. Then, before reporting a successful match, we try to find as many further columns as possible - for each one adding a character to that particular group. By doing this, we encode the number of columns starting in each line in the length of that particular capture.<\/p>\n\n<p>Actually realizing this concept in a regex is a lot more complicated than it may first sound (and it already sounds quite complicated). Anyway, here it is:<\/p>\n\n<pre><code>^                        \n(?:(?|\n  (?(5)(?![\\s\\S]*+\\5))      \n  (?!(?!)()()) \n  (?=\n    (?:\n      .                  \n      (?=                \n        .*+\\n            \n        ( \\3? . )   \n        .*+\\n        \n        ( \\4? . )    \n      )\n    )*?              \n    X .*+\\n          \n    \\3               \n    X .*+\\n          \n    \\4               \n  )\n  ()\n|\n  (?(5)(?=[\\s\\S]*+\\5)|(?!))\n  (?:\n    .\n    (?=\n      .*+\\n\n      ( \\1? .)\n      .*+\\n\n      ( \\2? .)\n    )\n  )+?\n  (?=\n    (?&lt;=X).*+\\n\n    (\\1)         \n    (?&lt;=X).*+\\n\n    (\\2)         \n    (?&lt;=X)     \n  )\n  (?=\n    ([\\s\\S])   \n    [\\s\\S]*\n    ([\\s\\S] (?(6)\\6))\n  )\n){2})+\n<\/code><\/pre>\n\n<p><em>(Actually, it's a bit easier than that - see Qtax's answer for how to simplify this approach. I'll leave this approach here anyway for academic reasons, as some very advanced and interesting techniques can be learned from it - see the summary at the end.)<\/em><\/p>\n\n<p>Yes, there are no annotations. I figured, no one would actually read them anyway, so instead I'll try to break this expression down in parts (I'll go for a top-down approach).<\/p>\n\n<p>So let's look at the outer layer of onion from hell:<\/p>\n\n<pre><code>^                        \n(?:(?|\n  checkForNextColumn\n|\n  countAndAdvance\n){2})+\n<\/code><\/pre>\n\n<p>So our matches are again anchored to the beginnings of lines. Then we have a <code>(?:...{2})+<\/code> which means an even number of repetitions of something. And that something is an alternation of two subpatterns. These subpatterns represent the steps I mentioned above. The first one checks that there is another column starting in the current line, the second one registers a count and prepares the engine's state for another application of the first subpattern. So control is given to the second pattern - the first just checks for another column using a lookahead and is hence a zero-width pattern. This is why I cannot simply wrap everything in <code>+<\/code> but have to do the <code>{2})+<\/code> thing - otherwise the zero-width component would be tried only once; that's a necessary optimization applied by pretty much all engines to avoid infinite loops with patterns like <code>(a*)+<\/code>.<\/p>\n\n<p>There is one more (very important detail): I used <code>(?|...)<\/code> for the alternation. In this kind of grouping, each alternative starts with the same group number. Hence in <code>\/(?|(a)|(b))\/<\/code> both <code>a<\/code> and <code>b<\/code> can be captured into group <code>1<\/code>. This is the crucial trick that allows \"communication\" between subpatterns, as they can modify the same groups.<\/p>\n\n<p>Anyway... so we have these two subpatterns. We'd like to make sure that control really alternates between them. So that each group fails if it was the last one that matched. We do this by wrapping the pattern in some grouping-and-referencing magic:<\/p>\n\n<pre><code>^(?:(?|\n  (?(5)(?![\\s\\S]*+\\5))       # if group 5 has matched before make sure that\n                             # it didn't match empty\n  checkForNextColumn         # contains 4 capturing groups\n  ()                         # this is group 5, match empty\n|\n  (?(5)(?=[\\s\\S]*+\\5)|(?!))  # make sure that group 5 is defined and that it\n                             # matched empty\n  advanceEngineState         # contains 4 capturing groups\n  (?=\n    ([\\s\\S])                 # this is group 5, match non-empty\n    [\\s\\S]*                  # advance to the end very end of the string\n    ([\\s\\S] (?(6)\\6))             # add a character from the end of the string to\n                             # group 6\n  )\n){2})+\n<\/code><\/pre>\n\n<p>So at the end of each alternative, we'll invalidate the condition for this alternative to even start matching. At the end of the second alternative we'll also include a character into group <code>6<\/code>, using the technique outlined by Qtax. This is the counting step. I.e., group <code>6<\/code> will contain as many characters as there are columns starting in the current line.<\/p>\n\n<p>Now <code>checkForNextColumn<\/code> will really just be Qtax's solution inside a lookahead. It needs one more modification though and to justify this we'll look into <code>advanceEngineState<\/code> first.<\/p>\n\n<p>Let's think about how we would want to modify the state, for Qtax's solution to match a second column in a row. Say we have input<\/p>\n\n<pre><code>..X..X..\n..X..X..\n..X..X..\n<\/code><\/pre>\n\n<p>and we want to find the second column. This could be accomplished, by starting the match from the position just after the first <code>X<\/code> and having groups <code>\\1<\/code> and <code>\\2<\/code> already initialised to the first three characters (<code>..X<\/code>) of rows 2 and 3, respectively (instead of them being empty).<\/p>\n\n<p>Now let's try to do this: match everything up to and including the next <code>X<\/code> that starts a column, then fill two groups with the corresponding line-prefixes for use in the <code>checkForNextColumn<\/code> pattern. This is again pretty much Qtax's pattern, except that we count the <code>X<\/code> in (instead of stopping right before it), and that we need to add the capturing into a separate group. So here is <code>advanceEngineState<\/code>:<\/p>\n\n<pre><code>(?:\n  .\n  (?=\n    .*+\\n\n    ( \\1? .)\n    .*+\\n\n    ( \\2? .)\n  )\n)+?\n(?=\n  (?&lt;=X) .*+\\n\n  (\\1)        \n  (?&lt;=X) .*+\\n\n  (\\2)        \n  (?&lt;=X)\n)\n<\/code><\/pre>\n\n<p>Note how I turned the <code>X<\/code>s into lookbehinds, to go one character further, and how I effectively copy the final contents of <code>\\1<\/code> into <code>\\3<\/code> and those of <code>\\2<\/code> into <code>\\4<\/code>.<\/p>\n\n<p>So if we now use Qtax's solution as <code>checkForNextColumn<\/code> in a lookahead, using groups <code>\\3<\/code> and <code>\\4<\/code> instead of <code>\\1<\/code> and <code>\\2<\/code>, we should be done.<\/p>\n\n<p>But just how do we make those groups <code>\\3<\/code> and <code>\\4<\/code> instead of <code>\\1<\/code> and <code>\\2<\/code>? We could start the pattern with <code>()()<\/code>, which would always match, without affecting the engine's cursor, but increase the group count by 2. However, this is problematic: this resets groups <code>1<\/code> and <code>2<\/code> to empty strings, which <strong>if<\/strong> we find a second column, <code>advanceEngineState<\/code> will be in an inconsistent state (as the engine's global position has been advanced, but the counting groups are zero again). So we want to get those two groups into the pattern, but without affecting what they are currently capturing. We can do this by utilizing something I already mentioned with the .NET solutions: groups in negative lookarounds do not affect the captured contents (because the engine needs to backtrack out of the lookaround to proceed). Hence we can use <code>(?!(?!)()())<\/code> (a negative lookahead that can never cause the pattern to fail) to include two sets of parentheses in our pattern, that are never used. This allows us to work with groups <code>3<\/code> and <code>4<\/code> in our first subpattern, while keeping groups <code>1<\/code> and <code>2<\/code> untouched for the second subpatterns next iteration. In conclusion this is <code>checkForNextColumn<\/code>:<\/p>\n\n<pre><code>(?!(?!)()()) \n(?=\n  (?:\n    .                  \n    (?=                \n      .*+\\n            \n      ( \\3? . )   \n      .*+\\n        \n      ( \\4? . )    \n    )\n  )*?              \n  X .*+\\n          \n  \\3               \n  X .*+\\n          \n  \\4               \n)\n<\/code><\/pre>\n\n<p>Which, for the most part actually looks really familiar.<\/p>\n\n<p>So this is it. Running this against some input will give us a group <code>6<\/code> which contains one capture for each line that has a column starting - and the capture's length will tell us how many columns started there.<\/p>\n\n<p><a href=\"http:\/\/ideone.com\/gDtDZD\" rel=\"nofollow noreferrer\">Yes, it really works (live demo).<\/a><\/p>\n\n<p>Note that this (like the basic .NET solution) will overcount columns that are more than 3 <code>X<\/code>s long. I suppose it is possible to correct this count with lookaheads (in a similar way to the lookbehind of the full .NET solution), but this is left as an exercise to the reader.<\/p>\n\n<p>It's a bit unfortunate that the base problem of this solution is already very convoluted and bloats the solution (75% of the lines are mostly just copies of Qtax's solution). Because the surrounding framework has some really interesting techniques and lessons:<\/p>\n\n<ul>\n<li>We can have multiple subpatterns that accomplish specific matching\/counting tasks, and have them \"communicate\" through mutual capturing groups, by putting them in a <code>(?|...)<\/code> alternation and looping over them.<\/li>\n<li>We can force zero-width alternatives to be carried out over and over again by wrapping them in a finite quantifier like <code>{2}<\/code> before putting everything into <code>+<\/code>.<\/li>\n<li>Group numbers can be skipped in one subpattern (without affecting the captured contents) by putting them into a never-failing negative lookahead like <code>(?!(?!)())<\/code>.<\/li>\n<li>Control can be passed back and forth between subpatterns by capturing something or nothing in a certain group that is checked upon entering the alternation.<\/li>\n<\/ul>\n\n<p>This allows for some very powerful computations (I've seen claims that PCRE is in fact Turing-complete) - although this is certainly the wrong approach for productive use. But still trying to understand (and come up) with such solutions can be a very challenging and somehow rewarding exercise in problem solving.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2236347,
            "reputation": 29159,
            "user_id": 2307070,
            "user_type": "registered",
            "accept_rate": 97,
            "profile_image": "https:\/\/i.stack.imgur.com\/l8ha6.jpg?s=256&g=1",
            "display_name": "Thomas Ayoub",
            "link": "https:\/\/stackoverflow.com\/users\/2307070\/thomas-ayoub"
        },
        "is_accepted": false,
        "score": 28,
        "last_activity_date": 1472079257,
        "last_edit_date": 1495541339.0,
        "creation_date": 1468833853,
        "answer_id": 38433055,
        "question_id": 38431931,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "First, even if the resulting regex will not keep the same meaning, let&#39;s reduces regexes to `\\s*0` and `\\s+0` and use `(&quot; &quot; x 4) . &quot;_0&quot;` as an input. For the sceptics, you can see [here](http:\/\/rextester.com\/OUZ39841) that the lag is still present.\r\n\r\nNow let&#39;s consider the following code:\r\n\r\n    $x = (&quot; &quot; x 4) . &quot;_ 0&quot;;\r\n    $x =~ \/\\s*0\/; # The slow line \r\n    $x =~ \/\\s+0\/; # The fast line\r\n\r\nDigging a bit with `use re debugcolor;` we get the following output:\r\n\r\n&lt;!-- language: lang-none --&gt;\r\n\r\n    Guessing start of match in sv for REx &quot;\\s*0&quot; against &quot;    _0&quot;\r\n    Found floating substr &quot;0&quot; at offset 5...\r\n    start_shift: 0 check_at: 5 s: 0 endpos: 6 checked_upto: 0\r\n    Does not contradict STCLASS...\r\n    Guessed: match at offset 0\r\n    Matching REx &quot;\\s*0&quot; against &quot;    _0&quot;\r\n    Matching stclass ANYOF_SYNTHETIC[\\x09-\\x0d 0\\x85\\xa0][{unicode_all}] against &quot;    _0&quot; (6 bytes)\r\n       0 &lt;    _0&gt;|  1:STAR(3)\r\n                                      POSIXD[\\s] can match 4 times out of 2147483647...\r\n                                      failed...\r\n       1 &lt;    _0&gt;|  1:STAR(3)\r\n                                      POSIXD[\\s] can match 3 times out of 2147483647...\r\n                                      failed...\r\n       2 &lt;    _0&gt;|  1:STAR(3)\r\n                                      POSIXD[\\s] can match 2 times out of 2147483647...\r\n                                      failed...\r\n       3 &lt;    _0&gt;|  1:STAR(3)\r\n                                      POSIXD[\\s] can match 1 times out of 2147483647...\r\n                                      failed...\r\n       5 &lt;    _0&gt;|  1:STAR(3)\r\n                                      POSIXD[\\s] can match 0 times out of 2147483647...\r\n       5 &lt;    _0&gt;|  3:  EXACT &lt;0&gt;(5)\r\n       6 &lt;    _0&gt;|  5:  END(0)\r\n    Match successful!\r\n\r\n    -----------------------\r\n\r\n    Guessing start of match in sv for REx &quot;\\s+0&quot; against &quot;    _0&quot;\r\n    Found floating substr &quot;0&quot; at offset 5...\r\n    start_shift: 1 check_at: 5 s: 0 endpos: 5 checked_upto: 0\r\n    Does not contradict STCLASS...\r\n    Guessed: match at offset 0\r\n    Matching REx &quot;\\s+0&quot; against &quot;    _0&quot;\r\n    Matching stclass POSIXD[\\s] against &quot;    _&quot; (5 bytes)\r\n       0 &lt;    _0&gt;|  1:PLUS(3)\r\n                                      POSIXD[\\s] can match 4 times out of 2147483647...\r\n                                      failed...\r\n    Contradicts stclass... [regexec_flags]\r\n    Match failed\r\n\r\n\r\nPerl seems to [be optimized for failure](https:\/\/stackoverflow.com\/a\/19578815\/2307070). It will first look for constant strings (which only consume O(N)). Here, it&#39;ll look for `0` : `Found floating substr &quot;0&quot; at offset 5...`\r\n\r\nThen it&#39;ll start with the *variable* part of the regex, respectivly `\\s*` and `\\s+`, against the whole minimum string to check:\r\n\r\n&lt;!-- language: lang-none --&gt;\r\n\r\n    Matching REx &quot;\\s*0&quot; against &quot;    _0&quot;\r\n    Matching stclass ANYOF_SYNTHETIC[\\x09-\\x0d 0\\x85\\xa0][{unicode_all}] against &quot;    _0&quot; (6 bytes)\r\n    Matching REx &quot;\\s+0&quot; against &quot;    _0&quot;\r\n    Matching stclass POSIXD[\\s] against &quot;    _&quot; (5 bytes) # Only 5 bytes because there should be at least 1 &quot;\\s&quot; char\r\n\r\nAfter that it&#39;ll look for the first position meeting the `stclass` requirement, here at position 0.\r\n\r\n - `\\s*0`:\r\n   - starts at 0, find 4 spaces then fail;\r\n   - starts at 1, find 3 spaces then fail;\r\n   - starts at 2, find 2 spaces then fail;\r\n   - starts at 3, find 1 spaces then fail;\r\n   - starts at 4, find 0 spaces then **doesn&#39;t fail**;\r\n   - Find an exact `0`\r\n - `\\s+0`:\r\n   - starts at 0, find 4 spaces then fail. As the minimum number of spaces is not matched, the regex fails instantly.\r\n\r\nIf you want to have fun with Perl regex optimization, you can consider the following regexes `\/  *\\n` and `\/ * \\n`. At first glance, they look the same, have the same meaning... But if you run its against `(&quot; &quot; x 40000) . &quot;_\\n&quot;` the first one will check all possibilities while the second one will look for `&quot; \\n&quot;` and fail immediately.\r\n\r\nIn a vanilla, non-optimized regex engine, both regex can cause catastrophic backtracking, since they need to retry the pattern as it bumps along. However, in the example above, the second doesn&#39;t fail with Perl because it have been optimized to `find floating substr &quot;0%n&quot;`\r\n\r\n---\r\n\r\nYou can see another example on [Jeff Atwood&#39;s blog](https:\/\/blog.codinghorror.com\/regex-performance\/).\r\n\r\nNote also that the issue is not about `\\s` consideration but any pattern where `xx*` is used instead of `x+` see [example with 0s](http:\/\/rextester.com\/EPP77663) and also [regex explosive quantifiers](http:\/\/www.rexegg.com\/regex-explosive-quantifiers.html#combinations)\r\n\r\nWith such shorter example the behavior is &quot;findable&quot;, but if you start to play with complicated patterns, it&#39;s far from easy to spot, for example: https:\/\/stackoverflow.com\/questions\/11522954\/regular-expression-hangs-program-100-cpu-usage\/11523255#11523255\r\n\r\n",
        "body": "<p>First, even if the resulting regex will not keep the same meaning, let's reduces regexes to <code>\\s*0<\/code> and <code>\\s+0<\/code> and use <code>(\" \" x 4) . \"_0\"<\/code> as an input. For the sceptics, you can see <a href=\"http:\/\/rextester.com\/OUZ39841\" rel=\"nofollow noreferrer\">here<\/a> that the lag is still present.<\/p>\n\n<p>Now let's consider the following code:<\/p>\n\n<pre><code>$x = (\" \" x 4) . \"_ 0\";\n$x =~ \/\\s*0\/; # The slow line \n$x =~ \/\\s+0\/; # The fast line\n<\/code><\/pre>\n\n<p>Digging a bit with <code>use re debugcolor;<\/code> we get the following output:<\/p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Guessing start of match in sv for REx \"\\s*0\" against \"    _0\"\nFound floating substr \"0\" at offset 5...\nstart_shift: 0 check_at: 5 s: 0 endpos: 6 checked_upto: 0\nDoes not contradict STCLASS...\nGuessed: match at offset 0\nMatching REx \"\\s*0\" against \"    _0\"\nMatching stclass ANYOF_SYNTHETIC[\\x09-\\x0d 0\\x85\\xa0][{unicode_all}] against \"    _0\" (6 bytes)\n   0 &lt;    _0&gt;|  1:STAR(3)\n                                  POSIXD[\\s] can match 4 times out of 2147483647...\n                                  failed...\n   1 &lt;    _0&gt;|  1:STAR(3)\n                                  POSIXD[\\s] can match 3 times out of 2147483647...\n                                  failed...\n   2 &lt;    _0&gt;|  1:STAR(3)\n                                  POSIXD[\\s] can match 2 times out of 2147483647...\n                                  failed...\n   3 &lt;    _0&gt;|  1:STAR(3)\n                                  POSIXD[\\s] can match 1 times out of 2147483647...\n                                  failed...\n   5 &lt;    _0&gt;|  1:STAR(3)\n                                  POSIXD[\\s] can match 0 times out of 2147483647...\n   5 &lt;    _0&gt;|  3:  EXACT &lt;0&gt;(5)\n   6 &lt;    _0&gt;|  5:  END(0)\nMatch successful!\n\n-----------------------\n\nGuessing start of match in sv for REx \"\\s+0\" against \"    _0\"\nFound floating substr \"0\" at offset 5...\nstart_shift: 1 check_at: 5 s: 0 endpos: 5 checked_upto: 0\nDoes not contradict STCLASS...\nGuessed: match at offset 0\nMatching REx \"\\s+0\" against \"    _0\"\nMatching stclass POSIXD[\\s] against \"    _\" (5 bytes)\n   0 &lt;    _0&gt;|  1:PLUS(3)\n                                  POSIXD[\\s] can match 4 times out of 2147483647...\n                                  failed...\nContradicts stclass... [regexec_flags]\nMatch failed\n<\/code><\/pre>\n\n<p>Perl seems to <a href=\"https:\/\/stackoverflow.com\/a\/19578815\/2307070\">be optimized for failure<\/a>. It will first look for constant strings (which only consume O(N)). Here, it'll look for <code>0<\/code> : <code>Found floating substr \"0\" at offset 5...<\/code><\/p>\n\n<p>Then it'll start with the <em>variable<\/em> part of the regex, respectivly <code>\\s*<\/code> and <code>\\s+<\/code>, against the whole minimum string to check:<\/p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Matching REx \"\\s*0\" against \"    _0\"\nMatching stclass ANYOF_SYNTHETIC[\\x09-\\x0d 0\\x85\\xa0][{unicode_all}] against \"    _0\" (6 bytes)\nMatching REx \"\\s+0\" against \"    _0\"\nMatching stclass POSIXD[\\s] against \"    _\" (5 bytes) # Only 5 bytes because there should be at least 1 \"\\s\" char\n<\/code><\/pre>\n\n<p>After that it'll look for the first position meeting the <code>stclass<\/code> requirement, here at position 0.<\/p>\n\n<ul>\n<li><code>\\s*0<\/code>:\n\n<ul>\n<li>starts at 0, find 4 spaces then fail;<\/li>\n<li>starts at 1, find 3 spaces then fail;<\/li>\n<li>starts at 2, find 2 spaces then fail;<\/li>\n<li>starts at 3, find 1 spaces then fail;<\/li>\n<li>starts at 4, find 0 spaces then <strong>doesn't fail<\/strong>;<\/li>\n<li>Find an exact <code>0<\/code><\/li>\n<\/ul><\/li>\n<li><code>\\s+0<\/code>:\n\n<ul>\n<li>starts at 0, find 4 spaces then fail. As the minimum number of spaces is not matched, the regex fails instantly.<\/li>\n<\/ul><\/li>\n<\/ul>\n\n<p>If you want to have fun with Perl regex optimization, you can consider the following regexes <code>\/  *\\n<\/code> and <code>\/ * \\n<\/code>. At first glance, they look the same, have the same meaning... But if you run its against <code>(\" \" x 40000) . \"_\\n\"<\/code> the first one will check all possibilities while the second one will look for <code>\" \\n\"<\/code> and fail immediately.<\/p>\n\n<p>In a vanilla, non-optimized regex engine, both regex can cause catastrophic backtracking, since they need to retry the pattern as it bumps along. However, in the example above, the second doesn't fail with Perl because it have been optimized to <code>find floating substr \"0%n\"<\/code><\/p>\n\n<hr>\n\n<p>You can see another example on <a href=\"https:\/\/blog.codinghorror.com\/regex-performance\/\" rel=\"nofollow noreferrer\">Jeff Atwood's blog<\/a>.<\/p>\n\n<p>Note also that the issue is not about <code>\\s<\/code> consideration but any pattern where <code>xx*<\/code> is used instead of <code>x+<\/code> see <a href=\"http:\/\/rextester.com\/EPP77663\" rel=\"nofollow noreferrer\">example with 0s<\/a> and also <a href=\"http:\/\/www.rexegg.com\/regex-explosive-quantifiers.html#combinations\" rel=\"nofollow noreferrer\">regex explosive quantifiers<\/a><\/p>\n\n<p>With such shorter example the behavior is \"findable\", but if you start to play with complicated patterns, it's far from easy to spot, for example: <a href=\"https:\/\/stackoverflow.com\/questions\/11522954\/regular-expression-hangs-program-100-cpu-usage\/11523255#11523255\">Regular expression hangs program (100% CPU usage)<\/a><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2989,
            "reputation": 26550,
            "user_id": 4234,
            "user_type": "registered",
            "accept_rate": 73,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/b6d08f3086f5dfa579a59c9f98e5a348?s=256&d=identicon&r=PG",
            "display_name": "dreeves",
            "link": "https:\/\/stackoverflow.com\/users\/4234\/dreeves"
        },
        "is_accepted": true,
        "score": 27,
        "last_activity_date": 1396505019,
        "last_edit_date": 1396505019.0,
        "creation_date": 1221763416,
        "answer_id": 95539,
        "question_id": 95492,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "This is the simplest way to get unix time:\r\n\r\n    use Time::Local;\r\n    timelocal($second,$minute,$hour,$day,$month-1,$year);\r\n\r\nNote the reverse order of the arguments and that January is month 0.\r\nFor many more options, see the [DateTime](https:\/\/metacpan.org\/pod\/DateTime) module from CPAN.  \r\n\r\nAs for parsing, see the [Date::Parse](https:\/\/metacpan.org\/pod\/Date::Parse) module from CPAN.  If you really need to get fancy with date parsing, the [Date::Manip](https:\/\/metacpan.org\/pod\/Date::Manip) may be helpful, though its own documentation warns you away from it since it carries a lot of baggage (it knows things like common business holidays, for example) and other solutions are much faster.\r\n\r\nIf you happen to know something about the format of the date\/times you&#39;ll be parsing then a simple regular expression may suffice but you&#39;re probably better off using an appropriate CPAN module.  For example, if you know the dates will always be in YMDHMS order, use the CPAN module [DateTime::Format::ISO8601](https:\/\/metacpan.org\/pod\/DateTime::Format::ISO8601).\r\n\r\n&lt;hr&gt;\r\n\r\nFor my own reference, if nothing else, below is a function I use for an application where I know the dates will always be in YMDHMS order with all or part of the &quot;HMS&quot; part optional.  It accepts any delimiters (eg, &quot;2009-02-15&quot; or &quot;2009.02.15&quot;).  It returns the corresponding unix time (seconds since 1970-01-01 00:00:00 GMT) or -1 if it couldn&#39;t parse it (which means you better be sure you&#39;ll never legitimately need to parse the date 1969-12-31 23:59:59).  It also presumes two-digit years XX up to &quot;69&quot; refer to &quot;20XX&quot;, otherwise &quot;19XX&quot; (eg, &quot;50-02-15&quot; means 2050-02-15 but &quot;75-02-15&quot; means 1975-02-15).\r\n\r\n    use Time::Local;\r\n\r\n    sub parsedate { \r\n      my($s) = @_;\r\n      my($year, $month, $day, $hour, $minute, $second);\r\n    \r\n      if($s =~ m{^\\s*(\\d{1,4})\\W*0*(\\d{1,2})\\W*0*(\\d{1,2})\\W*0*\r\n                     (\\d{0,2})\\W*0*(\\d{0,2})\\W*0*(\\d{0,2})}x) {\r\n        $year = $1;  $month = $2;   $day = $3;\r\n        $hour = $4;  $minute = $5;  $second = $6;\r\n        $hour |= 0;  $minute |= 0;  $second |= 0;  # defaults.\r\n        $year = ($year&lt;100 ? ($year&lt;70 ? 2000+$year : 1900+$year) : $year);\r\n        return timelocal($second,$minute,$hour,$day,$month-1,$year);  \r\n      }\r\n      return -1;\r\n    }\r\n",
        "body": "<p>This is the simplest way to get unix time:<\/p>\n\n<pre><code>use Time::Local;\ntimelocal($second,$minute,$hour,$day,$month-1,$year);\n<\/code><\/pre>\n\n<p>Note the reverse order of the arguments and that January is month 0.\nFor many more options, see the <a href=\"https:\/\/metacpan.org\/pod\/DateTime\" rel=\"noreferrer\">DateTime<\/a> module from CPAN.  <\/p>\n\n<p>As for parsing, see the <a href=\"https:\/\/metacpan.org\/pod\/Date::Parse\" rel=\"noreferrer\">Date::Parse<\/a> module from CPAN.  If you really need to get fancy with date parsing, the <a href=\"https:\/\/metacpan.org\/pod\/Date::Manip\" rel=\"noreferrer\">Date::Manip<\/a> may be helpful, though its own documentation warns you away from it since it carries a lot of baggage (it knows things like common business holidays, for example) and other solutions are much faster.<\/p>\n\n<p>If you happen to know something about the format of the date\/times you'll be parsing then a simple regular expression may suffice but you're probably better off using an appropriate CPAN module.  For example, if you know the dates will always be in YMDHMS order, use the CPAN module <a href=\"https:\/\/metacpan.org\/pod\/DateTime::Format::ISO8601\" rel=\"noreferrer\">DateTime::Format::ISO8601<\/a>.<\/p>\n\n<hr>\n\n<p>For my own reference, if nothing else, below is a function I use for an application where I know the dates will always be in YMDHMS order with all or part of the \"HMS\" part optional.  It accepts any delimiters (eg, \"2009-02-15\" or \"2009.02.15\").  It returns the corresponding unix time (seconds since 1970-01-01 00:00:00 GMT) or -1 if it couldn't parse it (which means you better be sure you'll never legitimately need to parse the date 1969-12-31 23:59:59).  It also presumes two-digit years XX up to \"69\" refer to \"20XX\", otherwise \"19XX\" (eg, \"50-02-15\" means 2050-02-15 but \"75-02-15\" means 1975-02-15).<\/p>\n\n<pre><code>use Time::Local;\n\nsub parsedate { \n  my($s) = @_;\n  my($year, $month, $day, $hour, $minute, $second);\n\n  if($s =~ m{^\\s*(\\d{1,4})\\W*0*(\\d{1,2})\\W*0*(\\d{1,2})\\W*0*\n                 (\\d{0,2})\\W*0*(\\d{0,2})\\W*0*(\\d{0,2})}x) {\n    $year = $1;  $month = $2;   $day = $3;\n    $hour = $4;  $minute = $5;  $second = $6;\n    $hour |= 0;  $minute |= 0;  $second |= 0;  # defaults.\n    $year = ($year&lt;100 ? ($year&lt;70 ? 2000+$year : 1900+$year) : $year);\n    return timelocal($second,$minute,$hour,$day,$month-1,$year);  \n  }\n  return -1;\n}\n<\/code><\/pre>\n",
        "community_owned_date": 1234813870.0
    },
    {
        "owner": {
            "account_id": 17881,
            "reputation": 53314,
            "user_id": 40468,
            "user_type": "registered",
            "accept_rate": 60,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/43722cb1e955874a8eb721e9dfe101d1?s=256&d=identicon&r=PG",
            "display_name": "Ether",
            "link": "https:\/\/stackoverflow.com\/users\/40468\/ether"
        },
        "is_accepted": false,
        "score": 27,
        "last_activity_date": 1256242527,
        "last_edit_date": 1256242527.0,
        "creation_date": 1256241532,
        "answer_id": 1609602,
        "question_id": 1609467,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "There&#39;s [Test::More][1]&#39;s is_deeply() function, which will also display exactly where the structures differ, or [Test::Deep][2]&#39;s eq_deeply(), which doesn&#39;t require a test harness (and just returns true or false).\r\n\r\n  [1]: http:\/\/search.cpan.org\/perldoc?Test::More\r\n  [2]: http:\/\/search.cpan.org\/perldoc?Test::Deep",
        "body": "<p>There's <a href=\"http:\/\/search.cpan.org\/perldoc?Test::More\" rel=\"noreferrer\">Test::More<\/a>'s is_deeply() function, which will also display exactly where the structures differ, or <a href=\"http:\/\/search.cpan.org\/perldoc?Test::Deep\" rel=\"noreferrer\">Test::Deep<\/a>'s eq_deeply(), which doesn't require a test harness (and just returns true or false).<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5473,
            "reputation": 130134,
            "user_id": 2766176,
            "user_type": "registered",
            "accept_rate": 61,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/edd8638efe875601bfe394a8aea5b16d?s=256&d=identicon&r=PG",
            "display_name": "brian d foy",
            "link": "https:\/\/stackoverflow.com\/users\/2766176\/brian-d-foy"
        },
        "is_accepted": false,
        "score": 26,
        "last_activity_date": 1580906554,
        "last_edit_date": 1580906554.0,
        "creation_date": 1223504498,
        "answer_id": 185153,
        "question_id": 185114,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "There are several ways you can modify &lt;code&gt;@INC&lt;\/code&gt;.\r\n\r\n* set `PERL5LIB`, as documented in [perlrun](http:\/\/perldoc.perl.org\/perlrun.html)\r\n\r\n* use the `-I` switch on the command line, also documented in [perlrun](http:\/\/perldoc.perl.org\/perlrun.html). You can also apply this automatically with PERL5OPT, but just use PERL5LIB if you are going to do that.\r\n\r\n* &lt;code&gt;use lib&lt;\/code&gt; inside your program, although this is fragile since another person on a different machine might have it in a different directory.\r\n\r\n* Manually modify &lt;code&gt;@INC&lt;\/code&gt;, making sure you do that at compile time if you want to pull in a module with use. That&#39;s too much work though.\r\n\r\n* `require` the filename directly. While this is possible, it doesn&#39;t allow that filename to load files in the same directory. This would definitely raise eyebrows in a code review. ",
        "body": "<p>There are several ways you can modify <code>@INC<\/code>.<\/p>\n\n<ul>\n<li><p>set <code>PERL5LIB<\/code>, as documented in <a href=\"http:\/\/perldoc.perl.org\/perlrun.html\" rel=\"noreferrer\">perlrun<\/a><\/p><\/li>\n<li><p>use the <code>-I<\/code> switch on the command line, also documented in <a href=\"http:\/\/perldoc.perl.org\/perlrun.html\" rel=\"noreferrer\">perlrun<\/a>. You can also apply this automatically with PERL5OPT, but just use PERL5LIB if you are going to do that.<\/p><\/li>\n<li><p><code>use lib<\/code> inside your program, although this is fragile since another person on a different machine might have it in a different directory.<\/p><\/li>\n<li><p>Manually modify <code>@INC<\/code>, making sure you do that at compile time if you want to pull in a module with use. That's too much work though.<\/p><\/li>\n<li><p><code>require<\/code> the filename directly. While this is possible, it doesn't allow that filename to load files in the same directory. This would definitely raise eyebrows in a code review. <\/p><\/li>\n<\/ul>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5191,
            "reputation": 30711,
            "user_id": 8233,
            "user_type": "registered",
            "accept_rate": 69,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/5ed2571484765d12fcb3230f235a8ecc?s=256&d=identicon&r=PG",
            "display_name": "Michael Carman",
            "link": "https:\/\/stackoverflow.com\/users\/8233\/michael-carman"
        },
        "is_accepted": false,
        "score": 26,
        "last_activity_date": 1233707091,
        "last_edit_date": null,
        "creation_date": 1233707091,
        "answer_id": 509600,
        "question_id": 509576,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "Use the builtin [stat](http:\/\/perldoc.perl.org\/functions\/stat.html) function. Or more specifically:\r\n\r\n    my $modtime = (stat($fh))[9]",
        "body": "<p>Use the builtin <a href=\"http:\/\/perldoc.perl.org\/functions\/stat.html\" rel=\"noreferrer\">stat<\/a> function. Or more specifically:<\/p>\n\n<pre><code>my $modtime = (stat($fh))[9]\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "user_type": "does_not_exist",
            "display_name": "user149341"
        },
        "is_accepted": false,
        "score": 26,
        "last_activity_date": 1596974435,
        "last_edit_date": 1596974435.0,
        "creation_date": 1317439101,
        "answer_id": 7617920,
        "question_id": 7617852,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "[Carp][1] is better than [warn][2]\/[die][3] in that it will display the file and line of what called the function throwing an error, rather than simply where the error was thrown. This can often be useful for libraries. (For instance, a database library should probably throw errors indicating where the erroneous database call is, rather than indicating a line within itself.)\r\n\r\n`carp`, `cluck`, `croak`, and `confess` give you four combinations of options:\r\n\r\n* `carp`: not fatal, no backtrace\r\n* `cluck`: not fatal, with backtrace\r\n* `croak`: fatal, no backtrace\r\n* `confess`: fatal, with backtrace\r\n\r\n\r\n  [1]: https:\/\/metacpan.org\/pod\/Carp\r\n  [2]: https:\/\/perldoc.perl.org\/functions\/warn.html\r\n  [3]: https:\/\/perldoc.perl.org\/functions\/die.html",
        "body": "<p><a href=\"https:\/\/metacpan.org\/pod\/Carp\" rel=\"nofollow noreferrer\">Carp<\/a> is better than <a href=\"https:\/\/perldoc.perl.org\/functions\/warn.html\" rel=\"nofollow noreferrer\">warn<\/a>\/<a href=\"https:\/\/perldoc.perl.org\/functions\/die.html\" rel=\"nofollow noreferrer\">die<\/a> in that it will display the file and line of what called the function throwing an error, rather than simply where the error was thrown. This can often be useful for libraries. (For instance, a database library should probably throw errors indicating where the erroneous database call is, rather than indicating a line within itself.)<\/p>\n<p><code>carp<\/code>, <code>cluck<\/code>, <code>croak<\/code>, and <code>confess<\/code> give you four combinations of options:<\/p>\n<ul>\n<li><code>carp<\/code>: not fatal, no backtrace<\/li>\n<li><code>cluck<\/code>: not fatal, with backtrace<\/li>\n<li><code>croak<\/code>: fatal, no backtrace<\/li>\n<li><code>confess<\/code>: fatal, with backtrace<\/li>\n<\/ul>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5301,
            "reputation": 91545,
            "user_id": 8454,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/i.stack.imgur.com\/2NlHs.png?s=256&g=1",
            "display_name": "Andy Lester",
            "link": "https:\/\/stackoverflow.com\/users\/8454\/andy-lester"
        },
        "is_accepted": false,
        "score": 25,
        "last_activity_date": 1283457408,
        "last_edit_date": 1283457408.0,
        "creation_date": 1222293395,
        "answer_id": 130214,
        "question_id": 129945,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "You may also see the string [&quot;0E0&quot; used in Perl code][1], and it means the same thing, where 0E0 just means 0 written in exponential notation.  However, since Perl only considers &quot;0&quot;, &#39;&#39; or undef as false, it evaluates to true in a boolean context.\r\n\r\n\r\n  [1]: http:\/\/www.google.com\/codesearch?q=0E0",
        "body": "<p>You may also see the string <a href=\"http:\/\/www.google.com\/codesearch?q=0E0\" rel=\"noreferrer\">\"0E0\" used in Perl code<\/a>, and it means the same thing, where 0E0 just means 0 written in exponential notation.  However, since Perl only considers \"0\", '' or undef as false, it evaluates to true in a boolean context.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 47405,
            "reputation": 5378,
            "user_id": 140377,
            "user_type": "registered",
            "accept_rate": 81,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/d421e9a5c4254129b7159ec2717da5ac?s=256&d=identicon&r=PG",
            "display_name": "Swoogan",
            "link": "https:\/\/stackoverflow.com\/users\/140377\/swoogan"
        },
        "is_accepted": false,
        "score": 25,
        "last_activity_date": 1527690339,
        "last_edit_date": 1527690339.0,
        "creation_date": 1318959070,
        "answer_id": 7811317,
        "question_id": 1023710,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "If you have cygwin installed, you can simply download the standalone version.  Perl is installed with cygwin.  Here are the steps:\r\n\r\n    $ vim .bash_profile\r\n\r\nRemove the comments from the lines:\r\n\r\n    # if [ -d &quot;${HOME}\/bin&quot; ] ; then\r\n    #  PATH=&quot;${HOME}\/bin:${PATH}&quot;\r\n    # fi\r\n\r\nLoad the changes:\r\n\r\n    $ source .bash_profile\r\n\r\nMake a bin directory:\r\n\r\n    $ mkdir ~\/bin\r\n\r\nDownload ack (from the homepage):\r\n\r\n    $ curl https:\/\/beyondgrep.com\/ack-2.22-single-file &gt; ~\/bin\/ack &amp;&amp; chmod 0755 ~\/bin\/ack\r\n\r\n**Note:** you will have to manually install curl as it doesn&#39;t come with cygwin by default.",
        "body": "<p>If you have cygwin installed, you can simply download the standalone version.  Perl is installed with cygwin.  Here are the steps:<\/p>\n\n<pre><code>$ vim .bash_profile\n<\/code><\/pre>\n\n<p>Remove the comments from the lines:<\/p>\n\n<pre><code># if [ -d \"${HOME}\/bin\" ] ; then\n#  PATH=\"${HOME}\/bin:${PATH}\"\n# fi\n<\/code><\/pre>\n\n<p>Load the changes:<\/p>\n\n<pre><code>$ source .bash_profile\n<\/code><\/pre>\n\n<p>Make a bin directory:<\/p>\n\n<pre><code>$ mkdir ~\/bin\n<\/code><\/pre>\n\n<p>Download ack (from the homepage):<\/p>\n\n<pre><code>$ curl https:\/\/beyondgrep.com\/ack-2.22-single-file &gt; ~\/bin\/ack &amp;&amp; chmod 0755 ~\/bin\/ack\n<\/code><\/pre>\n\n<p><strong>Note:<\/strong> you will have to manually install curl as it doesn't come with cygwin by default.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5067826,
            "reputation": 688,
            "user_id": 4067472,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/b7e16b88ec33d4ce1798916c722fdd0b?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "RaFD",
            "link": "https:\/\/stackoverflow.com\/users\/4067472\/rafd"
        },
        "is_accepted": true,
        "score": 25,
        "last_activity_date": 1413188174,
        "last_edit_date": 1413188174.0,
        "creation_date": 1412518993,
        "answer_id": 26203484,
        "question_id": 26178038,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "I will focus on only one of your examples, because rest things should be analogical:\r\n\r\nWhat I think, may matter in this situation is Read-Ahead (or maybe another technique related to this) feature:\r\n\r\nLet consider such example:\r\n\r\nI have created 1000 xml files in &quot;1&quot; dir (names 1.xml to 1000.xml) as you did by dd command and then I copied orginal dir 1 to dir 2\r\n\r\n\r\n    $ mkdir 1\r\n    $ cd 1\r\n    $ for i in {1..1000}; do dd if=\/dev\/urandom of=$i.xml bs=1K count=10; done\r\n    $ cd ..\r\n    $ cp -r 1 2\r\n    $ sync; sudo sh -c &#39;echo 3 &gt; \/proc\/sys\/vm\/drop_caches&#39;\r\n    $ time strace -f -c -o trace.copy2c cp -r 2 2copy\r\n    $ sync; sudo sh -c &#39;echo 3 &gt; \/proc\/sys\/vm\/drop_caches&#39;\r\n    $ time strace -f -c -o trace.copy1c cp -r 1 1copy\r\n\r\n\r\nIn the next step I debugged cp command (by strace) to found out in what order data are copied:\r\n\r\nSo cp does it in following order (only first 4 files, because I saw that the second read from original directory is more time consuming that second read from copied directory)\r\n\r\n\r\n100.xml \r\n150.xml\r\n58.xml\r\n64.xml\r\n...\r\n* in my example\r\n\r\n\r\n\r\nNow, take a look on filesystem blocks which are used by these files (debugfs output - ext3 fs):\r\n\r\nOriginal directory:\r\n\r\n    BLOCKS:\r\n    (0-9):63038-63047 100.xml\r\n    (0-9):64091-64100 150.xml\r\n    (0-9):57926-57935 58.xml\r\n    (0-9):60959-60968 64.xml\r\n    ....\r\n    \r\n    \r\n    Copied directory:\r\n    BLOCKS:\r\n    (0-9):65791-65800 100.xml\r\n    (0-9):65801-65810 150.xml\r\n    (0-9):65811-65820 58.xml\r\n    (0-9):65821-65830 64.xml\r\n\r\n....\r\n\r\n\r\nAs you can see, in the &quot;Copied directory&quot; the block are adjacent, so it means that during reading of the first file 100.xml the &quot;Read Ahead&quot;\r\ntechnique (controller or system settings) can increase performance.\r\n\r\n\r\n\r\ndd create file in order 1.xml to 1000.xml, but cp command copies it in another order (100.xml, 150.xml, 58.xml,64.xml).\r\nSo when you execute:\r\n\r\n    cp -r 1 1copy\r\n\r\nto copy this dir to another, the blocks of files which you are copied are not adjacent, so read of such files take more time.\r\n\r\nWhen you copy dir which you copied by cp command (so files are not created by dd command), then file are adjacent so creating:\r\n\r\n    cp -r 2 2copy \r\n\r\ncopy of the copy is faster.\r\n\r\n\r\nSummary:\r\nSo to test performance python\/perl you should use the same dir (or two dirs copied by cp command) and also you can use option O_DIRECT to read bypassing\r\nall kernel buffers and read data from disk directly. \r\n\r\n\r\nPlease remember, that results can be different on different type of kernel, system, disk controller, system settings, fs and so on. \r\n\r\nAdditions:\r\n\r\n     [debugfs] \r\n    [root@dhcppc3 test]# debugfs \/dev\/sda1 \r\n    debugfs 1.39 (29-May-2006)\r\n    debugfs:  cd test\r\n    debugfs:  stat test.xml\r\n    Inode: 24102   Type: regular    Mode:  0644   Flags: 0x0   Generation: 3385884179\r\n    User:     0   Group:     0   Size: 4\r\n    File ACL: 0    Directory ACL: 0\r\n    Links: 1   Blockcount: 2\r\n    Fragment:  Address: 0    Number: 0    Size: 0\r\n    ctime: 0x543274bf -- Mon Oct  6 06:53:51 2014\r\n    atime: 0x543274be -- Mon Oct  6 06:53:50 2014\r\n    mtime: 0x543274bf -- Mon Oct  6 06:53:51 2014\r\n    BLOCKS:\r\n    (0):29935\r\n    TOTAL: 1\r\n    \r\n    debugfs:  \r\n\r\n\r\n",
        "body": "<p>I will focus on only one of your examples, because rest things should be analogical:<\/p>\n\n<p>What I think, may matter in this situation is Read-Ahead (or maybe another technique related to this) feature:<\/p>\n\n<p>Let consider such example:<\/p>\n\n<p>I have created 1000 xml files in \"1\" dir (names 1.xml to 1000.xml) as you did by dd command and then I copied orginal dir 1 to dir 2<\/p>\n\n<pre><code>$ mkdir 1\n$ cd 1\n$ for i in {1..1000}; do dd if=\/dev\/urandom of=$i.xml bs=1K count=10; done\n$ cd ..\n$ cp -r 1 2\n$ sync; sudo sh -c 'echo 3 &gt; \/proc\/sys\/vm\/drop_caches'\n$ time strace -f -c -o trace.copy2c cp -r 2 2copy\n$ sync; sudo sh -c 'echo 3 &gt; \/proc\/sys\/vm\/drop_caches'\n$ time strace -f -c -o trace.copy1c cp -r 1 1copy\n<\/code><\/pre>\n\n<p>In the next step I debugged cp command (by strace) to found out in what order data are copied:<\/p>\n\n<p>So cp does it in following order (only first 4 files, because I saw that the second read from original directory is more time consuming that second read from copied directory)<\/p>\n\n<p>100.xml \n150.xml\n58.xml\n64.xml\n...\n* in my example<\/p>\n\n<p>Now, take a look on filesystem blocks which are used by these files (debugfs output - ext3 fs):<\/p>\n\n<p>Original directory:<\/p>\n\n<pre><code>BLOCKS:\n(0-9):63038-63047 100.xml\n(0-9):64091-64100 150.xml\n(0-9):57926-57935 58.xml\n(0-9):60959-60968 64.xml\n....\n\n\nCopied directory:\nBLOCKS:\n(0-9):65791-65800 100.xml\n(0-9):65801-65810 150.xml\n(0-9):65811-65820 58.xml\n(0-9):65821-65830 64.xml\n<\/code><\/pre>\n\n<p>....<\/p>\n\n<p>As you can see, in the \"Copied directory\" the block are adjacent, so it means that during reading of the first file 100.xml the \"Read Ahead\"\ntechnique (controller or system settings) can increase performance.<\/p>\n\n<p>dd create file in order 1.xml to 1000.xml, but cp command copies it in another order (100.xml, 150.xml, 58.xml,64.xml).\nSo when you execute:<\/p>\n\n<pre><code>cp -r 1 1copy\n<\/code><\/pre>\n\n<p>to copy this dir to another, the blocks of files which you are copied are not adjacent, so read of such files take more time.<\/p>\n\n<p>When you copy dir which you copied by cp command (so files are not created by dd command), then file are adjacent so creating:<\/p>\n\n<pre><code>cp -r 2 2copy \n<\/code><\/pre>\n\n<p>copy of the copy is faster.<\/p>\n\n<p>Summary:\nSo to test performance python\/perl you should use the same dir (or two dirs copied by cp command) and also you can use option O_DIRECT to read bypassing\nall kernel buffers and read data from disk directly. <\/p>\n\n<p>Please remember, that results can be different on different type of kernel, system, disk controller, system settings, fs and so on. <\/p>\n\n<p>Additions:<\/p>\n\n<pre><code> [debugfs] \n[root@dhcppc3 test]# debugfs \/dev\/sda1 \ndebugfs 1.39 (29-May-2006)\ndebugfs:  cd test\ndebugfs:  stat test.xml\nInode: 24102   Type: regular    Mode:  0644   Flags: 0x0   Generation: 3385884179\nUser:     0   Group:     0   Size: 4\nFile ACL: 0    Directory ACL: 0\nLinks: 1   Blockcount: 2\nFragment:  Address: 0    Number: 0    Size: 0\nctime: 0x543274bf -- Mon Oct  6 06:53:51 2014\natime: 0x543274be -- Mon Oct  6 06:53:50 2014\nmtime: 0x543274bf -- Mon Oct  6 06:53:51 2014\nBLOCKS:\n(0):29935\nTOTAL: 1\n\ndebugfs:  \n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 140046,
            "reputation": 50199,
            "user_id": 346063,
            "user_type": "registered",
            "accept_rate": 83,
            "profile_image": "https:\/\/i.stack.imgur.com\/UQeXE.jpg?s=256&g=1",
            "display_name": "Thariama",
            "link": "https:\/\/stackoverflow.com\/users\/346063\/thariama"
        },
        "is_accepted": false,
        "score": 25,
        "last_activity_date": 1509093555,
        "last_edit_date": 1509093555.0,
        "creation_date": 1471503587,
        "answer_id": 39011773,
        "question_id": 229009,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "This code works **without any additional modules**.\r\nJust include it where needed.\r\n\r\n    my $i = 1;\r\n    print STDERR &quot;Stack Trace:\\n&quot;;\r\n    while ( (my @call_details = (caller($i++))) ){\r\n    \tprint STDERR $call_details[1].&quot;:&quot;.$call_details[2].&quot; in function &quot;.$call_details[3].&quot;\\n&quot;;\r\n    }",
        "body": "<p>This code works <strong>without any additional modules<\/strong>.\nJust include it where needed.<\/p>\n\n<pre><code>my $i = 1;\nprint STDERR \"Stack Trace:\\n\";\nwhile ( (my @call_details = (caller($i++))) ){\n    print STDERR $call_details[1].\":\".$call_details[2].\" in function \".$call_details[3].\"\\n\";\n}\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2989,
            "reputation": 26550,
            "user_id": 4234,
            "user_type": "registered",
            "accept_rate": 73,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/b6d08f3086f5dfa579a59c9f98e5a348?s=256&d=identicon&r=PG",
            "display_name": "dreeves",
            "link": "https:\/\/stackoverflow.com\/users\/4234\/dreeves"
        },
        "is_accepted": false,
        "score": 24,
        "last_activity_date": 1269966947,
        "last_edit_date": 1269966947.0,
        "creation_date": 1224107980,
        "answer_id": 206681,
        "question_id": 206661,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "    open(my $f, &#39;&lt;&#39;, $filename) or die &quot;OPENING $filename: $!\\n&quot;;\r\n    $string = do { local($\/); &lt;$f&gt; };\r\n    close($f);\r\n",
        "body": "<pre><code>open(my $f, '&lt;', $filename) or die \"OPENING $filename: $!\\n\";\n$string = do { local($\/); &lt;$f&gt; };\nclose($f);\n<\/code><\/pre>\n",
        "community_owned_date": 1224107980.0
    },
    {
        "owner": {
            "account_id": 5473,
            "reputation": 130134,
            "user_id": 2766176,
            "user_type": "registered",
            "accept_rate": 61,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/edd8638efe875601bfe394a8aea5b16d?s=256&d=identicon&r=PG",
            "display_name": "brian d foy",
            "link": "https:\/\/stackoverflow.com\/users\/2766176\/brian-d-foy"
        },
        "is_accepted": false,
        "score": 24,
        "last_activity_date": 1701965230,
        "last_edit_date": 1701965230.0,
        "creation_date": 1258144613,
        "answer_id": 1731745,
        "question_id": 1731333,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "A scalar always holds a single element. Whatever is in a scalar variable is always a scalar. A reference is a scalar value.\r\n\r\nIf you want to know if it is a reference, you can use [`ref`](http:\/\/perldoc.perl.org\/functions\/ref.html). If you want to know the reference type, \r\nyou can use the `reftype` routine from [Scalar::Util](https:\/\/metacpan.org\/pod\/Scalar::Util).\r\n\r\nIf you want to know if it is an object, you can use the `blessed` routine from [Scalar::Util](https:\/\/metacpan.org\/pod\/Scalar::Util). You should never care what the blessed package is, though. `UNIVERSAL` has some methods to tell you about an object: if you want to check that it has the method you want to call, use `can`; if you want to see that it inherits from something, use `isa`; and if you want to see it the object handles a role, use `DOES`.\r\n\r\nIf you want to know if that scalar is actually just acting like a scalar but tied to a class, try [`tied`](http:\/\/perldoc.perl.org\/functions\/tied.html). If you get an object, continue your checks.\r\n\r\nIf you want to know if it looks like a number, you can use `looks_like_number` from [Scalar::Util](https:\/\/metacpan.org\/pod\/Scalar::Util). If it doesn&#39;t look like a number and it&#39;s not a reference, it&#39;s a string. However, all simple values can be strings. \r\n\r\nIn v5.36, the `builtin` pragma has `created_as_number` and `created_as_string`, which really mean that the last thing that operator on the value was numeric or stringy. There&#39;s also `is_bool` to check if the values are the distinguished booleans `true` or `false` (and not just any true or false value in the normal Perl way).\r\n\r\nIf you need to do something more fancy, you can use a module such as [Params::Validate](http:\/\/search.cpan.org\/dist\/Params-Validate).",
        "body": "<p>A scalar always holds a single element. Whatever is in a scalar variable is always a scalar. A reference is a scalar value.<\/p>\n<p>If you want to know if it is a reference, you can use <a href=\"http:\/\/perldoc.perl.org\/functions\/ref.html\" rel=\"nofollow noreferrer\"><code>ref<\/code><\/a>. If you want to know the reference type,\nyou can use the <code>reftype<\/code> routine from <a href=\"https:\/\/metacpan.org\/pod\/Scalar::Util\" rel=\"nofollow noreferrer\">Scalar::Util<\/a>.<\/p>\n<p>If you want to know if it is an object, you can use the <code>blessed<\/code> routine from <a href=\"https:\/\/metacpan.org\/pod\/Scalar::Util\" rel=\"nofollow noreferrer\">Scalar::Util<\/a>. You should never care what the blessed package is, though. <code>UNIVERSAL<\/code> has some methods to tell you about an object: if you want to check that it has the method you want to call, use <code>can<\/code>; if you want to see that it inherits from something, use <code>isa<\/code>; and if you want to see it the object handles a role, use <code>DOES<\/code>.<\/p>\n<p>If you want to know if that scalar is actually just acting like a scalar but tied to a class, try <a href=\"http:\/\/perldoc.perl.org\/functions\/tied.html\" rel=\"nofollow noreferrer\"><code>tied<\/code><\/a>. If you get an object, continue your checks.<\/p>\n<p>If you want to know if it looks like a number, you can use <code>looks_like_number<\/code> from <a href=\"https:\/\/metacpan.org\/pod\/Scalar::Util\" rel=\"nofollow noreferrer\">Scalar::Util<\/a>. If it doesn't look like a number and it's not a reference, it's a string. However, all simple values can be strings.<\/p>\n<p>In v5.36, the <code>builtin<\/code> pragma has <code>created_as_number<\/code> and <code>created_as_string<\/code>, which really mean that the last thing that operator on the value was numeric or stringy. There's also <code>is_bool<\/code> to check if the values are the distinguished booleans <code>true<\/code> or <code>false<\/code> (and not just any true or false value in the normal Perl way).<\/p>\n<p>If you need to do something more fancy, you can use a module such as <a href=\"http:\/\/search.cpan.org\/dist\/Params-Validate\" rel=\"nofollow noreferrer\">Params::Validate<\/a>.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 22264,
            "reputation": 21975,
            "user_id": 54746,
            "user_type": "registered",
            "accept_rate": 89,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/2c639f8c215cb4bd988e589a7aa66b90?s=256&d=identicon&r=PG",
            "display_name": "CaffGeek",
            "link": "https:\/\/stackoverflow.com\/users\/54746\/caffgeek"
        },
        "is_accepted": false,
        "score": 24,
        "last_activity_date": 1431634921,
        "last_edit_date": 1431634921.0,
        "creation_date": 1272474045,
        "answer_id": 2731560,
        "question_id": 2731542,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "`$this` is a scalar value, it holds 1 item like `apple`\r\n\r\n`@that` is an array of values, it holds several like `(&quot;apple&quot;, &quot;orange&quot;, &quot;pear&quot;)`\r\n\r\n`%those` is a hash of values, it holds key value pairs like  `(&quot;apple&quot; =&gt; &quot;red&quot;, &quot;orange&quot; =&gt; &quot;orange&quot;, &quot;pear&quot; =&gt; &quot;yellow&quot;)`\r\n\r\nSee [perlintro](http:\/\/perldoc.perl.org\/perlintro.html#Perl-variable-types) for more on Perl variable types.",
        "body": "<p><code>$this<\/code> is a scalar value, it holds 1 item like <code>apple<\/code><\/p>\n\n<p><code>@that<\/code> is an array of values, it holds several like <code>(\"apple\", \"orange\", \"pear\")<\/code><\/p>\n\n<p><code>%those<\/code> is a hash of values, it holds key value pairs like  <code>(\"apple\" =&gt; \"red\", \"orange\" =&gt; \"orange\", \"pear\" =&gt; \"yellow\")<\/code><\/p>\n\n<p>See <a href=\"http:\/\/perldoc.perl.org\/perlintro.html#Perl-variable-types\" rel=\"noreferrer\">perlintro<\/a> for more on Perl variable types.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 23567,
            "reputation": 26767,
            "user_id": 59135,
            "user_type": "registered",
            "accept_rate": 94,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/90c563665ec03a1b9e80671bb95deeed?s=256&d=identicon&r=PG",
            "display_name": "daotoad",
            "link": "https:\/\/stackoverflow.com\/users\/59135\/daotoad"
        },
        "is_accepted": false,
        "score": 24,
        "last_activity_date": 1381185929,
        "last_edit_date": null,
        "creation_date": 1381185929,
        "answer_id": 19236094,
        "question_id": 19234209,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Perl doesn&#39;t manage your argument handling for you.  Instead, it provides a minimal, flexible abstraction and allows you to write code that fits your needs.\r\n\r\n### Pass By Reference ###\r\n\r\nBy default, Perl sticks an alias to each argument in `@_`.  This implements basic, **pass by reference** semantics.\r\n\r\n    my $num = 1;\r\n    foo($num);\r\n    print &quot;$num\\n&quot;;  # prints 2.\r\n    \r\n    sub foo { $_[0]++ }\r\n\r\nPass by reference is fast but has the risk of leaking changes to parameter data.\r\n\r\n\r\n### Pass By Copy ###\r\n\r\nIf you want **pass by copy** semantics, you need to make the copies yourself.  Two main approaches to handling lists of positional parameters are common in the Perl community:\r\n\r\n\r\n    sub shifty {\r\n        my $foo = shift;\r\n    }\r\n    \r\n    sub listy {\r\n        my ($foo) = @_;\r\n    }\r\n\r\nAt my place of employment we do a version of listy:\r\n\r\n    sub fancy_listy {\r\n    \r\n        my ($positional, $args, @bad) = @_;\r\n    \r\n        die &quot;Extra args&quot; if @bad;\r\n    }\r\n\r\n\r\n### Named Parameters ###\r\n\r\nAnother common practice is the use of **named parameters**:\r\n\r\n    sub named_params {\r\n        my %opt = @_;\r\n    }\r\n\r\nSome people are happy with just the above.  I prefer a more verbose approach:\r\n\r\n    sub named_params {\r\n        my %opt = @_;\r\n\r\n        my $named = delete $opt{named} \/\/ &quot;default value&quot;;\r\n        my $param = delete $opt{param}\r\n            or croak &quot;Missing required &#39;param&#39;&quot;;\r\n\r\n        croak &quot;Unknown params:&quot;, join &quot;, &quot;, keys %opt\r\n            if %opt;\r\n\r\n        # do stuff \r\n    }\r\n\r\nThis unpacks named params into variables, allows space for basic validation and default values and enforces that no extra, unknown arguments were passed in.\r\n\r\n### On Perl Prototypes ###\r\n\r\nPerl&#39;s &quot;prototypes&quot; are ***not*** prototypes in the normal sense.  They only provide compiler hints that allow you to skip parenthesis on function calls.  The only reasonable use is to mimic the behavior of built-in functions.  You can easily defeat prototype argument checking.  In general, ***DO NOT USE PROTOTYPES***.  Use them with with care that you would use operator overloading--i.e. sparingly and only to improve readability.",
        "body": "<p>Perl doesn't manage your argument handling for you.  Instead, it provides a minimal, flexible abstraction and allows you to write code that fits your needs.<\/p>\n\n<h3>Pass By Reference<\/h3>\n\n<p>By default, Perl sticks an alias to each argument in <code>@_<\/code>.  This implements basic, <strong>pass by reference<\/strong> semantics.<\/p>\n\n<pre><code>my $num = 1;\nfoo($num);\nprint \"$num\\n\";  # prints 2.\n\nsub foo { $_[0]++ }\n<\/code><\/pre>\n\n<p>Pass by reference is fast but has the risk of leaking changes to parameter data.<\/p>\n\n<h3>Pass By Copy<\/h3>\n\n<p>If you want <strong>pass by copy<\/strong> semantics, you need to make the copies yourself.  Two main approaches to handling lists of positional parameters are common in the Perl community:<\/p>\n\n<pre><code>sub shifty {\n    my $foo = shift;\n}\n\nsub listy {\n    my ($foo) = @_;\n}\n<\/code><\/pre>\n\n<p>At my place of employment we do a version of listy:<\/p>\n\n<pre><code>sub fancy_listy {\n\n    my ($positional, $args, @bad) = @_;\n\n    die \"Extra args\" if @bad;\n}\n<\/code><\/pre>\n\n<h3>Named Parameters<\/h3>\n\n<p>Another common practice is the use of <strong>named parameters<\/strong>:<\/p>\n\n<pre><code>sub named_params {\n    my %opt = @_;\n}\n<\/code><\/pre>\n\n<p>Some people are happy with just the above.  I prefer a more verbose approach:<\/p>\n\n<pre><code>sub named_params {\n    my %opt = @_;\n\n    my $named = delete $opt{named} \/\/ \"default value\";\n    my $param = delete $opt{param}\n        or croak \"Missing required 'param'\";\n\n    croak \"Unknown params:\", join \", \", keys %opt\n        if %opt;\n\n    # do stuff \n}\n<\/code><\/pre>\n\n<p>This unpacks named params into variables, allows space for basic validation and default values and enforces that no extra, unknown arguments were passed in.<\/p>\n\n<h3>On Perl Prototypes<\/h3>\n\n<p>Perl's \"prototypes\" are <strong><em>not<\/em><\/strong> prototypes in the normal sense.  They only provide compiler hints that allow you to skip parenthesis on function calls.  The only reasonable use is to mimic the behavior of built-in functions.  You can easily defeat prototype argument checking.  In general, <strong><em>DO NOT USE PROTOTYPES<\/em><\/strong>.  Use them with with care that you would use operator overloading--i.e. sparingly and only to improve readability.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 83051,
            "reputation": 669,
            "user_id": 233096,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/02d9123b4e217d650d9595bf11e97997?s=256&d=identicon&r=PG",
            "display_name": "Harmen",
            "link": "https:\/\/stackoverflow.com\/users\/233096\/harmen"
        },
        "is_accepted": false,
        "score": 23,
        "last_activity_date": 1460360039,
        "last_edit_date": 1460360039.0,
        "creation_date": 1260979742,
        "answer_id": 1915691,
        "question_id": 1915616,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Just &lt;code&gt;&amp;$action()&lt;\/code&gt;, but usually it&#39;s nicer to use coderefs from the beginning, or use a dispatcher hash. For example:\r\n\r\n    my $disp = {foo =&gt; \\&amp;some_sub, bar =&gt; \\&amp;some_other_sub };\r\n    $disp-&gt;{&#39;foo&#39;}-&gt;();",
        "body": "<p>Just <code>&amp;$action()<\/code>, but usually it's nicer to use coderefs from the beginning, or use a dispatcher hash. For example:<\/p>\n\n<pre><code>my $disp = {foo =&gt; \\&amp;some_sub, bar =&gt; \\&amp;some_other_sub };\n$disp-&gt;{'foo'}-&gt;();\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 366238,
            "reputation": 4155,
            "user_id": 711654,
            "user_type": "registered",
            "accept_rate": 20,
            "profile_image": "https:\/\/i.stack.imgur.com\/Eyh5u.jpg?s=256&g=1",
            "display_name": "Boris Ivanov",
            "link": "https:\/\/stackoverflow.com\/users\/711654\/boris-ivanov"
        },
        "is_accepted": false,
        "score": 23,
        "last_activity_date": 1523192815,
        "last_edit_date": 1523192815.0,
        "creation_date": 1406743019,
        "answer_id": 25043711,
        "question_id": 4616395,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "You can use `quotemeta (\\Q \\E)` if your Perl is version 5.16 or later, but if below you can simply avoid using a regular expression at all.\r\n\r\nFor example, by using the `index` command:\r\n\r\n    if (index($text_to_search, $search_string) &gt; -1) {\r\n        print &quot;wee&quot;;\r\n    }\r\n\r\n",
        "body": "<p>You can use <code>quotemeta (\\Q \\E)<\/code> if your Perl is version 5.16 or later, but if below you can simply avoid using a regular expression at all.<\/p>\n\n<p>For example, by using the <code>index<\/code> command:<\/p>\n\n<pre><code>if (index($text_to_search, $search_string) &gt; -1) {\n    print \"wee\";\n}\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1475,
            "reputation": 534294,
            "user_id": 1968,
            "user_type": "registered",
            "accept_rate": 83,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/fdd630f72eef3790bfb4ef38d08c7f85?s=256&d=identicon&r=PG",
            "display_name": "Konrad Rudolph",
            "link": "https:\/\/stackoverflow.com\/users\/1968\/konrad-rudolph"
        },
        "is_accepted": false,
        "score": 22,
        "last_activity_date": 1244531455,
        "last_edit_date": null,
        "creation_date": 1244531455,
        "answer_id": 968606,
        "question_id": 968441,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "I have to (sort of) disagree with most views expressed here.\r\n\r\nSince the code in question could be expressed much more compact and maintainable in idiomatic Perl, you really need to pose the question how much time the candidate spend developing this solution and how much time would have been spent by someone halfway proficient using idiomatic Perl.\r\n\r\nI think you&#39;ll find that this coding style may be a huge waste of time (and thus the company&#39;s money).\r\n\r\nI don&#39;t argue that every Perl programmer needs to [grok](http:\/\/en.wikipedia.org\/wiki\/Grok) the language \u2013 that, unfortunately, would be far-fetched \u2013 but they should know enough to not spend ages re-implementing core language features in their code over and over again.\r\n\r\n**EDIT** Looking at the code again, I&#39;ve got to be more drastic: although the code looks very clean, it&#39;s actually *horrible*. Sorry. This isn&#39;t Perl. Do you know the saying \u201cyou can program Fortran in any language\u201d? Yes, you can. But you shouldn&#39;t.",
        "body": "<p>I have to (sort of) disagree with most views expressed here.<\/p>\n\n<p>Since the code in question could be expressed much more compact and maintainable in idiomatic Perl, you really need to pose the question how much time the candidate spend developing this solution and how much time would have been spent by someone halfway proficient using idiomatic Perl.<\/p>\n\n<p>I think you'll find that this coding style may be a huge waste of time (and thus the company's money).<\/p>\n\n<p>I don't argue that every Perl programmer needs to <a href=\"http:\/\/en.wikipedia.org\/wiki\/Grok\" rel=\"noreferrer\">grok<\/a> the language \u2013 that, unfortunately, would be far-fetched \u2013 but they should know enough to not spend ages re-implementing core language features in their code over and over again.<\/p>\n\n<p><strong>EDIT<\/strong> Looking at the code again, I've got to be more drastic: although the code looks very clean, it's actually <em>horrible<\/em>. Sorry. This isn't Perl. Do you know the saying \u201cyou can program Fortran in any language\u201d? Yes, you can. But you shouldn't.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 9373,
            "reputation": 102779,
            "user_id": 17279,
            "user_type": "registered",
            "accept_rate": 82,
            "profile_image": "https:\/\/i.stack.imgur.com\/Rqgl6.jpg?s=256&g=1",
            "display_name": "zoul",
            "link": "https:\/\/stackoverflow.com\/users\/17279\/zoul"
        },
        "is_accepted": false,
        "score": 22,
        "last_activity_date": 1253853299,
        "last_edit_date": null,
        "creation_date": 1253853299,
        "answer_id": 1475447,
        "question_id": 1475357,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "You can [glob][1] the tilde, `glob(&#39;~\/foo.txt&#39;)` should work. Or you can use the [File::Save::Home][2] module that should also take care of other systems.\r\n\r\n\r\n  [1]: http:\/\/perldoc.perl.org\/functions\/glob.html\r\n  [2]: http:\/\/search.cpan.org\/perldoc?File::Save::Home",
        "body": "<p>You can <a href=\"http:\/\/perldoc.perl.org\/functions\/glob.html\" rel=\"noreferrer\">glob<\/a> the tilde, <code>glob('~\/foo.txt')<\/code> should work. Or you can use the <a href=\"http:\/\/search.cpan.org\/perldoc?File::Save::Home\" rel=\"noreferrer\">File::Save::Home<\/a> module that should also take care of other systems.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 374917,
            "reputation": 66886,
            "user_id": 725418,
            "user_type": "registered",
            "accept_rate": 86,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/82ac2dc3e1ad4b7187f245c416528df9?s=256&d=identicon&r=PG",
            "display_name": "TLP",
            "link": "https:\/\/stackoverflow.com\/users\/725418\/tlp"
        },
        "is_accepted": false,
        "score": 22,
        "last_activity_date": 1308166188,
        "last_edit_date": 1495540955.0,
        "creation_date": 1308158690,
        "answer_id": 6361709,
        "question_id": 6361312,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Your regex says the following:\r\n\r\n    \/^         - if the line starts with\r\n    (          - start a capture group\r\n    Clinton|   - &quot;Clinton&quot; \r\n    |          - or\r\n    [^Bush]    - Any single character except &quot;B&quot;, &quot;u&quot;, &quot;s&quot; or &quot;h&quot;\r\n    |          - or\r\n    Reagan)   - &quot;Reagan&quot;. End capture group.\r\n    \/i         - Make matches case-insensitive \r\n\r\nSo, in other words, your middle part of the regex is screwing you up. As it is a &quot;catch-all&quot; kind of group, it will allow any line that does not begin with any of the upper or lower case letters in &quot;Bush&quot;. For example, these lines would match your regex:\r\n\r\n    Our president, George Bush\r\n    In the news today, pigs can fly\r\n    012-3123 33\r\n\r\nYou either make a negative look-ahead, as suggested earlier, or you simply make two regexes:\r\n\r\n    if( ($string =~ m\/^(Clinton|Reagan)\/i) and\r\n        ($string !~ m\/^Bush\/i) ) {\r\n       print &quot;$string\\n&quot;;\r\n    }\r\n\r\nAs [mirod][1] has pointed out in the comments, the second check is quite unnecessary when using the caret (`^`) to match only beginning of lines, as lines that begin with &quot;Clinton&quot; or &quot;Reagan&quot; could never begin with &quot;Bush&quot;.\r\n\r\nHowever, it would be valid without the carets.\r\n\r\n\r\n  [1]: https:\/\/stackoverflow.com\/users\/11095\/mirod",
        "body": "<p>Your regex says the following:<\/p>\n\n<pre><code>\/^         - if the line starts with\n(          - start a capture group\nClinton|   - \"Clinton\" \n|          - or\n[^Bush]    - Any single character except \"B\", \"u\", \"s\" or \"h\"\n|          - or\nReagan)   - \"Reagan\". End capture group.\n\/i         - Make matches case-insensitive \n<\/code><\/pre>\n\n<p>So, in other words, your middle part of the regex is screwing you up. As it is a \"catch-all\" kind of group, it will allow any line that does not begin with any of the upper or lower case letters in \"Bush\". For example, these lines would match your regex:<\/p>\n\n<pre><code>Our president, George Bush\nIn the news today, pigs can fly\n012-3123 33\n<\/code><\/pre>\n\n<p>You either make a negative look-ahead, as suggested earlier, or you simply make two regexes:<\/p>\n\n<pre><code>if( ($string =~ m\/^(Clinton|Reagan)\/i) and\n    ($string !~ m\/^Bush\/i) ) {\n   print \"$string\\n\";\n}\n<\/code><\/pre>\n\n<p>As <a href=\"https:\/\/stackoverflow.com\/users\/11095\/mirod\">mirod<\/a> has pointed out in the comments, the second check is quite unnecessary when using the caret (<code>^<\/code>) to match only beginning of lines, as lines that begin with \"Clinton\" or \"Reagan\" could never begin with \"Bush\".<\/p>\n\n<p>However, it would be valid without the carets.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 41067,
            "reputation": 127534,
            "user_id": 119280,
            "user_type": "registered",
            "accept_rate": 73,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/47b88555c03aad35b076726767fcfa35?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "DVK",
            "link": "https:\/\/stackoverflow.com\/users\/119280\/dvk"
        },
        "is_accepted": false,
        "score": 22,
        "last_activity_date": 1630567680,
        "last_edit_date": 1630567680.0,
        "creation_date": 1330180957,
        "answer_id": 9444948,
        "question_id": 9444915,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Simpler:\r\n\r\n    if (!%hash) { \r\n        print &quot;Empty&quot;;\r\n    } \r\n\r\n`!` imposes a scalar context, and hash evaluated in a scalar context returns:\r\n\r\n - *false* if there are zero keys (not defined in the documentation but experimentally returns `0`)\r\n\r\nDepending on the version of Perl, either of the following:\r\n\r\n - A string signifying how many used\/allocated buckets are used for &gt;0 keys, which will of course be NOT false (e.g. &quot;3\/6&quot;).\r\n(Non-empty string evaluate to *true*)\r\n\r\n - The number of keys in the hash (as explained in `perldata`: &quot;*As of Perl 5.25 the return was changed to be the count of keys in the\r\nhash. If you need access to the old behavior you can use\r\n&quot;Hash::Util::bucket_ratio()&quot; instead.*&quot;)\r\n",
        "body": "<p>Simpler:<\/p>\n<pre><code>if (!%hash) { \n    print &quot;Empty&quot;;\n} \n<\/code><\/pre>\n<p><code>!<\/code> imposes a scalar context, and hash evaluated in a scalar context returns:<\/p>\n<ul>\n<li><em>false<\/em> if there are zero keys (not defined in the documentation but experimentally returns <code>0<\/code>)<\/li>\n<\/ul>\n<p>Depending on the version of Perl, either of the following:<\/p>\n<ul>\n<li><p>A string signifying how many used\/allocated buckets are used for &gt;0 keys, which will of course be NOT false (e.g. &quot;3\/6&quot;).\n(Non-empty string evaluate to <em>true<\/em>)<\/p>\n<\/li>\n<li><p>The number of keys in the hash (as explained in <code>perldata<\/code>: &quot;<em>As of Perl 5.25 the return was changed to be the count of keys in the\nhash. If you need access to the old behavior you can use\n&quot;Hash::Util::bucket_ratio()&quot; instead.<\/em>&quot;)<\/p>\n<\/li>\n<\/ul>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 214385,
            "reputation": 20200,
            "user_id": 468327,
            "user_type": "registered",
            "accept_rate": 89,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/cc767569f5863a7c261991ee5b23f147?s=256&d=identicon&r=PG",
            "display_name": "Joel Berger",
            "link": "https:\/\/stackoverflow.com\/users\/468327\/joel-berger"
        },
        "is_accepted": false,
        "score": 22,
        "last_activity_date": 1604558468,
        "last_edit_date": 1604558468.0,
        "creation_date": 1370402347,
        "answer_id": 16930984,
        "question_id": 16927024,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Some insights might be gained by reading [rjbs&#39;s proposed changes to smartmatch](http:\/\/markmail.org\/message\/u22titrq5ljclz4b). He is the pumpking (Perl release manager) after all, so his comments and his view of the future is more relevant than most. There is also plenty of community comment on the matter; see [here](http:\/\/blogs.perl.org\/users\/brian_d_foy\/2012\/08\/ricardo-is-pushing-for-smart-match-changes.html) for instance. The &#39;experimental&#39; status is in effect because, since things are likely to change in the future, it is responsible to inform users of that fact, even if we don&#39;t know what those changes will be.\r\n",
        "body": "<p>Some insights might be gained by reading <a href=\"http:\/\/markmail.org\/message\/u22titrq5ljclz4b\" rel=\"nofollow noreferrer\">rjbs's proposed changes to smartmatch<\/a>. He is the pumpking (Perl release manager) after all, so his comments and his view of the future is more relevant than most. There is also plenty of community comment on the matter; see <a href=\"http:\/\/blogs.perl.org\/users\/brian_d_foy\/2012\/08\/ricardo-is-pushing-for-smart-match-changes.html\" rel=\"nofollow noreferrer\">here<\/a> for instance. The 'experimental' status is in effect because, since things are likely to change in the future, it is responsible to inform users of that fact, even if we don't know what those changes will be.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 284302,
            "reputation": 712,
            "user_id": 582326,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/e80b4cd2951666b4ad0a17f5fffd5aa3?s=256&d=identicon&r=PG",
            "display_name": "andrew-e",
            "link": "https:\/\/stackoverflow.com\/users\/582326\/andrew-e"
        },
        "is_accepted": false,
        "score": 22,
        "last_activity_date": 1509926161,
        "last_edit_date": 1509926161.0,
        "creation_date": 1461875070,
        "answer_id": 36924801,
        "question_id": 176476,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "[WeasyPrint](http:\/\/weasyprint.org\/) produces nice PDFs with selectable text and hyperlinks.\r\n\r\n    weasyprint input.html output.pdf\r\n\r\nIf you use `wkhtmltopdf` instead, try the following options:\r\n\r\n    wkhtmltopdf --margin-bottom 20mm --margin-top 20mm --minimum-font-size 16 ...",
        "body": "<p><a href=\"http:\/\/weasyprint.org\/\" rel=\"noreferrer\">WeasyPrint<\/a> produces nice PDFs with selectable text and hyperlinks.<\/p>\n\n<pre><code>weasyprint input.html output.pdf\n<\/code><\/pre>\n\n<p>If you use <code>wkhtmltopdf<\/code> instead, try the following options:<\/p>\n\n<pre><code>wkhtmltopdf --margin-bottom 20mm --margin-top 20mm --minimum-font-size 16 ...\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1020072,
            "reputation": 233816,
            "user_id": 1030675,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/957956ce51706d03f19a4dc85a767bb1?s=256&d=identicon&r=PG",
            "display_name": "choroba",
            "link": "https:\/\/stackoverflow.com\/users\/1030675\/choroba"
        },
        "is_accepted": false,
        "score": 22,
        "last_activity_date": 1526408191,
        "last_edit_date": null,
        "creation_date": 1526408191,
        "answer_id": 50356845,
        "question_id": 50356241,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "That&#39;s because `st` can be a ligature. The same happens to `fi` and `ff`:\r\n\r\n    #!\/usr\/bin\/perl\r\n    use warnings;\r\n    use strict;\r\n    \r\n    use utf8;\r\n    \r\n    my $fi = &#39;\ufb01&#39;;\r\n    print $fi =~ \/fi\/i;\r\n\r\nSo imagine something like `\ufb01|fi` where, indeed, the lengths of alternatives isn&#39;t the same.\r\n\r\n",
        "body": "<p>That's because <code>st<\/code> can be a ligature. The same happens to <code>fi<\/code> and <code>ff<\/code>:<\/p>\n\n<pre><code>#!\/usr\/bin\/perl\nuse warnings;\nuse strict;\n\nuse utf8;\n\nmy $fi = '\ufb01';\nprint $fi =~ \/fi\/i;\n<\/code><\/pre>\n\n<p>So imagine something like <code>\ufb01|fi<\/code> where, indeed, the lengths of alternatives isn't the same.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 8753,
            "reputation": 1813,
            "user_id": 15915,
            "user_type": "registered",
            "accept_rate": 69,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/d99c896435be6c3ecb5f4786fabf3d51?s=256&d=identicon&r=PG",
            "display_name": "Pete Michaud",
            "link": "https:\/\/stackoverflow.com\/users\/15915\/pete-michaud"
        },
        "is_accepted": false,
        "score": 21,
        "last_activity_date": 1221664710,
        "last_edit_date": null,
        "creation_date": 1221664710,
        "answer_id": 84362,
        "question_id": 84340,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "Let me turn your question on its head by asking what use it is to an American English speaker to learn another language?\r\n\r\nThe languages we speak (and those we program in) inform the way we think. This can happen on a fundamental level, such as c++ versus javascript versus lisp, or on an implementation level, in which a ruby construct provides a eureka moment for a solution in your &quot;real job.&quot;\r\n\r\nSpeaking of your real job, if the market goes south and your employer decides to &quot;right size&quot; you, how do you think you&#39;ll stack up against a guy who is flexible because he&#39;s written software in tens of languages, instead of your limited exposure? All things being equal, I think the answer is clear.\r\n\r\nFinally, you program for a living because you love programming... right?",
        "body": "<p>Let me turn your question on its head by asking what use it is to an American English speaker to learn another language?<\/p>\n\n<p>The languages we speak (and those we program in) inform the way we think. This can happen on a fundamental level, such as c++ versus javascript versus lisp, or on an implementation level, in which a ruby construct provides a eureka moment for a solution in your \"real job.\"<\/p>\n\n<p>Speaking of your real job, if the market goes south and your employer decides to \"right size\" you, how do you think you'll stack up against a guy who is flexible because he's written software in tens of languages, instead of your limited exposure? All things being equal, I think the answer is clear.<\/p>\n\n<p>Finally, you program for a living because you love programming... right?<\/p>\n",
        "community_owned_date": 1221834352.0
    },
    {
        "owner": {
            "account_id": 29074,
            "reputation": 64398,
            "user_id": 78259,
            "user_type": "registered",
            "accept_rate": 53,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/844c572938eaad1e44eb084fb39416f9?s=256&d=identicon&r=PG",
            "display_name": "Chas. Owens",
            "link": "https:\/\/stackoverflow.com\/users\/78259\/chas-owens"
        },
        "is_accepted": false,
        "score": 21,
        "last_activity_date": 1237344290,
        "last_edit_date": 1237344290.0,
        "creation_date": 1237343820,
        "answer_id": 656786,
        "question_id": 656537,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "Depends on what you are doing.  If you want to measure wall clock time (the amount of actual time that has elapsed) you can&#39;t get much better.  If you want to measure how long the computer has been doing something then you might want to look at the [`times`][1] function or the [`time`][2] command.  The `times` function in Perl returns a list of the current accumulated time for this process in your code and the code of any modules you are using, this process in system calls, all of this process&#39;s children in user code, and all of this process&#39;s children in system calls.\r\n\r\n    #!\/usr\/bin\/perl\r\n    \r\n    use strict;\r\n    use warnings;\r\n    use Time::HiRes;\r\n    \r\n    my $start_time = [Time::HiRes::gettimeofday()];\r\n    .\r\n    .\r\n    .\r\n    my ($user, $system, $child_user, $child_system) = times;\r\n    print &quot;wall clock time was &quot;, Time::HiRes::tv_interval($start_time), &quot;\\n&quot;,\r\n        &quot;user time for $$ was $user\\n&quot;,\r\n        &quot;system time for $$ was $system\\n&quot;,\r\n        &quot;user time for all children was $child_user\\n&quot;,\r\n        &quot;system time for all children was $child_system\\n&quot;;\r\n\r\nThe `time` command in UNIX is similar in function.  You run a command like this\r\n\r\n    time .\/script.pl\r\n\r\nand it outputs something like this\r\n\r\n    real    0m0.692s\r\n    user    0m0.019s\r\n    sys     0m0.109s\r\n\r\nwhere real is the wall clock time and user and sys are the same as user and system above.\r\n\r\nThe `time` command is easier for a human to use, but the `times` function gives you more information and is easier to fit into a computer program (plus it has the benefit of producing results while a program is still running).\r\n\r\nOh, I forgot to mention `$^T`.  This variable holds the start time of the program in seconds since the epoch, so if you only care about a granularity of seconds you can just say\r\n\r\n    END { print &quot;The program ran for &quot;, time() - $^T, &quot; seconds\\n&quot; }\r\n\r\nnear the top of your program.\r\n\r\n  [1]: http:\/\/perldoc.perl.org\/functions\/times.html\r\n  [2]: http:\/\/opengroup.org\/onlinepubs\/007908799\/xcu\/time.html\r\n\r\n",
        "body": "<p>Depends on what you are doing.  If you want to measure wall clock time (the amount of actual time that has elapsed) you can't get much better.  If you want to measure how long the computer has been doing something then you might want to look at the <a href=\"http:\/\/perldoc.perl.org\/functions\/times.html\" rel=\"noreferrer\"><code>times<\/code><\/a> function or the <a href=\"http:\/\/opengroup.org\/onlinepubs\/007908799\/xcu\/time.html\" rel=\"noreferrer\"><code>time<\/code><\/a> command.  The <code>times<\/code> function in Perl returns a list of the current accumulated time for this process in your code and the code of any modules you are using, this process in system calls, all of this process's children in user code, and all of this process's children in system calls.<\/p>\n\n<pre><code>#!\/usr\/bin\/perl\n\nuse strict;\nuse warnings;\nuse Time::HiRes;\n\nmy $start_time = [Time::HiRes::gettimeofday()];\n.\n.\n.\nmy ($user, $system, $child_user, $child_system) = times;\nprint \"wall clock time was \", Time::HiRes::tv_interval($start_time), \"\\n\",\n    \"user time for $$ was $user\\n\",\n    \"system time for $$ was $system\\n\",\n    \"user time for all children was $child_user\\n\",\n    \"system time for all children was $child_system\\n\";\n<\/code><\/pre>\n\n<p>The <code>time<\/code> command in UNIX is similar in function.  You run a command like this<\/p>\n\n<pre><code>time .\/script.pl\n<\/code><\/pre>\n\n<p>and it outputs something like this<\/p>\n\n<pre><code>real    0m0.692s\nuser    0m0.019s\nsys     0m0.109s\n<\/code><\/pre>\n\n<p>where real is the wall clock time and user and sys are the same as user and system above.<\/p>\n\n<p>The <code>time<\/code> command is easier for a human to use, but the <code>times<\/code> function gives you more information and is easier to fit into a computer program (plus it has the benefit of producing results while a program is still running).<\/p>\n\n<p>Oh, I forgot to mention <code>$^T<\/code>.  This variable holds the start time of the program in seconds since the epoch, so if you only care about a granularity of seconds you can just say<\/p>\n\n<pre><code>END { print \"The program ran for \", time() - $^T, \" seconds\\n\" }\n<\/code><\/pre>\n\n<p>near the top of your program.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 81581,
            "reputation": 405,
            "user_id": 229927,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/fc6083ef34c84e459c5156b13a9fcaf3?s=256&d=identicon&r=PG",
            "display_name": "Jeff Catania",
            "link": "https:\/\/stackoverflow.com\/users\/229927\/jeff-catania"
        },
        "is_accepted": false,
        "score": 21,
        "last_activity_date": 1271087532,
        "last_edit_date": null,
        "creation_date": 1271087532,
        "answer_id": 2623381,
        "question_id": 2623336,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "The easiest way to run a perl script is with the option:\r\n\r\n    perl myprogram.pl\r\n\r\nHowever, you may find it more useful to add a shebang line at the top of the perl file.\r\n\r\n    #!\/usr\/bin\/perl\r\n    print &quot;Hello World!\\n&quot;;\r\n\r\nIn order to *execute* this script, you need to add execute permissions to your program.  Run:\r\n\r\n    chmod +x myprogram.pl\r\nNow, in order to run your script, you can simply type:\r\n\r\n    .\/myprogram.pl",
        "body": "<p>The easiest way to run a perl script is with the option:<\/p>\n\n<pre><code>perl myprogram.pl\n<\/code><\/pre>\n\n<p>However, you may find it more useful to add a shebang line at the top of the perl file.<\/p>\n\n<pre><code>#!\/usr\/bin\/perl\nprint \"Hello World!\\n\";\n<\/code><\/pre>\n\n<p>In order to <em>execute<\/em> this script, you need to add execute permissions to your program.  Run:<\/p>\n\n<pre><code>chmod +x myprogram.pl\n<\/code><\/pre>\n\n<p>Now, in order to run your script, you can simply type:<\/p>\n\n<pre><code>.\/myprogram.pl\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 902304,
            "reputation": 52287,
            "user_id": 938111,
            "user_type": "registered",
            "accept_rate": 84,
            "profile_image": "https:\/\/i.stack.imgur.com\/DHtZw.png?s=256&g=1",
            "display_name": "oHo",
            "link": "https:\/\/stackoverflow.com\/users\/938111\/oho"
        },
        "is_accepted": false,
        "score": 21,
        "last_activity_date": 1478822927,
        "last_edit_date": 1495540937.0,
        "creation_date": 1382431245,
        "answer_id": 19512992,
        "question_id": 4045253,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Using [tag:bash]\r\n----------------\r\n\r\n&lt;!-- language: lang-bash --&gt;\r\n\r\n    # Directory\r\n    relative_dir=&quot;folder\/subfolder\/&quot;\r\n    absolute_dir=&quot;$( cd &quot;$relative_dir&quot; &amp;&amp; pwd )&quot;\r\n\r\n    # File\r\n    relative_file=&quot;folder\/subfolder\/file&quot;\r\n    absolute_file=&quot;$( cd &quot;${relative_file%\/*}&quot; &amp;&amp; pwd )&quot;\/&quot;${relative_file##*\/}&quot;\r\n\r\n* `${relative_file%\/*}` is same result as `dirname &quot;$relative_file&quot;`\r\n* `${relative_file##*\/}` is same result as `basename &quot;$relative_file&quot;`\r\n\r\n**Caveats**: Does not resolve symbolic links (i.e. does not canonicalize path ) =&gt; May not differentiate all duplicates if you use symbolic links.\r\n\r\n---------------------------------------------------\r\n\r\nUsing `realpath`\r\n----------------\r\n\r\nCommand [`realpath`](http:\/\/man7.org\/linux\/man-pages\/man3\/realpath.3.html) does the job. An alternative is to use `readlink -e` (or `readlink -f`). However `realpath` is not often installed by default. If you cannot be sure `realpath` or `readlink` is present, you can substitute it using perl (see below).\r\n\r\n---------------------------------------------------\r\n\r\nUsing [tag:perl]\r\n----------------\r\n\r\n[Steven Kramer](https:\/\/stackoverflow.com\/users\/473067\/steven-kramer) proposes a shell alias if `realpath` is not available in your system:\r\n\r\n    $ alias realpath=&quot;perl -MCwd -e &#39;print Cwd::realpath(\\$ARGV[0]),qq&lt;\\n&gt;&#39;&quot;\r\n    $ realpath path\/folder\/file\r\n    \/home\/user\/absolute\/path\/folder\/file\r\n\r\nor if you prefer using directly perl:\r\n\r\n    $ perl -MCwd -e &#39;print Cwd::realpath($ARGV[0]),qq&lt;\\n&gt;&#39; path\/folder\/file\r\n    \/home\/user\/absolute\/path\/folder\/file\r\n\r\nThis one-line perl command uses `Cwd::realpath`. There are in fact three perl functions. They take a single argument and return the absolute pathname. Below details are from documentation [Perl5 &gt; Core modules &gt; Cwd](http:\/\/perldoc.perl.org\/Cwd.html#abs_path-and-friends).\r\n\r\n* **`abs_path()`** uses the same algorithm as `getcwd()`. Symbolic links and relative-path components (`.` and `..`) are resolved to return the canonical pathname, just like [`realpath`](http:\/\/man7.org\/linux\/man-pages\/man3\/realpath.3.html).\r\n\r\n        use Cwd &#39;abs_path&#39;;\r\n        my $abs_path = abs_path($file);\r\n\r\n* **`realpath()`** is a synonym for `abs_path()`\r\n\r\n        use Cwd &#39;realpath&#39;;\r\n        my $abs_path = realpath($file);\r\n \r\n* **`fast_abs_path()`** is a more dangerous, but potentially faster version of `abs_path()`\r\n\r\n        use Cwd &#39;fast_abs_path&#39;;\r\n        my $abs_path = fast_abs_path($file);\r\n\r\nThese functions are exported only on request =&gt; therefore use `Cwd` to avoid the *&quot;Undefined subroutine&quot;* error as pointed out by [arielf](https:\/\/stackoverflow.com\/users\/1296044). If you want to import all these three functions, you can use a single `use Cwd` line:\r\n\r\n    use Cwd qw(abs_path realpath fast_abs_path);",
        "body": "<h2>Using <a href=\"\/questions\/tagged\/bash\" class=\"post-tag\" title=\"show questions tagged &#39;bash&#39;\" rel=\"tag\">bash<\/a><\/h2>\n\n<pre class=\"lang-bash prettyprint-override\"><code># Directory\nrelative_dir=\"folder\/subfolder\/\"\nabsolute_dir=\"$( cd \"$relative_dir\" &amp;&amp; pwd )\"\n\n# File\nrelative_file=\"folder\/subfolder\/file\"\nabsolute_file=\"$( cd \"${relative_file%\/*}\" &amp;&amp; pwd )\"\/\"${relative_file##*\/}\"\n<\/code><\/pre>\n\n<ul>\n<li><code>${relative_file%\/*}<\/code> is same result as <code>dirname \"$relative_file\"<\/code><\/li>\n<li><code>${relative_file##*\/}<\/code> is same result as <code>basename \"$relative_file\"<\/code><\/li>\n<\/ul>\n\n<p><strong>Caveats<\/strong>: Does not resolve symbolic links (i.e. does not canonicalize path ) => May not differentiate all duplicates if you use symbolic links.<\/p>\n\n<hr>\n\n<h2>Using <code>realpath<\/code><\/h2>\n\n<p>Command <a href=\"http:\/\/man7.org\/linux\/man-pages\/man3\/realpath.3.html\" rel=\"noreferrer\"><code>realpath<\/code><\/a> does the job. An alternative is to use <code>readlink -e<\/code> (or <code>readlink -f<\/code>). However <code>realpath<\/code> is not often installed by default. If you cannot be sure <code>realpath<\/code> or <code>readlink<\/code> is present, you can substitute it using perl (see below).<\/p>\n\n<hr>\n\n<h2>Using <a href=\"\/questions\/tagged\/perl\" class=\"post-tag\" title=\"show questions tagged &#39;perl&#39;\" rel=\"tag\">perl<\/a><\/h2>\n\n<p><a href=\"https:\/\/stackoverflow.com\/users\/473067\/steven-kramer\">Steven Kramer<\/a> proposes a shell alias if <code>realpath<\/code> is not available in your system:<\/p>\n\n<pre><code>$ alias realpath=\"perl -MCwd -e 'print Cwd::realpath(\\$ARGV[0]),qq&lt;\\n&gt;'\"\n$ realpath path\/folder\/file\n\/home\/user\/absolute\/path\/folder\/file\n<\/code><\/pre>\n\n<p>or if you prefer using directly perl:<\/p>\n\n<pre><code>$ perl -MCwd -e 'print Cwd::realpath($ARGV[0]),qq&lt;\\n&gt;' path\/folder\/file\n\/home\/user\/absolute\/path\/folder\/file\n<\/code><\/pre>\n\n<p>This one-line perl command uses <code>Cwd::realpath<\/code>. There are in fact three perl functions. They take a single argument and return the absolute pathname. Below details are from documentation <a href=\"http:\/\/perldoc.perl.org\/Cwd.html#abs_path-and-friends\" rel=\"noreferrer\">Perl5 > Core modules > Cwd<\/a>.<\/p>\n\n<ul>\n<li><p><strong><code>abs_path()<\/code><\/strong> uses the same algorithm as <code>getcwd()<\/code>. Symbolic links and relative-path components (<code>.<\/code> and <code>..<\/code>) are resolved to return the canonical pathname, just like <a href=\"http:\/\/man7.org\/linux\/man-pages\/man3\/realpath.3.html\" rel=\"noreferrer\"><code>realpath<\/code><\/a>.<\/p>\n\n<pre><code>use Cwd 'abs_path';\nmy $abs_path = abs_path($file);\n<\/code><\/pre><\/li>\n<li><p><strong><code>realpath()<\/code><\/strong> is a synonym for <code>abs_path()<\/code><\/p>\n\n<pre><code>use Cwd 'realpath';\nmy $abs_path = realpath($file);\n<\/code><\/pre><\/li>\n<li><p><strong><code>fast_abs_path()<\/code><\/strong> is a more dangerous, but potentially faster version of <code>abs_path()<\/code><\/p>\n\n<pre><code>use Cwd 'fast_abs_path';\nmy $abs_path = fast_abs_path($file);\n<\/code><\/pre><\/li>\n<\/ul>\n\n<p>These functions are exported only on request => therefore use <code>Cwd<\/code> to avoid the <em>\"Undefined subroutine\"<\/em> error as pointed out by <a href=\"https:\/\/stackoverflow.com\/users\/1296044\">arielf<\/a>. If you want to import all these three functions, you can use a single <code>use Cwd<\/code> line:<\/p>\n\n<pre><code>use Cwd qw(abs_path realpath fast_abs_path);\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 19375,
            "reputation": 398273,
            "user_id": 45375,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/39f6e2dc52425b1e08027c01bb880be0?s=256&d=identicon&r=PG",
            "display_name": "mklement0",
            "link": "https:\/\/stackoverflow.com\/users\/45375\/mklement0"
        },
        "is_accepted": true,
        "score": 21,
        "last_activity_date": 1570548001,
        "last_edit_date": 1570548001.0,
        "creation_date": 1441147867,
        "answer_id": 32342090,
        "question_id": 1557959,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "**Note**: This solution proposes use of a (self-authored) _utility_ that you must _download_. While it offers what I believe to be helpful features, installing a third-party solution first is *not an option for everyone*.\r\n\r\n---\r\n\r\nI&#39;ve created [**`whichpm`**](https:\/\/github.com\/mklement0\/whichpm), a **cross-platform CLI** (Linux, macOS, Window) that **locates installed Perl modules by module (package) name**, and optionally reports information about them, including detection of accidental duplicates.\r\n\r\n**Examples**\r\n\r\n\t# Locate the Data::Dumper module.\r\n\t$ whichpm Data::Dumper\r\n\t\/usr\/lib\/perl\/5.18\/Data\/Dumper.pm\r\n\t\r\n\t# Locate the Data::Dumper module, and also print\r\n\t# version information and core-module status.\r\n\t$ whichpm -v Data::Dumper\r\n\tData::Dumper    2.145   core&gt;=5.005 \/usr\/lib\/perl\/5.18\/Data\/Dumper.pm\r\n\t\r\n\t# Locate the Data::Dumper module and open it in your system&#39;s default text\r\n\t# editor.\r\n\t$ whichpm -e Data::Dumper\r\n\t\r\n\t# Look for accidental duplicates of the Foo::Bar module.\r\n\t# Normally, only 1 path should be returned.\r\n\t$ whichpm -a Foo::Bar\r\n\t\/usr\/lib\/perl\/5.18\/Foo\/Bar.pm\r\n\t.\/Foo\/Bar.pm\r\n\t\r\n\t# Print the paths of all installed modules.\r\n\t$ whichpm -a\r\n\t\r\n## Installation\r\n\r\nPrerequisites: **Linux**, **macOS**, or **Windows**, with **Perl v5.4.50 or higher** installed.\r\n\r\n### Installation from the npm registry\r\n\r\nWith [Node.js](http:\/\/nodejs.org\/) or [io.js](https:\/\/iojs.org\/) installed, install [the package](https:\/\/www.npmjs.com\/package\/whichpm) as follows:\r\n\r\n    [sudo] npm install whichpm -g\r\n\r\n### Manual installation (macOS and Linux)\r\n\r\n* Download [the CLI](https:\/\/raw.githubusercontent.com\/mklement0\/whichpm\/stable\/bin\/whichpm) as `whichpm`.\r\n* Make it executable with `chmod +x whichpm`.\r\n* Move it or symlink it to a folder in your `$PATH`, such as `\/usr\/local\/bin` (OSX) or `\/usr\/bin` (Linux).",
        "body": "<p><strong>Note<\/strong>: This solution proposes use of a (self-authored) <em>utility<\/em> that you must <em>download<\/em>. While it offers what I believe to be helpful features, installing a third-party solution first is <em>not an option for everyone<\/em>.<\/p>\n\n<hr>\n\n<p>I've created <a href=\"https:\/\/github.com\/mklement0\/whichpm\" rel=\"noreferrer\"><strong><code>whichpm<\/code><\/strong><\/a>, a <strong>cross-platform CLI<\/strong> (Linux, macOS, Window) that <strong>locates installed Perl modules by module (package) name<\/strong>, and optionally reports information about them, including detection of accidental duplicates.<\/p>\n\n<p><strong>Examples<\/strong><\/p>\n\n<pre><code># Locate the Data::Dumper module.\n$ whichpm Data::Dumper\n\/usr\/lib\/perl\/5.18\/Data\/Dumper.pm\n\n# Locate the Data::Dumper module, and also print\n# version information and core-module status.\n$ whichpm -v Data::Dumper\nData::Dumper    2.145   core&gt;=5.005 \/usr\/lib\/perl\/5.18\/Data\/Dumper.pm\n\n# Locate the Data::Dumper module and open it in your system's default text\n# editor.\n$ whichpm -e Data::Dumper\n\n# Look for accidental duplicates of the Foo::Bar module.\n# Normally, only 1 path should be returned.\n$ whichpm -a Foo::Bar\n\/usr\/lib\/perl\/5.18\/Foo\/Bar.pm\n.\/Foo\/Bar.pm\n\n# Print the paths of all installed modules.\n$ whichpm -a\n<\/code><\/pre>\n\n<h2>Installation<\/h2>\n\n<p>Prerequisites: <strong>Linux<\/strong>, <strong>macOS<\/strong>, or <strong>Windows<\/strong>, with <strong>Perl v5.4.50 or higher<\/strong> installed.<\/p>\n\n<h3>Installation from the npm registry<\/h3>\n\n<p>With <a href=\"http:\/\/nodejs.org\/\" rel=\"noreferrer\">Node.js<\/a> or <a href=\"https:\/\/iojs.org\/\" rel=\"noreferrer\">io.js<\/a> installed, install <a href=\"https:\/\/www.npmjs.com\/package\/whichpm\" rel=\"noreferrer\">the package<\/a> as follows:<\/p>\n\n<pre><code>[sudo] npm install whichpm -g\n<\/code><\/pre>\n\n<h3>Manual installation (macOS and Linux)<\/h3>\n\n<ul>\n<li>Download <a href=\"https:\/\/raw.githubusercontent.com\/mklement0\/whichpm\/stable\/bin\/whichpm\" rel=\"noreferrer\">the CLI<\/a> as <code>whichpm<\/code>.<\/li>\n<li>Make it executable with <code>chmod +x whichpm<\/code>.<\/li>\n<li>Move it or symlink it to a folder in your <code>$PATH<\/code>, such as <code>\/usr\/local\/bin<\/code> (OSX) or <code>\/usr\/bin<\/code> (Linux).<\/li>\n<\/ul>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 6660,
            "reputation": 29680,
            "user_id": 11289,
            "user_type": "registered",
            "accept_rate": 75,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/a82922f943c2ed9dac3f2b00343a6a3b?s=256&d=identicon&r=PG",
            "display_name": "Axeman",
            "link": "https:\/\/stackoverflow.com\/users\/11289\/axeman"
        },
        "is_accepted": false,
        "score": 20,
        "last_activity_date": 1269360086,
        "last_edit_date": 1269360086.0,
        "creation_date": 1224802245,
        "answer_id": 231863,
        "question_id": 229009,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "`Carp::longmess` will do what you want, and it&#39;s standard.\r\n\r\n    use Carp qw&lt;longmess&gt;;\r\n    use Data::Dumper;\r\n    sub A { &amp;B; }\r\n    sub B { &amp;C; }\r\n    sub C { &amp;D; }\r\n    sub D { &amp;E; }\r\n    \r\n    sub E { \r\n        # Uncomment below if you want to see the place in E\r\n        # local $Carp::CarpLevel = -1; \r\n        my $mess = longmess();\r\n        print Dumper( $mess );\r\n    }\r\n    \r\n    A();\r\n    __END__\r\n    $VAR1 = &#39; at - line 14\r\n\t\tmain::D called at - line 12\r\n\t\tmain::C called at - line 10\r\n\t\tmain::B called at - line 8\r\n\t\tmain::A() called at - line 23\r\n\t&#39;;\r\n\r\nI came up with this sub (Now with optional blessin&#39; action!)\r\n\r\n    my $stack_frame_re = qr{\r\n        ^                # Beginning of line\r\n        \\s*              # Any number of spaces\r\n        ( [\\w:]+ )       # Package + sub\r\n        (?: [(] ( .*? ) [)] )? # Anything between two parens\r\n        \\s+              # At least one space\r\n        called [ ] at    # &quot;called&quot; followed by a single space\r\n        \\s+ ( \\S+ ) \\s+  # Spaces surrounding at least one non-space character\r\n        line [ ] (\\d+)   # line designation\r\n    }x;\r\n\r\n    sub get_stack {\r\n        my @lines = split \/\\s*\\n\\s*\/, longmess;\r\n        shift @lines;\r\n        my @frames\r\n            = map { \r\n                  my ( $sub_name, $arg_str, $file, $line ) = \/$stack_frame_re\/;\r\n                  my $ref =  { sub_name =&gt; $sub_name\r\n                             , args     =&gt; [ map { s\/^&#39;\/\/; s\/&#39;$\/\/; $_ } \r\n                                             split \/\\s*,\\s*\/, $arg_str \r\n                                           ]\r\n                             , file     =&gt; $file\r\n                             , line     =&gt; $line \r\n                             };\r\n                  bless $ref, $_[0] if @_;\r\n                  $ref\r\n              } \r\n              @lines\r\n           ;\r\n        return wantarray ? @frames : \\@frames;\r\n    }\r\n",
        "body": "<p><code>Carp::longmess<\/code> will do what you want, and it's standard.<\/p>\n\n<pre><code>use Carp qw&lt;longmess&gt;;\nuse Data::Dumper;\nsub A { &amp;B; }\nsub B { &amp;C; }\nsub C { &amp;D; }\nsub D { &amp;E; }\n\nsub E { \n    # Uncomment below if you want to see the place in E\n    # local $Carp::CarpLevel = -1; \n    my $mess = longmess();\n    print Dumper( $mess );\n}\n\nA();\n__END__\n$VAR1 = ' at - line 14\n    main::D called at - line 12\n    main::C called at - line 10\n    main::B called at - line 8\n    main::A() called at - line 23\n';\n<\/code><\/pre>\n\n<p>I came up with this sub (Now with optional blessin' action!)<\/p>\n\n<pre><code>my $stack_frame_re = qr{\n    ^                # Beginning of line\n    \\s*              # Any number of spaces\n    ( [\\w:]+ )       # Package + sub\n    (?: [(] ( .*? ) [)] )? # Anything between two parens\n    \\s+              # At least one space\n    called [ ] at    # \"called\" followed by a single space\n    \\s+ ( \\S+ ) \\s+  # Spaces surrounding at least one non-space character\n    line [ ] (\\d+)   # line designation\n}x;\n\nsub get_stack {\n    my @lines = split \/\\s*\\n\\s*\/, longmess;\n    shift @lines;\n    my @frames\n        = map { \n              my ( $sub_name, $arg_str, $file, $line ) = \/$stack_frame_re\/;\n              my $ref =  { sub_name =&gt; $sub_name\n                         , args     =&gt; [ map { s\/^'\/\/; s\/'$\/\/; $_ } \n                                         split \/\\s*,\\s*\/, $arg_str \n                                       ]\n                         , file     =&gt; $file\n                         , line     =&gt; $line \n                         };\n              bless $ref, $_[0] if @_;\n              $ref\n          } \n          @lines\n       ;\n    return wantarray ? @frames : \\@frames;\n}\n<\/code><\/pre>\n",
        "community_owned_date": 1224819698.0
    },
    {
        "owner": {
            "account_id": 5303,
            "reputation": 42286,
            "user_id": 8457,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/cfc5e6808a7e7cf74768be0adc766452?s=256&d=identicon&r=PG",
            "display_name": "jrockway",
            "link": "https:\/\/stackoverflow.com\/users\/8457\/jrockway"
        },
        "is_accepted": false,
        "score": 20,
        "last_activity_date": 1234434063,
        "last_edit_date": null,
        "creation_date": 1234434063,
        "answer_id": 540716,
        "question_id": 540640,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "[local::lib](http:\/\/search.cpan.org\/perldoc?local::lib) will help you.  It will convince &quot;make install&quot; (and &quot;Build install&quot;) to install to a directory you can write to, and it will tell `perl` how to get at those modules.\r\n\r\nIn general, if you want to use a module that is in a blib\/ directory, you want to say `perl -Mblib ...` where `...` is how you would normally invoke your script.",
        "body": "<p><a href=\"http:\/\/search.cpan.org\/perldoc?local::lib\" rel=\"noreferrer\">local::lib<\/a> will help you.  It will convince \"make install\" (and \"Build install\") to install to a directory you can write to, and it will tell <code>perl<\/code> how to get at those modules.<\/p>\n\n<p>In general, if you want to use a module that is in a blib\/ directory, you want to say <code>perl -Mblib ...<\/code> where <code>...<\/code> is how you would normally invoke your script.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 86137,
            "reputation": 201,
            "user_id": 239751,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/084599f252e4592ff58b1f79a2c24a2b?s=256&d=identicon&r=PG",
            "display_name": "Jay",
            "link": "https:\/\/stackoverflow.com\/users\/239751\/jay"
        },
        "is_accepted": false,
        "score": 20,
        "last_activity_date": 1262092697,
        "last_edit_date": 1262092697.0,
        "creation_date": 1262028592,
        "answer_id": 1971116,
        "question_id": 1023710,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "You should also run the following command to enable color highlights:\r\n**cpan Win32::Console::ANSI**",
        "body": "<p>You should also run the following command to enable color highlights:\n<strong>cpan Win32::Console::ANSI<\/strong><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 70391,
            "reputation": 1396,
            "user_id": 204177,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/ad080f3e4714d9474106a85949484435?s=256&d=identicon&r=PG",
            "display_name": "SteveMc",
            "link": "https:\/\/stackoverflow.com\/users\/204177\/stevemc"
        },
        "is_accepted": false,
        "score": 20,
        "last_activity_date": 1328171781,
        "last_edit_date": 1328171781.0,
        "creation_date": 1288286724,
        "answer_id": 4045503,
        "question_id": 4045253,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Take a look at &#39;realpath&#39;.\r\n\r\n    $ realpath\r\n    \r\n    usage: realpath [-q] path [...]\r\n    \r\n    $ realpath ..\/..\/..\/..\/..\/\r\n    \r\n    \/data\/home\r\n\r\n",
        "body": "<p>Take a look at 'realpath'.<\/p>\n\n<pre><code>$ realpath\n\nusage: realpath [-q] path [...]\n\n$ realpath ..\/..\/..\/..\/..\/\n\n\/data\/home\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 59022,
            "reputation": 23652,
            "user_id": 176646,
            "user_type": "registered",
            "accept_rate": 88,
            "profile_image": "https:\/\/i.stack.imgur.com\/HsQyV.png?s=256&g=1",
            "display_name": "ThisSuitIsBlackNot",
            "link": "https:\/\/stackoverflow.com\/users\/176646\/thissuitisblacknot"
        },
        "is_accepted": true,
        "score": 20,
        "last_activity_date": 1472093973,
        "last_edit_date": 1592644375.0,
        "creation_date": 1469076879,
        "answer_id": 38495156,
        "question_id": 38431931,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "When there is a &quot;plus&quot; node (e.g. `\\s+`) at the beginning of a pattern and the node fails to match, the regex engine skips forward to the point of failure and tries again; with `\\s*`, on the other hand, the engine only advances one character at a time.\n\nYves Orton explains this optimization nicely [here](https:\/\/rt.perl.org\/Public\/Bug\/Display.html?id=68564#txn-749844):\n\n&gt;The start class optimisation has two modes, &quot;try every valid start position&quot; (doevery) and &quot;flip flop mode&quot; (!doevery) where it trys only the first valid start position in a sequence.\n&gt;\n&gt;Consider \/(\\d+)X\/ and the string &quot;123456Y&quot;, now we know that if we fail to match X after matching &quot;123456&quot; then we will also fail to match after &quot;23456&quot; (assuming no evil tricks are in place, which disable the optimisation anyway), so we know we can skip forward until the check \/fails\/ and only then start looking for a real match. This is flip-flop mode.\n\n`\/\\s+\/` triggers flip-flop mode; `\/\\s*\/`, `\/\\s\\s*\/`, and `\/\\s\\s+\/` don&#39;t. \nThis optimization can&#39;t be applied to &quot;star&quot; nodes like `\\s*` because they can match zero characters, so a failure at one point in a sequence isn&#39;t indicative of failure later in the same sequence.\n\n***\n\nYou can see this in the debug output for each regex. I&#39;ve highlighted the skipped characters with `^`. Compare this (skips four characters at a time):\n\n&lt;!-- language: lang-none --&gt;\n\n    $ perl -Mre=Debug,MATCH -e&#39;&quot;123 456 789 x&quot; =~ \/\\d+x\/&#39;\n       ...\n       0 &lt;&gt; &lt;123 456 78&gt;         |  1:PLUS(3)\n                                      POSIXD[\\d] can match 3 times out of 2147483647...\n                                      failed...\n       4 &lt;123 &gt; &lt;456 789 x&gt;      |  1:PLUS(3)\n          ^^^^\n                                      POSIXD[\\d] can match 3 times out of 2147483647...\n                                      failed...\n       8 &lt;23 456 &gt; &lt;789 x&gt;       |  1:PLUS(3)\n             ^^^^\n                                      POSIXD[\\d] can match 3 times out of 2147483647...\n                                      failed...\n\nto this (skips one or two characters at a time):\n\n&lt;!-- language: lang-none --&gt;\n\n    $ perl -Mre=Debug,MATCH -e&#39;&quot;123 456 789 x&quot; =~ \/\\d*x\/&#39;\n       ...\n       0 &lt;&gt; &lt;123 456 78&gt;         |  1:STAR(3)\n                                      POSIXD[\\d] can match 3 times out of 2147483647...\n                                      failed...\n       1 &lt;1&gt; &lt;23 456 789&gt;        |  1:STAR(3)\n          ^\n                                      POSIXD[\\d] can match 2 times out of 2147483647...\n                                      failed...\n       2 &lt;12&gt; &lt;3 456 789 &gt;       |  1:STAR(3)\n           ^\n                                      POSIXD[\\d] can match 1 times out of 2147483647...\n                                      failed...\n       4 &lt;123 &gt; &lt;456 789 x&gt;      |  1:STAR(3)\n            ^^\n                                      POSIXD[\\d] can match 3 times out of 2147483647...\n                                      failed...\n       5 &lt;123 4&gt; &lt;56 789 x&gt;      |  1:STAR(3)\n              ^\n                                      POSIXD[\\d] can match 2 times out of 2147483647...\n                                      failed...\n       6 &lt;23 45&gt; &lt;6 789 x&gt;       |  1:STAR(3)\n              ^\n                                      POSIXD[\\d] can match 1 times out of 2147483647...\n                                      failed...\n       8 &lt;23 456 &gt; &lt;789 x&gt;       |  1:STAR(3)\n               ^^\n                                      POSIXD[\\d] can match 3 times out of 2147483647...\n                                      failed...\n       9 &lt;23 456 7&gt; &lt;89 x&gt;       |  1:STAR(3)\n                 ^\n                                      POSIXD[\\d] can match 2 times out of 2147483647...\n                                      failed...\n      10 &lt;23 456 78&gt; &lt;9 x&gt;       |  1:STAR(3)\n                  ^\n                                      POSIXD[\\d] can match 1 times out of 2147483647...\n                                      failed...\n      12 &lt;23 456 789 &gt; &lt;x&gt;       |  1:STAR(3)\n                   ^^\n                                      POSIXD[\\d] can match 0 times out of 2147483647...\n      12 &lt;23 456 789 &gt; &lt;x&gt;       |  3:  EXACT &lt;x&gt;(5)\n      13 &lt;23 456 789 x&gt; &lt;&gt;       |  5:  END(0)\n\nNote that the optimization isn&#39;t applied to `\/\\s\\s+\/`, because `\\s+` isn&#39;t at the beginning of the pattern. Both `\/\\s\\s+\/` (logically equivalent to `\/\\s{2,}\/`) and `\/\\s\\s*\/` (logically equivalent to `\/\\s+\/`) probably *could* be optimized, though; it might make sense to ask on [perl5-porters](http:\/\/lists.perl.org\/list\/perl5-porters.html) whether either would be worth the effort.\n\n***\n\n&lt;sub&gt;In case you&#39;re interested, &quot;flip-flop mode&quot; is enabled by setting the `PREGf_SKIP` flag on a regex when it&#39;s compiled. See the code around lines 7344 and 7405 in [regcomp.c](https:\/\/github.com\/Perl\/perl5\/blob\/v5.24.0\/regcomp.c#L7344) and line 1585 in [regexec.c](https:\/\/github.com\/Perl\/perl5\/blob\/v5.24.0\/regexec.c) in the 5.24.0 source.&lt;\/sub&gt;",
        "body": "<p>When there is a &quot;plus&quot; node (e.g. <code>\\s+<\/code>) at the beginning of a pattern and the node fails to match, the regex engine skips forward to the point of failure and tries again; with <code>\\s*<\/code>, on the other hand, the engine only advances one character at a time.<\/p>\n<p>Yves Orton explains this optimization nicely <a href=\"https:\/\/rt.perl.org\/Public\/Bug\/Display.html?id=68564#txn-749844\" rel=\"noreferrer\">here<\/a>:<\/p>\n<blockquote>\n<p>The start class optimisation has two modes, &quot;try every valid start position&quot; (doevery) and &quot;flip flop mode&quot; (!doevery) where it trys only the first valid start position in a sequence.<\/p>\n<p>Consider \/(\\d+)X\/ and the string &quot;123456Y&quot;, now we know that if we fail to match X after matching &quot;123456&quot; then we will also fail to match after &quot;23456&quot; (assuming no evil tricks are in place, which disable the optimisation anyway), so we know we can skip forward until the check \/fails\/ and only then start looking for a real match. This is flip-flop mode.<\/p>\n<\/blockquote>\n<p><code>\/\\s+\/<\/code> triggers flip-flop mode; <code>\/\\s*\/<\/code>, <code>\/\\s\\s*\/<\/code>, and <code>\/\\s\\s+\/<\/code> don't.\nThis optimization can't be applied to &quot;star&quot; nodes like <code>\\s*<\/code> because they can match zero characters, so a failure at one point in a sequence isn't indicative of failure later in the same sequence.<\/p>\n<hr \/>\n<p>You can see this in the debug output for each regex. I've highlighted the skipped characters with <code>^<\/code>. Compare this (skips four characters at a time):<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>$ perl -Mre=Debug,MATCH -e'&quot;123 456 789 x&quot; =~ \/\\d+x\/'\n   ...\n   0 &lt;&gt; &lt;123 456 78&gt;         |  1:PLUS(3)\n                                  POSIXD[\\d] can match 3 times out of 2147483647...\n                                  failed...\n   4 &lt;123 &gt; &lt;456 789 x&gt;      |  1:PLUS(3)\n      ^^^^\n                                  POSIXD[\\d] can match 3 times out of 2147483647...\n                                  failed...\n   8 &lt;23 456 &gt; &lt;789 x&gt;       |  1:PLUS(3)\n         ^^^^\n                                  POSIXD[\\d] can match 3 times out of 2147483647...\n                                  failed...\n<\/code><\/pre>\n<p>to this (skips one or two characters at a time):<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>$ perl -Mre=Debug,MATCH -e'&quot;123 456 789 x&quot; =~ \/\\d*x\/'\n   ...\n   0 &lt;&gt; &lt;123 456 78&gt;         |  1:STAR(3)\n                                  POSIXD[\\d] can match 3 times out of 2147483647...\n                                  failed...\n   1 &lt;1&gt; &lt;23 456 789&gt;        |  1:STAR(3)\n      ^\n                                  POSIXD[\\d] can match 2 times out of 2147483647...\n                                  failed...\n   2 &lt;12&gt; &lt;3 456 789 &gt;       |  1:STAR(3)\n       ^\n                                  POSIXD[\\d] can match 1 times out of 2147483647...\n                                  failed...\n   4 &lt;123 &gt; &lt;456 789 x&gt;      |  1:STAR(3)\n        ^^\n                                  POSIXD[\\d] can match 3 times out of 2147483647...\n                                  failed...\n   5 &lt;123 4&gt; &lt;56 789 x&gt;      |  1:STAR(3)\n          ^\n                                  POSIXD[\\d] can match 2 times out of 2147483647...\n                                  failed...\n   6 &lt;23 45&gt; &lt;6 789 x&gt;       |  1:STAR(3)\n          ^\n                                  POSIXD[\\d] can match 1 times out of 2147483647...\n                                  failed...\n   8 &lt;23 456 &gt; &lt;789 x&gt;       |  1:STAR(3)\n           ^^\n                                  POSIXD[\\d] can match 3 times out of 2147483647...\n                                  failed...\n   9 &lt;23 456 7&gt; &lt;89 x&gt;       |  1:STAR(3)\n             ^\n                                  POSIXD[\\d] can match 2 times out of 2147483647...\n                                  failed...\n  10 &lt;23 456 78&gt; &lt;9 x&gt;       |  1:STAR(3)\n              ^\n                                  POSIXD[\\d] can match 1 times out of 2147483647...\n                                  failed...\n  12 &lt;23 456 789 &gt; &lt;x&gt;       |  1:STAR(3)\n               ^^\n                                  POSIXD[\\d] can match 0 times out of 2147483647...\n  12 &lt;23 456 789 &gt; &lt;x&gt;       |  3:  EXACT &lt;x&gt;(5)\n  13 &lt;23 456 789 x&gt; &lt;&gt;       |  5:  END(0)\n<\/code><\/pre>\n<p>Note that the optimization isn't applied to <code>\/\\s\\s+\/<\/code>, because <code>\\s+<\/code> isn't at the beginning of the pattern. Both <code>\/\\s\\s+\/<\/code> (logically equivalent to <code>\/\\s{2,}\/<\/code>) and <code>\/\\s\\s*\/<\/code> (logically equivalent to <code>\/\\s+\/<\/code>) probably <em>could<\/em> be optimized, though; it might make sense to ask on <a href=\"http:\/\/lists.perl.org\/list\/perl5-porters.html\" rel=\"noreferrer\">perl5-porters<\/a> whether either would be worth the effort.<\/p>\n<hr \/>\n<p><sub>In case you're interested, &quot;flip-flop mode&quot; is enabled by setting the <code>PREGf_SKIP<\/code> flag on a regex when it's compiled. See the code around lines 7344 and 7405 in <a href=\"https:\/\/github.com\/Perl\/perl5\/blob\/v5.24.0\/regcomp.c#L7344\" rel=\"noreferrer\">regcomp.c<\/a> and line 1585 in <a href=\"https:\/\/github.com\/Perl\/perl5\/blob\/v5.24.0\/regexec.c\" rel=\"noreferrer\">regexec.c<\/a> in the 5.24.0 source.<\/sub><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1890249,
            "reputation": 1364,
            "user_id": 1708543,
            "user_type": "registered",
            "accept_rate": 50,
            "profile_image": "https:\/\/i.stack.imgur.com\/KTS5Y.jpg?s=256&g=1",
            "display_name": "JimmyJames",
            "link": "https:\/\/stackoverflow.com\/users\/1708543\/jimmyjames"
        },
        "is_accepted": false,
        "score": 20,
        "last_activity_date": 1596836692,
        "last_edit_date": 1596836692.0,
        "creation_date": 1596820979,
        "answer_id": 63306569,
        "question_id": 63297763,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "I don&#39;t know Perl too well but the Python version is not equivalent to the Java one.  You are using [`search()`][1] but the Java version is using [`matches()`][1].  The equivalent method in Python would be [`fullmatch()`][1]\r\n\r\nWhen I run your examples in Python (3.8.2) with `search()` I get quick results as you  do.  When I run it with `fullmatch()` I get poor (multi-second) execution time.  Could it be that your Perl example is also not doing a full match?\r\n\r\nBTW: if you want to try the Java version of search you would use:\r\n\r\n    Pattern.compile(&quot;(a+)+b&quot;).matcher(&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaabs&quot;).find();\r\n\r\nThere might be some slight difference in the semantics but it should be close enough for this purpose.\r\n\r\n  [1]: https:\/\/docs.python.org\/3\/library\/re.html#re.fullmatch",
        "body": "<p>I don't know Perl too well but the Python version is not equivalent to the Java one.  You are using <a href=\"https:\/\/docs.python.org\/3\/library\/re.html#re.fullmatch\" rel=\"noreferrer\"><code>search()<\/code><\/a> but the Java version is using <a href=\"https:\/\/docs.python.org\/3\/library\/re.html#re.fullmatch\" rel=\"noreferrer\"><code>matches()<\/code><\/a>.  The equivalent method in Python would be <a href=\"https:\/\/docs.python.org\/3\/library\/re.html#re.fullmatch\" rel=\"noreferrer\"><code>fullmatch()<\/code><\/a><\/p>\n<p>When I run your examples in Python (3.8.2) with <code>search()<\/code> I get quick results as you  do.  When I run it with <code>fullmatch()<\/code> I get poor (multi-second) execution time.  Could it be that your Perl example is also not doing a full match?<\/p>\n<p>BTW: if you want to try the Java version of search you would use:<\/p>\n<pre><code>Pattern.compile(&quot;(a+)+b&quot;).matcher(&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaabs&quot;).find();\n<\/code><\/pre>\n<p>There might be some slight difference in the semantics but it should be close enough for this purpose.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 17159,
            "reputation": 8406,
            "user_id": 38124,
            "user_type": "registered",
            "accept_rate": 73,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/1d5861724b093928cf8cd6c3ce824dbe?s=256&d=identicon&r=PG",
            "display_name": "melaos",
            "link": "https:\/\/stackoverflow.com\/users\/38124\/melaos"
        },
        "is_accepted": false,
        "score": 19,
        "last_activity_date": 1576737277,
        "last_edit_date": 1576737277.0,
        "creation_date": 1233566284,
        "answer_id": 502650,
        "question_id": 502644,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Test::More should offer you more bang for your bucks once you get the hang of Test::Simple.",
        "body": "<p>Test::More should offer you more bang for your bucks once you get the hang of Test::Simple.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 7800,
            "reputation": 83705,
            "user_id": 13673,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/167099d07f9f55d6ed7e66d911eab025?s=256&d=identicon&r=PG",
            "display_name": "David Segonds",
            "link": "https:\/\/stackoverflow.com\/users\/13673\/david-segonds"
        },
        "is_accepted": false,
        "score": 19,
        "last_activity_date": 1445350643,
        "last_edit_date": 1445350643.0,
        "creation_date": 1233707128,
        "answer_id": 509604,
        "question_id": 509576,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "    my @array = stat($filehandle);\r\n\r\nThe modification time is stored in Unix format in $array[9].\r\n\r\nOr explicitly:\r\n\r\n    my ($dev, $ino, $mode, $nlink, $uid, $gid, $rdev, $size,\r\n        $atime, $mtime, $ctime, $blksize, $blocks) = stat($filepath);\r\n\r\n      0 dev      Device number of filesystem\r\n      1 ino      inode number\r\n      2 mode     File mode  (type and permissions)\r\n      3 nlink    Number of (hard) links to the file\r\n      4 uid      Numeric user ID of file&#39;s owner\r\n      5 gid      Numeric group ID of file&#39;s owner\r\n      6 rdev     The device identifier (special files only)\r\n      7 size     Total size of file, in bytes\r\n      8 atime    Last access time in seconds since the epoch\r\n      9 mtime    Last modify time in seconds since the epoch\r\n     10 ctime    inode change time in seconds since the epoch\r\n     11 blksize  Preferred block size for file system I\/O\r\n     12 blocks   Actual number of blocks allocated\r\n\r\nThe epoch was at 00:00 January 1, 1970 GMT.\r\n\r\nMore information is in *[stat][1]*.\r\n\r\n  [1]: http:\/\/perldoc.perl.org\/functions\/stat.html\r\n\r\n",
        "body": "<pre><code>my @array = stat($filehandle);\n<\/code><\/pre>\n\n<p>The modification time is stored in Unix format in $array[9].<\/p>\n\n<p>Or explicitly:<\/p>\n\n<pre><code>my ($dev, $ino, $mode, $nlink, $uid, $gid, $rdev, $size,\n    $atime, $mtime, $ctime, $blksize, $blocks) = stat($filepath);\n\n  0 dev      Device number of filesystem\n  1 ino      inode number\n  2 mode     File mode  (type and permissions)\n  3 nlink    Number of (hard) links to the file\n  4 uid      Numeric user ID of file's owner\n  5 gid      Numeric group ID of file's owner\n  6 rdev     The device identifier (special files only)\n  7 size     Total size of file, in bytes\n  8 atime    Last access time in seconds since the epoch\n  9 mtime    Last modify time in seconds since the epoch\n 10 ctime    inode change time in seconds since the epoch\n 11 blksize  Preferred block size for file system I\/O\n 12 blocks   Actual number of blocks allocated\n<\/code><\/pre>\n\n<p>The epoch was at 00:00 January 1, 1970 GMT.<\/p>\n\n<p>More information is in <em><a href=\"http:\/\/perldoc.perl.org\/functions\/stat.html\" rel=\"noreferrer\">stat<\/a><\/em>.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 99268,
            "reputation": 5720,
            "user_id": 268224,
            "user_type": "registered",
            "accept_rate": 73,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/fb7d0e5dd1af9f2b9bc7d5d24cbea1e9?s=256&d=identicon&r=PG",
            "display_name": "codeholic",
            "link": "https:\/\/stackoverflow.com\/users\/268224\/codeholic"
        },
        "is_accepted": false,
        "score": 19,
        "last_activity_date": 1266745611,
        "last_edit_date": null,
        "creation_date": 1266745611,
        "answer_id": 2305484,
        "question_id": 2304577,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "Sometimes you need to get all matches globally, like PHP&#39;s `preg_match_all` does. If it&#39;s your case, then you can write something like:\r\n\r\n    # a dummy example\r\n    my $subject = &#39;Philip Fry Bender Rodriguez Turanga Leela&#39;;\r\n    my @matches;\r\n    push @matches, [$1, $2] while $subject =~ \/(\\w+) (\\w+)\/g;\r\n    \r\n    use Data::Dumper;\r\n    print Dumper(\\@matches);\r\n\r\nIt prints\r\n\r\n    $VAR1 = [\r\n              [\r\n                &#39;Philip&#39;,\r\n                &#39;Fry&#39;\r\n              ],\r\n              [\r\n                &#39;Bender&#39;,\r\n                &#39;Rodriguez&#39;\r\n              ],\r\n              [\r\n                &#39;Turanga&#39;,\r\n                &#39;Leela&#39;\r\n              ]\r\n            ];\r\n\r\n",
        "body": "<p>Sometimes you need to get all matches globally, like PHP's <code>preg_match_all<\/code> does. If it's your case, then you can write something like:<\/p>\n\n<pre><code># a dummy example\nmy $subject = 'Philip Fry Bender Rodriguez Turanga Leela';\nmy @matches;\npush @matches, [$1, $2] while $subject =~ \/(\\w+) (\\w+)\/g;\n\nuse Data::Dumper;\nprint Dumper(\\@matches);\n<\/code><\/pre>\n\n<p>It prints<\/p>\n\n<pre><code>$VAR1 = [\n          [\n            'Philip',\n            'Fry'\n          ],\n          [\n            'Bender',\n            'Rodriguez'\n          ],\n          [\n            'Turanga',\n            'Leela'\n          ]\n        ];\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 35556,
            "reputation": 117234,
            "user_id": 100754,
            "user_type": "registered",
            "accept_rate": 90,
            "profile_image": "https:\/\/i.stack.imgur.com\/g9hlb.jpg?s=256&g=1",
            "display_name": "Sinan &#220;n&#252;r",
            "link": "https:\/\/stackoverflow.com\/users\/100754\/sinan-%c3%9cn%c3%bcr"
        },
        "is_accepted": false,
        "score": 19,
        "last_activity_date": 1320248846,
        "last_edit_date": null,
        "creation_date": 1320248846,
        "answer_id": 7983231,
        "question_id": 7983115,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "There are at least two discussions: [Turing completeness and regular expressions](http:\/\/www.perlmonks.org\/?node_id=809842) and [Are Perl patterns universal?](http:\/\/www.perlmonks.org\/?node_id=406253) with further references.\r\n\r\nThe consensus (to my untrained eye) seems to be that the answer is &quot;no&quot;, but I am not sure if I understand everything correctly.",
        "body": "<p>There are at least two discussions: <a href=\"http:\/\/www.perlmonks.org\/?node_id=809842\">Turing completeness and regular expressions<\/a> and <a href=\"http:\/\/www.perlmonks.org\/?node_id=406253\">Are Perl patterns universal?<\/a> with further references.<\/p>\n\n<p>The consensus (to my untrained eye) seems to be that the answer is \"no\", but I am not sure if I understand everything correctly.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2214003,
            "reputation": 32624,
            "user_id": 1956010,
            "user_type": "registered",
            "accept_rate": 83,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/bfdcb4596e9da98cccbf9a0069fdff6c?s=256&d=identicon&r=PG",
            "display_name": "nwellnhof",
            "link": "https:\/\/stackoverflow.com\/users\/1956010\/nwellnhof"
        },
        "is_accepted": false,
        "score": 19,
        "last_activity_date": 1444343614,
        "last_edit_date": 1444343614.0,
        "creation_date": 1444319874,
        "answer_id": 33020641,
        "question_id": 33014080,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "The whole question is somewhat subjective, so I&#39;d like to give an opinion that differs from the other answers posted so far. I wouldn&#39;t consider double negation bad form in general, but I&#39;d try to avoid it if there&#39;s a more readable alternative. Regarding your examples:\r\n\r\n1. Use something like `$count++ if $condition`.\r\n\r\n2. Truth values as hash keys? That&#39;s simply evil. At least, it&#39;s surprising for anyone who has to maintain your code.\r\n\r\n3. Here the use of `!!` is justified.\r\n\r\n4. Here I&#39;d use the ternary operator. It isn&#39;t really clear how `execute` behaves when passed a dualvar.\r\n\r\nAnother situation where it&#39;s completely OK to use `!!` is when casting certain values to Boolean, for example in a return statement. Something like:\r\n\r\n    # Returns true or false.\r\n    sub has_item {\r\n        my $self = shift;\r\n        return !!$self-&gt;{blessed_ref};\r\n    }\r\n\r\nMost programmers should know the `!!` idiom from statically typed languages where it&#39;s often used as a cast to bool. If that&#39;s what you want to do and there&#39;s no danger of unwanted side-effects, go with the double negation.",
        "body": "<p>The whole question is somewhat subjective, so I'd like to give an opinion that differs from the other answers posted so far. I wouldn't consider double negation bad form in general, but I'd try to avoid it if there's a more readable alternative. Regarding your examples:<\/p>\n\n<ol>\n<li><p>Use something like <code>$count++ if $condition<\/code>.<\/p><\/li>\n<li><p>Truth values as hash keys? That's simply evil. At least, it's surprising for anyone who has to maintain your code.<\/p><\/li>\n<li><p>Here the use of <code>!!<\/code> is justified.<\/p><\/li>\n<li><p>Here I'd use the ternary operator. It isn't really clear how <code>execute<\/code> behaves when passed a dualvar.<\/p><\/li>\n<\/ol>\n\n<p>Another situation where it's completely OK to use <code>!!<\/code> is when casting certain values to Boolean, for example in a return statement. Something like:<\/p>\n\n<pre><code># Returns true or false.\nsub has_item {\n    my $self = shift;\n    return !!$self-&gt;{blessed_ref};\n}\n<\/code><\/pre>\n\n<p>Most programmers should know the <code>!!<\/code> idiom from statically typed languages where it's often used as a cast to bool. If that's what you want to do and there's no danger of unwanted side-effects, go with the double negation.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5739,
            "reputation": 114248,
            "user_id": 9410,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/e17949267bbfe21a0fadf1bbf00592b4?s=256&d=identicon&r=PG",
            "display_name": "Aristotle Pagaltzis",
            "link": "https:\/\/stackoverflow.com\/users\/9410\/aristotle-pagaltzis"
        },
        "is_accepted": false,
        "score": 18,
        "last_activity_date": 1222385127,
        "last_edit_date": null,
        "creation_date": 1222385127,
        "answer_id": 136851,
        "question_id": 129607,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "I can\u2019t believe no one has linked to Mark Jason Dominus\u2019 exhaustive treatises on the matter:\r\n\r\n* &lt;b&gt;[Coping with Scoping](http:\/\/perl.plover.com\/FAQs\/Namespaces.html)&lt;\/b&gt;\r\n\r\n* And afterwards, if you want to know what `local` is good for after all,&lt;br \/&gt;&lt;b&gt;[Seven Useful Uses of `local`](http:\/\/perl.plover.com\/local.html)&lt;\/b&gt;",
        "body": "<p>I can\u2019t believe no one has linked to Mark Jason Dominus\u2019 exhaustive treatises on the matter:<\/p>\n\n<ul>\n<li><p><b><a href=\"http:\/\/perl.plover.com\/FAQs\/Namespaces.html\" rel=\"noreferrer\">Coping with Scoping<\/a><\/b><\/p><\/li>\n<li><p>And afterwards, if you want to know what <code>local<\/code> is good for after all,<br \/><b><a href=\"http:\/\/perl.plover.com\/local.html\" rel=\"noreferrer\">Seven Useful Uses of <code>local<\/code><\/a><\/b><\/p><\/li>\n<\/ul>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 3283,
            "reputation": 30073,
            "user_id": 4727,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/01a99498921b93509c73d390704bddf6?s=256&d=identicon&r=PG",
            "display_name": "Leon Timmermans",
            "link": "https:\/\/stackoverflow.com\/users\/4727\/leon-timmermans"
        },
        "is_accepted": false,
        "score": 18,
        "last_activity_date": 1224752548,
        "last_edit_date": null,
        "creation_date": 1224752486,
        "answer_id": 229035,
        "question_id": 229009,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "[caller][1] can do that, though you may want even more information than that.\r\n\r\n\r\n  [1]: http:\/\/perldoc.perl.org\/functions\/caller.html",
        "body": "<p><a href=\"http:\/\/perldoc.perl.org\/functions\/caller.html\" rel=\"noreferrer\">caller<\/a> can do that, though you may want even more information than that.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5303,
            "reputation": 42286,
            "user_id": 8457,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/cfc5e6808a7e7cf74768be0adc766452?s=256&d=identicon&r=PG",
            "display_name": "jrockway",
            "link": "https:\/\/stackoverflow.com\/users\/8457\/jrockway"
        },
        "is_accepted": false,
        "score": 18,
        "last_activity_date": 1233909197,
        "last_edit_date": null,
        "creation_date": 1233909197,
        "answer_id": 519562,
        "question_id": 519309,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "Your script works if you do this:\r\n\r\n    #!\/usr\/bin\/perl -w\r\n\r\n    binmode STDOUT, &#39;:utf8&#39;;\r\n\r\n    while(&lt;&gt;){\r\n        binmode ARGV, &#39;:utf8&#39;;\r\n\r\n        my @chars = split \/\/, $_;\r\n        print &quot;$_\\n&quot; foreach(@chars);\r\n    }\r\n\r\nThe magic filehandle that &lt;&gt; reads from is called `*ARGV`, and it is\r\nopened when you call readline.\r\n\r\nBut really, I am a fan of explicitly using `Encode::decode` and\r\n`Encode::encode` when appropriate.\r\n",
        "body": "<p>Your script works if you do this:<\/p>\n\n<pre><code>#!\/usr\/bin\/perl -w\n\nbinmode STDOUT, ':utf8';\n\nwhile(&lt;&gt;){\n    binmode ARGV, ':utf8';\n\n    my @chars = split \/\/, $_;\n    print \"$_\\n\" foreach(@chars);\n}\n<\/code><\/pre>\n\n<p>The magic filehandle that &lt;> reads from is called <code>*ARGV<\/code>, and it is\nopened when you call readline.<\/p>\n\n<p>But really, I am a fan of explicitly using <code>Encode::decode<\/code> and\n<code>Encode::encode<\/code> when appropriate.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 14032,
            "reputation": 5892,
            "user_id": 28532,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/5e15c26146183817151f9eeaeb20362b?s=256&d=identicon&r=PG",
            "display_name": "cms",
            "link": "https:\/\/stackoverflow.com\/users\/28532\/cms"
        },
        "is_accepted": false,
        "score": 18,
        "last_activity_date": 1430836572,
        "last_edit_date": 1430836572.0,
        "creation_date": 1251470382,
        "answer_id": 1347431,
        "question_id": 1347396,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "The &amp;subroutine() form disables prototype checking. This may or may not be what you want.\r\n\r\n[http:\/\/www.perl.com\/doc\/manual\/html\/pod\/perlsub.html#Prototypes][1]\r\n\r\n\r\nPrototypes allow you to specify the numbers and types of your subroutine arguments, and have them checked at compile time. This can provide useful diagnostic assistance.\r\n\r\nPrototypes don&#39;t apply to method calls, or calls made in the old-fashioned style using the &amp; prefix.\r\n\r\nThe &amp; is necessary to reference or dereference a subroutine or code reference\r\n\r\ne.g.\r\n\r\n    sub foo {\r\n       # a subroutine\r\n    }\r\n    \r\n    my $subref = \\&amp;foo; # take a reference to the subroutine\r\n    \r\n    &amp;$subref(@args);  # make a subroutine call using the reference.\r\n \r\n    my $anon_func = sub { ... }; # anonymous code reference\r\n    &amp;$anon_func(); # called like this\r\n\r\nProtypes aren&#39;t applicable to subroutine references either.\r\n\r\nThe &amp;subroutine form is also used in the so-called [magic goto][2] form.\r\n\r\nThe expression `goto &amp;subroutine` replaces the current calling context with a call to the named subroutine, using the current value of @_. \r\n\r\nIn essence, you can completely switch a call to one subroutine with a call to the named one. This is commonly seen in AUTOLOAD blocks, where a deferred subroutine call can be made, perhaps with some modification to @_ , but it looks to the program entirely as if it was a call to the named sub. \r\n\r\ne.g.\r\n\r\n    sub AUTOLOAD {\r\n        ...\r\n        push @_, @extra_args; # add more arguments onto the parameter list\r\n        goto &amp;subroutine ; # change call another subroutine, as if we were never here\r\n    }\r\n    \r\n}\r\n\r\nPotentially this could be useful for [tail call elimination][4], I suppose.\r\n\r\nsee [detailed explanation of this technique here][3] \r\n\r\n\r\n  [1]: http:\/\/www.perl.com\/doc\/manual\/html\/pod\/perlsub.html#Prototypes\r\n  [2]: http:\/\/perldoc.perl.org\/functions\/goto.html\r\n  [3]: http:\/\/www.perlmonks.org\/?node_id=8227\r\n  [4]: https:\/\/en.wikipedia.org\/wiki\/Tail_call",
        "body": "<p>The &amp;subroutine() form disables prototype checking. This may or may not be what you want.<\/p>\n\n<p><a href=\"http:\/\/www.perl.com\/doc\/manual\/html\/pod\/perlsub.html#Prototypes\" rel=\"noreferrer\">http:\/\/www.perl.com\/doc\/manual\/html\/pod\/perlsub.html#Prototypes<\/a><\/p>\n\n<p>Prototypes allow you to specify the numbers and types of your subroutine arguments, and have them checked at compile time. This can provide useful diagnostic assistance.<\/p>\n\n<p>Prototypes don't apply to method calls, or calls made in the old-fashioned style using the &amp; prefix.<\/p>\n\n<p>The &amp; is necessary to reference or dereference a subroutine or code reference<\/p>\n\n<p>e.g.<\/p>\n\n<pre><code>sub foo {\n   # a subroutine\n}\n\nmy $subref = \\&amp;foo; # take a reference to the subroutine\n\n&amp;$subref(@args);  # make a subroutine call using the reference.\n\nmy $anon_func = sub { ... }; # anonymous code reference\n&amp;$anon_func(); # called like this\n<\/code><\/pre>\n\n<p>Protypes aren't applicable to subroutine references either.<\/p>\n\n<p>The &amp;subroutine form is also used in the so-called <a href=\"http:\/\/perldoc.perl.org\/functions\/goto.html\" rel=\"noreferrer\">magic goto<\/a> form.<\/p>\n\n<p>The expression <code>goto &amp;subroutine<\/code> replaces the current calling context with a call to the named subroutine, using the current value of @_. <\/p>\n\n<p>In essence, you can completely switch a call to one subroutine with a call to the named one. This is commonly seen in AUTOLOAD blocks, where a deferred subroutine call can be made, perhaps with some modification to @_ , but it looks to the program entirely as if it was a call to the named sub. <\/p>\n\n<p>e.g.<\/p>\n\n<pre><code>sub AUTOLOAD {\n    ...\n    push @_, @extra_args; # add more arguments onto the parameter list\n    goto &amp;subroutine ; # change call another subroutine, as if we were never here\n}\n<\/code><\/pre>\n\n<p>}<\/p>\n\n<p>Potentially this could be useful for <a href=\"https:\/\/en.wikipedia.org\/wiki\/Tail_call\" rel=\"noreferrer\">tail call elimination<\/a>, I suppose.<\/p>\n\n<p>see <a href=\"http:\/\/www.perlmonks.org\/?node_id=8227\" rel=\"noreferrer\">detailed explanation of this technique here<\/a> <\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 17881,
            "reputation": 53314,
            "user_id": 40468,
            "user_type": "registered",
            "accept_rate": 60,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/43722cb1e955874a8eb721e9dfe101d1?s=256&d=identicon&r=PG",
            "display_name": "Ether",
            "link": "https:\/\/stackoverflow.com\/users\/40468\/ether"
        },
        "is_accepted": false,
        "score": 18,
        "last_activity_date": 1266724189,
        "last_edit_date": null,
        "creation_date": 1266724189,
        "answer_id": 2304690,
        "question_id": 2304577,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "See the manual entry for [perldoc perlop][1] under &quot;Matching in List Context&quot;:\r\n\r\n&gt; If the \/g option is not used, m\/\/ in list context returns a list consisting of the\r\nsubexpressions matched by the parentheses in the pattern, i.e., ($1 , $2 , $3 ...)\r\n\r\n&gt; The \/g modifier specifies global pattern matching--that is, matching as many times as\r\npossible within the string. How it behaves depends on the context. In list context, it\r\nreturns a list of the substrings matched by any capturing parentheses in the regular expression. If there are no parentheses, it returns a list of all the matched strings, as if there were parentheses around the whole pattern.\r\n\r\nYou can simply grab all the matches by assigning to an array, or otherwise performing the evaluation in list context:\r\n\r\n    my @matches = ($string =~ m\/word\/g);\r\n\r\n  [1]: http:\/\/perldoc.perl.org\/perlop.html#Regexp-Quote-Like-Operators",
        "body": "<p>See the manual entry for <a href=\"http:\/\/perldoc.perl.org\/perlop.html#Regexp-Quote-Like-Operators\" rel=\"noreferrer\">perldoc perlop<\/a> under \"Matching in List Context\":<\/p>\n\n<blockquote>\n  <p>If the \/g option is not used, m\/\/ in list context returns a list consisting of the\n  subexpressions matched by the parentheses in the pattern, i.e., ($1 , $2 , $3 ...)<\/p>\n  \n  <p>The \/g modifier specifies global pattern matching--that is, matching as many times as\n  possible within the string. How it behaves depends on the context. In list context, it\n  returns a list of the substrings matched by any capturing parentheses in the regular expression. If there are no parentheses, it returns a list of all the matched strings, as if there were parentheses around the whole pattern.<\/p>\n<\/blockquote>\n\n<p>You can simply grab all the matches by assigning to an array, or otherwise performing the evaluation in list context:<\/p>\n\n<pre><code>my @matches = ($string =~ m\/word\/g);\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1273208,
            "reputation": 104530,
            "user_id": 1229023,
            "user_type": "registered",
            "accept_rate": 71,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/75b840909603c238921a81032efd57eb?s=256&d=identicon&r=PG",
            "display_name": "raina77ow",
            "link": "https:\/\/stackoverflow.com\/users\/1229023\/raina77ow"
        },
        "is_accepted": false,
        "score": 18,
        "last_activity_date": 1330692396,
        "last_edit_date": 1330692396.0,
        "creation_date": 1330166881,
        "answer_id": 9443332,
        "question_id": 8645956,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Did you check [DateTime-Indic-0.1][1] family of modules? At least [DateTime::Indic::Chandramana][2] \r\nseems to have a method to convert traditional date into UTC values (utc_rd_values).\r\n\r\n**UPDATE:**\r\n\r\nI suppose [Calendar::Saka][3] may be useful as well for many users (as I have known, it&#39;s the Indian national calendar), in particular, `to_gregorian()` and `from_gregorian()` methods.\r\n\r\n\r\n  [1]: https:\/\/metacpan.org\/release\/DateTime-Indic\r\n  [2]: https:\/\/metacpan.org\/module\/DateTime::Indic::Chandramana\r\n  [3]: https:\/\/metacpan.org\/module\/Calendar::Saka",
        "body": "<p>Did you check <a href=\"https:\/\/metacpan.org\/release\/DateTime-Indic\">DateTime-Indic-0.1<\/a> family of modules? At least <a href=\"https:\/\/metacpan.org\/module\/DateTime%3a%3aIndic%3a%3aChandramana\">DateTime::Indic::Chandramana<\/a> \nseems to have a method to convert traditional date into UTC values (utc_rd_values).<\/p>\n\n<p><strong>UPDATE:<\/strong><\/p>\n\n<p>I suppose <a href=\"https:\/\/metacpan.org\/module\/Calendar%3a%3aSaka\">Calendar::Saka<\/a> may be useful as well for many users (as I have known, it's the Indian national calendar), in particular, <code>to_gregorian()<\/code> and <code>from_gregorian()<\/code> methods.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 19702,
            "reputation": 39318,
            "user_id": 46395,
            "user_type": "registered",
            "accept_rate": 71,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/5ce828f20abb195ef5d971205ee36c27?s=256&d=identicon&r=PG",
            "display_name": "daxim",
            "link": "https:\/\/stackoverflow.com\/users\/46395\/daxim"
        },
        "is_accepted": false,
        "score": 18,
        "last_activity_date": 1339621860,
        "last_edit_date": null,
        "creation_date": 1339621860,
        "answer_id": 11023357,
        "question_id": 11020812,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "    use DateTime qw();\r\n    DateTime-&gt;now-&gt;strftime(&#39;%m\/%d\/%Y&#39;)   \r\n\r\nexpression returns `06\/13\/2012`",
        "body": "<pre><code>use DateTime qw();\nDateTime-&gt;now-&gt;strftime('%m\/%d\/%Y')   \n<\/code><\/pre>\n\n<p>expression returns <code>06\/13\/2012<\/code><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 952647,
            "reputation": 840,
            "user_id": 978497,
            "user_type": "registered",
            "accept_rate": 67,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/a8797ee5d5cf20cde2e37986da7cfa2e?s=256&d=identicon&r=PG",
            "display_name": "Roben",
            "link": "https:\/\/stackoverflow.com\/users\/978497\/roben"
        },
        "is_accepted": false,
        "score": 18,
        "last_activity_date": 1580806719,
        "last_edit_date": 1580806719.0,
        "creation_date": 1502702451,
        "answer_id": 45671273,
        "question_id": 176476,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "**Update 2019-05**\r\n\r\nThe whole process has thankfully been packed into a docker image by TheCodingMachine: https:\/\/github.com\/thecodingmachine\/gotenberg\r\n\r\nThis makes maintenance and usage of chrome based pdf generation in production environments really smooth and hassle free.\r\n\r\n---\r\n\r\nThere is a new headless mode since Chrome 59. As all the other solutions really struggle with newer (or not so new anymore) CSS features like flexbox, this was in my case the only solution to produce a proper PDF output.\r\n\r\nTo create a pdf from a local html file just use the following command:\r\n`chrome --headless  --disable-gpu --print-to-pdf file:\/\/\/path\/to\/myfile.html`.\r\n\r\nFor Mac OS substitue `chrome` with `\/Applications\/Google\\ Chrome.app\/Contents\/MacOS\/Google\\ Chrome`.\r\n\r\nThe only downside I noticed so far is that (currently) you can not pass the html via stdin, but creating a temporary file is not that much of an issue.\r\n\r\nFor more information see https:\/\/developers.google.com\/web\/updates\/2017\/04\/headless-chrome#create_a_pdf_dom\r\n\r\nUpdate: As it turns out, the chrome guys will most likely provide some kind of node module for this task, which would eventually deprecate the headless mode (https:\/\/bugs.chromium.org\/p\/chromium\/issues\/detail?id=719921).\r\n\r\nThe best bet would be to use the node based approach using the puppeteer \r\n module as documented under https:\/\/developers.google.com\/web\/updates\/2017\/04\/headless-chrome#node and print the page via the Page.printToPDF command, which enables some additional configuration, too. \r\n\r\nOf course, you can connect to the debug console websocket from any other environment than node (i.e. PHP script), too.",
        "body": "<p><strong>Update 2019-05<\/strong><\/p>\n\n<p>The whole process has thankfully been packed into a docker image by TheCodingMachine: <a href=\"https:\/\/github.com\/thecodingmachine\/gotenberg\" rel=\"noreferrer\">https:\/\/github.com\/thecodingmachine\/gotenberg<\/a><\/p>\n\n<p>This makes maintenance and usage of chrome based pdf generation in production environments really smooth and hassle free.<\/p>\n\n<hr>\n\n<p>There is a new headless mode since Chrome 59. As all the other solutions really struggle with newer (or not so new anymore) CSS features like flexbox, this was in my case the only solution to produce a proper PDF output.<\/p>\n\n<p>To create a pdf from a local html file just use the following command:\n<code>chrome --headless  --disable-gpu --print-to-pdf file:\/\/\/path\/to\/myfile.html<\/code>.<\/p>\n\n<p>For Mac OS substitue <code>chrome<\/code> with <code>\/Applications\/Google\\ Chrome.app\/Contents\/MacOS\/Google\\ Chrome<\/code>.<\/p>\n\n<p>The only downside I noticed so far is that (currently) you can not pass the html via stdin, but creating a temporary file is not that much of an issue.<\/p>\n\n<p>For more information see <a href=\"https:\/\/developers.google.com\/web\/updates\/2017\/04\/headless-chrome#create_a_pdf_dom\" rel=\"noreferrer\">https:\/\/developers.google.com\/web\/updates\/2017\/04\/headless-chrome#create_a_pdf_dom<\/a><\/p>\n\n<p>Update: As it turns out, the chrome guys will most likely provide some kind of node module for this task, which would eventually deprecate the headless mode (<a href=\"https:\/\/bugs.chromium.org\/p\/chromium\/issues\/detail?id=719921\" rel=\"noreferrer\">https:\/\/bugs.chromium.org\/p\/chromium\/issues\/detail?id=719921<\/a>).<\/p>\n\n<p>The best bet would be to use the node based approach using the puppeteer \n module as documented under <a href=\"https:\/\/developers.google.com\/web\/updates\/2017\/04\/headless-chrome#node\" rel=\"noreferrer\">https:\/\/developers.google.com\/web\/updates\/2017\/04\/headless-chrome#node<\/a> and print the page via the Page.printToPDF command, which enables some additional configuration, too. <\/p>\n\n<p>Of course, you can connect to the debug console websocket from any other environment than node (i.e. PHP script), too.<\/p>\n",
        "community_owned_date": null
    }
]

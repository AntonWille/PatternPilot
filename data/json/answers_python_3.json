[{"owner":{"user_type":"does_not_exist","display_name":"unbeknown"},"is_accepted":false,"score":227,"last_activity_date":1640217222,"last_edit_date":1640217222.0,"creation_date":1233067822,"answer_id":483685,"question_id":483666,"content_license":"CC BY-SA 4.0","body_markdown":"Assuming that the values in the dict are unique:\r\n\r\nPython 3:\r\n\r\n    dict((v, k) for k, v in my_map.items())\r\n\r\n\r\nPython 2:\r\n\r\n    dict((v, k) for k, v in my_map.iteritems())","body":"<p>Assuming that the values in the dict are unique:<\/p>\n<p>Python 3:<\/p>\n<pre><code>dict((v, k) for k, v in my_map.items())\n<\/code><\/pre>\n<p>Python 2:<\/p>\n<pre><code>dict((v, k) for k, v in my_map.iteritems())\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":271958,"reputation":128215,"user_id":562769,"user_type":"registered","accept_rate":61,"profile_image":"https:\/\/www.gravatar.com\/avatar\/e86681e49622d52817b36fd2a4c936b7?s=256&d=identicon&r=PG","display_name":"Martin Thoma","link":"https:\/\/stackoverflow.com\/users\/562769\/martin-thoma"},"is_accepted":false,"score":226,"last_activity_date":1653586593,"last_edit_date":1653586593.0,"creation_date":1486314441,"answer_id":42054860,"question_id":1773805,"content_license":"CC BY-SA 4.0","body_markdown":"## Read &amp; Write YAML files with Python 2+3 (and unicode)\r\n\r\n    # -*- coding: utf-8 -*-\r\n    import yaml\r\n    import io\r\n\r\n    # Define data\r\n    data = {\r\n        &#39;a list&#39;: [\r\n            1, \r\n            42, \r\n            3.141, \r\n            1337, \r\n            &#39;help&#39;, \r\n            u&#39;\u20ac&#39;\r\n        ],\r\n        &#39;a string&#39;: &#39;bla&#39;,\r\n        &#39;another dict&#39;: {\r\n            &#39;foo&#39;: &#39;bar&#39;,\r\n            &#39;key&#39;: &#39;value&#39;,\r\n            &#39;the answer&#39;: 42\r\n        }\r\n    }\r\n\r\n    # Write YAML file\r\n    with io.open(&#39;data.yaml&#39;, &#39;w&#39;, encoding=&#39;utf8&#39;) as outfile:\r\n        yaml.dump(data, outfile, default_flow_style=False, allow_unicode=True)\r\n\r\n    # Read YAML file\r\n    with open(&quot;data.yaml&quot;, &#39;r&#39;) as stream:\r\n        data_loaded = yaml.safe_load(stream)\r\n\r\n    print(data == data_loaded)\r\n\r\n\r\n## Created YAML file\r\n\r\n    a list:\r\n    - 1\r\n    - 42\r\n    - 3.141\r\n    - 1337\r\n    - help\r\n    - \u20ac\r\n    a string: bla\r\n    another dict:\r\n      foo: bar\r\n      key: value\r\n      the answer: 42\r\n\r\n## Common file endings\r\n\r\n`.yml` and `.yaml`\r\n\r\n\r\n## Alternatives\r\n\r\n* CSV: Super simple format ([read &amp; write](https:\/\/stackoverflow.com\/a\/41585079\/562769))\r\n* JSON: Nice for writing human-readable data; VERY commonly used ([read &amp; write](https:\/\/stackoverflow.com\/a\/37795053\/562769))\r\n* YAML: YAML is a superset of JSON, but easier to read ([read &amp; write](https:\/\/stackoverflow.com\/a\/42054860\/562769), [comparison of JSON and YAML](https:\/\/stackoverflow.com\/a\/1729545\/562769))\r\n* pickle: A Python serialization format ([read &amp; write](https:\/\/stackoverflow.com\/a\/33245595\/562769)) \u26a0\ufe0f Using pickle with files from 3rd parties poses an uncontrollable arbitrary code execution risk.\r\n* [MessagePack](http:\/\/msgpack.org\/) ([Python package](https:\/\/pypi.python.org\/pypi\/msgpack-python)): More compact representation ([read &amp; write](https:\/\/stackoverflow.com\/q\/43442194\/562769))\r\n* [HDF5](https:\/\/en.wikipedia.org\/wiki\/Hierarchical_Data_Format) ([Python package](http:\/\/docs.h5py.org\/en\/latest\/quick.html)): Nice for matrices ([read &amp; write](https:\/\/stackoverflow.com\/a\/41586571\/562769))\r\n* XML: exists too \\*sigh\\* ([read](https:\/\/stackoverflow.com\/a\/1912483\/562769) &amp; [write](https:\/\/stackoverflow.com\/a\/3605831\/562769))\r\n\r\nFor your application, the following might be important:\r\n\r\n* Support by other programming languages\r\n* Reading \/ writing performance\r\n* Compactness (file size)\r\n\r\nSee also: [Comparison of data serialization formats](https:\/\/en.wikipedia.org\/wiki\/Comparison_of_data_serialization_formats)\r\n\r\nIn case you are rather looking for a way to make configuration files, you might want to read my short article [Configuration files in Python](https:\/\/martin-thoma.com\/configuration-files-in-python\/)","body":"<h2>Read &amp; Write YAML files with Python 2+3 (and unicode)<\/h2>\n<pre><code># -*- coding: utf-8 -*-\nimport yaml\nimport io\n\n# Define data\ndata = {\n    'a list': [\n        1, \n        42, \n        3.141, \n        1337, \n        'help', \n        u'\u20ac'\n    ],\n    'a string': 'bla',\n    'another dict': {\n        'foo': 'bar',\n        'key': 'value',\n        'the answer': 42\n    }\n}\n\n# Write YAML file\nwith io.open('data.yaml', 'w', encoding='utf8') as outfile:\n    yaml.dump(data, outfile, default_flow_style=False, allow_unicode=True)\n\n# Read YAML file\nwith open(&quot;data.yaml&quot;, 'r') as stream:\n    data_loaded = yaml.safe_load(stream)\n\nprint(data == data_loaded)\n<\/code><\/pre>\n<h2>Created YAML file<\/h2>\n<pre><code>a list:\n- 1\n- 42\n- 3.141\n- 1337\n- help\n- \u20ac\na string: bla\nanother dict:\n  foo: bar\n  key: value\n  the answer: 42\n<\/code><\/pre>\n<h2>Common file endings<\/h2>\n<p><code>.yml<\/code> and <code>.yaml<\/code><\/p>\n<h2>Alternatives<\/h2>\n<ul>\n<li>CSV: Super simple format (<a href=\"https:\/\/stackoverflow.com\/a\/41585079\/562769\">read &amp; write<\/a>)<\/li>\n<li>JSON: Nice for writing human-readable data; VERY commonly used (<a href=\"https:\/\/stackoverflow.com\/a\/37795053\/562769\">read &amp; write<\/a>)<\/li>\n<li>YAML: YAML is a superset of JSON, but easier to read (<a href=\"https:\/\/stackoverflow.com\/a\/42054860\/562769\">read &amp; write<\/a>, <a href=\"https:\/\/stackoverflow.com\/a\/1729545\/562769\">comparison of JSON and YAML<\/a>)<\/li>\n<li>pickle: A Python serialization format (<a href=\"https:\/\/stackoverflow.com\/a\/33245595\/562769\">read &amp; write<\/a>) \u26a0\ufe0f Using pickle with files from 3rd parties poses an uncontrollable arbitrary code execution risk.<\/li>\n<li><a href=\"http:\/\/msgpack.org\/\" rel=\"noreferrer\">MessagePack<\/a> (<a href=\"https:\/\/pypi.python.org\/pypi\/msgpack-python\" rel=\"noreferrer\">Python package<\/a>): More compact representation (<a href=\"https:\/\/stackoverflow.com\/q\/43442194\/562769\">read &amp; write<\/a>)<\/li>\n<li><a href=\"https:\/\/en.wikipedia.org\/wiki\/Hierarchical_Data_Format\" rel=\"noreferrer\">HDF5<\/a> (<a href=\"http:\/\/docs.h5py.org\/en\/latest\/quick.html\" rel=\"noreferrer\">Python package<\/a>): Nice for matrices (<a href=\"https:\/\/stackoverflow.com\/a\/41586571\/562769\">read &amp; write<\/a>)<\/li>\n<li>XML: exists too *sigh* (<a href=\"https:\/\/stackoverflow.com\/a\/1912483\/562769\">read<\/a> &amp; <a href=\"https:\/\/stackoverflow.com\/a\/3605831\/562769\">write<\/a>)<\/li>\n<\/ul>\n<p>For your application, the following might be important:<\/p>\n<ul>\n<li>Support by other programming languages<\/li>\n<li>Reading \/ writing performance<\/li>\n<li>Compactness (file size)<\/li>\n<\/ul>\n<p>See also: <a href=\"https:\/\/en.wikipedia.org\/wiki\/Comparison_of_data_serialization_formats\" rel=\"noreferrer\">Comparison of data serialization formats<\/a><\/p>\n<p>In case you are rather looking for a way to make configuration files, you might want to read my short article <a href=\"https:\/\/martin-thoma.com\/configuration-files-in-python\/\" rel=\"noreferrer\">Configuration files in Python<\/a><\/p>\n","community_owned_date":null},{"owner":{"account_id":97,"reputation":299475,"user_id":116,"user_type":"registered","accept_rate":93,"profile_image":"https:\/\/i.stack.imgur.com\/f6flX.jpg?s=256&g=1","display_name":"Mark Harrison","link":"https:\/\/stackoverflow.com\/users\/116\/mark-harrison"},"is_accepted":false,"score":224,"last_activity_date":1493974129,"last_edit_date":1493974129.0,"creation_date":1220214682,"answer_id":37081,"question_id":36932,"content_license":"CC BY-SA 3.0","body_markdown":"If you need the numeric values, here&#39;s the quickest way:\r\n\r\n    dog, cat, rabbit = range(3)\r\n\r\nIn Python 3.x you can also add a starred placeholder at the end, which will soak up all the remaining values of the range in case you don&#39;t mind wasting memory and cannot count:\r\n\r\n    dog, cat, rabbit, horse, *_ = range(100)","body":"<p>If you need the numeric values, here's the quickest way:<\/p>\n\n<pre><code>dog, cat, rabbit = range(3)\n<\/code><\/pre>\n\n<p>In Python 3.x you can also add a starred placeholder at the end, which will soak up all the remaining values of the range in case you don't mind wasting memory and cannot count:<\/p>\n\n<pre><code>dog, cat, rabbit, horse, *_ = range(100)\n<\/code><\/pre>\n","community_owned_date":1316309214.0},{"owner":{"account_id":13903,"reputation":393857,"user_id":28169,"user_type":"registered","accept_rate":88,"profile_image":"https:\/\/www.gravatar.com\/avatar\/ec9385dc533f1a6a93769077f852503e?s=256&d=identicon&r=PG","display_name":"unwind","link":"https:\/\/stackoverflow.com\/users\/28169\/unwind"},"is_accepted":false,"score":223,"last_activity_date":1611393582,"last_edit_date":1611393582.0,"creation_date":1224178330,"answer_id":209529,"question_id":209513,"content_license":"CC BY-SA 4.0","body_markdown":"`int(hexstring, 16)` does the trick, and works with and without the 0x prefix:\r\n\r\n    &gt;&gt;&gt; int(&quot;a&quot;, 16)\r\n    10\r\n    &gt;&gt;&gt; int(&quot;0xa&quot;, 16)\r\n    10\r\n","body":"<p><code>int(hexstring, 16)<\/code> does the trick, and works with and without the 0x prefix:<\/p>\n<pre><code>&gt;&gt;&gt; int(&quot;a&quot;, 16)\n10\n&gt;&gt;&gt; int(&quot;0xa&quot;, 16)\n10\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":23979,"reputation":16499,"user_id":60620,"user_type":"registered","accept_rate":87,"profile_image":"https:\/\/www.gravatar.com\/avatar\/a4c50597f47ad4cb6e6d945500e7eea9?s=256&d=identicon&r=PG","display_name":"dan-gph","link":"https:\/\/stackoverflow.com\/users\/60620\/dan-gph"},"is_accepted":false,"score":223,"last_activity_date":1528259355,"last_edit_date":1528259355.0,"creation_date":1236618887,"answer_id":627165,"question_id":626759,"content_license":"CC BY-SA 4.0","body_markdown":"If you went for a walk, you could note your coordinates at any instant in an `(x,y)` tuple.\r\n\r\nIf you wanted to record your journey, you could append your location every few seconds to a list.\r\n\r\nBut you couldn&#39;t do it the other way around.","body":"<p>If you went for a walk, you could note your coordinates at any instant in an <code>(x,y)<\/code> tuple.<\/p>\n\n<p>If you wanted to record your journey, you could append your location every few seconds to a list.<\/p>\n\n<p>But you couldn't do it the other way around.<\/p>\n","community_owned_date":null},{"owner":{"account_id":16696,"reputation":12081,"user_id":36656,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/6a29caa1a66ae5e3772ed976f6b63527?s=256&d=identicon&r=PG","display_name":"Adam Byrtek","link":"https:\/\/stackoverflow.com\/users\/36656\/adam-byrtek"},"is_accepted":false,"score":221,"last_activity_date":1620045983,"last_edit_date":1620045983.0,"creation_date":1287450712,"answer_id":3964690,"question_id":3964681,"content_license":"CC BY-SA 4.0","body_markdown":"Something like that should do the job\r\n\r\n    for root, dirs, files in os.walk(directory):\r\n        for file in files:\r\n            if file.endswith(&#39;.txt&#39;):\r\n                print(file)\r\n","body":"<p>Something like that should do the job<\/p>\n<pre><code>for root, dirs, files in os.walk(directory):\n    for file in files:\n        if file.endswith('.txt'):\n            print(file)\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":25014,"reputation":132779,"user_id":64004,"user_type":"registered","accept_rate":62,"profile_image":"https:\/\/www.gravatar.com\/avatar\/0ea88709c4b9bda3bc66c62237e12812?s=256&d=identicon&r=PG","display_name":"gahooa","link":"https:\/\/stackoverflow.com\/users\/64004\/gahooa"},"is_accepted":false,"score":215,"last_activity_date":1504717278,"last_edit_date":1504717278.0,"creation_date":1244602627,"answer_id":973492,"question_id":973473,"content_license":"CC BY-SA 3.0","body_markdown":"    import os\r\n\r\n    d = &#39;.&#39;\r\n    [os.path.join(d, o) for o in os.listdir(d) \r\n                        if os.path.isdir(os.path.join(d,o))]","body":"<pre><code>import os\n\nd = '.'\n[os.path.join(d, o) for o in os.listdir(d) \n                    if os.path.isdir(os.path.join(d,o))]\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":2288,"reputation":191265,"user_id":3171,"user_type":"registered","accept_rate":92,"profile_image":"https:\/\/www.gravatar.com\/avatar\/a780bab849bc39176f044f5effbba7da?s=256&d=identicon&r=PG","display_name":"David Webb","link":"https:\/\/stackoverflow.com\/users\/3171\/david-webb"},"is_accepted":false,"score":212,"last_activity_date":1273305723,"last_edit_date":null,"creation_date":1273305723,"answer_id":2793356,"question_id":2793324,"content_license":"CC BY-SA 2.5","body_markdown":"Usually Python will throw an Exception if you tell it to do something it can&#39;t so you&#39;ll have to do either:\r\n\r\n    if c in a:\r\n        a.remove(c)\r\n\r\nor:\r\n\r\n    try:\r\n        a.remove(c)\r\n    except ValueError:\r\n        pass\r\n\r\nAn Exception isn&#39;t necessarily a bad thing as long as it&#39;s one you&#39;re expecting and handle properly.","body":"<p>Usually Python will throw an Exception if you tell it to do something it can't so you'll have to do either:<\/p>\n\n<pre><code>if c in a:\n    a.remove(c)\n<\/code><\/pre>\n\n<p>or:<\/p>\n\n<pre><code>try:\n    a.remove(c)\nexcept ValueError:\n    pass\n<\/code><\/pre>\n\n<p>An Exception isn't necessarily a bad thing as long as it's one you're expecting and handle properly.<\/p>\n","community_owned_date":null},{"owner":{"account_id":34048,"reputation":861721,"user_id":95810,"user_type":"registered","accept_rate":80,"profile_image":"https:\/\/www.gravatar.com\/avatar\/e8d5fe90f1fe2148bf130cccd4dc311c?s=256&d=identicon&r=PG","display_name":"Alex Martelli","link":"https:\/\/stackoverflow.com\/users\/95810\/alex-martelli"},"is_accepted":false,"score":209,"last_activity_date":1670525282,"last_edit_date":1670525282.0,"creation_date":1261355424,"answer_id":1937629,"question_id":1937622,"content_license":"CC BY-SA 4.0","body_markdown":"There are several ways, although I do believe the one you mention (and dislike) is the most readable one.\r\n\r\n\r\n    &gt;&gt;&gt; import datetime\r\n    &gt;&gt;&gt; t=datetime.date.today()\r\n    &gt;&gt;&gt; datetime.datetime.fromordinal(t.toordinal())\r\n    datetime.datetime(2009, 12, 20, 0, 0)\r\n\r\n    &gt;&gt;&gt; datetime.datetime(t.year, t.month, t.day)\r\n    datetime.datetime(2009, 12, 20, 0, 0)\r\n\r\n    &gt;&gt;&gt; datetime.datetime(*t.timetuple()[:-4])\r\n    datetime.datetime(2009, 12, 20, 0, 0)\r\n\r\nand so forth -- but basically they all hinge on appropriately extracting info from the `date` object and ploughing it back into the suitable ctor or classfunction for `datetime`.\r\n","body":"<p>There are several ways, although I do believe the one you mention (and dislike) is the most readable one.<\/p>\n<pre><code>&gt;&gt;&gt; import datetime\n&gt;&gt;&gt; t=datetime.date.today()\n&gt;&gt;&gt; datetime.datetime.fromordinal(t.toordinal())\ndatetime.datetime(2009, 12, 20, 0, 0)\n\n&gt;&gt;&gt; datetime.datetime(t.year, t.month, t.day)\ndatetime.datetime(2009, 12, 20, 0, 0)\n\n&gt;&gt;&gt; datetime.datetime(*t.timetuple()[:-4])\ndatetime.datetime(2009, 12, 20, 0, 0)\n<\/code><\/pre>\n<p>and so forth -- but basically they all hinge on appropriately extracting info from the <code>date<\/code> object and ploughing it back into the suitable ctor or classfunction for <code>datetime<\/code>.<\/p>\n","community_owned_date":null},{"owner":{"account_id":420026,"reputation":95302,"user_id":797495,"user_type":"registered","accept_rate":69,"profile_image":"https:\/\/i.stack.imgur.com\/BKD7l.jpg?s=256&g=1","display_name":"Pedro Lobito","link":"https:\/\/stackoverflow.com\/users\/797495\/pedro-lobito"},"is_accepted":false,"score":208,"last_activity_date":1695376887,"last_edit_date":1695376887.0,"creation_date":1566726319,"answer_id":57644936,"question_id":2186525,"content_license":"CC BY-SA 4.0","body_markdown":"For python &gt;= [3.5][1] you can use `**`, `recursive=True`, i.e.:\r\n\r\n    import glob\r\n    for f in glob.glob(&#39;\/path\/**\/*.c&#39;, recursive=True):\r\n    \tprint(f)\r\n\r\n----------\r\n\r\n&gt; If recursive is `True` (default `False`), the pattern `**` **will match any files and zero\r\n&gt; or more `directories` and `subdirectories`**. If the pattern is followed by\r\n&gt; an `os.sep`, only directories and `subdirectories` match.\r\n\r\n----------\r\n\r\n[Python 3 Demo][2]\r\n\r\n\r\n  [1]: https:\/\/docs.python.org\/3.5\/library\/glob.html#glob.glob\r\n  [2]: https:\/\/trinket.io\/python3\/047fa19201","body":"<p>For python &gt;= <a href=\"https:\/\/docs.python.org\/3.5\/library\/glob.html#glob.glob\" rel=\"nofollow noreferrer\">3.5<\/a> you can use <code>**<\/code>, <code>recursive=True<\/code>, i.e.:<\/p>\n<pre><code>import glob\nfor f in glob.glob('\/path\/**\/*.c', recursive=True):\n    print(f)\n<\/code><\/pre>\n<hr \/>\n<blockquote>\n<p>If recursive is <code>True<\/code> (default <code>False<\/code>), the pattern <code>**<\/code> <strong>will match any files and zero\nor more <code>directories<\/code> and <code>subdirectories<\/code><\/strong>. If the pattern is followed by\nan <code>os.sep<\/code>, only directories and <code>subdirectories<\/code> match.<\/p>\n<\/blockquote>\n<hr \/>\n<p><a href=\"https:\/\/trinket.io\/python3\/047fa19201\" rel=\"nofollow noreferrer\">Python 3 Demo<\/a><\/p>\n","community_owned_date":null},{"owner":{"account_id":7040846,"reputation":147688,"user_id":5393381,"user_type":"registered","accept_rate":84,"profile_image":"https:\/\/www.gravatar.com\/avatar\/dc9b2bf1db7fa5d5e1444f1c15a8d9f7?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"MSeifert","link":"https:\/\/stackoverflow.com\/users\/5393381\/mseifert"},"is_accepted":false,"score":206,"last_activity_date":1692395321,"last_edit_date":1692395321.0,"creation_date":1493337755,"answer_id":43669828,"question_id":3964681,"content_license":"CC BY-SA 4.0","body_markdown":"You can simply use [`pathlib`](https:\/\/docs.python.org\/library\/pathlib.html#pathlib)s [`glob`](https:\/\/docs.python.org\/library\/pathlib.html#pathlib.Path.glob) &lt;sup&gt;1&lt;\/sup&gt;:\r\n\r\n    import pathlib\r\n\r\n    list(pathlib.Path(&#39;your_directory&#39;).glob(&#39;*.txt&#39;))\r\n\r\nor in a loop:\r\n\r\n    for txt_file in pathlib.Path(&#39;your_directory&#39;).glob(&#39;*.txt&#39;):\r\n        # do something with &quot;txt_file&quot;\r\n\r\nIf you want it recursive you can use `rglob(&#39;*.txt&#39;)`\r\n\r\n&gt; This is like calling Path.glob() with \u201c**\/\u201d added in front of the given relative pattern\r\n\r\n---\r\n\r\n&lt;sup&gt;1&lt;\/sup&gt;The `pathlib` module was included in the standard library in python 3.4. But you can install back-ports of that module even on older Python versions (i.e. using `conda` or `pip`): [`pathlib`](https:\/\/pypi.python.org\/pypi\/pathlib\/) and [`pathlib2`](https:\/\/pypi.python.org\/pypi\/pathlib2\/).","body":"<p>You can simply use <a href=\"https:\/\/docs.python.org\/library\/pathlib.html#pathlib\" rel=\"noreferrer\"><code>pathlib<\/code><\/a>s <a href=\"https:\/\/docs.python.org\/library\/pathlib.html#pathlib.Path.glob\" rel=\"noreferrer\"><code>glob<\/code><\/a> <sup>1<\/sup>:<\/p>\n<pre><code>import pathlib\n\nlist(pathlib.Path('your_directory').glob('*.txt'))\n<\/code><\/pre>\n<p>or in a loop:<\/p>\n<pre><code>for txt_file in pathlib.Path('your_directory').glob('*.txt'):\n    # do something with &quot;txt_file&quot;\n<\/code><\/pre>\n<p>If you want it recursive you can use <code>rglob('*.txt')<\/code><\/p>\n<blockquote>\n<p>This is like calling Path.glob() with \u201c**\/\u201d added in front of the given relative pattern<\/p>\n<\/blockquote>\n<hr \/>\n<p><sup>1<\/sup>The <code>pathlib<\/code> module was included in the standard library in python 3.4. But you can install back-ports of that module even on older Python versions (i.e. using <code>conda<\/code> or <code>pip<\/code>): <a href=\"https:\/\/pypi.python.org\/pypi\/pathlib\/\" rel=\"noreferrer\"><code>pathlib<\/code><\/a> and <a href=\"https:\/\/pypi.python.org\/pypi\/pathlib2\/\" rel=\"noreferrer\"><code>pathlib2<\/code><\/a>.<\/p>\n","community_owned_date":null},{"owner":{"account_id":10305,"reputation":95056,"user_id":19403,"user_type":"registered","accept_rate":59,"profile_image":"https:\/\/www.gravatar.com\/avatar\/7554c591e3cc374e8623378d3385e092?s=256&d=identicon&r=PG","display_name":"Robert Rossney","link":"https:\/\/stackoverflow.com\/users\/19403\/robert-rossney"},"is_accepted":false,"score":197,"last_activity_date":1640217169,"last_edit_date":1640217169.0,"creation_date":1233092006,"answer_id":485368,"question_id":483666,"content_license":"CC BY-SA 4.0","body_markdown":"If the values in `my_map` aren&#39;t unique:\r\n\r\nPython 3:\r\n\r\n    inv_map = {}\r\n    for k, v in my_map.items():\r\n        inv_map[v] = inv_map.get(v, []) + [k]\r\n\r\n\r\nPython 2:\r\n\r\n    inv_map = {}\r\n    for k, v in my_map.iteritems():\r\n        inv_map[v] = inv_map.get(v, []) + [k]\r\n","body":"<p>If the values in <code>my_map<\/code> aren't unique:<\/p>\n<p>Python 3:<\/p>\n<pre><code>inv_map = {}\nfor k, v in my_map.items():\n    inv_map[v] = inv_map.get(v, []) + [k]\n<\/code><\/pre>\n<p>Python 2:<\/p>\n<pre><code>inv_map = {}\nfor k, v in my_map.iteritems():\n    inv_map[v] = inv_map.get(v, []) + [k]\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":1329806,"reputation":14449,"user_id":1273938,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/00968e28dd06615700112fddcb2f92fa?s=256&d=identicon&r=PG","display_name":"LeoRochael","link":"https:\/\/stackoverflow.com\/users\/1273938\/leorochael"},"is_accepted":false,"score":196,"last_activity_date":1537692547,"last_edit_date":1537692547.0,"creation_date":1457373844,"answer_id":35850749,"question_id":19377969,"content_license":"CC BY-SA 4.0","body_markdown":"The method [`cat()` of the `.str` accessor](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.Series.str.cat.html#pandas.Series.str.cat) works really well for this:\r\n\r\n    &gt;&gt;&gt; import pandas as pd\r\n    &gt;&gt;&gt; df = pd.DataFrame([[&quot;2014&quot;, &quot;q1&quot;], \r\n    ...                    [&quot;2015&quot;, &quot;q3&quot;]],\r\n    ...                   columns=(&#39;Year&#39;, &#39;Quarter&#39;))\r\n    &gt;&gt;&gt; print(df)\r\n       Year Quarter\r\n    0  2014      q1\r\n    1  2015      q3\r\n    &gt;&gt;&gt; df[&#39;Period&#39;] = df.Year.str.cat(df.Quarter)\r\n    &gt;&gt;&gt; print(df)\r\n       Year Quarter  Period\r\n    0  2014      q1  2014q1\r\n    1  2015      q3  2015q3\r\n\r\n`cat()` even allows you to add a separator so, for example, suppose you only have integers for year and period, you can do this:\r\n\r\n    &gt;&gt;&gt; import pandas as pd\r\n    &gt;&gt;&gt; df = pd.DataFrame([[2014, 1],\r\n    ...                    [2015, 3]],\r\n    ...                   columns=(&#39;Year&#39;, &#39;Quarter&#39;))\r\n    &gt;&gt;&gt; print(df)\r\n       Year Quarter\r\n    0  2014       1\r\n    1  2015       3\r\n    &gt;&gt;&gt; df[&#39;Period&#39;] = df.Year.astype(str).str.cat(df.Quarter.astype(str), sep=&#39;q&#39;)\r\n    &gt;&gt;&gt; print(df)\r\n       Year Quarter  Period\r\n    0  2014       1  2014q1\r\n    1  2015       3  2015q3\r\n\r\nJoining multiple columns is just a matter of passing either a list of series or a dataframe containing all but the first column as a parameter to `str.cat()` invoked on the first column (Series):\r\n\r\n    &gt;&gt;&gt; df = pd.DataFrame(\r\n    ...     [[&#39;USA&#39;, &#39;Nevada&#39;, &#39;Las Vegas&#39;],\r\n    ...      [&#39;Brazil&#39;, &#39;Pernambuco&#39;, &#39;Recife&#39;]],\r\n    ...     columns=[&#39;Country&#39;, &#39;State&#39;, &#39;City&#39;],\r\n    ... )\r\n    &gt;&gt;&gt; df[&#39;AllTogether&#39;] = df[&#39;Country&#39;].str.cat(df[[&#39;State&#39;, &#39;City&#39;]], sep=&#39; - &#39;)\r\n    &gt;&gt;&gt; print(df)\r\n      Country       State       City                   AllTogether\r\n    0     USA      Nevada  Las Vegas      USA - Nevada - Las Vegas\r\n    1  Brazil  Pernambuco     Recife  Brazil - Pernambuco - Recife\r\n\r\nDo note that if your pandas dataframe\/series has null values, you need to include the parameter na_rep to replace the NaN values with a string, otherwise the combined column will default to NaN.","body":"<p>The method <a href=\"http:\/\/pandas.pydata.org\/pandas-docs\/stable\/generated\/pandas.Series.str.cat.html#pandas.Series.str.cat\" rel=\"noreferrer\"><code>cat()<\/code> of the <code>.str<\/code> accessor<\/a> works really well for this:<\/p>\n\n<pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; df = pd.DataFrame([[\"2014\", \"q1\"], \n...                    [\"2015\", \"q3\"]],\n...                   columns=('Year', 'Quarter'))\n&gt;&gt;&gt; print(df)\n   Year Quarter\n0  2014      q1\n1  2015      q3\n&gt;&gt;&gt; df['Period'] = df.Year.str.cat(df.Quarter)\n&gt;&gt;&gt; print(df)\n   Year Quarter  Period\n0  2014      q1  2014q1\n1  2015      q3  2015q3\n<\/code><\/pre>\n\n<p><code>cat()<\/code> even allows you to add a separator so, for example, suppose you only have integers for year and period, you can do this:<\/p>\n\n<pre><code>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; df = pd.DataFrame([[2014, 1],\n...                    [2015, 3]],\n...                   columns=('Year', 'Quarter'))\n&gt;&gt;&gt; print(df)\n   Year Quarter\n0  2014       1\n1  2015       3\n&gt;&gt;&gt; df['Period'] = df.Year.astype(str).str.cat(df.Quarter.astype(str), sep='q')\n&gt;&gt;&gt; print(df)\n   Year Quarter  Period\n0  2014       1  2014q1\n1  2015       3  2015q3\n<\/code><\/pre>\n\n<p>Joining multiple columns is just a matter of passing either a list of series or a dataframe containing all but the first column as a parameter to <code>str.cat()<\/code> invoked on the first column (Series):<\/p>\n\n<pre><code>&gt;&gt;&gt; df = pd.DataFrame(\n...     [['USA', 'Nevada', 'Las Vegas'],\n...      ['Brazil', 'Pernambuco', 'Recife']],\n...     columns=['Country', 'State', 'City'],\n... )\n&gt;&gt;&gt; df['AllTogether'] = df['Country'].str.cat(df[['State', 'City']], sep=' - ')\n&gt;&gt;&gt; print(df)\n  Country       State       City                   AllTogether\n0     USA      Nevada  Las Vegas      USA - Nevada - Las Vegas\n1  Brazil  Pernambuco     Recife  Brazil - Pernambuco - Recife\n<\/code><\/pre>\n\n<p>Do note that if your pandas dataframe\/series has null values, you need to include the parameter na_rep to replace the NaN values with a string, otherwise the combined column will default to NaN.<\/p>\n","community_owned_date":null},{"owner":{"account_id":1380009,"reputation":16755,"user_id":1313233,"user_type":"registered","accept_rate":82,"profile_image":"https:\/\/i.stack.imgur.com\/hBeXC.png?s=256&g=1","display_name":"rkachach","link":"https:\/\/stackoverflow.com\/users\/1313233\/rkachach"},"is_accepted":false,"score":196,"last_activity_date":1612773831,"last_edit_date":1612773831.0,"creation_date":1463059380,"answer_id":37188257,"question_id":3682748,"content_license":"CC BY-SA 4.0","body_markdown":"The most voted answer suggests using fromtimestamp which is error prone since it uses the local timezone. To avoid issues a better approach is to use UTC:\r\n\r\n    datetime.datetime.utcfromtimestamp(posix_time).strftime(&#39;%Y-%m-%dT%H:%M:%SZ&#39;)\r\n\r\nWhere posix_time is the Posix epoch time you want to convert","body":"<p>The most voted answer suggests using fromtimestamp which is error prone since it uses the local timezone. To avoid issues a better approach is to use UTC:<\/p>\n<pre><code>datetime.datetime.utcfromtimestamp(posix_time).strftime('%Y-%m-%dT%H:%M:%SZ')\n<\/code><\/pre>\n<p>Where posix_time is the Posix epoch time you want to convert<\/p>\n","community_owned_date":null},{"owner":{"account_id":1264267,"reputation":34433,"user_id":1221924,"user_type":"registered","accept_rate":80,"profile_image":"https:\/\/www.gravatar.com\/avatar\/f54c6896f32653516c994bfcb12b704a?s=256&d=identicon&r=PG","display_name":"Dan Allan","link":"https:\/\/stackoverflow.com\/users\/1221924\/dan-allan"},"is_accepted":false,"score":195,"last_activity_date":1488104743,"last_edit_date":1488104743.0,"creation_date":1380664110,"answer_id":19126566,"question_id":19124601,"content_license":"CC BY-SA 3.0","body_markdown":"Sure, if this comes up a lot, make a function like this one. You can even configure it to load every time you start IPython: https:\/\/ipython.org\/ipython-doc\/1\/config\/overview.html\r\n\r\n    def print_full(x):\r\n        pd.set_option(&#39;display.max_rows&#39;, len(x))\r\n        print(x)\r\n        pd.reset_option(&#39;display.max_rows&#39;)\r\n\r\nAs for coloring, getting too elaborate with colors sounds counterproductive to me, but I agree something like [bootstrap&#39;s ``.table-striped``](http:\/\/getbootstrap.com\/2.3.2\/base-css.html#tables) would be nice. You could always [create an issue](https:\/\/github.com\/pydata\/pandas\/issues) to suggest this feature.","body":"<p>Sure, if this comes up a lot, make a function like this one. You can even configure it to load every time you start IPython: <a href=\"https:\/\/ipython.org\/ipython-doc\/1\/config\/overview.html\" rel=\"noreferrer\">https:\/\/ipython.org\/ipython-doc\/1\/config\/overview.html<\/a><\/p>\n\n<pre><code>def print_full(x):\n    pd.set_option('display.max_rows', len(x))\n    print(x)\n    pd.reset_option('display.max_rows')\n<\/code><\/pre>\n\n<p>As for coloring, getting too elaborate with colors sounds counterproductive to me, but I agree something like <a href=\"http:\/\/getbootstrap.com\/2.3.2\/base-css.html#tables\" rel=\"noreferrer\">bootstrap's <code>.table-striped<\/code><\/a> would be nice. You could always <a href=\"https:\/\/github.com\/pydata\/pandas\/issues\" rel=\"noreferrer\">create an issue<\/a> to suggest this feature.<\/p>\n","community_owned_date":null},{"owner":{"account_id":4783548,"reputation":2882,"user_id":3864679,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/5TVzp.jpg?s=256&g=1","display_name":"arispen","link":"https:\/\/stackoverflow.com\/users\/3864679\/arispen"},"is_accepted":false,"score":184,"last_activity_date":1623010513,"last_edit_date":1623010513.0,"creation_date":1532614251,"answer_id":51540918,"question_id":11707586,"content_license":"CC BY-SA 4.0","body_markdown":"Only using these three lines worked for me:\r\n\r\n    pd.set_option(&#39;display.max_columns&#39;, None)\r\n    pd.set_option(&#39;display.expand_frame_repr&#39;, False)\r\n    pd.set_option(&#39;max_colwidth&#39;, -1)\r\n\r\nIt was for [Anaconda][1], Python 3.6.5, Pandas 0.23.0, and Visual Studio Code 1.26.\r\n\r\n  [1]: https:\/\/en.wikipedia.org\/wiki\/Anaconda_(Python_distribution)\r\n","body":"<p>Only using these three lines worked for me:<\/p>\n<pre><code>pd.set_option('display.max_columns', None)\npd.set_option('display.expand_frame_repr', False)\npd.set_option('max_colwidth', -1)\n<\/code><\/pre>\n<p>It was for <a href=\"https:\/\/en.wikipedia.org\/wiki\/Anaconda_(Python_distribution)\" rel=\"noreferrer\">Anaconda<\/a>, Python 3.6.5, Pandas 0.23.0, and Visual Studio Code 1.26.<\/p>\n","community_owned_date":null},{"owner":{"account_id":1885059,"reputation":2018,"user_id":1952047,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/ff802135d161b3c16a669c28a3bb7239?s=256&d=identicon&r=PG","display_name":"nadrimajstor","link":"https:\/\/stackoverflow.com\/users\/1952047\/nadrimajstor"},"is_accepted":false,"score":183,"last_activity_date":1624036343,"last_edit_date":1624036343.0,"creation_date":1377559072,"answer_id":18454568,"question_id":240178,"content_license":"CC BY-SA 4.0","body_markdown":"    size = 3\r\n    matrix_surprise = [[0] * size] * size\r\n    matrix = [[0]*size for _ in range(size)]\r\n\r\n[Live visualization][1] using Python Tutor:\r\n\r\n[![Frames and Objects][2]][2]\r\n\r\n\r\n  [1]: http:\/\/pythontutor.com\/visualize.html#code=size%20%3D%203%0Amatrix_surprise%20%3D%20%5B%5B0%5D%20*%20size%5D%20*%20size%0Amatrix%20%3D%20%5B%5B0%5D*size%20for%20_%20in%20range%28size%29%5D&amp;cumulative=false&amp;curInstr=9&amp;heapPrimitives=false&amp;mode=display&amp;origin=opt-frontend.js&amp;py=3&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false\r\n  [2]: https:\/\/i.stack.imgur.com\/AE8xf.png","body":"<pre><code>size = 3\nmatrix_surprise = [[0] * size] * size\nmatrix = [[0]*size for _ in range(size)]\n<\/code><\/pre>\n<p><a href=\"http:\/\/pythontutor.com\/visualize.html#code=size%20%3D%203%0Amatrix_surprise%20%3D%20%5B%5B0%5D%20*%20size%5D%20*%20size%0Amatrix%20%3D%20%5B%5B0%5D*size%20for%20_%20in%20range%28size%29%5D&amp;cumulative=false&amp;curInstr=9&amp;heapPrimitives=false&amp;mode=display&amp;origin=opt-frontend.js&amp;py=3&amp;rawInputLstJSON=%5B%5D&amp;textReferences=false\" rel=\"noreferrer\">Live visualization<\/a> using Python Tutor:<\/p>\n<p><a href=\"https:\/\/i.stack.imgur.com\/AE8xf.png\" rel=\"noreferrer\"><img src=\"https:\/\/i.stack.imgur.com\/AE8xf.png\" alt=\"Frames and Objects\" \/><\/a><\/p>\n","community_owned_date":null},{"owner":{"account_id":258754,"reputation":379785,"user_id":541136,"user_type":"moderator","accept_rate":96,"profile_image":"https:\/\/i.stack.imgur.com\/wftMn.jpg?s=256&g=1","display_name":"Russia Must Remove Putin","link":"https:\/\/stackoverflow.com\/users\/541136\/russia-must-remove-putin"},"is_accepted":false,"score":182,"last_activity_date":1649843235,"last_edit_date":1649843235.0,"creation_date":1451796881,"answer_id":34573457,"question_id":2970608,"content_license":"CC BY-SA 4.0","body_markdown":"&gt; ## What are named tuples?\r\n\r\nA named tuple is a tuple.\r\n\r\nIt does everything a tuple can.\r\n\r\nBut it&#39;s more than just a tuple. \r\n\r\nIt&#39;s a specific subclass of a tuple that is programmatically created to your specification, with named fields and a fixed length. \r\n\r\nThis, for example, creates a subclass of tuple, and aside from being of fixed length (in this case, three), it can be used everywhere a tuple is used without breaking. This is known as Liskov substitutability.\r\n\r\n*[New in Python 3.6][1]*, we can use a class definition with [`typing.NamedTuple`][typing.NamedTuple] to create a namedtuple:\r\n\r\n```python\r\nfrom typing import NamedTuple\r\n\r\nclass ANamedTuple(NamedTuple):\r\n    &quot;&quot;&quot;a docstring&quot;&quot;&quot;\r\n    foo: int\r\n    bar: str\r\n    baz: list\r\n```\r\n\r\nThe above is the same as [`collections.namedtuple`][collections.namedtuple], except the above additionally has type annotations and a docstring. The below is available in Python 2+:\r\n\r\n    &gt;&gt;&gt; from collections import namedtuple\r\n    &gt;&gt;&gt; class_name = &#39;ANamedTuple&#39;\r\n    &gt;&gt;&gt; fields = &#39;foo bar baz&#39;\r\n    &gt;&gt;&gt; ANamedTuple = namedtuple(class_name, fields)\r\n\r\nThis instantiates it:\r\n\r\n    &gt;&gt;&gt; ant = ANamedTuple(1, &#39;bar&#39;, [])\r\n\r\nWe can inspect it and use its attributes:\r\n\r\n    &gt;&gt;&gt; ant\r\n    ANamedTuple(foo=1, bar=&#39;bar&#39;, baz=[])\r\n    &gt;&gt;&gt; ant.foo\r\n    1\r\n    &gt;&gt;&gt; ant.bar\r\n    &#39;bar&#39;\r\n    &gt;&gt;&gt; ant.baz.append(&#39;anything&#39;)\r\n    &gt;&gt;&gt; ant.baz\r\n    [&#39;anything&#39;]\r\n\r\n\r\n\r\n## Deeper explanation\r\n\r\nTo understand named tuples, you first need to know what a tuple is. A tuple is essentially an immutable (can&#39;t be changed in-place in memory) list.\r\n\r\nHere&#39;s how you might use a regular tuple:\r\n\r\n\r\n    &gt;&gt;&gt; student_tuple = &#39;Lisa&#39;, &#39;Simpson&#39;, &#39;A&#39;\r\n    &gt;&gt;&gt; student_tuple\r\n    (&#39;Lisa&#39;, &#39;Simpson&#39;, &#39;A&#39;)\r\n    &gt;&gt;&gt; student_tuple[0]\r\n    &#39;Lisa&#39;\r\n    &gt;&gt;&gt; student_tuple[1]\r\n    &#39;Simpson&#39;\r\n    &gt;&gt;&gt; student_tuple[2]\r\n    &#39;A&#39;\r\n\r\nYou can expand a tuple with iterable unpacking:\r\n\r\n    &gt;&gt;&gt; first, last, grade = student_tuple\r\n    &gt;&gt;&gt; first\r\n    &#39;Lisa&#39;\r\n    &gt;&gt;&gt; last\r\n    &#39;Simpson&#39;\r\n    &gt;&gt;&gt; grade\r\n    &#39;A&#39;\r\n\r\nNamed tuples are tuples that allow their elements to be accessed by name instead of just index! \r\n\r\nYou make a namedtuple like this:\r\n\r\n    &gt;&gt;&gt; from collections import namedtuple\r\n    &gt;&gt;&gt; Student = namedtuple(&#39;Student&#39;, [&#39;first&#39;, &#39;last&#39;, &#39;grade&#39;])\r\n\r\nYou can also use a single string with the names separated by spaces, a slightly more readable use of the API:\r\n\r\n    &gt;&gt;&gt; Student = namedtuple(&#39;Student&#39;, &#39;first last grade&#39;)\r\n\r\n&gt; ## How to use them?\r\n\r\nYou can do everything tuples can do (see above) as well as do the following:\r\n\r\n    &gt;&gt;&gt; named_student_tuple = Student(&#39;Lisa&#39;, &#39;Simpson&#39;, &#39;A&#39;)\r\n    &gt;&gt;&gt; named_student_tuple.first\r\n    &#39;Lisa&#39;\r\n    &gt;&gt;&gt; named_student_tuple.last\r\n    &#39;Simpson&#39;\r\n    &gt;&gt;&gt; named_student_tuple.grade\r\n    &#39;A&#39;\r\n    &gt;&gt;&gt; named_student_tuple._asdict()\r\n    OrderedDict([(&#39;first&#39;, &#39;Lisa&#39;), (&#39;last&#39;, &#39;Simpson&#39;), (&#39;grade&#39;, &#39;A&#39;)])\r\n    &gt;&gt;&gt; vars(named_student_tuple)\r\n    OrderedDict([(&#39;first&#39;, &#39;Lisa&#39;), (&#39;last&#39;, &#39;Simpson&#39;), (&#39;grade&#39;, &#39;A&#39;)])\r\n    &gt;&gt;&gt; new_named_student_tuple = named_student_tuple._replace(first=&#39;Bart&#39;, grade=&#39;C&#39;)\r\n    &gt;&gt;&gt; new_named_student_tuple\r\n    Student(first=&#39;Bart&#39;, last=&#39;Simpson&#39;, grade=&#39;C&#39;)\r\n\r\nA commenter asked:\r\n\r\n&gt; In a large script or programme, where does one usually define a named tuple?\r\n\r\nThe types you create with `namedtuple` are basically classes you can create with easy shorthand. Treat them like classes. Define them on the module level, so that pickle and other users can find them.\r\n\r\nThe working example, on the global module level:\r\n\r\n    &gt;&gt;&gt; from collections import namedtuple\r\n    &gt;&gt;&gt; NT = namedtuple(&#39;NT&#39;, &#39;foo bar&#39;)\r\n    &gt;&gt;&gt; nt = NT(&#39;foo&#39;, &#39;bar&#39;)\r\n    &gt;&gt;&gt; import pickle\r\n    &gt;&gt;&gt; pickle.loads(pickle.dumps(nt))\r\n    NT(foo=&#39;foo&#39;, bar=&#39;bar&#39;)\r\n    \r\nAnd this demonstrates the failure to lookup the definition:\r\n    \r\n    &gt;&gt;&gt; def foo():\r\n    ...     LocalNT = namedtuple(&#39;LocalNT&#39;, &#39;foo bar&#39;)\r\n    ...     return LocalNT(&#39;foo&#39;, &#39;bar&#39;)\r\n    ... \r\n    &gt;&gt;&gt; pickle.loads(pickle.dumps(foo()))\r\n    Traceback (most recent call last):\r\n      File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\r\n    _pickle.PicklingError: Can&#39;t pickle &lt;class &#39;__main__.LocalNT&#39;&gt;: attribute lookup LocalNT on __main__ failed\r\n\r\n\r\n&gt; ## Why\/when should I use named tuples instead of normal tuples?\r\n\r\nUse them when it improves your code to have the semantics of tuple elements expressed in your code. \r\n\r\nYou can use them instead of an object if you would otherwise use an object with unchanging data attributes and no functionality. \r\n\r\nYou can also [subclass them to add functionality, for example][2]:\r\n\r\n    class Point(namedtuple(&#39;Point&#39;, &#39;x y&#39;)):\r\n        &quot;&quot;&quot;adding functionality to a named tuple&quot;&quot;&quot;\r\n            __slots__ = ()\r\n            @property\r\n            def hypot(self):\r\n                return (self.x ** 2 + self.y ** 2) ** 0.5\r\n            def __str__(self):\r\n                return &#39;Point: x=%6.3f  y=%6.3f  hypot=%6.3f&#39; % (self.x, self.y, self.hypot)\r\n\r\n&gt; ## Why\/when should I use normal tuples instead of named tuples?\r\n\r\nIt would probably be a regression to switch from using named tuples to tuples. The upfront design decision centers around whether the cost from the extra code involved is worth the improved readability when the tuple is used. \r\n\r\nThere is no extra memory used by named tuples versus tuples. \r\n\r\n&gt; ## Is there any kind of &quot;named list&quot; (a mutable version of the named tuple)?\r\n\r\nYou&#39;re looking for either a slotted object that implements all of the functionality of a statically sized list or a subclassed list that works like a named tuple (and that somehow blocks the list from changing in size.) \r\n\r\nA now expanded, and perhaps even Liskov substitutable, example of the first:\r\n\r\n    from collections import Sequence\r\n\r\n    class MutableTuple(Sequence): \r\n        &quot;&quot;&quot;Abstract Base Class for objects that work like mutable\r\n        namedtuples. Subclass and define your named fields with \r\n        __slots__ and away you go.\r\n        &quot;&quot;&quot;\r\n        __slots__ = ()\r\n        def __init__(self, *args):\r\n            for slot, arg in zip(self.__slots__, args):\r\n                setattr(self, slot, arg)\r\n        def __repr__(self):\r\n            return type(self).__name__ + repr(tuple(self))\r\n        # more direct __iter__ than Sequence&#39;s\r\n        def __iter__(self): \r\n            for name in self.__slots__:\r\n                yield getattr(self, name)\r\n        # Sequence requires __getitem__ &amp; __len__:\r\n        def __getitem__(self, index):\r\n            return getattr(self, self.__slots__[index])\r\n        def __len__(self):\r\n            return len(self.__slots__)\r\n\r\nAnd to use, just subclass and define `__slots__`:\r\n\r\n\r\n    class Student(MutableTuple):\r\n        __slots__ = &#39;first&#39;, &#39;last&#39;, &#39;grade&#39; # customize \r\n\r\n\r\n    &gt;&gt;&gt; student = Student(&#39;Lisa&#39;, &#39;Simpson&#39;, &#39;A&#39;)\r\n    &gt;&gt;&gt; student\r\n    Student(&#39;Lisa&#39;, &#39;Simpson&#39;, &#39;A&#39;)\r\n    &gt;&gt;&gt; first, last, grade = student\r\n    &gt;&gt;&gt; first\r\n    &#39;Lisa&#39;\r\n    &gt;&gt;&gt; last\r\n    &#39;Simpson&#39;\r\n    &gt;&gt;&gt; grade\r\n    &#39;A&#39;\r\n    &gt;&gt;&gt; student[0]\r\n    &#39;Lisa&#39;\r\n    &gt;&gt;&gt; student[2]\r\n    &#39;A&#39;\r\n    &gt;&gt;&gt; len(student)\r\n    3\r\n    &gt;&gt;&gt; &#39;Lisa&#39; in student\r\n    True\r\n    &gt;&gt;&gt; &#39;Bart&#39; in student\r\n    False\r\n    &gt;&gt;&gt; student.first = &#39;Bart&#39;\r\n    &gt;&gt;&gt; for i in student: print(i)\r\n    ... \r\n    Bart\r\n    Simpson\r\n    A\r\n\r\n\r\n  [1]: https:\/\/docs.python.org\/3\/library\/typing.html#typing.NamedTuple\r\n  [2]: https:\/\/docs.python.org\/2\/library\/collections.html#namedtuple-factory-function-for-tuples-with-named-fields\r\n  [typing.NamedTuple]: https:\/\/docs.python.org\/3\/library\/typing.html#typing.NamedTuple\r\n  [collections.namedtuple]: https:\/\/docs.python.org\/3\/library\/collections.html#collections.namedtuple","body":"<blockquote>\n<h2>What are named tuples?<\/h2>\n<\/blockquote>\n<p>A named tuple is a tuple.<\/p>\n<p>It does everything a tuple can.<\/p>\n<p>But it's more than just a tuple.<\/p>\n<p>It's a specific subclass of a tuple that is programmatically created to your specification, with named fields and a fixed length.<\/p>\n<p>This, for example, creates a subclass of tuple, and aside from being of fixed length (in this case, three), it can be used everywhere a tuple is used without breaking. This is known as Liskov substitutability.<\/p>\n<p><em><a href=\"https:\/\/docs.python.org\/3\/library\/typing.html#typing.NamedTuple\" rel=\"noreferrer\">New in Python 3.6<\/a><\/em>, we can use a class definition with <a href=\"https:\/\/docs.python.org\/3\/library\/typing.html#typing.NamedTuple\" rel=\"noreferrer\"><code>typing.NamedTuple<\/code><\/a> to create a namedtuple:<\/p>\n<pre class=\"lang-py prettyprint-override\"><code>from typing import NamedTuple\n\nclass ANamedTuple(NamedTuple):\n    &quot;&quot;&quot;a docstring&quot;&quot;&quot;\n    foo: int\n    bar: str\n    baz: list\n<\/code><\/pre>\n<p>The above is the same as <a href=\"https:\/\/docs.python.org\/3\/library\/collections.html#collections.namedtuple\" rel=\"noreferrer\"><code>collections.namedtuple<\/code><\/a>, except the above additionally has type annotations and a docstring. The below is available in Python 2+:<\/p>\n<pre><code>&gt;&gt;&gt; from collections import namedtuple\n&gt;&gt;&gt; class_name = 'ANamedTuple'\n&gt;&gt;&gt; fields = 'foo bar baz'\n&gt;&gt;&gt; ANamedTuple = namedtuple(class_name, fields)\n<\/code><\/pre>\n<p>This instantiates it:<\/p>\n<pre><code>&gt;&gt;&gt; ant = ANamedTuple(1, 'bar', [])\n<\/code><\/pre>\n<p>We can inspect it and use its attributes:<\/p>\n<pre><code>&gt;&gt;&gt; ant\nANamedTuple(foo=1, bar='bar', baz=[])\n&gt;&gt;&gt; ant.foo\n1\n&gt;&gt;&gt; ant.bar\n'bar'\n&gt;&gt;&gt; ant.baz.append('anything')\n&gt;&gt;&gt; ant.baz\n['anything']\n<\/code><\/pre>\n<h2>Deeper explanation<\/h2>\n<p>To understand named tuples, you first need to know what a tuple is. A tuple is essentially an immutable (can't be changed in-place in memory) list.<\/p>\n<p>Here's how you might use a regular tuple:<\/p>\n<pre><code>&gt;&gt;&gt; student_tuple = 'Lisa', 'Simpson', 'A'\n&gt;&gt;&gt; student_tuple\n('Lisa', 'Simpson', 'A')\n&gt;&gt;&gt; student_tuple[0]\n'Lisa'\n&gt;&gt;&gt; student_tuple[1]\n'Simpson'\n&gt;&gt;&gt; student_tuple[2]\n'A'\n<\/code><\/pre>\n<p>You can expand a tuple with iterable unpacking:<\/p>\n<pre><code>&gt;&gt;&gt; first, last, grade = student_tuple\n&gt;&gt;&gt; first\n'Lisa'\n&gt;&gt;&gt; last\n'Simpson'\n&gt;&gt;&gt; grade\n'A'\n<\/code><\/pre>\n<p>Named tuples are tuples that allow their elements to be accessed by name instead of just index!<\/p>\n<p>You make a namedtuple like this:<\/p>\n<pre><code>&gt;&gt;&gt; from collections import namedtuple\n&gt;&gt;&gt; Student = namedtuple('Student', ['first', 'last', 'grade'])\n<\/code><\/pre>\n<p>You can also use a single string with the names separated by spaces, a slightly more readable use of the API:<\/p>\n<pre><code>&gt;&gt;&gt; Student = namedtuple('Student', 'first last grade')\n<\/code><\/pre>\n<blockquote>\n<h2>How to use them?<\/h2>\n<\/blockquote>\n<p>You can do everything tuples can do (see above) as well as do the following:<\/p>\n<pre><code>&gt;&gt;&gt; named_student_tuple = Student('Lisa', 'Simpson', 'A')\n&gt;&gt;&gt; named_student_tuple.first\n'Lisa'\n&gt;&gt;&gt; named_student_tuple.last\n'Simpson'\n&gt;&gt;&gt; named_student_tuple.grade\n'A'\n&gt;&gt;&gt; named_student_tuple._asdict()\nOrderedDict([('first', 'Lisa'), ('last', 'Simpson'), ('grade', 'A')])\n&gt;&gt;&gt; vars(named_student_tuple)\nOrderedDict([('first', 'Lisa'), ('last', 'Simpson'), ('grade', 'A')])\n&gt;&gt;&gt; new_named_student_tuple = named_student_tuple._replace(first='Bart', grade='C')\n&gt;&gt;&gt; new_named_student_tuple\nStudent(first='Bart', last='Simpson', grade='C')\n<\/code><\/pre>\n<p>A commenter asked:<\/p>\n<blockquote>\n<p>In a large script or programme, where does one usually define a named tuple?<\/p>\n<\/blockquote>\n<p>The types you create with <code>namedtuple<\/code> are basically classes you can create with easy shorthand. Treat them like classes. Define them on the module level, so that pickle and other users can find them.<\/p>\n<p>The working example, on the global module level:<\/p>\n<pre><code>&gt;&gt;&gt; from collections import namedtuple\n&gt;&gt;&gt; NT = namedtuple('NT', 'foo bar')\n&gt;&gt;&gt; nt = NT('foo', 'bar')\n&gt;&gt;&gt; import pickle\n&gt;&gt;&gt; pickle.loads(pickle.dumps(nt))\nNT(foo='foo', bar='bar')\n<\/code><\/pre>\n<p>And this demonstrates the failure to lookup the definition:<\/p>\n<pre><code>&gt;&gt;&gt; def foo():\n...     LocalNT = namedtuple('LocalNT', 'foo bar')\n...     return LocalNT('foo', 'bar')\n... \n&gt;&gt;&gt; pickle.loads(pickle.dumps(foo()))\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\n_pickle.PicklingError: Can't pickle &lt;class '__main__.LocalNT'&gt;: attribute lookup LocalNT on __main__ failed\n<\/code><\/pre>\n<blockquote>\n<h2>Why\/when should I use named tuples instead of normal tuples?<\/h2>\n<\/blockquote>\n<p>Use them when it improves your code to have the semantics of tuple elements expressed in your code.<\/p>\n<p>You can use them instead of an object if you would otherwise use an object with unchanging data attributes and no functionality.<\/p>\n<p>You can also <a href=\"https:\/\/docs.python.org\/2\/library\/collections.html#namedtuple-factory-function-for-tuples-with-named-fields\" rel=\"noreferrer\">subclass them to add functionality, for example<\/a>:<\/p>\n<pre><code>class Point(namedtuple('Point', 'x y')):\n    &quot;&quot;&quot;adding functionality to a named tuple&quot;&quot;&quot;\n        __slots__ = ()\n        @property\n        def hypot(self):\n            return (self.x ** 2 + self.y ** 2) ** 0.5\n        def __str__(self):\n            return 'Point: x=%6.3f  y=%6.3f  hypot=%6.3f' % (self.x, self.y, self.hypot)\n<\/code><\/pre>\n<blockquote>\n<h2>Why\/when should I use normal tuples instead of named tuples?<\/h2>\n<\/blockquote>\n<p>It would probably be a regression to switch from using named tuples to tuples. The upfront design decision centers around whether the cost from the extra code involved is worth the improved readability when the tuple is used.<\/p>\n<p>There is no extra memory used by named tuples versus tuples.<\/p>\n<blockquote>\n<h2>Is there any kind of &quot;named list&quot; (a mutable version of the named tuple)?<\/h2>\n<\/blockquote>\n<p>You're looking for either a slotted object that implements all of the functionality of a statically sized list or a subclassed list that works like a named tuple (and that somehow blocks the list from changing in size.)<\/p>\n<p>A now expanded, and perhaps even Liskov substitutable, example of the first:<\/p>\n<pre><code>from collections import Sequence\n\nclass MutableTuple(Sequence): \n    &quot;&quot;&quot;Abstract Base Class for objects that work like mutable\n    namedtuples. Subclass and define your named fields with \n    __slots__ and away you go.\n    &quot;&quot;&quot;\n    __slots__ = ()\n    def __init__(self, *args):\n        for slot, arg in zip(self.__slots__, args):\n            setattr(self, slot, arg)\n    def __repr__(self):\n        return type(self).__name__ + repr(tuple(self))\n    # more direct __iter__ than Sequence's\n    def __iter__(self): \n        for name in self.__slots__:\n            yield getattr(self, name)\n    # Sequence requires __getitem__ &amp; __len__:\n    def __getitem__(self, index):\n        return getattr(self, self.__slots__[index])\n    def __len__(self):\n        return len(self.__slots__)\n<\/code><\/pre>\n<p>And to use, just subclass and define <code>__slots__<\/code>:<\/p>\n<pre><code>class Student(MutableTuple):\n    __slots__ = 'first', 'last', 'grade' # customize \n\n\n&gt;&gt;&gt; student = Student('Lisa', 'Simpson', 'A')\n&gt;&gt;&gt; student\nStudent('Lisa', 'Simpson', 'A')\n&gt;&gt;&gt; first, last, grade = student\n&gt;&gt;&gt; first\n'Lisa'\n&gt;&gt;&gt; last\n'Simpson'\n&gt;&gt;&gt; grade\n'A'\n&gt;&gt;&gt; student[0]\n'Lisa'\n&gt;&gt;&gt; student[2]\n'A'\n&gt;&gt;&gt; len(student)\n3\n&gt;&gt;&gt; 'Lisa' in student\nTrue\n&gt;&gt;&gt; 'Bart' in student\nFalse\n&gt;&gt;&gt; student.first = 'Bart'\n&gt;&gt;&gt; for i in student: print(i)\n... \nBart\nSimpson\nA\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":3240363,"reputation":4822,"user_id":2733555,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/ef1f303b583b22b6b7d48203da1e4cb7?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"Jaakko","link":"https:\/\/stackoverflow.com\/users\/2733555\/jaakko"},"is_accepted":false,"score":182,"last_activity_date":1651450371,"last_edit_date":1651450371.0,"creation_date":1507637746,"answer_id":46666538,"question_id":20101834,"content_license":"CC BY-SA 4.0","body_markdown":"Instructions to install from private repo using **ssh credentials**:\r\n\r\n    $ pip install git+ssh:\/\/git@github.com\/myuser\/foo.git@my_version\r\n\r\nTo install a package from a subdirectory, say `stackoverflow`\r\n\r\n    $ pip install git+ssh:\/\/git@github.com\/myuser\/foo.git@my_version#subdirectory=stackoverflow\r\n\r\nhttps:\/\/pip.pypa.io\/en\/stable\/topics\/vcs-support\/\r\n\r\n","body":"<p>Instructions to install from private repo using <strong>ssh credentials<\/strong>:<\/p>\n<pre><code>$ pip install git+ssh:\/\/git@github.com\/myuser\/foo.git@my_version\n<\/code><\/pre>\n<p>To install a package from a subdirectory, say <code>stackoverflow<\/code><\/p>\n<pre><code>$ pip install git+ssh:\/\/git@github.com\/myuser\/foo.git@my_version#subdirectory=stackoverflow\n<\/code><\/pre>\n<p><a href=\"https:\/\/pip.pypa.io\/en\/stable\/topics\/vcs-support\/\" rel=\"noreferrer\">https:\/\/pip.pypa.io\/en\/stable\/topics\/vcs-support\/<\/a><\/p>\n","community_owned_date":null},{"owner":{"account_id":4062288,"reputation":3615,"user_id":3338479,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/6rBMk.jpg?s=256&g=1","display_name":"lucidyan","link":"https:\/\/stackoverflow.com\/users\/3338479\/lucidyan"},"is_accepted":false,"score":181,"last_activity_date":1614521752,"last_edit_date":1614521752.0,"creation_date":1463750334,"answer_id":37347783,"question_id":19124601,"content_license":"CC BY-SA 4.0","body_markdown":"After importing pandas, as an alternative to using the context manager, set such [**options**](http:\/\/pandas.pydata.org\/pandas-docs\/stable\/options.html) for displaying entire dataframes:\r\n\r\n    pd.set_option(&#39;display.max_columns&#39;, None)  # or 1000\r\n    pd.set_option(&#39;display.max_rows&#39;, None)  # or 1000\r\n    pd.set_option(&#39;display.max_colwidth&#39;, None)  # or 199\r\n\r\nFor full list of useful options, see:\r\n\r\n    pd.describe_option(&#39;display&#39;)","body":"<p>After importing pandas, as an alternative to using the context manager, set such <a href=\"http:\/\/pandas.pydata.org\/pandas-docs\/stable\/options.html\" rel=\"noreferrer\"><strong>options<\/strong><\/a> for displaying entire dataframes:<\/p>\n<pre><code>pd.set_option('display.max_columns', None)  # or 1000\npd.set_option('display.max_rows', None)  # or 1000\npd.set_option('display.max_colwidth', None)  # or 199\n<\/code><\/pre>\n<p>For full list of useful options, see:<\/p>\n<pre><code>pd.describe_option('display')\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":1297497,"reputation":43782,"user_id":1248175,"user_type":"registered","accept_rate":77,"profile_image":"https:\/\/www.gravatar.com\/avatar\/7ed02d61f5537a656134e868b154d997?s=256&d=identicon&r=PG","display_name":"gitaarik","link":"https:\/\/stackoverflow.com\/users\/1248175\/gitaarik"},"is_accepted":false,"score":180,"last_activity_date":1701077997,"last_edit_date":1701077997.0,"creation_date":1437737956,"answer_id":31609619,"question_id":4990718,"content_license":"CC BY-SA 4.0","body_markdown":"To catch all possible exceptions, catch `BaseException`. It&#39;s on top of the Exception class hierarchy:\r\n\r\nPython 3:\r\nhttps:\/\/docs.python.org\/3.12\/library\/exceptions.html#exception-hierarchy\r\n\r\nPython 2.7:\r\nhttps:\/\/docs.python.org\/2.7\/library\/exceptions.html#exception-hierarchy\r\n\r\n    try:\r\n        something()\r\n    except BaseException as error:\r\n        print(&#39;An exception occurred: {}&#39;.format(error))\r\n\r\nBut as other people mentioned, you would usually not need this, only for very specific cases.","body":"<p>To catch all possible exceptions, catch <code>BaseException<\/code>. It's on top of the Exception class hierarchy:<\/p>\n<p>Python 3:\n<a href=\"https:\/\/docs.python.org\/3.12\/library\/exceptions.html#exception-hierarchy\" rel=\"nofollow noreferrer\">https:\/\/docs.python.org\/3.12\/library\/exceptions.html#exception-hierarchy<\/a><\/p>\n<p>Python 2.7:\n<a href=\"https:\/\/docs.python.org\/2.7\/library\/exceptions.html#exception-hierarchy\" rel=\"nofollow noreferrer\">https:\/\/docs.python.org\/2.7\/library\/exceptions.html#exception-hierarchy<\/a><\/p>\n<pre><code>try:\n    something()\nexcept BaseException as error:\n    print('An exception occurred: {}'.format(error))\n<\/code><\/pre>\n<p>But as other people mentioned, you would usually not need this, only for very specific cases.<\/p>\n","community_owned_date":null},{"owner":{"account_id":873453,"reputation":10973,"user_id":923794,"user_type":"registered","accept_rate":91,"profile_image":"https:\/\/www.gravatar.com\/avatar\/39295680c5745451291043469e408c18?s=256&d=identicon&r=PG","display_name":"cfi","link":"https:\/\/stackoverflow.com\/users\/923794\/cfi"},"is_accepted":false,"score":175,"last_activity_date":1596845994,"last_edit_date":1596845994.0,"creation_date":1318498700,"answer_id":7752174,"question_id":323972,"content_license":"CC BY-SA 4.0","body_markdown":"A [`multiprocessing.Process`][1] can [`p.terminate()`][2]\r\n\r\nIn the cases where I want to kill a thread, but do not want to use flags\/locks\/signals\/semaphores\/events\/whatever, I promote the threads to full blown processes. For code that makes use of just a few threads the overhead is not that bad.\r\n\r\nE.g. this comes in handy to easily terminate helper &quot;threads&quot; which execute blocking I\/O\r\n\r\nThe conversion is trivial: In related code replace all `threading.Thread` with `multiprocessing.Process` and all `queue.Queue` with `multiprocessing.Queue` and add the required calls of `p.terminate()` to your parent process which wants to kill its child `p`\r\n\r\nSee the [Python documentation for `multiprocessing`][3].\r\n\r\nExample:\r\n\r\n```python\r\nimport multiprocessing\r\nproc = multiprocessing.Process(target=your_proc_function, args=())\r\nproc.start()\r\n# Terminate the process\r\nproc.terminate()  # sends a SIGTERM\r\n```\r\n\r\n  [1]: https:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Process\r\n  [2]: https:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Process.terminate\r\n  [3]: https:\/\/docs.python.org\/library\/multiprocessing.html","body":"<p>A <a href=\"https:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Process\" rel=\"noreferrer\"><code>multiprocessing.Process<\/code><\/a> can <a href=\"https:\/\/docs.python.org\/library\/multiprocessing.html#multiprocessing.Process.terminate\" rel=\"noreferrer\"><code>p.terminate()<\/code><\/a><\/p>\n<p>In the cases where I want to kill a thread, but do not want to use flags\/locks\/signals\/semaphores\/events\/whatever, I promote the threads to full blown processes. For code that makes use of just a few threads the overhead is not that bad.<\/p>\n<p>E.g. this comes in handy to easily terminate helper &quot;threads&quot; which execute blocking I\/O<\/p>\n<p>The conversion is trivial: In related code replace all <code>threading.Thread<\/code> with <code>multiprocessing.Process<\/code> and all <code>queue.Queue<\/code> with <code>multiprocessing.Queue<\/code> and add the required calls of <code>p.terminate()<\/code> to your parent process which wants to kill its child <code>p<\/code><\/p>\n<p>See the <a href=\"https:\/\/docs.python.org\/library\/multiprocessing.html\" rel=\"noreferrer\">Python documentation for <code>multiprocessing<\/code><\/a>.<\/p>\n<p>Example:<\/p>\n<pre class=\"lang-py prettyprint-override\"><code>import multiprocessing\nproc = multiprocessing.Process(target=your_proc_function, args=())\nproc.start()\n# Terminate the process\nproc.terminate()  # sends a SIGTERM\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":1734438,"reputation":36367,"user_id":1587329,"user_type":"registered","accept_rate":94,"profile_image":"https:\/\/i.stack.imgur.com\/UWmiP.png?s=256&g=1","display_name":"serv-inc","link":"https:\/\/stackoverflow.com\/users\/1587329\/serv-inc"},"is_accepted":false,"score":175,"last_activity_date":1678698150,"last_edit_date":1678698150.0,"creation_date":1447164095,"answer_id":33631772,"question_id":449560,"content_license":"CC BY-SA 4.0","body_markdown":"The [Pympler][1] package&#39;s `asizeof` module can do this.\r\n\r\nUse as follows:\r\n\r\n    from pympler import asizeof\r\n    asizeof.asizeof(my_object)\r\n\r\nUnlike `sys.getsizeof`, it **works for your self-created objects**. It even works with numpy.\r\n\r\n    &gt;&gt;&gt; asizeof.asizeof(tuple(&#39;bcd&#39;))\r\n    200\r\n    &gt;&gt;&gt; asizeof.asizeof({&#39;foo&#39;: &#39;bar&#39;, &#39;baz&#39;: &#39;bar&#39;})\r\n    400\r\n    &gt;&gt;&gt; asizeof.asizeof({})\r\n    280\r\n    &gt;&gt;&gt; asizeof.asizeof({&#39;foo&#39;:&#39;bar&#39;})\r\n    360\r\n    &gt;&gt;&gt; asizeof.asizeof(&#39;foo&#39;)\r\n    40\r\n    &gt;&gt;&gt; asizeof.asizeof(Bar())\r\n    352\r\n    &gt;&gt;&gt; asizeof.asizeof(Bar().__dict__)\r\n    280\r\n    &gt;&gt;&gt; A = rand(10)\r\n    &gt;&gt;&gt; B = rand(10000)\r\n    &gt;&gt;&gt; asizeof.asizeof(A)\r\n    176\r\n    &gt;&gt;&gt; asizeof.asizeof(B)\r\n    80096\r\n\r\nAnd if you need other view on live data, Pympler&#39;s \r\n\r\n&gt; module [`muppy`][4] is used for on-line monitoring of a Python application\r\n&gt; and module [`Class Tracker`][5] provides off-line analysis of the lifetime of\r\n&gt; selected Python objects.\r\n\r\n\r\n  [1]: https:\/\/pypi.python.org\/pypi\/Pympler\r\n  [2]: https:\/\/stackoverflow.com\/questions\/449560\/how-do-i-determine-the-size-of-an-object-in-python\/33631772?noredirect=1#comment85591087_33631772\r\n  [3]: https:\/\/pythonhosted.org\/Pympler\/asizeof.html#asizeof\r\n  [4]: https:\/\/pythonhosted.org\/Pympler\/muppy.html#muppy\r\n  [5]: https:\/\/pythonhosted.org\/Pympler\/classtracker.html#classtracker","body":"<p>The <a href=\"https:\/\/pypi.python.org\/pypi\/Pympler\" rel=\"noreferrer\">Pympler<\/a> package's <code>asizeof<\/code> module can do this.<\/p>\n<p>Use as follows:<\/p>\n<pre><code>from pympler import asizeof\nasizeof.asizeof(my_object)\n<\/code><\/pre>\n<p>Unlike <code>sys.getsizeof<\/code>, it <strong>works for your self-created objects<\/strong>. It even works with numpy.<\/p>\n<pre><code>&gt;&gt;&gt; asizeof.asizeof(tuple('bcd'))\n200\n&gt;&gt;&gt; asizeof.asizeof({'foo': 'bar', 'baz': 'bar'})\n400\n&gt;&gt;&gt; asizeof.asizeof({})\n280\n&gt;&gt;&gt; asizeof.asizeof({'foo':'bar'})\n360\n&gt;&gt;&gt; asizeof.asizeof('foo')\n40\n&gt;&gt;&gt; asizeof.asizeof(Bar())\n352\n&gt;&gt;&gt; asizeof.asizeof(Bar().__dict__)\n280\n&gt;&gt;&gt; A = rand(10)\n&gt;&gt;&gt; B = rand(10000)\n&gt;&gt;&gt; asizeof.asizeof(A)\n176\n&gt;&gt;&gt; asizeof.asizeof(B)\n80096\n<\/code><\/pre>\n<p>And if you need other view on live data, Pympler's<\/p>\n<blockquote>\n<p>module <a href=\"https:\/\/pythonhosted.org\/Pympler\/muppy.html#muppy\" rel=\"noreferrer\"><code>muppy<\/code><\/a> is used for on-line monitoring of a Python application\nand module <a href=\"https:\/\/pythonhosted.org\/Pympler\/classtracker.html#classtracker\" rel=\"noreferrer\"><code>Class Tracker<\/code><\/a> provides off-line analysis of the lifetime of\nselected Python objects.<\/p>\n<\/blockquote>\n","community_owned_date":null},{"owner":{"account_id":1017320,"reputation":1795,"user_id":1028595,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/c9964869cea0680e556a0301294fa1ef?s=256&d=identicon&r=PG","display_name":"Kasey Kirkham","link":"https:\/\/stackoverflow.com\/users\/1028595\/kasey-kirkham"},"is_accepted":false,"score":173,"last_activity_date":1327001728,"last_edit_date":null,"creation_date":1327001728,"answer_id":8932161,"question_id":1823058,"content_license":"CC BY-SA 3.0","body_markdown":"For inefficiency and unreadability it&#39;s hard to beat:\r\n\r\n    &gt;&gt;&gt; import itertools\r\n    &gt;&gt;&gt; s = &#39;-1234567&#39;\r\n    &gt;&gt;&gt; &#39;,&#39;.join([&quot;%s%s%s&quot; % (x[0], x[1] or &#39;&#39;, x[2] or &#39;&#39;) for x in itertools.izip_longest(s[::-1][::3], s[::-1][1::3], s[::-1][2::3])])[::-1].replace(&#39;-,&#39;,&#39;-&#39;)","body":"<p>For inefficiency and unreadability it's hard to beat:<\/p>\n\n<pre><code>&gt;&gt;&gt; import itertools\n&gt;&gt;&gt; s = '-1234567'\n&gt;&gt;&gt; ','.join([\"%s%s%s\" % (x[0], x[1] or '', x[2] or '') for x in itertools.izip_longest(s[::-1][::3], s[::-1][1::3], s[::-1][2::3])])[::-1].replace('-,','-')\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":8083,"reputation":367240,"user_id":14343,"user_type":"registered","accept_rate":78,"profile_image":"https:\/\/www.gravatar.com\/avatar\/75e9a11371cbe1566607180863efdf4c?s=256&d=identicon&r=PG","display_name":"Ned Batchelder","link":"https:\/\/stackoverflow.com\/users\/14343\/ned-batchelder"},"is_accepted":false,"score":172,"last_activity_date":1278788206,"last_edit_date":null,"creation_date":1278788206,"answer_id":3220452,"question_id":3220404,"content_license":"CC BY-SA 2.5","body_markdown":"Two reasons, there may be more:\r\n\r\n 1. pip provides an `uninstall` command\r\n\r\n 2. if an installation fails in the middle, pip will leave you in a clean state.\r\n","body":"<p>Two reasons, there may be more:<\/p>\n\n<ol>\n<li><p>pip provides an <code>uninstall<\/code> command<\/p><\/li>\n<li><p>if an installation fails in the middle, pip will leave you in a clean state.<\/p><\/li>\n<\/ol>\n","community_owned_date":null},{"owner":{"account_id":2113476,"reputation":2825,"user_id":1878250,"user_type":"registered","accept_rate":25,"profile_image":"https:\/\/i.stack.imgur.com\/6anmj.jpg?s=256&g=1","display_name":"0x3bfc","link":"https:\/\/stackoverflow.com\/users\/1878250\/0x3bfc"},"is_accepted":false,"score":172,"last_activity_date":1646174566,"last_edit_date":1646174566.0,"creation_date":1398606940,"answer_id":23324265,"question_id":20180543,"content_license":"CC BY-SA 4.0","body_markdown":"Use &lt;code&gt;pip show&lt;\/code&gt; to find the version!\r\n\r\n    # In order to get the package version, execute the below command\r\n    pip show YOUR_PACKAGE_NAME | grep Version\r\n\r\n___\r\n\r\nYou can use `pip show YOUR_PACKAGE_NAME` - which gives you all details of package. This also works in Windows.\r\n\r\n`grep Version` is used in Linux to filter out the version and show it.\r\n\r\n","body":"<p>Use <code>pip show<\/code> to find the version!<\/p>\n<pre><code># In order to get the package version, execute the below command\npip show YOUR_PACKAGE_NAME | grep Version\n<\/code><\/pre>\n<hr \/>\n<p>You can use <code>pip show YOUR_PACKAGE_NAME<\/code> - which gives you all details of package. This also works in Windows.<\/p>\n<p><code>grep Version<\/code> is used in Linux to filter out the version and show it.<\/p>\n","community_owned_date":null},{"owner":{"account_id":22,"reputation":11839,"user_id":30,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/756737fe8cbb545ed58854ff0193cc60?s=256&d=identicon&r=PG","display_name":"Grant","link":"https:\/\/stackoverflow.com\/users\/30\/grant"},"is_accepted":false,"score":171,"last_activity_date":1457630083,"last_edit_date":1457630083.0,"creation_date":1219420697,"answer_id":22721,"question_id":22676,"content_license":"CC BY-SA 3.0","body_markdown":"&lt;!-- language: python --&gt;\r\n\r\n    import urllib2\r\n    mp3file = urllib2.urlopen(&quot;http:\/\/www.example.com\/songs\/mp3.mp3&quot;)\r\n    with open(&#39;test.mp3&#39;,&#39;wb&#39;) as output:\r\n      output.write(mp3file.read())\r\n\r\nThe `wb` in `open(&#39;test.mp3&#39;,&#39;wb&#39;)` opens a file (and erases any existing file) in binary mode so you can save data with it instead of just text.","body":"<pre class=\"lang-py prettyprint-override\"><code>import urllib2\nmp3file = urllib2.urlopen(\"http:\/\/www.example.com\/songs\/mp3.mp3\")\nwith open('test.mp3','wb') as output:\n  output.write(mp3file.read())\n<\/code><\/pre>\n\n<p>The <code>wb<\/code> in <code>open('test.mp3','wb')<\/code> opens a file (and erases any existing file) in binary mode so you can save data with it instead of just text.<\/p>\n","community_owned_date":null},{"owner":{"account_id":258754,"reputation":379785,"user_id":541136,"user_type":"moderator","accept_rate":96,"profile_image":"https:\/\/i.stack.imgur.com\/wftMn.jpg?s=256&g=1","display_name":"Russia Must Remove Putin","link":"https:\/\/stackoverflow.com\/users\/541136\/russia-must-remove-putin"},"is_accepted":false,"score":171,"last_activity_date":1458272140,"last_edit_date":1495541443.0,"creation_date":1422561266,"answer_id":28223420,"question_id":129507,"content_license":"CC BY-SA 3.0","body_markdown":"&gt; **How do you test that a Python function throws an exception?**\r\n&gt; \r\n&gt; How does one write a test that fails only if a function doesn&#39;t throw\r\n&gt; an expected exception?\r\n\r\n# Short Answer:\r\n\r\nUse the `self.assertRaises` method as a context manager:\r\n\r\n        def test_1_cannot_add_int_and_str(self):\r\n            with self.assertRaises(TypeError):\r\n                1 + &#39;1&#39;\r\n\r\n#Demonstration\r\n\r\nThe best practice approach is fairly easy to demonstrate in a Python shell. \r\n\r\n**The `unittest` library**\r\n\r\nIn Python 2.7 or 3:\r\n \r\n    import unittest\r\n\r\nIn Python 2.6, you can install a backport of 2.7&#39;s `unittest` library, called [unittest2][1], and just alias that as `unittest`:\r\n\r\n    import unittest2 as unittest\r\n\r\n\r\n#Example tests\r\n\r\nNow, paste into your Python shell the following test of Python&#39;s type-safety:\r\n\r\n    class MyTestCase(unittest.TestCase):\r\n        def test_1_cannot_add_int_and_str(self):\r\n            with self.assertRaises(TypeError):\r\n                1 + &#39;1&#39;\r\n        def test_2_cannot_add_int_and_str(self):\r\n            import operator\r\n            self.assertRaises(TypeError, operator.add, 1, &#39;1&#39;)\r\n\r\nTest one uses `assertRaises` as a context manager, which ensures that the error is properly caught and cleaned up, while recorded. \r\n\r\nWe could also write it *without* the context manager, see test two. The first argument would be the error type you expect to raise, the second argument, the function you are testing, and the remaining args and keyword args will be passed to that function. \r\n\r\nI think it&#39;s far more simple, readable, and maintainable to just to use the context manager.\r\n\r\n#Running the tests\r\n\r\nTo run the tests:\r\n\r\n    unittest.main(exit=False)\r\n\r\nIn Python 2.6, you&#39;ll probably [need the following][2]:\r\n\r\n    unittest.TextTestRunner().run(unittest.TestLoader().loadTestsFromTestCase(MyTestCase))\r\n    \r\n\r\nAnd your terminal should output the following:\r\n\r\n    ..\r\n    ----------------------------------------------------------------------\r\n    Ran 2 tests in 0.007s\r\n    \r\n    OK\r\n    &lt;unittest2.runner.TextTestResult run=2 errors=0 failures=0&gt;\r\n\r\nAnd we see that as we expect, attempting to add a `1` and a `&#39;1&#39;` result in a `TypeError`.\r\n\r\n____\r\n\r\nFor more verbose output, try this:\r\n\r\n    unittest.TextTestRunner(verbosity=2).run(unittest.TestLoader().loadTestsFromTestCase(MyTestCase))\r\n\r\n\r\n  [1]: https:\/\/pypi.python.org\/pypi\/unittest2\r\n  [2]: https:\/\/stackoverflow.com\/a\/21262077\/541136","body":"<blockquote>\n  <p><strong>How do you test that a Python function throws an exception?<\/strong><\/p>\n  \n  <p>How does one write a test that fails only if a function doesn't throw\n  an expected exception?<\/p>\n<\/blockquote>\n\n<h1>Short Answer:<\/h1>\n\n<p>Use the <code>self.assertRaises<\/code> method as a context manager:<\/p>\n\n<pre><code>    def test_1_cannot_add_int_and_str(self):\n        with self.assertRaises(TypeError):\n            1 + '1'\n<\/code><\/pre>\n\n<h1>Demonstration<\/h1>\n\n<p>The best practice approach is fairly easy to demonstrate in a Python shell. <\/p>\n\n<p><strong>The <code>unittest<\/code> library<\/strong><\/p>\n\n<p>In Python 2.7 or 3:<\/p>\n\n<pre><code>import unittest\n<\/code><\/pre>\n\n<p>In Python 2.6, you can install a backport of 2.7's <code>unittest<\/code> library, called <a href=\"https:\/\/pypi.python.org\/pypi\/unittest2\" rel=\"noreferrer\">unittest2<\/a>, and just alias that as <code>unittest<\/code>:<\/p>\n\n<pre><code>import unittest2 as unittest\n<\/code><\/pre>\n\n<h1>Example tests<\/h1>\n\n<p>Now, paste into your Python shell the following test of Python's type-safety:<\/p>\n\n<pre><code>class MyTestCase(unittest.TestCase):\n    def test_1_cannot_add_int_and_str(self):\n        with self.assertRaises(TypeError):\n            1 + '1'\n    def test_2_cannot_add_int_and_str(self):\n        import operator\n        self.assertRaises(TypeError, operator.add, 1, '1')\n<\/code><\/pre>\n\n<p>Test one uses <code>assertRaises<\/code> as a context manager, which ensures that the error is properly caught and cleaned up, while recorded. <\/p>\n\n<p>We could also write it <em>without<\/em> the context manager, see test two. The first argument would be the error type you expect to raise, the second argument, the function you are testing, and the remaining args and keyword args will be passed to that function. <\/p>\n\n<p>I think it's far more simple, readable, and maintainable to just to use the context manager.<\/p>\n\n<h1>Running the tests<\/h1>\n\n<p>To run the tests:<\/p>\n\n<pre><code>unittest.main(exit=False)\n<\/code><\/pre>\n\n<p>In Python 2.6, you'll probably <a href=\"https:\/\/stackoverflow.com\/a\/21262077\/541136\">need the following<\/a>:<\/p>\n\n<pre><code>unittest.TextTestRunner().run(unittest.TestLoader().loadTestsFromTestCase(MyTestCase))\n<\/code><\/pre>\n\n<p>And your terminal should output the following:<\/p>\n\n<pre><code>..\n----------------------------------------------------------------------\nRan 2 tests in 0.007s\n\nOK\n&lt;unittest2.runner.TextTestResult run=2 errors=0 failures=0&gt;\n<\/code><\/pre>\n\n<p>And we see that as we expect, attempting to add a <code>1<\/code> and a <code>'1'<\/code> result in a <code>TypeError<\/code>.<\/p>\n\n<hr>\n\n<p>For more verbose output, try this:<\/p>\n\n<pre><code>unittest.TextTestRunner(verbosity=2).run(unittest.TestLoader().loadTestsFromTestCase(MyTestCase))\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":43003,"reputation":25749,"user_id":125507,"user_type":"registered","accept_rate":69,"profile_image":"https:\/\/www.gravatar.com\/avatar\/2a59853d36056b7a088f33c96e3a1619?s=256&d=identicon&r=PG","display_name":"endolith","link":"https:\/\/stackoverflow.com\/users\/125507\/endolith"},"is_accepted":false,"score":170,"last_activity_date":1526399565,"last_edit_date":1526399565.0,"creation_date":1519358121,"answer_id":48940855,"question_id":3501382,"content_license":"CC BY-SA 4.0","body_markdown":"Here&#39;s a summary of the different methods mentioned here:\r\n\r\n- `int(x) == x`\r\n- `try x = operator.index(x)`\r\n- `isinstance(x, int)`\r\n- `isinstance(x, numbers.Integral)`\r\n\r\nand here&#39;s how they apply to a variety of numerical types that have integer value:\r\n\r\n[![Table of methods for checking whether Python numerical types are integers][1]][1]\r\n\r\n&lt;!--\r\nConcept\tType\tint(x)==x\t.index()\tis int\tIntegral\r\nIntegers\t5\tTrue\tTrue\tTrue\tTrue\r\n\tnp.int8|16|32|64(5)\tTrue\tTrue\tFalse\tTrue\r\n\tsympy.Integer(5)\tTrue\tTrue\tFalse\tFalse\r\n\tnp.array(5)\tTrue\tTrue\tFalse\tFalse\r\nFloats\t5.0\tTrue\tTypeError\tFalse\tFalse\r\n\tnp.array(5.0)\tTrue\tTypeError\tFalse\tFalse\r\n\tnp.float16|32|64(5)\tTrue\tTypeError\tFalse\tFalse\r\n\tmpmath.mpf(5)\tTrue\tTypeError\tFalse\tFalse\r\n\tsympy.Float(5)\tTrue\tTypeError\tFalse\tFalse\r\nComplex\t5+0j\tTypeError\tTypeError\tFalse\tFalse\r\n\tnp.complex64|128(5)\tTrue (warns)\tTypeError\tFalse\tFalse\r\n\tmpmath.mpc(5)\tTypeError\tTypeError\tFalse\tFalse\r\nRational\tfractions.Fraction(5)\tTrue\tTypeError\tFalse\tFalse\r\n\tsympy.Rational(5)\tTrue\tTrue\tFalse\tFalse\r\nDecimal\tdecimal.Decimal(5)\tTrue\tTypeError\tFalse\tFalse\r\n\r\n--&gt;\r\n\r\nYou can see they aren&#39;t 100% consistent.  Fraction and Rational are conceptually the same, but one supplies a `.index()` method and the other doesn&#39;t.  Complex types don&#39;t like to convert to int even if the real part is integral and imaginary part is 0.\r\n\r\n(`np.int8|16|32|64(5)` means that `np.int8(5)`, `np.int32(5)`, etc. all behave identically)\r\n\r\n\r\n  [1]: https:\/\/i.stack.imgur.com\/kntOB.png\r\n  [2]: https:\/\/i.stack.imgur.com\/Qnbjw.png","body":"<p>Here's a summary of the different methods mentioned here:<\/p>\n\n<ul>\n<li><code>int(x) == x<\/code><\/li>\n<li><code>try x = operator.index(x)<\/code><\/li>\n<li><code>isinstance(x, int)<\/code><\/li>\n<li><code>isinstance(x, numbers.Integral)<\/code><\/li>\n<\/ul>\n\n<p>and here's how they apply to a variety of numerical types that have integer value:<\/p>\n\n<p><a href=\"https:\/\/i.stack.imgur.com\/kntOB.png\" rel=\"noreferrer\"><img src=\"https:\/\/i.stack.imgur.com\/kntOB.png\" alt=\"Table of methods for checking whether Python numerical types are integers\"><\/a><\/p>\n\n\n\n<p>You can see they aren't 100% consistent.  Fraction and Rational are conceptually the same, but one supplies a <code>.index()<\/code> method and the other doesn't.  Complex types don't like to convert to int even if the real part is integral and imaginary part is 0.<\/p>\n\n<p>(<code>np.int8|16|32|64(5)<\/code> means that <code>np.int8(5)<\/code>, <code>np.int32(5)<\/code>, etc. all behave identically)<\/p>\n","community_owned_date":null},{"owner":{"account_id":2047611,"reputation":6824,"user_id":1827356,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/21f270a4064c6c6721b6649c344f792f?s=256&d=identicon&r=PG","display_name":"user1827356","link":"https:\/\/stackoverflow.com\/users\/1827356\/user1827356"},"is_accepted":false,"score":169,"last_activity_date":1387812087,"last_edit_date":1387812087.0,"creation_date":1387482408,"answer_id":20690383,"question_id":14262433,"content_license":"CC BY-SA 3.0","body_markdown":"I think the answers above are missing a simple approach that I&#39;ve found very useful. \r\n\r\nWhen I have a file that is too large to load in memory, I break up the file into multiple smaller files (either by row or cols)\r\n\r\nExample: In case of 30 days worth of trading data of ~30GB size, I break it into a file per day of ~1GB size. I subsequently process each file separately and aggregate results at the end\r\n\r\nOne of the biggest advantages is that it allows parallel processing of the files (either multiple threads or processes)\r\n\r\nThe other advantage is that file manipulation (like adding\/removing dates in the example) can be accomplished by regular shell commands, which is not be possible in more advanced\/complicated file formats\r\n\r\nThis approach doesn&#39;t cover all scenarios, but is very useful in a lot of them","body":"<p>I think the answers above are missing a simple approach that I've found very useful. <\/p>\n\n<p>When I have a file that is too large to load in memory, I break up the file into multiple smaller files (either by row or cols)<\/p>\n\n<p>Example: In case of 30 days worth of trading data of ~30GB size, I break it into a file per day of ~1GB size. I subsequently process each file separately and aggregate results at the end<\/p>\n\n<p>One of the biggest advantages is that it allows parallel processing of the files (either multiple threads or processes)<\/p>\n\n<p>The other advantage is that file manipulation (like adding\/removing dates in the example) can be accomplished by regular shell commands, which is not be possible in more advanced\/complicated file formats<\/p>\n\n<p>This approach doesn't cover all scenarios, but is very useful in a lot of them<\/p>\n","community_owned_date":null},{"owner":{"account_id":25542,"reputation":152925,"user_id":65696,"user_type":"registered","accept_rate":85,"profile_image":"https:\/\/www.gravatar.com\/avatar\/d8da959b2a586b4a147604e6f534a9fe?s=256&d=identicon&r=PG","display_name":"SingleNegationElimination","link":"https:\/\/stackoverflow.com\/users\/65696\/singlenegationelimination"},"is_accepted":false,"score":168,"last_activity_date":1605163004,"last_edit_date":1605163004.0,"creation_date":1248113222,"answer_id":1155013,"question_id":687295,"content_license":"CC BY-SA 4.0","body_markdown":"the `field=value` syntax in queries is a shorthand for `field__exact=value`.  That is to say that [Django puts query operators on query fields in the identifiers][1].  Django supports the following operators:\r\n\r\n    exact\r\n    iexact\r\n    contains\r\n    icontains\r\n    in\r\n    gt\r\n    gte\r\n    lt\r\n    lte\r\n    startswith\r\n    istartswith\r\n    endswith\r\n    iendswith\r\n    range\r\n\r\n    date\r\n    year\r\n    iso_year\r\n    month\r\n    day\r\n    week\r\n    week_day\r\n    iso_week_day\r\n    quarter\r\n    time\r\n    hour\r\n    minute\r\n    second\r\n\r\n    isnull\r\n    regex\r\n    iregex\r\n\r\nI&#39;m sure by combining these with the Q objects as [Dave Vogt suggests][2] and using `filter()` or `exclude()` as [Jason Baker suggests][3] you&#39;ll get exactly what you need for just about any possible query.\r\n\r\n\r\n  [1]: http:\/\/docs.djangoproject.com\/en\/dev\/ref\/models\/querysets\/#field-lookups\r\n  [2]: https:\/\/stackoverflow.com\/questions\/687295\/how-do-i-do-a-not-equal-in-django-queryset-filtering\/1154977#1154977\r\n  [3]: https:\/\/stackoverflow.com\/questions\/687295\/how-do-i-do-a-not-equal-in-django-queryset-filtering\/687316#687316","body":"<p>the <code>field=value<\/code> syntax in queries is a shorthand for <code>field__exact=value<\/code>.  That is to say that <a href=\"http:\/\/docs.djangoproject.com\/en\/dev\/ref\/models\/querysets\/#field-lookups\" rel=\"noreferrer\">Django puts query operators on query fields in the identifiers<\/a>.  Django supports the following operators:<\/p>\n<pre><code>exact\niexact\ncontains\nicontains\nin\ngt\ngte\nlt\nlte\nstartswith\nistartswith\nendswith\niendswith\nrange\n\ndate\nyear\niso_year\nmonth\nday\nweek\nweek_day\niso_week_day\nquarter\ntime\nhour\nminute\nsecond\n\nisnull\nregex\niregex\n<\/code><\/pre>\n<p>I'm sure by combining these with the Q objects as <a href=\"https:\/\/stackoverflow.com\/questions\/687295\/how-do-i-do-a-not-equal-in-django-queryset-filtering\/1154977#1154977\">Dave Vogt suggests<\/a> and using <code>filter()<\/code> or <code>exclude()<\/code> as <a href=\"https:\/\/stackoverflow.com\/questions\/687295\/how-do-i-do-a-not-equal-in-django-queryset-filtering\/687316#687316\">Jason Baker suggests<\/a> you'll get exactly what you need for just about any possible query.<\/p>\n","community_owned_date":null},{"owner":{"user_type":"does_not_exist","display_name":"user395760"},"is_accepted":false,"score":166,"last_activity_date":1447576990,"last_edit_date":1592644375.0,"creation_date":1284839229,"answer_id":3743238,"question_id":3743222,"content_license":"CC BY-SA 4.0","body_markdown":"From the documentation:\n\n&gt;[`datetime.datetime.date()`][1]\n&gt;\n&gt;    Return date object with same year, month and day.\n\n  [1]: http:\/\/docs.python.org\/library\/datetime.html#datetime.datetime.date\n","body":"<p>From the documentation:<\/p>\n<blockquote>\n<p><a href=\"http:\/\/docs.python.org\/library\/datetime.html#datetime.datetime.date\" rel=\"noreferrer\"><code>datetime.datetime.date()<\/code><\/a><\/p>\n<p>Return date object with same year, month and day.<\/p>\n<\/blockquote>\n","community_owned_date":null},{"owner":{"account_id":17448,"reputation":3704,"user_id":39058,"user_type":"registered","accept_rate":75,"profile_image":"https:\/\/www.gravatar.com\/avatar\/952aa92c2f88da8b18e45cff8e6897fc?s=256&d=identicon&r=PG","display_name":"kkubasik","link":"https:\/\/stackoverflow.com\/users\/39058\/kkubasik"},"is_accepted":false,"score":164,"last_activity_date":1340222413,"last_edit_date":1340222413.0,"creation_date":1227126221,"answer_id":303228,"question_id":303200,"content_license":"CC BY-SA 3.0","body_markdown":"From [the python docs](http:\/\/docs.python.org\/library\/os.html#os.walk) on `os.walk()`:\r\n\r\n    # Delete everything reachable from the directory named in &#39;top&#39;,\r\n    # assuming there are no symbolic links.\r\n    # CAUTION:  This is dangerous!  For example, if top == &#39;\/&#39;, it\r\n    # could delete all your disk files.\r\n    import os\r\n    for root, dirs, files in os.walk(top, topdown=False):\r\n        for name in files:\r\n            os.remove(os.path.join(root, name))\r\n        for name in dirs:\r\n            os.rmdir(os.path.join(root, name))\r\n\r\n","body":"<p>From <a href=\"http:\/\/docs.python.org\/library\/os.html#os.walk\" rel=\"noreferrer\">the python docs<\/a> on <code>os.walk()<\/code>:<\/p>\n\n<pre><code># Delete everything reachable from the directory named in 'top',\n# assuming there are no symbolic links.\n# CAUTION:  This is dangerous!  For example, if top == '\/', it\n# could delete all your disk files.\nimport os\nfor root, dirs, files in os.walk(top, topdown=False):\n    for name in files:\n        os.remove(os.path.join(root, name))\n    for name in dirs:\n        os.rmdir(os.path.join(root, name))\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":579,"reputation":166735,"user_id":745,"user_type":"registered","accept_rate":90,"profile_image":"https:\/\/www.gravatar.com\/avatar\/edf857d71f672d8f411ef6b8376316b8?s=256&d=identicon&r=PG","display_name":"dbr","link":"https:\/\/stackoverflow.com\/users\/745\/dbr"},"is_accepted":false,"score":164,"last_activity_date":1590172265,"last_edit_date":1590172265.0,"creation_date":1239313685,"answer_id":736029,"question_id":730764,"content_license":"CC BY-SA 4.0","body_markdown":"It&#39;s generally considered best-practice to only catch the errors you are interested in. In the case of `shutil.rmtree` it&#39;s probably `OSError`:\r\n\r\n    &gt;&gt;&gt; shutil.rmtree(&quot;\/fake\/dir&quot;)\r\n    Traceback (most recent call last):\r\n        [...]\r\n    OSError: [Errno 2] No such file or directory: &#39;\/fake\/dir&#39;\r\n\r\nIf you want to silently ignore that error, you would do:\r\n\r\n    try:\r\n        shutil.rmtree(path)\r\n    except OSError:\r\n        pass\r\n\r\nWhy? Say you (somehow) accidently pass the function an integer instead of a string, like:\r\n\r\n    shutil.rmtree(2)\r\n\r\nIt will give the error *&quot;TypeError: coercing to Unicode: need string or buffer, int found&quot;* - you probably don&#39;t want to ignore that, which can be difficult to debug.\r\n\r\nIf you *definitely* want to ignore all errors, catch `Exception` rather than a bare `except:` statement. Again, why?\r\n\r\nNot specifying an exception catches *every* exception, including the `SystemExit` exception which for example `sys.exit()` uses:\r\n\r\n    &gt;&gt;&gt; try:\r\n    ...     sys.exit(1)\r\n    ... except:\r\n    ...     pass\r\n    ... \r\n    &gt;&gt;&gt;\r\n\r\nCompare this to the following, which correctly exits:\r\n\r\n    &gt;&gt;&gt; try:\r\n    ...     sys.exit(1)\r\n    ... except Exception:\r\n    ...     pass\r\n    ... \r\n    shell:~$ \r\n\r\nIf you want to write ever better behaving code, the [`OSError`](http:\/\/docs.python.org\/library\/exceptions.html#exceptions.OSError) exception can represent various errors, but in the example above we only want to ignore `Errno 2`, so we could be even more specific:\r\n\r\n    import errno\r\n\r\n    try:\r\n        shutil.rmtree(path)\r\n    except OSError as e:\r\n        if e.errno != errno.ENOENT:\r\n            # ignore &quot;No such file or directory&quot;, but re-raise other errors\r\n            raise\r\n","body":"<p>It's generally considered best-practice to only catch the errors you are interested in. In the case of <code>shutil.rmtree<\/code> it's probably <code>OSError<\/code>:<\/p>\n\n<pre><code>&gt;&gt;&gt; shutil.rmtree(\"\/fake\/dir\")\nTraceback (most recent call last):\n    [...]\nOSError: [Errno 2] No such file or directory: '\/fake\/dir'\n<\/code><\/pre>\n\n<p>If you want to silently ignore that error, you would do:<\/p>\n\n<pre><code>try:\n    shutil.rmtree(path)\nexcept OSError:\n    pass\n<\/code><\/pre>\n\n<p>Why? Say you (somehow) accidently pass the function an integer instead of a string, like:<\/p>\n\n<pre><code>shutil.rmtree(2)\n<\/code><\/pre>\n\n<p>It will give the error <em>\"TypeError: coercing to Unicode: need string or buffer, int found\"<\/em> - you probably don't want to ignore that, which can be difficult to debug.<\/p>\n\n<p>If you <em>definitely<\/em> want to ignore all errors, catch <code>Exception<\/code> rather than a bare <code>except:<\/code> statement. Again, why?<\/p>\n\n<p>Not specifying an exception catches <em>every<\/em> exception, including the <code>SystemExit<\/code> exception which for example <code>sys.exit()<\/code> uses:<\/p>\n\n<pre><code>&gt;&gt;&gt; try:\n...     sys.exit(1)\n... except:\n...     pass\n... \n&gt;&gt;&gt;\n<\/code><\/pre>\n\n<p>Compare this to the following, which correctly exits:<\/p>\n\n<pre><code>&gt;&gt;&gt; try:\n...     sys.exit(1)\n... except Exception:\n...     pass\n... \nshell:~$ \n<\/code><\/pre>\n\n<p>If you want to write ever better behaving code, the <a href=\"http:\/\/docs.python.org\/library\/exceptions.html#exceptions.OSError\" rel=\"noreferrer\"><code>OSError<\/code><\/a> exception can represent various errors, but in the example above we only want to ignore <code>Errno 2<\/code>, so we could be even more specific:<\/p>\n\n<pre><code>import errno\n\ntry:\n    shutil.rmtree(path)\nexcept OSError as e:\n    if e.errno != errno.ENOENT:\n        # ignore \"No such file or directory\", but re-raise other errors\n        raise\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":20438,"reputation":28560,"user_id":48837,"user_type":"registered","accept_rate":94,"profile_image":"https:\/\/www.gravatar.com\/avatar\/794b7aec23a44e6982349be0b14bebd0?s=256&d=identicon&r=PG","display_name":"Joe Holloway","link":"https:\/\/stackoverflow.com\/users\/48837\/joe-holloway"},"is_accepted":false,"score":163,"last_activity_date":1465917076,"last_edit_date":1465917076.0,"creation_date":1235954938,"answer_id":600940,"question_id":600268,"content_license":"CC BY-SA 3.0","body_markdown":"This is easier than trapping the exception:\r\n\r\n    import os\r\n    if not os.path.exists(...):\r\n        os.makedirs(...)\r\n\r\n**Disclaimer** This approach requires two system calls which is more susceptible to race conditions under certain environments\/conditions.  If you&#39;re writing something more sophisticated than a simple throwaway script running in a controlled environment, you&#39;re better off going with the accepted answer that requires only one system call.\r\n\r\n**UPDATE 2012-07-27**\r\n\r\nI&#39;m tempted to delete this answer, but I think there&#39;s value in the comment thread below.  As such, I&#39;m converting it to a wiki.  \r\n\r\n","body":"<p>This is easier than trapping the exception:<\/p>\n\n<pre><code>import os\nif not os.path.exists(...):\n    os.makedirs(...)\n<\/code><\/pre>\n\n<p><strong>Disclaimer<\/strong> This approach requires two system calls which is more susceptible to race conditions under certain environments\/conditions.  If you're writing something more sophisticated than a simple throwaway script running in a controlled environment, you're better off going with the accepted answer that requires only one system call.<\/p>\n\n<p><strong>UPDATE 2012-07-27<\/strong><\/p>\n\n<p>I'm tempted to delete this answer, but I think there's value in the comment thread below.  As such, I'm converting it to a wiki.  <\/p>\n","community_owned_date":1343405246.0},{"owner":{"account_id":171579,"reputation":14833,"user_id":399105,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/2a789b65f7577e89e877ab131b7aface?s=256&d=identicon&r=PG","display_name":"bmaupin","link":"https:\/\/stackoverflow.com\/users\/399105\/bmaupin"},"is_accepted":false,"score":163,"last_activity_date":1585572723,"last_edit_date":1585572723.0,"creation_date":1438867831,"answer_id":31857152,"question_id":22676,"content_license":"CC BY-SA 4.0","body_markdown":"### Python 3\r\n\r\n- [`urllib.request.urlopen`](https:\/\/docs.python.org\/3\/library\/urllib.request.html#urllib.request.urlopen)\r\n\r\n        import urllib.request\r\n        response = urllib.request.urlopen(&#39;http:\/\/www.example.com\/&#39;)\r\n        html = response.read()\r\n\r\n- [`urllib.request.urlretrieve`](https:\/\/docs.python.org\/3\/library\/urllib.request.html#urllib.request.urlretrieve)\r\n\r\n        import urllib.request\r\n        urllib.request.urlretrieve(&#39;http:\/\/www.example.com\/songs\/mp3.mp3&#39;, &#39;mp3.mp3&#39;)\r\n\r\n    **Note:** According to the documentation, `urllib.request.urlretrieve` is a &quot;legacy interface&quot; and &quot;might become deprecated in the future&quot; (thanks [gerrit](https:\/\/stackoverflow.com\/questions\/22676\/how-do-i-download-a-file-over-http-using-python\/31857152?noredirect=1#comment107731047_31857152))\r\n\r\n### Python 2\r\n\r\n- [`urllib2.urlopen`](https:\/\/docs.python.org\/2\/library\/urllib2.html#urllib2.urlopen) (thanks [Corey](https:\/\/stackoverflow.com\/a\/22682\/399105))\r\n\r\n        import urllib2\r\n        response = urllib2.urlopen(&#39;http:\/\/www.example.com\/&#39;)\r\n        html = response.read()\r\n\r\n- [`urllib.urlretrieve`](https:\/\/docs.python.org\/2\/library\/urllib.html#urllib.urlretrieve) (thanks [PabloG](https:\/\/stackoverflow.com\/a\/22776\/399105))\r\n\r\n        import urllib\r\n        urllib.urlretrieve(&#39;http:\/\/www.example.com\/songs\/mp3.mp3&#39;, &#39;mp3.mp3&#39;)","body":"<h3>Python 3<\/h3>\n\n<ul>\n<li><p><a href=\"https:\/\/docs.python.org\/3\/library\/urllib.request.html#urllib.request.urlopen\" rel=\"noreferrer\"><code>urllib.request.urlopen<\/code><\/a><\/p>\n\n<pre><code>import urllib.request\nresponse = urllib.request.urlopen('http:\/\/www.example.com\/')\nhtml = response.read()\n<\/code><\/pre><\/li>\n<li><p><a href=\"https:\/\/docs.python.org\/3\/library\/urllib.request.html#urllib.request.urlretrieve\" rel=\"noreferrer\"><code>urllib.request.urlretrieve<\/code><\/a><\/p>\n\n<pre><code>import urllib.request\nurllib.request.urlretrieve('http:\/\/www.example.com\/songs\/mp3.mp3', 'mp3.mp3')\n<\/code><\/pre>\n\n<p><strong>Note:<\/strong> According to the documentation, <code>urllib.request.urlretrieve<\/code> is a \"legacy interface\" and \"might become deprecated in the future\" (thanks <a href=\"https:\/\/stackoverflow.com\/questions\/22676\/how-do-i-download-a-file-over-http-using-python\/31857152?noredirect=1#comment107731047_31857152\">gerrit<\/a>)<\/p><\/li>\n<\/ul>\n\n<h3>Python 2<\/h3>\n\n<ul>\n<li><p><a href=\"https:\/\/docs.python.org\/2\/library\/urllib2.html#urllib2.urlopen\" rel=\"noreferrer\"><code>urllib2.urlopen<\/code><\/a> (thanks <a href=\"https:\/\/stackoverflow.com\/a\/22682\/399105\">Corey<\/a>)<\/p>\n\n<pre><code>import urllib2\nresponse = urllib2.urlopen('http:\/\/www.example.com\/')\nhtml = response.read()\n<\/code><\/pre><\/li>\n<li><p><a href=\"https:\/\/docs.python.org\/2\/library\/urllib.html#urllib.urlretrieve\" rel=\"noreferrer\"><code>urllib.urlretrieve<\/code><\/a> (thanks <a href=\"https:\/\/stackoverflow.com\/a\/22776\/399105\">PabloG<\/a>)<\/p>\n\n<pre><code>import urllib\nurllib.urlretrieve('http:\/\/www.example.com\/songs\/mp3.mp3', 'mp3.mp3')\n<\/code><\/pre><\/li>\n<\/ul>\n","community_owned_date":null},{"owner":{"account_id":25409,"reputation":45411,"user_id":65295,"user_type":"registered","accept_rate":90,"profile_image":"https:\/\/www.gravatar.com\/avatar\/5ad057107bf330ce298dc878e949ceab?s=256&d=identicon&r=PG","display_name":"Seth","link":"https:\/\/stackoverflow.com\/users\/65295\/seth"},"is_accepted":false,"score":162,"last_activity_date":1287450782,"last_edit_date":null,"creation_date":1287450782,"answer_id":3964696,"question_id":3964681,"content_license":"CC BY-SA 2.5","body_markdown":"Something like this will work: \r\n\r\n    &gt;&gt;&gt; import os\r\n    &gt;&gt;&gt; path = &#39;\/usr\/share\/cups\/charmaps&#39;\r\n    &gt;&gt;&gt; text_files = [f for f in os.listdir(path) if f.endswith(&#39;.txt&#39;)]\r\n    &gt;&gt;&gt; text_files\r\n    [&#39;euc-cn.txt&#39;, &#39;euc-jp.txt&#39;, &#39;euc-kr.txt&#39;, &#39;euc-tw.txt&#39;, ... &#39;windows-950.txt&#39;]\r\n","body":"<p>Something like this will work: <\/p>\n\n<pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; path = '\/usr\/share\/cups\/charmaps'\n&gt;&gt;&gt; text_files = [f for f in os.listdir(path) if f.endswith('.txt')]\n&gt;&gt;&gt; text_files\n['euc-cn.txt', 'euc-jp.txt', 'euc-kr.txt', 'euc-tw.txt', ... 'windows-950.txt']\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":186862,"reputation":219056,"user_id":424499,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/bc2071afd499daef001e75e14d7f9cce?s=256&d=identicon&r=PG","display_name":"Raymond Hettinger","link":"https:\/\/stackoverflow.com\/users\/424499\/raymond-hettinger"},"is_accepted":false,"score":161,"last_activity_date":1640629679,"last_edit_date":1640629679.0,"creation_date":1475509653,"answer_id":39835527,"question_id":480214,"content_license":"CC BY-SA 4.0","body_markdown":"**In CPython 3.6+** (and all other Python implementations starting with **Python 3.7+**), dictionaries [are ordered][1], so the way to remove duplicates from an iterable while keeping it in the original order is:\r\n\r\n    &gt;&gt;&gt; list(dict.fromkeys(&#39;abracadabra&#39;))\r\n    [&#39;a&#39;, &#39;b&#39;, &#39;r&#39;, &#39;c&#39;, &#39;d&#39;]\r\n\r\n**In Python 3.5** and below (including **Python 2.7**), use the [`OrderedDict`][2]. My timings show that this is now both the fastest and shortest of the various approaches for Python 3.5 (when it gained a C implementation; prior to 3.5 it&#39;s still the clearest solution, though not the fastest).\r\n\r\n\r\n    &gt;&gt;&gt; from collections import OrderedDict\r\n    &gt;&gt;&gt; list(OrderedDict.fromkeys(&#39;abracadabra&#39;))\r\n    [&#39;a&#39;, &#39;b&#39;, &#39;r&#39;, &#39;c&#39;, &#39;d&#39;]\r\n\r\n\r\n  [1]: https:\/\/docs.python.org\/3\/whatsnew\/3.7.html#summary-release-highlights\r\n  [2]: https:\/\/docs.python.org\/3\/library\/collections.html#collections.OrderedDict","body":"<p><strong>In CPython 3.6+<\/strong> (and all other Python implementations starting with <strong>Python 3.7+<\/strong>), dictionaries <a href=\"https:\/\/docs.python.org\/3\/whatsnew\/3.7.html#summary-release-highlights\" rel=\"noreferrer\">are ordered<\/a>, so the way to remove duplicates from an iterable while keeping it in the original order is:<\/p>\n<pre><code>&gt;&gt;&gt; list(dict.fromkeys('abracadabra'))\n['a', 'b', 'r', 'c', 'd']\n<\/code><\/pre>\n<p><strong>In Python 3.5<\/strong> and below (including <strong>Python 2.7<\/strong>), use the <a href=\"https:\/\/docs.python.org\/3\/library\/collections.html#collections.OrderedDict\" rel=\"noreferrer\"><code>OrderedDict<\/code><\/a>. My timings show that this is now both the fastest and shortest of the various approaches for Python 3.5 (when it gained a C implementation; prior to 3.5 it's still the clearest solution, though not the fastest).<\/p>\n<pre><code>&gt;&gt;&gt; from collections import OrderedDict\n&gt;&gt;&gt; list(OrderedDict.fromkeys('abracadabra'))\n['a', 'b', 'r', 'c', 'd']\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":195188,"reputation":2206,"user_id":437948,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/CJVaw.png?s=256&g=1","display_name":"Mark","link":"https:\/\/stackoverflow.com\/users\/437948\/mark"},"is_accepted":false,"score":160,"last_activity_date":1305203366,"last_edit_date":null,"creation_date":1305203366,"answer_id":5977987,"question_id":5971312,"content_license":"CC BY-SA 3.0","body_markdown":"You may need to consider some further aspects for code robustness;\r\n\r\nwhen you&#39;re storing an integer-valued variable as an environment variable, try\r\n\r\n    os.environ[&#39;DEBUSSY&#39;] = str(myintvariable)\r\nthen for retrieval, consider that to avoid errors, you should try\r\n\r\n    os.environ.get(&#39;DEBUSSY&#39;, &#39;Not Set&#39;)\r\n\r\npossibly substitute &#39;-1&#39; for &#39;Not Set&#39;\r\n\r\nso, to put that all together\r\n\r\n    myintvariable = 1\r\n    os.environ[&#39;DEBUSSY&#39;] = str(myintvariable)\r\n    strauss = int(os.environ.get(&#39;STRAUSS&#39;, &#39;-1&#39;))\r\n    # NB KeyError &lt;=&gt; strauss = os.environ[&#39;STRAUSS&#39;]\r\n    debussy = int(os.environ.get(&#39;DEBUSSY&#39;, &#39;-1&#39;))\r\n\r\n    print &quot;%s %u, %s %u&quot; % (&#39;Strauss&#39;, strauss, &#39;Debussy&#39;, debussy)\r\n\r\n","body":"<p>You may need to consider some further aspects for code robustness;<\/p>\n\n<p>when you're storing an integer-valued variable as an environment variable, try<\/p>\n\n<pre><code>os.environ['DEBUSSY'] = str(myintvariable)\n<\/code><\/pre>\n\n<p>then for retrieval, consider that to avoid errors, you should try<\/p>\n\n<pre><code>os.environ.get('DEBUSSY', 'Not Set')\n<\/code><\/pre>\n\n<p>possibly substitute '-1' for 'Not Set'<\/p>\n\n<p>so, to put that all together<\/p>\n\n<pre><code>myintvariable = 1\nos.environ['DEBUSSY'] = str(myintvariable)\nstrauss = int(os.environ.get('STRAUSS', '-1'))\n# NB KeyError &lt;=&gt; strauss = os.environ['STRAUSS']\ndebussy = int(os.environ.get('DEBUSSY', '-1'))\n\nprint \"%s %u, %s %u\" % ('Strauss', strauss, 'Debussy', debussy)\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":4350,"reputation":84112,"user_id":6491,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/fd7da9bf7b009ceb7a7037906361c9eb?s=256&d=identicon&r=PG","display_name":"gimel","link":"https:\/\/stackoverflow.com\/users\/6491\/gimel"},"is_accepted":false,"score":158,"last_activity_date":1232884637,"last_edit_date":null,"creation_date":1232884637,"answer_id":477610,"question_id":477486,"content_license":"CC BY-SA 2.5","body_markdown":"Building on [&#39;xrange([start], stop[, step])&#39;][1], you can define a generator that accepts and produces any type you choose (stick to types supporting `+` and `&lt;`):\r\n\r\n    &gt;&gt;&gt; def drange(start, stop, step):\r\n    ... \tr = start\r\n    ... \twhile r &lt; stop:\r\n    ... \t\tyield r\r\n    ... \t\tr += step\r\n    ... \t\t\r\n    &gt;&gt;&gt; i0=drange(0.0, 1.0, 0.1)\r\n    &gt;&gt;&gt; [&quot;%g&quot; % x for x in i0]\r\n    [&#39;0&#39;, &#39;0.1&#39;, &#39;0.2&#39;, &#39;0.3&#39;, &#39;0.4&#39;, &#39;0.5&#39;, &#39;0.6&#39;, &#39;0.7&#39;, &#39;0.8&#39;, &#39;0.9&#39;, &#39;1&#39;]\r\n    &gt;&gt;&gt; \r\n\r\n\r\n\r\n\r\n  [1]: http:\/\/docs.python.org\/library\/functions.html#xrange","body":"<p>Building on <a href=\"http:\/\/docs.python.org\/library\/functions.html#xrange\" rel=\"noreferrer\">'xrange([start], stop[, step])'<\/a>, you can define a generator that accepts and produces any type you choose (stick to types supporting <code>+<\/code> and <code>&lt;<\/code>):<\/p>\n\n<pre><code>&gt;&gt;&gt; def drange(start, stop, step):\n...     r = start\n...     while r &lt; stop:\n...         yield r\n...         r += step\n...         \n&gt;&gt;&gt; i0=drange(0.0, 1.0, 0.1)\n&gt;&gt;&gt; [\"%g\" % x for x in i0]\n['0', '0.1', '0.2', '0.3', '0.4', '0.5', '0.6', '0.7', '0.8', '0.9', '1']\n&gt;&gt;&gt; \n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":1961560,"reputation":11229,"user_id":1762988,"user_type":"registered","accept_rate":80,"profile_image":"https:\/\/i.stack.imgur.com\/oZMqU.png?s=256&g=1","display_name":"ilse2005","link":"https:\/\/stackoverflow.com\/users\/1762988\/ilse2005"},"is_accepted":false,"score":158,"last_activity_date":1605165658,"last_edit_date":1605165658.0,"creation_date":1456319567,"answer_id":35603223,"question_id":687295,"content_license":"CC BY-SA 4.0","body_markdown":"There are three options:\r\n\r\n1. [Chain `exclude` and `filter`][1]\r\n\r\n       results = Model.objects.exclude(a=True).filter(x=5)\r\n    \r\n2. Use [`Q()` objects][2] and the [`~` operator][3]\r\n\r\n       from django.db.models import Q\r\n       object_list = QuerySet.filter(~Q(a=True), x=5)\r\n\r\n3. Register a [custom lookup function][4]\r\n\r\n       from django.db.models import Lookup\r\n       from django.db.models import Field\r\n\r\n       @Field.register_lookup\r\n       class NotEqual(Lookup):\r\n           lookup_name = &#39;ne&#39;\r\n       \r\n           def as_sql(self, compiler, connection):\r\n               lhs, lhs_params = self.process_lhs(compiler, connection)\r\n               rhs, rhs_params = self.process_rhs(compiler, connection)\r\n               params = lhs_params + rhs_params\r\n               return &#39;%s &lt;&gt; %s&#39; % (lhs, rhs), params\r\n\r\n    Which can the be used as usual:\r\n\r\n       results = Model.objects.exclude(a=True, x__ne=5)\r\n\r\n  [1]: https:\/\/docs.djangoproject.com\/en\/stable\/topics\/db\/queries\/#retrieving-specific-objects-with-filters\r\n  [2]: https:\/\/docs.djangoproject.com\/en\/stable\/ref\/models\/querysets\/#q-objects\r\n  [3]: https:\/\/docs.djangoproject.com\/en\/stable\/topics\/db\/queries\/#complex-lookups-with-q-objects\r\n  [4]: https:\/\/docs.djangoproject.com\/en\/stable\/howto\/custom-lookups\/#a-lookup-example\r\n","body":"<p>There are three options:<\/p>\n<ol>\n<li><p><a href=\"https:\/\/docs.djangoproject.com\/en\/stable\/topics\/db\/queries\/#retrieving-specific-objects-with-filters\" rel=\"noreferrer\">Chain <code>exclude<\/code> and <code>filter<\/code><\/a><\/p>\n<pre><code>results = Model.objects.exclude(a=True).filter(x=5)\n<\/code><\/pre>\n<\/li>\n<li><p>Use <a href=\"https:\/\/docs.djangoproject.com\/en\/stable\/ref\/models\/querysets\/#q-objects\" rel=\"noreferrer\"><code>Q()<\/code> objects<\/a> and the <a href=\"https:\/\/docs.djangoproject.com\/en\/stable\/topics\/db\/queries\/#complex-lookups-with-q-objects\" rel=\"noreferrer\"><code>~<\/code> operator<\/a><\/p>\n<pre><code>from django.db.models import Q\nobject_list = QuerySet.filter(~Q(a=True), x=5)\n<\/code><\/pre>\n<\/li>\n<li><p>Register a <a href=\"https:\/\/docs.djangoproject.com\/en\/stable\/howto\/custom-lookups\/#a-lookup-example\" rel=\"noreferrer\">custom lookup function<\/a><\/p>\n<pre><code>from django.db.models import Lookup\nfrom django.db.models import Field\n\n@Field.register_lookup\nclass NotEqual(Lookup):\n    lookup_name = 'ne'\n\n    def as_sql(self, compiler, connection):\n        lhs, lhs_params = self.process_lhs(compiler, connection)\n        rhs, rhs_params = self.process_rhs(compiler, connection)\n        params = lhs_params + rhs_params\n        return '%s &lt;&gt; %s' % (lhs, rhs), params\n<\/code><\/pre>\n<p>Which can the be used as usual:<\/p>\n<pre><code>results = Model.objects.exclude(a=True, x__ne=5)\n<\/code><\/pre>\n<\/li>\n<\/ol>\n","community_owned_date":null},{"owner":{"account_id":63202,"reputation":6497,"user_id":187237,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/3a7ac5065d6a94863ed75356c34812bb?s=256&d=identicon&r=PG","display_name":"David C. Bishop","link":"https:\/\/stackoverflow.com\/users\/187237\/david-c-bishop"},"is_accepted":false,"score":156,"last_activity_date":1638181625,"last_edit_date":1638181625.0,"creation_date":1383963759,"answer_id":19871661,"question_id":193161,"content_license":"CC BY-SA 4.0","body_markdown":"Check out [Open Sourcing a Python Project the Right Way](https:\/\/web.archive.org\/web\/20201214181824\/https:\/\/www.jeffknupp.com\/blog\/2013\/08\/16\/open-sourcing-a-python-project-the-right-way\/).\r\n\r\nLet me excerpt the *project layout* part of that excellent article:\r\n\r\n&gt; When setting up a project, the layout (or directory structure) is important to get right. A sensible layout means that potential contributors don&#39;t have to spend forever hunting for a piece of code; file locations are intuitive. Since we&#39;re dealing with an existing project, it means you&#39;ll probably need to move some stuff around.\r\n&gt;\r\n&gt; Let&#39;s start at the top. Most projects have a number of top-level files (like setup.py, README.md, requirements.txt, etc). There are then three directories that every project should have:\r\n&gt;\r\n&gt; * A docs directory containing project documentation\r\n&gt; * A directory named with the project&#39;s name which stores the actual Python package\r\n&gt; * A test directory in one of two places\r\n&gt;   *  Under the package directory containing test code and resources\r\n&gt;   * As a stand-alone top level directory\r\n&gt; To get a better sense of how your files should be organized, here&#39;s a simplified snapshot of the layout for one of my projects, sandman:\r\n&gt; \r\n&gt; ```none\r\n&gt; $ pwd\r\n&gt; ~\/code\/sandman\r\n&gt; $ tree\r\n&gt; .\r\n&gt; |- LICENSE\r\n&gt; |- README.md\r\n&gt; |- TODO.md\r\n&gt; |- docs\r\n&gt; |   |-- conf.py\r\n&gt; |   |-- generated\r\n&gt; |   |-- index.rst\r\n&gt; |   |-- installation.rst\r\n&gt; |   |-- modules.rst\r\n&gt; |   |-- quickstart.rst\r\n&gt; |   |-- sandman.rst\r\n&gt; |- requirements.txt\r\n&gt; |- sandman\r\n&gt; |   |-- __init__.py\r\n&gt; |   |-- exception.py\r\n&gt; |   |-- model.py\r\n&gt; |   |-- sandman.py\r\n&gt; |   |-- test\r\n&gt; |       |-- models.py\r\n&gt; |       |-- test_sandman.py\r\n&gt; |- setup.py\r\n&gt; ```\r\n&gt;\r\n&gt; As you can see, there are some top level files, a docs directory (generated is an empty directory where sphinx will put the generated documentation), a sandman directory, and a test directory under sandman.\r\n","body":"<p>Check out <a href=\"https:\/\/web.archive.org\/web\/20201214181824\/https:\/\/www.jeffknupp.com\/blog\/2013\/08\/16\/open-sourcing-a-python-project-the-right-way\/\" rel=\"noreferrer\">Open Sourcing a Python Project the Right Way<\/a>.<\/p>\n<p>Let me excerpt the <em>project layout<\/em> part of that excellent article:<\/p>\n<blockquote>\n<p>When setting up a project, the layout (or directory structure) is important to get right. A sensible layout means that potential contributors don't have to spend forever hunting for a piece of code; file locations are intuitive. Since we're dealing with an existing project, it means you'll probably need to move some stuff around.<\/p>\n<p>Let's start at the top. Most projects have a number of top-level files (like setup.py, README.md, requirements.txt, etc). There are then three directories that every project should have:<\/p>\n<ul>\n<li>A docs directory containing project documentation<\/li>\n<li>A directory named with the project's name which stores the actual Python package<\/li>\n<li>A test directory in one of two places\n<ul>\n<li>Under the package directory containing test code and resources<\/li>\n<li>As a stand-alone top level directory\nTo get a better sense of how your files should be organized, here's a simplified snapshot of the layout for one of my projects, sandman:<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<pre class=\"lang-none prettyprint-override\"><code>$ pwd\n~\/code\/sandman\n$ tree\n.\n|- LICENSE\n|- README.md\n|- TODO.md\n|- docs\n|   |-- conf.py\n|   |-- generated\n|   |-- index.rst\n|   |-- installation.rst\n|   |-- modules.rst\n|   |-- quickstart.rst\n|   |-- sandman.rst\n|- requirements.txt\n|- sandman\n|   |-- __init__.py\n|   |-- exception.py\n|   |-- model.py\n|   |-- sandman.py\n|   |-- test\n|       |-- models.py\n|       |-- test_sandman.py\n|- setup.py\n<\/code><\/pre>\n<p>As you can see, there are some top level files, a docs directory (generated is an empty directory where sphinx will put the generated documentation), a sandman directory, and a test directory under sandman.<\/p>\n<\/blockquote>\n","community_owned_date":null},{"owner":{"account_id":40459,"reputation":13529,"user_id":117268,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/7960f43b3a2012753afecc0e4591217c?s=256&d=identicon&r=PG","display_name":"Emil Stenstr&#246;m","link":"https:\/\/stackoverflow.com\/users\/117268\/emil-stenstr%c3%b6m"},"is_accepted":false,"score":156,"last_activity_date":1532595352,"last_edit_date":1532595352.0,"creation_date":1424351141,"answer_id":28607213,"question_id":8270092,"content_license":"CC BY-SA 4.0","body_markdown":"An alternative is to use regular expressions and match [these strange white-space characters][1] too. Here are some examples:\r\n\r\n**Remove ALL spaces in a string, even between words:**\r\n\r\n    import re\r\n    sentence = re.sub(r&quot;\\s+&quot;, &quot;&quot;, sentence, flags=re.UNICODE)\r\n\r\n**Remove spaces in the BEGINNING of a string:**\r\n\r\n    import re\r\n    sentence = re.sub(r&quot;^\\s+&quot;, &quot;&quot;, sentence, flags=re.UNICODE)\r\n\r\n**Remove spaces in the END of a string:**\r\n\r\n    import re\r\n    sentence = re.sub(r&quot;\\s+$&quot;, &quot;&quot;, sentence, flags=re.UNICODE)\r\n\r\n**Remove spaces both in the BEGINNING and in the END of a string:**\r\n\r\n    import re\r\n    sentence = re.sub(&quot;^\\s+|\\s+$&quot;, &quot;&quot;, sentence, flags=re.UNICODE)\r\n\r\n**Remove ONLY DUPLICATE spaces:**     \r\n\r\n    import re\r\n    sentence = &quot; &quot;.join(re.split(&quot;\\s+&quot;, sentence, flags=re.UNICODE))\r\n\r\n(All examples work in both Python 2 and Python 3)\r\n\r\n  [1]: http:\/\/en.wikipedia.org\/wiki\/Whitespace_character#Unicode","body":"<p>An alternative is to use regular expressions and match <a href=\"http:\/\/en.wikipedia.org\/wiki\/Whitespace_character#Unicode\" rel=\"noreferrer\">these strange white-space characters<\/a> too. Here are some examples:<\/p>\n\n<p><strong>Remove ALL spaces in a string, even between words:<\/strong><\/p>\n\n<pre><code>import re\nsentence = re.sub(r\"\\s+\", \"\", sentence, flags=re.UNICODE)\n<\/code><\/pre>\n\n<p><strong>Remove spaces in the BEGINNING of a string:<\/strong><\/p>\n\n<pre><code>import re\nsentence = re.sub(r\"^\\s+\", \"\", sentence, flags=re.UNICODE)\n<\/code><\/pre>\n\n<p><strong>Remove spaces in the END of a string:<\/strong><\/p>\n\n<pre><code>import re\nsentence = re.sub(r\"\\s+$\", \"\", sentence, flags=re.UNICODE)\n<\/code><\/pre>\n\n<p><strong>Remove spaces both in the BEGINNING and in the END of a string:<\/strong><\/p>\n\n<pre><code>import re\nsentence = re.sub(\"^\\s+|\\s+$\", \"\", sentence, flags=re.UNICODE)\n<\/code><\/pre>\n\n<p><strong>Remove ONLY DUPLICATE spaces:<\/strong>     <\/p>\n\n<pre><code>import re\nsentence = \" \".join(re.split(\"\\s+\", sentence, flags=re.UNICODE))\n<\/code><\/pre>\n\n<p>(All examples work in both Python 2 and Python 3)<\/p>\n","community_owned_date":null},{"owner":{"account_id":16316,"reputation":162845,"user_id":35364,"user_type":"registered","accept_rate":72,"profile_image":"https:\/\/www.gravatar.com\/avatar\/f11512869fe2f8d87a2f2b687b76686c?s=256&d=identicon&r=PG","display_name":"hasen","link":"https:\/\/stackoverflow.com\/users\/35364\/hasen"},"is_accepted":true,"score":155,"last_activity_date":1484245807,"last_edit_date":1484245807.0,"creation_date":1238767763,"answer_id":714070,"question_id":714063,"content_license":"CC BY-SA 3.0","body_markdown":"It seems that the problem is not related to the module being in a parent directory or anything like that.\r\n\r\nYou need to add the directory that contains `ptdraft` to PYTHONPATH\r\n\r\nYou said that `import nib` worked with you, that probably means that you added `ptdraft` itself (not its parent) to PYTHONPATH.\r\n\r\n\r\n\r\n","body":"<p>It seems that the problem is not related to the module being in a parent directory or anything like that.<\/p>\n\n<p>You need to add the directory that contains <code>ptdraft<\/code> to PYTHONPATH<\/p>\n\n<p>You said that <code>import nib<\/code> worked with you, that probably means that you added <code>ptdraft<\/code> itself (not its parent) to PYTHONPATH.<\/p>\n","community_owned_date":null},{"owner":{"account_id":274608,"reputation":9611,"user_id":566942,"user_type":"registered","accept_rate":83,"profile_image":"https:\/\/www.gravatar.com\/avatar\/84830a0de495c35adb8712dbe6f23976?s=256&d=identicon&r=PG","display_name":"saroele","link":"https:\/\/stackoverflow.com\/users\/566942\/saroele"},"is_accepted":false,"score":155,"last_activity_date":1472756239,"last_edit_date":1472756239.0,"creation_date":1329162359,"answer_id":9266979,"question_id":3501382,"content_license":"CC BY-SA 3.0","body_markdown":"All proposed answers so far seem to miss the fact that a double (floats in python are actually doubles) can also be an integer (if it has nothing after the decimal point).  I use the built-in `is_integer()` method on doubles to check this.\r\n\r\nExample (to do something every xth time in a for loop):\r\n\r\n    for index in range(y): \r\n        # do something\r\n        if (index\/x.).is_integer():\r\n            # do something special\r\n \r\nEdit:\r\n\r\nYou can always convert to a float before calling this method. The three possibilities:\r\n\r\n    &gt;&gt;&gt; float(5).is_integer()\r\n    True\r\n    &gt;&gt;&gt; float(5.1).is_integer()\r\n    False\r\n    &gt;&gt;&gt; float(5.0).is_integer()\r\n    True\r\n\r\nOtherwise, you could check if it is an int first like Agostino said:\r\n\r\n    def is_int(val):\r\n        if type(val) == int:\r\n            return True\r\n        else:\r\n            if val.is_integer():\r\n                return True\r\n            else:\r\n                return False","body":"<p>All proposed answers so far seem to miss the fact that a double (floats in python are actually doubles) can also be an integer (if it has nothing after the decimal point).  I use the built-in <code>is_integer()<\/code> method on doubles to check this.<\/p>\n\n<p>Example (to do something every xth time in a for loop):<\/p>\n\n<pre><code>for index in range(y): \n    # do something\n    if (index\/x.).is_integer():\n        # do something special\n<\/code><\/pre>\n\n<p>Edit:<\/p>\n\n<p>You can always convert to a float before calling this method. The three possibilities:<\/p>\n\n<pre><code>&gt;&gt;&gt; float(5).is_integer()\nTrue\n&gt;&gt;&gt; float(5.1).is_integer()\nFalse\n&gt;&gt;&gt; float(5.0).is_integer()\nTrue\n<\/code><\/pre>\n\n<p>Otherwise, you could check if it is an int first like Agostino said:<\/p>\n\n<pre><code>def is_int(val):\n    if type(val) == int:\n        return True\n    else:\n        if val.is_integer():\n            return True\n        else:\n            return False\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":3653207,"reputation":1901,"user_id":3993405,"user_type":"registered","accept_rate":61,"profile_image":"https:\/\/www.gravatar.com\/avatar\/1aba72997b6778322fd3554af0c0eba8?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"desmond","link":"https:\/\/stackoverflow.com\/users\/3993405\/desmond"},"is_accepted":false,"score":154,"last_activity_date":1538101768,"last_edit_date":null,"creation_date":1538101768,"answer_id":52547461,"question_id":18172851,"content_license":"CC BY-SA 4.0","body_markdown":"just to add another solution, particularly useful if you are using the new pandas assessors, other solutions will replace the original pandas and lose the assessors\r\n\r\n    df.drop(df.loc[df[&#39;line_race&#39;]==0].index, inplace=True)","body":"<p>just to add another solution, particularly useful if you are using the new pandas assessors, other solutions will replace the original pandas and lose the assessors<\/p>\n\n<pre><code>df.drop(df.loc[df['line_race']==0].index, inplace=True)\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":42163,"reputation":26195,"user_id":122763,"user_type":"registered","accept_rate":88,"profile_image":"https:\/\/i.stack.imgur.com\/7YWpy.jpg?s=256&g=1","display_name":"Mark E. Haase","link":"https:\/\/stackoverflow.com\/users\/122763\/mark-e-haase"},"is_accepted":false,"score":150,"last_activity_date":1438107974,"last_edit_date":1438107974.0,"creation_date":1380469270,"answer_id":19079887,"question_id":2104080,"content_license":"CC BY-SA 3.0","body_markdown":"The other answers work for real files, but if you need something that works for &quot;file-like objects&quot;, try this:\r\n\r\n    # f is a file-like object. \r\n    f.seek(0, os.SEEK_END)\r\n    size = f.tell()\r\n\r\nIt works for real files and StringIO&#39;s, in my limited testing. (Python 2.7.3.) The &quot;file-like object&quot; API isn&#39;t really a rigorous interface, of course, but the [API documentation][1] suggests that file-like objects should support `seek()` and `tell()`.\r\n\r\n**Edit**\r\n\r\nAnother difference between this and `os.stat()` is that you can `stat()` a file even if you don&#39;t have permission to read it. Obviously the seek\/tell approach won&#39;t work unless you have read permission.\r\n\r\n**Edit 2** \r\n\r\nAt Jonathon&#39;s suggestion, here&#39;s a paranoid version. (The version above leaves the file pointer at the end of the file, so if you were to try to read from the file, you&#39;d get zero bytes back!)\r\n\r\n    # f is a file-like object. \r\n    old_file_position = f.tell()\r\n    f.seek(0, os.SEEK_END)\r\n    size = f.tell()\r\n    f.seek(old_file_position, os.SEEK_SET)\r\n\r\n  [1]: https:\/\/docs.python.org\/2\/library\/stdtypes.html#file-objects","body":"<p>The other answers work for real files, but if you need something that works for \"file-like objects\", try this:<\/p>\n\n<pre><code># f is a file-like object. \nf.seek(0, os.SEEK_END)\nsize = f.tell()\n<\/code><\/pre>\n\n<p>It works for real files and StringIO's, in my limited testing. (Python 2.7.3.) The \"file-like object\" API isn't really a rigorous interface, of course, but the <a href=\"https:\/\/docs.python.org\/2\/library\/stdtypes.html#file-objects\" rel=\"noreferrer\">API documentation<\/a> suggests that file-like objects should support <code>seek()<\/code> and <code>tell()<\/code>.<\/p>\n\n<p><strong>Edit<\/strong><\/p>\n\n<p>Another difference between this and <code>os.stat()<\/code> is that you can <code>stat()<\/code> a file even if you don't have permission to read it. Obviously the seek\/tell approach won't work unless you have read permission.<\/p>\n\n<p><strong>Edit 2<\/strong> <\/p>\n\n<p>At Jonathon's suggestion, here's a paranoid version. (The version above leaves the file pointer at the end of the file, so if you were to try to read from the file, you'd get zero bytes back!)<\/p>\n\n<pre><code># f is a file-like object. \nold_file_position = f.tell()\nf.seek(0, os.SEEK_END)\nsize = f.tell()\nf.seek(old_file_position, os.SEEK_SET)\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":1826290,"reputation":3751,"user_id":1658999,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/Ol28p.jpg?s=256&g=1","display_name":"Siva Mandadi","link":"https:\/\/stackoverflow.com\/users\/1658999\/siva-mandadi"},"is_accepted":false,"score":146,"last_activity_date":1407373155,"last_edit_date":null,"creation_date":1407373155,"answer_id":25172642,"question_id":303200,"content_license":"CC BY-SA 3.0","body_markdown":"    import shutil\r\n    shutil.rmtree(dest, ignore_errors=True)","body":"<pre><code>import shutil\nshutil.rmtree(dest, ignore_errors=True)\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":5474,"reputation":15086,"user_id":8819,"user_type":"registered","accept_rate":90,"profile_image":"https:\/\/www.gravatar.com\/avatar\/1e4e8e8e23ab56938797ddb1b9ad9fef?s=256&d=identicon&r=PG","display_name":"Ryan","link":"https:\/\/stackoverflow.com\/users\/8819\/ryan"},"is_accepted":false,"score":145,"last_activity_date":1571918559,"last_edit_date":1571918559.0,"creation_date":1232689821,"answer_id":472017,"question_id":472000,"content_license":"CC BY-SA 4.0","body_markdown":"You would want to use `__slots__` if you are going to instantiate a lot (hundreds, thousands) of objects of the same class. `__slots__` only exists as a memory optimization tool.\r\n\r\nIt&#39;s highly discouraged to use `__slots__` for constraining attribute creation.\r\n\r\nPickling objects with `__slots__` won&#39;t work with the default (oldest) pickle protocol; it&#39;s necessary to specify a later version.\r\n\r\nSome other introspection features of python may also be adversely affected.\r\n\r\n","body":"<p>You would want to use <code>__slots__<\/code> if you are going to instantiate a lot (hundreds, thousands) of objects of the same class. <code>__slots__<\/code> only exists as a memory optimization tool.<\/p>\n\n<p>It's highly discouraged to use <code>__slots__<\/code> for constraining attribute creation.<\/p>\n\n<p>Pickling objects with <code>__slots__<\/code> won't work with the default (oldest) pickle protocol; it's necessary to specify a later version.<\/p>\n\n<p>Some other introspection features of python may also be adversely affected.<\/p>\n","community_owned_date":null},{"owner":{"account_id":4060,"reputation":302120,"user_id":5987,"user_type":"registered","accept_rate":55,"profile_image":"https:\/\/www.gravatar.com\/avatar\/2a1f9f4986b58015691eb2014e78869f?s=256&d=identicon&r=PG","display_name":"Mark Ransom","link":"https:\/\/stackoverflow.com\/users\/5987\/mark-ransom"},"is_accepted":false,"score":143,"last_activity_date":1272251755,"last_edit_date":null,"creation_date":1272251755,"answer_id":2710959,"question_id":2710940,"content_license":"CC BY-SA 2.5","body_markdown":"Code should be written to be understandable to the programmer first, and the compiler or interpreter second. The &quot;is not&quot; construct resembles English more closely than &quot;not is&quot;.","body":"<p>Code should be written to be understandable to the programmer first, and the compiler or interpreter second. The \"is not\" construct resembles English more closely than \"not is\".<\/p>\n","community_owned_date":null},{"owner":{"account_id":1228,"reputation":76788,"user_id":1630,"user_type":"registered","accept_rate":67,"profile_image":"https:\/\/i.stack.imgur.com\/jNryb.jpg?s=256&g=1","display_name":"Ashwin Nanjappa","link":"https:\/\/stackoverflow.com\/users\/1630\/ashwin-nanjappa"},"is_accepted":false,"score":142,"last_activity_date":1398338758,"last_edit_date":1398338758.0,"creation_date":1254883653,"answer_id":1529241,"question_id":36932,"content_license":"CC BY-SA 3.0","body_markdown":"The best solution for you would depend on what you require from your *fake* **`enum`**.\r\n\r\n**Simple enum:**\r\n\r\nIf you need the **`enum`** as only a list of *names* identifying different *items*, the solution by **Mark Harrison** (above) is great:\r\n\r\n    Pen, Pencil, Eraser = range(0, 3)\r\n\r\nUsing a **`range`** also allows you to set any *starting value*:\r\n\r\n    Pen, Pencil, Eraser = range(9, 12)\r\n\r\nIn addition to the above, if you also require that the items belong to a *container* of some sort, then embed them in a class:\r\n\r\n    class Stationery:\r\n        Pen, Pencil, Eraser = range(0, 3)\r\n\r\nTo use the enum item, you would now need to use the container name and the item name:\r\n\r\n    stype = Stationery.Pen\r\n\r\n**Complex enum:**\r\n\r\nFor long lists of enum or more complicated uses of enum, these solutions will not suffice. You could look to the recipe by Will Ware for *Simulating Enumerations in Python* published in the *Python Cookbook*. An online version of that is available [here][1].\r\n\r\n**More info:**\r\n\r\n[*PEP 354: Enumerations in Python*][2] has the interesting details of a proposal for enum in Python and why it was rejected.\r\n\r\n\r\n  [1]: http:\/\/code.activestate.com\/recipes\/67107\/\r\n  [2]: http:\/\/www.python.org\/dev\/peps\/pep-0354\/","body":"<p>The best solution for you would depend on what you require from your <em>fake<\/em> <strong><code>enum<\/code><\/strong>.<\/p>\n\n<p><strong>Simple enum:<\/strong><\/p>\n\n<p>If you need the <strong><code>enum<\/code><\/strong> as only a list of <em>names<\/em> identifying different <em>items<\/em>, the solution by <strong>Mark Harrison<\/strong> (above) is great:<\/p>\n\n<pre><code>Pen, Pencil, Eraser = range(0, 3)\n<\/code><\/pre>\n\n<p>Using a <strong><code>range<\/code><\/strong> also allows you to set any <em>starting value<\/em>:<\/p>\n\n<pre><code>Pen, Pencil, Eraser = range(9, 12)\n<\/code><\/pre>\n\n<p>In addition to the above, if you also require that the items belong to a <em>container<\/em> of some sort, then embed them in a class:<\/p>\n\n<pre><code>class Stationery:\n    Pen, Pencil, Eraser = range(0, 3)\n<\/code><\/pre>\n\n<p>To use the enum item, you would now need to use the container name and the item name:<\/p>\n\n<pre><code>stype = Stationery.Pen\n<\/code><\/pre>\n\n<p><strong>Complex enum:<\/strong><\/p>\n\n<p>For long lists of enum or more complicated uses of enum, these solutions will not suffice. You could look to the recipe by Will Ware for <em>Simulating Enumerations in Python<\/em> published in the <em>Python Cookbook<\/em>. An online version of that is available <a href=\"http:\/\/code.activestate.com\/recipes\/67107\/\" rel=\"noreferrer\">here<\/a>.<\/p>\n\n<p><strong>More info:<\/strong><\/p>\n\n<p><a href=\"http:\/\/www.python.org\/dev\/peps\/pep-0354\/\" rel=\"noreferrer\"><em>PEP 354: Enumerations in Python<\/em><\/a> has the interesting details of a proposal for enum in Python and why it was rejected.<\/p>\n","community_owned_date":1316309214.0},{"owner":{"account_id":15562,"reputation":125386,"user_id":33006,"user_type":"registered","accept_rate":88,"profile_image":"https:\/\/www.gravatar.com\/avatar\/3acb8bae5a2b5a28f6fe522a4ea9b873?s=256&d=identicon&r=PG","display_name":"Martin v. L&#246;wis","link":"https:\/\/stackoverflow.com\/users\/33006\/martin-v-l%c3%b6wis"},"is_accepted":false,"score":139,"last_activity_date":1227798487,"last_edit_date":null,"creation_date":1227798487,"answer_id":323993,"question_id":323972,"content_license":"CC BY-SA 2.5","body_markdown":"There is no official API to do that, no.\r\n\r\nYou need to use platform API to kill the thread, e.g. pthread_kill, or TerminateThread. You can access such API e.g. through pythonwin, or through ctypes.\r\n\r\nNotice that this is inherently unsafe. It will likely lead to uncollectable garbage (from local variables of the stack frames that become garbage), and may lead to deadlocks, if the thread being killed has the GIL at the point when it is killed.","body":"<p>There is no official API to do that, no.<\/p>\n\n<p>You need to use platform API to kill the thread, e.g. pthread_kill, or TerminateThread. You can access such API e.g. through pythonwin, or through ctypes.<\/p>\n\n<p>Notice that this is inherently unsafe. It will likely lead to uncollectable garbage (from local variables of the stack frames that become garbage), and may lead to deadlocks, if the thread being killed has the GIL at the point when it is killed.<\/p>\n","community_owned_date":null},{"owner":{"account_id":5375692,"reputation":1583,"user_id":4282700,"user_type":"registered","profile_image":"https:\/\/graph.facebook.com\/100001999695073\/picture?type=large","display_name":"Shinbero","link":"https:\/\/stackoverflow.com\/users\/4282700\/shinbero"},"is_accepted":false,"score":139,"last_activity_date":1681245779,"last_edit_date":1681245779.0,"creation_date":1424846267,"answer_id":28712742,"question_id":714063,"content_license":"CC BY-SA 4.0","body_markdown":"You can use an OS-dependent path in &quot;module search path&quot; which is listed in **sys.path**.\r\n\r\nSo you can easily add the parent directory like the following:\r\n\r\n    import sys\r\n    sys.path.insert(0, &#39;..&#39;)\r\n\r\nIf you want to add the parent-parent directory,\r\n\r\n    sys.path.insert(0, &#39;..\/..&#39;)\r\n\r\nThis works both in [Python&amp;nbsp;2][1] and [Python&amp;nbsp;3][2].\r\n\r\n  [1]: https:\/\/en.wikipedia.org\/wiki\/History_of_Python#Version_2\r\n  [2]: https:\/\/en.wikipedia.org\/wiki\/History_of_Python#Version_3\r\n\r\n","body":"<p>You can use an OS-dependent path in &quot;module search path&quot; which is listed in <strong>sys.path<\/strong>.<\/p>\n<p>So you can easily add the parent directory like the following:<\/p>\n<pre><code>import sys\nsys.path.insert(0, '..')\n<\/code><\/pre>\n<p>If you want to add the parent-parent directory,<\/p>\n<pre><code>sys.path.insert(0, '..\/..')\n<\/code><\/pre>\n<p>This works both in <a href=\"https:\/\/en.wikipedia.org\/wiki\/History_of_Python#Version_2\" rel=\"noreferrer\">Python\u00a02<\/a> and <a href=\"https:\/\/en.wikipedia.org\/wiki\/History_of_Python#Version_3\" rel=\"noreferrer\">Python\u00a03<\/a>.<\/p>\n","community_owned_date":null},{"owner":{"account_id":8962294,"reputation":1865,"user_id":8587899,"user_type":"registered","profile_image":"https:\/\/graph.facebook.com\/1753587434927148\/picture?type=large","display_name":"Declan Nnadozie","link":"https:\/\/stackoverflow.com\/users\/8587899\/declan-nnadozie"},"is_accepted":false,"score":135,"last_activity_date":1623204214,"last_edit_date":1623204214.0,"creation_date":1528236231,"answer_id":50709581,"question_id":9233027,"content_license":"CC BY-SA 4.0","body_markdown":"If `file = open(filename, encoding=&quot;utf-8&quot;)` doesn&#39;t work, try  \r\n`file = open(filename, errors=&quot;ignore&quot;)`, if you want to remove unneeded characters. ([docs][1])\r\n\r\n\r\n  [1]: https:\/\/docs.python.org\/3\/howto\/unicode.html","body":"<p>If <code>file = open(filename, encoding=&quot;utf-8&quot;)<\/code> doesn't work, try<br \/>\n<code>file = open(filename, errors=&quot;ignore&quot;)<\/code>, if you want to remove unneeded characters. (<a href=\"https:\/\/docs.python.org\/3\/howto\/unicode.html\" rel=\"noreferrer\">docs<\/a>)<\/p>\n","community_owned_date":null},{"owner":{"account_id":8717,"reputation":20800,"user_id":15842,"user_type":"registered","accept_rate":59,"profile_image":"https:\/\/www.gravatar.com\/avatar\/58d77327a8f46041462b31c117e5c51a?s=256&d=identicon&r=PG","display_name":"Gregg Lind","link":"https:\/\/stackoverflow.com\/users\/15842\/gregg-lind"},"is_accepted":false,"score":132,"last_activity_date":1392331303,"last_edit_date":1392331303.0,"creation_date":1233151427,"answer_id":487718,"question_id":437589,"content_license":"CC BY-SA 3.0","body_markdown":" It can be especially difficult to delete a module if it is not pure Python.\r\n\r\nHere is some information from: [How do I really delete an imported module?][1]\r\n\r\n\r\n\r\n&gt; You can use sys.getrefcount() to find out the actual number of\r\n&gt; references.\r\n&gt; \r\n\r\n    &gt;&gt;&gt; import sys, empty, os\r\n    &gt;&gt;&gt; sys.getrefcount(sys)\r\n    9\r\n    &gt;&gt;&gt; sys.getrefcount(os)\r\n    6\r\n    &gt;&gt;&gt; sys.getrefcount(empty)\r\n    3\r\n\r\n&gt; \r\n&gt; Numbers greater than 3 indicate that\r\n&gt; it will be hard to get rid of the\r\n&gt; module. The homegrown &quot;empty&quot;\r\n&gt; (containing nothing) module should be\r\n&gt; garbage collected after\r\n&gt; \r\n\r\n    &gt;&gt;&gt; del sys.modules[&quot;empty&quot;]\r\n    &gt;&gt;&gt; del empty\r\n\r\n&gt; \r\n&gt; as the third reference is an artifact\r\n&gt; of the getrefcount() function.\r\n\r\n\r\n  [1]: http:\/\/web.archive.org\/web\/20080926094551\/http:\/\/mail.python.org\/pipermail\/python-list\/2003-December\/241654.html","body":"<p>It can be especially difficult to delete a module if it is not pure Python.<\/p>\n\n<p>Here is some information from: <a href=\"http:\/\/web.archive.org\/web\/20080926094551\/http:\/\/mail.python.org\/pipermail\/python-list\/2003-December\/241654.html\" rel=\"noreferrer\">How do I really delete an imported module?<\/a><\/p>\n\n<blockquote>\n  <p>You can use sys.getrefcount() to find out the actual number of\n  references.<\/p>\n<\/blockquote>\n\n<pre><code>&gt;&gt;&gt; import sys, empty, os\n&gt;&gt;&gt; sys.getrefcount(sys)\n9\n&gt;&gt;&gt; sys.getrefcount(os)\n6\n&gt;&gt;&gt; sys.getrefcount(empty)\n3\n<\/code><\/pre>\n\n<blockquote>\n  <p>Numbers greater than 3 indicate that\n  it will be hard to get rid of the\n  module. The homegrown \"empty\"\n  (containing nothing) module should be\n  garbage collected after<\/p>\n<\/blockquote>\n\n<pre><code>&gt;&gt;&gt; del sys.modules[\"empty\"]\n&gt;&gt;&gt; del empty\n<\/code><\/pre>\n\n<blockquote>\n  <p>as the third reference is an artifact\n  of the getrefcount() function.<\/p>\n<\/blockquote>\n","community_owned_date":null},{"owner":{"account_id":449738,"reputation":7146,"user_id":844700,"user_type":"registered","accept_rate":75,"profile_image":"https:\/\/www.gravatar.com\/avatar\/cb30c78fb2c15930d0074301e1e2b7ac?s=256&d=identicon&r=PG","display_name":"The Demz","link":"https:\/\/stackoverflow.com\/users\/844700\/the-demz"},"is_accepted":false,"score":132,"last_activity_date":1596634006,"last_edit_date":1596634006.0,"creation_date":1354617039,"answer_id":13700868,"question_id":2970608,"content_license":"CC BY-SA 4.0","body_markdown":"[namedtuple][1] is a **factory function** for making a tuple class. With that class we can create tuples that are callable by name also.\r\n\r\n    import collections\r\n    \r\n    #Create a namedtuple class with names &quot;a&quot; &quot;b&quot; &quot;c&quot;\r\n    Row = collections.namedtuple(&quot;Row&quot;, [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;])   \r\n    \r\n    row = Row(a=1,b=2,c=3) #Make a namedtuple from the Row class we created\r\n    \r\n    print row    #Prints: Row(a=1, b=2, c=3)\r\n    print row.a  #Prints: 1\r\n    print row[0] #Prints: 1\r\n    \r\n    row = Row._make([2, 3, 4]) #Make a namedtuple from a list of values\r\n    \r\n    print row   #Prints: Row(a=2, b=3, c=4)\r\n\r\n\r\n  [1]: http:\/\/docs.python.org\/2\/library\/collections.html#collections.namedtuple","body":"<p><a href=\"http:\/\/docs.python.org\/2\/library\/collections.html#collections.namedtuple\" rel=\"noreferrer\">namedtuple<\/a> is a <strong>factory function<\/strong> for making a tuple class. With that class we can create tuples that are callable by name also.<\/p>\n<pre><code>import collections\n\n#Create a namedtuple class with names &quot;a&quot; &quot;b&quot; &quot;c&quot;\nRow = collections.namedtuple(&quot;Row&quot;, [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;])   \n\nrow = Row(a=1,b=2,c=3) #Make a namedtuple from the Row class we created\n\nprint row    #Prints: Row(a=1, b=2, c=3)\nprint row.a  #Prints: 1\nprint row[0] #Prints: 1\n\nrow = Row._make([2, 3, 4]) #Make a namedtuple from a list of values\n\nprint row   #Prints: Row(a=2, b=3, c=4)\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":6383531,"reputation":153646,"user_id":4952130,"user_type":"registered","accept_rate":95,"profile_image":"https:\/\/i.stack.imgur.com\/kKQZw.png?s=256&g=1","display_name":"Dimitris Fasarakis Hilliard","link":"https:\/\/stackoverflow.com\/users\/4952130\/dimitris-fasarakis-hilliard"},"is_accepted":false,"score":132,"last_activity_date":1499358630,"last_edit_date":1499358630.0,"creation_date":1481930359,"answer_id":41193772,"question_id":14379753,"content_license":"CC BY-SA 3.0","body_markdown":"As other answers have stated, the `-&gt;` symbol is used as part of function annotations. In more recent versions of Python `&gt;= 3.5`, though, it has a *defined* meaning. \r\n\r\n[PEP 3107 -- Function Annotations][1] described the specification, defining the grammar changes, the existence of `func.__annotations__` in which they are stored and, the fact that it&#39;s use case is still open. \r\n\r\nIn Python `3.5` though, [PEP 484 -- Type Hints][2] attaches a single meaning to this: `-&gt;` is used to indicate the type that the function returns. It also seems like this will be enforced in future versions as described in [What about existing uses of annotations](https:\/\/www.python.org\/dev\/peps\/pep-0484\/#what-about-existing-uses-of-annotations):\r\n\r\n&gt; The fastest conceivable scheme would introduce silent deprecation of non-type-hint annotations in 3.6, full deprecation in 3.7, and *declare type hints as the only allowed use of annotations in Python 3.8.*\r\n\r\n&lt;sup&gt;(Emphasis mine)&lt;\/sup&gt;\r\n\r\nThis hasn&#39;t been actually implemented as of `3.6` as far as I can tell so it might get bumped to future versions.\r\n\r\nAccording to this, the example you&#39;ve supplied:\r\n\r\n    def f(x) -&gt; 123:\r\n        return x\r\n\r\nwill be forbidden in the future (and in current versions will be confusing), it would need to be changed to:\r\n\r\n    def f(x) -&gt; int:\r\n        return x\r\n\r\nfor it to effectively describe that function `f` returns an object of type `int`.\r\n\r\nThe annotations are not used in any way by Python itself, it pretty much populates and ignores them. It&#39;s up to 3rd party libraries to work with them.\r\n\r\n\r\n  [1]: https:\/\/www.python.org\/dev\/peps\/pep-3107\/\r\n  [2]: https:\/\/www.python.org\/dev\/peps\/pep-0484\/","body":"<p>As other answers have stated, the <code>-&gt;<\/code> symbol is used as part of function annotations. In more recent versions of Python <code>&gt;= 3.5<\/code>, though, it has a <em>defined<\/em> meaning. <\/p>\n\n<p><a href=\"https:\/\/www.python.org\/dev\/peps\/pep-3107\/\" rel=\"noreferrer\">PEP 3107 -- Function Annotations<\/a> described the specification, defining the grammar changes, the existence of <code>func.__annotations__<\/code> in which they are stored and, the fact that it's use case is still open. <\/p>\n\n<p>In Python <code>3.5<\/code> though, <a href=\"https:\/\/www.python.org\/dev\/peps\/pep-0484\/\" rel=\"noreferrer\">PEP 484 -- Type Hints<\/a> attaches a single meaning to this: <code>-&gt;<\/code> is used to indicate the type that the function returns. It also seems like this will be enforced in future versions as described in <a href=\"https:\/\/www.python.org\/dev\/peps\/pep-0484\/#what-about-existing-uses-of-annotations\" rel=\"noreferrer\">What about existing uses of annotations<\/a>:<\/p>\n\n<blockquote>\n  <p>The fastest conceivable scheme would introduce silent deprecation of non-type-hint annotations in 3.6, full deprecation in 3.7, and <em>declare type hints as the only allowed use of annotations in Python 3.8.<\/em><\/p>\n<\/blockquote>\n\n<p><sup>(Emphasis mine)<\/sup><\/p>\n\n<p>This hasn't been actually implemented as of <code>3.6<\/code> as far as I can tell so it might get bumped to future versions.<\/p>\n\n<p>According to this, the example you've supplied:<\/p>\n\n<pre><code>def f(x) -&gt; 123:\n    return x\n<\/code><\/pre>\n\n<p>will be forbidden in the future (and in current versions will be confusing), it would need to be changed to:<\/p>\n\n<pre><code>def f(x) -&gt; int:\n    return x\n<\/code><\/pre>\n\n<p>for it to effectively describe that function <code>f<\/code> returns an object of type <code>int<\/code>.<\/p>\n\n<p>The annotations are not used in any way by Python itself, it pretty much populates and ignores them. It's up to 3rd party libraries to work with them.<\/p>\n","community_owned_date":null},{"owner":{"account_id":8332072,"reputation":39579,"user_id":6260170,"user_type":"registered","accept_rate":92,"profile_image":"https:\/\/www.gravatar.com\/avatar\/9bf6decd8e2acafb6d371c2a1a6f7e1b?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"Chris_Rands","link":"https:\/\/stackoverflow.com\/users\/6260170\/chris-rands"},"is_accepted":false,"score":131,"last_activity_date":1488184979,"last_edit_date":1488184979.0,"creation_date":1484562438,"answer_id":41674238,"question_id":11520492,"content_license":"CC BY-SA 3.0","body_markdown":"Since no-one else has mentioned it, note that `del` (unlike `pop`) allows the removal of a range of indexes because of list slicing:\r\n\r\n    &gt;&gt;&gt; lst = [3, 2, 2, 1]\r\n    &gt;&gt;&gt; del lst[1:]\r\n    &gt;&gt;&gt; lst\r\n    [3]\r\n\r\nThis also allows avoidance of an `IndexError` if the index is not in the list:\r\n\r\n    &gt;&gt;&gt; lst = [3, 2, 2, 1]\r\n    &gt;&gt;&gt; del lst[10:]\r\n    &gt;&gt;&gt; lst\r\n    [3, 2, 2, 1]","body":"<p>Since no-one else has mentioned it, note that <code>del<\/code> (unlike <code>pop<\/code>) allows the removal of a range of indexes because of list slicing:<\/p>\n\n<pre><code>&gt;&gt;&gt; lst = [3, 2, 2, 1]\n&gt;&gt;&gt; del lst[1:]\n&gt;&gt;&gt; lst\n[3]\n<\/code><\/pre>\n\n<p>This also allows avoidance of an <code>IndexError<\/code> if the index is not in the list:<\/p>\n\n<pre><code>&gt;&gt;&gt; lst = [3, 2, 2, 1]\n&gt;&gt;&gt; del lst[10:]\n&gt;&gt;&gt; lst\n[3, 2, 2, 1]\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":32159,"reputation":6125,"user_id":88905,"user_type":"registered","accept_rate":89,"profile_image":"https:\/\/www.gravatar.com\/avatar\/879e6f67c4f70c232fbba554e8f38caa?s=256&d=identicon&r=PG","display_name":"Nathan","link":"https:\/\/stackoverflow.com\/users\/88905\/nathan"},"is_accepted":false,"score":130,"last_activity_date":1654488581,"last_edit_date":1654488581.0,"creation_date":1302512168,"answer_id":5618944,"question_id":5618878,"content_license":"CC BY-SA 4.0","body_markdown":"    xs = [&#39;L&#39;, &#39;O&#39;, &#39;L&#39;]\r\n    lol_string = &#39;&#39;.join(map(str, xs))","body":"<pre><code>xs = ['L', 'O', 'L']\nlol_string = ''.join(map(str, xs))\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":2549573,"reputation":17589,"user_id":2213647,"user_type":"registered","accept_rate":68,"profile_image":"https:\/\/i.stack.imgur.com\/TPTow.png?s=256&g=1","display_name":"twasbrillig","link":"https:\/\/stackoverflow.com\/users\/2213647\/twasbrillig"},"is_accepted":false,"score":129,"last_activity_date":1467304210,"last_edit_date":1467304210.0,"creation_date":1414112702,"answer_id":26539947,"question_id":51520,"content_license":"CC BY-SA 3.0","body_markdown":"You could use the new Python 3.4 library `pathlib`. (You can also get it for Python 2.6 or 2.7 using `pip install pathlib`.) The authors [wrote][1]: &quot;The aim of this library is to provide a simple hierarchy of classes to handle filesystem paths and the common operations users do over them.&quot;\r\n\r\nTo get an absolute path in Windows:\r\n\r\n    &gt;&gt;&gt; from pathlib import Path\r\n    &gt;&gt;&gt; p = Path(&quot;pythonw.exe&quot;).resolve()\r\n    &gt;&gt;&gt; p\r\n    WindowsPath(&#39;C:\/Python27\/pythonw.exe&#39;)\r\n    &gt;&gt;&gt; str(p)\r\n    &#39;C:\\\\Python27\\\\pythonw.exe&#39;\r\n\r\nOr on UNIX:\r\n\r\n    &gt;&gt;&gt; from pathlib import Path\r\n    &gt;&gt;&gt; p = Path(&quot;python3.4&quot;).resolve()\r\n    &gt;&gt;&gt; p\r\n    PosixPath(&#39;\/opt\/python3\/bin\/python3.4&#39;)\r\n    &gt;&gt;&gt; str(p)\r\n    &#39;\/opt\/python3\/bin\/python3.4&#39;\r\n\r\n\r\nDocs are here: https:\/\/docs.python.org\/3\/library\/pathlib.html\r\n\r\n\r\n  [1]: http:\/\/www.python.org\/dev\/peps\/pep-0428\/#abstract","body":"<p>You could use the new Python 3.4 library <code>pathlib<\/code>. (You can also get it for Python 2.6 or 2.7 using <code>pip install pathlib<\/code>.) The authors <a href=\"http:\/\/www.python.org\/dev\/peps\/pep-0428\/#abstract\">wrote<\/a>: \"The aim of this library is to provide a simple hierarchy of classes to handle filesystem paths and the common operations users do over them.\"<\/p>\n\n<p>To get an absolute path in Windows:<\/p>\n\n<pre><code>&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; p = Path(\"pythonw.exe\").resolve()\n&gt;&gt;&gt; p\nWindowsPath('C:\/Python27\/pythonw.exe')\n&gt;&gt;&gt; str(p)\n'C:\\\\Python27\\\\pythonw.exe'\n<\/code><\/pre>\n\n<p>Or on UNIX:<\/p>\n\n<pre><code>&gt;&gt;&gt; from pathlib import Path\n&gt;&gt;&gt; p = Path(\"python3.4\").resolve()\n&gt;&gt;&gt; p\nPosixPath('\/opt\/python3\/bin\/python3.4')\n&gt;&gt;&gt; str(p)\n'\/opt\/python3\/bin\/python3.4'\n<\/code><\/pre>\n\n<p>Docs are here: <a href=\"https:\/\/docs.python.org\/3\/library\/pathlib.html\">https:\/\/docs.python.org\/3\/library\/pathlib.html<\/a><\/p>\n","community_owned_date":null},{"owner":{"account_id":2979090,"reputation":1717,"user_id":3432391,"user_type":"registered","accept_rate":75,"profile_image":"https:\/\/www.gravatar.com\/avatar\/d463ee07137bcc65f940598ebe6ab811?s=256&d=identicon&r=PG","display_name":"Schaki","link":"https:\/\/stackoverflow.com\/users\/3432391\/schaki"},"is_accepted":false,"score":128,"last_activity_date":1608861061,"last_edit_date":1608861061.0,"creation_date":1464088584,"answer_id":37411991,"question_id":15008758,"content_license":"CC BY-SA 4.0","body_markdown":"Here is another variation without extra row\/s to set default values. The boolean value is always assigned, so that it can be used in logical statements without checking beforehand:\r\n\r\n    import argparse\r\n    parser = argparse.ArgumentParser(description=&quot;Parse bool&quot;)\r\n    parser.add_argument(&quot;--do-something&quot;, default=False, action=&quot;store_true&quot;,\r\n                        help=&quot;Flag to do something&quot;)\r\n    args = parser.parse_args()\r\n    \r\n    if args.do_something:\r\n         print(&quot;Do something&quot;)\r\n    else:\r\n         print(&quot;Don&#39;t do something&quot;)\r\n\r\n    print(f&quot;Check that args.do_something={args.do_something} is always a bool.&quot;)\r\n","body":"<p>Here is another variation without extra row\/s to set default values. The boolean value is always assigned, so that it can be used in logical statements without checking beforehand:<\/p>\n<pre><code>import argparse\nparser = argparse.ArgumentParser(description=&quot;Parse bool&quot;)\nparser.add_argument(&quot;--do-something&quot;, default=False, action=&quot;store_true&quot;,\n                    help=&quot;Flag to do something&quot;)\nargs = parser.parse_args()\n\nif args.do_something:\n     print(&quot;Do something&quot;)\nelse:\n     print(&quot;Don't do something&quot;)\n\nprint(f&quot;Check that args.do_something={args.do_something} is always a bool.&quot;)\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":881989,"reputation":2858,"user_id":305324,"user_type":"registered","accept_rate":85,"profile_image":"https:\/\/www.gravatar.com\/avatar\/055a25b1a0fab97ed35c6ec9cf690ab7?s=256&d=identicon&r=PG","display_name":"Patrick","link":"https:\/\/stackoverflow.com\/users\/305324\/patrick"},"is_accepted":false,"score":127,"last_activity_date":1615529278,"last_edit_date":1615529278.0,"creation_date":1359632579,"answer_id":14624923,"question_id":8023306,"content_license":"CC BY-SA 4.0","body_markdown":"I thought it would be interesting to point out which methods are the quickest, and in what scenario:\r\n\r\nHere&#39;s some tests I ran (on a 2012 MacBook Pro)\r\n\r\n```python\r\ndef method1(dict, search_age):\r\n    for name, age in dict.iteritems():\r\n        if age == search_age:\r\n            return name\r\n\r\ndef method2(dict, search_age):\r\n    return [name for name,age in dict.iteritems() if age == search_age]\r\n\r\ndef method3(dict, search_age):\r\n    return dict.keys()[dict.values().index(search_age)]\r\n```\r\n\r\nResults from `profile.run()` on each method 100,000 times:\r\n\r\nMethod 1:\r\n\r\n\t&gt;&gt;&gt; profile.run(&quot;for i in range(0,100000): method1(dict, 16)&quot;)\r\n         200004 function calls in 1.173 seconds\r\n\r\nMethod 2:\r\n\r\n\t&gt;&gt;&gt; profile.run(&quot;for i in range(0,100000): method2(dict, 16)&quot;)\r\n         200004 function calls in 1.222 seconds\r\n\r\nMethod 3:\r\n\r\n\t&gt;&gt;&gt; profile.run(&quot;for i in range(0,100000): method3(dict, 16)&quot;)\r\n         400004 function calls in 2.125 seconds\r\n\r\nSo this shows that for a small dict, method 1 is the quickest. This is most likely because it returns the first match, as opposed to all of the matches like method 2 (see note below).\r\n\r\n-----\r\n\r\nInterestingly, performing the same tests on a dict I have with 2700 entries, I get quite different results (this time run 10,000 times):\r\n\r\nMethod 1:\r\n\r\n\t&gt;&gt;&gt; profile.run(&quot;for i in range(0,10000): method1(UIC_CRS,&#39;7088380&#39;)&quot;)\r\n         20004 function calls in 2.928 seconds\r\n\r\nMethod 2:\r\n\r\n\t&gt;&gt;&gt; profile.run(&quot;for i in range(0,10000): method2(UIC_CRS,&#39;7088380&#39;)&quot;)\r\n         20004 function calls in 3.872 seconds\r\n\r\nMethod 3:\r\n\r\n\t&gt;&gt;&gt; profile.run(&quot;for i in range(0,10000): method3(UIC_CRS,&#39;7088380&#39;)&quot;)\r\n         40004 function calls in 1.176 seconds\r\n\r\n\r\nSo here, method 3 is *much* faster. Just goes to show the size of your dict will affect which method you choose.\r\n\r\nNotes:\r\n+ Method 2 returns a list of *all* names, whereas methods 1 and 3 return only the first match.\r\n+ I have not considered memory usage. I&#39;m not sure if method 3 creates 2 extra lists (`keys()` and `values()`) and stores them in memory.","body":"<p>I thought it would be interesting to point out which methods are the quickest, and in what scenario:<\/p>\n<p>Here's some tests I ran (on a 2012 MacBook Pro)<\/p>\n<pre class=\"lang-py prettyprint-override\"><code>def method1(dict, search_age):\n    for name, age in dict.iteritems():\n        if age == search_age:\n            return name\n\ndef method2(dict, search_age):\n    return [name for name,age in dict.iteritems() if age == search_age]\n\ndef method3(dict, search_age):\n    return dict.keys()[dict.values().index(search_age)]\n<\/code><\/pre>\n<p>Results from <code>profile.run()<\/code> on each method 100,000 times:<\/p>\n<p>Method 1:<\/p>\n<pre><code>&gt;&gt;&gt; profile.run(&quot;for i in range(0,100000): method1(dict, 16)&quot;)\n     200004 function calls in 1.173 seconds\n<\/code><\/pre>\n<p>Method 2:<\/p>\n<pre><code>&gt;&gt;&gt; profile.run(&quot;for i in range(0,100000): method2(dict, 16)&quot;)\n     200004 function calls in 1.222 seconds\n<\/code><\/pre>\n<p>Method 3:<\/p>\n<pre><code>&gt;&gt;&gt; profile.run(&quot;for i in range(0,100000): method3(dict, 16)&quot;)\n     400004 function calls in 2.125 seconds\n<\/code><\/pre>\n<p>So this shows that for a small dict, method 1 is the quickest. This is most likely because it returns the first match, as opposed to all of the matches like method 2 (see note below).<\/p>\n<hr \/>\n<p>Interestingly, performing the same tests on a dict I have with 2700 entries, I get quite different results (this time run 10,000 times):<\/p>\n<p>Method 1:<\/p>\n<pre><code>&gt;&gt;&gt; profile.run(&quot;for i in range(0,10000): method1(UIC_CRS,'7088380')&quot;)\n     20004 function calls in 2.928 seconds\n<\/code><\/pre>\n<p>Method 2:<\/p>\n<pre><code>&gt;&gt;&gt; profile.run(&quot;for i in range(0,10000): method2(UIC_CRS,'7088380')&quot;)\n     20004 function calls in 3.872 seconds\n<\/code><\/pre>\n<p>Method 3:<\/p>\n<pre><code>&gt;&gt;&gt; profile.run(&quot;for i in range(0,10000): method3(UIC_CRS,'7088380')&quot;)\n     40004 function calls in 1.176 seconds\n<\/code><\/pre>\n<p>So here, method 3 is <em>much<\/em> faster. Just goes to show the size of your dict will affect which method you choose.<\/p>\n<p>Notes:<\/p>\n<ul>\n<li>Method 2 returns a list of <em>all<\/em> names, whereas methods 1 and 3 return only the first match.<\/li>\n<li>I have not considered memory usage. I'm not sure if method 3 creates 2 extra lists (<code>keys()<\/code> and <code>values()<\/code>) and stores them in memory.<\/li>\n<\/ul>\n","community_owned_date":null},{"owner":{"account_id":164270,"reputation":2110,"user_id":386925,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/23de2d62fa46d3785970220b5b135b7c?s=256&d=identicon&r=PG","display_name":"Wes Winham","link":"https:\/\/stackoverflow.com\/users\/386925\/wes-winham"},"is_accepted":false,"score":126,"last_activity_date":1395252742,"last_edit_date":null,"creation_date":1395252742,"answer_id":22514625,"question_id":1937622,"content_license":"CC BY-SA 3.0","body_markdown":"The accepted answer is correct, but I would prefer to avoid using `datetime.min.time()` because it&#39;s not obvious to me exactly what it does. If it&#39;s obvious to you, then more power to you. I also feel the same way about the `timetuple` method and the reliance on the ordering.\r\n\r\nIn my opinion, the most readable, explicit way of doing this without relying on the reader to be very familiar with the `datetime` module API is:\r\n\r\n    from datetime import date, datetime\r\n    today = date.today()\r\n    today_with_time = datetime(\r\n        year=today.year, \r\n        month=today.month,\r\n        day=today.day,\r\n    )\r\n\r\nThat&#39;s my take on &quot;explicit is better than implicit.&quot;","body":"<p>The accepted answer is correct, but I would prefer to avoid using <code>datetime.min.time()<\/code> because it's not obvious to me exactly what it does. If it's obvious to you, then more power to you. I also feel the same way about the <code>timetuple<\/code> method and the reliance on the ordering.<\/p>\n\n<p>In my opinion, the most readable, explicit way of doing this without relying on the reader to be very familiar with the <code>datetime<\/code> module API is:<\/p>\n\n<pre><code>from datetime import date, datetime\ntoday = date.today()\ntoday_with_time = datetime(\n    year=today.year, \n    month=today.month,\n    day=today.day,\n)\n<\/code><\/pre>\n\n<p>That's my take on \"explicit is better than implicit.\"<\/p>\n","community_owned_date":null},{"owner":{"account_id":25130,"reputation":2300,"user_id":64351,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/4903067d583db5942d226aa2c74ec0f2?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"Alan Rowarth","link":"https:\/\/stackoverflow.com\/users\/64351\/alan-rowarth"},"is_accepted":false,"score":124,"last_activity_date":1606192242,"last_edit_date":1606192242.0,"creation_date":1234221491,"answer_id":530507,"question_id":529424,"content_license":"CC BY-SA 4.0","body_markdown":"It can be done like this:\r\n\r\n    for i in range(len(collection)-1, -1, -1):\r\n        print collection[i]\r\n    \r\n        # print(collection[i]) for python 3. +\r\n\r\nSo your guess was pretty close :) A little awkward but it&#39;s basically saying: start with 1 less than &lt;code&gt;len(collection)&lt;\/code&gt;, keep going until you get to just before -1, by steps of -1.  \r\n\r\nFyi, the &lt;code&gt;help&lt;\/code&gt; function is very useful as it lets you view the docs for something from the Python console, eg:\r\n\r\n&lt;code&gt;help(range)&lt;\/code&gt;\r\n\r\n\r\n","body":"<p>It can be done like this:<\/p>\n<pre><code>for i in range(len(collection)-1, -1, -1):\n    print collection[i]\n\n    # print(collection[i]) for python 3. +\n<\/code><\/pre>\n<p>So your guess was pretty close :) A little awkward but it's basically saying: start with 1 less than <code>len(collection)<\/code>, keep going until you get to just before -1, by steps of -1.<\/p>\n<p>Fyi, the <code>help<\/code> function is very useful as it lets you view the docs for something from the Python console, eg:<\/p>\n<p><code>help(range)<\/code><\/p>\n","community_owned_date":null},{"owner":{"account_id":34591,"reputation":112642,"user_id":97828,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/ec468ce2d7da3ab5a194716eb1cc5ef5?s=256&d=identicon&r=PG","display_name":"Nadia Alramli","link":"https:\/\/stackoverflow.com\/users\/97828\/nadia-alramli"},"is_accepted":false,"score":124,"last_activity_date":1363025638,"last_edit_date":1363025638.0,"creation_date":1259624546,"answer_id":1823189,"question_id":1823058,"content_license":"CC BY-SA 3.0","body_markdown":"Here is the locale grouping code after removing irrelevant parts and cleaning it up a little:\r\n\r\n(The following only works for integers)\r\n\r\n    def group(number):\r\n        s = &#39;%d&#39; % number\r\n        groups = []\r\n        while s and s[-1].isdigit():\r\n            groups.append(s[-3:])\r\n            s = s[:-3]\r\n        return s + &#39;,&#39;.join(reversed(groups))\r\n\r\n    &gt;&gt;&gt; group(-23432432434.34)\r\n    &#39;-23,432,432,434&#39;\r\n\r\n----------\r\n\r\n\r\nThere are already some good answers in here. I just want to add this for future reference. In python 2.7 there is going to be a format specifier for thousands separator. According to [python docs][1] it works like this\r\n\r\n    &gt;&gt;&gt; &#39;{:20,.2f}&#39;.format(f)\r\n    &#39;18,446,744,073,709,551,616.00&#39;\r\n\r\nIn python3.1 you can do the same thing like this:\r\n\r\n    &gt;&gt;&gt; format(1234567, &#39;,d&#39;)\r\n    &#39;1,234,567&#39;\r\n\r\n  [1]: http:\/\/docs.python.org\/dev\/whatsnew\/2.7.html#pep-378-format-specifier-for-thousands-separator","body":"<p>Here is the locale grouping code after removing irrelevant parts and cleaning it up a little:<\/p>\n\n<p>(The following only works for integers)<\/p>\n\n<pre><code>def group(number):\n    s = '%d' % number\n    groups = []\n    while s and s[-1].isdigit():\n        groups.append(s[-3:])\n        s = s[:-3]\n    return s + ','.join(reversed(groups))\n\n&gt;&gt;&gt; group(-23432432434.34)\n'-23,432,432,434'\n<\/code><\/pre>\n\n<hr>\n\n<p>There are already some good answers in here. I just want to add this for future reference. In python 2.7 there is going to be a format specifier for thousands separator. According to <a href=\"http:\/\/docs.python.org\/dev\/whatsnew\/2.7.html#pep-378-format-specifier-for-thousands-separator\" rel=\"noreferrer\">python docs<\/a> it works like this<\/p>\n\n<pre><code>&gt;&gt;&gt; '{:20,.2f}'.format(f)\n'18,446,744,073,709,551,616.00'\n<\/code><\/pre>\n\n<p>In python3.1 you can do the same thing like this:<\/p>\n\n<pre><code>&gt;&gt;&gt; format(1234567, ',d')\n'1,234,567'\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":2153644,"reputation":2646,"user_id":2115409,"user_type":"registered","accept_rate":52,"profile_image":"https:\/\/i.stack.imgur.com\/2YEyO.gif?s=256&g=1","display_name":"Private","link":"https:\/\/stackoverflow.com\/users\/2115409\/private"},"is_accepted":false,"score":123,"last_activity_date":1611604677,"last_edit_date":1611604677.0,"creation_date":1458765053,"answer_id":36188131,"question_id":14262433,"content_license":"CC BY-SA 4.0","body_markdown":"There is now, two years after the question, an &#39;out-of-core&#39; pandas equivalent: [dask][1]. It is excellent! Though it does not support all of pandas functionality, you can get really far with it. Update: in the past two years it has been consistently maintained and there is substantial user community working with Dask.\r\n\r\nAnd now, four years after the question, there is another high-performance &#39;out-of-core&#39; pandas equivalent in [Vaex][2]. It &quot;uses memory mapping, zero memory copy policy and lazy computations for best performance (no memory wasted).&quot; It can handle data sets of billions of rows and does not store them into memory (making it even possible to do analysis on suboptimal hardware).\r\n\r\n  [1]: http:\/\/dask.pydata.org\/en\/latest\/\r\n  [2]: https:\/\/github.com\/vaexio\/vaex","body":"<p>There is now, two years after the question, an 'out-of-core' pandas equivalent: <a href=\"http:\/\/dask.pydata.org\/en\/latest\/\" rel=\"noreferrer\">dask<\/a>. It is excellent! Though it does not support all of pandas functionality, you can get really far with it. Update: in the past two years it has been consistently maintained and there is substantial user community working with Dask.<\/p>\n<p>And now, four years after the question, there is another high-performance 'out-of-core' pandas equivalent in <a href=\"https:\/\/github.com\/vaexio\/vaex\" rel=\"noreferrer\">Vaex<\/a>. It &quot;uses memory mapping, zero memory copy policy and lazy computations for best performance (no memory wasted).&quot; It can handle data sets of billions of rows and does not store them into memory (making it even possible to do analysis on suboptimal hardware).<\/p>\n","community_owned_date":null},{"owner":{"account_id":1564667,"reputation":6689,"user_id":1453719,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/548074f3d8315339645e33d6f2df7d77?s=256&d=identicon&r=PG","display_name":"Nicolas Barbey","link":"https:\/\/stackoverflow.com\/users\/1453719\/nicolas-barbey"},"is_accepted":false,"score":122,"last_activity_date":1570594212,"last_edit_date":1570594212.0,"creation_date":1350310298,"answer_id":12897491,"question_id":12897374,"content_license":"CC BY-SA 4.0","body_markdown":"A Python list:\r\n\r\n    &gt;&gt;&gt; a = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;b&#39;]\r\n\r\nTo get unique items, just transform it into a set (which you can transform back again into a list if required):\r\n\r\n    &gt;&gt;&gt; b = set(a)\r\n    &gt;&gt;&gt; print(b)\r\n    {&#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;a&#39;}","body":"<p>A Python list:<\/p>\n\n<pre><code>&gt;&gt;&gt; a = ['a', 'b', 'c', 'd', 'b']\n<\/code><\/pre>\n\n<p>To get unique items, just transform it into a set (which you can transform back again into a list if required):<\/p>\n\n<pre><code>&gt;&gt;&gt; b = set(a)\n&gt;&gt;&gt; print(b)\n{'b', 'c', 'd', 'a'}\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":82769,"reputation":19844,"user_id":232485,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/bc3cbbdadcf7485288e502d084820c32?s=256&d=identicon&r=PG","display_name":"Jabba","link":"https:\/\/stackoverflow.com\/users\/232485\/jabba"},"is_accepted":false,"score":122,"last_activity_date":1510577002,"last_edit_date":1510577002.0,"creation_date":1378587351,"answer_id":18677839,"question_id":730764,"content_license":"CC BY-SA 3.0","body_markdown":"First I quote the answer of Jack o&#39;Connor from [this thread](https:\/\/stackoverflow.com\/questions\/574730\/python-how-to-ignore-an-exception-and-proceed). The referenced thread got closed so I write here:\r\n\r\n&quot;There&#39;s a new way to do this coming in Python 3.4:\r\n\r\n    from contextlib import suppress\r\n\r\n    with suppress(Exception):\r\n        # your code\r\n\r\nHere&#39;s the commit that added it: http:\/\/hg.python.org\/cpython\/rev\/406b47c64480\r\n\r\nAnd here&#39;s the author, Raymond Hettinger, talking about this and all sorts of other Python hotness: https:\/\/youtu.be\/OSGv2VnC0go?t=43m23s\r\n\r\nMy addition to this is the Python 2.7 equivalent:\r\n\r\n    from contextlib import contextmanager\r\n \r\n    @contextmanager\r\n    def ignored(*exceptions):\r\n        try:\r\n            yield\r\n        except exceptions:\r\n            pass\r\n\r\nThen you use it like in Python 3.4:\r\n\r\n    with ignored(Exception):\r\n        # your code\r\n","body":"<p>First I quote the answer of Jack o'Connor from <a href=\"https:\/\/stackoverflow.com\/questions\/574730\/python-how-to-ignore-an-exception-and-proceed\">this thread<\/a>. The referenced thread got closed so I write here:<\/p>\n\n<p>\"There's a new way to do this coming in Python 3.4:<\/p>\n\n<pre><code>from contextlib import suppress\n\nwith suppress(Exception):\n    # your code\n<\/code><\/pre>\n\n<p>Here's the commit that added it: <a href=\"http:\/\/hg.python.org\/cpython\/rev\/406b47c64480\" rel=\"noreferrer\">http:\/\/hg.python.org\/cpython\/rev\/406b47c64480<\/a><\/p>\n\n<p>And here's the author, Raymond Hettinger, talking about this and all sorts of other Python hotness: <a href=\"https:\/\/youtu.be\/OSGv2VnC0go?t=43m23s\" rel=\"noreferrer\">https:\/\/youtu.be\/OSGv2VnC0go?t=43m23s<\/a><\/p>\n\n<p>My addition to this is the Python 2.7 equivalent:<\/p>\n\n<pre><code>from contextlib import contextmanager\n\n@contextmanager\ndef ignored(*exceptions):\n    try:\n        yield\n    except exceptions:\n        pass\n<\/code><\/pre>\n\n<p>Then you use it like in Python 3.4:<\/p>\n\n<pre><code>with ignored(Exception):\n    # your code\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":991398,"reputation":4189,"user_id":1008596,"user_type":"registered","accept_rate":67,"profile_image":"https:\/\/www.gravatar.com\/avatar\/d9db9c0adeed299dc7660d7c08e2dd86?s=256&d=identicon&r=PG","display_name":"netskink","link":"https:\/\/stackoverflow.com\/users\/1008596\/netskink"},"is_accepted":false,"score":122,"last_activity_date":1683122382,"last_edit_date":1683122382.0,"creation_date":1488413342,"answer_id":42544543,"question_id":7604966,"content_license":"CC BY-SA 4.0","body_markdown":"For Python 3, there is no maximum or minimum value for the `int` type.\r\n\r\nYou might be interested in [`sys.maxsize`][1] instead. According to the documentation:\r\n\r\n&gt; sys.maxsize\r\n&gt;\r\n&gt; An integer giving the maximum value a variable of type `Py_ssize_t` can\r\n&gt; take. It\u2019s usually `2**31 - 1` on a 32-bit platform and `2**63 - 1` on a\r\n&gt; 64-bit platform.\r\n\r\n```py\r\nimport sys\r\nmax_size = sys.maxsize\r\nmin_size = -sys.maxsize - 1\r\n```\r\n\r\n\r\n  [1]: https:\/\/docs.python.org\/3\/library\/sys.html#sys.maxsize\r\n\r\n\r\n","body":"<p>For Python 3, there is no maximum or minimum value for the <code>int<\/code> type.<\/p>\n<p>You might be interested in <a href=\"https:\/\/docs.python.org\/3\/library\/sys.html#sys.maxsize\" rel=\"noreferrer\"><code>sys.maxsize<\/code><\/a> instead. According to the documentation:<\/p>\n<blockquote>\n<p>sys.maxsize<\/p>\n<p>An integer giving the maximum value a variable of type <code>Py_ssize_t<\/code> can\ntake. It\u2019s usually <code>2**31 - 1<\/code> on a 32-bit platform and <code>2**63 - 1<\/code> on a\n64-bit platform.<\/p>\n<\/blockquote>\n<pre class=\"lang-py prettyprint-override\"><code>import sys\nmax_size = sys.maxsize\nmin_size = -sys.maxsize - 1\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":69691,"reputation":14002,"user_id":202645,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/e2f43e38da40a19aaed435e10183450f?s=256&d=identicon&r=PG","display_name":"Bruno Oliveira","link":"https:\/\/stackoverflow.com\/users\/202645\/bruno-oliveira"},"is_accepted":false,"score":121,"last_activity_date":1322046057,"last_edit_date":1322046057.0,"creation_date":1265136291,"answer_id":2186673,"question_id":2186525,"content_license":"CC BY-SA 3.0","body_markdown":"Similar to other solutions, but using fnmatch.fnmatch instead of glob, since os.walk already listed the filenames:\r\n\r\n    import os, fnmatch\r\n\r\n    \r\n    def find_files(directory, pattern):\r\n        for root, dirs, files in os.walk(directory):\r\n            for basename in files:\r\n                if fnmatch.fnmatch(basename, pattern):\r\n                    filename = os.path.join(root, basename)\r\n                    yield filename\r\n\r\n\r\n    for filename in find_files(&#39;src&#39;, &#39;*.c&#39;):\r\n        print &#39;Found C source:&#39;, filename\r\n\r\nAlso, using a generator alows you to process each file as it is found, instead of finding all the files *and then* processing them.","body":"<p>Similar to other solutions, but using fnmatch.fnmatch instead of glob, since os.walk already listed the filenames:<\/p>\n\n<pre><code>import os, fnmatch\n\n\ndef find_files(directory, pattern):\n    for root, dirs, files in os.walk(directory):\n        for basename in files:\n            if fnmatch.fnmatch(basename, pattern):\n                filename = os.path.join(root, basename)\n                yield filename\n\n\nfor filename in find_files('src', '*.c'):\n    print 'Found C source:', filename\n<\/code><\/pre>\n\n<p>Also, using a generator alows you to process each file as it is found, instead of finding all the files <em>and then<\/em> processing them.<\/p>\n","community_owned_date":null},{"owner":{"account_id":1658462,"reputation":5083,"user_id":1527304,"user_type":"registered","accept_rate":69,"profile_image":"https:\/\/i.stack.imgur.com\/5gowJ.jpg?s=256&g=1","display_name":"Dmitrii Mikhailov","link":"https:\/\/stackoverflow.com\/users\/1527304\/dmitrii-mikhailov"},"is_accepted":false,"score":121,"last_activity_date":1605163944,"last_edit_date":1605163944.0,"creation_date":1427184447,"answer_id":29227603,"question_id":687295,"content_license":"CC BY-SA 4.0","body_markdown":"It&#39;s easy to create a custom lookup, there&#39;s an `__ne` lookup example in [Django&#39;s official documentation](https:\/\/docs.djangoproject.com\/en\/stable\/howto\/custom-lookups\/#a-lookup-example).\r\n\r\nYou need to create the lookup itself first:\r\n\r\n    from django.db.models import Lookup\r\n    \r\n    class NotEqual(Lookup):\r\n        lookup_name = &#39;ne&#39;\r\n    \r\n        def as_sql(self, compiler, connection):\r\n            lhs, lhs_params = self.process_lhs(compiler, connection)\r\n            rhs, rhs_params = self.process_rhs(compiler, connection)\r\n            params = lhs_params + rhs_params\r\n            return &#39;%s &lt;&gt; %s&#39; % (lhs, rhs), params\r\n\r\nThen you need to register it:\r\n\r\n    from django.db.models import Field\r\n    Field.register_lookup(NotEqual)\r\n\r\nAnd now you can use the `__ne` lookup in your queries like this:\r\n\r\n    results = Model.objects.exclude(a=True, x__ne=5)\r\n","body":"<p>It's easy to create a custom lookup, there's an <code>__ne<\/code> lookup example in <a href=\"https:\/\/docs.djangoproject.com\/en\/stable\/howto\/custom-lookups\/#a-lookup-example\" rel=\"noreferrer\">Django's official documentation<\/a>.<\/p>\n<p>You need to create the lookup itself first:<\/p>\n<pre><code>from django.db.models import Lookup\n\nclass NotEqual(Lookup):\n    lookup_name = 'ne'\n\n    def as_sql(self, compiler, connection):\n        lhs, lhs_params = self.process_lhs(compiler, connection)\n        rhs, rhs_params = self.process_rhs(compiler, connection)\n        params = lhs_params + rhs_params\n        return '%s &lt;&gt; %s' % (lhs, rhs), params\n<\/code><\/pre>\n<p>Then you need to register it:<\/p>\n<pre><code>from django.db.models import Field\nField.register_lookup(NotEqual)\n<\/code><\/pre>\n<p>And now you can use the <code>__ne<\/code> lookup in your queries like this:<\/p>\n<pre><code>results = Model.objects.exclude(a=True, x__ne=5)\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":4814165,"reputation":4205,"user_id":3886740,"user_type":"registered","accept_rate":92,"profile_image":"https:\/\/www.gravatar.com\/avatar\/d344e3015e4d001e7726260c4c76c937?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"sisanared","link":"https:\/\/stackoverflow.com\/users\/3886740\/sisanared"},"is_accepted":false,"score":121,"last_activity_date":1628877947,"last_edit_date":1628877947.0,"creation_date":1492582390,"answer_id":43487762,"question_id":5971312,"content_license":"CC BY-SA 4.0","body_markdown":"`os.environ` behaves like a python dictionary, so all the common dictionary operations can be performed. In addition to the `get` and `set` operations mentioned in the other answers, we can also simply check if a key exists. The keys and values should be stored as **strings**.\r\n\r\n**Python 3**\r\n\r\nFor python 3, dictionaries use the **in** keyword instead of **has_key** \r\n\r\n    &gt;&gt;&gt; import os\r\n    &gt;&gt;&gt; &#39;HOME&#39; in os.environ  # Check an existing env. variable\r\n    True\r\n    ...\r\n\r\n**Python 2**\r\n\r\n    &gt;&gt;&gt; import os\r\n    &gt;&gt;&gt; os.environ.has_key(&#39;HOME&#39;)  # Check an existing env. variable\r\n    True\r\n    &gt;&gt;&gt; os.environ.has_key(&#39;FOO&#39;)   # Check for a non existing variable\r\n    False\r\n    &gt;&gt;&gt; os.environ[&#39;FOO&#39;] = &#39;1&#39;     # Set a new env. variable (String value)\r\n    &gt;&gt;&gt; os.environ.has_key(&#39;FOO&#39;)\r\n    True\r\n    &gt;&gt;&gt; os.environ.get(&#39;FOO&#39;)       # Retrieve the value\r\n    &#39;1&#39;\r\n\r\n**There is one important thing to note about using `os.environ`:**\r\n\r\nAlthough child processes inherit the environment from the parent process, I had run into an issue recently and figured out, if you have other scripts updating the environment while your python script is running, calling `os.environ` again **will not reflect the latest values**.\r\n\r\nExcerpt from the [docs][1]:\r\n\r\n&gt; This mapping is captured the first time the os module is imported,\r\n&gt; typically during Python startup as part of processing site.py. Changes\r\n&gt; to the environment made after this time are not reflected in\r\n&gt; os.environ, except for changes made by modifying os.environ directly.\r\n\r\n\r\n`os.environ.data` which stores all the environment variables, is a dict object, which contains all the environment values:\r\n\r\n    &gt;&gt;&gt; type(os.environ.data)  # changed to _data since v3.2 (refer comment below)\r\n    &lt;type &#39;dict&#39;&gt;\r\n\r\n\r\n  [1]: https:\/\/docs.python.org\/2\/library\/os.html#os.environ &quot;docs&quot;","body":"<p><code>os.environ<\/code> behaves like a python dictionary, so all the common dictionary operations can be performed. In addition to the <code>get<\/code> and <code>set<\/code> operations mentioned in the other answers, we can also simply check if a key exists. The keys and values should be stored as <strong>strings<\/strong>.<\/p>\n<p><strong>Python 3<\/strong><\/p>\n<p>For python 3, dictionaries use the <strong>in<\/strong> keyword instead of <strong>has_key<\/strong><\/p>\n<pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; 'HOME' in os.environ  # Check an existing env. variable\nTrue\n...\n<\/code><\/pre>\n<p><strong>Python 2<\/strong><\/p>\n<pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; os.environ.has_key('HOME')  # Check an existing env. variable\nTrue\n&gt;&gt;&gt; os.environ.has_key('FOO')   # Check for a non existing variable\nFalse\n&gt;&gt;&gt; os.environ['FOO'] = '1'     # Set a new env. variable (String value)\n&gt;&gt;&gt; os.environ.has_key('FOO')\nTrue\n&gt;&gt;&gt; os.environ.get('FOO')       # Retrieve the value\n'1'\n<\/code><\/pre>\n<p><strong>There is one important thing to note about using <code>os.environ<\/code>:<\/strong><\/p>\n<p>Although child processes inherit the environment from the parent process, I had run into an issue recently and figured out, if you have other scripts updating the environment while your python script is running, calling <code>os.environ<\/code> again <strong>will not reflect the latest values<\/strong>.<\/p>\n<p>Excerpt from the <a href=\"https:\/\/docs.python.org\/2\/library\/os.html#os.environ\" rel=\"noreferrer\" title=\"docs\">docs<\/a>:<\/p>\n<blockquote>\n<p>This mapping is captured the first time the os module is imported,\ntypically during Python startup as part of processing site.py. Changes\nto the environment made after this time are not reflected in\nos.environ, except for changes made by modifying os.environ directly.<\/p>\n<\/blockquote>\n<p><code>os.environ.data<\/code> which stores all the environment variables, is a dict object, which contains all the environment values:<\/p>\n<pre><code>&gt;&gt;&gt; type(os.environ.data)  # changed to _data since v3.2 (refer comment below)\n&lt;type 'dict'&gt;\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":9911529,"reputation":3538,"user_id":7338066,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/SjiBv.jpg?s=256&g=1","display_name":"susan097","link":"https:\/\/stackoverflow.com\/users\/7338066\/susan097"},"is_accepted":false,"score":120,"last_activity_date":1649372262,"last_edit_date":1649372262.0,"creation_date":1513436743,"answer_id":47846974,"question_id":20180543,"content_license":"CC BY-SA 4.0","body_markdown":"The *better* way to do that is:\r\n\r\n-----------------\r\n\r\n**For the details of a specific package**\r\n\r\n```lang-none\r\npip show &lt;package_name&gt;\r\n```\r\n\r\nIt details out the package_name, version, author, location, etc.\r\n\r\n------------\r\n\r\n```lang-none\r\n$ pip show numpy\r\n\r\nName: numpy\r\nVersion: 1.13.3\r\nSummary: NumPy: array processing for numbers, strings, records, and objects.\r\nHome-page: http:\/\/www.numpy.org\r\nAuthor: NumPy Developers\r\nAuthor-email: numpy-discussion@python.org\r\nLicense: BSD\r\nLocation: c:\\users\\prowinjvm\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\r\nRequires:\r\n```\r\n\r\n\r\n----------\r\n&lt;b&gt;For more details: &lt;\/b&gt;`&gt;&gt;&gt; pip help`\r\n\r\n&lt;hr&gt;\r\n\r\n`pip` should be updated to do this.\r\n\r\n```lang-none\r\npip install --upgrade pip\r\n```\r\n\r\nOn Windows the recommended command is:\r\n\r\n```lang-none\r\npython -m pip install --upgrade pip\r\n```\r\n","body":"<p>The <em>better<\/em> way to do that is:<\/p>\n<hr \/>\n<p><strong>For the details of a specific package<\/strong><\/p>\n<pre class=\"lang-none prettyprint-override\"><code>pip show &lt;package_name&gt;\n<\/code><\/pre>\n<p>It details out the package_name, version, author, location, etc.<\/p>\n<hr \/>\n<pre class=\"lang-none prettyprint-override\"><code>$ pip show numpy\n\nName: numpy\nVersion: 1.13.3\nSummary: NumPy: array processing for numbers, strings, records, and objects.\nHome-page: http:\/\/www.numpy.org\nAuthor: NumPy Developers\nAuthor-email: numpy-discussion@python.org\nLicense: BSD\nLocation: c:\\users\\prowinjvm\\appdata\\local\\programs\\python\\python36\\lib\\site-packages\nRequires:\n<\/code><\/pre>\n<hr \/>\n<p><b>For more details: <\/b><code>&gt;&gt;&gt; pip help<\/code><\/p>\n<hr>\n<p><code>pip<\/code> should be updated to do this.<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>pip install --upgrade pip\n<\/code><\/pre>\n<p>On Windows the recommended command is:<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>python -m pip install --upgrade pip\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":1883837,"reputation":2334,"user_id":1703452,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/i.stack.imgur.com\/29oyQ.png?s=256&g=1","display_name":"vwvolodya","link":"https:\/\/stackoverflow.com\/users\/1703452\/vwvolodya"},"is_accepted":false,"score":119,"last_activity_date":1450704631,"last_edit_date":1450704631.0,"creation_date":1373830076,"answer_id":17642893,"question_id":4990718,"content_license":"CC BY-SA 3.0","body_markdown":"You can do this to handle general exceptions\r\n\r\n    try:\r\n        a = 2\/0\r\n    except Exception as e:\r\n        print e.__doc__\r\n        print e.message","body":"<p>You can do this to handle general exceptions<\/p>\n\n<pre><code>try:\n    a = 2\/0\nexcept Exception as e:\n    print e.__doc__\n    print e.message\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":381573,"reputation":43186,"user_id":736308,"user_type":"registered","accept_rate":71,"profile_image":"https:\/\/i.stack.imgur.com\/o5EqQ.jpg?s=256&g=1","display_name":"cdarke","link":"https:\/\/stackoverflow.com\/users\/736308\/cdarke"},"is_accepted":false,"score":119,"last_activity_date":1595957876,"last_edit_date":1595957876.0,"creation_date":1378710715,"answer_id":18693145,"question_id":5458048,"content_license":"CC BY-SA 4.0","body_markdown":"You might wish to investigate [Nuitka][1]. It takes Python source code and converts it in to C++ API calls. Then it compiles into an executable binary (ELF on Linux). It has been around for a few years now and supports a wide range of Python versions.\r\n\r\nYou will probably also get a performance improvement if you use it. It is recommended.\r\n\r\n  [1]: http:\/\/nuitka.net\/\r\n\r\n\r\n","body":"<p>You might wish to investigate <a href=\"http:\/\/nuitka.net\/\" rel=\"noreferrer\">Nuitka<\/a>. It takes Python source code and converts it in to C++ API calls. Then it compiles into an executable binary (ELF on Linux). It has been around for a few years now and supports a wide range of Python versions.<\/p>\n<p>You will probably also get a performance improvement if you use it. It is recommended.<\/p>\n","community_owned_date":null},{"owner":{"account_id":1603,"reputation":193645,"user_id":2147,"user_type":"registered","accept_rate":85,"profile_image":"https:\/\/www.gravatar.com\/avatar\/b8e26b9942e7193a4fe32c407aacfef5?s=256&d=identicon&r=PG","display_name":"Jason Baker","link":"https:\/\/stackoverflow.com\/users\/2147\/jason-baker"},"is_accepted":false,"score":118,"last_activity_date":1239208352,"last_edit_date":null,"creation_date":1239208352,"answer_id":730806,"question_id":730764,"content_license":"CC BY-SA 2.5","body_markdown":"&gt; When you just want to do a try catch without handling the exception, how do you do it in Python?\r\n\r\nIt depends on what you mean by &quot;handling.&quot;\r\n\r\nIf you mean to catch it without taking any action, the code you posted will work.\r\n\r\nIf you mean that you want to take action on an exception without stopping the exception from going up the stack, then you want something like this:\r\n\r\n    try:\r\n        do_something()\r\n    except:\r\n        handle_exception()\r\n        raise  #re-raise the exact same exception that was thrown","body":"<blockquote>\n  <p>When you just want to do a try catch without handling the exception, how do you do it in Python?<\/p>\n<\/blockquote>\n\n<p>It depends on what you mean by \"handling.\"<\/p>\n\n<p>If you mean to catch it without taking any action, the code you posted will work.<\/p>\n\n<p>If you mean that you want to take action on an exception without stopping the exception from going up the stack, then you want something like this:<\/p>\n\n<pre><code>try:\n    do_something()\nexcept:\n    handle_exception()\n    raise  #re-raise the exact same exception that was thrown\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":56977,"reputation":9065,"user_id":170656,"user_type":"registered","accept_rate":50,"profile_image":"https:\/\/i.stack.imgur.com\/kPZpK.jpg?s=256&g=1","display_name":"Caleb Hattingh","link":"https:\/\/stackoverflow.com\/users\/170656\/caleb-hattingh"},"is_accepted":false,"score":117,"last_activity_date":1549860947,"last_edit_date":1549860947.0,"creation_date":1389229986,"answer_id":21009909,"question_id":20994716,"content_license":"CC BY-SA 4.0","body_markdown":"The other answers give a fair description of the details, but I want to highlight some high-level points.\r\n\r\npip is a package manager that facilitates installation, upgrade, and uninstallation of **python packages**.  It also works with virtual **python** environments.\r\n\r\nconda is a package manager for **any software** (installation, upgrade and uninstallation).  It also works with virtual **system** environments.\r\n\r\nOne of the goals with the design of conda is to facilitate package management for the entire software stack required by users, of which one or more python versions may only be a small part.  This includes low-level libraries, such as linear algebra, compilers, such as mingw on Windows, editors, version control tools like Hg and Git, or *whatever else requires distribution and management*.\r\n\r\nFor version management, pip allows you to switch between and manage multiple **python** environments.\r\n\r\nConda allows you to switch between and manage **multiple general purpose environments** across which multiple other things can vary in version number, like C-libraries, or compilers, or test-suites, or database engines and so on.\r\n\r\nConda is not Windows-centric, but on Windows it is by far the superior solution currently available when complex scientific packages requiring compilation are required to be installed and managed.  \r\n\r\nI want to weep when I think of how much time I have lost trying to compile many of these packages via pip on Windows, or debug failed `pip install` sessions when compilation was required.\r\n\r\nAs a final point, Continuum Analytics also hosts (free) [binstar.org][1] (now called [anaconda.org][2]) to allow regular package developers to create their own custom (built!) software stacks that their package-users will be able to `conda install` from.\r\n\r\n\r\n  [1]: https:\/\/binstar.org\r\n  [2]: https:\/\/anaconda.org\/","body":"<p>The other answers give a fair description of the details, but I want to highlight some high-level points.<\/p>\n\n<p>pip is a package manager that facilitates installation, upgrade, and uninstallation of <strong>python packages<\/strong>.  It also works with virtual <strong>python<\/strong> environments.<\/p>\n\n<p>conda is a package manager for <strong>any software<\/strong> (installation, upgrade and uninstallation).  It also works with virtual <strong>system<\/strong> environments.<\/p>\n\n<p>One of the goals with the design of conda is to facilitate package management for the entire software stack required by users, of which one or more python versions may only be a small part.  This includes low-level libraries, such as linear algebra, compilers, such as mingw on Windows, editors, version control tools like Hg and Git, or <em>whatever else requires distribution and management<\/em>.<\/p>\n\n<p>For version management, pip allows you to switch between and manage multiple <strong>python<\/strong> environments.<\/p>\n\n<p>Conda allows you to switch between and manage <strong>multiple general purpose environments<\/strong> across which multiple other things can vary in version number, like C-libraries, or compilers, or test-suites, or database engines and so on.<\/p>\n\n<p>Conda is not Windows-centric, but on Windows it is by far the superior solution currently available when complex scientific packages requiring compilation are required to be installed and managed.  <\/p>\n\n<p>I want to weep when I think of how much time I have lost trying to compile many of these packages via pip on Windows, or debug failed <code>pip install<\/code> sessions when compilation was required.<\/p>\n\n<p>As a final point, Continuum Analytics also hosts (free) <a href=\"https:\/\/binstar.org\" rel=\"noreferrer\">binstar.org<\/a> (now called <a href=\"https:\/\/anaconda.org\/\" rel=\"noreferrer\">anaconda.org<\/a>) to allow regular package developers to create their own custom (built!) software stacks that their package-users will be able to <code>conda install<\/code> from.<\/p>\n","community_owned_date":null},{"owner":{"account_id":4551,"reputation":93713,"user_id":6899,"user_type":"registered","accept_rate":84,"profile_image":"https:\/\/www.gravatar.com\/avatar\/132aeb33251a1eddee3efc87633c0af1?s=256&d=identicon&r=PG","display_name":"tzot","link":"https:\/\/stackoverflow.com\/users\/6899\/tzot"},"is_accepted":false,"score":116,"last_activity_date":1519812091,"last_edit_date":1519812091.0,"creation_date":1230745701,"answer_id":403607,"question_id":403421,"content_license":"CC BY-SA 3.0","body_markdown":"A way that can be fastest, especially if your list has a lot of records, is to use `operator.attrgetter(&quot;count&quot;)`. However, this might run on an pre-operator version of Python, so it would be nice to have a fallback mechanism. You might want to do the following, then:\r\n\r\n    try: import operator\r\n    except ImportError: keyfun= lambda x: x.count # use a lambda if no operator module\r\n    else: keyfun= operator.attrgetter(&quot;count&quot;) # use operator since it&#39;s faster than lambda\r\n    \r\n    ut.sort(key=keyfun, reverse=True) # sort in-place","body":"<p>A way that can be fastest, especially if your list has a lot of records, is to use <code>operator.attrgetter(\"count\")<\/code>. However, this might run on an pre-operator version of Python, so it would be nice to have a fallback mechanism. You might want to do the following, then:<\/p>\n\n<pre><code>try: import operator\nexcept ImportError: keyfun= lambda x: x.count # use a lambda if no operator module\nelse: keyfun= operator.attrgetter(\"count\") # use operator since it's faster than lambda\n\nut.sort(key=keyfun, reverse=True) # sort in-place\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":34591,"reputation":112642,"user_id":97828,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/ec468ce2d7da3ab5a194716eb1cc5ef5?s=256&d=identicon&r=PG","display_name":"Nadia Alramli","link":"https:\/\/stackoverflow.com\/users\/97828\/nadia-alramli"},"is_accepted":false,"score":116,"last_activity_date":1365661641,"last_edit_date":1365661641.0,"creation_date":1251131631,"answer_id":1323429,"question_id":1323410,"content_license":"CC BY-SA 3.0","body_markdown":"According to python [docs][1]:\r\n\r\n&gt; `has_key()` is deprecated in favor of\r\n&gt; `key in d`.\r\n\r\n  [1]: http:\/\/docs.python.org\/library\/stdtypes.html#dict.has_key","body":"<p>According to python <a href=\"http:\/\/docs.python.org\/library\/stdtypes.html#dict.has_key\" rel=\"noreferrer\">docs<\/a>:<\/p>\n\n<blockquote>\n  <p><code>has_key()<\/code> is deprecated in favor of\n  <code>key in d<\/code>.<\/p>\n<\/blockquote>\n","community_owned_date":null},{"owner":{"account_id":151,"reputation":35251,"user_id":188,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/833bfbcc9940cfcf0af6def751c23b05?s=256&d=identicon&r=PG","display_name":"Matthew Schinckel","link":"https:\/\/stackoverflow.com\/users\/188\/matthew-schinckel"},"is_accepted":false,"score":116,"last_activity_date":1535407270,"last_edit_date":1535407270.0,"creation_date":1278854937,"answer_id":3223200,"question_id":3220404,"content_license":"CC BY-SA 4.0","body_markdown":"REQUIREMENTS files.\r\n\r\nSeriously, I use this in conjunction with virtualenv every day.\r\n\r\n_______________________________________________________________________\r\n**QUICK DEPENDENCY MANAGEMENT TUTORIAL, FOLKS**\r\n\r\nRequirements files allow you to create a snapshot of all packages that have been installed through pip.  By encapsulating those packages in a virtualenvironment, you can have your codebase work off a very specific set of packages and share that codebase with others.\r\n\r\nFrom Heroku&#39;s documentation https:\/\/devcenter.heroku.com\/articles\/python\r\n\r\nYou create a virtual environment, and set your shell to use it. (bash\/*nix instructions)\r\n\r\n    virtualenv env\r\n    source env\/bin\/activate\r\n\r\nNow all python scripts run with this shell will use this environment&#39;s packages and configuration.  Now you can install a package locally to this environment without needing to install it globally on your machine.\r\n\r\n    pip install flask\r\n\r\nNow you can dump the info about which packages are installed with\r\n\r\n    pip freeze &gt; requirements.txt\r\n\r\nIf you checked that file into version control, when someone else gets your code, they can setup their own virtual environment and install all the dependencies with:\r\n\r\n    pip install -r requirements.txt\r\n\r\nAny time you can automate tedium like this is awesome.","body":"<p>REQUIREMENTS files.<\/p>\n\n<p>Seriously, I use this in conjunction with virtualenv every day.<\/p>\n\n<hr>\n\n<p><strong>QUICK DEPENDENCY MANAGEMENT TUTORIAL, FOLKS<\/strong><\/p>\n\n<p>Requirements files allow you to create a snapshot of all packages that have been installed through pip.  By encapsulating those packages in a virtualenvironment, you can have your codebase work off a very specific set of packages and share that codebase with others.<\/p>\n\n<p>From Heroku's documentation <a href=\"https:\/\/devcenter.heroku.com\/articles\/python\" rel=\"noreferrer\">https:\/\/devcenter.heroku.com\/articles\/python<\/a><\/p>\n\n<p>You create a virtual environment, and set your shell to use it. (bash\/*nix instructions)<\/p>\n\n<pre><code>virtualenv env\nsource env\/bin\/activate\n<\/code><\/pre>\n\n<p>Now all python scripts run with this shell will use this environment's packages and configuration.  Now you can install a package locally to this environment without needing to install it globally on your machine.<\/p>\n\n<pre><code>pip install flask\n<\/code><\/pre>\n\n<p>Now you can dump the info about which packages are installed with<\/p>\n\n<pre><code>pip freeze &gt; requirements.txt\n<\/code><\/pre>\n\n<p>If you checked that file into version control, when someone else gets your code, they can setup their own virtual environment and install all the dependencies with:<\/p>\n\n<pre><code>pip install -r requirements.txt\n<\/code><\/pre>\n\n<p>Any time you can automate tedium like this is awesome.<\/p>\n","community_owned_date":null},{"owner":{"account_id":5303824,"reputation":4815,"user_id":4232487,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/3M9AP.png?s=256&g=1","display_name":"Texom512","link":"https:\/\/stackoverflow.com\/users\/4232487\/texom512"},"is_accepted":false,"score":115,"last_activity_date":1440002809,"last_edit_date":1440002809.0,"creation_date":1415537870,"answer_id":26828432,"question_id":4843173,"content_license":"CC BY-SA 3.0","body_markdown":"In Python 3.x or Python 2.7.6\r\n\r\n    if type(x) == str:","body":"<p>In Python 3.x or Python 2.7.6<\/p>\n\n<pre><code>if type(x) == str:\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":392916,"reputation":10840,"user_id":754484,"user_type":"registered","accept_rate":94,"profile_image":"https:\/\/i.stack.imgur.com\/4jRW2.png?s=256&g=1","display_name":"Samuele Mattiuzzo","link":"https:\/\/stackoverflow.com\/users\/754484\/samuele-mattiuzzo"},"is_accepted":false,"score":111,"last_activity_date":1570593996,"last_edit_date":1570593996.0,"creation_date":1350310067,"answer_id":12897419,"question_id":12897374,"content_license":"CC BY-SA 4.0","body_markdown":"What type is your output variable?\r\n\r\nPython [sets][1] are what you need. Declare output like this:\r\n\r\n    output = set()  # initialize an empty set\r\n\r\nand you&#39;re ready to go adding elements with `output.add(elem)` and be sure they&#39;re unique.\r\n\r\nWarning: sets DO NOT preserve the original order of the list.\r\n\r\n\r\n  [1]: https:\/\/docs.python.org\/library\/sets.html","body":"<p>What type is your output variable?<\/p>\n\n<p>Python <a href=\"https:\/\/docs.python.org\/library\/sets.html\" rel=\"noreferrer\">sets<\/a> are what you need. Declare output like this:<\/p>\n\n<pre><code>output = set()  # initialize an empty set\n<\/code><\/pre>\n\n<p>and you're ready to go adding elements with <code>output.add(elem)<\/code> and be sure they're unique.<\/p>\n\n<p>Warning: sets DO NOT preserve the original order of the list.<\/p>\n","community_owned_date":null},{"owner":{"account_id":259071,"reputation":206474,"user_id":541686,"user_type":"registered","accept_rate":81,"profile_image":"https:\/\/www.gravatar.com\/avatar\/f2d0d2c0f7a83e2f8797a5ae79a324b6?s=256&d=identicon&r=PG","display_name":"user541686","link":"https:\/\/stackoverflow.com\/users\/541686\/user541686"},"is_accepted":false,"score":111,"last_activity_date":1563560462,"last_edit_date":1592644375.0,"creation_date":1353450535,"answer_id":13483314,"question_id":1247486,"content_license":"CC BY-SA 4.0","body_markdown":"## Python 2: You should use `map` and `filter` instead of list comprehensions.\n\nAn **objective** reason why you should prefer them even though they&#39;re not &quot;Pythonic&quot; is this:  \nThey require functions\/lambdas as arguments, which **introduce a new scope**.\n\n\nI&#39;ve gotten bitten by this more than once:\n\n    for x, y in somePoints:\n        # (several lines of code here)\n        squared = [x ** 2 for x in numbers]\n        # Oops, x was silently overwritten!\n\nbut if instead I had said:\n\n    for x, y in somePoints:\n        # (several lines of code here)\n        squared = map(lambda x: x ** 2, numbers)\n\nthen everything would&#39;ve been fine.\n\nYou could say I was being silly for using the same variable name in the same scope.\n\nI wasn&#39;t. The code was fine originally -- the two `x`s weren&#39;t in the same scope.  \nIt was only after I **moved** the inner block to a different section of the code that the problem came up (read: problem during maintenance, not development), and I didn&#39;t expect it.\n\nYes, *if you never make this mistake* then list comprehensions are more elegant.  \nBut from personal experience (and from seeing others make the same mistake) I&#39;ve seen it happen enough times that I think it&#39;s not worth the pain you have to go through when these bugs creep into your code.\n\n### Conclusion:  \nUse `map` and `filter`. They prevent subtle hard-to-diagnose scope-related bugs.\n\n### Side note:\n\nDon&#39;t forget to consider using `imap` and `ifilter` (in `itertools`) if they are appropriate for your situation!","body":"<h2>Python 2: You should use <code>map<\/code> and <code>filter<\/code> instead of list comprehensions.<\/h2>\n<p>An <strong>objective<\/strong> reason why you should prefer them even though they're not &quot;Pythonic&quot; is this:<br \/>\nThey require functions\/lambdas as arguments, which <strong>introduce a new scope<\/strong>.<\/p>\n<p>I've gotten bitten by this more than once:<\/p>\n<pre><code>for x, y in somePoints:\n    # (several lines of code here)\n    squared = [x ** 2 for x in numbers]\n    # Oops, x was silently overwritten!\n<\/code><\/pre>\n<p>but if instead I had said:<\/p>\n<pre><code>for x, y in somePoints:\n    # (several lines of code here)\n    squared = map(lambda x: x ** 2, numbers)\n<\/code><\/pre>\n<p>then everything would've been fine.<\/p>\n<p>You could say I was being silly for using the same variable name in the same scope.<\/p>\n<p>I wasn't. The code was fine originally -- the two <code>x<\/code>s weren't in the same scope.<br \/>\nIt was only after I <strong>moved<\/strong> the inner block to a different section of the code that the problem came up (read: problem during maintenance, not development), and I didn't expect it.<\/p>\n<p>Yes, <em>if you never make this mistake<\/em> then list comprehensions are more elegant.<br \/>\nBut from personal experience (and from seeing others make the same mistake) I've seen it happen enough times that I think it's not worth the pain you have to go through when these bugs creep into your code.<\/p>\n<h3>Conclusion:<\/h3>\n<p>Use <code>map<\/code> and <code>filter<\/code>. They prevent subtle hard-to-diagnose scope-related bugs.<\/p>\n<h3>Side note:<\/h3>\n<p>Don't forget to consider using <code>imap<\/code> and <code>ifilter<\/code> (in <code>itertools<\/code>) if they are appropriate for your situation!<\/p>\n","community_owned_date":null},{"owner":{"account_id":1697749,"reputation":1246,"user_id":1558754,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/eb761d48f7c56f5c0084772c87cb6f05?s=256&d=identicon&r=PG","display_name":"Cyrus","link":"https:\/\/stackoverflow.com\/users\/1558754\/cyrus"},"is_accepted":false,"score":111,"last_activity_date":1517377483,"last_edit_date":1517377483.0,"creation_date":1381427057,"answer_id":19302655,"question_id":1912434,"content_license":"CC BY-SA 3.0","body_markdown":"There are many options out there. [cElementTree][1] looks excellent if speed and memory usage are an issue. It has very little overhead compared to simply reading in the file using `readlines`.\r\n\r\nThe relevant metrics can be found in the table below, copied from the [cElementTree][1] website:\r\n\r\n    library\t                        time\tspace\r\n    xml.dom.minidom (Python 2.1)\t6.3 s\t80000K\r\n    gnosis.objectify\t            2.0 s\t22000k\r\n    xml.dom.minidom (Python 2.4)\t1.4 s\t53000k\r\n    ElementTree 1.2\t                1.6 s\t14500k\t\r\n    ElementTree 1.2.4\/1.3\t        1.1 s\t14500k\t\r\n    cDomlette (C extension)\t        0.540 s\t20500k\r\n    PyRXPU (C extension)\t        0.175 s\t10850k\r\n    libxml2 (C extension)\t        0.098 s\t16000k\r\n    readlines (read as utf-8)\t    0.093 s\t8850k\r\n    cElementTree (C extension)  --&gt; 0.047 s\t4900K &lt;--\r\n    readlines (read as ascii)\t    0.032 s\t5050k\t\r\n\r\nAs pointed out by [@jfs][2], `cElementTree` comes bundled with Python:\r\n\r\n- Python 2: `from xml.etree import cElementTree as ElementTree`.\r\n- Python 3: `from xml.etree import ElementTree` (the accelerated C version is used automatically).\r\n\r\n\r\n  [1]: http:\/\/effbot.org\/zone\/celementtree.htm\r\n  [2]: https:\/\/stackoverflow.com\/questions\/1912434\/how-do-i-parse-xml-in-python#comment54491266_19302655","body":"<p>There are many options out there. <a href=\"http:\/\/effbot.org\/zone\/celementtree.htm\" rel=\"noreferrer\">cElementTree<\/a> looks excellent if speed and memory usage are an issue. It has very little overhead compared to simply reading in the file using <code>readlines<\/code>.<\/p>\n\n<p>The relevant metrics can be found in the table below, copied from the <a href=\"http:\/\/effbot.org\/zone\/celementtree.htm\" rel=\"noreferrer\">cElementTree<\/a> website:<\/p>\n\n<pre><code>library                         time    space\nxml.dom.minidom (Python 2.1)    6.3 s   80000K\ngnosis.objectify                2.0 s   22000k\nxml.dom.minidom (Python 2.4)    1.4 s   53000k\nElementTree 1.2                 1.6 s   14500k  \nElementTree 1.2.4\/1.3           1.1 s   14500k  \ncDomlette (C extension)         0.540 s 20500k\nPyRXPU (C extension)            0.175 s 10850k\nlibxml2 (C extension)           0.098 s 16000k\nreadlines (read as utf-8)       0.093 s 8850k\ncElementTree (C extension)  --&gt; 0.047 s 4900K &lt;--\nreadlines (read as ascii)       0.032 s 5050k   \n<\/code><\/pre>\n\n<p>As pointed out by <a href=\"https:\/\/stackoverflow.com\/questions\/1912434\/how-do-i-parse-xml-in-python#comment54491266_19302655\">@jfs<\/a>, <code>cElementTree<\/code> comes bundled with Python:<\/p>\n\n<ul>\n<li>Python 2: <code>from xml.etree import cElementTree as ElementTree<\/code>.<\/li>\n<li>Python 3: <code>from xml.etree import ElementTree<\/code> (the accelerated C version is used automatically).<\/li>\n<\/ul>\n","community_owned_date":null},{"owner":{"account_id":124754,"reputation":16549,"user_id":320057,"user_type":"registered","accept_rate":70,"profile_image":"https:\/\/i.stack.imgur.com\/3PiyJ.jpg?s=256&g=1","display_name":"Ivo van der Wijk","link":"https:\/\/stackoverflow.com\/users\/320057\/ivo-van-der-wijk"},"is_accepted":false,"score":110,"last_activity_date":1609933071,"last_edit_date":1609933071.0,"creation_date":1286021070,"answer_id":3845584,"question_id":3845423,"content_license":"CC BY-SA 4.0","body_markdown":"filter actually has a special option for this:\r\n\r\n    filter(None, sequence)\r\n\r\nIt will filter out all elements that evaluate to False. No need to use an actual callable here such as bool, len and so on.\r\n\r\nIt&#39;s equally fast as map(bool, ...)\r\n\r\n","body":"<p>filter actually has a special option for this:<\/p>\n<pre><code>filter(None, sequence)\n<\/code><\/pre>\n<p>It will filter out all elements that evaluate to False. No need to use an actual callable here such as bool, len and so on.<\/p>\n<p>It's equally fast as map(bool, ...)<\/p>\n","community_owned_date":null},{"owner":{"account_id":3170361,"reputation":6876,"user_id":2679465,"user_type":"registered","accept_rate":64,"profile_image":"https:\/\/i.stack.imgur.com\/R2vxr.jpg?s=256&g=1","display_name":"Rajiv Sharma","link":"https:\/\/stackoverflow.com\/users\/2679465\/rajiv-sharma"},"is_accepted":false,"score":110,"last_activity_date":1476231747,"last_edit_date":null,"creation_date":1476231747,"answer_id":39988702,"question_id":2104080,"content_license":"CC BY-SA 3.0","body_markdown":"    import os\r\n    \r\n    \r\n    def convert_bytes(num):\r\n        &quot;&quot;&quot;\r\n        this function will convert bytes to MB.... GB... etc\r\n        &quot;&quot;&quot;\r\n        for x in [&#39;bytes&#39;, &#39;KB&#39;, &#39;MB&#39;, &#39;GB&#39;, &#39;TB&#39;]:\r\n            if num &lt; 1024.0:\r\n                return &quot;%3.1f %s&quot; % (num, x)\r\n            num \/= 1024.0\r\n    \r\n    \r\n    def file_size(file_path):\r\n        &quot;&quot;&quot;\r\n        this function will return the file size\r\n        &quot;&quot;&quot;\r\n        if os.path.isfile(file_path):\r\n            file_info = os.stat(file_path)\r\n            return convert_bytes(file_info.st_size)\r\n    \r\n    \r\n    # Lets check the file size of MS Paint exe \r\n    # or you can use any file path\r\n    file_path = r&quot;C:\\Windows\\System32\\mspaint.exe&quot;\r\n    print file_size(file_path)\r\n\r\nResult:\r\n\r\n    6.1 MB","body":"<pre><code>import os\n\n\ndef convert_bytes(num):\n    \"\"\"\n    this function will convert bytes to MB.... GB... etc\n    \"\"\"\n    for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:\n        if num &lt; 1024.0:\n            return \"%3.1f %s\" % (num, x)\n        num \/= 1024.0\n\n\ndef file_size(file_path):\n    \"\"\"\n    this function will return the file size\n    \"\"\"\n    if os.path.isfile(file_path):\n        file_info = os.stat(file_path)\n        return convert_bytes(file_info.st_size)\n\n\n# Lets check the file size of MS Paint exe \n# or you can use any file path\nfile_path = r\"C:\\Windows\\System32\\mspaint.exe\"\nprint file_size(file_path)\n<\/code><\/pre>\n\n<p>Result:<\/p>\n\n<pre><code>6.1 MB\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":8415,"reputation":41401,"user_id":15154,"user_type":"registered","accept_rate":88,"profile_image":"https:\/\/www.gravatar.com\/avatar\/cdca0dc45085388c1b753104ce4c8648?s=256&d=identicon&r=PG","display_name":"John Fouhy","link":"https:\/\/stackoverflow.com\/users\/15154\/john-fouhy"},"is_accepted":false,"score":109,"last_activity_date":1242859078,"last_edit_date":null,"creation_date":1242859078,"answer_id":890597,"question_id":890128,"content_license":"CC BY-SA 2.5","body_markdown":"The two-line summary:\r\n\r\n 1. [Closures][1]: Very useful.  Learn them, use them, love them.\r\n 2. Python&#39;s `lambda` keyword: unnecessary, occasionally useful.  If you find yourself doing anything remotely complex with it, put it away and define a real function.\r\n\r\n\r\n  [1]: http:\/\/en.wikipedia.org\/wiki\/Closure_(computer_science)","body":"<p>The two-line summary:<\/p>\n\n<ol>\n<li><a href=\"http:\/\/en.wikipedia.org\/wiki\/Closure_(computer_science)\" rel=\"noreferrer\">Closures<\/a>: Very useful.  Learn them, use them, love them.<\/li>\n<li>Python's <code>lambda<\/code> keyword: unnecessary, occasionally useful.  If you find yourself doing anything remotely complex with it, put it away and define a real function.<\/li>\n<\/ol>\n","community_owned_date":null},{"owner":{"account_id":3445531,"reputation":1091,"user_id":2886440,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/764b35649f04ee107a23f7b0eebb2ac5?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"user2886440","link":"https:\/\/stackoverflow.com\/users\/2886440\/user2886440"},"is_accepted":false,"score":109,"last_activity_date":1526380044,"last_edit_date":1526380044.0,"creation_date":1393328979,"answer_id":22013331,"question_id":5178292,"content_license":"CC BY-SA 4.0","body_markdown":"There maybe various answers for the above issue, below is a aggregated solution.\r\n\r\nFor Ubuntu:\r\n\r\n    $ sudo apt update\r\n    $ sudo apt install python-dev\r\n    $ sudo apt install python-MySQLdb\r\n\r\nFor CentOS:\r\n\r\n    $ yum install python-devel mysql-devel\r\n    ","body":"<p>There maybe various answers for the above issue, below is a aggregated solution.<\/p>\n\n<p>For Ubuntu:<\/p>\n\n<pre><code>$ sudo apt update\n$ sudo apt install python-dev\n$ sudo apt install python-MySQLdb\n<\/code><\/pre>\n\n<p>For CentOS:<\/p>\n\n<pre><code>$ yum install python-devel mysql-devel\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":481416,"reputation":356200,"user_id":895245,"user_type":"registered","accept_rate":49,"profile_image":"https:\/\/i.stack.imgur.com\/5Powi.jpg?s=256&g=1","display_name":"Ciro Santilli OurBigBook.com","link":"https:\/\/stackoverflow.com\/users\/895245\/ciro-santilli-ourbigbook-com"},"is_accepted":false,"score":109,"last_activity_date":1582990297,"last_edit_date":1582990297.0,"creation_date":1553383413,"answer_id":55319297,"question_id":3044580,"content_license":"CC BY-SA 4.0","body_markdown":"**Python documentation quotes**\r\n\r\nThe canonical version of this answer is now at the dupliquee question: https:\/\/stackoverflow.com\/questions\/18114285\/what-are-the-differences-between-the-threading-and-multiprocessing-modules\/60451367#60451367\r\n\r\nI&#39;ve highlighted the key Python documentation quotes about Process vs Threads and the GIL at: https:\/\/stackoverflow.com\/questions\/1294382\/what-is-the-global-interpreter-lock-gil-in-cpython\/55309364#55309364\r\n\r\n**Process vs thread experiments**\r\n\r\nI did a bit of benchmarking in order to show the difference more concretely.\r\n\r\nIn the benchmark, I timed CPU and IO bound work for various numbers of threads on an [8 hyperthread](https:\/\/superuser.com\/questions\/133082\/what-is-the-difference-between-hyper-threading-and-multiple-cores\/995858#995858) CPU. The work supplied per thread is always the same, such that more threads means more total work supplied.\r\n\r\nThe results were:\r\n\r\n[![enter image description here][1]][1]\r\n\r\n[Plot data](https:\/\/gist.github.com\/cirosantilli\/46cf026cef9b3d2e4ea28c0acfc89a5a).\r\n\r\nConclusions:\r\n\r\n-   for CPU bound work, multiprocessing is always faster, presumably due to the GIL\r\n\r\n-   for IO bound work. both are exactly the same speed\r\n\r\n-   threads only scale up to about 4x instead of the expected 8x since I&#39;m on an 8 hyperthread machine.\r\n\r\n    Contrast that with a C POSIX CPU-bound work which reaches the expected 8x speedup: https:\/\/stackoverflow.com\/questions\/556405\/what-do-real-user-and-sys-mean-in-the-output-of-time1\/53937376#53937376\r\n\r\n    TODO: I don&#39;t know the reason for this, there must be other Python inefficiencies coming into play.\r\n\r\nTest code:\r\n\r\n    #!\/usr\/bin\/env python3\r\n    \r\n    import multiprocessing\r\n    import threading\r\n    import time\r\n    import sys\r\n    \r\n    def cpu_func(result, niters):\r\n        &#39;&#39;&#39;\r\n        A useless CPU bound function.\r\n        &#39;&#39;&#39;\r\n        for i in range(niters):\r\n            result = (result * result * i + 2 * result * i * i + 3) % 10000000\r\n        return result\r\n    \r\n    class CpuThread(threading.Thread):\r\n        def __init__(self, niters):\r\n            super().__init__()\r\n            self.niters = niters\r\n            self.result = 1\r\n        def run(self):\r\n            self.result = cpu_func(self.result, self.niters)\r\n    \r\n    class CpuProcess(multiprocessing.Process):\r\n        def __init__(self, niters):\r\n            super().__init__()\r\n            self.niters = niters\r\n            self.result = 1\r\n        def run(self):\r\n            self.result = cpu_func(self.result, self.niters)\r\n    \r\n    class IoThread(threading.Thread):\r\n        def __init__(self, sleep):\r\n            super().__init__()\r\n            self.sleep = sleep\r\n            self.result = self.sleep\r\n        def run(self):\r\n            time.sleep(self.sleep)\r\n    \r\n    class IoProcess(multiprocessing.Process):\r\n        def __init__(self, sleep):\r\n            super().__init__()\r\n            self.sleep = sleep\r\n            self.result = self.sleep\r\n        def run(self):\r\n            time.sleep(self.sleep)\r\n    \r\n    if __name__ == &#39;__main__&#39;:\r\n        cpu_n_iters = int(sys.argv[1])\r\n        sleep = 1\r\n        cpu_count = multiprocessing.cpu_count()\r\n        input_params = [\r\n            (CpuThread, cpu_n_iters),\r\n            (CpuProcess, cpu_n_iters),\r\n            (IoThread, sleep),\r\n            (IoProcess, sleep),\r\n        ]\r\n        header = [&#39;nthreads&#39;]\r\n        for thread_class, _ in input_params:\r\n            header.append(thread_class.__name__)\r\n        print(&#39; &#39;.join(header))\r\n        for nthreads in range(1, 2 * cpu_count):\r\n            results = [nthreads]\r\n            for thread_class, work_size in input_params:\r\n                start_time = time.time()\r\n                threads = []\r\n                for i in range(nthreads):\r\n                    thread = thread_class(work_size)\r\n                    threads.append(thread)\r\n                    thread.start()\r\n                for i, thread in enumerate(threads):\r\n                    thread.join()\r\n                results.append(time.time() - start_time)\r\n            print(&#39; &#39;.join(&#39;{:.6e}&#39;.format(result) for result in results))\r\n\r\n[GitHub upstream + plotting code on same directory](https:\/\/github.com\/cirosantilli\/python-cheat\/blob\/7a2cb07ef4ceb698689f5ddf060a3b7da05ff440\/thread_cpu_bound.py).\r\n\r\nTested on Ubuntu 18.10, Python 3.6.7, in a Lenovo ThinkPad P51 laptop with CPU: Intel Core i7-7820HQ CPU (4 cores \/ 8 threads), RAM: 2x Samsung M471A2K43BB1-CRC (2x 16GiB), SSD: Samsung MZVLB512HAJQ-000L7 (3,000 MB\/s).\r\n\r\n**Visualize which threads are running at a given time**\r\n\r\nThis post https:\/\/rohanvarma.me\/GIL\/ taught me that you can run a callback whenever a thread is scheduled with the [`target=` argument of `threading.Thread`](https:\/\/docs.python.org\/3\/library\/threading.html#thread-objects) and the same for `multiprocessing.Process`.\r\n\r\nThis allows us to view exactly which thread runs at each time. When this is done, we would see something like (I made this particular graph up): \r\n\r\n```  \r\n            +--------------------------------------+\r\n            + Active threads \/ processes           +\r\n+-----------+--------------------------------------+\r\n|Thread   1 |********     ************             |\r\n|         2 |        *****            *************|\r\n+-----------+--------------------------------------+\r\n|Process  1 |***  ************** ******  ****      |\r\n|         2 |** **** ****** ** ********* **********|\r\n+-----------+--------------------------------------+\r\n            + Time --&gt;                             +\r\n            +--------------------------------------+\r\n```\r\n\r\nwhich would show that:\r\n\r\n- threads are fully serialized by the GIL\r\n- processes can run in parallel\r\n\r\n  [1]: https:\/\/i.stack.imgur.com\/2x04m.png","body":"<p><strong>Python documentation quotes<\/strong><\/p>\n\n<p>The canonical version of this answer is now at the dupliquee question: <a href=\"https:\/\/stackoverflow.com\/questions\/18114285\/what-are-the-differences-between-the-threading-and-multiprocessing-modules\/60451367#60451367\">What are the differences between the threading and multiprocessing modules?<\/a><\/p>\n\n<p>I've highlighted the key Python documentation quotes about Process vs Threads and the GIL at: <a href=\"https:\/\/stackoverflow.com\/questions\/1294382\/what-is-the-global-interpreter-lock-gil-in-cpython\/55309364#55309364\">What is the global interpreter lock (GIL) in CPython?<\/a><\/p>\n\n<p><strong>Process vs thread experiments<\/strong><\/p>\n\n<p>I did a bit of benchmarking in order to show the difference more concretely.<\/p>\n\n<p>In the benchmark, I timed CPU and IO bound work for various numbers of threads on an <a href=\"https:\/\/superuser.com\/questions\/133082\/what-is-the-difference-between-hyper-threading-and-multiple-cores\/995858#995858\">8 hyperthread<\/a> CPU. The work supplied per thread is always the same, such that more threads means more total work supplied.<\/p>\n\n<p>The results were:<\/p>\n\n<p><a href=\"https:\/\/i.stack.imgur.com\/2x04m.png\" rel=\"noreferrer\"><img src=\"https:\/\/i.stack.imgur.com\/2x04m.png\" alt=\"enter image description here\"><\/a><\/p>\n\n<p><a href=\"https:\/\/gist.github.com\/cirosantilli\/46cf026cef9b3d2e4ea28c0acfc89a5a\" rel=\"noreferrer\">Plot data<\/a>.<\/p>\n\n<p>Conclusions:<\/p>\n\n<ul>\n<li><p>for CPU bound work, multiprocessing is always faster, presumably due to the GIL<\/p><\/li>\n<li><p>for IO bound work. both are exactly the same speed<\/p><\/li>\n<li><p>threads only scale up to about 4x instead of the expected 8x since I'm on an 8 hyperthread machine.<\/p>\n\n<p>Contrast that with a C POSIX CPU-bound work which reaches the expected 8x speedup: <a href=\"https:\/\/stackoverflow.com\/questions\/556405\/what-do-real-user-and-sys-mean-in-the-output-of-time1\/53937376#53937376\">What do &#39;real&#39;, &#39;user&#39; and &#39;sys&#39; mean in the output of time(1)?<\/a><\/p>\n\n<p>TODO: I don't know the reason for this, there must be other Python inefficiencies coming into play.<\/p><\/li>\n<\/ul>\n\n<p>Test code:<\/p>\n\n<pre><code>#!\/usr\/bin\/env python3\n\nimport multiprocessing\nimport threading\nimport time\nimport sys\n\ndef cpu_func(result, niters):\n    '''\n    A useless CPU bound function.\n    '''\n    for i in range(niters):\n        result = (result * result * i + 2 * result * i * i + 3) % 10000000\n    return result\n\nclass CpuThread(threading.Thread):\n    def __init__(self, niters):\n        super().__init__()\n        self.niters = niters\n        self.result = 1\n    def run(self):\n        self.result = cpu_func(self.result, self.niters)\n\nclass CpuProcess(multiprocessing.Process):\n    def __init__(self, niters):\n        super().__init__()\n        self.niters = niters\n        self.result = 1\n    def run(self):\n        self.result = cpu_func(self.result, self.niters)\n\nclass IoThread(threading.Thread):\n    def __init__(self, sleep):\n        super().__init__()\n        self.sleep = sleep\n        self.result = self.sleep\n    def run(self):\n        time.sleep(self.sleep)\n\nclass IoProcess(multiprocessing.Process):\n    def __init__(self, sleep):\n        super().__init__()\n        self.sleep = sleep\n        self.result = self.sleep\n    def run(self):\n        time.sleep(self.sleep)\n\nif __name__ == '__main__':\n    cpu_n_iters = int(sys.argv[1])\n    sleep = 1\n    cpu_count = multiprocessing.cpu_count()\n    input_params = [\n        (CpuThread, cpu_n_iters),\n        (CpuProcess, cpu_n_iters),\n        (IoThread, sleep),\n        (IoProcess, sleep),\n    ]\n    header = ['nthreads']\n    for thread_class, _ in input_params:\n        header.append(thread_class.__name__)\n    print(' '.join(header))\n    for nthreads in range(1, 2 * cpu_count):\n        results = [nthreads]\n        for thread_class, work_size in input_params:\n            start_time = time.time()\n            threads = []\n            for i in range(nthreads):\n                thread = thread_class(work_size)\n                threads.append(thread)\n                thread.start()\n            for i, thread in enumerate(threads):\n                thread.join()\n            results.append(time.time() - start_time)\n        print(' '.join('{:.6e}'.format(result) for result in results))\n<\/code><\/pre>\n\n<p><a href=\"https:\/\/github.com\/cirosantilli\/python-cheat\/blob\/7a2cb07ef4ceb698689f5ddf060a3b7da05ff440\/thread_cpu_bound.py\" rel=\"noreferrer\">GitHub upstream + plotting code on same directory<\/a>.<\/p>\n\n<p>Tested on Ubuntu 18.10, Python 3.6.7, in a Lenovo ThinkPad P51 laptop with CPU: Intel Core i7-7820HQ CPU (4 cores \/ 8 threads), RAM: 2x Samsung M471A2K43BB1-CRC (2x 16GiB), SSD: Samsung MZVLB512HAJQ-000L7 (3,000 MB\/s).<\/p>\n\n<p><strong>Visualize which threads are running at a given time<\/strong><\/p>\n\n<p>This post <a href=\"https:\/\/rohanvarma.me\/GIL\/\" rel=\"noreferrer\">https:\/\/rohanvarma.me\/GIL\/<\/a> taught me that you can run a callback whenever a thread is scheduled with the <a href=\"https:\/\/docs.python.org\/3\/library\/threading.html#thread-objects\" rel=\"noreferrer\"><code>target=<\/code> argument of <code>threading.Thread<\/code><\/a> and the same for <code>multiprocessing.Process<\/code>.<\/p>\n\n<p>This allows us to view exactly which thread runs at each time. When this is done, we would see something like (I made this particular graph up): <\/p>\n\n<pre><code>            +--------------------------------------+\n            + Active threads \/ processes           +\n+-----------+--------------------------------------+\n|Thread   1 |********     ************             |\n|         2 |        *****            *************|\n+-----------+--------------------------------------+\n|Process  1 |***  ************** ******  ****      |\n|         2 |** **** ****** ** ********* **********|\n+-----------+--------------------------------------+\n            + Time --&gt;                             +\n            +--------------------------------------+\n<\/code><\/pre>\n\n<p>which would show that:<\/p>\n\n<ul>\n<li>threads are fully serialized by the GIL<\/li>\n<li>processes can run in parallel<\/li>\n<\/ul>\n","community_owned_date":null},{"owner":{"account_id":4514996,"reputation":3257,"user_id":3681451,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/1a29af8edca36afe4fcc65578c40d6e6?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"szeitlin","link":"https:\/\/stackoverflow.com\/users\/3681451\/szeitlin"},"is_accepted":false,"score":108,"last_activity_date":1526303558,"last_edit_date":1526303558.0,"creation_date":1444319972,"answer_id":33020669,"question_id":20638006,"content_license":"CC BY-SA 4.0","body_markdown":"In pandas 16.2, I had to do `pd.DataFrame.from_records(d)` to get this to work.","body":"<p>In pandas 16.2, I had to do <code>pd.DataFrame.from_records(d)<\/code> to get this to work.<\/p>\n","community_owned_date":null},{"owner":{"account_id":243184,"reputation":20393,"user_id":515189,"user_type":"registered","profile_image":"https:\/\/lh3.googleusercontent.com\/a-\/AAuE7mDZopUyzXjIHDwhKQdskFzNbIW99yO73OPQqgPqyg=k-s256","display_name":"Paolo","link":"https:\/\/stackoverflow.com\/users\/515189\/paolo"},"is_accepted":false,"score":107,"last_activity_date":1343489586,"last_edit_date":1343489586.0,"creation_date":1322516427,"answer_id":8302728,"question_id":624926,"content_license":"CC BY-SA 3.0","body_markdown":"[Since Python 2.1][1] you can import `isfunction` from the [`inspect`](http:\/\/docs.python.org\/library\/inspect.html) module.\r\n\r\n    &gt;&gt;&gt; from inspect import isfunction\r\n    &gt;&gt;&gt; def f(): pass\r\n    &gt;&gt;&gt; isfunction(f)\r\n    True\r\n    &gt;&gt;&gt; isfunction(lambda x: x)\r\n    True\r\n\r\n\r\n  [1]: http:\/\/docs.python.org\/library\/inspect.html#module-inspect","body":"<p><a href=\"http:\/\/docs.python.org\/library\/inspect.html#module-inspect\">Since Python 2.1<\/a> you can import <code>isfunction<\/code> from the <a href=\"http:\/\/docs.python.org\/library\/inspect.html\"><code>inspect<\/code><\/a> module.<\/p>\n\n<pre><code>&gt;&gt;&gt; from inspect import isfunction\n&gt;&gt;&gt; def f(): pass\n&gt;&gt;&gt; isfunction(f)\nTrue\n&gt;&gt;&gt; isfunction(lambda x: x)\nTrue\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":6358,"reputation":386376,"user_id":10661,"user_type":"registered","accept_rate":91,"profile_image":"https:\/\/www.gravatar.com\/avatar\/c2c732bbf13dc96670b210b3c0c1ead5?s=256&d=identicon&r=PG","display_name":"S.Lott","link":"https:\/\/stackoverflow.com\/users\/10661\/s-lott"},"is_accepted":false,"score":106,"last_activity_date":1231886523,"last_edit_date":null,"creation_date":1231886523,"answer_id":441154,"question_id":441147,"content_license":"CC BY-SA 2.5","body_markdown":"Subtract `datetime.timedelta(days=1)`","body":"<p>Subtract <code>datetime.timedelta(days=1)<\/code><\/p>\n","community_owned_date":null},{"owner":{"account_id":229587,"reputation":2041,"user_id":492631,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/bb35fdb1058f08f5cd02630b966d98d4?s=256&d=identicon&r=PG","display_name":"orluke","link":"https:\/\/stackoverflow.com\/users\/492631\/orluke"},"is_accepted":false,"score":106,"last_activity_date":1579798995,"last_edit_date":1579798995.0,"creation_date":1311345050,"answer_id":6791534,"question_id":899103,"content_license":"CC BY-SA 4.0","body_markdown":"Using **Python 3** and **Python 2.6+** syntax:\r\n\r\n    with open(filepath, &#39;w&#39;) as file_handler:\r\n        for item in the_list:\r\n            file_handler.write(&quot;{}\\n&quot;.format(item))\r\n\r\nThis is platform-independent. It also terminates the final line with a newline character, which is a [UNIX best practice](https:\/\/stackoverflow.com\/questions\/729692\/why-should-text-files-end-with-a-newline).\r\n\r\nStarting with Python 3.6, `&quot;{}\\n&quot;.format(item)` can be replaced with an f-string: `f&quot;{item}\\n&quot;`.","body":"<p>Using <strong>Python 3<\/strong> and <strong>Python 2.6+<\/strong> syntax:<\/p>\n\n<pre><code>with open(filepath, 'w') as file_handler:\n    for item in the_list:\n        file_handler.write(\"{}\\n\".format(item))\n<\/code><\/pre>\n\n<p>This is platform-independent. It also terminates the final line with a newline character, which is a <a href=\"https:\/\/stackoverflow.com\/questions\/729692\/why-should-text-files-end-with-a-newline\">UNIX best practice<\/a>.<\/p>\n\n<p>Starting with Python 3.6, <code>\"{}\\n\".format(item)<\/code> can be replaced with an f-string: <code>f\"{item}\\n\"<\/code>.<\/p>\n","community_owned_date":null},{"owner":{"account_id":357170,"reputation":7416,"user_id":697151,"user_type":"registered","accept_rate":71,"profile_image":"https:\/\/www.gravatar.com\/avatar\/b835782f265dc1589080dbabd3c04dd5?s=256&d=identicon&r=PG","display_name":"steve-gregory","link":"https:\/\/stackoverflow.com\/users\/697151\/steve-gregory"},"is_accepted":false,"score":106,"last_activity_date":1354603895,"last_edit_date":null,"creation_date":1354603895,"answer_id":13697561,"question_id":5178292,"content_license":"CC BY-SA 3.0","body_markdown":"    apt-get install libmysqlclient-dev python-dev\r\n\r\nSeemed to do the trick.","body":"<pre><code>apt-get install libmysqlclient-dev python-dev\n<\/code><\/pre>\n\n<p>Seemed to do the trick.<\/p>\n","community_owned_date":null},{"owner":{"account_id":25154,"reputation":3080,"user_id":64444,"user_type":"registered","accept_rate":83,"profile_image":"https:\/\/www.gravatar.com\/avatar\/88d576a18ff960e17787020cb9b791f7?s=256&d=identicon&r=PG","display_name":"schettino72","link":"https:\/\/stackoverflow.com\/users\/64444\/schettino72"},"is_accepted":false,"score":105,"last_activity_date":1693917559,"last_edit_date":1693917559.0,"creation_date":1257259991,"answer_id":1667825,"question_id":323972,"content_license":"CC BY-SA 4.0","body_markdown":"If you are trying to terminate the whole program you can set the thread as a &quot;daemon&quot;. see [`Thread.daemon`][1]\r\n\r\n\r\n  [1]: http:\/\/docs.python.org\/library\/threading.html#threading.Thread.daemon","body":"<p>If you are trying to terminate the whole program you can set the thread as a &quot;daemon&quot;. see <a href=\"http:\/\/docs.python.org\/library\/threading.html#threading.Thread.daemon\" rel=\"nofollow noreferrer\"><code>Thread.daemon<\/code><\/a><\/p>\n","community_owned_date":null},{"owner":{"account_id":7040846,"reputation":147688,"user_id":5393381,"user_type":"registered","accept_rate":84,"profile_image":"https:\/\/www.gravatar.com\/avatar\/dc9b2bf1db7fa5d5e1444f1c15a8d9f7?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"MSeifert","link":"https:\/\/stackoverflow.com\/users\/5393381\/mseifert"},"is_accepted":false,"score":105,"last_activity_date":1682660099,"last_edit_date":1682660099.0,"creation_date":1530030275,"answer_id":51047523,"question_id":2485466,"content_license":"CC BY-SA 4.0","body_markdown":"&gt; I&#39;m getting an error in the IF conditional. What am I doing wrong?\r\n\r\nThere reason that you get a `SyntaxError` is that there is no `&amp;&amp;` operator in Python. Likewise `||` and `!` are **not valid** Python operators. \r\n\r\nSome of the operators you may know from other languages have a different name in Python.\r\nThe logical operators `&amp;&amp;` and `||` are actually called `and` and `or`.\r\nLikewise the logical negation operator `!` is called `not`.\r\n\r\nSo you could just write:\r\n\r\n    if len(a) % 2 == 0 and len(b) % 2 == 0:\r\n\r\nor even:\r\n\r\n    if not (len(a) % 2 or len(b) % 2):\r\n\r\n# Some additional information (that might come in handy):\r\n\r\nI summarized the operator &quot;equivalents&quot; in this table:\r\n\r\n\r\n|  Operator (other languages)  |  Operator (Python)  |\r\n|------------------------------|---------------------|\r\n|              `&amp;&amp;`            |         `and`       |\r\n|              `||`            |         `or`        |\r\n|              `!`             |         `not`       |\r\n\r\nSee also [Python documentation: 6.11. Boolean operations](https:\/\/docs.python.org\/reference\/expressions.html#boolean-operations).\r\n\r\nBesides the logical operators Python also has bitwise\/binary operators:\r\n\r\n\r\n|  Logical operator  |  Bitwise operator  |\r\n|--------------------|--------------------|\r\n|        `and`       |         `&amp;`        |\r\n|         `or`       |         `|`        |\r\n\r\n\r\nThere is no bitwise negation in Python (just the bitwise inverse operator `~` - but that is **not** equivalent to `not`).\r\n\r\nSee also [6.6. Unary arithmetic and bitwise\/binary operations](https:\/\/docs.python.org\/3\/reference\/expressions.html#unary-arithmetic-and-bitwise-operations) and [6.7. Binary arithmetic operations](https:\/\/docs.python.org\/reference\/expressions.html#binary-arithmetic-operations).\r\n\r\nThe logical operators (like in many other languages) have the advantage that these are short-circuited.\r\nThat means if the first operand already defines the result, then the second operator isn&#39;t evaluated at all.\r\n\r\nTo show this I use a function that simply takes a value, prints it and returns it again. This is handy to see what is actually\r\nevaluated because of the print statements:\r\n\r\n    &gt;&gt;&gt; def print_and_return(value):\r\n    ...     print(value)\r\n    ...     return value\r\n\r\n    &gt;&gt;&gt; res = print_and_return(False) and print_and_return(True)\r\n    False\r\n\r\nAs you can see only one print statement is executed, so Python really didn&#39;t even look at the right operand.\r\n\r\nThis is not the case for the binary operators. Those always evaluate both operands:\r\n\r\n    &gt;&gt;&gt; res = print_and_return(False) &amp; print_and_return(True);\r\n    False\r\n    True\r\n\r\nBut if the first operand isn&#39;t enough then, of course, the second operator is evaluated:\r\n\r\n    &gt;&gt;&gt; res = print_and_return(True) and print_and_return(False);\r\n    True\r\n    False\r\n\r\nTo summarize this here is another table:\r\n\r\n|   Expression    |  Right side evaluated?  |\r\n|-----------------|-------------------------|\r\n| `True` and ...  |           Yes           |\r\n| `False` and ... |           No            |\r\n|  `True` or ...  |           No            |\r\n| `False` or ...  |           Yes           |\r\n\r\nThe `True` and `False` represent what `bool(left-hand-side)` returns, they don&#39;t have to be `True` or `False`, they just need to return `True` or `False` when `bool` is called on them &lt;sup&gt;(1)&lt;sup&gt;.\r\n\r\nSo in Pseudo-Code(!) the `and` and `or` functions work like these:\r\n\r\n&lt;!-- language: none --&gt;\r\n\r\n    def and(expr1, expr2):\r\n        left = evaluate(expr1)\r\n        if bool(left):\r\n            return evaluate(expr2)\r\n        else:\r\n            return left\r\n\r\n    def or(expr1, expr2):\r\n        left = evaluate(expr1)\r\n        if bool(left):\r\n            return left\r\n        else:\r\n            return evaluate(expr2)\r\n\r\nNote that this is pseudo-code not Python code. In Python you cannot create functions called `and` or `or` because these are keywords. \r\nAlso you should never use &quot;evaluate&quot; or `if bool(...)`.\r\n\r\n# Customizing the behavior of your own classes\r\n\r\nThis implicit `bool` call can be used to customize how your classes behave with `and`, `or` and `not`.\r\n\r\nTo show how this can be customized I use this class which again `print`s something to track what is happening:\r\n\r\n    class Test(object):\r\n        def __init__(self, value):\r\n            self.value = value\r\n\r\n        def __bool__(self):\r\n            print(&#39;__bool__ called on {!r}&#39;.format(self))\r\n            return bool(self.value)\r\n\r\n        __nonzero__ = __bool__  # Python 2 compatibility\r\n\r\n        def __repr__(self):\r\n            return &quot;{self.__class__.__name__}({self.value})&quot;.format(self=self)\r\n\r\nSo let&#39;s see what happens with that class in combination with these operators:\r\n\r\n    &gt;&gt;&gt; if Test(True) and Test(False):\r\n    ...     pass\r\n    __bool__ called on Test(True)\r\n    __bool__ called on Test(False)\r\n\r\n    &gt;&gt;&gt; if Test(False) or Test(False):\r\n    ...     pass\r\n    __bool__ called on Test(False)\r\n    __bool__ called on Test(False)\r\n\r\n    &gt;&gt;&gt; if not Test(True):\r\n    ...     pass\r\n    __bool__ called on Test(True)\r\n\r\nIf you don&#39;t have a `__bool__` method then Python also checks if the object has a `__len__` method and if it returns a value greater than zero. \r\nThat might be useful to know in case you create a sequence container.\r\n\r\nSee also [4.1. Truth Value Testing](https:\/\/docs.python.org\/library\/stdtypes.html?highlight=truth%20value#truth-value-testing).\r\n\r\n# NumPy arrays and subclasses\r\n\r\nProbably a bit beyond the scope of the original question but in case you&#39;re dealing with NumPy arrays or subclasses (like Pandas Series or DataFrames) then the implicit `bool` call\r\nwill raise the dreaded `ValueError`:\r\n\r\n    &gt;&gt;&gt; import numpy as np\r\n    &gt;&gt;&gt; arr = np.array([1,2,3])\r\n    &gt;&gt;&gt; bool(arr)\r\n    ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\r\n    &gt;&gt;&gt; arr and arr\r\n    ValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\r\n  \r\n    &gt;&gt;&gt; import pandas as pd\r\n    &gt;&gt;&gt; s = pd.Series([1,2,3])\r\n    &gt;&gt;&gt; bool(s)\r\n    ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\r\n    &gt;&gt;&gt; s and s\r\n    ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\r\n\r\nIn these cases you can use the logical and *function* from NumPy which performs an element-wise `and` (or `or`):\r\n\r\n    &gt;&gt;&gt; np.logical_and(np.array([False,False,True,True]), np.array([True, False, True, False]))\r\n    array([False, False,  True, False])\r\n    &gt;&gt;&gt; np.logical_or(np.array([False,False,True,True]), np.array([True, False, True, False]))\r\n    array([ True, False,  True,  True])\r\n\r\nIf you&#39;re dealing just with **boolean arrays** you could also use the binary operators with NumPy, these do perform element-wise (but also binary) comparisons:\r\n\r\n    &gt;&gt;&gt; np.array([False,False,True,True]) &amp; np.array([True, False, True, False])\r\n    array([False, False,  True, False])\r\n    &gt;&gt;&gt; np.array([False,False,True,True]) | np.array([True, False, True, False])\r\n    array([ True, False,  True,  True])\r\n\r\n---\r\n\r\n&lt;sup&gt;(1)&lt;sup&gt;\r\n\r\nThat the `bool` call on the operands has to return `True` or `False` isn&#39;t completely correct. It&#39;s just the first operand that needs to return a boolean in it&#39;s `__bool__` method:\r\n\r\n    class Test(object):\r\n        def __init__(self, value):\r\n            self.value = value\r\n\r\n        def __bool__(self):\r\n            return self.value\r\n\r\n        __nonzero__ = __bool__  # Python 2 compatibility\r\n\r\n        def __repr__(self):\r\n            return &quot;{self.__class__.__name__}({self.value})&quot;.format(self=self)\r\n\r\n    &gt;&gt;&gt; x = Test(10) and Test(10)\r\n    TypeError: __bool__ should return bool, returned int\r\n    &gt;&gt;&gt; x1 = Test(True) and Test(10)\r\n    &gt;&gt;&gt; x2 = Test(False) and Test(10)\r\n\r\nThat&#39;s because `and` actually returns the first operand if the first operand evaluates to `False` and if it evaluates to `True` then it returns the second operand:\r\n\r\n    &gt;&gt;&gt; x1\r\n    Test(10)\r\n    &gt;&gt;&gt; x2\r\n    Test(False)\r\n\r\nSimilarly for `or` but just the other way around:\r\n\r\n    &gt;&gt;&gt; Test(True) or Test(10)\r\n    Test(True)\r\n    &gt;&gt;&gt; Test(False) or Test(10)\r\n    Test(10)\r\n\r\nHowever if you use them in an `if` statement the `if` will also implicitly call `bool` on the result. So these finer points may not be relevant for you.","body":"<blockquote>\n<p>I'm getting an error in the IF conditional. What am I doing wrong?<\/p>\n<\/blockquote>\n<p>There reason that you get a <code>SyntaxError<\/code> is that there is no <code>&amp;&amp;<\/code> operator in Python. Likewise <code>||<\/code> and <code>!<\/code> are <strong>not valid<\/strong> Python operators.<\/p>\n<p>Some of the operators you may know from other languages have a different name in Python.\nThe logical operators <code>&amp;&amp;<\/code> and <code>||<\/code> are actually called <code>and<\/code> and <code>or<\/code>.\nLikewise the logical negation operator <code>!<\/code> is called <code>not<\/code>.<\/p>\n<p>So you could just write:<\/p>\n<pre><code>if len(a) % 2 == 0 and len(b) % 2 == 0:\n<\/code><\/pre>\n<p>or even:<\/p>\n<pre><code>if not (len(a) % 2 or len(b) % 2):\n<\/code><\/pre>\n<h1>Some additional information (that might come in handy):<\/h1>\n<p>I summarized the operator &quot;equivalents&quot; in this table:<\/p>\n<div class=\"s-table-container\">\n<table class=\"s-table\">\n<thead>\n<tr>\n<th>Operator (other languages)<\/th>\n<th>Operator (Python)<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr>\n<td><code>&amp;&amp;<\/code><\/td>\n<td><code>and<\/code><\/td>\n<\/tr>\n<tr>\n<td><code>||<\/code><\/td>\n<td><code>or<\/code><\/td>\n<\/tr>\n<tr>\n<td><code>!<\/code><\/td>\n<td><code>not<\/code><\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<\/div>\n<p>See also <a href=\"https:\/\/docs.python.org\/reference\/expressions.html#boolean-operations\" rel=\"noreferrer\">Python documentation: 6.11. Boolean operations<\/a>.<\/p>\n<p>Besides the logical operators Python also has bitwise\/binary operators:<\/p>\n<div class=\"s-table-container\">\n<table class=\"s-table\">\n<thead>\n<tr>\n<th>Logical operator<\/th>\n<th>Bitwise operator<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr>\n<td><code>and<\/code><\/td>\n<td><code>&amp;<\/code><\/td>\n<\/tr>\n<tr>\n<td><code>or<\/code><\/td>\n<td><code>|<\/code><\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<\/div>\n<p>There is no bitwise negation in Python (just the bitwise inverse operator <code>~<\/code> - but that is <strong>not<\/strong> equivalent to <code>not<\/code>).<\/p>\n<p>See also <a href=\"https:\/\/docs.python.org\/3\/reference\/expressions.html#unary-arithmetic-and-bitwise-operations\" rel=\"noreferrer\">6.6. Unary arithmetic and bitwise\/binary operations<\/a> and <a href=\"https:\/\/docs.python.org\/reference\/expressions.html#binary-arithmetic-operations\" rel=\"noreferrer\">6.7. Binary arithmetic operations<\/a>.<\/p>\n<p>The logical operators (like in many other languages) have the advantage that these are short-circuited.\nThat means if the first operand already defines the result, then the second operator isn't evaluated at all.<\/p>\n<p>To show this I use a function that simply takes a value, prints it and returns it again. This is handy to see what is actually\nevaluated because of the print statements:<\/p>\n<pre><code>&gt;&gt;&gt; def print_and_return(value):\n...     print(value)\n...     return value\n\n&gt;&gt;&gt; res = print_and_return(False) and print_and_return(True)\nFalse\n<\/code><\/pre>\n<p>As you can see only one print statement is executed, so Python really didn't even look at the right operand.<\/p>\n<p>This is not the case for the binary operators. Those always evaluate both operands:<\/p>\n<pre><code>&gt;&gt;&gt; res = print_and_return(False) &amp; print_and_return(True);\nFalse\nTrue\n<\/code><\/pre>\n<p>But if the first operand isn't enough then, of course, the second operator is evaluated:<\/p>\n<pre><code>&gt;&gt;&gt; res = print_and_return(True) and print_and_return(False);\nTrue\nFalse\n<\/code><\/pre>\n<p>To summarize this here is another table:<\/p>\n<div class=\"s-table-container\">\n<table class=\"s-table\">\n<thead>\n<tr>\n<th>Expression<\/th>\n<th>Right side evaluated?<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr>\n<td><code>True<\/code> and ...<\/td>\n<td>Yes<\/td>\n<\/tr>\n<tr>\n<td><code>False<\/code> and ...<\/td>\n<td>No<\/td>\n<\/tr>\n<tr>\n<td><code>True<\/code> or ...<\/td>\n<td>No<\/td>\n<\/tr>\n<tr>\n<td><code>False<\/code> or ...<\/td>\n<td>Yes<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<\/div>\n<p>The <code>True<\/code> and <code>False<\/code> represent what <code>bool(left-hand-side)<\/code> returns, they don't have to be <code>True<\/code> or <code>False<\/code>, they just need to return <code>True<\/code> or <code>False<\/code> when <code>bool<\/code> is called on them (1).<\/p>\n<p>So in Pseudo-Code(!) the <code>and<\/code> and <code>or<\/code> functions work like these:<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>def and(expr1, expr2):\n    left = evaluate(expr1)\n    if bool(left):\n        return evaluate(expr2)\n    else:\n        return left\n\ndef or(expr1, expr2):\n    left = evaluate(expr1)\n    if bool(left):\n        return left\n    else:\n        return evaluate(expr2)\n<\/code><\/pre>\n<p>Note that this is pseudo-code not Python code. In Python you cannot create functions called <code>and<\/code> or <code>or<\/code> because these are keywords.\nAlso you should never use &quot;evaluate&quot; or <code>if bool(...)<\/code>.<\/p>\n<h1>Customizing the behavior of your own classes<\/h1>\n<p>This implicit <code>bool<\/code> call can be used to customize how your classes behave with <code>and<\/code>, <code>or<\/code> and <code>not<\/code>.<\/p>\n<p>To show how this can be customized I use this class which again <code>print<\/code>s something to track what is happening:<\/p>\n<pre><code>class Test(object):\n    def __init__(self, value):\n        self.value = value\n\n    def __bool__(self):\n        print('__bool__ called on {!r}'.format(self))\n        return bool(self.value)\n\n    __nonzero__ = __bool__  # Python 2 compatibility\n\n    def __repr__(self):\n        return &quot;{self.__class__.__name__}({self.value})&quot;.format(self=self)\n<\/code><\/pre>\n<p>So let's see what happens with that class in combination with these operators:<\/p>\n<pre><code>&gt;&gt;&gt; if Test(True) and Test(False):\n...     pass\n__bool__ called on Test(True)\n__bool__ called on Test(False)\n\n&gt;&gt;&gt; if Test(False) or Test(False):\n...     pass\n__bool__ called on Test(False)\n__bool__ called on Test(False)\n\n&gt;&gt;&gt; if not Test(True):\n...     pass\n__bool__ called on Test(True)\n<\/code><\/pre>\n<p>If you don't have a <code>__bool__<\/code> method then Python also checks if the object has a <code>__len__<\/code> method and if it returns a value greater than zero.\nThat might be useful to know in case you create a sequence container.<\/p>\n<p>See also <a href=\"https:\/\/docs.python.org\/library\/stdtypes.html?highlight=truth%20value#truth-value-testing\" rel=\"noreferrer\">4.1. Truth Value Testing<\/a>.<\/p>\n<h1>NumPy arrays and subclasses<\/h1>\n<p>Probably a bit beyond the scope of the original question but in case you're dealing with NumPy arrays or subclasses (like Pandas Series or DataFrames) then the implicit <code>bool<\/code> call\nwill raise the dreaded <code>ValueError<\/code>:<\/p>\n<pre><code>&gt;&gt;&gt; import numpy as np\n&gt;&gt;&gt; arr = np.array([1,2,3])\n&gt;&gt;&gt; bool(arr)\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\n&gt;&gt;&gt; arr and arr\nValueError: The truth value of an array with more than one element is ambiguous. Use a.any() or a.all()\n\n&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; s = pd.Series([1,2,3])\n&gt;&gt;&gt; bool(s)\nValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\n&gt;&gt;&gt; s and s\nValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().\n<\/code><\/pre>\n<p>In these cases you can use the logical and <em>function<\/em> from NumPy which performs an element-wise <code>and<\/code> (or <code>or<\/code>):<\/p>\n<pre><code>&gt;&gt;&gt; np.logical_and(np.array([False,False,True,True]), np.array([True, False, True, False]))\narray([False, False,  True, False])\n&gt;&gt;&gt; np.logical_or(np.array([False,False,True,True]), np.array([True, False, True, False]))\narray([ True, False,  True,  True])\n<\/code><\/pre>\n<p>If you're dealing just with <strong>boolean arrays<\/strong> you could also use the binary operators with NumPy, these do perform element-wise (but also binary) comparisons:<\/p>\n<pre><code>&gt;&gt;&gt; np.array([False,False,True,True]) &amp; np.array([True, False, True, False])\narray([False, False,  True, False])\n&gt;&gt;&gt; np.array([False,False,True,True]) | np.array([True, False, True, False])\narray([ True, False,  True,  True])\n<\/code><\/pre>\n<hr \/>\n<p>(1)<\/p>\n<p>That the <code>bool<\/code> call on the operands has to return <code>True<\/code> or <code>False<\/code> isn't completely correct. It's just the first operand that needs to return a boolean in it's <code>__bool__<\/code> method:<\/p>\n<pre><code>class Test(object):\n    def __init__(self, value):\n        self.value = value\n\n    def __bool__(self):\n        return self.value\n\n    __nonzero__ = __bool__  # Python 2 compatibility\n\n    def __repr__(self):\n        return &quot;{self.__class__.__name__}({self.value})&quot;.format(self=self)\n\n&gt;&gt;&gt; x = Test(10) and Test(10)\nTypeError: __bool__ should return bool, returned int\n&gt;&gt;&gt; x1 = Test(True) and Test(10)\n&gt;&gt;&gt; x2 = Test(False) and Test(10)\n<\/code><\/pre>\n<p>That's because <code>and<\/code> actually returns the first operand if the first operand evaluates to <code>False<\/code> and if it evaluates to <code>True<\/code> then it returns the second operand:<\/p>\n<pre><code>&gt;&gt;&gt; x1\nTest(10)\n&gt;&gt;&gt; x2\nTest(False)\n<\/code><\/pre>\n<p>Similarly for <code>or<\/code> but just the other way around:<\/p>\n<pre><code>&gt;&gt;&gt; Test(True) or Test(10)\nTest(True)\n&gt;&gt;&gt; Test(False) or Test(10)\nTest(10)\n<\/code><\/pre>\n<p>However if you use them in an <code>if<\/code> statement the <code>if<\/code> will also implicitly call <code>bool<\/code> on the result. So these finer points may not be relevant for you.<\/p>\n","community_owned_date":null},{"owner":{"account_id":221174,"reputation":2664,"user_id":479008,"user_type":"registered","accept_rate":85,"profile_image":"https:\/\/i.stack.imgur.com\/Nebls.gif?s=256&g=1","display_name":"CodeFarmer","link":"https:\/\/stackoverflow.com\/users\/479008\/codefarmer"},"is_accepted":false,"score":102,"last_activity_date":1550518652,"last_edit_date":1550518652.0,"creation_date":1428717666,"answer_id":29573210,"question_id":19410042,"content_license":"CC BY-SA 4.0","body_markdown":"&lt;kbd&gt;Ctrl&lt;\/kbd&gt; + &lt;kbd&gt;Enter&lt;\/kbd&gt;\r\n\r\n    %matplotlib inline\r\n\r\nMagic Line :D\r\n\r\nSee: [Plotting with Matplotlib][1].\r\n\r\n\r\n  [1]: http:\/\/nbviewer.ipython.org\/github\/ipython\/ipython\/blob\/1.x\/examples\/notebooks\/Part%203%20-%20Plotting%20with%20Matplotlib.ipynb","body":"<p><kbd>Ctrl<\/kbd> + <kbd>Enter<\/kbd><\/p>\n\n<pre><code>%matplotlib inline\n<\/code><\/pre>\n\n<p>Magic Line :D<\/p>\n\n<p>See: <a href=\"http:\/\/nbviewer.ipython.org\/github\/ipython\/ipython\/blob\/1.x\/examples\/notebooks\/Part%203%20-%20Plotting%20with%20Matplotlib.ipynb\" rel=\"noreferrer\">Plotting with Matplotlib<\/a>.<\/p>\n","community_owned_date":null},{"owner":{"account_id":1232543,"reputation":3633,"user_id":1764089,"user_type":"registered","accept_rate":86,"profile_image":"https:\/\/www.gravatar.com\/avatar\/0b7ee3dbad9444e2f1fe8f8b317bd75c?s=256&d=identicon&r=PG","display_name":"evan54","link":"https:\/\/stackoverflow.com\/users\/1764089\/evan54"},"is_accepted":false,"score":101,"last_activity_date":1498911080,"last_edit_date":1498911080.0,"creation_date":1416785837,"answer_id":27095765,"question_id":743164,"content_license":"CC BY-SA 3.0","body_markdown":"My code below might be a useful implementation, highlighting the main difference between [tag:do-while] vs [tag:while] as I understand it. \r\n\r\nSo in this one case, you always go through the loop at least once.\r\n\r\n    first_pass = True\r\n    while first_pass or condition:\r\n        first_pass = False\r\n        do_stuff()\r\n","body":"<p>My code below might be a useful implementation, highlighting the main difference between <a href=\"\/questions\/tagged\/do-while\" class=\"post-tag\" title=\"show questions tagged &#39;do-while&#39;\" rel=\"tag\">do-while<\/a> vs <a href=\"\/questions\/tagged\/while\" class=\"post-tag\" title=\"show questions tagged &#39;while&#39;\" rel=\"tag\">while<\/a> as I understand it. <\/p>\n\n<p>So in this one case, you always go through the loop at least once.<\/p>\n\n<pre><code>first_pass = True\nwhile first_pass or condition:\n    first_pass = False\n    do_stuff()\n<\/code><\/pre>\n","community_owned_date":null},{"owner":{"account_id":10108,"reputation":530217,"user_id":18936,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/3f6f1bea81a68b2f1cfe3efbb9be94bc?s=256&d=identicon&r=PG","display_name":"bobince","link":"https:\/\/stackoverflow.com\/users\/18936\/bobince"},"is_accepted":false,"score":99,"last_activity_date":1598560901,"last_edit_date":1598560901.0,"creation_date":1231851205,"answer_id":438845,"question_id":437589,"content_license":"CC BY-SA 4.0","body_markdown":"`reload(module)`, but only if it&#39;s completely stand-alone. If anything else has a reference to the module (or any object belonging to the module), then you&#39;ll get subtle and curious errors caused by the old code hanging around longer than you expected, and things like `isinstance` not working across different versions of the same code.\r\n\r\nIf you have one-way dependencies, you must also reload all modules that depend on the reloaded module to get rid of all the references to the old code. And then reload modules that depend on the reloaded modules, recursively.\r\n\r\nIf you have circular dependencies, which is very common for example when you are dealing with reloading a package, you must unload all the modules in the group in one go. You can&#39;t do this with `reload()` because it will re-import each module before its dependencies have been refreshed, allowing old references to creep into new modules.\r\n\r\nThe only way to do it in this case is to hack `sys.modules`, which is kind of unsupported. You&#39;d have to go through and delete each `sys.modules` entry you wanted to be reloaded on next import, and also delete entries whose values are `None` to deal with an implementation issue to do with caching failed relative imports. It&#39;s not terribly nice but as long as you have a fully self-contained set of dependencies that doesn&#39;t leave references outside its codebase, it&#39;s workable.\r\n\r\nIt&#39;s probably best to restart the server. :-)\r\n","body":"<p><code>reload(module)<\/code>, but only if it's completely stand-alone. If anything else has a reference to the module (or any object belonging to the module), then you'll get subtle and curious errors caused by the old code hanging around longer than you expected, and things like <code>isinstance<\/code> not working across different versions of the same code.<\/p>\n<p>If you have one-way dependencies, you must also reload all modules that depend on the reloaded module to get rid of all the references to the old code. And then reload modules that depend on the reloaded modules, recursively.<\/p>\n<p>If you have circular dependencies, which is very common for example when you are dealing with reloading a package, you must unload all the modules in the group in one go. You can't do this with <code>reload()<\/code> because it will re-import each module before its dependencies have been refreshed, allowing old references to creep into new modules.<\/p>\n<p>The only way to do it in this case is to hack <code>sys.modules<\/code>, which is kind of unsupported. You'd have to go through and delete each <code>sys.modules<\/code> entry you wanted to be reloaded on next import, and also delete entries whose values are <code>None<\/code> to deal with an implementation issue to do with caching failed relative imports. It's not terribly nice but as long as you have a fully self-contained set of dependencies that doesn't leave references outside its codebase, it's workable.<\/p>\n<p>It's probably best to restart the server. :-)<\/p>\n","community_owned_date":null},{"owner":{"account_id":1603,"reputation":193645,"user_id":2147,"user_type":"registered","accept_rate":85,"profile_image":"https:\/\/www.gravatar.com\/avatar\/b8e26b9942e7193a4fe32c407aacfef5?s=256&d=identicon&r=PG","display_name":"Jason Baker","link":"https:\/\/stackoverflow.com\/users\/2147\/jason-baker"},"is_accepted":false,"score":97,"last_activity_date":1243016419,"last_edit_date":null,"creation_date":1243016419,"answer_id":899254,"question_id":899103,"content_license":"CC BY-SA 2.5","body_markdown":"Yet another way.  Serialize to json using [simplejson][1] (included as [json][2] in python 2.6):\r\n\r\n    &gt;&gt;&gt; import simplejson\r\n    &gt;&gt;&gt; f = open(&#39;output.txt&#39;, &#39;w&#39;)\r\n    &gt;&gt;&gt; simplejson.dump([1,2,3,4], f)\r\n    &gt;&gt;&gt; f.close()\r\n\r\nIf you examine output.txt:\r\n\r\n&gt; [1, 2, 3, 4]\r\n\r\nThis is useful because the syntax is pythonic, it&#39;s human readable, and it can be read by other programs in other languages.\r\n\r\n\r\n  [1]: http:\/\/code.google.com\/p\/simplejson\/\r\n  [2]: http:\/\/docs.python.org\/library\/json.html","body":"<p>Yet another way.  Serialize to json using <a href=\"http:\/\/code.google.com\/p\/simplejson\/\" rel=\"noreferrer\">simplejson<\/a> (included as <a href=\"http:\/\/docs.python.org\/library\/json.html\" rel=\"noreferrer\">json<\/a> in python 2.6):<\/p>\n\n<pre><code>&gt;&gt;&gt; import simplejson\n&gt;&gt;&gt; f = open('output.txt', 'w')\n&gt;&gt;&gt; simplejson.dump([1,2,3,4], f)\n&gt;&gt;&gt; f.close()\n<\/code><\/pre>\n\n<p>If you examine output.txt:<\/p>\n\n<blockquote>\n  <p>[1, 2, 3, 4]<\/p>\n<\/blockquote>\n\n<p>This is useful because the syntax is pythonic, it's human readable, and it can be read by other programs in other languages.<\/p>\n","community_owned_date":null}]
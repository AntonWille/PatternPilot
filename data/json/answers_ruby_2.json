[{"owner":{"account_id":113382,"reputation":83163,"user_id":298624,"user_type":"registered","accept_rate":91,"profile_image":"https:\/\/www.gravatar.com\/avatar\/5b84ccc2f7709bbb7105baeb40e0961b?s=256&d=identicon&r=PG","display_name":"fl00r","link":"https:\/\/stackoverflow.com\/users\/298624\/fl00r"},"is_accepted":true,"community_owned_date":1301992219.0,"score":280,"last_activity_date":1433686682,"last_edit_date":1433686682.0,"creation_date":1301957977,"answer_id":5545284,"question_id":5545068,"content_license":"CC BY-SA 3.0","body_markdown":"    File.open(&quot;my\/file\/path&quot;, &quot;r&quot;) do |f|\r\n      f.each_line do |line|\r\n        puts line\r\n      end\r\n    end\r\n    # File is closed automatically at end of block\r\n\r\nIt is also possible to explicitly close file after as above (pass a block to `open` closes it for you):\r\n\r\n    f = File.open(&quot;my\/file\/path&quot;, &quot;r&quot;)\r\n    f.each_line do |line|\r\n      puts line\r\n    end\r\n    f.close","body":"<pre><code>File.open(\"my\/file\/path\", \"r\") do |f|\n  f.each_line do |line|\n    puts line\n  end\nend\n# File is closed automatically at end of block\n<\/code><\/pre>\n\n<p>It is also possible to explicitly close file after as above (pass a block to <code>open<\/code> closes it for you):<\/p>\n\n<pre><code>f = File.open(\"my\/file\/path\", \"r\")\nf.each_line do |line|\n  puts line\nend\nf.close\n<\/code><\/pre>\n"},{"owner":{"account_id":79630,"reputation":28844,"user_id":225647,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/i.stack.imgur.com\/G7HMF.png?s=256&g=1","display_name":"apaderno","link":"https:\/\/stackoverflow.com\/users\/225647\/apaderno"},"is_accepted":true,"community_owned_date":null,"score":278,"last_activity_date":1548573229,"last_edit_date":1548573229.0,"creation_date":1324060056,"answer_id":8538513,"question_id":8476627,"content_license":"CC BY-SA 4.0","body_markdown":"In _Ruby Programming Language_ (&quot;Methods, Procs, Lambdas, and Closures&quot;), a lambda defined using `-&gt;` is called _lambda literal_. \r\n\r\n    succ = -&gt;(x){ x+1 }\r\n    succ.call(2)\r\n\r\nThe code is equivalent to the following one. \r\n\r\n    succ = lambda { |x| x + 1 }\r\n    succ.call(2)\r\n\r\nInformally, I have heard it being called _stabby lambda_ or _stabby literal_.","body":"<p>In <em>Ruby Programming Language<\/em> (\"Methods, Procs, Lambdas, and Closures\"), a lambda defined using <code>-&gt;<\/code> is called <em>lambda literal<\/em>. <\/p>\n\n<pre><code>succ = -&gt;(x){ x+1 }\nsucc.call(2)\n<\/code><\/pre>\n\n<p>The code is equivalent to the following one. <\/p>\n\n<pre><code>succ = lambda { |x| x + 1 }\nsucc.call(2)\n<\/code><\/pre>\n\n<p>Informally, I have heard it being called <em>stabby lambda<\/em> or <em>stabby literal<\/em>.<\/p>\n"},{"owner":{"account_id":136938,"reputation":19427,"user_id":340799,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/c41b5e81f3659aa61e99b5c502a6cc8b?s=256&d=identicon&r=PG","display_name":"x1a4","link":"https:\/\/stackoverflow.com\/users\/340799\/x1a4"},"is_accepted":false,"community_owned_date":null,"score":274,"last_activity_date":1275707332,"last_edit_date":null,"creation_date":1275707332,"answer_id":2978964,"question_id":2978922,"content_license":"CC BY-SA 2.5","body_markdown":"Try `array.should =~ another_array`\r\n\r\nThe best documentation on this I can find is the code itself, which is [here][1].\r\n\r\n\r\n  [1]: http:\/\/github.com\/dchelimsky\/rspec\/blob\/master\/lib\/spec\/matchers\/match_array.rb","body":"<p>Try <code>array.should =~ another_array<\/code><\/p>\n\n<p>The best documentation on this I can find is the code itself, which is <a href=\"http:\/\/github.com\/dchelimsky\/rspec\/blob\/master\/lib\/spec\/matchers\/match_array.rb\" rel=\"noreferrer\">here<\/a>.<\/p>\n"},{"owner":{"account_id":85750,"reputation":104475,"user_id":238886,"user_type":"registered","accept_rate":90,"profile_image":"https:\/\/www.gravatar.com\/avatar\/8ca29123b5669b26f9b6ca2c62d9d215?s=256&d=identicon&r=PG","display_name":"Wayne Conrad","link":"https:\/\/stackoverflow.com\/users\/238886\/wayne-conrad"},"is_accepted":false,"community_owned_date":null,"score":274,"last_activity_date":1413824786,"last_edit_date":1413824786.0,"creation_date":1290030604,"answer_id":4209502,"question_id":4209384,"content_license":"CC BY-SA 3.0","body_markdown":"If the characters you want to remove are always the same characters, then consider `chomp`:\r\n\r\n    &#39;abc123&#39;.chomp(&#39;123&#39;)    # =&gt; &quot;abc&quot;\r\n\r\nThe advantages of `chomp` are: no counting, and the code more clearly communicates what it is doing.\r\n\r\nWith no arguments, `chomp` removes the DOS or Unix line ending, if either is present:\r\n\r\n    &quot;abc\\n&quot;.chomp      # =&gt; &quot;abc&quot;\r\n    &quot;abc\\r\\n&quot;.chomp    # =&gt; &quot;abc&quot;\r\n\r\n---\r\n\r\n*From the comments, there was a question of the speed of using `#chomp` versus using a range. Here is a benchmark comparing the two:*\r\n\r\n    require &#39;benchmark&#39;\r\n\r\n    S = &#39;asdfghjkl&#39;\r\n    SL = S.length\r\n    T = 10_000\r\n    A = 1_000.times.map { |n| &quot;#{n}#{S}&quot; }\r\n\r\n    GC.disable\r\n\r\n    Benchmark.bmbm do |x|\r\n      x.report(&#39;chomp&#39;) { T.times { A.each { |s| s.chomp(S) } } }\r\n      x.report(&#39;range&#39;) { T.times { A.each { |s| s[0...-SL] } } }\r\n    end\r\n\r\nBenchmark Results (using CRuby 2.13p242):\r\n\r\n    Rehearsal -----------------------------------------\r\n    chomp   1.540000   0.040000   1.580000 (  1.587908)\r\n    range   1.810000   0.200000   2.010000 (  2.011846)\r\n    -------------------------------- total: 3.590000sec\r\n\r\n                user     system      total        real\r\n    chomp   1.550000   0.070000   1.620000 (  1.610362)\r\n    range   1.970000   0.170000   2.140000 (  2.146682)\r\n\r\nSo chomp is faster than using a range, by ~22%.","body":"<p>If the characters you want to remove are always the same characters, then consider <code>chomp<\/code>:<\/p>\n\n<pre><code>'abc123'.chomp('123')    # =&gt; \"abc\"\n<\/code><\/pre>\n\n<p>The advantages of <code>chomp<\/code> are: no counting, and the code more clearly communicates what it is doing.<\/p>\n\n<p>With no arguments, <code>chomp<\/code> removes the DOS or Unix line ending, if either is present:<\/p>\n\n<pre><code>\"abc\\n\".chomp      # =&gt; \"abc\"\n\"abc\\r\\n\".chomp    # =&gt; \"abc\"\n<\/code><\/pre>\n\n<hr>\n\n<p><em>From the comments, there was a question of the speed of using <code>#chomp<\/code> versus using a range. Here is a benchmark comparing the two:<\/em><\/p>\n\n<pre><code>require 'benchmark'\n\nS = 'asdfghjkl'\nSL = S.length\nT = 10_000\nA = 1_000.times.map { |n| \"#{n}#{S}\" }\n\nGC.disable\n\nBenchmark.bmbm do |x|\n  x.report('chomp') { T.times { A.each { |s| s.chomp(S) } } }\n  x.report('range') { T.times { A.each { |s| s[0...-SL] } } }\nend\n<\/code><\/pre>\n\n<p>Benchmark Results (using CRuby 2.13p242):<\/p>\n\n<pre><code>Rehearsal -----------------------------------------\nchomp   1.540000   0.040000   1.580000 (  1.587908)\nrange   1.810000   0.200000   2.010000 (  2.011846)\n-------------------------------- total: 3.590000sec\n\n            user     system      total        real\nchomp   1.550000   0.070000   1.620000 (  1.610362)\nrange   1.970000   0.170000   2.140000 (  2.146682)\n<\/code><\/pre>\n\n<p>So chomp is faster than using a range, by ~22%.<\/p>\n"},{"owner":{"account_id":56420,"reputation":4950,"user_id":169000,"user_type":"registered","accept_rate":60,"profile_image":"https:\/\/www.gravatar.com\/avatar\/05bf897b97681a52c09b5a8653dd5413?s=256&d=identicon&r=PG","display_name":"Valentin Nemcev","link":"https:\/\/stackoverflow.com\/users\/169000\/valentin-nemcev"},"is_accepted":false,"community_owned_date":null,"score":273,"last_activity_date":1344111200,"last_edit_date":1344111200.0,"creation_date":1344001374,"answer_id":11796957,"question_id":2978922,"content_license":"CC BY-SA 3.0","body_markdown":"Since RSpec 2.11 you can also use `match_array`.\r\n\r\n    array.should match_array(another_array)\r\n\r\nWhich could be more readable in some cases.\r\n\r\n    [1, 2, 3].should =~ [2, 3, 1]\r\n    # vs\r\n    [1, 2, 3].should match_array([2, 3, 1])","body":"<p>Since RSpec 2.11 you can also use <code>match_array<\/code>.<\/p>\n\n<pre><code>array.should match_array(another_array)\n<\/code><\/pre>\n\n<p>Which could be more readable in some cases.<\/p>\n\n<pre><code>[1, 2, 3].should =~ [2, 3, 1]\n# vs\n[1, 2, 3].should match_array([2, 3, 1])\n<\/code><\/pre>\n"},{"owner":{"account_id":153276,"reputation":6593,"user_id":368409,"user_type":"registered","accept_rate":80,"profile_image":"https:\/\/www.gravatar.com\/avatar\/a2f7abe9d85c2b47998e86014e59c8be?s=256&d=identicon&r=PG","display_name":"Lloeki","link":"https:\/\/stackoverflow.com\/users\/368409\/lloeki"},"is_accepted":false,"community_owned_date":null,"score":265,"last_activity_date":1437395476,"last_edit_date":null,"creation_date":1437395476,"answer_id":31516586,"question_id":30818391,"content_license":"CC BY-SA 3.0","body_markdown":"When using bundler and homebrew:\r\n\r\n    $ bundle config build.eventmachine --with-cppflags=-I$(brew --prefix openssl)\/include\r\n    $ bundle install","body":"<p>When using bundler and homebrew:<\/p>\n\n<pre><code>$ bundle config build.eventmachine --with-cppflags=-I$(brew --prefix openssl)\/include\n$ bundle install\n<\/code><\/pre>\n"},{"owner":{"account_id":21006,"reputation":235023,"user_id":50742,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/03cdad7329f1a13d2b2f3d9c8a08813d?s=256&d=identicon&r=PG","display_name":"Chuck","link":"https:\/\/stackoverflow.com\/users\/50742\/chuck"},"is_accepted":true,"community_owned_date":null,"score":264,"last_activity_date":1686866686,"last_edit_date":1686866686.0,"creation_date":1260343210,"answer_id":1872159,"question_id":1872110,"content_license":"CC BY-SA 4.0","body_markdown":"In traditional terminology, [Ruby is strictly pass-by-value](https:\/\/stackoverflow.com\/a\/22827949\/50742). However, everything in Ruby is an object, so Ruby can appear to behave like pass-by-reference languages. \r\n\r\nRuby breaks the traditional definition of &quot;pass-by-reference&quot; or &quot;pass-by-value&quot; because everything is an object, and when it passes things, it passes references to objects. So really, it Ruby can be classified as a 3rd type of language we might call &quot;pass by object reference.&quot; In the strict definition of the computer science term, Ruby is pass-by-value.\r\n\r\nRuby doesn&#39;t have any concept of a pure, non-reference value, so you can&#39;t pass one to a method. Variables are always references to objects. In order to get an object that won&#39;t change out from under you, you need to dup or clone the object you&#39;re passed, thus giving an object that nobody else has a reference to. However, even this isn&#39;t bulletproof: both of the standard cloning methods do a shallow copy, so the instance variables of the clone still point to the same objects that the originals did. If the objects referenced by the ivars mutate, that will still show up in the copy, since it&#39;s referencing the same objects.\r\n","body":"<p>In traditional terminology, <a href=\"https:\/\/stackoverflow.com\/a\/22827949\/50742\">Ruby is strictly pass-by-value<\/a>. However, everything in Ruby is an object, so Ruby can appear to behave like pass-by-reference languages.<\/p>\n<p>Ruby breaks the traditional definition of &quot;pass-by-reference&quot; or &quot;pass-by-value&quot; because everything is an object, and when it passes things, it passes references to objects. So really, it Ruby can be classified as a 3rd type of language we might call &quot;pass by object reference.&quot; In the strict definition of the computer science term, Ruby is pass-by-value.<\/p>\n<p>Ruby doesn't have any concept of a pure, non-reference value, so you can't pass one to a method. Variables are always references to objects. In order to get an object that won't change out from under you, you need to dup or clone the object you're passed, thus giving an object that nobody else has a reference to. However, even this isn't bulletproof: both of the standard cloning methods do a shallow copy, so the instance variables of the clone still point to the same objects that the originals did. If the objects referenced by the ivars mutate, that will still show up in the copy, since it's referencing the same objects.<\/p>\n"},{"owner":{"account_id":143563,"reputation":26794,"user_id":351984,"user_type":"registered","accept_rate":86,"profile_image":"https:\/\/www.gravatar.com\/avatar\/f3133cf8379692c9b8c52bbcb6438aae?s=256&d=identicon&r=PG","display_name":"Paul Rubel","link":"https:\/\/stackoverflow.com\/users\/351984\/paul-rubel"},"is_accepted":true,"community_owned_date":null,"score":262,"last_activity_date":1529105044,"last_edit_date":1529105044.0,"creation_date":1277762648,"answer_id":3136485,"question_id":3136420,"content_license":"CC BY-SA 4.0","body_markdown":"`attr_accessor` is a Ruby method that makes a getter and a setter. `attr_accessible` is a Rails method that allows you to pass in values to a mass assignment: `new(attrs)` or `update_attributes(attrs)`. \r\n\r\nHere&#39;s a mass assignment:\r\n\r\n&lt;!-- language: lang-ruby --&gt;\r\n\r\n    Order.new({ :type =&gt; &#39;Corn&#39;, :quantity =&gt; 6 })\r\n\r\nYou can imagine that the order might also have a discount code, say `:price_off`. If you don&#39;t tag `:price_off` as `attr_accessible` you stop malicious code from being able to do like so:\r\n\r\n&lt;!-- language: lang-ruby --&gt;\r\n\r\n    Order.new({ :type =&gt; &#39;Corn&#39;, :quantity =&gt; 6, :price_off =&gt; 30 })\r\n\r\nEven if your form doesn&#39;t have a field for `:price_off`, if it&#39;s in your model it&#39;s available by default. This means a crafted POST could still set it. Using `attr_accessible` white lists those things that can be mass assigned.\r\n","body":"<p><code>attr_accessor<\/code> is a Ruby method that makes a getter and a setter. <code>attr_accessible<\/code> is a Rails method that allows you to pass in values to a mass assignment: <code>new(attrs)<\/code> or <code>update_attributes(attrs)<\/code>. <\/p>\n\n<p>Here's a mass assignment:<\/p>\n\n<pre class=\"lang-ruby prettyprint-override\"><code>Order.new({ :type =&gt; 'Corn', :quantity =&gt; 6 })\n<\/code><\/pre>\n\n<p>You can imagine that the order might also have a discount code, say <code>:price_off<\/code>. If you don't tag <code>:price_off<\/code> as <code>attr_accessible<\/code> you stop malicious code from being able to do like so:<\/p>\n\n<pre class=\"lang-ruby prettyprint-override\"><code>Order.new({ :type =&gt; 'Corn', :quantity =&gt; 6, :price_off =&gt; 30 })\n<\/code><\/pre>\n\n<p>Even if your form doesn't have a field for <code>:price_off<\/code>, if it's in your model it's available by default. This means a crafted POST could still set it. Using <code>attr_accessible<\/code> white lists those things that can be mass assigned.<\/p>\n"},{"owner":{"account_id":246012,"reputation":4181,"user_id":519878,"user_type":"registered","accept_rate":80,"profile_image":"https:\/\/www.gravatar.com\/avatar\/f32b4db3b74f5b68259dd765323d83ed?s=256&d=identicon&r=PG","display_name":"Simon H&#252;rlimann","link":"https:\/\/stackoverflow.com\/users\/519878\/simon-h%c3%bcrlimann"},"is_accepted":false,"community_owned_date":null,"score":262,"last_activity_date":1414758062,"last_edit_date":1495541444.0,"creation_date":1305149134,"answer_id":5970819,"question_id":690151,"content_license":"CC BY-SA 3.0","body_markdown":"Be aware that all the solutions where you pass a string containing user provided values to `system`, `%x[]` etc. are unsafe! Unsafe actually means: the user may trigger code to run in the context and with all permissions of the program.\r\n\r\nAs far as I can say only `system` and `Open3.popen3` do provide a secure\/escaping variant in Ruby 1.8. In Ruby 1.9 `IO::popen` also accepts an array.\r\n\r\nSimply pass every option and argument as an array to one of these calls.\r\n\r\nIf you need not just the exit status but also the result you probably want to use `Open3.popen3`:\r\n\r\n    require &#39;open3&#39;\r\n    stdin, stdout, stderr, wait_thr = Open3.popen3(&#39;usermod&#39;, &#39;-p&#39;, @options[&#39;shadow&#39;], @options[&#39;username&#39;])\r\n    stdout.gets(nil)\r\n    stdout.close\r\n    stderr.gets(nil)\r\n    stderr.close\r\n    exit_code = wait_thr.value\r\nNote that the block form will auto-close stdin, stdout and stderr- otherwise they&#39;d have to be [closed explicitly][1].\r\n\r\nMore information here: https:\/\/stackoverflow.com\/questions\/4650636\/forming-sanitary-shell-commands-or-system-calls-in-ruby\r\n\r\n  [1]: http:\/\/www.ruby-doc.org\/stdlib-2.0\/libdoc\/open3\/rdoc\/Open3.html#method-c-popen3\r\n\r\n","body":"<p>Be aware that all the solutions where you pass a string containing user provided values to <code>system<\/code>, <code>%x[]<\/code> etc. are unsafe! Unsafe actually means: the user may trigger code to run in the context and with all permissions of the program.<\/p>\n\n<p>As far as I can say only <code>system<\/code> and <code>Open3.popen3<\/code> do provide a secure\/escaping variant in Ruby 1.8. In Ruby 1.9 <code>IO::popen<\/code> also accepts an array.<\/p>\n\n<p>Simply pass every option and argument as an array to one of these calls.<\/p>\n\n<p>If you need not just the exit status but also the result you probably want to use <code>Open3.popen3<\/code>:<\/p>\n\n<pre><code>require 'open3'\nstdin, stdout, stderr, wait_thr = Open3.popen3('usermod', '-p', @options['shadow'], @options['username'])\nstdout.gets(nil)\nstdout.close\nstderr.gets(nil)\nstderr.close\nexit_code = wait_thr.value\n<\/code><\/pre>\n\n<p>Note that the block form will auto-close stdin, stdout and stderr- otherwise they'd have to be <a href=\"http:\/\/www.ruby-doc.org\/stdlib-2.0\/libdoc\/open3\/rdoc\/Open3.html#method-c-popen3\" rel=\"noreferrer\">closed explicitly<\/a>.<\/p>\n\n<p>More information here: <a href=\"https:\/\/stackoverflow.com\/questions\/4650636\/forming-sanitary-shell-commands-or-system-calls-in-ruby\">Forming sanitary shell commands or system calls in Ruby<\/a><\/p>\n"},{"owner":{"user_type":"does_not_exist","display_name":"Curt Sampson"},"is_accepted":false,"community_owned_date":null,"score":249,"last_activity_date":1226035494,"last_edit_date":null,"creation_date":1226035494,"answer_id":271300,"question_id":130948,"content_license":"CC BY-SA 2.5","body_markdown":"If you need binary mode, you&#39;ll need to do it the hard way:\r\n\r\n    s = File.open(filename, &#39;rb&#39;) { |f| f.read }\r\n\r\nIf not, shorter and sweeter is:\r\n\r\n    s = IO.read(filename)\r\n","body":"<p>If you need binary mode, you'll need to do it the hard way:<\/p>\n\n<pre><code>s = File.open(filename, 'rb') { |f| f.read }\n<\/code><\/pre>\n\n<p>If not, shorter and sweeter is:<\/p>\n\n<pre><code>s = IO.read(filename)\n<\/code><\/pre>\n"},{"owner":{"account_id":82265,"reputation":5546,"user_id":231441,"user_type":"registered","accept_rate":88,"profile_image":"https:\/\/i.stack.imgur.com\/P2kt4.png?s=256&g=1","display_name":"zzeroo","link":"https:\/\/stackoverflow.com\/users\/231441\/zzeroo"},"is_accepted":false,"community_owned_date":null,"score":248,"last_activity_date":1262707246,"last_edit_date":1262707246.0,"creation_date":1262673394,"answer_id":2004556,"question_id":2004491,"content_license":"CC BY-SA 2.5","body_markdown":"from: http:\/\/ruby-doc.org\/core\/classes\/String.html#M000809\r\n\r\n    str.intern =&gt; symbol\r\n    str.to_sym =&gt; symbol\r\n\r\nReturns the Symbol corresponding to &lt;code&gt;str&lt;\/code&gt;, creating the symbol if it did not previously exist. See &lt;code&gt;Symbol#id2name&lt;\/code&gt;.\r\n\r\n    &quot;Koala&quot;.intern         #=&gt; :Koala\r\n    s = &#39;cat&#39;.to_sym       #=&gt; :cat\r\n    s == :cat              #=&gt; true\r\n    s = &#39;@cat&#39;.to_sym      #=&gt; :@cat\r\n    s == :@cat             #=&gt; true\r\n\r\nThis can also be used to create symbols that cannot be represented using the `:xxx` notation.\r\n\r\n    &#39;cat and dog&#39;.to_sym   #=&gt; :&quot;cat and dog&quot;\r\n\r\n\r\nBut for your example ...\r\n\r\n    &quot;Book Author Title&quot;.gsub(\/\\s+\/, &quot;_&quot;).downcase.to_sym\r\n\r\nshould go ;)\r\n","body":"<p>from: <a href=\"http:\/\/ruby-doc.org\/core\/classes\/String.html#M000809\" rel=\"noreferrer\">http:\/\/ruby-doc.org\/core\/classes\/String.html#M000809<\/a><\/p>\n\n<pre><code>str.intern =&gt; symbol\nstr.to_sym =&gt; symbol\n<\/code><\/pre>\n\n<p>Returns the Symbol corresponding to <code>str<\/code>, creating the symbol if it did not previously exist. See <code>Symbol#id2name<\/code>.<\/p>\n\n<pre><code>\"Koala\".intern         #=&gt; :Koala\ns = 'cat'.to_sym       #=&gt; :cat\ns == :cat              #=&gt; true\ns = '@cat'.to_sym      #=&gt; :@cat\ns == :@cat             #=&gt; true\n<\/code><\/pre>\n\n<p>This can also be used to create symbols that cannot be represented using the <code>:xxx<\/code> notation.<\/p>\n\n<pre><code>'cat and dog'.to_sym   #=&gt; :\"cat and dog\"\n<\/code><\/pre>\n\n<p>But for your example ...<\/p>\n\n<pre><code>\"Book Author Title\".gsub(\/\\s+\/, \"_\").downcase.to_sym\n<\/code><\/pre>\n\n<p>should go ;)<\/p>\n"},{"owner":{"account_id":232723,"reputation":52835,"user_id":497756,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/3ec52ed58eb92026d86e62c39bdb7589?s=256&d=identicon&r=PG","display_name":"mpapis","link":"https:\/\/stackoverflow.com\/users\/497756\/mpapis"},"is_accepted":true,"community_owned_date":null,"score":245,"last_activity_date":1378152607,"last_edit_date":1378152607.0,"creation_date":1329522250,"answer_id":9337014,"question_id":9336596,"content_license":"CC BY-SA 3.0","body_markdown":"You are not using an login shell.\r\n\r\nThe process of enabling the login flag is described [here][1], also some details on what a login shell is can be found [here][2].\r\n\r\nThus, you need to check the option *&quot;Run as login shell&quot;* in the Gnome terminal&#39;s settings. It is required to open new terminal after this setting the flag.\r\n\r\nSometimes it is required to set the command to `\/bin\/bash --login`.\r\n\r\n---\r\n\r\nFor *remote* connections it is important to understand the differene between running interactive `ssh` session and executing single commands.\r\n\r\nWhile running `ssh server` and then working with the server interactively you are using login shell by default and it&#39;s all fine, but for `ssh server &quot;command&quot;` you are not using login shell and it would be required to run it with `ssh server &#39;bash -lc &quot;command&quot;&#39;`.\r\n\r\nAny remote invocation can have the same problem as executing single command with `ssh`. \r\n\r\n\r\n  [1]: https:\/\/rvm.io\/integration\/gnome-terminal\/\r\n  [2]: https:\/\/rvm.io\/support\/faq\/#shell_login","body":"<p>You are not using an login shell.<\/p>\n\n<p>The process of enabling the login flag is described <a href=\"https:\/\/rvm.io\/integration\/gnome-terminal\/\" rel=\"noreferrer\">here<\/a>, also some details on what a login shell is can be found <a href=\"https:\/\/rvm.io\/support\/faq\/#shell_login\" rel=\"noreferrer\">here<\/a>.<\/p>\n\n<p>Thus, you need to check the option <em>\"Run as login shell\"<\/em> in the Gnome terminal's settings. It is required to open new terminal after this setting the flag.<\/p>\n\n<p>Sometimes it is required to set the command to <code>\/bin\/bash --login<\/code>.<\/p>\n\n<hr>\n\n<p>For <em>remote<\/em> connections it is important to understand the differene between running interactive <code>ssh<\/code> session and executing single commands.<\/p>\n\n<p>While running <code>ssh server<\/code> and then working with the server interactively you are using login shell by default and it's all fine, but for <code>ssh server \"command\"<\/code> you are not using login shell and it would be required to run it with <code>ssh server 'bash -lc \"command\"'<\/code>.<\/p>\n\n<p>Any remote invocation can have the same problem as executing single command with <code>ssh<\/code>. <\/p>\n"},{"owner":{"account_id":154578,"reputation":8292,"user_id":370605,"user_type":"registered","accept_rate":71,"profile_image":"https:\/\/i.stack.imgur.com\/r8v6e.png?s=256&g=1","display_name":"beauXjames","link":"https:\/\/stackoverflow.com\/users\/370605\/beauxjames"},"is_accepted":false,"community_owned_date":null,"score":243,"last_activity_date":1460311913,"last_edit_date":1460311913.0,"creation_date":1417708330,"answer_id":27298259,"question_id":19150017,"content_license":"CC BY-SA 3.0","body_markdown":"Latest findings...\r\n\r\nhttps:\/\/gist.github.com\/luislavena\/f064211759ee0f806c88\r\n\r\nMost importantly...download \r\nhttps:\/\/raw.githubusercontent.com\/rubygems\/rubygems\/master\/lib\/rubygems\/ssl_certs\/rubygems.org\/AddTrustExternalCARoot-2048.pem\r\n\r\nFigure out where to stick it\r\n\r\n    C:\\&gt;gem which rubygems\r\n    C:\/Ruby21\/lib\/ruby\/2.1.0\/rubygems.rb\r\n\r\nThen just copy the .pem file in ..\/2.1.0\/rubygems\/ssl_certs\/ and go on about your business.","body":"<p>Latest findings...<\/p>\n\n<p><a href=\"https:\/\/gist.github.com\/luislavena\/f064211759ee0f806c88\" rel=\"noreferrer\">https:\/\/gist.github.com\/luislavena\/f064211759ee0f806c88<\/a><\/p>\n\n<p>Most importantly...download \n<a href=\"https:\/\/raw.githubusercontent.com\/rubygems\/rubygems\/master\/lib\/rubygems\/ssl_certs\/rubygems.org\/AddTrustExternalCARoot-2048.pem\" rel=\"noreferrer\">https:\/\/raw.githubusercontent.com\/rubygems\/rubygems\/master\/lib\/rubygems\/ssl_certs\/rubygems.org\/AddTrustExternalCARoot-2048.pem<\/a><\/p>\n\n<p>Figure out where to stick it<\/p>\n\n<pre><code>C:\\&gt;gem which rubygems\nC:\/Ruby21\/lib\/ruby\/2.1.0\/rubygems.rb\n<\/code><\/pre>\n\n<p>Then just copy the .pem file in ..\/2.1.0\/rubygems\/ssl_certs\/ and go on about your business.<\/p>\n"},{"owner":{"account_id":43866,"reputation":159182,"user_id":128421,"user_type":"registered","accept_rate":50,"profile_image":"https:\/\/www.gravatar.com\/avatar\/71770d043c0f7e3c7bc5f74190015c26?s=256&d=identicon&r=PG","display_name":"the Tin Man","link":"https:\/\/stackoverflow.com\/users\/128421\/the-tin-man"},"is_accepted":false,"community_owned_date":1301992219.0,"score":241,"last_activity_date":1646288924,"last_edit_date":1646288924.0,"creation_date":1301971977,"answer_id":5546681,"question_id":5545068,"content_license":"CC BY-SA 4.0","body_markdown":"Be wary of &quot;slurping&quot; files. That&#39;s when you read the entire file into memory at once. \r\n\r\nThe problem is that it doesn&#39;t scale well. You could be developing code with a reasonably sized file, then put it into production and suddenly find you&#39;re trying to read files measuring in gigabytes, and your host is freezing up as it tries to read and allocate memory. \r\n\r\nLine-by-line I\/O is very fast, and almost always as effective as slurping. It&#39;s surprisingly fast actually.\r\n\r\nI like to use:\r\n\r\n    IO.foreach(&quot;testfile&quot;) { |x| print &quot;GOT &quot;, x }\r\n\r\nor\r\n\r\n    File.foreach(&#39;testfile&#39;) { |x| print &quot;GOT&quot;, x }\r\n\r\nFile inherits from IO, and `foreach` is in IO, so you can use either.\r\n\r\nI have some benchmarks showing the impact of trying to read big files via `read` vs. line-by-line I\/O at &quot;https:\/\/stackoverflow.com\/q\/25189262\/128421&quot;.","body":"<p>Be wary of &quot;slurping&quot; files. That's when you read the entire file into memory at once.<\/p>\n<p>The problem is that it doesn't scale well. You could be developing code with a reasonably sized file, then put it into production and suddenly find you're trying to read files measuring in gigabytes, and your host is freezing up as it tries to read and allocate memory.<\/p>\n<p>Line-by-line I\/O is very fast, and almost always as effective as slurping. It's surprisingly fast actually.<\/p>\n<p>I like to use:<\/p>\n<pre><code>IO.foreach(&quot;testfile&quot;) { |x| print &quot;GOT &quot;, x }\n<\/code><\/pre>\n<p>or<\/p>\n<pre><code>File.foreach('testfile') { |x| print &quot;GOT&quot;, x }\n<\/code><\/pre>\n<p>File inherits from IO, and <code>foreach<\/code> is in IO, so you can use either.<\/p>\n<p>I have some benchmarks showing the impact of trying to read big files via <code>read<\/code> vs. line-by-line I\/O at &quot;https:\/\/stackoverflow.com\/q\/25189262\/128421&quot;.<\/p>\n"},{"owner":{"account_id":171442,"reputation":15749,"user_id":398863,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/4CNtJ.png?s=256&g=1","display_name":"Amit Patel","link":"https:\/\/stackoverflow.com\/users\/398863\/amit-patel"},"is_accepted":false,"community_owned_date":null,"score":238,"last_activity_date":1468498108,"last_edit_date":1468498108.0,"creation_date":1343212001,"answer_id":11647685,"question_id":3028653,"content_license":"CC BY-SA 3.0","body_markdown":"\t\t\t\t    URL\t\t\t\t\tHelper\t\t\t\t\t\tDescription\r\n\t----------------------------------------------------------------------------------------------------------------------------------\r\n\tmember\t\t\t\/photos\/1\/preview \tpreview_photo_path(photo)\tActs on a specific resource so required id (preview specific photo)\r\n\tcollection\t\t\/photos\/search\t\tsearch_photos_path\t\t\tActs on collection of resources(display all photos)","body":"<pre><code>                URL                 Helper                      Description\n----------------------------------------------------------------------------------------------------------------------------------\nmember          \/photos\/1\/preview   preview_photo_path(photo)   Acts on a specific resource so required id (preview specific photo)\ncollection      \/photos\/search      search_photos_path          Acts on collection of resources(display all photos)\n<\/code><\/pre>\n"},{"owner":{"account_id":188090,"reputation":2509,"user_id":426602,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/d0033f89a5593c2897dea3f6b459c4e1?s=256&d=identicon&r=PG","display_name":"Peter Moresi","link":"https:\/\/stackoverflow.com\/users\/426602\/peter-moresi"},"is_accepted":false,"community_owned_date":null,"score":229,"last_activity_date":1454090975,"last_edit_date":1454090975.0,"creation_date":1289843116,"answer_id":4187271,"question_id":4418,"content_license":"CC BY-SA 3.0","body_markdown":"For the Windows OS, I used Fiddler to work around the issue.\r\n\r\n1. Install\/Run Fiddler from www.fiddler2.com\r\n2. Run gem:\r\n\r\n\t\t$ gem install --http-proxy http:\/\/localhost:8888 $gem_name\r\n","body":"<p>For the Windows OS, I used Fiddler to work around the issue.<\/p>\n\n<ol>\n<li>Install\/Run Fiddler from www.fiddler2.com<\/li>\n<li><p>Run gem:<\/p>\n\n<pre><code>$ gem install --http-proxy http:\/\/localhost:8888 $gem_name\n<\/code><\/pre><\/li>\n<\/ol>\n"},{"owner":{"account_id":40472,"reputation":10348,"user_id":117298,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/e7cff3cfd41c495e1012227d7dc24202?s=256&d=identicon&r=PG","display_name":"Luis Lavena","link":"https:\/\/stackoverflow.com\/users\/117298\/luis-lavena"},"is_accepted":true,"community_owned_date":null,"score":229,"last_activity_date":1530011237,"last_edit_date":1530011237.0,"creation_date":1314822564,"answer_id":7262974,"question_id":7082364,"content_license":"CC BY-SA 4.0","body_markdown":"Asked the same question to one of Rails-Core&#39;s members:\r\n\r\nhttps:\/\/twitter.com\/luislavena\/status\/108998968859566080\r\n\r\nAnd the answer:\r\n\r\nhttps:\/\/twitter.com\/tenderlove\/status\/108999110136303617\r\n\r\n&gt; ya, it&#39;s fine. Need to clean it up, but nothing is being hurt.\r\n\r\n","body":"<p>Asked the same question to one of Rails-Core's members:<\/p>\n\n<p><a href=\"https:\/\/twitter.com\/luislavena\/status\/108998968859566080\" rel=\"nofollow noreferrer\">https:\/\/twitter.com\/luislavena\/status\/108998968859566080<\/a><\/p>\n\n<p>And the answer:<\/p>\n\n<p><a href=\"https:\/\/twitter.com\/tenderlove\/status\/108999110136303617\" rel=\"nofollow noreferrer\">https:\/\/twitter.com\/tenderlove\/status\/108999110136303617<\/a><\/p>\n\n<blockquote>\n  <p>ya, it's fine. Need to clean it up, but nothing is being hurt.<\/p>\n<\/blockquote>\n"},{"owner":{"account_id":110150,"reputation":12072,"user_id":291600,"user_type":"registered","accept_rate":97,"profile_image":"https:\/\/www.gravatar.com\/avatar\/553077851739406898ca2b9972576567?s=256&d=identicon&r=PG","display_name":"StuR","link":"https:\/\/stackoverflow.com\/users\/291600\/stur"},"is_accepted":false,"community_owned_date":null,"score":229,"last_activity_date":1375975716,"last_edit_date":null,"creation_date":1375975716,"answer_id":18130051,"question_id":10246023,"content_license":"CC BY-SA 3.0","body_markdown":"Replace the ssl gem source with non-ssl as a temp solution:\r\n\r\n - gem sources -r https:\/\/rubygems.org\/\r\n - gem sources -a http:\/\/rubygems.org\/","body":"<p>Replace the ssl gem source with non-ssl as a temp solution:<\/p>\n\n<ul>\n<li>gem sources -r <a href=\"https:\/\/rubygems.org\/\">https:\/\/rubygems.org\/<\/a><\/li>\n<li>gem sources -a <a href=\"http:\/\/rubygems.org\/\">http:\/\/rubygems.org\/<\/a><\/li>\n<\/ul>\n"},{"owner":{"account_id":340817,"reputation":11077,"user_id":671046,"user_type":"registered","accept_rate":73,"profile_image":"https:\/\/www.gravatar.com\/avatar\/501055530f3cf914c8aa97a0673c5961?s=256&d=identicon&r=PG","display_name":"Naveed","link":"https:\/\/stackoverflow.com\/users\/671046\/naveed"},"is_accepted":false,"community_owned_date":null,"score":223,"last_activity_date":1315219730,"last_edit_date":null,"creation_date":1315219730,"answer_id":7306961,"question_id":2244915,"content_license":"CC BY-SA 3.0","body_markdown":"this will return first match\r\n     \r\n    @fathers.detect {|f| f[&quot;age&quot;] &gt; 35 }\r\n","body":"<p>this will return first match<\/p>\n\n<pre><code>@fathers.detect {|f| f[\"age\"] &gt; 35 }\n<\/code><\/pre>\n"},{"owner":{"account_id":287,"reputation":54269,"user_id":358,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/i.stack.imgur.com\/T29ga.jpg?s=256&g=1","display_name":"Mike Minutillo","link":"https:\/\/stackoverflow.com\/users\/358\/mike-minutillo"},"is_accepted":true,"community_owned_date":null,"score":218,"last_activity_date":1454088500,"last_edit_date":1454088500.0,"creation_date":1218088140,"answer_id":4431,"question_id":4418,"content_license":"CC BY-SA 3.0","body_markdown":"I wasn&#39;t able to get mine working from the command-line switch but I have been able to do it just by setting my `HTTP_PROXY` environment variable. (Note that case seems to be important). I have a batch file that has a line like this in it:\r\n\r\n    SET HTTP_PROXY=http:\/\/%USER%:%PASSWORD%@%SERVER%:%PORT%\r\n\r\nI set the four referenced variables before I get to this line obviously. As an example if my username is &quot;wolfbyte&quot;, my password is &quot;secret&quot; and my proxy is called &quot;pigsy&quot; and operates on port 8080:\r\n\r\n    SET HTTP_PROXY=http:\/\/wolfbyte:secret@pigsy:8080\r\n\r\nYou might want to be careful how you manage that because it stores your password in plain text in the machine&#39;s session but I don&#39;t think it should be too much of an issue.\r\n","body":"<p>I wasn't able to get mine working from the command-line switch but I have been able to do it just by setting my <code>HTTP_PROXY<\/code> environment variable. (Note that case seems to be important). I have a batch file that has a line like this in it:<\/p>\n\n<pre><code>SET HTTP_PROXY=http:\/\/%USER%:%PASSWORD%@%SERVER%:%PORT%\n<\/code><\/pre>\n\n<p>I set the four referenced variables before I get to this line obviously. As an example if my username is \"wolfbyte\", my password is \"secret\" and my proxy is called \"pigsy\" and operates on port 8080:<\/p>\n\n<pre><code>SET HTTP_PROXY=http:\/\/wolfbyte:secret@pigsy:8080\n<\/code><\/pre>\n\n<p>You might want to be careful how you manage that because it stores your password in plain text in the machine's session but I don't think it should be too much of an issue.<\/p>\n"},{"owner":{"account_id":10027,"reputation":12367,"user_id":18768,"user_type":"registered","accept_rate":82,"profile_image":"https:\/\/www.gravatar.com\/avatar\/a9e271fb1622f8dbb6d652993f5a23a7?s=256&d=identicon&r=PG","display_name":"Swanand","link":"https:\/\/stackoverflow.com\/users\/18768\/swanand"},"is_accepted":true,"community_owned_date":null,"score":218,"last_activity_date":1385388517,"last_edit_date":1385388517.0,"creation_date":1248950899,"answer_id":1205824,"question_id":1203892,"content_license":"CC BY-SA 3.0","body_markdown":"To find out URI: \r\n\r\n    current_uri = request.env[&#39;PATH_INFO&#39;]\r\n    # If you are browsing http:\/\/example.com\/my\/test\/path, \r\n    # then above line will yield current_uri as &quot;\/my\/test\/path&quot;\r\n\r\nTo find out the route i.e. controller, action and params:\r\n\r\n    path = ActionController::Routing::Routes.recognize_path &quot;\/your\/path\/here\/&quot;\r\n\r\n    # ...or newer Rails versions:\r\n    #\r\n    path = Rails.application.routes.recognize_path(&#39;\/your\/path\/here&#39;)\r\n\r\n    controller = path[:controller]\r\n    action = path[:action]\r\n    # You will most certainly know that params are available in &#39;params&#39; hash","body":"<p>To find out URI: <\/p>\n\n<pre><code>current_uri = request.env['PATH_INFO']\n# If you are browsing http:\/\/example.com\/my\/test\/path, \n# then above line will yield current_uri as \"\/my\/test\/path\"\n<\/code><\/pre>\n\n<p>To find out the route i.e. controller, action and params:<\/p>\n\n<pre><code>path = ActionController::Routing::Routes.recognize_path \"\/your\/path\/here\/\"\n\n# ...or newer Rails versions:\n#\npath = Rails.application.routes.recognize_path('\/your\/path\/here')\n\ncontroller = path[:controller]\naction = path[:action]\n# You will most certainly know that params are available in 'params' hash\n<\/code><\/pre>\n"},{"owner":{"account_id":2217652,"reputation":2869,"user_id":1957884,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/f19ca5256db38e69603554a7bf273021?s=256&d=identicon&r=PG","display_name":"jvalanen","link":"https:\/\/stackoverflow.com\/users\/1957884\/jvalanen"},"is_accepted":false,"community_owned_date":null,"score":217,"last_activity_date":1437464854,"last_edit_date":1437464854.0,"creation_date":1404898356,"answer_id":24650062,"question_id":10183370,"content_license":"CC BY-SA 3.0","body_markdown":"When dealing with ActiveRecord there&#39;s a significant difference too:\r\n\r\n[`dup`](http:\/\/api.rubyonrails.org\/classes\/ActiveRecord\/Core.html#method-i-dup) creates a new object without its id being set, so you can save a new object to the database by hitting `.save`\r\n\r\n    category2 = category.dup\r\n    #=&gt; #&lt;Category id: nil, name: &quot;Favorites&quot;&gt; \r\n\r\n\r\n[`clone`](http:\/\/api.rubyonrails.org\/classes\/ActiveRecord\/Core.html#method-i-clone) creates a new object with the same id, so all the changes made to that new object will overwrite the original record if hitting `.save`\r\n\r\n    category2 = category.clone\r\n    #=&gt; #&lt;Category id: 1, name: &quot;Favorites&quot;&gt;\r\n","body":"<p>When dealing with ActiveRecord there's a significant difference too:<\/p>\n\n<p><a href=\"http:\/\/api.rubyonrails.org\/classes\/ActiveRecord\/Core.html#method-i-dup\"><code>dup<\/code><\/a> creates a new object without its id being set, so you can save a new object to the database by hitting <code>.save<\/code><\/p>\n\n<pre><code>category2 = category.dup\n#=&gt; #&lt;Category id: nil, name: \"Favorites\"&gt; \n<\/code><\/pre>\n\n<p><a href=\"http:\/\/api.rubyonrails.org\/classes\/ActiveRecord\/Core.html#method-i-clone\"><code>clone<\/code><\/a> creates a new object with the same id, so all the changes made to that new object will overwrite the original record if hitting <code>.save<\/code><\/p>\n\n<pre><code>category2 = category.clone\n#=&gt; #&lt;Category id: 1, name: \"Favorites\"&gt;\n<\/code><\/pre>\n"},{"owner":{"account_id":6870,"reputation":14989,"user_id":11687,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/8f93a872e399bc1353cc8d4e791d5401?s=256&d=identicon&r=PG","display_name":"mislav","link":"https:\/\/stackoverflow.com\/users\/11687\/mislav"},"is_accepted":false,"community_owned_date":null,"score":213,"last_activity_date":1333575309,"last_edit_date":1333575309.0,"creation_date":1222532526,"answer_id":143934,"question_id":143925,"content_license":"CC BY-SA 3.0","body_markdown":"The raw invocation:\r\n\r\n&lt;pre&gt;\r\nrake spec SPEC=spec\/controllers\/sessions_controller_spec.rb \\\r\n          SPEC_OPTS=&quot;-e \\&quot;should log in with cookie\\&quot;&quot;\r\n&lt;\/pre&gt;\r\n\r\nNow figure out how to embed this into your editor.","body":"<p>The raw invocation:<\/p>\n\n<pre>\nrake spec SPEC=spec\/controllers\/sessions_controller_spec.rb \\\n          SPEC_OPTS=\"-e \\\"should log in with cookie\\\"\"\n<\/pre>\n\n<p>Now figure out how to embed this into your editor.<\/p>\n"},{"owner":{"account_id":262236,"reputation":2324,"user_id":546961,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/064525d3f32fe46fd42f823489354f55?s=256&d=identicon&r=PG","display_name":"Sergikon","link":"https:\/\/stackoverflow.com\/users\/546961\/sergikon"},"is_accepted":false,"community_owned_date":null,"score":210,"last_activity_date":1293119552,"last_edit_date":null,"creation_date":1293119552,"answer_id":4520294,"question_id":2316475,"content_license":"CC BY-SA 2.5","body_markdown":"You can use `abort(message)` from inside the task to abort that task with a message.","body":"<p>You can use <code>abort(message)<\/code> from inside the task to abort that task with a message.<\/p>\n"},{"owner":{"account_id":98789,"reputation":3071,"user_id":1452148,"user_type":"registered","accept_rate":69,"profile_image":"https:\/\/www.gravatar.com\/avatar\/f55c5179191c4bce9c200bffd1bf7981?s=256&d=identicon&r=PG","display_name":"Gazza","link":"https:\/\/stackoverflow.com\/users\/1452148\/gazza"},"is_accepted":false,"community_owned_date":null,"score":209,"last_activity_date":1549329464,"last_edit_date":1549329464.0,"creation_date":1357715030,"answer_id":14229940,"question_id":7098602,"content_license":"CC BY-SA 4.0","body_markdown":"    change_column_default :employees, :foreign, false","body":"<pre><code>change_column_default :employees, :foreign, false\n<\/code><\/pre>\n"},{"owner":{"account_id":43866,"reputation":159182,"user_id":128421,"user_type":"registered","accept_rate":50,"profile_image":"https:\/\/www.gravatar.com\/avatar\/71770d043c0f7e3c7bc5f74190015c26?s=256&d=identicon&r=PG","display_name":"the Tin Man","link":"https:\/\/stackoverflow.com\/users\/128421\/the-tin-man"},"is_accepted":false,"community_owned_date":null,"score":206,"last_activity_date":1412718183,"last_edit_date":1412718183.0,"creation_date":1290447788,"answer_id":4248426,"question_id":4244611,"content_license":"CC BY-SA 3.0","body_markdown":"Don&#39;t reinvent the wheel; check out Ruby&#39;s way-cool [OptionParser](http:\/\/ruby-doc.org\/stdlib\/libdoc\/optparse\/rdoc\/OptionParser.html) library.\r\n\r\nIt offers parsing of flags\/switches, parameters with optional or required values, can parse lists of parameters into a single option and can generate your help for you.\r\n\r\nAlso, if any of your information being passed in is pretty static, that doesn&#39;t change between runs, put it into a YAML file that gets parsed. That way you can have things that change every time on the command-line, and things that change occasionally configured outside your code. That separation of data and code is nice for maintenance.\r\n\r\nHere are some samples to play with:\r\n\r\n    require &#39;optparse&#39;\r\n    require &#39;yaml&#39;\r\n\r\n    options = {}\r\n    OptionParser.new do |opts|\r\n      opts.banner = &quot;Usage: example.rb [options]&quot;\r\n\r\n      opts.on(&#39;-n&#39;, &#39;--sourcename NAME&#39;, &#39;Source name&#39;) { |v| options[:source_name] = v }\r\n      opts.on(&#39;-h&#39;, &#39;--sourcehost HOST&#39;, &#39;Source host&#39;) { |v| options[:source_host] = v }\r\n      opts.on(&#39;-p&#39;, &#39;--sourceport PORT&#39;, &#39;Source port&#39;) { |v| options[:source_port] = v }\r\n\r\n    end.parse!\r\n\r\n    dest_options = YAML.load_file(&#39;destination_config.yaml&#39;)\r\n    puts dest_options[&#39;dest_name&#39;]\r\n\r\nThis is a sample YAML file if your destinations are pretty static:\r\n\r\n    --- \r\n    dest_name: username@gmail.com\r\n    dest_host: imap.gmail.com\r\n    dest_port: 993\r\n    dest_ssl: true\r\n    dest_user: username@gmail.com\r\n    dest_pass: password\r\n\r\nThis will let you easily generate a YAML file:\r\n\r\n    require &#39;yaml&#39;\r\n\r\n    yaml = {\r\n      &#39;dest_name&#39; =&gt; &#39;username@gmail.com&#39;,\r\n      &#39;dest_host&#39; =&gt; &#39;imap.gmail.com&#39;,\r\n      &#39;dest_port&#39; =&gt; 993,\r\n      &#39;dest_ssl&#39;  =&gt; true,\r\n      &#39;dest_user&#39; =&gt; &#39;username@gmail.com&#39;,\r\n      &#39;dest_pass&#39; =&gt; &#39;password&#39;\r\n    }\r\n\r\n    puts YAML.dump(yaml)","body":"<p>Don't reinvent the wheel; check out Ruby's way-cool <a href=\"http:\/\/ruby-doc.org\/stdlib\/libdoc\/optparse\/rdoc\/OptionParser.html\">OptionParser<\/a> library.<\/p>\n\n<p>It offers parsing of flags\/switches, parameters with optional or required values, can parse lists of parameters into a single option and can generate your help for you.<\/p>\n\n<p>Also, if any of your information being passed in is pretty static, that doesn't change between runs, put it into a YAML file that gets parsed. That way you can have things that change every time on the command-line, and things that change occasionally configured outside your code. That separation of data and code is nice for maintenance.<\/p>\n\n<p>Here are some samples to play with:<\/p>\n\n<pre><code>require 'optparse'\nrequire 'yaml'\n\noptions = {}\nOptionParser.new do |opts|\n  opts.banner = \"Usage: example.rb [options]\"\n\n  opts.on('-n', '--sourcename NAME', 'Source name') { |v| options[:source_name] = v }\n  opts.on('-h', '--sourcehost HOST', 'Source host') { |v| options[:source_host] = v }\n  opts.on('-p', '--sourceport PORT', 'Source port') { |v| options[:source_port] = v }\n\nend.parse!\n\ndest_options = YAML.load_file('destination_config.yaml')\nputs dest_options['dest_name']\n<\/code><\/pre>\n\n<p>This is a sample YAML file if your destinations are pretty static:<\/p>\n\n<pre><code>--- \ndest_name: username@gmail.com\ndest_host: imap.gmail.com\ndest_port: 993\ndest_ssl: true\ndest_user: username@gmail.com\ndest_pass: password\n<\/code><\/pre>\n\n<p>This will let you easily generate a YAML file:<\/p>\n\n<pre><code>require 'yaml'\n\nyaml = {\n  'dest_name' =&gt; 'username@gmail.com',\n  'dest_host' =&gt; 'imap.gmail.com',\n  'dest_port' =&gt; 993,\n  'dest_ssl'  =&gt; true,\n  'dest_user' =&gt; 'username@gmail.com',\n  'dest_pass' =&gt; 'password'\n}\n\nputs YAML.dump(yaml)\n<\/code><\/pre>\n"},{"owner":{"account_id":2787,"reputation":7503,"user_id":3920,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/fd62dc96131637a36e834e36c9423309?s=256&d=identicon&r=PG","display_name":"Jason Navarrete","link":"https:\/\/stackoverflow.com\/users\/3920\/jason-navarrete"},"is_accepted":true,"community_owned_date":1261113562.0,"score":205,"last_activity_date":1316886131,"last_edit_date":1316886131.0,"creation_date":1221095512,"answer_id":55610,"question_id":55574,"content_license":"CC BY-SA 3.0","body_markdown":"I&#39;ve been moving from C# in my professional career to looking at Ruby and RoR in my personal life, and I&#39;ve found linux to be slightly more appealing personally for development.  Particularly now that I&#39;ve started using git, the implementation is cleaner on linux.\r\n\r\nCurrently I&#39;m dual booting and getting closer to running Ubuntu full time.  I&#39;m using gedit with various plugins for the development environment. And as of late 2010, I&#39;m making the push to use Vim for development, even over Textmate on OS X.\r\n\r\nA large amount of the Rails developers are using (gasp) Macs, which has actually got me thinking in that direction.\r\n\r\nAlthough I haven&#39;t tried it, [Ruby in Steel][1] gives you a Ruby IDE inside the Visual Studio world, and [IronRuby][2] is the .NET flavor of Ruby, if you&#39;re interested.\r\n\r\nAs far as books are concerned, the *[Programming Ruby][3]* (also known as the Pickaxe) book from the Pragmatic Programmers is the de-facto for learning Ruby.  I bit the bullet and purchased that book and *[Agile Web Development with Rails][4]*; both books have been excellent.\r\n\r\n[Peepcode][5] screencasts and PDF books have also been great for getting started; at $9 per screencast it&#39;s hard to go wrong.  I actually bought a 5-pack.\r\n\r\nAlso check out the following:\r\n\r\n  - [Official Rails Guides][13]\r\n  - [Railscasts][7]\r\n  - [railsapi.com][12] or [Ruby on Rails - APIdock][10]\r\n  - [The Ruby Show][9]\r\n  - [Rails for Zombies][11]\r\n  - [Softies on Rails][8] - Ruby on Rails for .NET Developers\r\n  - [Rails Podcast][6]\r\n  - [Rails Best Practices][14]\r\n\r\nI&#39;ve burned through the backlog of Rails and Rails Envy podcasts in the past month and they have provided wonderful insight into lots of topics, even regarding software development in general.\r\n\r\n\r\n\r\n  [1]: http:\/\/www.sapphiresteel.com\/\r\n  [2]: http:\/\/www.ironruby.net\/\r\n  [3]: http:\/\/pragprog.com\/titles\/ruby3\/programming-ruby-3\r\n  [4]: http:\/\/pragprog.com\/book\/rails4\/agile-web-development-with-rails\r\n  [5]: http:\/\/peepcode.com\/\r\n  [6]: http:\/\/podcast.rubyonrails.org\/\r\n  [7]: http:\/\/railscasts.com\/\r\n  [8]: http:\/\/www.softiesonrails.com\/\r\n  [9]: http:\/\/rubyshow.com\/\r\n  [10]: http:\/\/apidock.com\/rails\r\n  [11]: http:\/\/railsforzombies.org\r\n  [12]: http:\/\/railsapi.com\/\r\n  [13]: http:\/\/guides.rubyonrails.org\/\r\n  [14]: http:\/\/www.codeschool.com\/courses\/rails-best-practices\r\n","body":"<p>I've been moving from C# in my professional career to looking at Ruby and RoR in my personal life, and I've found linux to be slightly more appealing personally for development.  Particularly now that I've started using git, the implementation is cleaner on linux.<\/p>\n\n<p>Currently I'm dual booting and getting closer to running Ubuntu full time.  I'm using gedit with various plugins for the development environment. And as of late 2010, I'm making the push to use Vim for development, even over Textmate on OS X.<\/p>\n\n<p>A large amount of the Rails developers are using (gasp) Macs, which has actually got me thinking in that direction.<\/p>\n\n<p>Although I haven't tried it, <a href=\"http:\/\/www.sapphiresteel.com\/\" rel=\"nofollow noreferrer\">Ruby in Steel<\/a> gives you a Ruby IDE inside the Visual Studio world, and <a href=\"http:\/\/www.ironruby.net\/\" rel=\"nofollow noreferrer\">IronRuby<\/a> is the .NET flavor of Ruby, if you're interested.<\/p>\n\n<p>As far as books are concerned, the <em><a href=\"http:\/\/pragprog.com\/titles\/ruby3\/programming-ruby-3\" rel=\"nofollow noreferrer\">Programming Ruby<\/a><\/em> (also known as the Pickaxe) book from the Pragmatic Programmers is the de-facto for learning Ruby.  I bit the bullet and purchased that book and <em><a href=\"http:\/\/pragprog.com\/book\/rails4\/agile-web-development-with-rails\" rel=\"nofollow noreferrer\">Agile Web Development with Rails<\/a><\/em>; both books have been excellent.<\/p>\n\n<p><a href=\"http:\/\/peepcode.com\/\" rel=\"nofollow noreferrer\">Peepcode<\/a> screencasts and PDF books have also been great for getting started; at $9 per screencast it's hard to go wrong.  I actually bought a 5-pack.<\/p>\n\n<p>Also check out the following:<\/p>\n\n<ul>\n<li><a href=\"http:\/\/guides.rubyonrails.org\/\" rel=\"nofollow noreferrer\">Official Rails Guides<\/a><\/li>\n<li><a href=\"http:\/\/railscasts.com\/\" rel=\"nofollow noreferrer\">Railscasts<\/a><\/li>\n<li><a href=\"http:\/\/railsapi.com\/\" rel=\"nofollow noreferrer\">railsapi.com<\/a> or <a href=\"http:\/\/apidock.com\/rails\" rel=\"nofollow noreferrer\">Ruby on Rails - APIdock<\/a><\/li>\n<li><a href=\"http:\/\/rubyshow.com\/\" rel=\"nofollow noreferrer\">The Ruby Show<\/a><\/li>\n<li><a href=\"http:\/\/railsforzombies.org\" rel=\"nofollow noreferrer\">Rails for Zombies<\/a><\/li>\n<li><a href=\"http:\/\/www.softiesonrails.com\/\" rel=\"nofollow noreferrer\">Softies on Rails<\/a> - Ruby on Rails for .NET Developers<\/li>\n<li><a href=\"http:\/\/podcast.rubyonrails.org\/\" rel=\"nofollow noreferrer\">Rails Podcast<\/a><\/li>\n<li><a href=\"http:\/\/www.codeschool.com\/courses\/rails-best-practices\" rel=\"nofollow noreferrer\">Rails Best Practices<\/a><\/li>\n<\/ul>\n\n<p>I've burned through the backlog of Rails and Rails Envy podcasts in the past month and they have provided wonderful insight into lots of topics, even regarding software development in general.<\/p>\n"},{"owner":{"account_id":437727,"reputation":2798,"user_id":825563,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/9767bd2a811cab859b83635e3636e657?s=256&d=identicon&r=PG","display_name":"Psylone","link":"https:\/\/stackoverflow.com\/users\/825563\/psylone"},"is_accepted":false,"community_owned_date":null,"score":199,"last_activity_date":1320255988,"last_edit_date":1320255988.0,"creation_date":1317025632,"answer_id":7552469,"question_id":1937743,"content_license":"CC BY-SA 3.0","body_markdown":"`File.expand_path File.dirname(__FILE__)` will return the directory relative to the file this command is called from.\r\n\r\nBut `Dir.pwd` returns the working directory (results identical to executing `pwd` in your terminal)","body":"<p><code>File.expand_path File.dirname(__FILE__)<\/code> will return the directory relative to the file this command is called from.<\/p>\n\n<p>But <code>Dir.pwd<\/code> returns the working directory (results identical to executing <code>pwd<\/code> in your terminal)<\/p>\n"},{"owner":{"account_id":107635,"reputation":2155,"user_id":286105,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/e9727fcb9e8ba1b7d1fa0079336dfa8e?s=256&d=identicon&r=PG","display_name":"dukz","link":"https:\/\/stackoverflow.com\/users\/286105\/dukz"},"is_accepted":false,"community_owned_date":null,"score":199,"last_activity_date":1362569705,"last_edit_date":null,"creation_date":1362569705,"answer_id":15246294,"question_id":11263150,"content_license":"CC BY-SA 3.0","body_markdown":"The way to do this is to run the following command:\r\n\r\n    bundle update --source gem-name","body":"<p>The way to do this is to run the following command:<\/p>\n\n<pre><code>bundle update --source gem-name\n<\/code><\/pre>\n"},{"owner":{"account_id":86477,"reputation":193099,"user_id":240443,"user_type":"registered","accept_rate":79,"profile_image":"https:\/\/www.gravatar.com\/avatar\/495d675e3bc42ed1dee469e2ce701f1b?s=256&d=identicon&r=PG","display_name":"Amadan","link":"https:\/\/stackoverflow.com\/users\/240443\/amadan"},"is_accepted":false,"community_owned_date":null,"score":197,"last_activity_date":1465033715,"last_edit_date":1465033715.0,"creation_date":1282754563,"answer_id":3568281,"question_id":3568222,"content_license":"CC BY-SA 3.0","body_markdown":"Slicing and indexing are two different operations, and inferring the behaviour of one from the other is where your problem lies.\r\n\r\nThe first argument in slice identifies not the element but the places between elements, defining spans (and not elements themselves):\r\n\r\n      :peanut   :butter   :and   :jelly\r\n    0         1         2      3        4\r\n\r\n4 is still within the array, just barely; if you request 0 elements, you get the empty end of the array. But there is no index 5, so you can&#39;t slice from there.\r\n\r\nWhen you do index (like `array[4]`), you are pointing at elements themselves, so the indices only go from 0 to 3.","body":"<p>Slicing and indexing are two different operations, and inferring the behaviour of one from the other is where your problem lies.<\/p>\n\n<p>The first argument in slice identifies not the element but the places between elements, defining spans (and not elements themselves):<\/p>\n\n<pre><code>  :peanut   :butter   :and   :jelly\n0         1         2      3        4\n<\/code><\/pre>\n\n<p>4 is still within the array, just barely; if you request 0 elements, you get the empty end of the array. But there is no index 5, so you can't slice from there.<\/p>\n\n<p>When you do index (like <code>array[4]<\/code>), you are pointing at elements themselves, so the indices only go from 0 to 3.<\/p>\n"},{"owner":{"account_id":33083,"reputation":92312,"user_id":92313,"user_type":"registered","accept_rate":88,"profile_image":"https:\/\/www.gravatar.com\/avatar\/825adc1be578338807e9bf0276311396?s=256&d=identicon&r=PG","display_name":"Daniel Vandersluis","link":"https:\/\/stackoverflow.com\/users\/92313\/daniel-vandersluis"},"is_accepted":true,"community_owned_date":null,"score":195,"last_activity_date":1285422191,"last_edit_date":null,"creation_date":1285422191,"answer_id":3794053,"question_id":3794039,"content_license":"CC BY-SA 2.5","body_markdown":"You could use [Enumerable#select](http:\/\/rubydoc.info\/docs\/ruby-core\/1.9.2\/Enumerable:select):\r\n\r\n    clients.select{|key, hash| hash[&quot;client_id&quot;] == &quot;2180&quot; }\r\n    #=&gt; [[&quot;orange&quot;, {&quot;client_id&quot;=&gt;&quot;2180&quot;}]]\r\n\r\nNote that the result will be an array of all the matching values, where each is an array of the key and value.","body":"<p>You could use <a href=\"http:\/\/rubydoc.info\/docs\/ruby-core\/1.9.2\/Enumerable:select\" rel=\"noreferrer\">Enumerable#select<\/a>:<\/p>\n\n<pre><code>clients.select{|key, hash| hash[\"client_id\"] == \"2180\" }\n#=&gt; [[\"orange\", {\"client_id\"=&gt;\"2180\"}]]\n<\/code><\/pre>\n\n<p>Note that the result will be an array of all the matching values, where each is an array of the key and value.<\/p>\n"},{"owner":{"account_id":333062,"reputation":28163,"user_id":658718,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/661bb4dee881617e676c4d954ce97a70?s=256&d=identicon&r=PG","display_name":"Konrad Reiche","link":"https:\/\/stackoverflow.com\/users\/658718\/konrad-reiche"},"is_accepted":false,"community_owned_date":null,"score":194,"last_activity_date":1382595212,"last_edit_date":1382595212.0,"creation_date":1382583212,"answer_id":19556070,"question_id":5502761,"content_license":"CC BY-SA 3.0","body_markdown":"There is also the [`Numeric#fdiv`][1] method which you can use instead:\r\n\r\n    9.fdiv(5)  #=&gt; 1.8\r\n\r\n\r\n  [1]:http:\/\/www.ruby-doc.org\/core-2.0.0\/Numeric.html#method-i-fdiv","body":"<p>There is also the <a href=\"http:\/\/www.ruby-doc.org\/core-2.0.0\/Numeric.html#method-i-fdiv\" rel=\"noreferrer\"><code>Numeric#fdiv<\/code><\/a> method which you can use instead:<\/p>\n\n<pre><code>9.fdiv(5)  #=&gt; 1.8\n<\/code><\/pre>\n"},{"owner":{"account_id":13097,"reputation":15536,"user_id":26123,"user_type":"registered","accept_rate":59,"profile_image":"https:\/\/www.gravatar.com\/avatar\/b1b94381a686e993a25bfbf20e0e7829?s=256&d=identicon&r=PG","display_name":"Milan Novota","link":"https:\/\/stackoverflow.com\/users\/26123\/milan-novota"},"is_accepted":false,"community_owned_date":null,"score":191,"last_activity_date":1259683715,"last_edit_date":1259683715.0,"creation_date":1259680396,"answer_id":1826822,"question_id":1826727,"content_license":"CC BY-SA 2.5","body_markdown":"Parsing JSON in Rails is quite straightforward:\r\n\r\n    parsed_json = ActiveSupport::JSON.decode(your_json_string)\r\n\r\nLet&#39;s suppose, the object you want to associate the shortUrl with is a Site object, which has two attributes - short_url and long_url. Than, to get the shortUrl and associate it with  the appropriate Site object, you can do something like:\r\n\r\n    parsed_json[&quot;results&quot;].each do |longUrl, convertedUrl|\r\n      site = Site.find_by_long_url(longUrl)\r\n      site.short_url = convertedUrl[&quot;shortUrl&quot;]\r\n      site.save\r\n    end","body":"<p>Parsing JSON in Rails is quite straightforward:<\/p>\n\n<pre><code>parsed_json = ActiveSupport::JSON.decode(your_json_string)\n<\/code><\/pre>\n\n<p>Let's suppose, the object you want to associate the shortUrl with is a Site object, which has two attributes - short_url and long_url. Than, to get the shortUrl and associate it with  the appropriate Site object, you can do something like:<\/p>\n\n<pre><code>parsed_json[\"results\"].each do |longUrl, convertedUrl|\n  site = Site.find_by_long_url(longUrl)\n  site.short_url = convertedUrl[\"shortUrl\"]\n  site.save\nend\n<\/code><\/pre>\n"},{"owner":{"account_id":31679,"reputation":209622,"user_id":87189,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/98e7d6edce863e7a1bf8199b082eb25e?s=256&d=identicon&r=PG","display_name":"tadman","link":"https:\/\/stackoverflow.com\/users\/87189\/tadman"},"is_accepted":true,"community_owned_date":null,"score":186,"last_activity_date":1435700826,"last_edit_date":1435700826.0,"creation_date":1250007405,"answer_id":1261435,"question_id":1261329,"content_license":"CC BY-SA 3.0","body_markdown":"Newer versions of Ruby (2.0+) do not really have significant differences between the two classes. Some libraries will use one or the other for historical reasons, but new code does not necessarily need to be concerned. Picking one for consistency is probably best, so try and mesh with what your libraries expect. For example, ActiveRecord prefers DateTime.\r\n\r\nIn versions prior to Ruby 1.9 and on many systems Time is represented as a 32-bit signed value describing the number of seconds since January 1, 1970 UTC, a thin wrapper around a POSIX-standard `time_t` value, and is bounded:\r\n\r\n    Time.at(0x7FFFFFFF)\r\n    # =&gt; Mon Jan 18 22:14:07 -0500 2038\r\n    Time.at(-0x7FFFFFFF)\r\n    # =&gt; Fri Dec 13 15:45:53 -0500 1901\r\n\r\nNewer versions of Ruby are able to handle larger values without producing errors.\r\n\r\nDateTime is a calendar-based approach where the year, month, day, hour, minute and second are stored individually. This is a Ruby on Rails construct that serves as a wrapper around SQL-standard DATETIME fields. These contain arbitrary dates and can represent nearly any point in time as the range of expression is typically very large.\r\n\r\n    DateTime.new\r\n    # =&gt; Mon, 01 Jan -4712 00:00:00 +0000\r\n\r\nSo it&#39;s reassuring that DateTime can handle blog posts from Aristotle.\r\n\r\nWhen choosing one, the differences are somewhat subjective now. Historically DateTime has provided better options for manipulating it in a calendar fashion, but many of these methods have been ported over to Time as well, at least within the Rails environment.\r\n","body":"<p>Newer versions of Ruby (2.0+) do not really have significant differences between the two classes. Some libraries will use one or the other for historical reasons, but new code does not necessarily need to be concerned. Picking one for consistency is probably best, so try and mesh with what your libraries expect. For example, ActiveRecord prefers DateTime.<\/p>\n\n<p>In versions prior to Ruby 1.9 and on many systems Time is represented as a 32-bit signed value describing the number of seconds since January 1, 1970 UTC, a thin wrapper around a POSIX-standard <code>time_t<\/code> value, and is bounded:<\/p>\n\n<pre><code>Time.at(0x7FFFFFFF)\n# =&gt; Mon Jan 18 22:14:07 -0500 2038\nTime.at(-0x7FFFFFFF)\n# =&gt; Fri Dec 13 15:45:53 -0500 1901\n<\/code><\/pre>\n\n<p>Newer versions of Ruby are able to handle larger values without producing errors.<\/p>\n\n<p>DateTime is a calendar-based approach where the year, month, day, hour, minute and second are stored individually. This is a Ruby on Rails construct that serves as a wrapper around SQL-standard DATETIME fields. These contain arbitrary dates and can represent nearly any point in time as the range of expression is typically very large.<\/p>\n\n<pre><code>DateTime.new\n# =&gt; Mon, 01 Jan -4712 00:00:00 +0000\n<\/code><\/pre>\n\n<p>So it's reassuring that DateTime can handle blog posts from Aristotle.<\/p>\n\n<p>When choosing one, the differences are somewhat subjective now. Historically DateTime has provided better options for manipulating it in a calendar fashion, but many of these methods have been ported over to Time as well, at least within the Rails environment.<\/p>\n"},{"owner":{"account_id":2286469,"reputation":1859,"user_id":2010324,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/00188143909632aca687e95a3162a67b?s=256&d=identicon&r=PG","display_name":"user2010324","link":"https:\/\/stackoverflow.com\/users\/2010324\/user2010324"},"is_accepted":false,"community_owned_date":null,"score":185,"last_activity_date":1389808319,"last_edit_date":1389808319.0,"creation_date":1359104321,"answer_id":14518416,"question_id":5878697,"content_license":"CC BY-SA 3.0","body_markdown":"    1.9.3p194 :001 &gt; [&quot;&quot;, &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;&quot;].reject(&amp;:empty?)\r\n\r\n    =&gt; [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]","body":"<pre><code>1.9.3p194 :001 &gt; [\"\", \"A\", \"B\", \"C\", \"\"].reject(&amp;:empty?)\n\n=&gt; [\"A\", \"B\", \"C\"]\n<\/code><\/pre>\n"},{"owner":{"account_id":3251392,"reputation":2738,"user_id":2741526,"user_type":"registered","accept_rate":0,"profile_image":"https:\/\/i.stack.imgur.com\/oZfPR.jpg?s=256&g=1","display_name":"Dheerendra Kulkarni","link":"https:\/\/stackoverflow.com\/users\/2741526\/dheerendra-kulkarni"},"is_accepted":false,"community_owned_date":null,"score":185,"last_activity_date":1419452034,"last_edit_date":null,"creation_date":1419452034,"answer_id":27641786,"question_id":19150017,"content_license":"CC BY-SA 3.0","body_markdown":"&lt;h2&gt;For windows users&lt;\/h2&gt;\r\nGoto link http:\/\/rubygems.org\/pages\/download\r\n\r\n 1. Download the latest zip file (In my case 2.4.5)\r\n 2. Unzip it \r\n 3. run &quot;ruby setup.rb&quot; in unzipped folder\r\n 4. now run  gem install command","body":"<h2>For windows users<\/h2>\n\n<p>Goto link <a href=\"http:\/\/rubygems.org\/pages\/download\">http:\/\/rubygems.org\/pages\/download<\/a><\/p>\n\n<ol>\n<li>Download the latest zip file (In my case 2.4.5)<\/li>\n<li>Unzip it <\/li>\n<li>run \"ruby setup.rb\" in unzipped folder<\/li>\n<li>now run  gem install command<\/li>\n<\/ol>\n"},{"owner":{"account_id":655662,"reputation":1883,"user_id":464967,"user_type":"unregistered","profile_image":"https:\/\/www.gravatar.com\/avatar\/88d066a06299bcecb8ca466cf5b295bc?s=256&d=identicon&r=PG","display_name":"FernandoFabreti","link":"https:\/\/stackoverflow.com\/users\/464967\/fernandofabreti"},"is_accepted":false,"community_owned_date":null,"score":180,"last_activity_date":1322753110,"last_edit_date":1322753110.0,"creation_date":1287274239,"answer_id":3951391,"question_id":690151,"content_license":"CC BY-SA 3.0","body_markdown":"Just for the record, if you want both (output and operation result) you can do:\r\n\r\n \r\n\r\n    output=`ls no_existing_file` ;  result=$?.success?\r\n\r\n","body":"<p>Just for the record, if you want both (output and operation result) you can do:<\/p>\n\n<pre><code>output=`ls no_existing_file` ;  result=$?.success?\n<\/code><\/pre>\n"},{"owner":{"account_id":1455416,"reputation":13802,"user_id":1371131,"user_type":"registered","accept_rate":93,"profile_image":"https:\/\/i.stack.imgur.com\/Qpq1r.png?s=256&g=1","display_name":"Dennis Hackethal","link":"https:\/\/stackoverflow.com\/users\/1371131\/dennis-hackethal"},"is_accepted":false,"community_owned_date":null,"score":177,"last_activity_date":1426379899,"last_edit_date":null,"creation_date":1426379899,"answer_id":29055958,"question_id":1203892,"content_license":"CC BY-SA 3.0","body_markdown":"Simplest solution I can come up with in 2015 (verified using Rails 4, but should also work using Rails 3)\r\n\r\n    request.url\r\n    # =&gt; &quot;http:\/\/localhost:3000\/lists\/7\/items&quot;\r\n    request.path\r\n    # =&gt; &quot;\/lists\/7\/items&quot;","body":"<p>Simplest solution I can come up with in 2015 (verified using Rails 4, but should also work using Rails 3)<\/p>\n\n<pre><code>request.url\n# =&gt; \"http:\/\/localhost:3000\/lists\/7\/items\"\nrequest.path\n# =&gt; \"\/lists\/7\/items\"\n<\/code><\/pre>\n"},{"owner":{"account_id":22817,"reputation":6304,"user_id":56690,"user_type":"registered","accept_rate":93,"profile_image":"https:\/\/www.gravatar.com\/avatar\/673b3af90381f26882b7e7283ab137fa?s=256&d=identicon&r=PG","display_name":"Bo Jeanes","link":"https:\/\/stackoverflow.com\/users\/56690\/bo-jeanes"},"is_accepted":false,"community_owned_date":null,"score":174,"last_activity_date":1340912142,"last_edit_date":null,"creation_date":1340912142,"answer_id":11251654,"question_id":798710,"content_license":"CC BY-SA 3.0","body_markdown":"If you are using Ruby 1.9.2 or later, you can use `URI.encode_www_form` if you don&#39;t need arrays.\r\n\r\nE.g. (from the Ruby docs in 1.9.3):\r\n\r\n    URI.encode_www_form([[&quot;q&quot;, &quot;ruby&quot;], [&quot;lang&quot;, &quot;en&quot;]])\r\n    #=&gt; &quot;q=ruby&amp;lang=en&quot;\r\n    URI.encode_www_form(&quot;q&quot; =&gt; &quot;ruby&quot;, &quot;lang&quot; =&gt; &quot;en&quot;)\r\n    #=&gt; &quot;q=ruby&amp;lang=en&quot;\r\n    URI.encode_www_form(&quot;q&quot; =&gt; [&quot;ruby&quot;, &quot;perl&quot;], &quot;lang&quot; =&gt; &quot;en&quot;)\r\n    #=&gt; &quot;q=ruby&amp;q=perl&amp;lang=en&quot;\r\n    URI.encode_www_form([[&quot;q&quot;, &quot;ruby&quot;], [&quot;q&quot;, &quot;perl&quot;], [&quot;lang&quot;, &quot;en&quot;]])\r\n    #=&gt; &quot;q=ruby&amp;q=perl&amp;lang=en&quot;\r\n\r\nYou&#39;ll notice that array values are not set with key names containing `[]` like we&#39;ve all become used to in query strings. The spec that `encode_www_form` uses is in accordance with the HTML5 definition of `application\/x-www-form-urlencoded` data.","body":"<p>If you are using Ruby 1.9.2 or later, you can use <code>URI.encode_www_form<\/code> if you don't need arrays.<\/p>\n\n<p>E.g. (from the Ruby docs in 1.9.3):<\/p>\n\n<pre><code>URI.encode_www_form([[\"q\", \"ruby\"], [\"lang\", \"en\"]])\n#=&gt; \"q=ruby&amp;lang=en\"\nURI.encode_www_form(\"q\" =&gt; \"ruby\", \"lang\" =&gt; \"en\")\n#=&gt; \"q=ruby&amp;lang=en\"\nURI.encode_www_form(\"q\" =&gt; [\"ruby\", \"perl\"], \"lang\" =&gt; \"en\")\n#=&gt; \"q=ruby&amp;q=perl&amp;lang=en\"\nURI.encode_www_form([[\"q\", \"ruby\"], [\"q\", \"perl\"], [\"lang\", \"en\"]])\n#=&gt; \"q=ruby&amp;q=perl&amp;lang=en\"\n<\/code><\/pre>\n\n<p>You'll notice that array values are not set with key names containing <code>[]<\/code> like we've all become used to in query strings. The spec that <code>encode_www_form<\/code> uses is in accordance with the HTML5 definition of <code>application\/x-www-form-urlencoded<\/code> data.<\/p>\n"},{"owner":{"account_id":1802914,"reputation":5259,"user_id":1640771,"user_type":"registered","accept_rate":85,"profile_image":"https:\/\/www.gravatar.com\/avatar\/6a97eaf89f5a71f9ddea52567577521d?s=256&d=identicon&r=PG","display_name":"Douglas","link":"https:\/\/stackoverflow.com\/users\/1640771\/douglas"},"is_accepted":false,"community_owned_date":null,"score":174,"last_activity_date":1480683418,"last_edit_date":1480683418.0,"creation_date":1350490873,"answer_id":12938809,"question_id":3136420,"content_license":"CC BY-SA 3.0","body_markdown":"Many people on this thread and on google explain very well that `attr_accessible` specifies a whitelist of attributes that are allowed to be updated in bulk (**all the attributes of an object model together at the same time**)\r\nThis is mainly (and only) to protect your application from &quot;Mass assignment&quot; pirate exploit.\r\n\r\nThis is explained here on the official Rails doc : [Mass Assignment][1]\r\n\r\n`attr_accessor` is a ruby code to (quickly) create setter and getter methods in a Class. That&#39;s all.\r\n\r\nNow, what is missing as an explanation is that when you create somehow a link between a (Rails) model with a database table, you NEVER, NEVER, NEVER need `attr_accessor` in your model to create setters and getters in order to be able to modify your table&#39;s records.\r\n\r\nThis is because your model inherits all methods from the `ActiveRecord::Base` Class, which already defines basic CRUD accessors (Create, Read, Update, Delete) for you.\r\nThis is explained on the offical doc here [Rails Model][2] and here [Overwriting default accessor][3] (scroll down to the chapter &quot;Overwrite default accessor&quot;)\r\n\r\nSay for instance that: we have a database table called &quot;users&quot; that contains three columns &quot;firstname&quot;, &quot;lastname&quot; and &quot;role&quot; :\r\n\r\nSQL instructions :\r\n\r\n    CREATE TABLE users (\r\n      firstname string,\r\n      lastname string\r\n      role string\r\n    );\r\n\r\nI assumed that you set the option `config.active_record.whitelist_attributes = true` in your config\/environment\/production.rb to protect your application from Mass assignment exploit. This is explained here : [Mass Assignment][4]\r\n\r\nYour Rails model will perfectly work with the Model here below :\r\n\r\n    class User &lt; ActiveRecord::Base\r\n    \r\n    end\r\n\r\nHowever you will need to update each attribute of user separately in your controller for your form&#39;s View to work :\r\n\r\n    def update\r\n        @user = User.find_by_id(params[:id])\r\n        @user.firstname = params[:user][:firstname]\r\n        @user.lastname = params[:user][:lastname]\r\n\r\n        if @user.save\r\n            # Use of I18 internationalization t method for the flash message\r\n            flash[:success] = t(&#39;activerecord.successful.messages.updated&#39;, :model =&gt; User.model_name.human)\r\n        end\r\n\r\n        respond_with(@user)\r\n    end\r\n\r\nNow to ease your life, you don&#39;t want to make a complicated controller for your User model.\r\nSo you will use the `attr_accessible` special method in your Class model :\r\n\r\n    class User &lt; ActiveRecord::Base\r\n\r\n      attr_accessible :firstname, :lastname\r\n    \r\n    end\r\n\r\nSo you can use the &quot;highway&quot; (mass assignment) to update :\r\n\r\n    def update\r\n        @user = User.find_by_id(params[:id])\r\n\r\n        if @user.update_attributes(params[:user])\r\n            # Use of I18 internationlization t method for the flash message\r\n            flash[:success] = t(&#39;activerecord.successful.messages.updated&#39;, :model =&gt; User.model_name.human)\r\n        end\r\n\r\n        respond_with(@user)\r\n    end\r\n\r\nYou didn&#39;t add the &quot;role&quot; attributes to the `attr_accessible` list because you don&#39;t let your users set their role by themselves (like admin). You do this yourself on another special admin View.\r\n\r\nThough your user view doesn&#39;t show a &quot;role&quot; field, a pirate could easily send a HTTP POST request that include &quot;role&quot; in the params hash. The missing &quot;role&quot; attribute on the `attr_accessible` is to protect your application from that.\r\n\r\nYou can still modify your user.role attribute on its own like below, but not with all attributes together.\r\n\r\n    @user.role = DEFAULT_ROLE\r\n\r\n**Why the hell would you use the `attr_accessor`?**\r\n\r\nWell, this would be in the case that your user-form shows a field that doesn&#39;t exist in your users table as a column.\r\n\r\nFor instance, say your user view shows a &quot;please-tell-the-admin-that-I&#39;m-in-here&quot; field.\r\nYou don&#39;t want to store this info in your table. You just want that Rails send you an e-mail warning you that one &quot;crazy&quot; ;-) user has subscribed.\r\n\r\nTo be able to make use of this info you need to store it temporarily somewhere.\r\nWhat more easy than recover it in a `user.peekaboo` attribute ?\r\n\r\nSo you add this field to your model :\r\n\r\n    class User &lt; ActiveRecord::Base\r\n\r\n      attr_accessible :firstname, :lastname\r\n      attr_accessor :peekaboo\r\n    \r\n    end\r\n\r\nSo you will be able to make an educated use of the `user.peekaboo` attribute somewhere in your controller to send an e-mail or do whatever you want.\r\n\r\nActiveRecord will not save the &quot;peekaboo&quot; attribute in your table when you do a `user.save` because she don&#39;t see any column matching this name in her model.\r\n\r\n\r\n  [1]: http:\/\/guides.rubyonrails.org\/v3.2.13\/security.html#mass-assignment\r\n  [2]: http:\/\/guides.rubyonrails.org\/getting_started.html#the-model\r\n  [3]: http:\/\/api.rubyonrails.org\/classes\/ActiveRecord\/Base.html\r\n  [4]: http:\/\/guides.rubyonrails.org\/v3.2.13\/security.html#mass-assignment","body":"<p>Many people on this thread and on google explain very well that <code>attr_accessible<\/code> specifies a whitelist of attributes that are allowed to be updated in bulk (<strong>all the attributes of an object model together at the same time<\/strong>)\nThis is mainly (and only) to protect your application from \"Mass assignment\" pirate exploit.<\/p>\n\n<p>This is explained here on the official Rails doc : <a href=\"http:\/\/guides.rubyonrails.org\/v3.2.13\/security.html#mass-assignment\" rel=\"noreferrer\">Mass Assignment<\/a><\/p>\n\n<p><code>attr_accessor<\/code> is a ruby code to (quickly) create setter and getter methods in a Class. That's all.<\/p>\n\n<p>Now, what is missing as an explanation is that when you create somehow a link between a (Rails) model with a database table, you NEVER, NEVER, NEVER need <code>attr_accessor<\/code> in your model to create setters and getters in order to be able to modify your table's records.<\/p>\n\n<p>This is because your model inherits all methods from the <code>ActiveRecord::Base<\/code> Class, which already defines basic CRUD accessors (Create, Read, Update, Delete) for you.\nThis is explained on the offical doc here <a href=\"http:\/\/guides.rubyonrails.org\/getting_started.html#the-model\" rel=\"noreferrer\">Rails Model<\/a> and here <a href=\"http:\/\/api.rubyonrails.org\/classes\/ActiveRecord\/Base.html\" rel=\"noreferrer\">Overwriting default accessor<\/a> (scroll down to the chapter \"Overwrite default accessor\")<\/p>\n\n<p>Say for instance that: we have a database table called \"users\" that contains three columns \"firstname\", \"lastname\" and \"role\" :<\/p>\n\n<p>SQL instructions :<\/p>\n\n<pre><code>CREATE TABLE users (\n  firstname string,\n  lastname string\n  role string\n);\n<\/code><\/pre>\n\n<p>I assumed that you set the option <code>config.active_record.whitelist_attributes = true<\/code> in your config\/environment\/production.rb to protect your application from Mass assignment exploit. This is explained here : <a href=\"http:\/\/guides.rubyonrails.org\/v3.2.13\/security.html#mass-assignment\" rel=\"noreferrer\">Mass Assignment<\/a><\/p>\n\n<p>Your Rails model will perfectly work with the Model here below :<\/p>\n\n<pre><code>class User &lt; ActiveRecord::Base\n\nend\n<\/code><\/pre>\n\n<p>However you will need to update each attribute of user separately in your controller for your form's View to work :<\/p>\n\n<pre><code>def update\n    @user = User.find_by_id(params[:id])\n    @user.firstname = params[:user][:firstname]\n    @user.lastname = params[:user][:lastname]\n\n    if @user.save\n        # Use of I18 internationalization t method for the flash message\n        flash[:success] = t('activerecord.successful.messages.updated', :model =&gt; User.model_name.human)\n    end\n\n    respond_with(@user)\nend\n<\/code><\/pre>\n\n<p>Now to ease your life, you don't want to make a complicated controller for your User model.\nSo you will use the <code>attr_accessible<\/code> special method in your Class model :<\/p>\n\n<pre><code>class User &lt; ActiveRecord::Base\n\n  attr_accessible :firstname, :lastname\n\nend\n<\/code><\/pre>\n\n<p>So you can use the \"highway\" (mass assignment) to update :<\/p>\n\n<pre><code>def update\n    @user = User.find_by_id(params[:id])\n\n    if @user.update_attributes(params[:user])\n        # Use of I18 internationlization t method for the flash message\n        flash[:success] = t('activerecord.successful.messages.updated', :model =&gt; User.model_name.human)\n    end\n\n    respond_with(@user)\nend\n<\/code><\/pre>\n\n<p>You didn't add the \"role\" attributes to the <code>attr_accessible<\/code> list because you don't let your users set their role by themselves (like admin). You do this yourself on another special admin View.<\/p>\n\n<p>Though your user view doesn't show a \"role\" field, a pirate could easily send a HTTP POST request that include \"role\" in the params hash. The missing \"role\" attribute on the <code>attr_accessible<\/code> is to protect your application from that.<\/p>\n\n<p>You can still modify your user.role attribute on its own like below, but not with all attributes together.<\/p>\n\n<pre><code>@user.role = DEFAULT_ROLE\n<\/code><\/pre>\n\n<p><strong>Why the hell would you use the <code>attr_accessor<\/code>?<\/strong><\/p>\n\n<p>Well, this would be in the case that your user-form shows a field that doesn't exist in your users table as a column.<\/p>\n\n<p>For instance, say your user view shows a \"please-tell-the-admin-that-I'm-in-here\" field.\nYou don't want to store this info in your table. You just want that Rails send you an e-mail warning you that one \"crazy\" ;-) user has subscribed.<\/p>\n\n<p>To be able to make use of this info you need to store it temporarily somewhere.\nWhat more easy than recover it in a <code>user.peekaboo<\/code> attribute ?<\/p>\n\n<p>So you add this field to your model :<\/p>\n\n<pre><code>class User &lt; ActiveRecord::Base\n\n  attr_accessible :firstname, :lastname\n  attr_accessor :peekaboo\n\nend\n<\/code><\/pre>\n\n<p>So you will be able to make an educated use of the <code>user.peekaboo<\/code> attribute somewhere in your controller to send an e-mail or do whatever you want.<\/p>\n\n<p>ActiveRecord will not save the \"peekaboo\" attribute in your table when you do a <code>user.save<\/code> because she don't see any column matching this name in her model.<\/p>\n"},{"owner":{"account_id":266051,"reputation":5797,"user_id":553408,"user_type":"registered","accept_rate":82,"profile_image":"https:\/\/www.gravatar.com\/avatar\/a5acd402e44e4a797602ce1068f53151?s=256&d=identicon&r=PG","display_name":"Hnatt","link":"https:\/\/stackoverflow.com\/users\/553408\/hnatt"},"is_accepted":false,"community_owned_date":null,"score":172,"last_activity_date":1513798330,"last_edit_date":1513798330.0,"creation_date":1385134910,"answer_id":20148810,"question_id":8381499,"content_license":"CC BY-SA 3.0","body_markdown":"If you&#39;re dealing with natural language text and need to replace a word, not just part of a string, you have to add a pinch of regular expressions to your gsub as a plain text substitution can lead to disastrous results:\r\n\r\n    &#39;mislocated cat, vindicating&#39;.gsub(&#39;cat&#39;, &#39;dog&#39;)\r\n    =&gt; &quot;mislodoged dog, vindidoging&quot;\r\n\r\nRegular expressions have word boundaries, such as `\\b` which matches start or end of a word. Thus,\r\n\r\n    &#39;mislocated cat, vindicating&#39;.gsub(\/\\bcat\\b\/, &#39;dog&#39;)\r\n    =&gt; &quot;mislocated dog, vindicating&quot;\r\n\r\nIn Ruby, unlike some other languages like Javascript, word boundaries are UTF-8-compatible, so you can use it for languages with non-Latin or extended Latin alphabets:\r\n\r\n    &#39;\u0441\u0456\u043b\u044c \u0443 \u043a\u0438\u0441\u0456\u043b\u044c, \u0434\u043b\u044f \u0432\u0435\u0441\u0456\u043b\u044c&#39;.gsub(\/\\b\u0441\u0456\u043b\u044c\\b\/, &#39;\u0446\u0443\u043a\u043e\u0440&#39;)\r\n    =&gt; &quot;\u0446\u0443\u043a\u043e\u0440 \u0443 \u043a\u0438\u0441\u0456\u043b\u044c, \u0434\u043b\u044f \u0432\u0435\u0441\u0456\u043b\u044c&quot;","body":"<p>If you're dealing with natural language text and need to replace a word, not just part of a string, you have to add a pinch of regular expressions to your gsub as a plain text substitution can lead to disastrous results:<\/p>\n\n<pre><code>'mislocated cat, vindicating'.gsub('cat', 'dog')\n=&gt; \"mislodoged dog, vindidoging\"\n<\/code><\/pre>\n\n<p>Regular expressions have word boundaries, such as <code>\\b<\/code> which matches start or end of a word. Thus,<\/p>\n\n<pre><code>'mislocated cat, vindicating'.gsub(\/\\bcat\\b\/, 'dog')\n=&gt; \"mislocated dog, vindicating\"\n<\/code><\/pre>\n\n<p>In Ruby, unlike some other languages like Javascript, word boundaries are UTF-8-compatible, so you can use it for languages with non-Latin or extended Latin alphabets:<\/p>\n\n<pre><code>'\u0441\u0456\u043b\u044c \u0443 \u043a\u0438\u0441\u0456\u043b\u044c, \u0434\u043b\u044f \u0432\u0435\u0441\u0456\u043b\u044c'.gsub(\/\\b\u0441\u0456\u043b\u044c\\b\/, '\u0446\u0443\u043a\u043e\u0440')\n=&gt; \"\u0446\u0443\u043a\u043e\u0440 \u0443 \u043a\u0438\u0441\u0456\u043b\u044c, \u0434\u043b\u044f \u0432\u0435\u0441\u0456\u043b\u044c\"\n<\/code><\/pre>\n"},{"owner":{"account_id":108496,"reputation":13278,"user_id":287948,"user_type":"registered","accept_rate":64,"profile_image":"https:\/\/i.stack.imgur.com\/ZrS4x.png?s=256&g=1","display_name":"Peter Krauss","link":"https:\/\/stackoverflow.com\/users\/287948\/peter-krauss"},"is_accepted":false,"community_owned_date":1641226681.0,"score":163,"last_activity_date":1644762067,"last_edit_date":1644762067.0,"creation_date":1388928525,"answer_id":20934099,"question_id":13113096,"content_license":"CC BY-SA 4.0","body_markdown":"&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ((this is a Wiki!  please edit to enhance!))\r\n\r\nTry also the old syntax for casting,\r\n\r\n    SELECT ROUND( AVG(some_column)::numeric, 2 ) FROM table;\r\n\r\nworks with any version of PostgreSQL.&lt;br\/&gt; ...But, as definitive solution, you can [overload](https:\/\/en.wikipedia.org\/wiki\/Function_overloading) the ROUND function.\r\n\r\n## Overloading as casting strategy\r\n\r\n```sql\r\nCREATE FUNCTION ROUND(float,int) RETURNS NUMERIC AS $f$\r\n  SELECT ROUND( CAST($1 AS numeric), $2 )\r\n$f$ language SQL IMMUTABLE;\r\n```\r\n\r\nNow your instruction will works fine, try this complete comparison:\r\n\r\n```sql\r\nSELECT trunc(n,3), round(n,3) n_round, round(f,3) f_round,\r\n       pg_typeof(n) n_type, pg_typeof(f) f_type, pg_typeof(round(f,3)) f_round_type\r\nFROM (SELECT 2.0\/3.0, 2\/3::float) t(n,f);\r\n```\r\n\r\ntrunc | n_round | f_round | n_type  |      f_type      | f_round_type \r\n------|---------|---------|---------|-----------------|------------\r\n0.666 |   0.667 |   0.667 | numeric | double precision | numeric\r\n\r\nThe *ROUND(float,int)* function is `f_round`, it returns a (decimal) NUMERIC datatype, that is fine for some applications: problem solved!\r\n\r\nIn another applications we need a float also as result.  An alternative is to use `round(f,3)::float`  or to create a `round_tofloat()` function.\r\nOther alternative, overloading `ROUND` function again,  and using all range of [**accuracy-precision**](https:\/\/en.wikipedia.org\/wiki\/Accuracy_and_precision) of a floating point number, is to return a float when the accuracy is defined (see [IanKenney&#39;s answer](https:\/\/stackoverflow.com\/a\/16246957\/287948)),\r\n\r\n```sql\r\nCREATE FUNCTION ROUND(\r\n  input float,     -- the input number\r\n  accuracy float   -- accuracy, the &quot;counting unit&quot;\r\n) RETURNS float AS $f$\r\n   SELECT ROUND($1\/accuracy)*accuracy\r\n$f$ language SQL IMMUTABLE;\r\n```\r\nTry\r\n```sql\r\n  SELECT round(21.04, 0.05);     -- 21.05 float!\r\n  SELECT round(21.04, 5::float); -- 20\r\n  SELECT round(1\/3., 0.0001);    -- 0.3333\r\n  SELECT round(2.8+1\/3., 0.5);   -- 3.15\r\n  SELECT round(pi(), 0.0001);    -- 3.1416\r\n```\r\nPS: the command `\\df round`, on `psql`  after overloadings, will show something like this table\r\n\r\n&lt;pre&gt;\r\n Schema     |  Name | Result  | Argument  \r\n------------+-------+---------+------------------\r\n myschema   | round | numeric | float, int\r\n myschema   | round | float   | float, float\r\n pg_catalog | round | float   | float            \r\n pg_catalog | round | numeric | numeric   \r\n pg_catalog | round | numeric | numeric, int          \r\n&lt;\/pre&gt;\r\nwhere *float* is synonymous of `double precision` and *myschema* is `public` when you not use a schema.  The `pg_catalog` functions are the default ones, see at Guide the [build-in math functions](https:\/\/www.postgresql.org\/docs\/current\/functions-math.html).\r\n\r\n## Rounding and formating\r\n\r\nThe `to_char` function apply internally the *round* procedure, so, when your aim is only to show a final result in the terminal, you can use the [`FM` modifier](\r\nhttps:\/\/www.postgresql.org\/docs\/current\/functions-formatting.html#FUNCTIONS-FORMATTING-NUMERIC-TABLE) as a prefix to a numeric format pattern:\r\n\r\n```sql\r\nSELECT round(x::numeric,2), trunc(x::numeric,2), to_char(x, &#39;FM99.99&#39;)\r\nFROM (SELECT 2.0\/3) t(x);\r\n```\r\nround | trunc | to_char \r\n-------|-------|---------\r\n  0.67 |  0.66 | .67\r\n\r\n\r\n-----\r\n\r\n## NOTES\r\n\r\n### Cause of the problem\r\n\r\n**There are a lack of overloads** in some PostgreSQL functions, why (???):  I think &quot;it is a lack&quot; (!), but @CraigRinger, @Catcall and the PostgreSQL team agree about *&quot;pg&#39;s historic rationale&quot;*. \r\n\r\n### Note about performance and reuse\r\n\r\nThe build-in functions, such as ROUND of the pg_catalog, can be overloaded with no performance loss, when compared to direct cast encoding. Two precautions must be taken when implementing user-defined **cast functions for high performance**: \r\n\r\n* The `IMMUTABLE` clause is very important for code snippets like this, because, as said in the Guide: *&quot;allows the optimizer to pre-evaluate the function when a query calls it with constant arguments&quot;*\r\n\r\n* PLpgSQL is the preferred language, except for &quot;pure SQL&quot;. For [JIT optimizations](https:\/\/www.postgresql.org\/docs\/current\/jit-reason.html) (and sometimes for parallelism) `language SQL` can obtain  better optimizations. Is something like copy\/paste small piece of code instead of use a function call.\r\n\r\nConclusion: the above `ROUND(float,int)` function, after optimizations, **is so fast than** @CraigRinger&#39;s answer; it will compile to (exactly) the **same internal representation**. So, although it is not standard for PostgreSQL, it can be standard for your projects, by a centralized and reusable &quot;library of snippets&quot;, like  [pg_pubLib](https:\/\/github.com\/AddressForAll\/pg_pubLib-v1).\r\n\r\n--------\r\n\r\n### Round to the nth bit or other numeric representation\r\n\r\nSome people argue that it doesn&#39;t make sense for PostgreSQL to round  a number of float datatype, because **float is a binary representation**, it requires rounding the number of bits or its hexadecimal representation.\r\n \r\nWell, let&#39;s solve the problem, adding an exotic suggestion... The aim here is to  return a *float* type in another overloaded function,&lt;br\/&gt; &amp;nbsp; `ROUND(float, text, int) RETURNS float` &lt;br\/&gt;The `text` is to offer a choice between \r\n* `&#39;dec&#39;` for &quot;decimal representation&quot;, \r\n* `&#39;bin&#39;` for &quot;binary&quot; representation and \r\n* `&#39;hex&#39;` for hexadecimal representation.\r\n\r\nSo, in different representations we have a **different interpretation about the number of digits** to be rounded. Rounding a number *x* with an approximate shorter value, with less &quot;fractionary digits&quot; (tham its original *d* digits), will be  shorter when *d* is couting  binary digits instead decimal or hexadecimal.\r\n\r\nIt is not easy without C++, using &quot;pure SQL&quot;, but this code snippets will illustrate and can be used as workaround:\r\n\r\n\r\n```sql\r\n-- Looking for a round_bin() function! this is only a workaround:\r\nCREATE FUNCTION trunc_bin(x bigint, t int) RETURNS bigint AS $f$\r\n\tSELECT ((x::bit(64) &gt;&gt; t) &lt;&lt; t)::bigint;\r\n$f$ language SQL IMMUTABLE;\r\n \r\nCREATE FUNCTION ROUND(\r\n   x float, \r\n   xtype text,  -- &#39;bin&#39;, &#39;dec&#39; or &#39;hex&#39;\r\n   xdigits int DEFAULT 0\r\n) \r\nRETURNS FLOAT AS $f$\r\n    SELECT CASE\r\n       WHEN xtype NOT IN (&#39;dec&#39;,&#39;bin&#39;,&#39;hex&#39;) THEN &#39;NaN&#39;::float\r\n       WHEN xdigits=0 THEN ROUND(x)\r\n       WHEN xtype=&#39;dec&#39; THEN ROUND(x::numeric,xdigits)\r\n       ELSE (s1 ||&#39;.&#39;|| s2)::float\r\n      END\r\n    FROM (\r\n      SELECT s1,\r\n             lpad( \r\n               trunc_bin( s2::bigint, CASE WHEN xd&lt;bin_bits THEN bin_bits - xd ELSE 0 END )::text,\r\n               l2,\r\n               &#39;0&#39;\r\n             ) AS s2\r\n      FROM (\r\n        SELECT *, \r\n             (floor( log(2,s2::numeric) ) +1)::int AS bin_bits, -- most significant bit position\r\n             CASE WHEN xtype=&#39;hex&#39; THEN xdigits*4 ELSE xdigits END AS xd\r\n        FROM (\r\n          SELECT s[1] AS s1, s[2] AS s2, length(s[2]) AS l2\r\n          FROM (SELECT regexp_split_to_array(x::text,&#39;\\.&#39;)) t1a(s)\r\n        ) t1b\r\n      ) t1c\r\n    ) t2\r\n$f$ language SQL IMMUTABLE;\r\n```\r\n\r\nTry\r\n```sql\r\n SELECT round(1\/3.,&#39;dec&#39;,4);     -- 0.3333 float!\r\n SELECT round(2.8+1\/3.,&#39;dec&#39;,1); -- 3.1 float!\r\n SELECT round(2.8+1\/3.,&#39;dec&#39;);   -- ERROR, need to cast string \r\n SELECT round(2.8+1\/3.,&#39;dec&#39;::text); -- 3 float\r\n SELECT round(2.8+1\/3.,&#39;dec&#39;,0); -- 3 float\r\n\r\n SELECT round(2.8+1\/3.,&#39;hex&#39;,0); -- 3 float (no change)\r\n SELECT round(2.8+1\/3.,&#39;hex&#39;,1); -- 3.1266\r\n SELECT round(2.8+1\/3.,&#39;hex&#39;,3); -- 3.13331578486784\r\n\r\n SELECT round(2.8+1\/3.,&#39;bin&#39;,1);  -- 3.1125899906842625\r\n SELECT round(2.8+1\/3.,&#39;bin&#39;,6);  -- 3.1301821767286784\r\n SELECT round(2.8+1\/3.,&#39;bin&#39;,12); -- 3.13331578486784\r\n```\r\n\r\nAnd `\\df round` have also:\r\n\r\n```\r\n Schema     |  Name | Result  | Argument  \r\n------------+-------+---------+---------------\r\n myschema   | round | float   | x float, xtype text, xdigits int DEFAULT 0\r\n\r\n```","body":"<p>\u00a0 \u00a0 \u00a0 \u00a0 ((this is a Wiki!  please edit to enhance!))<\/p>\n<p>Try also the old syntax for casting,<\/p>\n<pre><code>SELECT ROUND( AVG(some_column)::numeric, 2 ) FROM table;\n<\/code><\/pre>\n<p>works with any version of PostgreSQL.<br\/> ...But, as definitive solution, you can <a href=\"https:\/\/en.wikipedia.org\/wiki\/Function_overloading\" rel=\"noreferrer\">overload<\/a> the ROUND function.<\/p>\n<h2>Overloading as casting strategy<\/h2>\n<pre class=\"lang-sql prettyprint-override\"><code>CREATE FUNCTION ROUND(float,int) RETURNS NUMERIC AS $f$\n  SELECT ROUND( CAST($1 AS numeric), $2 )\n$f$ language SQL IMMUTABLE;\n<\/code><\/pre>\n<p>Now your instruction will works fine, try this complete comparison:<\/p>\n<pre class=\"lang-sql prettyprint-override\"><code>SELECT trunc(n,3), round(n,3) n_round, round(f,3) f_round,\n       pg_typeof(n) n_type, pg_typeof(f) f_type, pg_typeof(round(f,3)) f_round_type\nFROM (SELECT 2.0\/3.0, 2\/3::float) t(n,f);\n<\/code><\/pre>\n<div class=\"s-table-container\">\n<table class=\"s-table\">\n<thead>\n<tr>\n<th>trunc<\/th>\n<th>n_round<\/th>\n<th>f_round<\/th>\n<th>n_type<\/th>\n<th>f_type<\/th>\n<th>f_round_type<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr>\n<td>0.666<\/td>\n<td>0.667<\/td>\n<td>0.667<\/td>\n<td>numeric<\/td>\n<td>double precision<\/td>\n<td>numeric<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<\/div>\n<p>The <em>ROUND(float,int)<\/em> function is <code>f_round<\/code>, it returns a (decimal) NUMERIC datatype, that is fine for some applications: problem solved!<\/p>\n<p>In another applications we need a float also as result.  An alternative is to use <code>round(f,3)::float<\/code>  or to create a <code>round_tofloat()<\/code> function.\nOther alternative, overloading <code>ROUND<\/code> function again,  and using all range of <a href=\"https:\/\/en.wikipedia.org\/wiki\/Accuracy_and_precision\" rel=\"noreferrer\"><strong>accuracy-precision<\/strong><\/a> of a floating point number, is to return a float when the accuracy is defined (see <a href=\"https:\/\/stackoverflow.com\/a\/16246957\/287948\">IanKenney's answer<\/a>),<\/p>\n<pre class=\"lang-sql prettyprint-override\"><code>CREATE FUNCTION ROUND(\n  input float,     -- the input number\n  accuracy float   -- accuracy, the &quot;counting unit&quot;\n) RETURNS float AS $f$\n   SELECT ROUND($1\/accuracy)*accuracy\n$f$ language SQL IMMUTABLE;\n<\/code><\/pre>\n<p>Try<\/p>\n<pre class=\"lang-sql prettyprint-override\"><code>  SELECT round(21.04, 0.05);     -- 21.05 float!\n  SELECT round(21.04, 5::float); -- 20\n  SELECT round(1\/3., 0.0001);    -- 0.3333\n  SELECT round(2.8+1\/3., 0.5);   -- 3.15\n  SELECT round(pi(), 0.0001);    -- 3.1416\n<\/code><\/pre>\n<p>PS: the command <code>\\df round<\/code>, on <code>psql<\/code>  after overloadings, will show something like this table<\/p>\n<pre>\n Schema     |  Name | Result  | Argument  \n------------+-------+---------+------------------\n myschema   | round | numeric | float, int\n myschema   | round | float   | float, float\n pg_catalog | round | float   | float            \n pg_catalog | round | numeric | numeric   \n pg_catalog | round | numeric | numeric, int          \n<\/pre>\n<p>where <em>float<\/em> is synonymous of <code>double precision<\/code> and <em>myschema<\/em> is <code>public<\/code> when you not use a schema.  The <code>pg_catalog<\/code> functions are the default ones, see at Guide the <a href=\"https:\/\/www.postgresql.org\/docs\/current\/functions-math.html\" rel=\"noreferrer\">build-in math functions<\/a>.<\/p>\n<h2>Rounding and formating<\/h2>\n<p>The <code>to_char<\/code> function apply internally the <em>round<\/em> procedure, so, when your aim is only to show a final result in the terminal, you can use the <a href=\"https:\/\/www.postgresql.org\/docs\/current\/functions-formatting.html#FUNCTIONS-FORMATTING-NUMERIC-TABLE\" rel=\"noreferrer\"><code>FM<\/code> modifier<\/a> as a prefix to a numeric format pattern:<\/p>\n<pre class=\"lang-sql prettyprint-override\"><code>SELECT round(x::numeric,2), trunc(x::numeric,2), to_char(x, 'FM99.99')\nFROM (SELECT 2.0\/3) t(x);\n<\/code><\/pre>\n<div class=\"s-table-container\">\n<table class=\"s-table\">\n<thead>\n<tr>\n<th>round<\/th>\n<th>trunc<\/th>\n<th>to_char<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr>\n<td>0.67<\/td>\n<td>0.66<\/td>\n<td>.67<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<\/div><hr \/>\n<h2>NOTES<\/h2>\n<h3>Cause of the problem<\/h3>\n<p><strong>There are a lack of overloads<\/strong> in some PostgreSQL functions, why (???):  I think &quot;it is a lack&quot; (!), but @CraigRinger, @Catcall and the PostgreSQL team agree about <em>&quot;pg's historic rationale&quot;<\/em>.<\/p>\n<h3>Note about performance and reuse<\/h3>\n<p>The build-in functions, such as ROUND of the pg_catalog, can be overloaded with no performance loss, when compared to direct cast encoding. Two precautions must be taken when implementing user-defined <strong>cast functions for high performance<\/strong>:<\/p>\n<ul>\n<li><p>The <code>IMMUTABLE<\/code> clause is very important for code snippets like this, because, as said in the Guide: <em>&quot;allows the optimizer to pre-evaluate the function when a query calls it with constant arguments&quot;<\/em><\/p>\n<\/li>\n<li><p>PLpgSQL is the preferred language, except for &quot;pure SQL&quot;. For <a href=\"https:\/\/www.postgresql.org\/docs\/current\/jit-reason.html\" rel=\"noreferrer\">JIT optimizations<\/a> (and sometimes for parallelism) <code>language SQL<\/code> can obtain  better optimizations. Is something like copy\/paste small piece of code instead of use a function call.<\/p>\n<\/li>\n<\/ul>\n<p>Conclusion: the above <code>ROUND(float,int)<\/code> function, after optimizations, <strong>is so fast than<\/strong> @CraigRinger's answer; it will compile to (exactly) the <strong>same internal representation<\/strong>. So, although it is not standard for PostgreSQL, it can be standard for your projects, by a centralized and reusable &quot;library of snippets&quot;, like  <a href=\"https:\/\/github.com\/AddressForAll\/pg_pubLib-v1\" rel=\"noreferrer\">pg_pubLib<\/a>.<\/p>\n<hr \/>\n<h3>Round to the nth bit or other numeric representation<\/h3>\n<p>Some people argue that it doesn't make sense for PostgreSQL to round  a number of float datatype, because <strong>float is a binary representation<\/strong>, it requires rounding the number of bits or its hexadecimal representation.<\/p>\n<p>Well, let's solve the problem, adding an exotic suggestion... The aim here is to  return a <em>float<\/em> type in another overloaded function,<br\/> \u00a0 <code>ROUND(float, text, int) RETURNS float<\/code> <br\/>The <code>text<\/code> is to offer a choice between<\/p>\n<ul>\n<li><code>'dec'<\/code> for &quot;decimal representation&quot;,<\/li>\n<li><code>'bin'<\/code> for &quot;binary&quot; representation and<\/li>\n<li><code>'hex'<\/code> for hexadecimal representation.<\/li>\n<\/ul>\n<p>So, in different representations we have a <strong>different interpretation about the number of digits<\/strong> to be rounded. Rounding a number <em>x<\/em> with an approximate shorter value, with less &quot;fractionary digits&quot; (tham its original <em>d<\/em> digits), will be  shorter when <em>d<\/em> is couting  binary digits instead decimal or hexadecimal.<\/p>\n<p>It is not easy without C++, using &quot;pure SQL&quot;, but this code snippets will illustrate and can be used as workaround:<\/p>\n<pre class=\"lang-sql prettyprint-override\"><code>-- Looking for a round_bin() function! this is only a workaround:\nCREATE FUNCTION trunc_bin(x bigint, t int) RETURNS bigint AS $f$\n    SELECT ((x::bit(64) &gt;&gt; t) &lt;&lt; t)::bigint;\n$f$ language SQL IMMUTABLE;\n \nCREATE FUNCTION ROUND(\n   x float, \n   xtype text,  -- 'bin', 'dec' or 'hex'\n   xdigits int DEFAULT 0\n) \nRETURNS FLOAT AS $f$\n    SELECT CASE\n       WHEN xtype NOT IN ('dec','bin','hex') THEN 'NaN'::float\n       WHEN xdigits=0 THEN ROUND(x)\n       WHEN xtype='dec' THEN ROUND(x::numeric,xdigits)\n       ELSE (s1 ||'.'|| s2)::float\n      END\n    FROM (\n      SELECT s1,\n             lpad( \n               trunc_bin( s2::bigint, CASE WHEN xd&lt;bin_bits THEN bin_bits - xd ELSE 0 END )::text,\n               l2,\n               '0'\n             ) AS s2\n      FROM (\n        SELECT *, \n             (floor( log(2,s2::numeric) ) +1)::int AS bin_bits, -- most significant bit position\n             CASE WHEN xtype='hex' THEN xdigits*4 ELSE xdigits END AS xd\n        FROM (\n          SELECT s[1] AS s1, s[2] AS s2, length(s[2]) AS l2\n          FROM (SELECT regexp_split_to_array(x::text,'\\.')) t1a(s)\n        ) t1b\n      ) t1c\n    ) t2\n$f$ language SQL IMMUTABLE;\n<\/code><\/pre>\n<p>Try<\/p>\n<pre class=\"lang-sql prettyprint-override\"><code> SELECT round(1\/3.,'dec',4);     -- 0.3333 float!\n SELECT round(2.8+1\/3.,'dec',1); -- 3.1 float!\n SELECT round(2.8+1\/3.,'dec');   -- ERROR, need to cast string \n SELECT round(2.8+1\/3.,'dec'::text); -- 3 float\n SELECT round(2.8+1\/3.,'dec',0); -- 3 float\n\n SELECT round(2.8+1\/3.,'hex',0); -- 3 float (no change)\n SELECT round(2.8+1\/3.,'hex',1); -- 3.1266\n SELECT round(2.8+1\/3.,'hex',3); -- 3.13331578486784\n\n SELECT round(2.8+1\/3.,'bin',1);  -- 3.1125899906842625\n SELECT round(2.8+1\/3.,'bin',6);  -- 3.1301821767286784\n SELECT round(2.8+1\/3.,'bin',12); -- 3.13331578486784\n<\/code><\/pre>\n<p>And <code>\\df round<\/code> have also:<\/p>\n<pre><code> Schema     |  Name | Result  | Argument  \n------------+-------+---------+---------------\n myschema   | round | float   | x float, xtype text, xdigits int DEFAULT 0\n\n<\/code><\/pre>\n"},{"owner":{"account_id":371521,"reputation":4547,"user_id":720097,"user_type":"registered","accept_rate":88,"profile_image":"https:\/\/www.gravatar.com\/avatar\/fe923df72209d178abe0de3c3bcf147c?s=256&d=identicon&r=PG","display_name":"Alexander.Iljushkin","link":"https:\/\/stackoverflow.com\/users\/720097\/alexander-iljushkin"},"is_accepted":false,"community_owned_date":null,"score":163,"last_activity_date":1478093383,"last_edit_date":1478093383.0,"creation_date":1418398938,"answer_id":27447105,"question_id":10246023,"content_license":"CC BY-SA 3.0","body_markdown":"The reason is old rubygems. You need to update system part using non ssl source first:\r\n\r\n`gem update --system --source http:\/\/rubygems.org\/` (temporarily updating system part using non-ssl connection).\r\n\r\nNow you&#39;re ready to use `gem update`.","body":"<p>The reason is old rubygems. You need to update system part using non ssl source first:<\/p>\n\n<p><code>gem update --system --source http:\/\/rubygems.org\/<\/code> (temporarily updating system part using non-ssl connection).<\/p>\n\n<p>Now you're ready to use <code>gem update<\/code>.<\/p>\n"},{"owner":{"account_id":890337,"reputation":19080,"user_id":1007043,"user_type":"registered","accept_rate":54,"profile_image":"https:\/\/i.stack.imgur.com\/QQ2rK.gif?s=256&g=1","display_name":"gayavat","link":"https:\/\/stackoverflow.com\/users\/1007043\/gayavat"},"is_accepted":false,"community_owned_date":null,"score":162,"last_activity_date":1515684069,"last_edit_date":1515684069.0,"creation_date":1442576522,"answer_id":32651181,"question_id":6210572,"content_license":"CC BY-SA 3.0","body_markdown":"rails Hash has standard method for it:\r\n    \r\n    hash.transform_keys{ |key| key.to_s.upcase }\r\n\r\nhttp:\/\/api.rubyonrails.org\/classes\/Hash.html#method-i-transform_keys\r\n\r\nUPD: ruby 2.5 method","body":"<p>rails Hash has standard method for it:<\/p>\n\n<pre><code>hash.transform_keys{ |key| key.to_s.upcase }\n<\/code><\/pre>\n\n<p><a href=\"http:\/\/api.rubyonrails.org\/classes\/Hash.html#method-i-transform_keys\" rel=\"noreferrer\">http:\/\/api.rubyonrails.org\/classes\/Hash.html#method-i-transform_keys<\/a><\/p>\n\n<p>UPD: ruby 2.5 method<\/p>\n"},{"owner":{"account_id":43176,"reputation":2302,"user_id":126056,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/fbef9d8ef8a251e55ff58fbbd5d2054c?s=256&d=identicon&r=PG","display_name":"zgchurch","link":"https:\/\/stackoverflow.com\/users\/126056\/zgchurch"},"is_accepted":false,"community_owned_date":null,"score":159,"last_activity_date":1420406484,"last_edit_date":1420406484.0,"creation_date":1254862315,"answer_id":1528038,"question_id":1527888,"content_license":"CC BY-SA 3.0","body_markdown":"Are you sure it __needs__ to be an array? You may be able to use `respond_to?(method)` so your code would work for similar things that aren&#39;t necessarily arrays (maybe some other enumberable thing). If you do actually need an `array`, then the post describing the `Array#kind\\_of?` method is best.\r\n\r\n    [&#39;hello&#39;].respond_to?(&#39;each&#39;)","body":"<p>Are you sure it <strong>needs<\/strong> to be an array? You may be able to use <code>respond_to?(method)<\/code> so your code would work for similar things that aren't necessarily arrays (maybe some other enumberable thing). If you do actually need an <code>array<\/code>, then the post describing the <code>Array#kind\\_of?<\/code> method is best.<\/p>\n\n<pre><code>['hello'].respond_to?('each')\n<\/code><\/pre>\n"},{"owner":{"account_id":937336,"reputation":54171,"user_id":966023,"user_type":"registered","accept_rate":65,"profile_image":"https:\/\/www.gravatar.com\/avatar\/917fcb4327159076f752c0c3c3fddfbb?s=256&d=identicon&r=PG","display_name":"pguardiario","link":"https:\/\/stackoverflow.com\/users\/966023\/pguardiario"},"is_accepted":false,"community_owned_date":null,"score":154,"last_activity_date":1342167909,"last_edit_date":null,"creation_date":1342167909,"answer_id":11466770,"question_id":1078347,"content_license":"CC BY-SA 3.0","body_markdown":"For anyone not using rails:\r\n\r\n    number.to_s.reverse.gsub(\/(\\d{3})(?=\\d)\/, &#39;\\\\1,&#39;).reverse","body":"<p>For anyone not using rails:<\/p>\n\n<pre><code>number.to_s.reverse.gsub(\/(\\d{3})(?=\\d)\/, '\\\\1,').reverse\n<\/code><\/pre>\n"},{"owner":{"account_id":393154,"reputation":2583,"user_id":754877,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/63855f38f6bd1817fa9e4ab7ee06bf23?s=256&d=identicon&r=PG","display_name":"Olivier L.","link":"https:\/\/stackoverflow.com\/users\/754877\/olivier-l"},"is_accepted":true,"community_owned_date":null,"score":153,"last_activity_date":1476726725,"last_edit_date":1476726725.0,"creation_date":1305517841,"answer_id":6013004,"question_id":6012930,"content_license":"CC BY-SA 3.0","body_markdown":"I believe my answer covers your new concerns about handling any type of line endings since both `&quot;\\r\\n&quot;` and `&quot;\\r&quot;` are converted to Linux standard `&quot;\\n&quot;` before parsing the lines.\r\n\r\nTo support the `&quot;\\r&quot;` EOL character along with the regular `&quot;\\n&quot;`, and `&quot;\\r\\n&quot;` from Windows, here&#39;s what I would do:\r\n\r\n    line_num=0\r\n    text=File.open(&#39;xxx.txt&#39;).read\r\n    text.gsub!(\/\\r\\n?\/, &quot;\\n&quot;)\r\n    text.each_line do |line|\r\n      print &quot;#{line_num += 1} #{line}&quot;\r\n    end\r\n\r\nOf course this could be a bad idea on very large files since it means loading the whole file into memory.","body":"<p>I believe my answer covers your new concerns about handling any type of line endings since both <code>\"\\r\\n\"<\/code> and <code>\"\\r\"<\/code> are converted to Linux standard <code>\"\\n\"<\/code> before parsing the lines.<\/p>\n\n<p>To support the <code>\"\\r\"<\/code> EOL character along with the regular <code>\"\\n\"<\/code>, and <code>\"\\r\\n\"<\/code> from Windows, here's what I would do:<\/p>\n\n<pre><code>line_num=0\ntext=File.open('xxx.txt').read\ntext.gsub!(\/\\r\\n?\/, \"\\n\")\ntext.each_line do |line|\n  print \"#{line_num += 1} #{line}\"\nend\n<\/code><\/pre>\n\n<p>Of course this could be a bad idea on very large files since it means loading the whole file into memory.<\/p>\n"},{"owner":{"account_id":254529,"reputation":9148,"user_id":534003,"user_type":"registered","accept_rate":70,"profile_image":"https:\/\/www.gravatar.com\/avatar\/265bea2333a145d26bb43af03d818135?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"csi","link":"https:\/\/stackoverflow.com\/users\/534003\/csi"},"is_accepted":false,"community_owned_date":null,"score":150,"last_activity_date":1549390388,"last_edit_date":1549390388.0,"creation_date":1449003209,"answer_id":34029938,"question_id":7098602,"content_license":"CC BY-SA 4.0","body_markdown":"For **Rails 4+**, use [`change_column_default`][1]\r\n\r\n    def change\r\n      change_column_default :table, :column, value\r\n    end\r\n\r\n\r\n  [1]: http:\/\/apidock.com\/rails\/ActiveRecord\/ConnectionAdapters\/SchemaStatements\/change_column_default","body":"<p>For <strong>Rails 4+<\/strong>, use <a href=\"http:\/\/apidock.com\/rails\/ActiveRecord\/ConnectionAdapters\/SchemaStatements\/change_column_default\" rel=\"noreferrer\"><code>change_column_default<\/code><\/a><\/p>\n\n<pre><code>def change\n  change_column_default :table, :column, value\nend\n<\/code><\/pre>\n"},{"owner":{"account_id":2690239,"reputation":1584,"user_id":2323731,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/7bdb590314b750987fe5d26278fc8044?s=256&d=identicon&r=PG","display_name":"antonpaisov","link":"https:\/\/stackoverflow.com\/users\/2323731\/antonpaisov"},"is_accepted":false,"community_owned_date":null,"score":148,"last_activity_date":1547067819,"last_edit_date":null,"creation_date":1547067819,"answer_id":54118329,"question_id":47026174,"content_license":"CC BY-SA 4.0","body_markdown":"    gem update --system\r\n\r\nwill update the rubygems and will fix the problem.","body":"<pre><code>gem update --system\n<\/code><\/pre>\n\n<p>will update the rubygems and will fix the problem.<\/p>\n"},{"owner":{"account_id":201468,"reputation":7689,"user_id":447934,"user_type":"registered","accept_rate":74,"profile_image":"https:\/\/www.gravatar.com\/avatar\/0f5f97443bdc1acd60990006fb0c946a?s=256&d=identicon&r=PG","display_name":"Josh Kovach","link":"https:\/\/stackoverflow.com\/users\/447934\/josh-kovach"},"is_accepted":false,"community_owned_date":null,"score":147,"last_activity_date":1382042198,"last_edit_date":null,"creation_date":1382042198,"answer_id":19436763,"question_id":2978922,"content_license":"CC BY-SA 3.0","body_markdown":"I&#39;ve found `=~` to be unpredictable and it has failed for no apparent reason. Past 2.14, you should probably use\r\n\r\n    expect([1, 2, 3]).to match_array([2, 3, 1])","body":"<p>I've found <code>=~<\/code> to be unpredictable and it has failed for no apparent reason. Past 2.14, you should probably use<\/p>\n\n<pre><code>expect([1, 2, 3]).to match_array([2, 3, 1])\n<\/code><\/pre>\n"},{"owner":{"account_id":1776153,"reputation":2108,"user_id":1846073,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/cfa52c8a9c7d545a7dae0d1683949627?s=256&d=identicon&r=PG","display_name":"abo-elleef","link":"https:\/\/stackoverflow.com\/users\/1846073\/abo-elleef"},"is_accepted":false,"community_owned_date":null,"score":147,"last_activity_date":1694587409,"last_edit_date":1694587409.0,"creation_date":1384720662,"answer_id":20035869,"question_id":1509915,"content_license":"CC BY-SA 4.0","body_markdown":"You can use \r\n\r\n    &quot;CamelCasedName&quot;.tableize.singularize\r\n\r\nOr just\r\n\r\n    &quot;CamelCasedName&quot;.underscore\r\n\r\nBoth options ways will yield `&quot;camel_cased_name&quot;`. You can check more details it [here][1].\r\n\r\nYou need to require `active_support\/inflector` for it to work (see comments).\r\n\r\n  [1]: http:\/\/api.rubyonrails.org\/classes\/String.html#method-i-underscore","body":"<p>You can use<\/p>\n<pre><code>&quot;CamelCasedName&quot;.tableize.singularize\n<\/code><\/pre>\n<p>Or just<\/p>\n<pre><code>&quot;CamelCasedName&quot;.underscore\n<\/code><\/pre>\n<p>Both options ways will yield <code>&quot;camel_cased_name&quot;<\/code>. You can check more details it <a href=\"http:\/\/api.rubyonrails.org\/classes\/String.html#method-i-underscore\" rel=\"nofollow noreferrer\">here<\/a>.<\/p>\n<p>You need to require <code>active_support\/inflector<\/code> for it to work (see comments).<\/p>\n"},{"owner":{"account_id":4252288,"reputation":1431,"user_id":3478949,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/7b23eafe68ce17e53834b689a2d1e175?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"neteru","link":"https:\/\/stackoverflow.com\/users\/3478949\/neteru"},"is_accepted":false,"community_owned_date":null,"score":143,"last_activity_date":1563824791,"last_edit_date":1563824791.0,"creation_date":1414464449,"answer_id":26600110,"question_id":22544754,"content_license":"CC BY-SA 4.0","body_markdown":"In order to install compass On Mac OS X 10.10 (Yosemite)had to perform the following:\r\n\r\n**1. Set Up Ruby Environment**\r\n\r\n- Ensure ruby is installed and up to date: `ruby -v`\r\n- Update gem&#39;s `sudo gem update --system`\r\n\r\n**2. Set Up MAC Environment**\r\n\r\nInstall the **Xcode Command Line Tools** this is the key to install Compass. \r\n\r\n    xcode-select --install\r\n\r\nInstalling the Xcode Command Line Tools are the key to getting Compass working on OS X\r\n\r\n**3. Install Compass**\r\n\r\n    sudo gem install compass\r\n","body":"<p>In order to install compass On Mac OS X 10.10 (Yosemite)had to perform the following:<\/p>\n\n<p><strong>1. Set Up Ruby Environment<\/strong><\/p>\n\n<ul>\n<li>Ensure ruby is installed and up to date: <code>ruby -v<\/code><\/li>\n<li>Update gem's <code>sudo gem update --system<\/code><\/li>\n<\/ul>\n\n<p><strong>2. Set Up MAC Environment<\/strong><\/p>\n\n<p>Install the <strong>Xcode Command Line Tools<\/strong> this is the key to install Compass. <\/p>\n\n<pre><code>xcode-select --install\n<\/code><\/pre>\n\n<p>Installing the Xcode Command Line Tools are the key to getting Compass working on OS X<\/p>\n\n<p><strong>3. Install Compass<\/strong><\/p>\n\n<pre><code>sudo gem install compass\n<\/code><\/pre>\n"},{"owner":{"account_id":55331,"reputation":176273,"user_id":165673,"user_type":"registered","accept_rate":81,"profile_image":"https:\/\/www.gravatar.com\/avatar\/e43e620f96a26bf6ee7fa70750c0302a?s=256&d=identicon&r=PG","display_name":"Yarin","link":"https:\/\/stackoverflow.com\/users\/165673\/yarin"},"is_accepted":false,"community_owned_date":null,"score":142,"last_activity_date":1430231709,"last_edit_date":1592644375.0,"creation_date":1377198286,"answer_id":18388858,"question_id":8476627,"content_license":"CC BY-SA 4.0","body_markdown":"### `=&gt;` == **Hash Rocket**\n\nSeparates keys from values in a hash map literal.\n\n----------\n\n### `-&gt;` == **Dash Rocket**\nUsed to define a lambda literal in Ruby 1.9.X (without args) and Ruby 2.X (with args). The examples you give (`-&gt;(x) { x * 2 }` &amp; `lambda { |x| x * 2 }`) are in fact equivalent.","body":"<h3><code>=&gt;<\/code> == <strong>Hash Rocket<\/strong><\/h3>\n<p>Separates keys from values in a hash map literal.<\/p>\n<hr \/>\n<h3><code>-&gt;<\/code> == <strong>Dash Rocket<\/strong><\/h3>\n<p>Used to define a lambda literal in Ruby 1.9.X (without args) and Ruby 2.X (with args). The examples you give (<code>-&gt;(x) { x * 2 }<\/code> &amp; <code>lambda { |x| x * 2 }<\/code>) are in fact equivalent.<\/p>\n"},{"owner":{"account_id":96813,"reputation":12893,"user_id":262956,"user_type":"registered","accept_rate":97,"profile_image":"https:\/\/www.gravatar.com\/avatar\/7515cb5c8df2d07f6d3780346ec0da92?s=256&d=identicon&r=PG","display_name":"vise","link":"https:\/\/stackoverflow.com\/users\/262956\/vise"},"is_accepted":false,"community_owned_date":null,"score":140,"last_activity_date":1652418933,"last_edit_date":1652418933.0,"creation_date":1283329980,"answer_id":3616247,"question_id":3615700,"content_license":"CC BY-SA 4.0","body_markdown":"    [0, 132, 432, 342, 234][1..]\r\n    =&gt; [132, 432, 342, 234]\r\n\r\nSo unlike `shift` or `slice`, this returns a new array, keeping the original array untouched (useful for one liners).","body":"<pre><code>[0, 132, 432, 342, 234][1..]\n=&gt; [132, 432, 342, 234]\n<\/code><\/pre>\n<p>So unlike <code>shift<\/code> or <code>slice<\/code>, this returns a new array, keeping the original array untouched (useful for one liners).<\/p>\n"},{"owner":{"account_id":390108,"reputation":1599,"user_id":749954,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/36bc84732e5ba86674639660c214d420?s=256&d=identicon&r=PG","display_name":"Erik G.","link":"https:\/\/stackoverflow.com\/users\/749954\/erik-g"},"is_accepted":false,"community_owned_date":null,"score":140,"last_activity_date":1406805789,"last_edit_date":1406805789.0,"creation_date":1305178938,"answer_id":5973759,"question_id":4528101,"content_license":"CC BY-SA 3.0","body_markdown":"I ran into a similar problem when trying to use the JQuery generator for Rails 3\r\n\r\nI solved it like this:\r\n\r\n 1. **Get the CURL Certificate Authority (CA) bundle.** You can do this with:\r\n    - `sudo port install curl-ca-bundle` [if you are using MacPorts]\r\n    - or just pull it down directly `wget http:\/\/curl.haxx.se\/ca\/cacert.pem`\r\n    \r\n 2. Execute the ruby code that is trying to verify  the SSL certification: `SSL_CERT_FILE=\/opt\/local\/etc\/certs\/cacert.pem rails generate jquery:install`. In your case, you want to either set this as an environment variable somewhere the server picks it up or add something like `ENV[&#39;SSL_CERT_FILE&#39;] = \/path\/to\/your\/new\/cacert.pem` in your environment.rb file.\r\n\r\nYou can also just install the CA files (I haven&#39;t tried this) to the OS -- there are lengthy instructions [here](http:\/\/gagravarr.org\/writing\/openssl-certs\/others.shtml) -- this should work in a similar fashion, but I have not tried this personally.\r\n\r\nBasically, the issue you are hitting is that some web service is responding with a certificate signed against a CA that OpenSSL cannot verify.","body":"<p>I ran into a similar problem when trying to use the JQuery generator for Rails 3<\/p>\n\n<p>I solved it like this:<\/p>\n\n<ol>\n<li><p><strong>Get the CURL Certificate Authority (CA) bundle.<\/strong> You can do this with:<\/p>\n\n<ul>\n<li><code>sudo port install curl-ca-bundle<\/code> [if you are using MacPorts]<\/li>\n<li>or just pull it down directly <code>wget http:\/\/curl.haxx.se\/ca\/cacert.pem<\/code><\/li>\n<\/ul><\/li>\n<li><p>Execute the ruby code that is trying to verify  the SSL certification: <code>SSL_CERT_FILE=\/opt\/local\/etc\/certs\/cacert.pem rails generate jquery:install<\/code>. In your case, you want to either set this as an environment variable somewhere the server picks it up or add something like <code>ENV['SSL_CERT_FILE'] = \/path\/to\/your\/new\/cacert.pem<\/code> in your environment.rb file.<\/p><\/li>\n<\/ol>\n\n<p>You can also just install the CA files (I haven't tried this) to the OS -- there are lengthy instructions <a href=\"http:\/\/gagravarr.org\/writing\/openssl-certs\/others.shtml\">here<\/a> -- this should work in a similar fashion, but I have not tried this personally.<\/p>\n\n<p>Basically, the issue you are hitting is that some web service is responding with a certificate signed against a CA that OpenSSL cannot verify.<\/p>\n"},{"owner":{"account_id":3069,"reputation":36726,"user_id":4353,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/38becc6fc03453ccb1edfcdea1122408?s=256&d=identicon&r=PG","display_name":"htanata","link":"https:\/\/stackoverflow.com\/users\/4353\/htanata"},"is_accepted":false,"community_owned_date":null,"score":139,"last_activity_date":1447184018,"last_edit_date":1495540049.0,"creation_date":1377029020,"answer_id":18344044,"question_id":4528101,"content_license":"CC BY-SA 3.0","body_markdown":"If you&#39;re using RVM on OS X, you probably need to run this:\r\n\r\n    rvm osx-ssl-certs update all\r\n\r\nMore information here: http:\/\/rvm.io\/support\/fixing-broken-ssl-certificates\r\n\r\nAnd here is the full explanation: https:\/\/github.com\/wayneeseguin\/rvm\/blob\/master\/help\/osx-ssl-certs.md\r\n\r\n\r\n----------\r\n\r\n## Update ##\r\nOn Ruby 2.2, you may have to reinstall Ruby from source to fix this. Here&#39;s how (replace `2.2.3` with your Ruby version):\r\n\r\n    rvm reinstall 2.2.3 --disable-binary\r\n\r\nCredit to https:\/\/stackoverflow.com\/a\/32363597\/4353 and [Ian Connor][1].\r\n\r\n\r\n  [1]: https:\/\/stackoverflow.com\/users\/2063319\/ian-connor","body":"<p>If you're using RVM on OS X, you probably need to run this:<\/p>\n\n<pre><code>rvm osx-ssl-certs update all\n<\/code><\/pre>\n\n<p>More information here: <a href=\"http:\/\/rvm.io\/support\/fixing-broken-ssl-certificates\" rel=\"noreferrer\">http:\/\/rvm.io\/support\/fixing-broken-ssl-certificates<\/a><\/p>\n\n<p>And here is the full explanation: <a href=\"https:\/\/github.com\/wayneeseguin\/rvm\/blob\/master\/help\/osx-ssl-certs.md\" rel=\"noreferrer\">https:\/\/github.com\/wayneeseguin\/rvm\/blob\/master\/help\/osx-ssl-certs.md<\/a><\/p>\n\n<hr>\n\n<h2>Update<\/h2>\n\n<p>On Ruby 2.2, you may have to reinstall Ruby from source to fix this. Here's how (replace <code>2.2.3<\/code> with your Ruby version):<\/p>\n\n<pre><code>rvm reinstall 2.2.3 --disable-binary\n<\/code><\/pre>\n\n<p>Credit to <a href=\"https:\/\/stackoverflow.com\/a\/32363597\/4353\">https:\/\/stackoverflow.com\/a\/32363597\/4353<\/a> and <a href=\"https:\/\/stackoverflow.com\/users\/2063319\/ian-connor\">Ian Connor<\/a>.<\/p>\n"},{"owner":{"account_id":126136,"reputation":6353,"user_id":322418,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/340h4.jpg?s=256&g=1","display_name":"juanpaco","link":"https:\/\/stackoverflow.com\/users\/322418\/juanpaco"},"is_accepted":false,"community_owned_date":null,"score":138,"last_activity_date":1671842001,"last_edit_date":1671842001.0,"creation_date":1343165412,"answer_id":11639611,"question_id":143925,"content_license":"CC BY-SA 4.0","body_markdown":"This question is an old one, but it shows up at the top of Google when searching for how to run a single test.  I don&#39;t know if it&#39;s a recent addition, but to run a single test out of a spec you can do the following:\r\n\r\n    rspec path\/to\/spec:&lt;line number&gt;\r\n\r\nwhere -line number- is a line number that contains part of your test.  For example, if you had a spec like:\r\n\r\n    1: \r\n    2: it &quot;should be awesome&quot; do\r\n    3:   foo = 3\r\n    4:   foo.should eq(3)\r\n    5: end\r\n    6:\r\n\r\nLet&#39;s say it&#39;s saved in spec\/models\/foo_spec.rb.  Then you would run:\r\n\r\n    rspec spec\/models\/foo_spec.rb:2\r\n\r\nand it would just run that one spec.  In fact, that number could be anything from 2 to 5.","body":"<p>This question is an old one, but it shows up at the top of Google when searching for how to run a single test.  I don't know if it's a recent addition, but to run a single test out of a spec you can do the following:<\/p>\n<pre><code>rspec path\/to\/spec:&lt;line number&gt;\n<\/code><\/pre>\n<p>where -line number- is a line number that contains part of your test.  For example, if you had a spec like:<\/p>\n<pre><code>1: \n2: it &quot;should be awesome&quot; do\n3:   foo = 3\n4:   foo.should eq(3)\n5: end\n6:\n<\/code><\/pre>\n<p>Let's say it's saved in spec\/models\/foo_spec.rb.  Then you would run:<\/p>\n<pre><code>rspec spec\/models\/foo_spec.rb:2\n<\/code><\/pre>\n<p>and it would just run that one spec.  In fact, that number could be anything from 2 to 5.<\/p>\n"},{"owner":{"account_id":344795,"reputation":5403,"user_id":677322,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/e4c941f8a884c37a92a2a7084b3fca3d?s=256&d=identicon&r=PG","display_name":"ryanjones","link":"https:\/\/stackoverflow.com\/users\/677322\/ryanjones"},"is_accepted":false,"community_owned_date":null,"score":130,"last_activity_date":1490636402,"last_edit_date":1592644375.0,"creation_date":1316836947,"answer_id":7536952,"question_id":4528101,"content_license":"CC BY-SA 4.0","body_markdown":"Here&#39;s how you can fix it on Windows: https:\/\/gist.github.com\/867550 (created by Fletcher Nichol)\n\n*Excerpt:*\n\n&gt; ## The Manual Way (Boring)\n&gt;\n&gt; Download the `cacert.pem` file from http:\/\/curl.haxx.se\/ca\/cacert.pem. Save this file to `C:\\RailsInstaller\\cacert.pem`.\n&gt;\n&gt; Now make ruby aware of your certificate authority bundle by setting `SSL_CERT_FILE`. To set this in your current command prompt session, type:\n&gt;\n&gt;     set SSL_CERT_FILE=C:\\RailsInstaller\\cacert.pem\n&gt;\n&gt; To make this a permanent setting, add this in your [control panel](http:\/\/www.microsoft.com\/resources\/documentation\/windows\/xp\/all\/proddocs\/en-us\/environment_variables.mspx?mfr=true).","body":"<p>Here's how you can fix it on Windows: <a href=\"https:\/\/gist.github.com\/867550\" rel=\"noreferrer\">https:\/\/gist.github.com\/867550<\/a> (created by Fletcher Nichol)<\/p>\n<p><em>Excerpt:<\/em><\/p>\n<blockquote>\n<h2>The Manual Way (Boring)<\/h2>\n<p>Download the <code>cacert.pem<\/code> file from <a href=\"http:\/\/curl.haxx.se\/ca\/cacert.pem\" rel=\"noreferrer\">http:\/\/curl.haxx.se\/ca\/cacert.pem<\/a>. Save this file to <code>C:\\RailsInstaller\\cacert.pem<\/code>.<\/p>\n<p>Now make ruby aware of your certificate authority bundle by setting <code>SSL_CERT_FILE<\/code>. To set this in your current command prompt session, type:<\/p>\n<pre><code>set SSL_CERT_FILE=C:\\RailsInstaller\\cacert.pem\n<\/code><\/pre>\n<p>To make this a permanent setting, add this in your <a href=\"http:\/\/www.microsoft.com\/resources\/documentation\/windows\/xp\/all\/proddocs\/en-us\/environment_variables.mspx?mfr=true\" rel=\"noreferrer\">control panel<\/a>.<\/p>\n<\/blockquote>\n"},{"owner":{"account_id":195938,"reputation":1471,"user_id":439133,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/e8fd9b3a3ce5d4f334c5aa100031476e?s=256&d=identicon&r=PG","display_name":"SethRocker","link":"https:\/\/stackoverflow.com\/users\/439133\/sethrocker"},"is_accepted":false,"community_owned_date":null,"score":130,"last_activity_date":1454088658,"last_edit_date":1454088658.0,"creation_date":1332732924,"answer_id":9866308,"question_id":4418,"content_license":"CC BY-SA 3.0","body_markdown":"This totally worked:\r\n\r\n    gem install --http-proxy http:\/\/COMPANY.PROXY.ADDRESS $gem_name\r\n","body":"<p>This totally worked:<\/p>\n\n<pre><code>gem install --http-proxy http:\/\/COMPANY.PROXY.ADDRESS $gem_name\n<\/code><\/pre>\n"},{"owner":{"account_id":1323065,"reputation":1814,"user_id":1268459,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/i.stack.imgur.com\/0a0Gk.jpg?s=256&g=1","display_name":"Rendel","link":"https:\/\/stackoverflow.com\/users\/1268459\/rendel"},"is_accepted":false,"community_owned_date":null,"score":128,"last_activity_date":1571140877,"last_edit_date":null,"creation_date":1571140877,"answer_id":58394218,"question_id":31442214,"content_license":"CC BY-SA 4.0","body_markdown":"This happened when I upgraded to Catalina.\r\nI solved it by running:\r\n\r\n    sudo gem install -n \/usr\/local\/bin ruby\r\n    sudo gem install -n \/usr\/local\/bin cocoapods\r\n\r\n","body":"<p>This happened when I upgraded to Catalina.\nI solved it by running:<\/p>\n\n<pre><code>sudo gem install -n \/usr\/local\/bin ruby\nsudo gem install -n \/usr\/local\/bin cocoapods\n<\/code><\/pre>\n"},{"owner":{"account_id":1131966,"reputation":17561,"user_id":1117851,"user_type":"registered","accept_rate":94,"profile_image":"https:\/\/i.stack.imgur.com\/9FMVK.jpg?s=256&g=1","display_name":"itsnikolay","link":"https:\/\/stackoverflow.com\/users\/1117851\/itsnikolay"},"is_accepted":false,"community_owned_date":null,"score":127,"last_activity_date":1451043660,"last_edit_date":1451043660.0,"creation_date":1448623756,"answer_id":33956405,"question_id":30818391,"content_license":"CC BY-SA 3.0","body_markdown":"    brew link --force openssl\r\n\r\nThen:\r\n\r\n    gem install eventmachine\r\n\r\nIt also fixes:\r\n\r\n - gem install taks \r\n - bundle install \r\n - rake and rails tasks\r\n\r\nP.S. Probably you&#39;ll need to remove and run `brew install openssl` again\r\n\r\nThe issue happends because Apple had removed openssl from OSX (in El Captain build)\r\n\r\n ","body":"<pre><code>brew link --force openssl\n<\/code><\/pre>\n\n<p>Then:<\/p>\n\n<pre><code>gem install eventmachine\n<\/code><\/pre>\n\n<p>It also fixes:<\/p>\n\n<ul>\n<li>gem install taks <\/li>\n<li>bundle install <\/li>\n<li>rake and rails tasks<\/li>\n<\/ul>\n\n<p>P.S. Probably you'll need to remove and run <code>brew install openssl<\/code> again<\/p>\n\n<p>The issue happends because Apple had removed openssl from OSX (in El Captain build)<\/p>\n"},{"owner":{"account_id":4505,"reputation":12689,"user_id":6805,"user_type":"registered","accept_rate":87,"profile_image":"https:\/\/www.gravatar.com\/avatar\/12d6a2e5971e661ee2bf2994526e848d?s=256&d=identicon&r=PG","display_name":"srboisvert","link":"https:\/\/stackoverflow.com\/users\/6805\/srboisvert"},"is_accepted":false,"community_owned_date":1261113562.0,"score":125,"last_activity_date":1221485162,"last_edit_date":null,"creation_date":1221485162,"answer_id":62846,"question_id":55574,"content_license":"CC BY-SA 2.5","body_markdown":"Beware, the rails world is a massively frustrating mess of outdated and inconsistent documentation and examples.  It is maybe one of the fastest moving and most faddish development communities there is.  By the time you learn something it will already have changed.  Even the books are not consistent in which version of rails they are talking about.  Documentation by blogging!  enough said.  \r\n\r\nI currently do RoR on windows.  My advice is to avoid windows if you can.  Lots of things don&#39;t work and the rails community really really doesn&#39;t care about you.  The move to Git has really messed me up since it doesn&#39;t work very well on windows.  A lot of gems will fail because of this (Heroku looks like a cool tool - too bad for me it can&#39;t handle window&#39;s Git setup).  Capistrano is out.  It goes on and annoyingly on.\r\n\r\nPlus, in the back of your mind, you always wonder when something doesn&#39;t work &quot;Is it a rails\/windows problem?&quot;  I am not sure this is solved by using linux because linux brings its own hassles like constantly having to upgrade all those different dependencies, etc...If that&#39;s the kind of thing you enjoy it might be an okay choice for you.  Those days of enjoying system fiddling are behind me and I just want to get on with doing my work.  I am planning on installing ubuntu on a home machine just so i can get familiar with things like capistrano so maybe my opinion will change.\r\n\r\nI&#39;d highly suggest if you are going to do rails dev for any amount of time you seriously consider getting a Mac.  If you value your time and sanity it will pay for itself almost instantly.  Depending on how you value your time 10 hours of debugging windows\/linux setup problems and you have spend as much as a Mac costs anyway.\r\n\r\nRails is a joy compared to what it replaces but it is a bit of a pain in that its proponents skip right past a lot of the boring but important stuff like documentation, compatibility issues and community building.  It is way more powerful than other frameworks like Django but I sometimes look over at the Django documentation and community and sigh like a guy with a wild sexy girlfriend looking at his friend&#39;s plain but sane and stable wife.  But then rails adds a feature and I go &quot;Ohhh shiny!&quot;\r\n\r\nIMO the Rails Screencasts are better than the Peepcode screencasts.  RubyPlus also has screencasts, mind you, they are bit rough around the edges.  BuildingWebApps has a free online course that starts doing screencasts halfway through.","body":"<p>Beware, the rails world is a massively frustrating mess of outdated and inconsistent documentation and examples.  It is maybe one of the fastest moving and most faddish development communities there is.  By the time you learn something it will already have changed.  Even the books are not consistent in which version of rails they are talking about.  Documentation by blogging!  enough said.  <\/p>\n\n<p>I currently do RoR on windows.  My advice is to avoid windows if you can.  Lots of things don't work and the rails community really really doesn't care about you.  The move to Git has really messed me up since it doesn't work very well on windows.  A lot of gems will fail because of this (Heroku looks like a cool tool - too bad for me it can't handle window's Git setup).  Capistrano is out.  It goes on and annoyingly on.<\/p>\n\n<p>Plus, in the back of your mind, you always wonder when something doesn't work \"Is it a rails\/windows problem?\"  I am not sure this is solved by using linux because linux brings its own hassles like constantly having to upgrade all those different dependencies, etc...If that's the kind of thing you enjoy it might be an okay choice for you.  Those days of enjoying system fiddling are behind me and I just want to get on with doing my work.  I am planning on installing ubuntu on a home machine just so i can get familiar with things like capistrano so maybe my opinion will change.<\/p>\n\n<p>I'd highly suggest if you are going to do rails dev for any amount of time you seriously consider getting a Mac.  If you value your time and sanity it will pay for itself almost instantly.  Depending on how you value your time 10 hours of debugging windows\/linux setup problems and you have spend as much as a Mac costs anyway.<\/p>\n\n<p>Rails is a joy compared to what it replaces but it is a bit of a pain in that its proponents skip right past a lot of the boring but important stuff like documentation, compatibility issues and community building.  It is way more powerful than other frameworks like Django but I sometimes look over at the Django documentation and community and sigh like a guy with a wild sexy girlfriend looking at his friend's plain but sane and stable wife.  But then rails adds a feature and I go \"Ohhh shiny!\"<\/p>\n\n<p>IMO the Rails Screencasts are better than the Peepcode screencasts.  RubyPlus also has screencasts, mind you, they are bit rough around the edges.  BuildingWebApps has a free online course that starts doing screencasts halfway through.<\/p>\n"},{"owner":{"account_id":1159048,"reputation":2317,"user_id":1138947,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/127dbda972fa7813155f19b7730ac7a5?s=256&d=identicon&r=PG","display_name":"stebooks","link":"https:\/\/stackoverflow.com\/users\/1138947\/stebooks"},"is_accepted":false,"community_owned_date":null,"score":124,"last_activity_date":1392226747,"last_edit_date":null,"creation_date":1392226747,"answer_id":21735420,"question_id":8015531,"content_license":"CC BY-SA 3.0","body_markdown":"I use:\r\n\r\n    disable-pry\r\n\r\nThis will keep the program running, but will keep it from continuing to stop execution. This is especially helpful when you are debugging in the console.","body":"<p>I use:<\/p>\n\n<pre><code>disable-pry\n<\/code><\/pre>\n\n<p>This will keep the program running, but will keep it from continuing to stop execution. This is especially helpful when you are debugging in the console.<\/p>\n"},{"owner":{"account_id":15203,"reputation":1884,"user_id":31891,"user_type":"registered","accept_rate":23,"profile_image":"https:\/\/www.gravatar.com\/avatar\/7fe3998d408459aad41632380c4b5337?s=256&d=identicon&r=PG","display_name":"Ken Mayer","link":"https:\/\/stackoverflow.com\/users\/31891\/ken-mayer"},"is_accepted":false,"community_owned_date":null,"score":122,"last_activity_date":1453046366,"last_edit_date":1453046366.0,"creation_date":1285978514,"answer_id":3843805,"question_id":1019939,"content_license":"CC BY-SA 3.0","body_markdown":"Here&#39;s a fine, simple approach that leverages `composed_of` (part of ActiveRecord, using the ValueObject pattern) and the Money gem \r\n\r\nYou&#39;ll need\r\n\r\n - The [Money gem][1] (version 4.1.0) \r\n - A model, for example `Product`\r\n - An `integer` column in your model (and database), for example `:price`\r\n\r\nWrite this in your `product.rb` file:\r\n\r\n    class Product &gt; ActiveRecord::Base\r\n\r\n      composed_of :price,\r\n                  :class_name =&gt; &#39;Money&#39;,\r\n                  :mapping =&gt; %w(price cents),\r\n                  :converter =&gt; Proc.new { |value| Money.new(value) }\r\n      # ...\r\n\r\n\r\nWhat you&#39;ll get:\r\n\r\n - Without any extra changes, all of your forms will show dollars and cents, but the internal representation is still just cents. The forms will accept values like &quot;$12,034.95&quot; and convert it for you. There&#39;s no need to add extra handlers or attributes to your model, or helpers in your view.\r\n - `product.price = &quot;$12.00&quot;` automatically converts to the Money class\r\n - `product.price.to_s` displays a decimal formatted number (&quot;1234.00&quot;)\r\n - `product.price.format` displays a properly formatted string for the currency\r\n - If you need to send cents (to a payment gateway that wants pennies), `product.price.cents.to_s`\r\n - Currency conversion for free\r\n\r\n  [1]: https:\/\/github.com\/RubyMoney\/money","body":"<p>Here's a fine, simple approach that leverages <code>composed_of<\/code> (part of ActiveRecord, using the ValueObject pattern) and the Money gem <\/p>\n\n<p>You'll need<\/p>\n\n<ul>\n<li>The <a href=\"https:\/\/github.com\/RubyMoney\/money\" rel=\"noreferrer\">Money gem<\/a> (version 4.1.0) <\/li>\n<li>A model, for example <code>Product<\/code><\/li>\n<li>An <code>integer<\/code> column in your model (and database), for example <code>:price<\/code><\/li>\n<\/ul>\n\n<p>Write this in your <code>product.rb<\/code> file:<\/p>\n\n<pre><code>class Product &gt; ActiveRecord::Base\n\n  composed_of :price,\n              :class_name =&gt; 'Money',\n              :mapping =&gt; %w(price cents),\n              :converter =&gt; Proc.new { |value| Money.new(value) }\n  # ...\n<\/code><\/pre>\n\n<p>What you'll get:<\/p>\n\n<ul>\n<li>Without any extra changes, all of your forms will show dollars and cents, but the internal representation is still just cents. The forms will accept values like \"$12,034.95\" and convert it for you. There's no need to add extra handlers or attributes to your model, or helpers in your view.<\/li>\n<li><code>product.price = \"$12.00\"<\/code> automatically converts to the Money class<\/li>\n<li><code>product.price.to_s<\/code> displays a decimal formatted number (\"1234.00\")<\/li>\n<li><code>product.price.format<\/code> displays a properly formatted string for the currency<\/li>\n<li>If you need to send cents (to a payment gateway that wants pennies), <code>product.price.cents.to_s<\/code><\/li>\n<li>Currency conversion for free<\/li>\n<\/ul>\n"},{"owner":{"account_id":119781,"reputation":40629,"user_id":311744,"user_type":"registered","accept_rate":45,"profile_image":"https:\/\/i.stack.imgur.com\/oZR4v.jpg?s=256&g=1","display_name":"Benjamin Crouzier","link":"https:\/\/stackoverflow.com\/users\/311744\/benjamin-crouzier"},"is_accepted":false,"community_owned_date":null,"score":121,"last_activity_date":1446458852,"last_edit_date":1446458852.0,"creation_date":1370603011,"answer_id":16982568,"question_id":753919,"content_license":"CC BY-SA 3.0","body_markdown":"If you want to [run a specific migration][1], do\r\n\r\n    $ rake db:migrate:up VERSION=20080906120000\r\n\r\nIf you want to run migrations [multiple times][2], do\r\n\r\n    # use the STEP parameter if you need to go more than one version back\r\n    $ rake db:migrate:redo STEP=3\r\n\r\nIf you want to run a **single** migration **multiple** times, do\r\n\r\n    # this is super useful\r\n    $ rake db:migrate:redo VERSION=20080906120000\r\n\r\n(you can find the version number in the filename of your migration)\r\n\r\n---\r\n**Edit:** You can also simply rename your migration file, Eg: \r\n\r\n`20151013131830_my_migration.rb` -&gt; `20151013131831_my_migration.rb`\r\n\r\nThen migrate normally, this will treat the migration as a new one (usefull if you want to migrate on a remote environment (such as staging) on which you have less control.\r\n\r\n**Edit 2**: You can also just nuke the migration entry in the database. Eg:\r\n\r\n    rails_c&gt; q = &quot;delete from schema_migrations where version = &#39;20151013131830&#39;&quot;\r\n    rails_c&gt; ActiveRecord::Base.connection.execute(q)\r\n\r\n`rake db:migrate` will then rerun the `up` method of the nuked migrations.\r\n\r\n  [1]: http:\/\/guides.rubyonrails.org\/migrations.html#running-specific-migrations\r\n  [2]: http:\/\/guides.rubyonrails.org\/migrations.html#rolling-back","body":"<p>If you want to <a href=\"http:\/\/guides.rubyonrails.org\/migrations.html#running-specific-migrations\" rel=\"noreferrer\">run a specific migration<\/a>, do<\/p>\n\n<pre><code>$ rake db:migrate:up VERSION=20080906120000\n<\/code><\/pre>\n\n<p>If you want to run migrations <a href=\"http:\/\/guides.rubyonrails.org\/migrations.html#rolling-back\" rel=\"noreferrer\">multiple times<\/a>, do<\/p>\n\n<pre><code># use the STEP parameter if you need to go more than one version back\n$ rake db:migrate:redo STEP=3\n<\/code><\/pre>\n\n<p>If you want to run a <strong>single<\/strong> migration <strong>multiple<\/strong> times, do<\/p>\n\n<pre><code># this is super useful\n$ rake db:migrate:redo VERSION=20080906120000\n<\/code><\/pre>\n\n<p>(you can find the version number in the filename of your migration)<\/p>\n\n<hr>\n\n<p><strong>Edit:<\/strong> You can also simply rename your migration file, Eg: <\/p>\n\n<p><code>20151013131830_my_migration.rb<\/code> -> <code>20151013131831_my_migration.rb<\/code><\/p>\n\n<p>Then migrate normally, this will treat the migration as a new one (usefull if you want to migrate on a remote environment (such as staging) on which you have less control.<\/p>\n\n<p><strong>Edit 2<\/strong>: You can also just nuke the migration entry in the database. Eg:<\/p>\n\n<pre><code>rails_c&gt; q = \"delete from schema_migrations where version = '20151013131830'\"\nrails_c&gt; ActiveRecord::Base.connection.execute(q)\n<\/code><\/pre>\n\n<p><code>rake db:migrate<\/code> will then rerun the <code>up<\/code> method of the nuked migrations.<\/p>\n"},{"owner":{"account_id":264231,"reputation":14200,"user_id":550349,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/i.stack.imgur.com\/QSyCs.jpg?s=256&g=1","display_name":"stef","link":"https:\/\/stackoverflow.com\/users\/550349\/stef"},"is_accepted":false,"community_owned_date":null,"score":120,"last_activity_date":1479460951,"last_edit_date":1479460951.0,"creation_date":1294011559,"answer_id":4581144,"question_id":4581075,"content_license":"CC BY-SA 3.0","body_markdown":"Net::HTTP is built into Ruby, but let&#39;s face it, often it&#39;s easier _not_ to use its cumbersome 1980s style and try a higher level alternative:\r\n\r\n - [HTTP Gem][1]\r\n - [HTTParty][2]\r\n - [RestClient][3]\r\n - [Excon][4]\r\n - [Feedjira ][5] (RSS only)\r\n\r\n\r\n  [1]: https:\/\/github.com\/httprb\/http\r\n  [2]: https:\/\/github.com\/jnunemaker\/httparty\r\n  [3]: https:\/\/github.com\/rest-client\/rest-client\r\n  [4]: https:\/\/github.com\/excon\/excon\r\n  [5]: https:\/\/github.com\/feedjira\/feedjira","body":"<p>Net::HTTP is built into Ruby, but let's face it, often it's easier <em>not<\/em> to use its cumbersome 1980s style and try a higher level alternative:<\/p>\n\n<ul>\n<li><a href=\"https:\/\/github.com\/httprb\/http\" rel=\"noreferrer\">HTTP Gem<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/jnunemaker\/httparty\" rel=\"noreferrer\">HTTParty<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/rest-client\/rest-client\" rel=\"noreferrer\">RestClient<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/excon\/excon\" rel=\"noreferrer\">Excon<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/feedjira\/feedjira\" rel=\"noreferrer\">Feedjira <\/a> (RSS only)<\/li>\n<\/ul>\n"},{"owner":{"account_id":105603,"reputation":1461,"user_id":281699,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/coz8Z.jpg?s=256&g=1","display_name":"chaserx","link":"https:\/\/stackoverflow.com\/users\/281699\/chaserx"},"is_accepted":false,"community_owned_date":null,"score":118,"last_activity_date":1380736988,"last_edit_date":null,"creation_date":1380736988,"answer_id":19143664,"question_id":10246023,"content_license":"CC BY-SA 3.0","body_markdown":"If you&#39;re on a mac and use a recent version of RVM (~1.20), the following command worked for me.\r\n\r\n    rvm osx-ssl-certs update","body":"<p>If you're on a mac and use a recent version of RVM (~1.20), the following command worked for me.<\/p>\n\n<pre><code>rvm osx-ssl-certs update\n<\/code><\/pre>\n"},{"owner":{"account_id":7068,"reputation":14616,"user_id":12086,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/6b22ceb4a9c1027e8345bc065dc7a14b?s=256&d=identicon&r=PG","display_name":"Aaron Hinni","link":"https:\/\/stackoverflow.com\/users\/12086\/aaron-hinni"},"is_accepted":false,"community_owned_date":null,"score":116,"last_activity_date":1222308163,"last_edit_date":null,"creation_date":1222308163,"answer_id":131096,"question_id":130948,"content_license":"CC BY-SA 2.5","body_markdown":"To avoid leaving the file open, it is best to pass a block to File.open.  This way, the file will be closed after the block executes.\r\n\r\n    contents = File.open(&#39;path-to-file.tar.gz&#39;, &#39;rb&#39;) { |f| f.read }","body":"<p>To avoid leaving the file open, it is best to pass a block to File.open.  This way, the file will be closed after the block executes.<\/p>\n\n<pre><code>contents = File.open('path-to-file.tar.gz', 'rb') { |f| f.read }\n<\/code><\/pre>\n"},{"owner":{"account_id":83642,"reputation":1161,"user_id":234344,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/c11cf79aeff906389e8eee80e3427376?s=256&d=identicon&r=PG","display_name":"jrgm","link":"https:\/\/stackoverflow.com\/users\/234344\/jrgm"},"is_accepted":false,"community_owned_date":null,"score":116,"last_activity_date":1381463545,"last_edit_date":1381463545.0,"creation_date":1261122521,"answer_id":1926904,"question_id":800122,"content_license":"CC BY-SA 3.0","body_markdown":"For the specific case of YAML in Ruby, if the keys begin with &#39;`:`&#39;, they will be automatically interned as symbols.\r\n\r\n&lt;pre&gt;\r\nrequire &#39;yaml&#39;\r\nrequire &#39;pp&#39;\r\nyaml_str = &quot;\r\nconnections:\r\n  - host: host1.example.com\r\n    port: 10000\r\n  - host: host2.example.com\r\n    port: 20000\r\n&quot;\r\nyaml_sym = &quot;\r\n:connections:\r\n  - :host: host1.example.com\r\n    :port: 10000\r\n  - :host: host2.example.com\r\n    :port: 20000\r\n&quot;\r\npp yaml_str = YAML.load(yaml_str)\r\nputs yaml_str.keys.first.class\r\npp yaml_sym = YAML.load(yaml_sym)\r\nputs yaml_sym.keys.first.class\r\n&lt;\/pre&gt;\r\n\r\nOutput:\r\n&lt;pre&gt;\r\n#  \/opt\/ruby-1.8.6-p287\/bin\/ruby ~\/test.rb\r\n{&quot;connections&quot;=&gt;\r\n  [{&quot;port&quot;=&gt;10000, &quot;host&quot;=&gt;&quot;host1.example.com&quot;},\r\n   {&quot;port&quot;=&gt;20000, &quot;host&quot;=&gt;&quot;host2.example.com&quot;}]}\r\nString\r\n{:connections=&gt;\r\n  [{:port=&gt;10000, :host=&gt;&quot;host1.example.com&quot;},\r\n   {:port=&gt;20000, :host=&gt;&quot;host2.example.com&quot;}]}\r\nSymbol\r\n&lt;\/pre&gt;\r\n","body":"<p>For the specific case of YAML in Ruby, if the keys begin with '<code>:<\/code>', they will be automatically interned as symbols.<\/p>\n\n<pre>\nrequire 'yaml'\nrequire 'pp'\nyaml_str = \"\nconnections:\n  - host: host1.example.com\n    port: 10000\n  - host: host2.example.com\n    port: 20000\n\"\nyaml_sym = \"\n:connections:\n  - :host: host1.example.com\n    :port: 10000\n  - :host: host2.example.com\n    :port: 20000\n\"\npp yaml_str = YAML.load(yaml_str)\nputs yaml_str.keys.first.class\npp yaml_sym = YAML.load(yaml_sym)\nputs yaml_sym.keys.first.class\n<\/pre>\n\n<p>Output:<\/p>\n\n<pre>\n#  \/opt\/ruby-1.8.6-p287\/bin\/ruby ~\/test.rb\n{\"connections\"=>\n  [{\"port\"=>10000, \"host\"=>\"host1.example.com\"},\n   {\"port\"=>20000, \"host\"=>\"host2.example.com\"}]}\nString\n{:connections=>\n  [{:port=>10000, :host=>\"host1.example.com\"},\n   {:port=>20000, :host=>\"host2.example.com\"}]}\nSymbol\n<\/pre>\n"},{"owner":{"account_id":42718,"reputation":5891,"user_id":124536,"user_type":"registered","accept_rate":43,"profile_image":"https:\/\/i.stack.imgur.com\/Nc0l0.jpg?s=256&g=1","display_name":"hurikhan77","link":"https:\/\/stackoverflow.com\/users\/124536\/hurikhan77"},"is_accepted":false,"community_owned_date":null,"score":116,"last_activity_date":1433838170,"last_edit_date":1433838170.0,"creation_date":1283347067,"answer_id":3618428,"question_id":3615700,"content_license":"CC BY-SA 3.0","body_markdown":"This is pretty neat:\r\n\r\n    head, *tail = [1, 2, 3, 4, 5]\r\n    #==&gt; head = 1, tail = [2, 3, 4, 5]\r\n\r\nAs written in the comments, there&#39;s an advantage of not mutating the original list.","body":"<p>This is pretty neat:<\/p>\n\n<pre><code>head, *tail = [1, 2, 3, 4, 5]\n#==&gt; head = 1, tail = [2, 3, 4, 5]\n<\/code><\/pre>\n\n<p>As written in the comments, there's an advantage of not mutating the original list.<\/p>\n"},{"owner":{"account_id":965869,"reputation":2541,"user_id":989306,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/ac84916008adfcf8132e86cd26b71b35?s=256&d=identicon&r=PG","display_name":"kimerseen","link":"https:\/\/stackoverflow.com\/users\/989306\/kimerseen"},"is_accepted":false,"community_owned_date":null,"score":116,"last_activity_date":1497799710,"last_edit_date":1497799710.0,"creation_date":1389970210,"answer_id":21188728,"question_id":5878697,"content_license":"CC BY-SA 3.0","body_markdown":"Here is what works for me:\r\n\r\n    [1, &quot;&quot;, 2, &quot;hello&quot;, nil].reject(&amp;:blank?)\r\n\r\noutput: \r\n\r\n    [1, 2, &quot;hello&quot;]","body":"<p>Here is what works for me:<\/p>\n\n<pre><code>[1, \"\", 2, \"hello\", nil].reject(&amp;:blank?)\n<\/code><\/pre>\n\n<p>output: <\/p>\n\n<pre><code>[1, 2, \"hello\"]\n<\/code><\/pre>\n"},{"owner":{"account_id":481416,"reputation":356200,"user_id":895245,"user_type":"registered","accept_rate":49,"profile_image":"https:\/\/i.stack.imgur.com\/5Powi.jpg?s=256&g=1","display_name":"Ciro Santilli OurBigBook.com","link":"https:\/\/stackoverflow.com\/users\/895245\/ciro-santilli-ourbigbook-com"},"is_accepted":false,"community_owned_date":null,"score":116,"last_activity_date":1474988493,"last_edit_date":1474988493.0,"creation_date":1414259936,"answer_id":26565471,"question_id":3672586,"content_license":"CC BY-SA 3.0","body_markdown":"**`require_relative` is a convenient subset of `require`**\r\n\r\n    require_relative(&#39;path&#39;)\r\n\r\nequals:\r\n\r\n    require(File.expand_path(&#39;path&#39;, File.dirname(__FILE__)))\r\n\r\nif `__FILE__` is defined, or it raises `LoadError` otherwise.\r\n\r\nThis implies that:\r\n\r\n-   `require_relative &#39;a&#39;` and `require_relative &#39;.\/a&#39;` require relative to the **current file** (`__FILE__`).\r\n\r\n    This is what you want to use when requiring inside your library, since you don&#39;t want the result to depend on the current directory of the caller.\r\n \r\n-   `eval(&#39;require_relative(&quot;a.rb&quot;)&#39;)` raises `LoadError` because `__FILE__` is not defined inside `eval`.\r\n\r\n    This is why you can&#39;t use `require_relative` in RSpec tests, which get `eval`ed. \r\n\r\nThe following operations are only possible with `require`:\r\n \r\n-   `require &#39;.\/a.rb&#39;` requires relative to the **current directory**\r\n\r\n-   `require &#39;a.rb&#39;` uses the search path (`$LOAD_PATH`) to require. It does not find files relative to current directory or path.\r\n\r\n    This is not possible with `require_relative` because the docs say that path search only happens when &quot;the filename does not resolve to an absolute path&quot; (i.e. starts with `\/` or `.\/` or `..\/`), which is always the case for `File.expand_path`.\r\n\r\nThe following operation is possible with both, but you will want to use `require` as it is shorter and more efficient:\r\n\r\n-   `require &#39;\/a.rb&#39;` and `require_relative &#39;\/a.rb&#39;` both require the absolute path.\r\n\r\n**Reading the source**\r\n\r\nWhen the docs are not clear, I recommend that you take a look at the sources (toggle source in the docs). In some cases, it helps to understand what is going on.\r\n\r\nrequire:\r\n\r\n    VALUE rb_f_require(VALUE obj, VALUE fname) {\r\n      return rb_require_safe(fname, rb_safe_level());\r\n    }\r\n\r\nrequire_relative:\r\n\r\n    VALUE rb_f_require_relative(VALUE obj, VALUE fname) {\r\n        VALUE base = rb_current_realfilepath();\r\n        if (NIL_P(base)) {\r\n            rb_loaderror(&quot;cannot infer basepath&quot;);\r\n        }\r\n        base = rb_file_dirname(base);\r\n        return rb_require_safe(rb_file_absolute_path(fname, base), rb_safe_level());\r\n    }\r\n\r\nThis allows us to conclude that\r\n\r\n    require_relative(&#39;path&#39;)\r\n\r\nis the same as:\r\n\r\n    require(File.expand_path(&#39;path&#39;, File.dirname(__FILE__)))\r\n\r\nbecause:\r\n\r\n    rb_file_absolute_path   =~ File.expand_path\r\n    rb_file_dirname1        =~ File.dirname\r\n    rb_current_realfilepath =~ __FILE__","body":"<p><strong><code>require_relative<\/code> is a convenient subset of <code>require<\/code><\/strong><\/p>\n\n<pre><code>require_relative('path')\n<\/code><\/pre>\n\n<p>equals:<\/p>\n\n<pre><code>require(File.expand_path('path', File.dirname(__FILE__)))\n<\/code><\/pre>\n\n<p>if <code>__FILE__<\/code> is defined, or it raises <code>LoadError<\/code> otherwise.<\/p>\n\n<p>This implies that:<\/p>\n\n<ul>\n<li><p><code>require_relative 'a'<\/code> and <code>require_relative '.\/a'<\/code> require relative to the <strong>current file<\/strong> (<code>__FILE__<\/code>).<\/p>\n\n<p>This is what you want to use when requiring inside your library, since you don't want the result to depend on the current directory of the caller.<\/p><\/li>\n<li><p><code>eval('require_relative(\"a.rb\")')<\/code> raises <code>LoadError<\/code> because <code>__FILE__<\/code> is not defined inside <code>eval<\/code>.<\/p>\n\n<p>This is why you can't use <code>require_relative<\/code> in RSpec tests, which get <code>eval<\/code>ed. <\/p><\/li>\n<\/ul>\n\n<p>The following operations are only possible with <code>require<\/code>:<\/p>\n\n<ul>\n<li><p><code>require '.\/a.rb'<\/code> requires relative to the <strong>current directory<\/strong><\/p><\/li>\n<li><p><code>require 'a.rb'<\/code> uses the search path (<code>$LOAD_PATH<\/code>) to require. It does not find files relative to current directory or path.<\/p>\n\n<p>This is not possible with <code>require_relative<\/code> because the docs say that path search only happens when \"the filename does not resolve to an absolute path\" (i.e. starts with <code>\/<\/code> or <code>.\/<\/code> or <code>..\/<\/code>), which is always the case for <code>File.expand_path<\/code>.<\/p><\/li>\n<\/ul>\n\n<p>The following operation is possible with both, but you will want to use <code>require<\/code> as it is shorter and more efficient:<\/p>\n\n<ul>\n<li><code>require '\/a.rb'<\/code> and <code>require_relative '\/a.rb'<\/code> both require the absolute path.<\/li>\n<\/ul>\n\n<p><strong>Reading the source<\/strong><\/p>\n\n<p>When the docs are not clear, I recommend that you take a look at the sources (toggle source in the docs). In some cases, it helps to understand what is going on.<\/p>\n\n<p>require:<\/p>\n\n<pre><code>VALUE rb_f_require(VALUE obj, VALUE fname) {\n  return rb_require_safe(fname, rb_safe_level());\n}\n<\/code><\/pre>\n\n<p>require_relative:<\/p>\n\n<pre><code>VALUE rb_f_require_relative(VALUE obj, VALUE fname) {\n    VALUE base = rb_current_realfilepath();\n    if (NIL_P(base)) {\n        rb_loaderror(\"cannot infer basepath\");\n    }\n    base = rb_file_dirname(base);\n    return rb_require_safe(rb_file_absolute_path(fname, base), rb_safe_level());\n}\n<\/code><\/pre>\n\n<p>This allows us to conclude that<\/p>\n\n<pre><code>require_relative('path')\n<\/code><\/pre>\n\n<p>is the same as:<\/p>\n\n<pre><code>require(File.expand_path('path', File.dirname(__FILE__)))\n<\/code><\/pre>\n\n<p>because:<\/p>\n\n<pre><code>rb_file_absolute_path   =~ File.expand_path\nrb_file_dirname1        =~ File.dirname\nrb_current_realfilepath =~ __FILE__\n<\/code><\/pre>\n"},{"owner":{"account_id":249407,"reputation":4679,"user_id":525415,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/b112a905411dcce228efe2ad725cb081?s=256&d=identicon&r=PG","display_name":"pvandenberk","link":"https:\/\/stackoverflow.com\/users\/525415\/pvandenberk"},"is_accepted":false,"community_owned_date":null,"score":115,"last_activity_date":1362052122,"last_edit_date":1495540040.0,"creation_date":1362050617,"answer_id":15134266,"question_id":4952980,"content_license":"CC BY-SA 3.0","body_markdown":"[ExiRe](https:\/\/stackoverflow.com\/users\/561626\/exire) wrote:\r\n\r\n&gt; Such behavior of ruby is really frustrating. I mean if you move\r\n&gt; to private section self.method then it is NOT private. But if \r\n&gt; you move it to class &lt;&lt; self then it suddenly works.\r\n&gt; It is just disgusting.\r\n\r\nConfusing it probably is, frustrating it may well be, but disgusting it is definitely not. \r\n\r\nIt makes perfect sense once you understand Ruby&#39;s object model and the corresponding [method lookup flow](http:\/\/phrogz.net\/RubyLibs\/RubyMethodLookupFlow.pdf), especially when taking into consideration that `private` is **NOT** an access\/visibility modifier, but actually a method call *(with the class as its recipient)* as discussed [here](https:\/\/stackoverflow.com\/questions\/8022986\/what-actually-occurs-when-stating-private-protected-in-ruby?rq=1)... there&#39;s no such thing as *&quot;a private section&quot;* in Ruby.\r\n\r\nTo define private **instance** methods, you call `private` on the instance&#39;s class to set the default visibility for subsequently defined methods to private... and hence it makes perfect sense to define private **class** methods by calling `private` on the class&#39;s class, ie. its metaclass.\r\n\r\nOther mainstream, self-proclaimed OO languages may give you a less confusing syntax, but you definitely trade that off against a confusing and less consistent *(inconsistent?)* object model without the power of Ruby&#39;s metaprogramming facilities.","body":"<p><a href=\"https:\/\/stackoverflow.com\/users\/561626\/exire\">ExiRe<\/a> wrote:<\/p>\n\n<blockquote>\n  <p>Such behavior of ruby is really frustrating. I mean if you move\n  to private section self.method then it is NOT private. But if \n  you move it to class &lt;&lt; self then it suddenly works.\n  It is just disgusting.<\/p>\n<\/blockquote>\n\n<p>Confusing it probably is, frustrating it may well be, but disgusting it is definitely not. <\/p>\n\n<p>It makes perfect sense once you understand Ruby's object model and the corresponding <a href=\"http:\/\/phrogz.net\/RubyLibs\/RubyMethodLookupFlow.pdf\" rel=\"noreferrer\">method lookup flow<\/a>, especially when taking into consideration that <code>private<\/code> is <strong>NOT<\/strong> an access\/visibility modifier, but actually a method call <em>(with the class as its recipient)<\/em> as discussed <a href=\"https:\/\/stackoverflow.com\/questions\/8022986\/what-actually-occurs-when-stating-private-protected-in-ruby?rq=1\">here<\/a>... there's no such thing as <em>\"a private section\"<\/em> in Ruby.<\/p>\n\n<p>To define private <strong>instance<\/strong> methods, you call <code>private<\/code> on the instance's class to set the default visibility for subsequently defined methods to private... and hence it makes perfect sense to define private <strong>class<\/strong> methods by calling <code>private<\/code> on the class's class, ie. its metaclass.<\/p>\n\n<p>Other mainstream, self-proclaimed OO languages may give you a less confusing syntax, but you definitely trade that off against a confusing and less consistent <em>(inconsistent?)<\/em> object model without the power of Ruby's metaprogramming facilities.<\/p>\n"},{"owner":{"account_id":264048,"reputation":2340,"user_id":550056,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/1732604c725e2ddd83c3ea85d9deb2a6?s=256&d=identicon&r=PG","display_name":"Niels Ganser","link":"https:\/\/stackoverflow.com\/users\/550056\/niels-ganser"},"is_accepted":false,"community_owned_date":null,"score":113,"last_activity_date":1563959784,"last_edit_date":1563959784.0,"creation_date":1389536054,"answer_id":21075654,"question_id":1261329,"content_license":"CC BY-SA 4.0","body_markdown":"[Edit July 2018]\r\n\r\nAll of the below still holds true in Ruby 2.5.1. From the [reference documentation](https:\/\/ruby-doc.org\/stdlib-2.5.1\/libdoc\/date\/rdoc\/DateTime.html):\r\n\r\n&gt; DateTime does not consider any leap seconds, does not track any summer time rules.\r\n\r\nWhat hasn&#39;t been noted in this thread before is one of the few advantages of `DateTime`: it is aware of calendar reforms whereas `Time` is not:\r\n\r\n&gt; [\u2026] Ruby&#39;s Time class implements a proleptic Gregorian calendar and has no concept of calendar reform [\u2026].\r\n\r\nThe reference documentation concludes with the recommendation to use `Time` when exclusively dealing with near-past, current or future dates\/times and only use `DateTime` when, for example, Shakespeare&#39;s birthday needs to be accurately converted: (emphasis added)\r\n\r\n&gt; **So when should you use DateTime in Ruby and when should you use Time? Almost certainly you&#39;ll want to use Time since your app is probably dealing with current dates and times.** However, if you need to deal with dates and times **in a historical context you&#39;ll want to use DateTime** [\u2026]. If you also have to deal with timezones then best of luck - just bear in mind that you&#39;ll probably be dealing with local solar times, since it wasn&#39;t until the 19th century that the introduction of the railways necessitated the need for Standard Time and eventually timezones.\r\n\r\n[\/Edit July 2018]\r\n\r\nAs of ruby 2.0, most of the information in the other answers is out of date.\r\n\r\nIn particular, `Time` is now practically unbound. It can be more or less than even 63 bits away from Epoch:\r\n\r\n    irb(main):001:0&gt; RUBY_VERSION\r\n    =&gt; &quot;2.0.0&quot;\r\n    irb(main):002:0&gt; Time.at(2**62-1).utc # within Integer range\r\n    =&gt; 146138514283-06-19 07:44:38 UTC\r\n    irb(main):003:0&gt; Time.at(2**128).utc # outside of Integer range\r\n    =&gt; 10783118943836478994022445751222-08-06 08:03:51 UTC\r\n    irb(main):004:0&gt; Time.at(-2**128).utc # outside of Integer range\r\n    =&gt; -10783118943836478994022445747283-05-28 15:55:44 UTC\r\n\r\nThe only consequence of using larger values should be performance, which is better when `Integer`s are used (vs. `Bignum`s (values outside of `Integer` range) or `Rational`s (when nanoseconds are tracked)):\r\n\r\n&gt; Since Ruby 1.9.2, Time implementation uses a signed 63 bit integer, Bignum or Rational. The integer is a number of nanoseconds since the Epoch which can represent 1823-11-12 to 2116-02-20. When Bignum or Rational is used (before 1823, after 2116, under nanosecond), Time works slower as when integer is used.\r\n(http:\/\/www.ruby-doc.org\/core-2.1.0\/Time.html)\r\n\r\nIn other words, as far as I understand, **`DateTime` no longer covers a wider range of potential values than `Time`**.\r\n\r\nIn addition, two previously unmentioned restrictions of `DateTime` should probably be noted:\r\n\r\n&gt; DateTime does not consider any leapseconds, does not track any summer time rules.\r\n(http:\/\/www.ruby-doc.org\/stdlib-2.1.0\/libdoc\/date\/rdoc\/Date.html#class-Date-label-DateTime)\r\n\r\nFirst, **`DateTime` has no concept of leap seconds:**\r\n\r\n    irb(main):001:0&gt; RUBY_VERSION\r\n    =&gt; &quot;2.0.0&quot;\r\n    irb(main):002:0&gt; require &quot;date&quot;\r\n    =&gt; true\r\n    irb(main):003:0&gt; t = Time.new(2012,6,30,23,59,60,0)\r\n    =&gt; 2012-06-30 23:59:60 +0000\r\n    irb(main):004:0&gt; dt = t.to_datetime; dt.to_s\r\n    =&gt; &quot;2012-06-30T23:59:59+00:00&quot;\r\n    irb(main):005:0&gt; t == dt.to_time\r\n    =&gt; false\r\n    irb(main):006:0&gt; t.to_i\r\n    =&gt; 1341100824\r\n    irb(main):007:0&gt; dt.to_time.to_i\r\n    =&gt; 1341100823\r\n\r\nFor the above example to work with `Time`, the OS needs to support leap seconds and timezone information needs to be set correctly, e.g. through `TZ=right\/UTC irb` (on many Unix systems).\r\n\r\nSecond, **`DateTime`** has very limited understanding of time zones and in particular **has no concept of daylight savings**. It pretty much handles time zones as simple UTC + X offsets:\r\n\r\n    irb(main):001:0&gt; RUBY_VERSION\r\n    =&gt; &quot;2.0.0&quot;\r\n    irb(main):002:0&gt; require &quot;date&quot;\r\n    =&gt; true\r\n    irb(main):003:0&gt; t = Time.local(2012,7,1)\r\n    =&gt; 2012-07-01 00:00:00 +0200\r\n    irb(main):004:0&gt; t.zone\r\n    =&gt; &quot;CEST&quot;\r\n    irb(main):005:0&gt; t.dst?\r\n    =&gt; true\r\n    irb(main):006:0&gt; dt = t.to_datetime; dt.to_s\r\n    =&gt; &quot;2012-07-01T00:00:00+02:00&quot;\r\n    irb(main):007:0&gt; dt.zone\r\n    =&gt; &quot;+02:00&quot;\r\n    irb(main):008:0&gt; dt.dst?\r\n    NoMethodError: undefined method `dst?&#39; for #&lt;DateTime:0x007f34ea6c3cb8&gt;\r\n\r\nThis may cause trouble when times are entered as DST and then converted into a non-DST time zone without keeping track of the correct offsets outside of `DateTime` itself (many operating systems may actually already take care of this for you).\r\n\r\nOverall, I&#39;d say that nowadays `Time` is the better choice for most applications.\r\n\r\nAlso note an important difference on addition: when you add a number to a Time object, it is counted in seconds, but when you add a number to a DateTime, it is counted in days.","body":"<p>[Edit July 2018]<\/p>\n\n<p>All of the below still holds true in Ruby 2.5.1. From the <a href=\"https:\/\/ruby-doc.org\/stdlib-2.5.1\/libdoc\/date\/rdoc\/DateTime.html\" rel=\"noreferrer\">reference documentation<\/a>:<\/p>\n\n<blockquote>\n  <p>DateTime does not consider any leap seconds, does not track any summer time rules.<\/p>\n<\/blockquote>\n\n<p>What hasn't been noted in this thread before is one of the few advantages of <code>DateTime<\/code>: it is aware of calendar reforms whereas <code>Time<\/code> is not:<\/p>\n\n<blockquote>\n  <p>[\u2026] Ruby's Time class implements a proleptic Gregorian calendar and has no concept of calendar reform [\u2026].<\/p>\n<\/blockquote>\n\n<p>The reference documentation concludes with the recommendation to use <code>Time<\/code> when exclusively dealing with near-past, current or future dates\/times and only use <code>DateTime<\/code> when, for example, Shakespeare's birthday needs to be accurately converted: (emphasis added)<\/p>\n\n<blockquote>\n  <p><strong>So when should you use DateTime in Ruby and when should you use Time? Almost certainly you'll want to use Time since your app is probably dealing with current dates and times.<\/strong> However, if you need to deal with dates and times <strong>in a historical context you'll want to use DateTime<\/strong> [\u2026]. If you also have to deal with timezones then best of luck - just bear in mind that you'll probably be dealing with local solar times, since it wasn't until the 19th century that the introduction of the railways necessitated the need for Standard Time and eventually timezones.<\/p>\n<\/blockquote>\n\n<p>[\/Edit July 2018]<\/p>\n\n<p>As of ruby 2.0, most of the information in the other answers is out of date.<\/p>\n\n<p>In particular, <code>Time<\/code> is now practically unbound. It can be more or less than even 63 bits away from Epoch:<\/p>\n\n<pre><code>irb(main):001:0&gt; RUBY_VERSION\n=&gt; \"2.0.0\"\nirb(main):002:0&gt; Time.at(2**62-1).utc # within Integer range\n=&gt; 146138514283-06-19 07:44:38 UTC\nirb(main):003:0&gt; Time.at(2**128).utc # outside of Integer range\n=&gt; 10783118943836478994022445751222-08-06 08:03:51 UTC\nirb(main):004:0&gt; Time.at(-2**128).utc # outside of Integer range\n=&gt; -10783118943836478994022445747283-05-28 15:55:44 UTC\n<\/code><\/pre>\n\n<p>The only consequence of using larger values should be performance, which is better when <code>Integer<\/code>s are used (vs. <code>Bignum<\/code>s (values outside of <code>Integer<\/code> range) or <code>Rational<\/code>s (when nanoseconds are tracked)):<\/p>\n\n<blockquote>\n  <p>Since Ruby 1.9.2, Time implementation uses a signed 63 bit integer, Bignum or Rational. The integer is a number of nanoseconds since the Epoch which can represent 1823-11-12 to 2116-02-20. When Bignum or Rational is used (before 1823, after 2116, under nanosecond), Time works slower as when integer is used.\n  (<a href=\"http:\/\/www.ruby-doc.org\/core-2.1.0\/Time.html\" rel=\"noreferrer\">http:\/\/www.ruby-doc.org\/core-2.1.0\/Time.html<\/a>)<\/p>\n<\/blockquote>\n\n<p>In other words, as far as I understand, <strong><code>DateTime<\/code> no longer covers a wider range of potential values than <code>Time<\/code><\/strong>.<\/p>\n\n<p>In addition, two previously unmentioned restrictions of <code>DateTime<\/code> should probably be noted:<\/p>\n\n<blockquote>\n  <p>DateTime does not consider any leapseconds, does not track any summer time rules.\n  (<a href=\"http:\/\/www.ruby-doc.org\/stdlib-2.1.0\/libdoc\/date\/rdoc\/Date.html#class-Date-label-DateTime\" rel=\"noreferrer\">http:\/\/www.ruby-doc.org\/stdlib-2.1.0\/libdoc\/date\/rdoc\/Date.html#class-Date-label-DateTime<\/a>)<\/p>\n<\/blockquote>\n\n<p>First, <strong><code>DateTime<\/code> has no concept of leap seconds:<\/strong><\/p>\n\n<pre><code>irb(main):001:0&gt; RUBY_VERSION\n=&gt; \"2.0.0\"\nirb(main):002:0&gt; require \"date\"\n=&gt; true\nirb(main):003:0&gt; t = Time.new(2012,6,30,23,59,60,0)\n=&gt; 2012-06-30 23:59:60 +0000\nirb(main):004:0&gt; dt = t.to_datetime; dt.to_s\n=&gt; \"2012-06-30T23:59:59+00:00\"\nirb(main):005:0&gt; t == dt.to_time\n=&gt; false\nirb(main):006:0&gt; t.to_i\n=&gt; 1341100824\nirb(main):007:0&gt; dt.to_time.to_i\n=&gt; 1341100823\n<\/code><\/pre>\n\n<p>For the above example to work with <code>Time<\/code>, the OS needs to support leap seconds and timezone information needs to be set correctly, e.g. through <code>TZ=right\/UTC irb<\/code> (on many Unix systems).<\/p>\n\n<p>Second, <strong><code>DateTime<\/code><\/strong> has very limited understanding of time zones and in particular <strong>has no concept of daylight savings<\/strong>. It pretty much handles time zones as simple UTC + X offsets:<\/p>\n\n<pre><code>irb(main):001:0&gt; RUBY_VERSION\n=&gt; \"2.0.0\"\nirb(main):002:0&gt; require \"date\"\n=&gt; true\nirb(main):003:0&gt; t = Time.local(2012,7,1)\n=&gt; 2012-07-01 00:00:00 +0200\nirb(main):004:0&gt; t.zone\n=&gt; \"CEST\"\nirb(main):005:0&gt; t.dst?\n=&gt; true\nirb(main):006:0&gt; dt = t.to_datetime; dt.to_s\n=&gt; \"2012-07-01T00:00:00+02:00\"\nirb(main):007:0&gt; dt.zone\n=&gt; \"+02:00\"\nirb(main):008:0&gt; dt.dst?\nNoMethodError: undefined method `dst?' for #&lt;DateTime:0x007f34ea6c3cb8&gt;\n<\/code><\/pre>\n\n<p>This may cause trouble when times are entered as DST and then converted into a non-DST time zone without keeping track of the correct offsets outside of <code>DateTime<\/code> itself (many operating systems may actually already take care of this for you).<\/p>\n\n<p>Overall, I'd say that nowadays <code>Time<\/code> is the better choice for most applications.<\/p>\n\n<p>Also note an important difference on addition: when you add a number to a Time object, it is counted in seconds, but when you add a number to a DateTime, it is counted in days.<\/p>\n"},{"owner":{"account_id":3670510,"reputation":5495,"user_id":3057843,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/b7289fe957e03f117eea22c0d7da6769?s=256&d=identicon&r=PG","display_name":"Mahattam","link":"https:\/\/stackoverflow.com\/users\/3057843\/mahattam"},"is_accepted":false,"community_owned_date":null,"score":112,"last_activity_date":1487929048,"last_edit_date":1487929048.0,"creation_date":1433843620,"answer_id":30728745,"question_id":4827092,"content_license":"CC BY-SA 3.0","body_markdown":"Issue is gem dependency so before installing pg make sure you have installed &quot;libpq-dev&quot;\r\n\r\nUbuntu systems:\r\n&gt; sudo apt-get install libpq-dev\r\n\r\nRHEL systems: \r\n&gt; yum install postgresql-devel\r\n\r\nMac: \r\n&gt; brew install postgresql","body":"<p>Issue is gem dependency so before installing pg make sure you have installed \"libpq-dev\"<\/p>\n\n<p>Ubuntu systems:<\/p>\n\n<blockquote>\n  <p>sudo apt-get install libpq-dev<\/p>\n<\/blockquote>\n\n<p>RHEL systems: <\/p>\n\n<blockquote>\n  <p>yum install postgresql-devel<\/p>\n<\/blockquote>\n\n<p>Mac: <\/p>\n\n<blockquote>\n  <p>brew install postgresql<\/p>\n<\/blockquote>\n"},{"owner":{"account_id":406661,"reputation":14974,"user_id":776301,"user_type":"registered","accept_rate":71,"profile_image":"https:\/\/i.stack.imgur.com\/KiY6b.png?s=256&g=1","display_name":"Haris Krajina","link":"https:\/\/stackoverflow.com\/users\/776301\/haris-krajina"},"is_accepted":false,"community_owned_date":null,"score":108,"last_activity_date":1645617533,"last_edit_date":1645617533.0,"creation_date":1366371529,"answer_id":16103755,"question_id":9336596,"content_license":"CC BY-SA 4.0","body_markdown":"To permanently resolve this just cut\/paste following line:\r\n\r\n`[[ -s &quot;$HOME\/.rvm\/scripts\/rvm&quot; ]] &amp;&amp; source &quot;$HOME\/.rvm\/scripts\/rvm&quot;`\r\n\r\nFrom: `~\/.bash_profile` file\r\n\r\nTo:   `~\/.bashrc` file\r\n\r\nReason this works is that `.bashrc` is executed each time you enter the terminal, and `.bash_profile` each time you login. That is why solution `\/bin\/bash --login` works, but you have to do that each time you enter the terminal. This way you are set until your next format, and you will forget all this by than :)","body":"<p>To permanently resolve this just cut\/paste following line:<\/p>\n<p><code>[[ -s &quot;$HOME\/.rvm\/scripts\/rvm&quot; ]] &amp;&amp; source &quot;$HOME\/.rvm\/scripts\/rvm&quot;<\/code><\/p>\n<p>From: <code>~\/.bash_profile<\/code> file<\/p>\n<p>To:   <code>~\/.bashrc<\/code> file<\/p>\n<p>Reason this works is that <code>.bashrc<\/code> is executed each time you enter the terminal, and <code>.bash_profile<\/code> each time you login. That is why solution <code>\/bin\/bash --login<\/code> works, but you have to do that each time you enter the terminal. This way you are set until your next format, and you will forget all this by than :)<\/p>\n"},{"owner":{"account_id":8829,"reputation":1094,"user_id":16068,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/78c9d54ecb8c753cdb8f634c30a76d80?s=256&d=identicon&r=PG","display_name":"user16068","link":"https:\/\/stackoverflow.com\/users\/16068\/user16068"},"is_accepted":true,"community_owned_date":null,"score":107,"last_activity_date":1221673523,"last_edit_date":null,"creation_date":1221673523,"answer_id":85759,"question_id":85699,"content_license":"CC BY-SA 2.5","body_markdown":"I would use a &#39;link&#39; concept for all future recurring events. They are dynamically displayed in the calendar and link back to a single reference object. When events have taken place the link is broken and the event becomes a standalone instance. If you attempt to edit a recurring event then prompt to change all future items (i.e. change single linked reference) or change just that instance (in which case convert this to a standalone instance and then make change). The latter cased is slightly problematic as you need to keep track in your recurring list of all future events that were converted to single instance. But, this is entirely do-able.\r\n\r\nSo, in essence, have 2 classes of events - single instances and recurring events.","body":"<p>I would use a 'link' concept for all future recurring events. They are dynamically displayed in the calendar and link back to a single reference object. When events have taken place the link is broken and the event becomes a standalone instance. If you attempt to edit a recurring event then prompt to change all future items (i.e. change single linked reference) or change just that instance (in which case convert this to a standalone instance and then make change). The latter cased is slightly problematic as you need to keep track in your recurring list of all future events that were converted to single instance. But, this is entirely do-able.<\/p>\n\n<p>So, in essence, have 2 classes of events - single instances and recurring events.<\/p>\n"},{"owner":{"account_id":4899,"reputation":103746,"user_id":7595,"user_type":"registered","accept_rate":70,"profile_image":"https:\/\/www.gravatar.com\/avatar\/99108829176dfbbc5d0bf3c041542a26?s=256&d=identicon&r=PG","display_name":"Pablo Fernandez","link":"https:\/\/stackoverflow.com\/users\/7595\/pablo-fernandez"},"is_accepted":false,"community_owned_date":null,"score":103,"last_activity_date":1487100005,"last_edit_date":1487100005.0,"creation_date":1271295326,"answer_id":2642196,"question_id":2642182,"content_license":"CC BY-SA 3.0","body_markdown":"Just a quick thing, that denotes the intent of descending order.\r\n\r\n    descending = -1\r\n    a.sort_by { |h| h[:bar] * descending }\r\n\r\n(Will think of a better way in the mean time) ;)\r\n\r\n---\r\n    a.sort_by { |h| h[:bar] }.reverse!","body":"<p>Just a quick thing, that denotes the intent of descending order.<\/p>\n\n<pre><code>descending = -1\na.sort_by { |h| h[:bar] * descending }\n<\/code><\/pre>\n\n<p>(Will think of a better way in the mean time) ;)<\/p>\n\n<hr>\n\n<pre><code>a.sort_by { |h| h[:bar] }.reverse!\n<\/code><\/pre>\n"},{"owner":{"account_id":7637316,"reputation":12844,"user_id":5790492,"user_type":"registered","accept_rate":73,"profile_image":"https:\/\/i.stack.imgur.com\/xfz6Q.jpg?s=256&g=1","display_name":"Nike Kov","link":"https:\/\/stackoverflow.com\/users\/5790492\/nike-kov"},"is_accepted":false,"community_owned_date":null,"score":103,"last_activity_date":1563398767,"last_edit_date":1592644375.0,"creation_date":1510230019,"answer_id":47201709,"question_id":47026174,"content_license":"CC BY-SA 4.0","body_markdown":"# Update:\n\nAccording @noraj&#39;s [answer][1] and @Niels Kristian&#39;s comment, the following command should do the job.\n\n```\ngem update --system\nbundle install\n```\n\n\n  [1]: https:\/\/stackoverflow.com\/a\/54083113\/5790492\n\n----\nI wrote this in case someone gets into an issue like mine.\n\n`gem install bundler` shows that everythings installs well.                                                                                                  \n\n    Fetching: bundler-1.16.0.gem (100%)\n    Successfully installed bundler-1.16.0\n    Parsing documentation for bundler-1.16.0\n    Installing ri documentation for bundler-1.16.0\n    Done installing documentation for bundler after 7 seconds\n    1 gem installed\n\n\nWhen I typed `bundle` there was an error:\n                                                                                                                 \n    \/Users\/nikkov\/.rvm\/gems\/ruby-2.4.0\/bin\/bundle:23:in `load&#39;: cannot load such file -- \/Users\/nikkov\/.rvm\/rubies\/ruby-2.4.0\/lib\/ruby\/gems\/2.4.0\/gems\/bundler-1.16.0\/exe\/bundle (LoadError)\n        from \/Users\/nikkov\/.rvm\/gems\/ruby-2.4.0\/bin\/bundle:23:in `&lt;main&gt;&#39;\n        from \/Users\/nikkov\/.rvm\/gems\/ruby-2.4.0\/bin\/ruby_executable_hooks:15:in `eval&#39;\n        from \/Users\/nikkov\/.rvm\/gems\/ruby-2.4.0\/bin\/ruby_executable_hooks:15:in `&lt;main&gt;&#39;\n\nAnd in the folder `\/Users\/nikkov\/.rvm\/rubies\/ruby-2.4.0\/lib\/ruby\/gems\/2.4.0\/gems\/` there wasn&#39;t a `bundler-1.16.0` folder. \n\n\n\nI **fixed** this with `sudo gem install bundler`","body":"<h1>Update:<\/h1>\n<p>According @noraj's <a href=\"https:\/\/stackoverflow.com\/a\/54083113\/5790492\">answer<\/a> and @Niels Kristian's comment, the following command should do the job.<\/p>\n<pre><code>gem update --system\nbundle install\n<\/code><\/pre>\n<hr \/>\n<p>I wrote this in case someone gets into an issue like mine.<\/p>\n<p><code>gem install bundler<\/code> shows that everythings installs well.<\/p>\n<pre><code>Fetching: bundler-1.16.0.gem (100%)\nSuccessfully installed bundler-1.16.0\nParsing documentation for bundler-1.16.0\nInstalling ri documentation for bundler-1.16.0\nDone installing documentation for bundler after 7 seconds\n1 gem installed\n<\/code><\/pre>\n<p>When I typed <code>bundle<\/code> there was an error:<\/p>\n<pre><code>\/Users\/nikkov\/.rvm\/gems\/ruby-2.4.0\/bin\/bundle:23:in `load': cannot load such file -- \/Users\/nikkov\/.rvm\/rubies\/ruby-2.4.0\/lib\/ruby\/gems\/2.4.0\/gems\/bundler-1.16.0\/exe\/bundle (LoadError)\n    from \/Users\/nikkov\/.rvm\/gems\/ruby-2.4.0\/bin\/bundle:23:in `&lt;main&gt;'\n    from \/Users\/nikkov\/.rvm\/gems\/ruby-2.4.0\/bin\/ruby_executable_hooks:15:in `eval'\n    from \/Users\/nikkov\/.rvm\/gems\/ruby-2.4.0\/bin\/ruby_executable_hooks:15:in `&lt;main&gt;'\n<\/code><\/pre>\n<p>And in the folder <code>\/Users\/nikkov\/.rvm\/rubies\/ruby-2.4.0\/lib\/ruby\/gems\/2.4.0\/gems\/<\/code> there wasn't a <code>bundler-1.16.0<\/code> folder.<\/p>\n<p>I <strong>fixed<\/strong> this with <code>sudo gem install bundler<\/code><\/p>\n"},{"owner":{"account_id":38695,"reputation":20249,"user_id":111243,"user_type":"registered","accept_rate":81,"profile_image":"https:\/\/www.gravatar.com\/avatar\/1b852c5986959201d1f8eca105491072?s=256&d=identicon&r=PG","display_name":"SimplGy","link":"https:\/\/stackoverflow.com\/users\/111243\/simplgy"},"is_accepted":false,"community_owned_date":null,"score":102,"last_activity_date":1365498004,"last_edit_date":1365498004.0,"creation_date":1302561542,"answer_id":5628378,"question_id":2512254,"content_license":"CC BY-SA 3.0","body_markdown":"This is my favorite method for being easy to read:\r\n\r\n    Dir.glob(&quot;*\/*.txt&quot;) do |my_text_file|\r\n      puts &quot;working on: #{my_text_file}...&quot;\r\n    end\r\n\r\nAnd you can even extend this to work on all files in subdirs:\t\r\n\r\n    Dir.glob(&quot;**\/*.txt&quot;) do |my_text_file| # note one extra &quot;*&quot;\r\n      puts &quot;working on: #{my_text_file}...&quot;\r\n    end\r\n","body":"<p>This is my favorite method for being easy to read:<\/p>\n\n<pre><code>Dir.glob(\"*\/*.txt\") do |my_text_file|\n  puts \"working on: #{my_text_file}...\"\nend\n<\/code><\/pre>\n\n<p>And you can even extend this to work on all files in subdirs:   <\/p>\n\n<pre><code>Dir.glob(\"**\/*.txt\") do |my_text_file| # note one extra \"*\"\n  puts \"working on: #{my_text_file}...\"\nend\n<\/code><\/pre>\n"},{"owner":{"account_id":205366,"reputation":6971,"user_id":454094,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/e17930ea83fcb45656a40da56d8a2cac?s=256&d=identicon&r=PG","display_name":"lime","link":"https:\/\/stackoverflow.com\/users\/454094\/lime"},"is_accepted":false,"community_owned_date":null,"score":102,"last_activity_date":1470742397,"last_edit_date":1470742397.0,"creation_date":1391725461,"answer_id":21615375,"question_id":6083219,"content_license":"CC BY-SA 3.0","body_markdown":"As the other answers state:\r\n\r\n - `count` will perform an SQL `COUNT` query\r\n - `length` will calculate the length of the resulting array\r\n - `size` will try to pick the most appropriate of the two to avoid excessive queries\r\n\r\nBut there is one more thing. We noticed a case where `size` acts differently to `count`\/`length`altogether, and I thought I&#39;d share it since it is rare enough to be overlooked.\r\n\r\n - If you use a `:counter_cache` on a `has_many` association, `size` will use the cached count directly, and not make an extra query at all.\r\n\r\n        class Image &lt; ActiveRecord::Base\r\n          belongs_to :product, counter_cache: true\r\n        end\r\n\r\n        class Product &lt; ActiveRecord::Base\r\n          has_many :images\r\n        end\r\n\r\n        &gt; product = Product.first  # query, load product into memory\r\n        &gt; product.images.size      # no query, reads the :images_count column\r\n        &gt; product.images.count     # query, SQL COUNT\r\n        &gt; product.images.length    # query, loads images into memory\r\n\r\nThis behaviour is documented in [the Rails Guides][guides], but I either missed it the first time or forgot about it.\r\n\r\n  [guides]: http:\/\/guides.rubyonrails.org\/association_basics.html#options-for-belongs-to-counter-cache","body":"<p>As the other answers state:<\/p>\n\n<ul>\n<li><code>count<\/code> will perform an SQL <code>COUNT<\/code> query<\/li>\n<li><code>length<\/code> will calculate the length of the resulting array<\/li>\n<li><code>size<\/code> will try to pick the most appropriate of the two to avoid excessive queries<\/li>\n<\/ul>\n\n<p>But there is one more thing. We noticed a case where <code>size<\/code> acts differently to <code>count<\/code>\/<code>length<\/code>altogether, and I thought I'd share it since it is rare enough to be overlooked.<\/p>\n\n<ul>\n<li><p>If you use a <code>:counter_cache<\/code> on a <code>has_many<\/code> association, <code>size<\/code> will use the cached count directly, and not make an extra query at all.<\/p>\n\n<pre><code>class Image &lt; ActiveRecord::Base\n  belongs_to :product, counter_cache: true\nend\n\nclass Product &lt; ActiveRecord::Base\n  has_many :images\nend\n\n&gt; product = Product.first  # query, load product into memory\n&gt; product.images.size      # no query, reads the :images_count column\n&gt; product.images.count     # query, SQL COUNT\n&gt; product.images.length    # query, loads images into memory\n<\/code><\/pre><\/li>\n<\/ul>\n\n<p>This behaviour is documented in <a href=\"http:\/\/guides.rubyonrails.org\/association_basics.html#options-for-belongs-to-counter-cache\">the Rails Guides<\/a>, but I either missed it the first time or forgot about it.<\/p>\n"},{"owner":{"account_id":2858279,"reputation":1299,"user_id":2454031,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/ee14cd0e2f56ae2101d34852cb1c1e22?s=256&d=identicon&r=PG","display_name":"user2454031","link":"https:\/\/stackoverflow.com\/users\/2454031\/user2454031"},"is_accepted":false,"community_owned_date":null,"score":99,"last_activity_date":1427908877,"last_edit_date":1427908877.0,"creation_date":1373824358,"answer_id":17642019,"question_id":4581075,"content_license":"CC BY-SA 3.0","body_markdown":"OpenURI is the best; it&#39;s as simple as\r\n\r\n    require &#39;open-uri&#39;\r\n    response = open(&#39;http:\/\/example.com&#39;).read","body":"<p>OpenURI is the best; it's as simple as<\/p>\n\n<pre><code>require 'open-uri'\nresponse = open('http:\/\/example.com').read\n<\/code><\/pre>\n"},{"owner":{"account_id":5241,"reputation":2950,"user_id":8344,"user_type":"registered","accept_rate":75,"profile_image":"https:\/\/i.stack.imgur.com\/vLyLI.jpg?s=256&g=1","display_name":"Adrian Dunston","link":"https:\/\/stackoverflow.com\/users\/8344\/adrian-dunston"},"is_accepted":false,"community_owned_date":1261113562.0,"score":96,"last_activity_date":1242667007,"last_edit_date":1242667007.0,"creation_date":1221494501,"answer_id":64218,"question_id":55574,"content_license":"CC BY-SA 2.5","body_markdown":"Path of least resistance:\r\n\r\n* Have a simple web project in mind.\r\n* Go to **rubyonrails.org** and look at their &quot;Blog in 15 minutes&quot; screencast to get excited.\r\n* Get a copy of O&#39;Reilly Media&#39;s **Learning Ruby**\r\n* Get a Mac or Linux box.  \r\n(Fewer early Rails frustrations due to the fact that Rails is generally developed on these.)\r\n* Get a copy of **Agile Web Development with Rails**.\r\n* Get the version of Ruby and Rails described in that book.\r\n* Run through that book&#39;s first section to get a feel for what it&#39;s like.\r\n* Go to **railscasts.com** and view at the earliest videos for a closer look.\r\n* Buy **The Rails Way** by Obie Fernandez to get a deeper understanding of Rails and what it&#39;s doing.\r\n* Then upgrade to the newest production version of Rails, and view the latest railscasts.com videos.","body":"<p>Path of least resistance:<\/p>\n\n<ul>\n<li>Have a simple web project in mind.<\/li>\n<li>Go to <strong>rubyonrails.org<\/strong> and look at their \"Blog in 15 minutes\" screencast to get excited.<\/li>\n<li>Get a copy of O'Reilly Media's <strong>Learning Ruby<\/strong><\/li>\n<li>Get a Mac or Linux box.<br>\n(Fewer early Rails frustrations due to the fact that Rails is generally developed on these.)<\/li>\n<li>Get a copy of <strong>Agile Web Development with Rails<\/strong>.<\/li>\n<li>Get the version of Ruby and Rails described in that book.<\/li>\n<li>Run through that book's first section to get a feel for what it's like.<\/li>\n<li>Go to <strong>railscasts.com<\/strong> and view at the earliest videos for a closer look.<\/li>\n<li>Buy <strong>The Rails Way<\/strong> by Obie Fernandez to get a deeper understanding of Rails and what it's doing.<\/li>\n<li>Then upgrade to the newest production version of Rails, and view the latest railscasts.com videos.<\/li>\n<\/ul>\n"},{"owner":{"account_id":1512936,"reputation":3013,"user_id":1414596,"user_type":"registered","accept_rate":53,"profile_image":"https:\/\/www.gravatar.com\/avatar\/68952cca8d9631003516ac20e2b39f25?s=256&d=identicon&r=PG","display_name":"roxxypoxxy","link":"https:\/\/stackoverflow.com\/users\/1414596\/roxxypoxxy"},"is_accepted":false,"community_owned_date":null,"score":96,"last_activity_date":1485252946,"last_edit_date":1485252946.0,"creation_date":1346990840,"answer_id":12311586,"question_id":4952980,"content_license":"CC BY-SA 3.0","body_markdown":"By default all class methods are public. To make them private you can use [Module#private_class_method](http:\/\/www.ruby-doc.org\/core-1.9.3\/Module.html#method-i-private_class_method) like @tjwallace wrote or define them differently, as you did:\r\n    \r\n    class &lt;&lt; self\r\n    \r\n      private\r\n\r\n      def method_name\r\n        ...\r\n      end\r\n    end\r\n\r\n`class &lt;&lt; self` opens up self&#39;s singleton class, so that methods can be redefined for the current self object. This is used to define class\/module (&quot;static&quot;) method. Only there, defining private methods really gives you private class methods.","body":"<p>By default all class methods are public. To make them private you can use <a href=\"http:\/\/www.ruby-doc.org\/core-1.9.3\/Module.html#method-i-private_class_method\" rel=\"noreferrer\">Module#private_class_method<\/a> like @tjwallace wrote or define them differently, as you did:<\/p>\n\n<pre><code>class &lt;&lt; self\n\n  private\n\n  def method_name\n    ...\n  end\nend\n<\/code><\/pre>\n\n<p><code>class &lt;&lt; self<\/code> opens up self's singleton class, so that methods can be redefined for the current self object. This is used to define class\/module (\"static\") method. Only there, defining private methods really gives you private class methods.<\/p>\n"},{"owner":{"account_id":21504,"reputation":11705,"user_id":52317,"user_type":"registered","accept_rate":30,"profile_image":"https:\/\/www.gravatar.com\/avatar\/b3da0ca2685a59740d157b22aec70935?s=256&d=identicon&r=PG","display_name":"Uzbekjon","link":"https:\/\/stackoverflow.com\/users\/52317\/uzbekjon"},"is_accepted":false,"community_owned_date":null,"score":96,"last_activity_date":1671527397,"last_edit_date":1671527397.0,"creation_date":1461429131,"answer_id":36813420,"question_id":36812647,"content_license":"CC BY-SA 4.0","body_markdown":"*Note: Even though @Santosh gave a clear and full answer, I would like add some more background and add an **important note** regarding its use with non instance variables.*\r\n\r\n----------\r\n\r\nIt is called &quot;[Safe Navigation Operator][1]&quot; (*aka &quot;Optional chaining operator&quot;, &quot;Null-conditional operator&quot;, etc.*). Matz seems to call it &quot;lonely operator&quot;. It was [introduced in Ruby 2.3][2]. It sends a method to an object only if it is not `nil`.\r\n\r\n### Example:\r\n\r\n    # Call method `.profile` on `user` only if `user` is not `nil`\r\n    @user&amp;.profile\r\n    \r\n    # Equivalent to\r\n    unless @user.nil?\r\n      @user.profile\r\n    end\r\n\r\n### &quot;Edge case&quot; with local variables:\r\n\r\nPlease note, above code uses instance variables. If you want to use safe navigation operator with local variables, you will have to check that your local variables are defined first.\r\n\r\n    # `user` local variable is not defined previous\r\n    user&amp;.profile\r\n    \r\n    # This code would throw the following error:\r\n    NameError: undefined local variable or method `user&#39; for main:Object\r\n\r\nTo fix this issue, check if your local variable is defined first or set it to nil:\r\n\r\n    # Option 1: Check the variable is defined\r\n    if defined?(user)\r\n      user&amp;.profile\r\n    end\r\n\r\n    # Option 2: Define your local variable. Example, set it to nil\r\n    user = nil\r\n    user&amp;.profile     # Works and does not throw any errors\r\n\r\n\r\n### Method background\r\n\r\nRails has `try` method that basically does the same. It uses `send` method internally to call a method. [Matz suggested][3] that it is slow and this should be a built-in language feature.\r\n\r\nMany other programming languages have similar features: Objective C, Swift, Scala, CoffeeScript, etc. However, a common syntax is `?.` (question dot). But, this syntax could not be adopted by Ruby. Because `?` was allowed in method names and thus, `?.` symbol sequence is already a valid Ruby code. For example:\r\n\r\n    2.even?.class  # =&gt; TrueClass\r\n\r\nThat&#39;s why Ruby community had to come up with different syntax. It was an active discussion and different options were considered (`.?`, `?`, `&amp;&amp;`, etc.). Here is a list of some considerations:\r\n\r\n    u.?profile.?thumbnails\r\n    u\\profile\\thumbnails\r\n    u!profile!thumbnails\r\n    u ? .profile ? .thumbnails\r\n    u &amp;&amp; .profile &amp;&amp; .thumbnails\r\n    \r\n    # And finally\r\n    u&amp;.profile&amp;.thumbnails\r\n\r\nWhile choosing the syntax, developers looked at different edge cases and the discussion is quite useful to go through. If you want to go through  all variants and nuance of the operator, please see [this feature introduction discussion][2] on official Ruby issue tracker.\r\n\r\n\r\n  [1]: https:\/\/en.wikipedia.org\/wiki\/Safe_navigation_operator\r\n  [2]: https:\/\/bugs.ruby-lang.org\/issues\/11537\r\n  [3]: https:\/\/blog.heroku.com\/archives\/2015\/12\/25\/ruby-2-3-0-on-heroku-with-matz","body":"<p><em>Note: Even though @Santosh gave a clear and full answer, I would like add some more background and add an <strong>important note<\/strong> regarding its use with non instance variables.<\/em><\/p>\n<hr \/>\n<p>It is called &quot;<a href=\"https:\/\/en.wikipedia.org\/wiki\/Safe_navigation_operator\" rel=\"noreferrer\">Safe Navigation Operator<\/a>&quot; (<em>aka &quot;Optional chaining operator&quot;, &quot;Null-conditional operator&quot;, etc.<\/em>). Matz seems to call it &quot;lonely operator&quot;. It was <a href=\"https:\/\/bugs.ruby-lang.org\/issues\/11537\" rel=\"noreferrer\">introduced in Ruby 2.3<\/a>. It sends a method to an object only if it is not <code>nil<\/code>.<\/p>\n<h3>Example:<\/h3>\n<pre><code># Call method `.profile` on `user` only if `user` is not `nil`\n@user&amp;.profile\n\n# Equivalent to\nunless @user.nil?\n  @user.profile\nend\n<\/code><\/pre>\n<h3>&quot;Edge case&quot; with local variables:<\/h3>\n<p>Please note, above code uses instance variables. If you want to use safe navigation operator with local variables, you will have to check that your local variables are defined first.<\/p>\n<pre><code># `user` local variable is not defined previous\nuser&amp;.profile\n\n# This code would throw the following error:\nNameError: undefined local variable or method `user' for main:Object\n<\/code><\/pre>\n<p>To fix this issue, check if your local variable is defined first or set it to nil:<\/p>\n<pre><code># Option 1: Check the variable is defined\nif defined?(user)\n  user&amp;.profile\nend\n\n# Option 2: Define your local variable. Example, set it to nil\nuser = nil\nuser&amp;.profile     # Works and does not throw any errors\n<\/code><\/pre>\n<h3>Method background<\/h3>\n<p>Rails has <code>try<\/code> method that basically does the same. It uses <code>send<\/code> method internally to call a method. <a href=\"https:\/\/blog.heroku.com\/archives\/2015\/12\/25\/ruby-2-3-0-on-heroku-with-matz\" rel=\"noreferrer\">Matz suggested<\/a> that it is slow and this should be a built-in language feature.<\/p>\n<p>Many other programming languages have similar features: Objective C, Swift, Scala, CoffeeScript, etc. However, a common syntax is <code>?.<\/code> (question dot). But, this syntax could not be adopted by Ruby. Because <code>?<\/code> was allowed in method names and thus, <code>?.<\/code> symbol sequence is already a valid Ruby code. For example:<\/p>\n<pre><code>2.even?.class  # =&gt; TrueClass\n<\/code><\/pre>\n<p>That's why Ruby community had to come up with different syntax. It was an active discussion and different options were considered (<code>.?<\/code>, <code>?<\/code>, <code>&amp;&amp;<\/code>, etc.). Here is a list of some considerations:<\/p>\n<pre><code>u.?profile.?thumbnails\nu\\profile\\thumbnails\nu!profile!thumbnails\nu ? .profile ? .thumbnails\nu &amp;&amp; .profile &amp;&amp; .thumbnails\n\n# And finally\nu&amp;.profile&amp;.thumbnails\n<\/code><\/pre>\n<p>While choosing the syntax, developers looked at different edge cases and the discussion is quite useful to go through. If you want to go through  all variants and nuance of the operator, please see <a href=\"https:\/\/bugs.ruby-lang.org\/issues\/11537\" rel=\"noreferrer\">this feature introduction discussion<\/a> on official Ruby issue tracker.<\/p>\n"},{"owner":{"account_id":60973,"reputation":4996,"user_id":181916,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/88a1521be4c8a667dbb7d61e68cc0668?s=256&d=identicon&r=PG","display_name":"Peter Wagenet","link":"https:\/\/stackoverflow.com\/users\/181916\/peter-wagenet"},"is_accepted":false,"community_owned_date":null,"score":95,"last_activity_date":1254633802,"last_edit_date":null,"creation_date":1254633802,"answer_id":1515670,"question_id":626,"content_license":"CC BY-SA 2.5","body_markdown":"To provide further clarification:\r\n\r\nJoey says that the return behavior of `Proc.new` is surprising. However when you consider that Proc.new behaves like a block this is not surprising as that is exactly how blocks behave. lambas on the other hand behave more like methods.\r\n\r\nThis actually explains why Procs are flexible when it comes to arity (number of arguments) whereas lambdas are not. Blocks don&#39;t require all their arguments to be provided but methods do (unless a default is provided). While providing lambda argument default is not an option in Ruby 1.8, it is now supported in Ruby 1.9 with the alternative lambda syntax (as noted by webmat):\r\n\r\n    concat = -&gt;(a, b=2){ &quot;#{a}#{b}&quot; }\r\n    concat.call(4,5) # =&gt; &quot;45&quot;\r\n    concat.call(1)   # =&gt; &quot;12&quot;\r\n\r\nAnd Michiel de Mare (the OP) is incorrect about the Procs and lambda behaving the same with arity in Ruby 1.9. I have verified that they still maintain the behavior from 1.8 as specified above.\r\n\r\n`break` statements don&#39;t actually make much sense in either Procs or lambdas. In Procs, the break would return you from Proc.new which has already been completed. And it doesn&#39;t make any sense to break from a lambda since it&#39;s essentially a method, and you would never break from the top level of a method.\r\n\r\n`next`, `redo`, and `raise` behave the same in both Procs and lambdas. Whereas `retry` is not allowed in either and will raise an exception.\r\n\r\nAnd finally, the `proc` method should never be used as it is inconsistent and has unexpected behavior. In Ruby 1.8 it actually returns a lambda! In Ruby 1.9 this has been fixed and it returns a Proc. If you want to create a Proc, stick with `Proc.new`.\r\n\r\nFor more information, I highly recommend O&#39;Reilly&#39;s *The Ruby Programming Language* which is my source for most of this information.","body":"<p>To provide further clarification:<\/p>\n\n<p>Joey says that the return behavior of <code>Proc.new<\/code> is surprising. However when you consider that Proc.new behaves like a block this is not surprising as that is exactly how blocks behave. lambas on the other hand behave more like methods.<\/p>\n\n<p>This actually explains why Procs are flexible when it comes to arity (number of arguments) whereas lambdas are not. Blocks don't require all their arguments to be provided but methods do (unless a default is provided). While providing lambda argument default is not an option in Ruby 1.8, it is now supported in Ruby 1.9 with the alternative lambda syntax (as noted by webmat):<\/p>\n\n<pre><code>concat = -&gt;(a, b=2){ \"#{a}#{b}\" }\nconcat.call(4,5) # =&gt; \"45\"\nconcat.call(1)   # =&gt; \"12\"\n<\/code><\/pre>\n\n<p>And Michiel de Mare (the OP) is incorrect about the Procs and lambda behaving the same with arity in Ruby 1.9. I have verified that they still maintain the behavior from 1.8 as specified above.<\/p>\n\n<p><code>break<\/code> statements don't actually make much sense in either Procs or lambdas. In Procs, the break would return you from Proc.new which has already been completed. And it doesn't make any sense to break from a lambda since it's essentially a method, and you would never break from the top level of a method.<\/p>\n\n<p><code>next<\/code>, <code>redo<\/code>, and <code>raise<\/code> behave the same in both Procs and lambdas. Whereas <code>retry<\/code> is not allowed in either and will raise an exception.<\/p>\n\n<p>And finally, the <code>proc<\/code> method should never be used as it is inconsistent and has unexpected behavior. In Ruby 1.8 it actually returns a lambda! In Ruby 1.9 this has been fixed and it returns a Proc. If you want to create a Proc, stick with <code>Proc.new<\/code>.<\/p>\n\n<p>For more information, I highly recommend O'Reilly's <em>The Ruby Programming Language<\/em> which is my source for most of this information.<\/p>\n"},{"owner":{"user_type":"does_not_exist","display_name":"user46519"},"is_accepted":true,"community_owned_date":null,"score":93,"last_activity_date":1477961752,"last_edit_date":1477961752.0,"creation_date":1229516836,"answer_id":374393,"question_id":374326,"content_license":"CC BY-SA 3.0","body_markdown":"    require &#39;pathname&#39;\r\n    \r\n    Pathname.new(&#39;\/opt\/local\/bin\/ruby&#39;).basename\r\n    # =&gt; #&lt;Pathname:ruby&gt;\r\n\r\nI haven&#39;t been a Windows user in a long time, but the Pathname rdoc says it has no issues with directory-name separators on Windows.\r\n","body":"<pre><code>require 'pathname'\n\nPathname.new('\/opt\/local\/bin\/ruby').basename\n# =&gt; #&lt;Pathname:ruby&gt;\n<\/code><\/pre>\n\n<p>I haven't been a Windows user in a long time, but the Pathname rdoc says it has no issues with directory-name separators on Windows.<\/p>\n"},{"owner":{"account_id":110,"reputation":42112,"user_id":136,"user_type":"registered","accept_rate":73,"profile_image":"https:\/\/www.gravatar.com\/avatar\/901fdd0c1bd863f1c3b72cddc5a66039?s=256&d=identicon&r=PG","display_name":"Michiel de Mare","link":"https:\/\/stackoverflow.com\/users\/136\/michiel-de-mare"},"is_accepted":false,"community_owned_date":null,"score":93,"last_activity_date":1378714671,"last_edit_date":1378714671.0,"creation_date":1298737157,"answer_id":5128073,"question_id":1961030,"content_license":"CC BY-SA 3.0","body_markdown":"There&#39;s nothing special about the combination of the ampersand and the symbol. Here&#39;s an example that (ab)uses the regex:\r\n\r\n\r\n    class Regexp\r\n      def to_proc\r\n        -&gt;(str) { self =~ str ; $1 }\r\n      end\r\n    end\r\n    %w(station nation information).map &amp;\/(.*)ion\/\r\n\r\n    =&gt; [&quot;stat&quot;, &quot;nat&quot;, &quot;informat&quot;]\r\n\r\nOr integers.\r\n\r\n\r\n    class Integer\r\n      def to_proc\r\n        -&gt;(arr) { arr[self] }\r\n      end\r\n    end\r\n    \r\n    arr = [[*3..7],[*14..27],[*?a..?z]]\r\n    arr.map &amp;4\r\n    =&gt; [7, 18, &quot;e&quot;]\r\n\r\nWho needs `arr.map(&amp;:fifth)` when you have `arr.map &amp;4`?","body":"<p>There's nothing special about the combination of the ampersand and the symbol. Here's an example that (ab)uses the regex:<\/p>\n\n<pre><code>class Regexp\n  def to_proc\n    -&gt;(str) { self =~ str ; $1 }\n  end\nend\n%w(station nation information).map &amp;\/(.*)ion\/\n\n=&gt; [\"stat\", \"nat\", \"informat\"]\n<\/code><\/pre>\n\n<p>Or integers.<\/p>\n\n<pre><code>class Integer\n  def to_proc\n    -&gt;(arr) { arr[self] }\n  end\nend\n\narr = [[*3..7],[*14..27],[*?a..?z]]\narr.map &amp;4\n=&gt; [7, 18, \"e\"]\n<\/code><\/pre>\n\n<p>Who needs <code>arr.map(&amp;:fifth)<\/code> when you have <code>arr.map &amp;4<\/code>?<\/p>\n"},{"owner":{"account_id":182468,"reputation":76545,"user_id":417194,"user_type":"registered","accept_rate":82,"profile_image":"https:\/\/www.gravatar.com\/avatar\/fd36c548bbe7c836bc4812c588fa731a?s=256&d=identicon&r=PG","display_name":"Denis de Bernardy","link":"https:\/\/stackoverflow.com\/users\/417194\/denis-de-bernardy"},"is_accepted":false,"community_owned_date":null,"score":91,"last_activity_date":1459950584,"last_edit_date":1459950584.0,"creation_date":1384519985,"answer_id":20001569,"question_id":690151,"content_license":"CC BY-SA 3.0","body_markdown":"The straightforward way to do this correctly and securely is to use [`Open3.capture2()`](http:\/\/www.ruby-doc.org\/stdlib-2.0.0\/libdoc\/open3\/rdoc\/Open3.html#method-c-capture2), [`Open3.capture2e()`](http:\/\/www.ruby-doc.org\/stdlib-2.0.0\/libdoc\/open3\/rdoc\/Open3.html#method-c-capture2e), or [`Open3.capture3()`](http:\/\/www.ruby-doc.org\/stdlib-2.0.0\/libdoc\/open3\/rdoc\/Open3.html#method-c-capture3).\r\n\r\nUsing ruby&#39;s backticks and its `%x` alias are **NOT SECURE UNDER ANY CIRCUMSTANCES** if used with untrusted data. It is **DANGEROUS**, plain and simple:\r\n\r\n    untrusted = &quot;; date; echo&quot;\r\n    out = `echo #{untrusted}`                              # BAD\r\n\r\n    untrusted = &#39;&quot;; date; echo&quot;&#39;\r\n    out = `echo &quot;#{untrusted}&quot;`                            # BAD\r\n\r\n    untrusted = &quot;&#39;; date; echo&#39;&quot;\r\n    out = `echo &#39;#{untrusted}&#39;`                            # BAD\r\n\r\nThe `system` function, in contrast, escapes arguments properly **if used correctly**:\r\n\r\n    ret = system &quot;echo #{untrusted}&quot;                       # BAD\r\n    ret = system &#39;echo&#39;, untrusted                         # good\r\n\r\nTrouble is, it returns the exit code instead of the output, and capturing the latter is convoluted and messy.\r\n\r\nThe best answer in this thread so far mentions Open3, but not the functions that are best suited for the task. `Open3.capture2`, `capture2e` and `capture3` work like `system`, but returns two or three arguments:\r\n\r\n    out, err, st = Open3.capture3(&quot;echo #{untrusted}&quot;)     # BAD\r\n    out, err, st = Open3.capture3(&#39;echo&#39;, untrusted)       # good\r\n    out_err, st  = Open3.capture2e(&#39;echo&#39;, untrusted)      # good\r\n    out, st      = Open3.capture2(&#39;echo&#39;, untrusted)       # good\r\n    p st.exitstatus\r\n\r\nAnother mentions [`IO.popen()`](http:\/\/www.ruby-doc.org\/core-2.0.0\/IO.html#method-c-popen). The syntax can be clumsy in the sense that it wants an array as input, but it works too:\r\n\r\n    out = IO.popen([&#39;echo&#39;, untrusted]).read               # good\r\n\r\n- - - \r\n\r\nFor convenience, you can wrap `Open3.capture3()` in a function, e.g.:\r\n\r\n    #\r\n    # Returns stdout on success, false on failure, nil on error\r\n    #\r\n    def syscall(*cmd)\r\n      begin\r\n        stdout, stderr, status = Open3.capture3(*cmd)\r\n        status.success? &amp;&amp; stdout.slice!(0..-(1 + $\/.size)) # strip trailing eol\r\n      rescue\r\n      end\r\n    end\r\n\r\nExample:\r\n\r\n    p system(&#39;foo&#39;)\r\n    p syscall(&#39;foo&#39;)\r\n    p system(&#39;which&#39;, &#39;foo&#39;)\r\n    p syscall(&#39;which&#39;, &#39;foo&#39;)\r\n    p system(&#39;which&#39;, &#39;which&#39;)\r\n    p syscall(&#39;which&#39;, &#39;which&#39;)\r\n\r\nYields the following:\r\n\r\n    nil\r\n    nil\r\n    false\r\n    false\r\n    \/usr\/bin\/which         &lt;\u2014 stdout from system(&#39;which&#39;, &#39;which&#39;)\r\n    true                   &lt;- p system(&#39;which&#39;, &#39;which&#39;)\r\n    &quot;\/usr\/bin\/which&quot;       &lt;- p syscall(&#39;which&#39;, &#39;which&#39;)","body":"<p>The straightforward way to do this correctly and securely is to use <a href=\"http:\/\/www.ruby-doc.org\/stdlib-2.0.0\/libdoc\/open3\/rdoc\/Open3.html#method-c-capture2\"><code>Open3.capture2()<\/code><\/a>, <a href=\"http:\/\/www.ruby-doc.org\/stdlib-2.0.0\/libdoc\/open3\/rdoc\/Open3.html#method-c-capture2e\"><code>Open3.capture2e()<\/code><\/a>, or <a href=\"http:\/\/www.ruby-doc.org\/stdlib-2.0.0\/libdoc\/open3\/rdoc\/Open3.html#method-c-capture3\"><code>Open3.capture3()<\/code><\/a>.<\/p>\n\n<p>Using ruby's backticks and its <code>%x<\/code> alias are <strong>NOT SECURE UNDER ANY CIRCUMSTANCES<\/strong> if used with untrusted data. It is <strong>DANGEROUS<\/strong>, plain and simple:<\/p>\n\n<pre><code>untrusted = \"; date; echo\"\nout = `echo #{untrusted}`                              # BAD\n\nuntrusted = '\"; date; echo\"'\nout = `echo \"#{untrusted}\"`                            # BAD\n\nuntrusted = \"'; date; echo'\"\nout = `echo '#{untrusted}'`                            # BAD\n<\/code><\/pre>\n\n<p>The <code>system<\/code> function, in contrast, escapes arguments properly <strong>if used correctly<\/strong>:<\/p>\n\n<pre><code>ret = system \"echo #{untrusted}\"                       # BAD\nret = system 'echo', untrusted                         # good\n<\/code><\/pre>\n\n<p>Trouble is, it returns the exit code instead of the output, and capturing the latter is convoluted and messy.<\/p>\n\n<p>The best answer in this thread so far mentions Open3, but not the functions that are best suited for the task. <code>Open3.capture2<\/code>, <code>capture2e<\/code> and <code>capture3<\/code> work like <code>system<\/code>, but returns two or three arguments:<\/p>\n\n<pre><code>out, err, st = Open3.capture3(\"echo #{untrusted}\")     # BAD\nout, err, st = Open3.capture3('echo', untrusted)       # good\nout_err, st  = Open3.capture2e('echo', untrusted)      # good\nout, st      = Open3.capture2('echo', untrusted)       # good\np st.exitstatus\n<\/code><\/pre>\n\n<p>Another mentions <a href=\"http:\/\/www.ruby-doc.org\/core-2.0.0\/IO.html#method-c-popen\"><code>IO.popen()<\/code><\/a>. The syntax can be clumsy in the sense that it wants an array as input, but it works too:<\/p>\n\n<pre><code>out = IO.popen(['echo', untrusted]).read               # good\n<\/code><\/pre>\n\n<hr>\n\n<p>For convenience, you can wrap <code>Open3.capture3()<\/code> in a function, e.g.:<\/p>\n\n<pre><code>#\n# Returns stdout on success, false on failure, nil on error\n#\ndef syscall(*cmd)\n  begin\n    stdout, stderr, status = Open3.capture3(*cmd)\n    status.success? &amp;&amp; stdout.slice!(0..-(1 + $\/.size)) # strip trailing eol\n  rescue\n  end\nend\n<\/code><\/pre>\n\n<p>Example:<\/p>\n\n<pre><code>p system('foo')\np syscall('foo')\np system('which', 'foo')\np syscall('which', 'foo')\np system('which', 'which')\np syscall('which', 'which')\n<\/code><\/pre>\n\n<p>Yields the following:<\/p>\n\n<pre><code>nil\nnil\nfalse\nfalse\n\/usr\/bin\/which         &lt;\u2014 stdout from system('which', 'which')\ntrue                   &lt;- p system('which', 'which')\n\"\/usr\/bin\/which\"       &lt;- p syscall('which', 'which')\n<\/code><\/pre>\n"},{"owner":{"account_id":32641,"reputation":32949,"user_id":90723,"user_type":"registered","accept_rate":94,"profile_image":"https:\/\/www.gravatar.com\/avatar\/56ee28134dd0776825445e3551979b14?s=256&d=identicon&r=PG","display_name":"Bob Aman","link":"https:\/\/stackoverflow.com\/users\/90723\/bob-aman"},"is_accepted":true,"community_owned_date":null,"score":89,"last_activity_date":1435461825,"last_edit_date":1435461825.0,"creation_date":1241020812,"answer_id":803067,"question_id":798710,"content_license":"CC BY-SA 3.0","body_markdown":"**Update:** This functionality was removed from the gem.\r\n\r\nJulien, your self-answer is a good one, and I&#39;ve shameless borrowed from it, but it doesn&#39;t properly escape reserved characters, and there are a few other edge cases where it breaks down.\r\n\r\n    require &quot;addressable\/uri&quot;\r\n    uri = Addressable::URI.new\r\n    uri.query_values = {:a =&gt; &quot;a&quot;, :b =&gt; [&quot;c&quot;, &quot;d&quot;, &quot;e&quot;]}\r\n    uri.query\r\n    # =&gt; &quot;a=a&amp;b[0]=c&amp;b[1]=d&amp;b[2]=e&quot;\r\n    uri.query_values = {:a =&gt; &quot;a&quot;, :b =&gt; [{:c =&gt; &quot;c&quot;, :d =&gt; &quot;d&quot;}, {:e =&gt; &quot;e&quot;, :f =&gt; &quot;f&quot;}]}\r\n    uri.query\r\n    # =&gt; &quot;a=a&amp;b[0][c]=c&amp;b[0][d]=d&amp;b[1][e]=e&amp;b[1][f]=f&quot;\r\n    uri.query_values = {:a =&gt; &quot;a&quot;, :b =&gt; {:c =&gt; &quot;c&quot;, :d =&gt; &quot;d&quot;}}\r\n    uri.query\r\n    # =&gt; &quot;a=a&amp;b[c]=c&amp;b[d]=d&quot;\r\n    uri.query_values = {:a =&gt; &quot;a&quot;, :b =&gt; {:c =&gt; &quot;c&quot;, :d =&gt; true}}\r\n    uri.query\r\n    # =&gt; &quot;a=a&amp;b[c]=c&amp;b[d]&quot;\r\n    uri.query_values = {:a =&gt; &quot;a&quot;, :b =&gt; {:c =&gt; &quot;c&quot;, :d =&gt; true}, :e =&gt; []}\r\n    uri.query\r\n    # =&gt; &quot;a=a&amp;b[c]=c&amp;b[d]&quot;\r\n\r\nThe gem is &#39;[addressable][1]&#39;\r\n\r\n    gem install addressable\r\n\r\n\r\n  [1]: https:\/\/github.com\/sporkmonger\/addressable","body":"<p><strong>Update:<\/strong> This functionality was removed from the gem.<\/p>\n\n<p>Julien, your self-answer is a good one, and I've shameless borrowed from it, but it doesn't properly escape reserved characters, and there are a few other edge cases where it breaks down.<\/p>\n\n<pre><code>require \"addressable\/uri\"\nuri = Addressable::URI.new\nuri.query_values = {:a =&gt; \"a\", :b =&gt; [\"c\", \"d\", \"e\"]}\nuri.query\n# =&gt; \"a=a&amp;b[0]=c&amp;b[1]=d&amp;b[2]=e\"\nuri.query_values = {:a =&gt; \"a\", :b =&gt; [{:c =&gt; \"c\", :d =&gt; \"d\"}, {:e =&gt; \"e\", :f =&gt; \"f\"}]}\nuri.query\n# =&gt; \"a=a&amp;b[0][c]=c&amp;b[0][d]=d&amp;b[1][e]=e&amp;b[1][f]=f\"\nuri.query_values = {:a =&gt; \"a\", :b =&gt; {:c =&gt; \"c\", :d =&gt; \"d\"}}\nuri.query\n# =&gt; \"a=a&amp;b[c]=c&amp;b[d]=d\"\nuri.query_values = {:a =&gt; \"a\", :b =&gt; {:c =&gt; \"c\", :d =&gt; true}}\nuri.query\n# =&gt; \"a=a&amp;b[c]=c&amp;b[d]\"\nuri.query_values = {:a =&gt; \"a\", :b =&gt; {:c =&gt; \"c\", :d =&gt; true}, :e =&gt; []}\nuri.query\n# =&gt; \"a=a&amp;b[c]=c&amp;b[d]\"\n<\/code><\/pre>\n\n<p>The gem is '<a href=\"https:\/\/github.com\/sporkmonger\/addressable\" rel=\"noreferrer\">addressable<\/a>'<\/p>\n\n<pre><code>gem install addressable\n<\/code><\/pre>\n"},{"owner":{"account_id":575101,"reputation":899,"user_id":228480,"user_type":"unregistered","profile_image":"https:\/\/www.gravatar.com\/avatar\/9c6165b107059ea5dfa2e81985fe8272?s=256&d=identicon&r=PG","display_name":"Greg Osuri","link":"https:\/\/stackoverflow.com\/users\/228480\/greg-osuri"},"is_accepted":false,"community_owned_date":null,"score":89,"last_activity_date":1620875322,"last_edit_date":1620875322.0,"creation_date":1260414447,"answer_id":1878406,"question_id":1345843,"content_license":"CC BY-SA 4.0","body_markdown":"Also note `?` along with a character acts as shorthand for a single-character string literal since Ruby 1.9.\r\n\r\nFor example:\r\n\r\n    ?F # =&gt; is the same as &quot;F&quot;\r\n\r\nThis is referenced near the bottom of the [string literals section of the ruby docs][1]:\r\n\r\n&gt; There is also a character literal notation to represent single\r\n&gt; character strings, which syntax is a question mark (?) followed by a\r\n&gt; single character or escape sequence that corresponds to a single\r\n&gt; codepoint in the script encoding:\r\n&gt; \r\n&gt;     ?a       #=&gt; &quot;a&quot;\r\n&gt;     ?abc     #=&gt; SyntaxError\r\n&gt;     ?\\n      #=&gt; &quot;\\n&quot;\r\n&gt;     ?\\s      #=&gt; &quot; &quot;\r\n&gt;     ?\\\\      #=&gt; &quot;\\\\&quot;\r\n&gt;     ?\\u{41}  #=&gt; &quot;A&quot;\r\n&gt;     ?\\C-a    #=&gt; &quot;\\x01&quot;\r\n&gt;     ?\\M-a    #=&gt; &quot;\\xE1&quot;\r\n&gt;     ?\\M-\\C-a #=&gt; &quot;\\x81&quot;\r\n&gt;     ?\\C-\\M-a #=&gt; &quot;\\x81&quot;, same as above\r\n&gt;     ?\u3042      #=&gt; &quot;\u3042&quot;\r\n\r\nPrior to Ruby 1.9, this returned the ASCII character code of the character.  To get the old behavior in modern Ruby, you can use the `#ord` method:\r\n\r\n    ?F.ord # =&gt; will return 70\r\n\r\n\r\n  [1]: https:\/\/docs.ruby-lang.org\/en\/3.0.0\/doc\/syntax\/literals_rdoc.html#label-Strings","body":"<p>Also note <code>?<\/code> along with a character acts as shorthand for a single-character string literal since Ruby 1.9.<\/p>\n<p>For example:<\/p>\n<pre><code>?F # =&gt; is the same as &quot;F&quot;\n<\/code><\/pre>\n<p>This is referenced near the bottom of the <a href=\"https:\/\/docs.ruby-lang.org\/en\/3.0.0\/doc\/syntax\/literals_rdoc.html#label-Strings\" rel=\"nofollow noreferrer\">string literals section of the ruby docs<\/a>:<\/p>\n<blockquote>\n<p>There is also a character literal notation to represent single\ncharacter strings, which syntax is a question mark (?) followed by a\nsingle character or escape sequence that corresponds to a single\ncodepoint in the script encoding:<\/p>\n<pre><code>?a       #=&gt; &quot;a&quot;\n?abc     #=&gt; SyntaxError\n?\\n      #=&gt; &quot;\\n&quot;\n?\\s      #=&gt; &quot; &quot;\n?\\\\      #=&gt; &quot;\\\\&quot;\n?\\u{41}  #=&gt; &quot;A&quot;\n?\\C-a    #=&gt; &quot;\\x01&quot;\n?\\M-a    #=&gt; &quot;\\xE1&quot;\n?\\M-\\C-a #=&gt; &quot;\\x81&quot;\n?\\C-\\M-a #=&gt; &quot;\\x81&quot;, same as above\n?\u3042      #=&gt; &quot;\u3042&quot;\n<\/code><\/pre>\n<\/blockquote>\n<p>Prior to Ruby 1.9, this returned the ASCII character code of the character.  To get the old behavior in modern Ruby, you can use the <code>#ord<\/code> method:<\/p>\n<pre><code>?F.ord # =&gt; will return 70\n<\/code><\/pre>\n"},{"owner":{"account_id":260750,"reputation":9905,"user_id":544505,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/e5bd9146b44c07ab58107f6d71839494?s=256&d=identicon&r=PG","display_name":"Andrei Andrushkevich","link":"https:\/\/stackoverflow.com\/users\/544505\/andrei-andrushkevich"},"is_accepted":false,"community_owned_date":null,"score":88,"last_activity_date":1486166933,"last_edit_date":1486166933.0,"creation_date":1294010637,"answer_id":4581095,"question_id":4581075,"content_license":"CC BY-SA 3.0","body_markdown":"\r\n    require &#39;net\/http&#39;\r\n    result = Net::HTTP.get(URI.parse(&#39;http:\/\/www.example.com\/about.html&#39;))\r\n    # or\r\n    result = Net::HTTP.get(URI.parse(&#39;http:\/\/www.example.com&#39;), &#39;\/about.html&#39;)\r\n","body":"<pre><code>require 'net\/http'\nresult = Net::HTTP.get(URI.parse('http:\/\/www.example.com\/about.html'))\n# or\nresult = Net::HTTP.get(URI.parse('http:\/\/www.example.com'), '\/about.html')\n<\/code><\/pre>\n"},{"owner":{"account_id":315778,"reputation":94128,"user_id":631619,"user_type":"registered","accept_rate":68,"profile_image":"https:\/\/www.gravatar.com\/avatar\/b6f3159af5195eddff62a2dd4f9ad969?s=256&d=identicon&r=PG","display_name":"Michael Durrant","link":"https:\/\/stackoverflow.com\/users\/631619\/michael-durrant"},"is_accepted":false,"community_owned_date":null,"score":88,"last_activity_date":1538842378,"last_edit_date":1592644375.0,"creation_date":1429967185,"answer_id":29865560,"question_id":3672586,"content_license":"CC BY-SA 4.0","body_markdown":"## Summary\n\n### Use `require` for installed gems\n\n### Use `require_relative` for local files\n\n`require` uses your **`$LOAD_PATH`** to find the files.   \n`require_relative` uses the current location of the file using the statement\n\n---\n### require \n\nRequire relies on you having installed (e.g. `gem install [package]`) a package somewhere on your system for that functionality.\n\nWhen using `require` you _can_ use the &quot;`.\/`&quot; format  for a file in the current directory, e.g. `require &quot;.\/my_file&quot;` but that is not a common or recommended practice and you should use `require_relative` instead.\n\n### require_relative\n  \nThis simply means include the file &#39;relative to the location of the file with the require_relative statement&#39;.  I _generally_ recommend that files should be &quot;within&quot; the current directory tree as opposed to &quot;up&quot;, e.g. **don&#39;t** use\n\n    require_relative &#39;..\/..\/..\/filename&#39;\n\n(up 3 directory levels) within the file system because that tends to create unnecessary and brittle dependencies.  However in some cases if you are already &#39;deep&#39; within a directory tree then &quot;up and down&quot; another directory tree branch may be necessary.  More simply perhaps, **don&#39;t use require_relative for files outside of this repository** (assuming you are using git which is largely a de-facto standard at this point, late 2018).\n\nNote that `require_relative` uses the current directory *of the file with the require_relative* statement (so not necessarily your current directory that you are using the command from).  This keeps the `require_relative` path &quot;stable&quot; as it always be relative to the file requiring it in the same way.","body":"<h2>Summary<\/h2>\n<h3>Use <code>require<\/code> for installed gems<\/h3>\n<h3>Use <code>require_relative<\/code> for local files<\/h3>\n<p><code>require<\/code> uses your <strong><code>$LOAD_PATH<\/code><\/strong> to find the files.<br \/>\n<code>require_relative<\/code> uses the current location of the file using the statement<\/p>\n<hr \/>\n<h3>require<\/h3>\n<p>Require relies on you having installed (e.g. <code>gem install [package]<\/code>) a package somewhere on your system for that functionality.<\/p>\n<p>When using <code>require<\/code> you <em>can<\/em> use the &quot;<code>.\/<\/code>&quot; format  for a file in the current directory, e.g. <code>require &quot;.\/my_file&quot;<\/code> but that is not a common or recommended practice and you should use <code>require_relative<\/code> instead.<\/p>\n<h3>require_relative<\/h3>\n<p>This simply means include the file 'relative to the location of the file with the require_relative statement'.  I <em>generally<\/em> recommend that files should be &quot;within&quot; the current directory tree as opposed to &quot;up&quot;, e.g. <strong>don't<\/strong> use<\/p>\n<pre><code>require_relative '..\/..\/..\/filename'\n<\/code><\/pre>\n<p>(up 3 directory levels) within the file system because that tends to create unnecessary and brittle dependencies.  However in some cases if you are already 'deep' within a directory tree then &quot;up and down&quot; another directory tree branch may be necessary.  More simply perhaps, <strong>don't use require_relative for files outside of this repository<\/strong> (assuming you are using git which is largely a de-facto standard at this point, late 2018).<\/p>\n<p>Note that <code>require_relative<\/code> uses the current directory <em>of the file with the require_relative<\/em> statement (so not necessarily your current directory that you are using the command from).  This keeps the <code>require_relative<\/code> path &quot;stable&quot; as it always be relative to the file requiring it in the same way.<\/p>\n"},{"owner":{"account_id":43087,"reputation":1079,"user_id":125773,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/acd62030df551952268e84c8fff26a5b?s=256&d=identicon&r=PG","display_name":"James Adam","link":"https:\/\/stackoverflow.com\/users\/125773\/james-adam"},"is_accepted":false,"community_owned_date":null,"score":87,"last_activity_date":1460715618,"last_edit_date":1460715618.0,"creation_date":1282729924,"answer_id":3564633,"question_id":175655,"content_license":"CC BY-SA 3.0","body_markdown":"You can actually go a bit further than the solution above.  For Ruby 1.8 Enterprise Edition, there is the `__file__` and `__line__` methods on `Method` instances:\r\n\r\n    require &#39;rubygems&#39;\r\n    require &#39;activesupport&#39;\r\n    \r\n    m = 2.days.method(:ago)\r\n    # =&gt; #&lt;Method: Fixnum(ActiveSupport::CoreExtensions::Numeric::Time)#ago&gt;\r\n    \r\n    m.__file__\r\n    # =&gt; &quot;\/Users\/james\/.rvm\/gems\/ree-1.8.7-2010.01\/gems\/activesupport-2.3.8\/lib\/active_support\/core_ext\/numeric\/time.rb&quot;\r\n    m.__line__\r\n    # =&gt; 64\r\n\r\nFor Ruby 1.9 and beyond, there is `source_location` (thanks Jonathan!):\r\n\r\n    require &#39;active_support\/all&#39;\r\n    m = 2.days.method(:ago)\r\n    # =&gt; #&lt;Method: Fixnum(Numeric)#ago&gt;    # comes from the Numeric module\r\n\r\n    m.source_location   # show file and line\r\n    # =&gt; [&quot;\/var\/lib\/gems\/1.9.1\/gems\/activesupport-3.0.6\/...\/numeric\/time.rb&quot;, 63]\r\n\r\n","body":"<p>You can actually go a bit further than the solution above.  For Ruby 1.8 Enterprise Edition, there is the <code>__file__<\/code> and <code>__line__<\/code> methods on <code>Method<\/code> instances:<\/p>\n\n<pre><code>require 'rubygems'\nrequire 'activesupport'\n\nm = 2.days.method(:ago)\n# =&gt; #&lt;Method: Fixnum(ActiveSupport::CoreExtensions::Numeric::Time)#ago&gt;\n\nm.__file__\n# =&gt; \"\/Users\/james\/.rvm\/gems\/ree-1.8.7-2010.01\/gems\/activesupport-2.3.8\/lib\/active_support\/core_ext\/numeric\/time.rb\"\nm.__line__\n# =&gt; 64\n<\/code><\/pre>\n\n<p>For Ruby 1.9 and beyond, there is <code>source_location<\/code> (thanks Jonathan!):<\/p>\n\n<pre><code>require 'active_support\/all'\nm = 2.days.method(:ago)\n# =&gt; #&lt;Method: Fixnum(Numeric)#ago&gt;    # comes from the Numeric module\n\nm.source_location   # show file and line\n# =&gt; [\"\/var\/lib\/gems\/1.9.1\/gems\/activesupport-3.0.6\/...\/numeric\/time.rb\", 63]\n<\/code><\/pre>\n"},{"owner":{"account_id":52614,"reputation":128653,"user_id":157237,"user_type":"registered","accept_rate":97,"profile_image":"https:\/\/www.gravatar.com\/avatar\/7c6b50948624b1ccfba1872bc82ecaed?s=256&d=identicon&r=PG","display_name":"Peter","link":"https:\/\/stackoverflow.com\/users\/157237\/peter"},"is_accepted":false,"community_owned_date":null,"score":86,"last_activity_date":1394500358,"last_edit_date":1394500358.0,"creation_date":1291322190,"answer_id":4339596,"question_id":4339553,"content_license":"CC BY-SA 3.0","body_markdown":"Note: Ruby &gt;= 1.9.2 has an order-preserving hash: the order keys are inserted will be the order they are enumerated.  The below applies to older versions or to backward-compatible code.\r\n\r\nThere is no concept of a sorted hash. So no, what you&#39;re doing isn&#39;t right.\r\n\r\nIf you want it sorted for display, return a string:\r\n\r\n    &quot;{&quot; + h.sort.map{|k,v| &quot;#{k.inspect}=&gt;#{v.inspect}&quot;}.join(&quot;, &quot;) + &quot;}&quot;\r\n\r\nor, if you want the keys in order:\r\n\r\n    h.keys.sort\r\n\r\nor, if you want to access the elements in order:\r\n\r\n    h.sort.map do |key,value|\r\n      # keys will arrive in order to this block, with their associated value.\r\n    end\r\n\r\nbut in summary, it makes no sense to talk about a sorted hash. From the [docs][1], &quot;The order in which you traverse a hash by either key or value may seem arbitrary, and will generally not be in the insertion order.&quot; So inserting keys in a specific order into the hash won&#39;t help.\r\n\r\n\r\n  [1]: http:\/\/ruby-doc.org\/core\/classes\/Hash.html","body":"<p>Note: Ruby >= 1.9.2 has an order-preserving hash: the order keys are inserted will be the order they are enumerated.  The below applies to older versions or to backward-compatible code.<\/p>\n\n<p>There is no concept of a sorted hash. So no, what you're doing isn't right.<\/p>\n\n<p>If you want it sorted for display, return a string:<\/p>\n\n<pre><code>\"{\" + h.sort.map{|k,v| \"#{k.inspect}=&gt;#{v.inspect}\"}.join(\", \") + \"}\"\n<\/code><\/pre>\n\n<p>or, if you want the keys in order:<\/p>\n\n<pre><code>h.keys.sort\n<\/code><\/pre>\n\n<p>or, if you want to access the elements in order:<\/p>\n\n<pre><code>h.sort.map do |key,value|\n  # keys will arrive in order to this block, with their associated value.\nend\n<\/code><\/pre>\n\n<p>but in summary, it makes no sense to talk about a sorted hash. From the <a href=\"http:\/\/ruby-doc.org\/core\/classes\/Hash.html\" rel=\"noreferrer\">docs<\/a>, \"The order in which you traverse a hash by either key or value may seem arbitrary, and will generally not be in the insertion order.\" So inserting keys in a specific order into the hash won't help.<\/p>\n"},{"owner":{"account_id":177310,"reputation":5039,"user_id":408557,"user_type":"registered","accept_rate":69,"profile_image":"https:\/\/i.stack.imgur.com\/Hqw5a.png?s=256&g=1","display_name":"Thomas Fankhauser","link":"https:\/\/stackoverflow.com\/users\/408557\/thomas-fankhauser"},"is_accepted":false,"community_owned_date":null,"score":84,"last_activity_date":1500884545,"last_edit_date":1500884545.0,"creation_date":1329827912,"answer_id":9377794,"question_id":2256569,"content_license":"CC BY-SA 3.0","body_markdown":"First of all, Rack is exactly two things:\r\n\r\n* A webserver interface convention\r\n* A gem\r\n\r\n**Rack - The Webserver Interface**\r\n\r\nThe very basics of rack is a simple convention. Every rack compliant webserver will always call a call method on an object you give him and serve the result of that method. Rack specifies exactly how this call method has to look like, and what it has to return. That&#39;s rack.\r\n\r\nLet&#39;s give it a simple try. I&#39;ll use WEBrick as rack compliant webserver, but any of them will do. Let&#39;s create a simple web application that returns a JSON string. For this we&#39;ll create a file called config.ru. The config.ru will automatically be called by the rack gem&#39;s command rackup which will simply run the contents of the config.ru in a rack-compliant webserver. So let&#39;s add the following to the config.ru file:\r\n\r\n    class JSONServer\r\n      def call(env)\r\n        [200, {&quot;Content-Type&quot; =&gt; &quot;application\/json&quot;}, [&#39;{ &quot;message&quot; : &quot;Hello!&quot; }&#39;]]\r\n      end\r\n    end\r\n\r\n    map &#39;\/hello.json&#39; do\r\n      run JSONServer.new\r\n    end\r\n\r\nAs the convention specifies our server has a method called call that accepts an environment hash and returns an array with the form [status, headers, body] for the webserver to serve. Let&#39;s try it out by simply calling rackup. A default rack compliant server, maybe WEBrick or Mongrel will start and immediately wait for requests to serve.\r\n\r\n    $ rackup\r\n    [2012-02-19 22:39:26] INFO  WEBrick 1.3.1\r\n    [2012-02-19 22:39:26] INFO  ruby 1.9.3 (2012-01-17) [x86_64-darwin11.2.0]\r\n    [2012-02-19 22:39:26] INFO  WEBrick::HTTPServer#start: pid=16121 port=9292\r\n\r\nLet&#39;s test our new JSON server by either curling or visiting the url `http:\/\/localhost:9292\/hello.json` and voila:\r\n\r\n    $ curl http:\/\/localhost:9292\/hello.json\r\n    { message: &quot;Hello!&quot; }\r\n\r\nIt works. Great! That&#39;s the basis for every web framework, be it Rails or Sinatra. At some point they implement a call method, work through all the framework code, and finally return a response in the typical [status, headers, body] form.\r\n\r\nIn Ruby on Rails for example the rack requests hits the `ActionDispatch::Routing.Mapper` class which looks like this:\r\n\r\n    module ActionDispatch\r\n      module Routing\r\n        class Mapper\r\n          ...\r\n          def initialize(app, constraints, request)\r\n            @app, @constraints, @request = app, constraints, request\r\n          end\r\n\r\n          def matches?(env)\r\n            req = @request.new(env)\r\n            ...\r\n            return true\r\n          end\r\n\r\n          def call(env)\r\n            matches?(env) ? @app.call(env) : [ 404, {&#39;X-Cascade&#39; =&gt; &#39;pass&#39;}, [] ]\r\n          end\r\n          ...\r\n      end\r\n    end\r\n\r\nSo basically Rails checks, dependent on the env hash if any route matches. If so it passes the env hash on to the application to compute the response, otherwise it immediately responds with a 404. So any webserver that is is compliant with the rack interface convention, is able to serve a fully blown Rails application.\r\n\r\n**Middleware**\r\n\r\nRack also supports the creation of middleware layers. They basically intercept a request, do something with it and pass it on. This is very useful for versatile tasks.\r\n\r\nLet&#39;s say we want to add logging to our JSON server that also measures how long a request takes. We can simply create a middleware logger that does exactly this:\r\n\r\n    class RackLogger\r\n      def initialize(app)\r\n        @app = app\r\n      end\r\n    \r\n      def call(env)\r\n        @start = Time.now\r\n        @status, @headers, @body = @app.call(env)\r\n        @duration = ((Time.now - @start).to_f * 1000).round(2)\r\n    \r\n        puts &quot;#{env[&#39;REQUEST_METHOD&#39;]} #{env[&#39;REQUEST_PATH&#39;]} - Took: #{@duration} ms&quot;\r\n        [@status, @headers, @body]\r\n      end\r\n    end\r\n\r\nWhen it gets created, it saves itself a copy of the actual rack application. In our case that&#39;s an instance of our JSONServer. Rack automatically calls the call method on the middleware and expects back a `[status, headers, body]` array, just like our JSONServer returns.\r\n\r\nSo in this middleware, the start point is taken, then the actual call to the JSONServer is made with `@app.call(env)`, then the logger outputs the logging entry and finally returns the response as `[@status, @headers, @body]`.\r\n\r\nTo make our little rackup.ru use this middleware, add a use RackLogger to it like this:\r\n\r\n    class JSONServer\r\n      def call(env)\r\n        [200, {&quot;Content-Type&quot; =&gt; &quot;application\/json&quot;}, [&#39;{ &quot;message&quot; : &quot;Hello!&quot; }&#39;]]\r\n      end\r\n    end\r\n    \r\n    class RackLogger\r\n      def initialize(app)\r\n        @app = app\r\n      end\r\n    \r\n      def call(env)\r\n        @start = Time.now\r\n        @status, @headers, @body = @app.call(env)\r\n        @duration = ((Time.now - @start).to_f * 1000).round(2)\r\n    \r\n        puts &quot;#{env[&#39;REQUEST_METHOD&#39;]} #{env[&#39;REQUEST_PATH&#39;]} - Took: #{@duration} ms&quot;\r\n        [@status, @headers, @body]\r\n      end\r\n    end\r\n    \r\n    use RackLogger\r\n    \r\n    map &#39;\/hello.json&#39; do\r\n      run JSONServer.new\r\n    end   \r\n\r\n           \r\nRestart the server and voila, it outputs a log on every request. Rack allows you to add multiple middlewares that are called in the order they are added. It&#39;s just a great way to add functionality without changing the core of the rack application.\r\n\r\n**Rack - The Gem**\r\n\r\nAlthough rack - first of all - is a convention it also is a gem that provides great functionality. One of them we already used for our JSON server, the rackup command. But there&#39;s more! The rack gem provides little applications for lots of use cases, like serving static files or even whole directories. Let&#39;s see how we serve a simple file, for example a very basic HTML file located at htmls\/index.html:\r\n\r\n    &lt;!DOCTYPE HTML&gt;\r\n      &lt;html&gt;\r\n      &lt;head&gt;\r\n        &lt;title&gt;The Index&lt;\/title&gt;\r\n      &lt;\/head&gt;\r\n    \r\n      &lt;body&gt;\r\n        &lt;p&gt;Index Page&lt;\/p&gt;\r\n      &lt;\/body&gt;\r\n    &lt;\/html&gt;\r\n\r\nWe maybe want to serve this file from the website root, so let&#39;s add the following to our config.ru:\r\n\r\n    map &#39;\/&#39; do\r\n      run Rack::File.new &quot;htmls\/index.html&quot;\r\n    end\r\n\r\nIf we visit `http:\/\/localhost:9292` we see our html file perfectly rendered. That&#39;s was easy, right?\r\n\r\nLet&#39;s add a whole directory of javascript files by creating some javascript files under \/javascripts and adding the following to the config.ru:\r\n\r\n    map &#39;\/javascripts&#39; do\r\n      run Rack::Directory.new &quot;javascripts&quot;\r\n    end\r\n\r\nRestart the server and visit `http:\/\/localhost:9292\/javascript` and you&#39;ll see a list of all javascript files you can include now straight from anywhere.","body":"<p>First of all, Rack is exactly two things:<\/p>\n\n<ul>\n<li>A webserver interface convention<\/li>\n<li>A gem<\/li>\n<\/ul>\n\n<p><strong>Rack - The Webserver Interface<\/strong><\/p>\n\n<p>The very basics of rack is a simple convention. Every rack compliant webserver will always call a call method on an object you give him and serve the result of that method. Rack specifies exactly how this call method has to look like, and what it has to return. That's rack.<\/p>\n\n<p>Let's give it a simple try. I'll use WEBrick as rack compliant webserver, but any of them will do. Let's create a simple web application that returns a JSON string. For this we'll create a file called config.ru. The config.ru will automatically be called by the rack gem's command rackup which will simply run the contents of the config.ru in a rack-compliant webserver. So let's add the following to the config.ru file:<\/p>\n\n<pre><code>class JSONServer\n  def call(env)\n    [200, {\"Content-Type\" =&gt; \"application\/json\"}, ['{ \"message\" : \"Hello!\" }']]\n  end\nend\n\nmap '\/hello.json' do\n  run JSONServer.new\nend\n<\/code><\/pre>\n\n<p>As the convention specifies our server has a method called call that accepts an environment hash and returns an array with the form [status, headers, body] for the webserver to serve. Let's try it out by simply calling rackup. A default rack compliant server, maybe WEBrick or Mongrel will start and immediately wait for requests to serve.<\/p>\n\n<pre><code>$ rackup\n[2012-02-19 22:39:26] INFO  WEBrick 1.3.1\n[2012-02-19 22:39:26] INFO  ruby 1.9.3 (2012-01-17) [x86_64-darwin11.2.0]\n[2012-02-19 22:39:26] INFO  WEBrick::HTTPServer#start: pid=16121 port=9292\n<\/code><\/pre>\n\n<p>Let's test our new JSON server by either curling or visiting the url <code>http:\/\/localhost:9292\/hello.json<\/code> and voila:<\/p>\n\n<pre><code>$ curl http:\/\/localhost:9292\/hello.json\n{ message: \"Hello!\" }\n<\/code><\/pre>\n\n<p>It works. Great! That's the basis for every web framework, be it Rails or Sinatra. At some point they implement a call method, work through all the framework code, and finally return a response in the typical [status, headers, body] form.<\/p>\n\n<p>In Ruby on Rails for example the rack requests hits the <code>ActionDispatch::Routing.Mapper<\/code> class which looks like this:<\/p>\n\n<pre><code>module ActionDispatch\n  module Routing\n    class Mapper\n      ...\n      def initialize(app, constraints, request)\n        @app, @constraints, @request = app, constraints, request\n      end\n\n      def matches?(env)\n        req = @request.new(env)\n        ...\n        return true\n      end\n\n      def call(env)\n        matches?(env) ? @app.call(env) : [ 404, {'X-Cascade' =&gt; 'pass'}, [] ]\n      end\n      ...\n  end\nend\n<\/code><\/pre>\n\n<p>So basically Rails checks, dependent on the env hash if any route matches. If so it passes the env hash on to the application to compute the response, otherwise it immediately responds with a 404. So any webserver that is is compliant with the rack interface convention, is able to serve a fully blown Rails application.<\/p>\n\n<p><strong>Middleware<\/strong><\/p>\n\n<p>Rack also supports the creation of middleware layers. They basically intercept a request, do something with it and pass it on. This is very useful for versatile tasks.<\/p>\n\n<p>Let's say we want to add logging to our JSON server that also measures how long a request takes. We can simply create a middleware logger that does exactly this:<\/p>\n\n<pre><code>class RackLogger\n  def initialize(app)\n    @app = app\n  end\n\n  def call(env)\n    @start = Time.now\n    @status, @headers, @body = @app.call(env)\n    @duration = ((Time.now - @start).to_f * 1000).round(2)\n\n    puts \"#{env['REQUEST_METHOD']} #{env['REQUEST_PATH']} - Took: #{@duration} ms\"\n    [@status, @headers, @body]\n  end\nend\n<\/code><\/pre>\n\n<p>When it gets created, it saves itself a copy of the actual rack application. In our case that's an instance of our JSONServer. Rack automatically calls the call method on the middleware and expects back a <code>[status, headers, body]<\/code> array, just like our JSONServer returns.<\/p>\n\n<p>So in this middleware, the start point is taken, then the actual call to the JSONServer is made with <code>@app.call(env)<\/code>, then the logger outputs the logging entry and finally returns the response as <code>[@status, @headers, @body]<\/code>.<\/p>\n\n<p>To make our little rackup.ru use this middleware, add a use RackLogger to it like this:<\/p>\n\n<pre><code>class JSONServer\n  def call(env)\n    [200, {\"Content-Type\" =&gt; \"application\/json\"}, ['{ \"message\" : \"Hello!\" }']]\n  end\nend\n\nclass RackLogger\n  def initialize(app)\n    @app = app\n  end\n\n  def call(env)\n    @start = Time.now\n    @status, @headers, @body = @app.call(env)\n    @duration = ((Time.now - @start).to_f * 1000).round(2)\n\n    puts \"#{env['REQUEST_METHOD']} #{env['REQUEST_PATH']} - Took: #{@duration} ms\"\n    [@status, @headers, @body]\n  end\nend\n\nuse RackLogger\n\nmap '\/hello.json' do\n  run JSONServer.new\nend   \n<\/code><\/pre>\n\n<p>Restart the server and voila, it outputs a log on every request. Rack allows you to add multiple middlewares that are called in the order they are added. It's just a great way to add functionality without changing the core of the rack application.<\/p>\n\n<p><strong>Rack - The Gem<\/strong><\/p>\n\n<p>Although rack - first of all - is a convention it also is a gem that provides great functionality. One of them we already used for our JSON server, the rackup command. But there's more! The rack gem provides little applications for lots of use cases, like serving static files or even whole directories. Let's see how we serve a simple file, for example a very basic HTML file located at htmls\/index.html:<\/p>\n\n<pre><code>&lt;!DOCTYPE HTML&gt;\n  &lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;The Index&lt;\/title&gt;\n  &lt;\/head&gt;\n\n  &lt;body&gt;\n    &lt;p&gt;Index Page&lt;\/p&gt;\n  &lt;\/body&gt;\n&lt;\/html&gt;\n<\/code><\/pre>\n\n<p>We maybe want to serve this file from the website root, so let's add the following to our config.ru:<\/p>\n\n<pre><code>map '\/' do\n  run Rack::File.new \"htmls\/index.html\"\nend\n<\/code><\/pre>\n\n<p>If we visit <code>http:\/\/localhost:9292<\/code> we see our html file perfectly rendered. That's was easy, right?<\/p>\n\n<p>Let's add a whole directory of javascript files by creating some javascript files under \/javascripts and adding the following to the config.ru:<\/p>\n\n<pre><code>map '\/javascripts' do\n  run Rack::Directory.new \"javascripts\"\nend\n<\/code><\/pre>\n\n<p>Restart the server and visit <code>http:\/\/localhost:9292\/javascript<\/code> and you'll see a list of all javascript files you can include now straight from anywhere.<\/p>\n"},{"owner":{"account_id":1207026,"reputation":2601,"user_id":1176412,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/i.stack.imgur.com\/Qzbmd.jpg?s=256&g=1","display_name":"odemolliens","link":"https:\/\/stackoverflow.com\/users\/1176412\/odemolliens"},"is_accepted":false,"community_owned_date":null,"score":83,"last_activity_date":1456393493,"last_edit_date":1495542392.0,"creation_date":1456212333,"answer_id":35571242,"question_id":24652996,"content_license":"CC BY-SA 3.0","body_markdown":"Uninstall homebrew:\r\n\r\n     ruby -e &quot;$(curl -fsSL https:\/\/raw.githubusercontent.com\/Homebrew\/install\/master\/uninstall)&quot;\r\n\r\nThen reinstall\r\n\r\n    ruby -e &quot;$(curl -fsSL https:\/\/raw.githubusercontent.com\/Homebrew\/install\/master\/install)&quot;\r\n\r\n\r\n**Warning: This script will remove: \/Library\/Caches\/Homebrew\/** - thks [benjaminsila][1]\r\n\r\n\r\n  [1]: https:\/\/stackoverflow.com\/users\/4971736\/benjaminsila","body":"<p>Uninstall homebrew:<\/p>\n\n<pre><code> ruby -e \"$(curl -fsSL https:\/\/raw.githubusercontent.com\/Homebrew\/install\/master\/uninstall)\"\n<\/code><\/pre>\n\n<p>Then reinstall<\/p>\n\n<pre><code>ruby -e \"$(curl -fsSL https:\/\/raw.githubusercontent.com\/Homebrew\/install\/master\/install)\"\n<\/code><\/pre>\n\n<p><strong>Warning: This script will remove: \/Library\/Caches\/Homebrew\/<\/strong> - thks <a href=\"https:\/\/stackoverflow.com\/users\/4971736\/benjaminsila\">benjaminsila<\/a><\/p>\n"},{"owner":{"account_id":109636,"reputation":79271,"user_id":290394,"user_type":"registered","accept_rate":92,"profile_image":"https:\/\/www.gravatar.com\/avatar\/d7908f05c89e965f6bc5308ad6f41256?s=256&d=identicon&r=PG","display_name":"steenslag","link":"https:\/\/stackoverflow.com\/users\/290394\/steenslag"},"is_accepted":false,"community_owned_date":null,"score":81,"last_activity_date":1452894235,"last_edit_date":1452894235.0,"creation_date":1357921464,"answer_id":14282353,"question_id":827649,"content_license":"CC BY-SA 3.0","body_markdown":"The spaceship method is useful when you define it in your own class and include the [Comparable module][1]. Your class then gets the `&gt;, &lt; , &gt;=, &lt;=, ==, and between?` methods for free.\r\n\r\n    class Card\r\n      include Comparable\r\n      attr_reader :value\r\n    \r\n      def initialize(value)\r\n        @value = value\r\n      end\r\n    \r\n      def &lt;=&gt; (other) #1 if self&gt;other; 0 if self==other; -1 if self&lt;other\r\n        self.value &lt;=&gt; other.value\r\n      end\r\n    \r\n    end\r\n    \r\n    a = Card.new(7)\r\n    b = Card.new(10)\r\n    c = Card.new(8)\r\n    \r\n    puts a &gt; b # false\r\n    puts c.between?(a,b) # true\r\n\r\n    # Array#sort uses &lt;=&gt; :\r\n    p [a,b,c].sort # [#&lt;Card:0x0000000242d298 @value=7&gt;, #&lt;Card:0x0000000242d248 @value=8&gt;, #&lt;Card:0x0000000242d270 @value=10&gt;]\r\n\r\n\r\n\r\n  [1]: http:\/\/www.ruby-doc.org\/core\/Comparable.html\r\n","body":"<p>The spaceship method is useful when you define it in your own class and include the <a href=\"http:\/\/www.ruby-doc.org\/core\/Comparable.html\">Comparable module<\/a>. Your class then gets the <code>&gt;, &lt; , &gt;=, &lt;=, ==, and between?<\/code> methods for free.<\/p>\n\n<pre><code>class Card\n  include Comparable\n  attr_reader :value\n\n  def initialize(value)\n    @value = value\n  end\n\n  def &lt;=&gt; (other) #1 if self&gt;other; 0 if self==other; -1 if self&lt;other\n    self.value &lt;=&gt; other.value\n  end\n\nend\n\na = Card.new(7)\nb = Card.new(10)\nc = Card.new(8)\n\nputs a &gt; b # false\nputs c.between?(a,b) # true\n\n# Array#sort uses &lt;=&gt; :\np [a,b,c].sort # [#&lt;Card:0x0000000242d298 @value=7&gt;, #&lt;Card:0x0000000242d248 @value=8&gt;, #&lt;Card:0x0000000242d270 @value=10&gt;]\n<\/code><\/pre>\n"},{"owner":{"account_id":5050236,"reputation":11665,"user_id":4055042,"user_type":"registered","accept_rate":76,"profile_image":"https:\/\/www.gravatar.com\/avatar\/b9d538e8558c68a996faafeb11e795a9?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"SRack","link":"https:\/\/stackoverflow.com\/users\/4055042\/srack"},"is_accepted":true,"community_owned_date":null,"score":80,"last_activity_date":1563178683,"last_edit_date":1563178683.0,"creation_date":1561710063,"answer_id":56803347,"question_id":4209384,"content_license":"CC BY-SA 4.0","body_markdown":"## Ruby 2.5+\r\n\r\nAs of Ruby 2.5 you can use `delete_suffix` or `delete_suffix!` to achieve this in a fast and readable manner.\r\n\r\nThe docs on the methods are [here](https:\/\/ruby-doc.org\/core-2.5.1\/String.html#method-i-delete_suffix).\r\n\r\nIf you know what the suffix is, this is idiomatic (and I&#39;d argue, even more readable than other answers here):\r\n\r\n    &#39;abc123&#39;.delete_suffix(&#39;123&#39;)     # =&gt; &quot;abc&quot;\r\n    &#39;abc123&#39;.delete_suffix!(&#39;123&#39;)    # =&gt; &quot;abc&quot;\r\n\r\nIt&#39;s even significantly faster (almost _40%_ with the bang method) than the top answer. Here&#39;s the result of the same benchmark:\r\n\r\n                         user     system      total        real\r\n    chomp            0.949823   0.001025   0.950848 (  0.951941)\r\n    range            1.874237   0.001472   1.875709 (  1.876820)\r\n    delete_suffix    0.721699   0.000945   0.722644 (  0.723410)\r\n    delete_suffix!   0.650042   0.000714   0.650756 (  0.651332)\r\n\r\nI hope this is useful - note the method doesn&#39;t currently accept a regex so if you don&#39;t know the suffix it&#39;s not viable for the time being. However, as the accepted answer (_update: at the time of writing_) dictates the same, I thought this might be useful to some people.\r\n\r\n","body":"<h2>Ruby 2.5+<\/h2>\n\n<p>As of Ruby 2.5 you can use <code>delete_suffix<\/code> or <code>delete_suffix!<\/code> to achieve this in a fast and readable manner.<\/p>\n\n<p>The docs on the methods are <a href=\"https:\/\/ruby-doc.org\/core-2.5.1\/String.html#method-i-delete_suffix\" rel=\"noreferrer\">here<\/a>.<\/p>\n\n<p>If you know what the suffix is, this is idiomatic (and I'd argue, even more readable than other answers here):<\/p>\n\n<pre><code>'abc123'.delete_suffix('123')     # =&gt; \"abc\"\n'abc123'.delete_suffix!('123')    # =&gt; \"abc\"\n<\/code><\/pre>\n\n<p>It's even significantly faster (almost <em>40%<\/em> with the bang method) than the top answer. Here's the result of the same benchmark:<\/p>\n\n<pre><code>                     user     system      total        real\nchomp            0.949823   0.001025   0.950848 (  0.951941)\nrange            1.874237   0.001472   1.875709 (  1.876820)\ndelete_suffix    0.721699   0.000945   0.722644 (  0.723410)\ndelete_suffix!   0.650042   0.000714   0.650756 (  0.651332)\n<\/code><\/pre>\n\n<p>I hope this is useful - note the method doesn't currently accept a regex so if you don't know the suffix it's not viable for the time being. However, as the accepted answer (<em>update: at the time of writing<\/em>) dictates the same, I thought this might be useful to some people.<\/p>\n"},{"owner":{"account_id":34703,"reputation":138902,"user_id":98117,"user_type":"registered","accept_rate":80,"profile_image":"https:\/\/www.gravatar.com\/avatar\/4704a2a1d16b276070962ee01fb6149f?s=256&d=identicon&r=PG","display_name":"hammar","link":"https:\/\/stackoverflow.com\/users\/98117\/hammar"},"is_accepted":false,"community_owned_date":null,"score":79,"last_activity_date":1312064420,"last_edit_date":null,"creation_date":1312064420,"answer_id":6886316,"question_id":6885990,"content_license":"CC BY-SA 3.0","body_markdown":"As others have pointed out, `params` values can come from the query string of a GET request, or the form data of a POST request, but there&#39;s also a third place they can come from: The path of the URL.\r\n\r\nAs you might know, Rails uses something called routes to direct requests to their corresponding controller actions. These routes may contain segments that are extracted from the URL and put into `params`. For example, if you have a route like this:\r\n\r\n    match &#39;products\/:id&#39;, ...\r\n\r\nThen a request to a URL like `http:\/\/example.com\/products\/42` will set `params[:id]` to `42`.","body":"<p>As others have pointed out, <code>params<\/code> values can come from the query string of a GET request, or the form data of a POST request, but there's also a third place they can come from: The path of the URL.<\/p>\n\n<p>As you might know, Rails uses something called routes to direct requests to their corresponding controller actions. These routes may contain segments that are extracted from the URL and put into <code>params<\/code>. For example, if you have a route like this:<\/p>\n\n<pre><code>match 'products\/:id', ...\n<\/code><\/pre>\n\n<p>Then a request to a URL like <code>http:\/\/example.com\/products\/42<\/code> will set <code>params[:id]<\/code> to <code>42<\/code>.<\/p>\n"}]
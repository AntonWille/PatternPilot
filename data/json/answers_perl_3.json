[{"owner":{"account_id":41067,"reputation":127534,"user_id":119280,"user_type":"registered","accept_rate":73,"profile_image":"https:\/\/www.gravatar.com\/avatar\/47b88555c03aad35b076726767fcfa35?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"DVK","link":"https:\/\/stackoverflow.com\/users\/119280\/dvk"},"is_accepted":false,"score":12,"last_activity_date":1275097516,"last_edit_date":1275097516.0,"creation_date":1275097128,"answer_id":2933418,"question_id":2933347,"content_license":"CC BY-SA 2.5","body_markdown":"You need to provide a lot more context. There are more efficient ways of doing that ranging from:\r\n\r\n - Go outside of Perl and use shell (`sort` + `comm`) \r\n\r\n - `map` one array into a Perl hash and then loop over the other one checking hash membership. This has linear complexity (&quot;M+N&quot; - basically loop over each array once) as opposed to nested loop which has &quot;M*N&quot; complexity)\r\n\r\n   Example:\r\n\r\n        my %second = map {$_=&gt;1} @second;\r\n        my @only_in_first = grep { !$second{$_} } @first; \r\n        # use a foreach loop with `last` instead of &quot;grep&quot; \r\n        # if you only want yes\/no answer instead of full list\r\n\r\n\r\n - Use a Perl module that does the last bullet point for you (List::Compare was mentioned in comments)\r\n\r\n - Do it based on timestamps of when elements were added if the volume is very large and you need to re-compare often. A few thousand elements is not really big enough, but I recently had to diff 100k sized lists.","body":"<p>You need to provide a lot more context. There are more efficient ways of doing that ranging from:<\/p>\n\n<ul>\n<li><p>Go outside of Perl and use shell (<code>sort<\/code> + <code>comm<\/code>) <\/p><\/li>\n<li><p><code>map<\/code> one array into a Perl hash and then loop over the other one checking hash membership. This has linear complexity (\"M+N\" - basically loop over each array once) as opposed to nested loop which has \"M*N\" complexity)<\/p>\n\n<p>Example:<\/p>\n\n<pre><code>my %second = map {$_=&gt;1} @second;\nmy @only_in_first = grep { !$second{$_} } @first; \n# use a foreach loop with `last` instead of \"grep\" \n# if you only want yes\/no answer instead of full list\n<\/code><\/pre><\/li>\n<li><p>Use a Perl module that does the last bullet point for you (List::Compare was mentioned in comments)<\/p><\/li>\n<li><p>Do it based on timestamps of when elements were added if the volume is very large and you need to re-compare often. A few thousand elements is not really big enough, but I recently had to diff 100k sized lists.<\/p><\/li>\n<\/ul>\n"},{"owner":{"account_id":29074,"reputation":64398,"user_id":78259,"user_type":"registered","accept_rate":53,"profile_image":"https:\/\/www.gravatar.com\/avatar\/844c572938eaad1e44eb084fb39416f9?s=256&d=identicon&r=PG","display_name":"Chas. Owens","link":"https:\/\/stackoverflow.com\/users\/78259\/chas-owens"},"is_accepted":false,"score":12,"last_activity_date":1276258097,"last_edit_date":1276258097.0,"creation_date":1276255943,"answer_id":3022322,"question_id":3019925,"content_license":"CC BY-SA 2.5","body_markdown":"The [`map`][1] function is not a loop in Perl.  This can be clearly seen by the failure of [`next`][2], [`redo`][3], and [`last`][4] inside a `map`:\r\n\r\n    perl -le &#39;@a = map { next if $_ %2; } 1 .. 5; print for @a&#39;\r\n    Can&#39;t &quot;next&quot; outside a loop block at -e line 1.\r\n\r\nTo achieve the desired affect in a `map`, you must return an empty list:\r\n\r\n    perl -le &#39;@a = map { $_ %2 ? () : $_ } 1 .. 5; print for @a&#39;\r\n    2\r\n    4\r\n\r\nI think transformation is better name for constructs like `map`.  It transforms one list into another.  A similar function to `map` is [`List::Util::reduce`][5], but instead of transforming a list into another list, it transforms a list into a scalar value.  By using the word transformation, we can talk about the common aspects of these two higher order functions.\r\n\r\nThat said, it works by visiting every member of the list.  This means it behaves much like a loop, and depending on what your definition of &quot;a loop&quot; is it might qualify.  Note, my definition means that there is no loop in this code either:\r\n\r\n    #!\/usr\/bin\/perl\r\n    \r\n    use strict;\r\n    use warnings;\r\n    \r\n    my $i = 0;\r\n    FOO:\r\n    \tprint &quot;hello world!\\n&quot;;\r\n    goto FOO unless ++$i == 5;\r\n\r\nPerl actually does [define the word loop][6] in its documentation:\r\n\r\n       loop\r\n           A construct that performs something repeatedly, like a roller\r\n           coaster.\r\n\r\nBy this definition, `map` is a loop because it preforms its block repeatedly; however, it also defines &quot;loop control statement&quot; and &quot;loop label&quot;:\r\n\r\n       loop control statement\r\n           Any statement within the body of a loop that can make a loop\r\n           prematurely stop looping or skip an &quot;iteration&quot;.  Generally you\r\n           shouldn&#39;t try this on roller coasters.\r\n\r\n       loop label\r\n           A kind of key or name attached to a loop (or roller coaster) so\r\n           that loop control statements can talk about which loop they want to\r\n           control.\r\n\r\nI believe it is imprecise to call `map` a loop because `next` and its kin are defined as [loop control statements][7] and they cannot control `map`.\r\n\r\nThis is all just playing with words though.  Describing `map` as like-a-loop is a perfectly valid way of introducing someone to it.  Even the documentation for `map` uses a `foreach` loop as part of its example:\r\n\r\n                   %hash = map { get_a_key_for($_) =&gt; $_ } @array;\r\n\r\n               is just a funny way to write\r\n\r\n                   %hash = ();\r\n                   foreach (@array) {\r\n                       $hash{get_a_key_for($_)} = $_;\r\n                   }\r\n\r\nIt all depends on the context though.  It is useful to describe multiplication to someone as repeated addition when you are trying to get him or her to understand the concept, but you wouldn&#39;t want him or her to continue to think of it that way.  You would want him or her to learn the rules of multiplication instead of always translating back to the rules of addition.\r\n\r\n  [1]: http:\/\/perldoc.perl.org\/functions\/map.html\r\n  [2]: http:\/\/perldoc.perl.org\/functions\/next.html\r\n  [3]: http:\/\/perldoc.perl.org\/functions\/redo.html\r\n  [4]: http:\/\/perldoc.perl.org\/functions\/last.html\r\n  [5]: http:\/\/perldoc.perl.org\/List\/Util.html#reduce-BLOCK-LIST\r\n  [6]: http:\/\/perldoc.perl.org\/perlglossary.html#loop\r\n  [7]: http:\/\/perldoc.perl.org\/perlsyn.html#Loop-Control","body":"<p>The <a href=\"http:\/\/perldoc.perl.org\/functions\/map.html\" rel=\"noreferrer\"><code>map<\/code><\/a> function is not a loop in Perl.  This can be clearly seen by the failure of <a href=\"http:\/\/perldoc.perl.org\/functions\/next.html\" rel=\"noreferrer\"><code>next<\/code><\/a>, <a href=\"http:\/\/perldoc.perl.org\/functions\/redo.html\" rel=\"noreferrer\"><code>redo<\/code><\/a>, and <a href=\"http:\/\/perldoc.perl.org\/functions\/last.html\" rel=\"noreferrer\"><code>last<\/code><\/a> inside a <code>map<\/code>:<\/p>\n\n<pre><code>perl -le '@a = map { next if $_ %2; } 1 .. 5; print for @a'\nCan't \"next\" outside a loop block at -e line 1.\n<\/code><\/pre>\n\n<p>To achieve the desired affect in a <code>map<\/code>, you must return an empty list:<\/p>\n\n<pre><code>perl -le '@a = map { $_ %2 ? () : $_ } 1 .. 5; print for @a'\n2\n4\n<\/code><\/pre>\n\n<p>I think transformation is better name for constructs like <code>map<\/code>.  It transforms one list into another.  A similar function to <code>map<\/code> is <a href=\"http:\/\/perldoc.perl.org\/List\/Util.html#reduce-BLOCK-LIST\" rel=\"noreferrer\"><code>List::Util::reduce<\/code><\/a>, but instead of transforming a list into another list, it transforms a list into a scalar value.  By using the word transformation, we can talk about the common aspects of these two higher order functions.<\/p>\n\n<p>That said, it works by visiting every member of the list.  This means it behaves much like a loop, and depending on what your definition of \"a loop\" is it might qualify.  Note, my definition means that there is no loop in this code either:<\/p>\n\n<pre><code>#!\/usr\/bin\/perl\n\nuse strict;\nuse warnings;\n\nmy $i = 0;\nFOO:\n    print \"hello world!\\n\";\ngoto FOO unless ++$i == 5;\n<\/code><\/pre>\n\n<p>Perl actually does <a href=\"http:\/\/perldoc.perl.org\/perlglossary.html#loop\" rel=\"noreferrer\">define the word loop<\/a> in its documentation:<\/p>\n\n<pre><code>   loop\n       A construct that performs something repeatedly, like a roller\n       coaster.\n<\/code><\/pre>\n\n<p>By this definition, <code>map<\/code> is a loop because it preforms its block repeatedly; however, it also defines \"loop control statement\" and \"loop label\":<\/p>\n\n<pre><code>   loop control statement\n       Any statement within the body of a loop that can make a loop\n       prematurely stop looping or skip an \"iteration\".  Generally you\n       shouldn't try this on roller coasters.\n\n   loop label\n       A kind of key or name attached to a loop (or roller coaster) so\n       that loop control statements can talk about which loop they want to\n       control.\n<\/code><\/pre>\n\n<p>I believe it is imprecise to call <code>map<\/code> a loop because <code>next<\/code> and its kin are defined as <a href=\"http:\/\/perldoc.perl.org\/perlsyn.html#Loop-Control\" rel=\"noreferrer\">loop control statements<\/a> and they cannot control <code>map<\/code>.<\/p>\n\n<p>This is all just playing with words though.  Describing <code>map<\/code> as like-a-loop is a perfectly valid way of introducing someone to it.  Even the documentation for <code>map<\/code> uses a <code>foreach<\/code> loop as part of its example:<\/p>\n\n<pre><code>               %hash = map { get_a_key_for($_) =&gt; $_ } @array;\n\n           is just a funny way to write\n\n               %hash = ();\n               foreach (@array) {\n                   $hash{get_a_key_for($_)} = $_;\n               }\n<\/code><\/pre>\n\n<p>It all depends on the context though.  It is useful to describe multiplication to someone as repeated addition when you are trying to get him or her to understand the concept, but you wouldn't want him or her to continue to think of it that way.  You would want him or her to learn the rules of multiplication instead of always translating back to the rules of addition.<\/p>\n"},{"owner":{"account_id":1370770,"reputation":13842,"user_id":1306033,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/b2173914b52cdfca88c60aa3bb1bd43a?s=256&d=identicon&r=PG","display_name":"Michael Slade","link":"https:\/\/stackoverflow.com\/users\/1306033\/michael-slade"},"is_accepted":false,"score":12,"last_activity_date":1335894453,"last_edit_date":1335894453.0,"creation_date":1335443243,"answer_id":10333397,"question_id":10333275,"content_license":"CC BY-SA 3.0","body_markdown":"This is a special case.  An empty condition expression defaults to just `true`, which means &quot;loop forever, or until a `break`.  In C (and perl) the idiom\r\n\r\n    for(;;) {\r\n       \/\/ Neverending fun\r\n    }\r\n\r\nhas the same effect for the same reason.\r\n\r\nThere doesn&#39;t appear to be any mention of this in the official perl docs, and yet there is a special rule in the parser for it.  Perhaps it&#39;s because nobody uses it :)\r\n\r\nThe `for(;;)` idiom is less uncommon though.\r\n\r\n","body":"<p>This is a special case.  An empty condition expression defaults to just <code>true<\/code>, which means \"loop forever, or until a <code>break<\/code>.  In C (and perl) the idiom<\/p>\n\n<pre><code>for(;;) {\n   \/\/ Neverending fun\n}\n<\/code><\/pre>\n\n<p>has the same effect for the same reason.<\/p>\n\n<p>There doesn't appear to be any mention of this in the official perl docs, and yet there is a special rule in the parser for it.  Perhaps it's because nobody uses it :)<\/p>\n\n<p>The <code>for(;;)<\/code> idiom is less uncommon though.<\/p>\n"},{"owner":{"account_id":3753545,"reputation":121,"user_id":3120494,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/yfT7J.jpg?s=256&g=1","display_name":"Eric","link":"https:\/\/stackoverflow.com\/users\/3120494\/eric"},"is_accepted":false,"score":12,"last_activity_date":1387481382,"last_edit_date":null,"creation_date":1387481382,"answer_id":20690128,"question_id":8963400,"content_license":"CC BY-SA 3.0","body_markdown":"I like...\r\n\r\n    @data = `cat \/var\/tmp\/somefile`;\r\n\r\nIt&#39;s not as glamorous as others, but, it works all the same.  And...\r\n\r\n    $todays_data = &#39;\/var\/tmp\/somefile&#39; ;\r\n    open INFILE, &quot;$todays_data&quot; ; \r\n    @data = &lt;INFILE&gt; ; \r\n    close INFILE ;\r\n\r\nCheers.","body":"<p>I like...<\/p>\n\n<pre><code>@data = `cat \/var\/tmp\/somefile`;\n<\/code><\/pre>\n\n<p>It's not as glamorous as others, but, it works all the same.  And...<\/p>\n\n<pre><code>$todays_data = '\/var\/tmp\/somefile' ;\nopen INFILE, \"$todays_data\" ; \n@data = &lt;INFILE&gt; ; \nclose INFILE ;\n<\/code><\/pre>\n\n<p>Cheers.<\/p>\n"},{"owner":{"account_id":481416,"reputation":356200,"user_id":895245,"user_type":"registered","accept_rate":49,"profile_image":"https:\/\/i.stack.imgur.com\/5Powi.jpg?s=256&g=1","display_name":"Ciro Santilli OurBigBook.com","link":"https:\/\/stackoverflow.com\/users\/895245\/ciro-santilli-ourbigbook-com"},"is_accepted":false,"score":12,"last_activity_date":1563367255,"last_edit_date":1563367255.0,"creation_date":1486829183,"answer_id":42178053,"question_id":2872089,"content_license":"CC BY-SA 4.0","body_markdown":"**`python -m trace -t main.py`**\r\n\r\nTest program:\r\n\r\nmain.py\r\n\r\n    from a import g\r\n    def f(i):\r\n        g(i)\r\n    for i in range(3):\r\n        f(i)\r\n\r\na.py\r\n\r\n    def g(i):\r\n        print i\r\n\r\nOutput:\r\n\r\n     --- modulename: main, funcname: &lt;module&gt;\r\n    main.py(1): from a import g\r\n     --- modulename: a, funcname: &lt;module&gt;\r\n    a.py(1): def g(i):\r\n    main.py(2): def f(i):\r\n    main.py(4): for i in range(3):\r\n    main.py(5):     f(i)\r\n     --- modulename: main, funcname: f\r\n    main.py(3):     g(i)\r\n     --- modulename: a, funcname: g\r\n    a.py(2):     print i\r\n    0\r\n    main.py(4): for i in range(3):\r\n    main.py(5):     f(i)\r\n     --- modulename: main, funcname: f\r\n    main.py(3):     g(i)\r\n     --- modulename: a, funcname: g\r\n    a.py(2):     print i\r\n    1\r\n    main.py(4): for i in range(3):\r\n    main.py(5):     f(i)\r\n     --- modulename: main, funcname: f\r\n    main.py(3):     g(i)\r\n     --- modulename: a, funcname: g\r\n    a.py(2):     print i\r\n    2\r\n    main.py(4): for i in range(3):\r\n     --- modulename: trace, funcname: _unsettrace\r\n    trace.py(80):         sys.settrace(None)\r\n\r\nTested on Ubuntu 16.10, Python 2.7.12.","body":"<p><strong><code>python -m trace -t main.py<\/code><\/strong><\/p>\n\n<p>Test program:<\/p>\n\n<p>main.py<\/p>\n\n<pre><code>from a import g\ndef f(i):\n    g(i)\nfor i in range(3):\n    f(i)\n<\/code><\/pre>\n\n<p>a.py<\/p>\n\n<pre><code>def g(i):\n    print i\n<\/code><\/pre>\n\n<p>Output:<\/p>\n\n<pre><code> --- modulename: main, funcname: &lt;module&gt;\nmain.py(1): from a import g\n --- modulename: a, funcname: &lt;module&gt;\na.py(1): def g(i):\nmain.py(2): def f(i):\nmain.py(4): for i in range(3):\nmain.py(5):     f(i)\n --- modulename: main, funcname: f\nmain.py(3):     g(i)\n --- modulename: a, funcname: g\na.py(2):     print i\n0\nmain.py(4): for i in range(3):\nmain.py(5):     f(i)\n --- modulename: main, funcname: f\nmain.py(3):     g(i)\n --- modulename: a, funcname: g\na.py(2):     print i\n1\nmain.py(4): for i in range(3):\nmain.py(5):     f(i)\n --- modulename: main, funcname: f\nmain.py(3):     g(i)\n --- modulename: a, funcname: g\na.py(2):     print i\n2\nmain.py(4): for i in range(3):\n --- modulename: trace, funcname: _unsettrace\ntrace.py(80):         sys.settrace(None)\n<\/code><\/pre>\n\n<p>Tested on Ubuntu 16.10, Python 2.7.12.<\/p>\n"},{"owner":{"account_id":5958,"reputation":4532,"user_id":9832,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/ac0051ccbf2115f581f5da62fb56c219?s=256&d=identicon&r=PG","display_name":"Dave Rolsky","link":"https:\/\/stackoverflow.com\/users\/9832\/dave-rolsky"},"is_accepted":false,"score":11,"last_activity_date":1227649349,"last_edit_date":null,"creation_date":1227649349,"answer_id":318979,"question_id":318789,"content_license":"CC BY-SA 2.5","body_markdown":"If your files are small enough that reading the whole thing into memory is feasible, use [File::Slurp][1]. It reads and writes full files with a very simple API, plus it does all the error checking so you don&#39;t have to.\r\n\r\n  [1]: http:\/\/search.cpan.org\/dist\/File-Slurp","body":"<p>If your files are small enough that reading the whole thing into memory is feasible, use <a href=\"http:\/\/search.cpan.org\/dist\/File-Slurp\" rel=\"noreferrer\">File::Slurp<\/a>. It reads and writes full files with a very simple API, plus it does all the error checking so you don't have to.<\/p>\n"},{"owner":{"account_id":20051,"reputation":122533,"user_id":47529,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/i.stack.imgur.com\/41zJA.png?s=256&g=1","display_name":"chaos","link":"https:\/\/stackoverflow.com\/users\/47529\/chaos"},"is_accepted":false,"score":11,"last_activity_date":1235141889,"last_edit_date":1235141889.0,"creation_date":1235141474,"answer_id":569812,"question_id":569772,"content_license":"CC BY-SA 2.5","body_markdown":"The closest equivalent is, unfortunately, going old-school:\r\n\r\n    for(my $ix = 0; $ix &lt;= $#list; $ix += 2) {\r\n        my $i = $list[$ix];\r\n        my $j = $list[$ix + 1];\r\n        print &quot;i: $i, j:$j\\n&quot;;\r\n    }\r\n\r\nI like Jack M&#39;s answer better, really, though I would write it in sexier Perl:\r\n\r\n    while(@list) {\r\n        my $i = shift @list;\r\n        my $j = shift @list;\r\n        print &quot;i: $i, j:$j\\n&quot;;\r\n    }\r\n\r\n","body":"<p>The closest equivalent is, unfortunately, going old-school:<\/p>\n\n<pre><code>for(my $ix = 0; $ix &lt;= $#list; $ix += 2) {\n    my $i = $list[$ix];\n    my $j = $list[$ix + 1];\n    print \"i: $i, j:$j\\n\";\n}\n<\/code><\/pre>\n\n<p>I like Jack M's answer better, really, though I would write it in sexier Perl:<\/p>\n\n<pre><code>while(@list) {\n    my $i = shift @list;\n    my $j = shift @list;\n    print \"i: $i, j:$j\\n\";\n}\n<\/code><\/pre>\n"},{"owner":{"account_id":7552,"reputation":5034,"user_id":13164,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/70a8bed0bcffe5a5e700d1dc6007e3a6?s=256&d=identicon&r=PG","display_name":"tsee","link":"https:\/\/stackoverflow.com\/users\/13164\/tsee"},"is_accepted":false,"score":11,"last_activity_date":1261403853,"last_edit_date":null,"creation_date":1261403853,"answer_id":1940230,"question_id":1940182,"content_license":"CC BY-SA 2.5","body_markdown":"When you load a module &quot;Foo&quot; with `use Foo` or `require()`, perl executes the `Foo.pm` file like an ordinary script. It expects it to return a true value if the module was loaded correctly. The `1;` does that. It could be `2;` or `&quot;hey there&quot;;` just as well.\r\n\r\nThe block around the declaration of `$somevar` and the function `Somesub` limits the scope of the variable. That way, it is only accessible from `Somesub` and doesn&#39;t get cleared on each invocation of `Somesub` (which would be the case if it was declared inside the function body). This idiom has been superseded in recent versions of perl (5.10 and up) which have the [state][1] keyword.\r\n\r\n\r\n  [1]: http:\/\/perldoc.perl.org\/functions\/state.html","body":"<p>When you load a module \"Foo\" with <code>use Foo<\/code> or <code>require()<\/code>, perl executes the <code>Foo.pm<\/code> file like an ordinary script. It expects it to return a true value if the module was loaded correctly. The <code>1;<\/code> does that. It could be <code>2;<\/code> or <code>\"hey there\";<\/code> just as well.<\/p>\n\n<p>The block around the declaration of <code>$somevar<\/code> and the function <code>Somesub<\/code> limits the scope of the variable. That way, it is only accessible from <code>Somesub<\/code> and doesn't get cleared on each invocation of <code>Somesub<\/code> (which would be the case if it was declared inside the function body). This idiom has been superseded in recent versions of perl (5.10 and up) which have the <a href=\"http:\/\/perldoc.perl.org\/functions\/state.html\" rel=\"noreferrer\">state<\/a> keyword.<\/p>\n"},{"owner":{"account_id":22584,"reputation":42051,"user_id":55857,"user_type":"registered","accept_rate":86,"profile_image":"https:\/\/www.gravatar.com\/avatar\/9cc59902c5433de334920d378626b9d8?s=256&d=identicon&r=PG","display_name":"FMc","link":"https:\/\/stackoverflow.com\/users\/55857\/fmc"},"is_accepted":false,"score":11,"last_activity_date":1276519026,"last_edit_date":1495540817.0,"creation_date":1276262476,"answer_id":3023053,"question_id":3019925,"content_license":"CC BY-SA 3.0","body_markdown":"Your question turns on the issue of classification. At least under one interpretation, asking whether `map` is a loop is like asking whether `map` is a subset of &quot;Loop&quot;. Framed in this way, I think the answer is no. Although `map` and Loop have many things in common, there are important differences.\r\n\r\n - **Loop controls**: [Chas. Owens makes a strong case][1] that Perl loops are subject to loop controls like `next` and `last`, while `map` is not.\r\n - **Return values**: the purpose of `map` is its return value; with loops, not so much.\r\n\r\nWe encounter relationships like this all the time in the real world -- things that have much in common with each other, but with neither being a perfect subset of the other.\r\n\r\n     -----------------------------------------\r\n    |Things that iterate?                     |\r\n    |                                         |\r\n    |      ------------------                 |\r\n    |     |map()             |                |\r\n    |     |                  |                |\r\n    |     |          --------|----------      |\r\n    |     |          |       |          |     |\r\n    |     |          |       |          |     |\r\n    |      ------------------           |     |\r\n    |                |                  |     |\r\n    |                |              Loop|     |\r\n    |                 ------------------      |\r\n    |                                         |\r\n     -----------------------------------------\r\n\r\n\r\n  [1]: https:\/\/stackoverflow.com\/questions\/3019925\/is-map-a-loop\/3022322#3022322","body":"<p>Your question turns on the issue of classification. At least under one interpretation, asking whether <code>map<\/code> is a loop is like asking whether <code>map<\/code> is a subset of \"Loop\". Framed in this way, I think the answer is no. Although <code>map<\/code> and Loop have many things in common, there are important differences.<\/p>\n\n<ul>\n<li><strong>Loop controls<\/strong>: <a href=\"https:\/\/stackoverflow.com\/questions\/3019925\/is-map-a-loop\/3022322#3022322\">Chas. Owens makes a strong case<\/a> that Perl loops are subject to loop controls like <code>next<\/code> and <code>last<\/code>, while <code>map<\/code> is not.<\/li>\n<li><strong>Return values<\/strong>: the purpose of <code>map<\/code> is its return value; with loops, not so much.<\/li>\n<\/ul>\n\n<p>We encounter relationships like this all the time in the real world -- things that have much in common with each other, but with neither being a perfect subset of the other.<\/p>\n\n<pre><code> -----------------------------------------\n|Things that iterate?                     |\n|                                         |\n|      ------------------                 |\n|     |map()             |                |\n|     |                  |                |\n|     |          --------|----------      |\n|     |          |       |          |     |\n|     |          |       |          |     |\n|      ------------------           |     |\n|                |                  |     |\n|                |              Loop|     |\n|                 ------------------      |\n|                                         |\n -----------------------------------------\n<\/code><\/pre>\n"},{"owner":{"account_id":125690,"reputation":23472,"user_id":321622,"user_type":"registered","accept_rate":50,"profile_image":"https:\/\/www.gravatar.com\/avatar\/fd3079dd056e89f516bda6d8de136ca0?s=256&d=identicon&r=PG","display_name":"John","link":"https:\/\/stackoverflow.com\/users\/321622\/john"},"is_accepted":false,"score":11,"last_activity_date":1450558895,"last_edit_date":1450558895.0,"creation_date":1281642142,"answer_id":3471398,"question_id":3470447,"content_license":"CC BY-SA 3.0","body_markdown":"Your code is very un R-like and is one of the reasons it&#39;s so slow.  I haven&#39;t optimized the code below for maximum speed, only R&#39;ness.\r\n\r\n\r\n    n &lt;- 10000\r\n\r\n    keys &lt;- matrix( sample(letters, 3*n, replace = TRUE), nrow = 3 )\r\n    keys &lt;- apply(keys, 2, paste0, collapse = &#39;&#39;)\r\n    value &lt;- floor(1000*runif(n))\r\n    testHash &lt;- as.list(value)\r\n    names(testHash) &lt;- keys\r\n\r\n    keys &lt;- sample(names(testHash), n, replace = TRUE)\r\n    lookupValue = testHash[keys]\r\n    print(data.frame(&#39;key&#39;, keys, &#39;lookup&#39;, unlist(lookupValue)))\r\n\r\n\r\nOn my machine that runs almost instantaneously excluding the printing.  Your code ran about the same speed you reported.  Is it doing what you want?  You could set n to 10 and just look at the output and testHash and see if that&#39;s it.\r\n\r\n**NOTE on syntax:**\r\nThe `apply` above is simply a loop and those are slow in R. The point of those apply family commands is expressiveness. Many of the commands that follow could have been put inside a loop with `apply` and if it was a `for` loop that would be the temptation. In R take as much out of your loop as possible. Using apply family commands makes this more natural because the command is designed to represent the application of one function to a list of some sort as opposed to a generic loop (yes, I know `apply` could be used on more than one command).\r\n","body":"<p>Your code is very un R-like and is one of the reasons it's so slow.  I haven't optimized the code below for maximum speed, only R'ness.<\/p>\n\n<pre><code>n &lt;- 10000\n\nkeys &lt;- matrix( sample(letters, 3*n, replace = TRUE), nrow = 3 )\nkeys &lt;- apply(keys, 2, paste0, collapse = '')\nvalue &lt;- floor(1000*runif(n))\ntestHash &lt;- as.list(value)\nnames(testHash) &lt;- keys\n\nkeys &lt;- sample(names(testHash), n, replace = TRUE)\nlookupValue = testHash[keys]\nprint(data.frame('key', keys, 'lookup', unlist(lookupValue)))\n<\/code><\/pre>\n\n<p>On my machine that runs almost instantaneously excluding the printing.  Your code ran about the same speed you reported.  Is it doing what you want?  You could set n to 10 and just look at the output and testHash and see if that's it.<\/p>\n\n<p><strong>NOTE on syntax:<\/strong>\nThe <code>apply<\/code> above is simply a loop and those are slow in R. The point of those apply family commands is expressiveness. Many of the commands that follow could have been put inside a loop with <code>apply<\/code> and if it was a <code>for<\/code> loop that would be the temptation. In R take as much out of your loop as possible. Using apply family commands makes this more natural because the command is designed to represent the application of one function to a list of some sort as opposed to a generic loop (yes, I know <code>apply<\/code> could be used on more than one command).<\/p>\n"},{"owner":{"account_id":315228,"reputation":5731,"user_id":630863,"user_type":"registered","accept_rate":95,"profile_image":"https:\/\/www.gravatar.com\/avatar\/134fc31bcf916de9f77a7be6a4933284?s=256&d=identicon&r=PG","display_name":"MattLBeck","link":"https:\/\/stackoverflow.com\/users\/630863\/mattlbeck"},"is_accepted":false,"score":11,"last_activity_date":1330713312,"last_edit_date":null,"creation_date":1330713312,"answer_id":9538577,"question_id":9538542,"content_license":"CC BY-SA 3.0","body_markdown":"You could use a global regex. Something like:\r\n     \r\n    my @matches = $bigstring =~ \/($littlestring)\/g;\r\n    my $count = @matches;","body":"<p>You could use a global regex. Something like:<\/p>\n\n<pre><code>my @matches = $bigstring =~ \/($littlestring)\/g;\nmy $count = @matches;\n<\/code><\/pre>\n"},{"owner":{"account_id":335721,"reputation":1078,"user_id":662961,"user_type":"registered","accept_rate":25,"profile_image":"https:\/\/www.gravatar.com\/avatar\/8d82b487de3e728ece3bb518d65fa467?s=256&d=identicon&r=PG","display_name":"Peter Willsey","link":"https:\/\/stackoverflow.com\/users\/662961\/peter-willsey"},"is_accepted":false,"score":11,"last_activity_date":1337877971,"last_edit_date":1337877971.0,"creation_date":1337814294,"answer_id":10729069,"question_id":10729015,"content_license":"CC BY-SA 3.0","body_markdown":"You can pass a reference to the array to your function:\r\n\r\n    calc(\\@array, $scalar);\r\n\r\nWhen you need to access elements of @array in your subroutine you can do it like this:\r\n\r\n    my $array = $_[0];\r\n    \r\n    # access first element of array\r\n    print $array-&gt;[0];\r\n\r\nEdit: Since this is a reference to the original array any changes made in the subroutine will be reflected in the original array.","body":"<p>You can pass a reference to the array to your function:<\/p>\n\n<pre><code>calc(\\@array, $scalar);\n<\/code><\/pre>\n\n<p>When you need to access elements of @array in your subroutine you can do it like this:<\/p>\n\n<pre><code>my $array = $_[0];\n\n# access first element of array\nprint $array-&gt;[0];\n<\/code><\/pre>\n\n<p>Edit: Since this is a reference to the original array any changes made in the subroutine will be reflected in the original array.<\/p>\n"},{"owner":{"account_id":11564,"reputation":87355,"user_id":22364,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/e4b5d57c78e74d4f5ee9773e2926c01d?s=256&d=identicon&r=PG","display_name":"Markus Jarderot","link":"https:\/\/stackoverflow.com\/users\/22364\/markus-jarderot"},"is_accepted":false,"score":10,"last_activity_date":1222373455,"last_edit_date":null,"creation_date":1222373455,"answer_id":135720,"question_id":122277,"content_license":"CC BY-SA 2.5","body_markdown":"    r&quot;&quot;&quot;\r\n    This is an extension of the re module. It stores the last successful\r\n    match object and lets you access it&#39;s methods and attributes via\r\n    this module.\r\n    \r\n    This module exports the following additional functions:\r\n        expand  Return the string obtained by doing backslash substitution on a\r\n                template string.\r\n        group   Returns one or more subgroups of the match.\r\n        groups  Return a tuple containing all the subgroups of the match.\r\n        start   Return the indices of the start of the substring matched by\r\n                group.\r\n        end     Return the indices of the end of the substring matched by group.\r\n        span    Returns a 2-tuple of (start(), end()) of the substring matched\r\n                by group.\r\n    \r\n    This module defines the following additional public attributes:\r\n        pos         The value of pos which was passed to the search() or match()\r\n                    method.\r\n        endpos      The value of endpos which was passed to the search() or\r\n                    match() method.\r\n        lastindex   The integer index of the last matched capturing group.\r\n        lastgroup   The name of the last matched capturing group.\r\n        re          The regular expression object which as passed to search() or\r\n                    match().\r\n        string      The string passed to match() or search().\r\n    &quot;&quot;&quot;\r\n    \r\n    import re as re_\r\n    \r\n    from re import *\r\n    from functools import wraps\r\n    \r\n    __all__ = re_.__all__ + [ &quot;expand&quot;, &quot;group&quot;, &quot;groups&quot;, &quot;start&quot;, &quot;end&quot;, &quot;span&quot;,\r\n            &quot;last_match&quot;, &quot;pos&quot;, &quot;endpos&quot;, &quot;lastindex&quot;, &quot;lastgroup&quot;, &quot;re&quot;, &quot;string&quot; ]\r\n    \r\n    last_match = pos = endpos = lastindex = lastgroup = re = string = None\r\n    \r\n    def _set_match(match=None):\r\n        global last_match, pos, endpos, lastindex, lastgroup, re, string\r\n        if match is not None:\r\n            last_match = match\r\n            pos = match.pos\r\n            endpos = match.endpos\r\n            lastindex = match.lastindex\r\n            lastgroup = match.lastgroup\r\n            re = match.re\r\n            string = match.string\r\n        return match\r\n    \r\n    @wraps(re_.match)\r\n    def match(pattern, string, flags=0):\r\n        return _set_match(re_.match(pattern, string, flags))\r\n     \r\n    \r\n    @wraps(re_.search)\r\n    def search(pattern, string, flags=0):\r\n        return _set_match(re_.search(pattern, string, flags))\r\n    \r\n    @wraps(re_.findall)\r\n    def findall(pattern, string, flags=0):\r\n        matches = re_.findall(pattern, string, flags)\r\n        if matches:\r\n            _set_match(matches[-1])\r\n        return matches\r\n    \r\n    @wraps(re_.finditer)\r\n    def finditer(pattern, string, flags=0):\r\n        for match in re_.finditer(pattern, string, flags):\r\n            yield _set_match(match)\r\n    \r\n    def expand(template):\r\n        if last_match is None:\r\n            raise TypeError, &quot;No successful match yet.&quot;\r\n        return last_match.expand(template)\r\n    \r\n    def group(*indices):\r\n        if last_match is None:\r\n            raise TypeError, &quot;No successful match yet.&quot;\r\n        return last_match.group(*indices)\r\n    \r\n    def groups(default=None):\r\n        if last_match is None:\r\n            raise TypeError, &quot;No successful match yet.&quot;\r\n        return last_match.groups(default)\r\n    \r\n    def groupdict(default=None):\r\n        if last_match is None:\r\n            raise TypeError, &quot;No successful match yet.&quot;\r\n        return last_match.groupdict(default)\r\n    \r\n    def start(group=0):\r\n        if last_match is None:\r\n            raise TypeError, &quot;No successful match yet.&quot;\r\n        return last_match.start(group)\r\n    \r\n    def end(group=0):\r\n        if last_match is None:\r\n            raise TypeError, &quot;No successful match yet.&quot;\r\n        return last_match.end(group)\r\n    \r\n    def span(group=0):\r\n        if last_match is None:\r\n            raise TypeError, &quot;No successful match yet.&quot;\r\n        return last_match.span(group)\r\n    \r\n    del wraps  # Not needed past module compilation\r\n\r\nFor example:\r\n\r\n    if gre.match(&quot;foo(.+)&quot;, var):\r\n      # do something with gre.group(1)\r\n    elif gre.match(&quot;bar(.+)&quot;, var):\r\n      # do something with gre.group(1)\r\n    elif gre.match(&quot;baz(.+)&quot;, var):\r\n      # do something with gre.group(1)\r\n\r\n","body":"<pre><code>r\"\"\"\nThis is an extension of the re module. It stores the last successful\nmatch object and lets you access it's methods and attributes via\nthis module.\n\nThis module exports the following additional functions:\n    expand  Return the string obtained by doing backslash substitution on a\n            template string.\n    group   Returns one or more subgroups of the match.\n    groups  Return a tuple containing all the subgroups of the match.\n    start   Return the indices of the start of the substring matched by\n            group.\n    end     Return the indices of the end of the substring matched by group.\n    span    Returns a 2-tuple of (start(), end()) of the substring matched\n            by group.\n\nThis module defines the following additional public attributes:\n    pos         The value of pos which was passed to the search() or match()\n                method.\n    endpos      The value of endpos which was passed to the search() or\n                match() method.\n    lastindex   The integer index of the last matched capturing group.\n    lastgroup   The name of the last matched capturing group.\n    re          The regular expression object which as passed to search() or\n                match().\n    string      The string passed to match() or search().\n\"\"\"\n\nimport re as re_\n\nfrom re import *\nfrom functools import wraps\n\n__all__ = re_.__all__ + [ \"expand\", \"group\", \"groups\", \"start\", \"end\", \"span\",\n        \"last_match\", \"pos\", \"endpos\", \"lastindex\", \"lastgroup\", \"re\", \"string\" ]\n\nlast_match = pos = endpos = lastindex = lastgroup = re = string = None\n\ndef _set_match(match=None):\n    global last_match, pos, endpos, lastindex, lastgroup, re, string\n    if match is not None:\n        last_match = match\n        pos = match.pos\n        endpos = match.endpos\n        lastindex = match.lastindex\n        lastgroup = match.lastgroup\n        re = match.re\n        string = match.string\n    return match\n\n@wraps(re_.match)\ndef match(pattern, string, flags=0):\n    return _set_match(re_.match(pattern, string, flags))\n\n\n@wraps(re_.search)\ndef search(pattern, string, flags=0):\n    return _set_match(re_.search(pattern, string, flags))\n\n@wraps(re_.findall)\ndef findall(pattern, string, flags=0):\n    matches = re_.findall(pattern, string, flags)\n    if matches:\n        _set_match(matches[-1])\n    return matches\n\n@wraps(re_.finditer)\ndef finditer(pattern, string, flags=0):\n    for match in re_.finditer(pattern, string, flags):\n        yield _set_match(match)\n\ndef expand(template):\n    if last_match is None:\n        raise TypeError, \"No successful match yet.\"\n    return last_match.expand(template)\n\ndef group(*indices):\n    if last_match is None:\n        raise TypeError, \"No successful match yet.\"\n    return last_match.group(*indices)\n\ndef groups(default=None):\n    if last_match is None:\n        raise TypeError, \"No successful match yet.\"\n    return last_match.groups(default)\n\ndef groupdict(default=None):\n    if last_match is None:\n        raise TypeError, \"No successful match yet.\"\n    return last_match.groupdict(default)\n\ndef start(group=0):\n    if last_match is None:\n        raise TypeError, \"No successful match yet.\"\n    return last_match.start(group)\n\ndef end(group=0):\n    if last_match is None:\n        raise TypeError, \"No successful match yet.\"\n    return last_match.end(group)\n\ndef span(group=0):\n    if last_match is None:\n        raise TypeError, \"No successful match yet.\"\n    return last_match.span(group)\n\ndel wraps  # Not needed past module compilation\n<\/code><\/pre>\n\n<p>For example:<\/p>\n\n<pre><code>if gre.match(\"foo(.+)\", var):\n  # do something with gre.group(1)\nelif gre.match(\"bar(.+)\", var):\n  # do something with gre.group(1)\nelif gre.match(\"baz(.+)\", var):\n  # do something with gre.group(1)\n<\/code><\/pre>\n"},{"owner":{"account_id":20051,"reputation":122533,"user_id":47529,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/i.stack.imgur.com\/41zJA.png?s=256&g=1","display_name":"chaos","link":"https:\/\/stackoverflow.com\/users\/47529\/chaos"},"is_accepted":false,"score":10,"last_activity_date":1230702610,"last_edit_date":1230702610.0,"creation_date":1230672976,"answer_id":401589,"question_id":401556,"content_license":"CC BY-SA 2.5","body_markdown":"Quoteless hash keys received syntax-level attention from Larry Wall to make sure that there would be no reason for them to be other than best practice.  Don&#39;t sweat the quotes.\r\n\r\n(Incidentally, quotes on array keys &lt;i&gt;are&lt;\/i&gt; best practice in PHP, and there can be serious consequences to failing to use them, not to mention tons of E_WARNINGs.  Okay in Perl != okay in PHP.)","body":"<p>Quoteless hash keys received syntax-level attention from Larry Wall to make sure that there would be no reason for them to be other than best practice.  Don't sweat the quotes.<\/p>\n\n<p>(Incidentally, quotes on array keys <i>are<\/i> best practice in PHP, and there can be serious consequences to failing to use them, not to mention tons of E_WARNINGs.  Okay in Perl != okay in PHP.)<\/p>\n"},{"owner":{"account_id":40332,"reputation":8872,"user_id":116880,"user_type":"registered","accept_rate":94,"profile_image":"https:\/\/www.gravatar.com\/avatar\/4efc4315f79b214b5ef6aa398068fbd4?s=256&d=identicon&r=PG","display_name":"stevedbrown","link":"https:\/\/stackoverflow.com\/users\/116880\/stevedbrown"},"is_accepted":false,"score":10,"last_activity_date":1244722979,"last_edit_date":1244722979.0,"creation_date":1244722850,"answer_id":980774,"question_id":980751,"content_license":"CC BY-SA 2.5","body_markdown":"Get comfortable with the basics first.  Unless you&#39;ve done a lot of OO JavaScript, OO Perl is going to seem a little strange, and some of the things that Moose or any other library does may seem wierd.","body":"<p>Get comfortable with the basics first.  Unless you've done a lot of OO JavaScript, OO Perl is going to seem a little strange, and some of the things that Moose or any other library does may seem wierd.<\/p>\n"},{"owner":{"account_id":5473,"reputation":130134,"user_id":2766176,"user_type":"registered","accept_rate":61,"profile_image":"https:\/\/www.gravatar.com\/avatar\/edd8638efe875601bfe394a8aea5b16d?s=256&d=identicon&r=PG","display_name":"brian d foy","link":"https:\/\/stackoverflow.com\/users\/2766176\/brian-d-foy"},"is_accepted":false,"score":10,"last_activity_date":1524125401,"last_edit_date":1524125401.0,"creation_date":1271357734,"answer_id":2648136,"question_id":2647273,"content_license":"CC BY-SA 3.0","body_markdown":"The canonical way to use `can` is inside an `eval` block in case the thing that you have in your scalar variable isn&#39;t actually an object. You don&#39;t have to worry about that because you&#39;ll still get the right answer (a non-object or class can&#39;t respond to the method):\r\n\r\n     if( my $ref = eval { $obj-&gt;can( $method ) } ) {\r\n          $obj-&gt;$ref( @args );\r\n          }\r\n\r\nThe `can` has the added feature that it returns a code reference to the method. Sometimes that can be handy.\r\n","body":"<p>The canonical way to use <code>can<\/code> is inside an <code>eval<\/code> block in case the thing that you have in your scalar variable isn't actually an object. You don't have to worry about that because you'll still get the right answer (a non-object or class can't respond to the method):<\/p>\n\n<pre><code> if( my $ref = eval { $obj-&gt;can( $method ) } ) {\n      $obj-&gt;$ref( @args );\n      }\n<\/code><\/pre>\n\n<p>The <code>can<\/code> has the added feature that it returns a code reference to the method. Sometimes that can be handy.<\/p>\n"},{"owner":{"account_id":27256,"reputation":9629,"user_id":71743,"user_type":"registered","accept_rate":75,"profile_image":"https:\/\/www.gravatar.com\/avatar\/0598aaa27af9a9a47fbe553a82375494?s=256&d=identicon&r=PG","display_name":"zakovyrya","link":"https:\/\/stackoverflow.com\/users\/71743\/zakovyrya"},"is_accepted":false,"score":10,"last_activity_date":1276235578,"last_edit_date":1276235578.0,"creation_date":1276231972,"answer_id":3020263,"question_id":3019925,"content_license":"CC BY-SA 2.5","body_markdown":"map is a [higher-order function][1]. The same applies to grep. Book [Higher-Order Perl][2] explains the idea in full details.\r\n\r\nIt&#39;s sad to see that discussion moved towards implementation details, not the concept.\r\n\r\n\r\n  [1]: http:\/\/en.wikipedia.org\/wiki\/Map_(higher-order_function)\r\n  [2]: http:\/\/hop.perl.plover.com\/","body":"<p>map is a <a href=\"http:\/\/en.wikipedia.org\/wiki\/Map_(higher-order_function)\" rel=\"noreferrer\">higher-order function<\/a>. The same applies to grep. Book <a href=\"http:\/\/hop.perl.plover.com\/\" rel=\"noreferrer\">Higher-Order Perl<\/a> explains the idea in full details.<\/p>\n\n<p>It's sad to see that discussion moved towards implementation details, not the concept.<\/p>\n"},{"owner":{"account_id":61464,"reputation":41219,"user_id":183181,"user_type":"registered","accept_rate":81,"profile_image":"https:\/\/www.gravatar.com\/avatar\/f6642797870d2dd20e4a5c8df347562c?s=256&d=identicon&r=PG","display_name":"vol7ron","link":"https:\/\/stackoverflow.com\/users\/183181\/vol7ron"},"is_accepted":false,"score":10,"last_activity_date":1277927791,"last_edit_date":null,"creation_date":1277927791,"answer_id":3152929,"question_id":3141412,"content_license":"CC BY-SA 2.5","body_markdown":"In order to specifically say what caused it in your code, you would need to post your code.\r\n\r\nThe error is ***outputted*** and your script is stopped because you&#39;ve got `use strict` or a derivative of it.\r\nThe error ***occurs*** because your program is calling a variable out of scope.\r\n\r\n 1. You may have used my or local inside a sub procedure\/function, but are trying to use it inside another procedure, or outside the function call.  \r\n\r\n         sub foo{\r\n            my $bar=0; \r\n            our ($soap) = 1;\r\n         }\r\n         foo();\r\n         print $bar        , &quot;\\n&quot;;  # does not work w\/ strict -- bar is only in the scope of the function, not globally defined\r\n         print $main::bar  , &quot;\\n&quot;;  # will run, but won&#39;t be populated\r\n         print $soap       , &quot;\\n&quot;;  # does not work w\/ strict -- the package isn&#39;t defined\r\n         print $main::soap , &quot;\\n&quot;;  # will run and work as intended because of our\r\n\r\n","body":"<p>In order to specifically say what caused it in your code, you would need to post your code.<\/p>\n\n<p>The error is <strong><em>outputted<\/em><\/strong> and your script is stopped because you've got <code>use strict<\/code> or a derivative of it.\nThe error <strong><em>occurs<\/em><\/strong> because your program is calling a variable out of scope.<\/p>\n\n<ol>\n<li><p>You may have used my or local inside a sub procedure\/function, but are trying to use it inside another procedure, or outside the function call.  <\/p>\n\n<pre><code> sub foo{\n    my $bar=0; \n    our ($soap) = 1;\n }\n foo();\n print $bar        , \"\\n\";  # does not work w\/ strict -- bar is only in the scope of the function, not globally defined\n print $main::bar  , \"\\n\";  # will run, but won't be populated\n print $soap       , \"\\n\";  # does not work w\/ strict -- the package isn't defined\n print $main::soap , \"\\n\";  # will run and work as intended because of our\n<\/code><\/pre><\/li>\n<\/ol>\n"},{"owner":{"account_id":17035,"reputation":60062,"user_id":37751,"user_type":"registered","accept_rate":91,"profile_image":"https:\/\/i.stack.imgur.com\/GvZhc.png?s=256&g=1","display_name":"JD Long","link":"https:\/\/stackoverflow.com\/users\/37751\/jd-long"},"is_accepted":false,"score":10,"last_activity_date":1281711943,"last_edit_date":1281711943.0,"creation_date":1281710368,"answer_id":3477909,"question_id":3470447,"content_license":"CC BY-SA 2.5","body_markdown":"I&#39;m a bit of an R hack, but I&#39;m an empiricist so I&#39;ll share some things I have observed and let those with greater theoretical understanding of R shed light into the whys.\r\n\r\n - R seems much slower using standard\r\n   streams than Perl. Since stdin and\r\n   stout are much more commonly used in\r\n   Perl I assume it has optimizations\r\n   around how it does these things. So in R I\r\n   find it MUCH faster to read\/write text using the built in\r\n   functions (e.g `write.table`).\r\n   \r\n - As others have said, vector\r\n   operations in R are faster than\r\n   loops... and w.r.t. speed, most apply() family\r\n   syntax is simply a pretty wrapper on\r\n   a loop.\r\n   \r\n - Indexed things work faster than\r\n   non-indexed. (Obvious, I know.) The data.table package supports indexing of data frame type objects. \r\n   \r\n - I&#39;ve never used hash\r\n   environments like @Allen illustrated (and I&#39;ve never inhaled hash... as far as you know)\r\n\r\n - Some of the syntax you used works, but could be tightened up. I don&#39;t think any of this really matters for speed, but the code&#39;s a little more readable. I don&#39;t write very tight code, but I edited a few things like changing `floor(1000*runif(1))` to `sample(1:1000, n, replace=T)`. I don&#39;t mean to be pedantic, I just wrote it the way I would do it from scratch.\r\n\r\nSo with that in mind I decided to test the hash approach that @allen used (because it&#39;s novel to me) against my &quot;poor man&#39;s hash&quot; which I&#39;ve created using an indexed data.table as a lookup table. I&#39;m not 100% sure that what @allen and I are doing is exactly what you did in Perl because my Perl is pretty rusty. But I **think** the two methods below do the same thing. We both sample the second set of keys from the keys in the &#39;hash&#39; as this prevents hash misses. You&#39;d want to test how these examples handle hash dupes as I have not given that much thought. \r\n\r\n\r\n    require(data.table)\r\n    \r\n    dtTest &lt;- function(n) {\r\n    \r\n      makeDraw &lt;- function(x) paste(sample(letters, 3, replace=T), collapse=&quot;&quot;)\r\n      key &lt;- sapply(1:n, makeDraw)\r\n      value &lt;- sample(1:1000, n, replace=T)\r\n      \r\n      myDataTable &lt;- data.table(key, value,  key=&#39;key&#39;)\r\n      \r\n      newKeys &lt;- sample(as.character(myDataTable$key), n, replace = TRUE)\r\n      \r\n      lookupValues &lt;- myDataTable[newKeys]\r\n      \r\n      strings &lt;- paste(&quot;key&quot;, lookupValues$key, &quot;Lookup&quot;, lookupValues$value )\r\n      write.table(strings, file=&quot;tmpout&quot;, quote=F, row.names=F, col.names=F )\r\n    }\r\n\r\n#\r\n\r\n    hashTest &lt;- function(n) {\r\n     \r\n      testHash &lt;- new.env(hash = TRUE, size = n)\r\n    \r\n      for(i in 1:n) {\r\n        key &lt;- paste(sample(letters, 3, replace = TRUE), collapse = &quot;&quot;)\r\n        assign(key, floor(1000*runif(1)), envir = testHash)\r\n      }\r\n    \r\n      keyArray &lt;- ls(envir = testHash)\r\n      keyLen &lt;- length(keyArray)\r\n      \r\n      keys &lt;- sample(ls(envir = testHash), n, replace = TRUE)\r\n      vals &lt;- mget(keys, envir = testHash)\r\n      \r\n      strings &lt;- paste(&quot;key&quot;, keys, &quot;Lookup&quot;, vals )\r\n      write.table(strings, file=&quot;tmpout&quot;, quote=F, row.names=F, col.names=F )\r\n      \r\n      }\r\n    \r\nif I run each method using 100,000 draws, I get something like this:\r\n\r\n    &gt; system.time(  dtTest(1e5))\r\n       user  system elapsed \r\n      2.750   0.030   2.881 \r\n    &gt; system.time(hashTest(1e5))\r\n       user  system elapsed \r\n      3.670   0.030   3.861 \r\n\r\n   \r\nKeep in mind that this is still considerably slower than the Perl code which, on my PC, seems to run 100K samples in well under a second. \r\n\r\nI hope the above example helps. And if you have any questions as to `why` maybe @allen, @vince, and @dirk will be able to answer ;)\r\n\r\nAfter I typed the above, I realized I had not tested what @john did. So, what the hell, let&#39;s do all 3. I changed the code from @john to use write.table() and here&#39;s his code:\r\n\r\n    johnsCode &lt;- function(n){\r\n      keys = sapply(character(n), function(x) paste(letters[ceiling(26*runif(3))],\r\n        collapse=&#39;&#39;))\r\n      value &lt;- floor(1000*runif(n))\r\n      testHash &lt;- as.list(value)\r\n      names(testHash) &lt;- keys\r\n    \r\n      keys &lt;- names(testHash)[ceiling(n*runif(n))]\r\n      lookupValue = testHash[keys]\r\n    \r\n      strings &lt;- paste(&quot;key&quot;, keys, &quot;Lookup&quot;, lookupValue )\r\n      write.table(strings, file=&quot;tmpout&quot;, quote=F, row.names=F, col.names=F )\r\n    }\r\n\r\nand the run time:\r\n\r\n    &gt; system.time(johnsCode(1e5))\r\n       user  system elapsed \r\n      2.440   0.040   2.544 \r\n\r\nAnd there you have it. @john writes tight\/fast R code! \r\n","body":"<p>I'm a bit of an R hack, but I'm an empiricist so I'll share some things I have observed and let those with greater theoretical understanding of R shed light into the whys.<\/p>\n\n<ul>\n<li><p>R seems much slower using standard\nstreams than Perl. Since stdin and\nstout are much more commonly used in\nPerl I assume it has optimizations\naround how it does these things. So in R I\nfind it MUCH faster to read\/write text using the built in\nfunctions (e.g <code>write.table<\/code>).<\/p><\/li>\n<li><p>As others have said, vector\noperations in R are faster than\nloops... and w.r.t. speed, most apply() family\nsyntax is simply a pretty wrapper on\na loop.<\/p><\/li>\n<li><p>Indexed things work faster than\nnon-indexed. (Obvious, I know.) The data.table package supports indexing of data frame type objects. <\/p><\/li>\n<li><p>I've never used hash\nenvironments like @Allen illustrated (and I've never inhaled hash... as far as you know)<\/p><\/li>\n<li><p>Some of the syntax you used works, but could be tightened up. I don't think any of this really matters for speed, but the code's a little more readable. I don't write very tight code, but I edited a few things like changing <code>floor(1000*runif(1))<\/code> to <code>sample(1:1000, n, replace=T)<\/code>. I don't mean to be pedantic, I just wrote it the way I would do it from scratch.<\/p><\/li>\n<\/ul>\n\n<p>So with that in mind I decided to test the hash approach that @allen used (because it's novel to me) against my \"poor man's hash\" which I've created using an indexed data.table as a lookup table. I'm not 100% sure that what @allen and I are doing is exactly what you did in Perl because my Perl is pretty rusty. But I <strong>think<\/strong> the two methods below do the same thing. We both sample the second set of keys from the keys in the 'hash' as this prevents hash misses. You'd want to test how these examples handle hash dupes as I have not given that much thought. <\/p>\n\n<pre><code>require(data.table)\n\ndtTest &lt;- function(n) {\n\n  makeDraw &lt;- function(x) paste(sample(letters, 3, replace=T), collapse=\"\")\n  key &lt;- sapply(1:n, makeDraw)\n  value &lt;- sample(1:1000, n, replace=T)\n\n  myDataTable &lt;- data.table(key, value,  key='key')\n\n  newKeys &lt;- sample(as.character(myDataTable$key), n, replace = TRUE)\n\n  lookupValues &lt;- myDataTable[newKeys]\n\n  strings &lt;- paste(\"key\", lookupValues$key, \"Lookup\", lookupValues$value )\n  write.table(strings, file=\"tmpout\", quote=F, row.names=F, col.names=F )\n}\n<\/code><\/pre>\n\n<p>#<\/p>\n\n<pre><code>hashTest &lt;- function(n) {\n\n  testHash &lt;- new.env(hash = TRUE, size = n)\n\n  for(i in 1:n) {\n    key &lt;- paste(sample(letters, 3, replace = TRUE), collapse = \"\")\n    assign(key, floor(1000*runif(1)), envir = testHash)\n  }\n\n  keyArray &lt;- ls(envir = testHash)\n  keyLen &lt;- length(keyArray)\n\n  keys &lt;- sample(ls(envir = testHash), n, replace = TRUE)\n  vals &lt;- mget(keys, envir = testHash)\n\n  strings &lt;- paste(\"key\", keys, \"Lookup\", vals )\n  write.table(strings, file=\"tmpout\", quote=F, row.names=F, col.names=F )\n\n  }\n<\/code><\/pre>\n\n<p>if I run each method using 100,000 draws, I get something like this:<\/p>\n\n<pre><code>&gt; system.time(  dtTest(1e5))\n   user  system elapsed \n  2.750   0.030   2.881 \n&gt; system.time(hashTest(1e5))\n   user  system elapsed \n  3.670   0.030   3.861 \n<\/code><\/pre>\n\n<p>Keep in mind that this is still considerably slower than the Perl code which, on my PC, seems to run 100K samples in well under a second. <\/p>\n\n<p>I hope the above example helps. And if you have any questions as to <code>why<\/code> maybe @allen, @vince, and @dirk will be able to answer ;)<\/p>\n\n<p>After I typed the above, I realized I had not tested what @john did. So, what the hell, let's do all 3. I changed the code from @john to use write.table() and here's his code:<\/p>\n\n<pre><code>johnsCode &lt;- function(n){\n  keys = sapply(character(n), function(x) paste(letters[ceiling(26*runif(3))],\n    collapse=''))\n  value &lt;- floor(1000*runif(n))\n  testHash &lt;- as.list(value)\n  names(testHash) &lt;- keys\n\n  keys &lt;- names(testHash)[ceiling(n*runif(n))]\n  lookupValue = testHash[keys]\n\n  strings &lt;- paste(\"key\", keys, \"Lookup\", lookupValue )\n  write.table(strings, file=\"tmpout\", quote=F, row.names=F, col.names=F )\n}\n<\/code><\/pre>\n\n<p>and the run time:<\/p>\n\n<pre><code>&gt; system.time(johnsCode(1e5))\n   user  system elapsed \n  2.440   0.040   2.544 \n<\/code><\/pre>\n\n<p>And there you have it. @john writes tight\/fast R code! <\/p>\n"},{"owner":{"account_id":5248,"reputation":61611,"user_id":8355,"user_type":"registered","accept_rate":80,"profile_image":"https:\/\/www.gravatar.com\/avatar\/8d0099a2574719d7a67eab012851bf9b?s=256&d=identicon&r=PG","display_name":"cjm","link":"https:\/\/stackoverflow.com\/users\/8355\/cjm"},"is_accepted":false,"score":10,"last_activity_date":1287136028,"last_edit_date":null,"creation_date":1287136028,"answer_id":3941109,"question_id":3939919,"content_license":"CC BY-SA 2.5","body_markdown":"You can use the `@{[ EXPRESSION ]}` trick that Greg Hewgill mentioned.\r\n\r\nThere&#39;s also the [Interpolation][1] module, which allows you to do arbitrary transformations on the values you&#39;re interpolating (like encode HTML entities) in addition to evaluating expressions.\r\n\r\n\r\n  [1]: http:\/\/search.cpan.org\/perldoc?Interpolation","body":"<p>You can use the <code>@{[ EXPRESSION ]}<\/code> trick that Greg Hewgill mentioned.<\/p>\n\n<p>There's also the <a href=\"http:\/\/search.cpan.org\/perldoc?Interpolation\" rel=\"noreferrer\">Interpolation<\/a> module, which allows you to do arbitrary transformations on the values you're interpolating (like encode HTML entities) in addition to evaluating expressions.<\/p>\n"},{"owner":{"account_id":296552,"reputation":917,"user_id":601572,"user_type":"registered","accept_rate":40,"profile_image":"https:\/\/www.gravatar.com\/avatar\/fc03c5a907fe9ad5b69eaefa032aa83a?s=256&d=identicon&r=PG","display_name":"Alex","link":"https:\/\/stackoverflow.com\/users\/601572\/alex"},"is_accepted":false,"score":10,"last_activity_date":1573486323,"last_edit_date":1573486323.0,"creation_date":1297259324,"answer_id":4945877,"question_id":4945876,"content_license":"CC BY-SA 4.0","body_markdown":"If using an interactive debugger is OK for you, you can try [perldebug][1].\r\n\r\n  [1]: http:\/\/perldoc.perl.org\/perldebug.html\r\n","body":"<p>If using an interactive debugger is OK for you, you can try <a href=\"http:\/\/perldoc.perl.org\/perldebug.html\" rel=\"nofollow noreferrer\">perldebug<\/a>.<\/p>\n"},{"owner":{"account_id":21713,"reputation":295642,"user_id":53013,"user_type":"registered","accept_rate":78,"profile_image":"https:\/\/www.gravatar.com\/avatar\/6d43da5df0e52fc31c55e6a227bb23f4?s=256&d=identicon&r=PG","display_name":"Daniel C. Sobral","link":"https:\/\/stackoverflow.com\/users\/53013\/daniel-c-sobral"},"is_accepted":false,"score":10,"last_activity_date":1310167200,"last_edit_date":null,"creation_date":1310167200,"answer_id":6631538,"question_id":4731104,"content_license":"CC BY-SA 3.0","body_markdown":"Note that it depends on the _engine_. While regex theory is based on straight automata theory, most of the engines are not strict translations of those theories. For this reason, for instance, some engines incur in exponential time while strict NFA processing would not.\r\n","body":"<p>Note that it depends on the <em>engine<\/em>. While regex theory is based on straight automata theory, most of the engines are not strict translations of those theories. For this reason, for instance, some engines incur in exponential time while strict NFA processing would not.<\/p>\n"},{"owner":{"account_id":11625,"reputation":40721,"user_id":22483,"user_type":"registered","accept_rate":50,"profile_image":"https:\/\/i.stack.imgur.com\/8DntB.jpg?s=256&g=1","display_name":"Randal Schwartz","link":"https:\/\/stackoverflow.com\/users\/22483\/randal-schwartz"},"is_accepted":false,"score":10,"last_activity_date":1314754005,"last_edit_date":null,"creation_date":1314754005,"answer_id":7251663,"question_id":5916194,"content_license":"CC BY-SA 3.0","body_markdown":"Last I looked, Perl 6 inherits Perl 5&#39;s \/ character, which can mean &quot;beginning of regex&quot; when a term is expected, or &quot;divide&quot; when an operator is expected. Given that, and prototypes, and Perl 6 is at least in the same camp as Perl 5 for static tokenization. The only way to tokenize a Perl 6 program is to have a running Perl 6 interpreter in the Perl 6 compiler. Turtles all the way down, once again.","body":"<p>Last I looked, Perl 6 inherits Perl 5's \/ character, which can mean \"beginning of regex\" when a term is expected, or \"divide\" when an operator is expected. Given that, and prototypes, and Perl 6 is at least in the same camp as Perl 5 for static tokenization. The only way to tokenize a Perl 6 program is to have a running Perl 6 interpreter in the Perl 6 compiler. Turtles all the way down, once again.<\/p>\n"},{"owner":{"account_id":446019,"reputation":48145,"user_id":838807,"user_type":"registered","accept_rate":89,"profile_image":"https:\/\/www.gravatar.com\/avatar\/372d495ca83f81cfadb782894ee41b17?s=256&d=identicon&r=PG","display_name":"musefan","link":"https:\/\/stackoverflow.com\/users\/838807\/musefan"},"is_accepted":false,"score":10,"last_activity_date":1339579909,"last_edit_date":1339579909.0,"creation_date":1339579254,"answer_id":11011821,"question_id":11011674,"content_license":"CC BY-SA 3.0","body_markdown":"How about this for the regex:\r\n\r\n    ^([0-9]|[1-9][0-9]|100)$\r\n\r\nthis would validate 7, 82, 100 for examples, but would **not** validate 07 or 082.\r\n\r\n[Check this out][1] for more information (and variations including zero prefixing) on number range checking\r\n\r\n---\r\n\r\nIf you need to cater for floating point numbers you should [read this][2], here is an expression you can use:\r\n\r\nFloating point: `^[-+]?([0-9]|[1-9][0-9]|100)*\\.?[0-9]+$`\r\n\r\n\r\n  [1]: http:\/\/www.regular-expressions.info\/numericranges.html\r\n  [2]: http:\/\/www.regular-expressions.info\/floatingpoint.html","body":"<p>How about this for the regex:<\/p>\n\n<pre><code>^([0-9]|[1-9][0-9]|100)$\n<\/code><\/pre>\n\n<p>this would validate 7, 82, 100 for examples, but would <strong>not<\/strong> validate 07 or 082.<\/p>\n\n<p><a href=\"http:\/\/www.regular-expressions.info\/numericranges.html\" rel=\"noreferrer\">Check this out<\/a> for more information (and variations including zero prefixing) on number range checking<\/p>\n\n<hr>\n\n<p>If you need to cater for floating point numbers you should <a href=\"http:\/\/www.regular-expressions.info\/floatingpoint.html\" rel=\"noreferrer\">read this<\/a>, here is an expression you can use:<\/p>\n\n<p>Floating point: <code>^[-+]?([0-9]|[1-9][0-9]|100)*\\.?[0-9]+$<\/code><\/p>\n"},{"owner":{"account_id":1676494,"reputation":101,"user_id":1541931,"user_type":"unregistered","profile_image":"https:\/\/www.gravatar.com\/avatar\/bfcf3123e365d88e1a16fbf2958d4510?s=256&d=identicon&r=PG","display_name":"AaronC","link":"https:\/\/stackoverflow.com\/users\/1541931\/aaronc"},"is_accepted":false,"score":10,"last_activity_date":1695912612,"last_edit_date":1695912612.0,"creation_date":1342824910,"answer_id":11587941,"question_id":4729722,"content_license":"CC BY-SA 4.0","body_markdown":"Install the `mysql-devel` package that pertains to your distro and mysql server version.","body":"<p>Install the <code>mysql-devel<\/code> package that pertains to your distro and mysql server version.<\/p>\n"},{"owner":{"account_id":216196,"reputation":79164,"user_id":471272,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/i.stack.imgur.com\/jSlyx.gif?s=256&g=1","display_name":"tchrist","link":"https:\/\/stackoverflow.com\/users\/471272\/tchrist"},"is_accepted":true,"score":10,"last_activity_date":1361631753,"last_edit_date":null,"creation_date":1361631753,"answer_id":15041910,"question_id":15041877,"content_license":"CC BY-SA 3.0","body_markdown":"You cannot use `\\Q` in a single-quoted \/ non-interpolated string.  It must be seen by the lexer.\r\n\r\nAnyway, tilde isn\u2019t a meta-character.\r\n\r\nAdd `use regex &quot;debug&quot;` and you will see what is actually happening.","body":"<p>You cannot use <code>\\Q<\/code> in a single-quoted \/ non-interpolated string.  It must be seen by the lexer.<\/p>\n\n<p>Anyway, tilde isn\u2019t a meta-character.<\/p>\n\n<p>Add <code>use regex \"debug\"<\/code> and you will see what is actually happening.<\/p>\n"},{"owner":{"account_id":230343,"reputation":2139,"user_id":493892,"user_type":"registered","accept_rate":92,"profile_image":"https:\/\/www.gravatar.com\/avatar\/b9ba82cf7f994f43e3be72962921ea4d?s=256&d=identicon&r=PG","display_name":"made_in_india","link":"https:\/\/stackoverflow.com\/users\/493892\/made-in-india"},"is_accepted":false,"score":10,"last_activity_date":1394731788,"last_edit_date":null,"creation_date":1394731788,"answer_id":22386382,"question_id":4729722,"content_license":"CC BY-SA 3.0","body_markdown":"if u r using ubuntu , u can easily install using the below `cmd`\r\n\r\n        sudo apt-get install libdbd-mysql-perl\r\n\r\nfor more detail check the cpan [install.pod][1] consist detail about other Linux flavor \r\n\r\n\r\n\r\n\r\n\r\n  [1]: http:\/\/search.cpan.org\/~capttofu\/DBD-mysql-4.026\/lib\/DBD\/mysql\/INSTALL.pod","body":"<p>if u r using ubuntu , u can easily install using the below <code>cmd<\/code><\/p>\n\n<pre><code>    sudo apt-get install libdbd-mysql-perl\n<\/code><\/pre>\n\n<p>for more detail check the cpan <a href=\"http:\/\/search.cpan.org\/~capttofu\/DBD-mysql-4.026\/lib\/DBD\/mysql\/INSTALL.pod\" rel=\"noreferrer\">install.pod<\/a> consist detail about other Linux flavor <\/p>\n"},{"owner":{"account_id":1087577,"reputation":1768,"user_id":1082933,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/6f6406d0ab688734d8532d45bde57c94?s=256&d=identicon&r=PG","display_name":"Ivo","link":"https:\/\/stackoverflow.com\/users\/1082933\/ivo"},"is_accepted":false,"score":10,"last_activity_date":1414726528,"last_edit_date":1414726528.0,"creation_date":1399313682,"answer_id":23479034,"question_id":4717250,"content_license":"CC BY-SA 3.0","body_markdown":"How about:\r\n\r\n    diff file_1 file_2 | grep &#39;^&gt;&#39; | cut -c 3-\r\n\r\nThis would print the entries in file_2 which are not in file_1. For the opposite result one just has to replace &#39;&gt;&#39; with &#39;&lt;&#39;. &#39;cut&#39; removes the first two characters added by &#39;diff&#39;, that are not part of the original content.\r\n\r\nThe files don&#39;t even need to be sorted.","body":"<p>How about:<\/p>\n\n<pre><code>diff file_1 file_2 | grep '^&gt;' | cut -c 3-\n<\/code><\/pre>\n\n<p>This would print the entries in file_2 which are not in file_1. For the opposite result one just has to replace '>' with '&lt;'. 'cut' removes the first two characters added by 'diff', that are not part of the original content.<\/p>\n\n<p>The files don't even need to be sorted.<\/p>\n"},{"owner":{"account_id":1803,"reputation":9956,"user_id":2474,"user_type":"registered","accept_rate":50,"profile_image":"https:\/\/www.gravatar.com\/avatar\/7ea904f852dda8cefbeeebe012f1932d?s=256&d=identicon&r=PG","display_name":"rix0rrr","link":"https:\/\/stackoverflow.com\/users\/2474\/rix0rrr"},"is_accepted":false,"score":9,"last_activity_date":1219418835,"last_edit_date":null,"creation_date":1219418835,"answer_id":22663,"question_id":22566,"content_license":"CC BY-SA 2.5","body_markdown":"This will do it, in one line (note the &#39;*&#39; wildcard at the end)\r\n\r\n    @files = &lt;\/path\/to\/directory\/*&gt;;\r\n    # To demonstrate:\r\n    print join(&quot;, &quot;, @files);\r\n","body":"<p>This will do it, in one line (note the '*' wildcard at the end)<\/p>\n\n<pre><code>@files = &lt;\/path\/to\/directory\/*&gt;;\n# To demonstrate:\nprint join(\", \", @files);\n<\/code><\/pre>\n"},{"owner":{"account_id":1825,"reputation":16161,"user_id":2506,"user_type":"registered","accept_rate":73,"profile_image":"https:\/\/www.gravatar.com\/avatar\/d2a56d4e5d3b4a8613e43c6308494952?s=256&d=identicon&r=PG","display_name":"Gary Richardson","link":"https:\/\/stackoverflow.com\/users\/2506\/gary-richardson"},"is_accepted":false,"score":9,"last_activity_date":1419572586,"last_edit_date":1419572586.0,"creation_date":1219421374,"answer_id":22762,"question_id":22566,"content_license":"CC BY-SA 3.0","body_markdown":"[IO::Dir][1] is nice and provides a tied hash interface as well.\r\n\r\nFrom the perldoc:\r\n\r\n    use IO::Dir;\r\n    $d = IO::Dir-&gt;new(&quot;.&quot;);\r\n    if (defined $d) {\r\n        while (defined($_ = $d-&gt;read)) { something($_); }\r\n        $d-&gt;rewind;\r\n        while (defined($_ = $d-&gt;read)) { something_else($_); }\r\n        undef $d;\r\n    }\r\n    \r\n    tie %dir, &#39;IO::Dir&#39;, &quot;.&quot;;\r\n    foreach (keys %dir) {\r\n        print $_, &quot; &quot; , $dir{$_}-&gt;size,&quot;\\n&quot;;\r\n    }\r\n\r\nSo you could do something like:\r\n\r\n    tie %dir, &#39;IO::Dir&#39;, $directory_name;\r\n    my @dirs = keys %dir;\r\n\r\n  [1]: http:\/\/search.cpan.org\/~gbarr\/IO-1.2301\/IO\/Dir.pm\r\n","body":"<p><a href=\"http:\/\/search.cpan.org\/~gbarr\/IO-1.2301\/IO\/Dir.pm\" rel=\"nofollow noreferrer\">IO::Dir<\/a> is nice and provides a tied hash interface as well.<\/p>\n\n<p>From the perldoc:<\/p>\n\n<pre><code>use IO::Dir;\n$d = IO::Dir-&gt;new(\".\");\nif (defined $d) {\n    while (defined($_ = $d-&gt;read)) { something($_); }\n    $d-&gt;rewind;\n    while (defined($_ = $d-&gt;read)) { something_else($_); }\n    undef $d;\n}\n\ntie %dir, 'IO::Dir', \".\";\nforeach (keys %dir) {\n    print $_, \" \" , $dir{$_}-&gt;size,\"\\n\";\n}\n<\/code><\/pre>\n\n<p>So you could do something like:<\/p>\n\n<pre><code>tie %dir, 'IO::Dir', $directory_name;\nmy @dirs = keys %dir;\n<\/code><\/pre>\n"},{"owner":{"account_id":631,"reputation":210216,"user_id":825,"user_type":"registered","accept_rate":90,"profile_image":"https:\/\/www.gravatar.com\/avatar\/8cff0e19c525c987e7fe10a3e3aef350?s=256&d=identicon&r=PG","display_name":"Pat Notz","link":"https:\/\/stackoverflow.com\/users\/825\/pat-notz"},"is_accepted":false,"score":9,"last_activity_date":1222198450,"last_edit_date":1222198450.0,"creation_date":1222196693,"answer_id":123083,"question_id":122277,"content_license":"CC BY-SA 2.5","body_markdown":"Yeah, it&#39;s kind of annoying.  Perhaps this will work for your case.  \r\n&lt;pre&gt;&lt;code&gt;\r\nimport re\r\n\r\nclass ReCheck(object):\r\n    def __init__(self):\r\n        self.result = None\r\n    def check(self, pattern, text):\r\n        self.result = re.search(pattern, text)\r\n        return self.result\r\n\r\nvar = &#39;bar stuff&#39;\r\nm = ReCheck()\r\nif m.check(r&#39;foo(.+)&#39;,var):\r\n    print m.result.group(1)\r\nelif m.check(r&#39;bar(.+)&#39;,var):\r\n    print m.result.group(1)\r\nelif m.check(r&#39;baz(.+)&#39;,var):\r\n    print m.result.group(1)\r\n&lt;\/code&gt;&lt;\/pre&gt;\r\n\r\n**EDIT:** Brian correctly pointed out that my first attempt did not work.  Unfortunately, this attempt is longer.","body":"<p>Yeah, it's kind of annoying.  Perhaps this will work for your case.  <\/p>\n\n<pre><code>\nimport re\n\nclass ReCheck(object):\n    def __init__(self):\n        self.result = None\n    def check(self, pattern, text):\n        self.result = re.search(pattern, text)\n        return self.result\n\nvar = 'bar stuff'\nm = ReCheck()\nif m.check(r'foo(.+)',var):\n    print m.result.group(1)\nelif m.check(r'bar(.+)',var):\n    print m.result.group(1)\nelif m.check(r'baz(.+)',var):\n    print m.result.group(1)\n<\/code><\/pre>\n\n<p><strong>EDIT:<\/strong> Brian correctly pointed out that my first attempt did not work.  Unfortunately, this attempt is longer.<\/p>\n"},{"owner":{"account_id":9733,"reputation":99026,"user_id":18103,"user_type":"registered","accept_rate":68,"profile_image":"https:\/\/www.gravatar.com\/avatar\/f224e093f5d375d77316a1c4835bcfcc?s=256&d=identicon&r=PG","display_name":"skiphoppy","link":"https:\/\/stackoverflow.com\/users\/18103\/skiphoppy"},"is_accepted":false,"score":9,"last_activity_date":1228490146,"last_edit_date":null,"creation_date":1228490146,"answer_id":344122,"question_id":341484,"content_license":"CC BY-SA 2.5","body_markdown":"If the module has pod documentation, and if you can guarantee that the perldoc utility in your PATH belongs to the same perl that is running your script, then this command will often give you the actual file being found:\r\n\r\n    perldoc -l ModuleName","body":"<p>If the module has pod documentation, and if you can guarantee that the perldoc utility in your PATH belongs to the same perl that is running your script, then this command will often give you the actual file being found:<\/p>\n\n<pre><code>perldoc -l ModuleName\n<\/code><\/pre>\n"},{"owner":{"account_id":14218,"reputation":2099,"user_id":29060,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/c12060f9913ccb147fc65c260fca2d2b?s=256&d=identicon&r=PG","display_name":"JDrago","link":"https:\/\/stackoverflow.com\/users\/29060\/jdrago"},"is_accepted":false,"score":9,"last_activity_date":1232642663,"last_edit_date":1232642663.0,"creation_date":1232640375,"answer_id":469744,"question_id":451521,"content_license":"CC BY-SA 2.5","body_markdown":"Just check caller:\r\n\r\n    package My;\r\n    \r\n    sub new {\r\n      return bless { }, shift;\r\n    }\r\n    \r\n    sub private_func {\r\n      my ($s, %args) = @_;\r\n      die &quot;Error: Private method called&quot;\r\n        unless (caller)[0]-&gt;isa( ref($s) );\r\n      \r\n      warn &quot;OK: Private method called by &quot; . (caller)[0];\r\n    }\r\n    \r\n    sub public_func {\r\n      my ($s, %args) = @_;\r\n      \r\n      $s-&gt;private_func();\r\n    }\r\n    \r\n    package main;\r\n    \r\n    my $obj = My-&gt;new();\r\n    \r\n    # This will succeed:\r\n    $obj-&gt;public_func( );\r\n    \r\n    # This will fail:\r\n    $obj-&gt;private_func( );\r\n\r\n\r\n","body":"<p>Just check caller:<\/p>\n\n<pre><code>package My;\n\nsub new {\n  return bless { }, shift;\n}\n\nsub private_func {\n  my ($s, %args) = @_;\n  die \"Error: Private method called\"\n    unless (caller)[0]-&gt;isa( ref($s) );\n\n  warn \"OK: Private method called by \" . (caller)[0];\n}\n\nsub public_func {\n  my ($s, %args) = @_;\n\n  $s-&gt;private_func();\n}\n\npackage main;\n\nmy $obj = My-&gt;new();\n\n# This will succeed:\n$obj-&gt;public_func( );\n\n# This will fail:\n$obj-&gt;private_func( );\n<\/code><\/pre>\n"},{"owner":{"account_id":1187,"reputation":3713,"user_id":1580,"user_type":"registered","accept_rate":58,"profile_image":"https:\/\/www.gravatar.com\/avatar\/f3fb9c7757f76ec82dd1c03245c197ae?s=256&d=identicon&r=PG","display_name":"Roy Rico","link":"https:\/\/stackoverflow.com\/users\/1580\/roy-rico"},"is_accepted":false,"score":9,"last_activity_date":1512606047,"last_edit_date":1512606047.0,"creation_date":1237225532,"answer_id":651441,"question_id":650743,"content_license":"CC BY-SA 3.0","body_markdown":"Slightly unrelated, but to remove ^M from the command line using Perl, do this:\r\n\r\n    perl -p -i -e &quot;s\/\\r\\n\/\\n\/g&quot; file.name\r\n","body":"<p>Slightly unrelated, but to remove ^M from the command line using Perl, do this:<\/p>\n\n<pre><code>perl -p -i -e \"s\/\\r\\n\/\\n\/g\" file.name\n<\/code><\/pre>\n"},{"owner":{"account_id":7552,"reputation":5034,"user_id":13164,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/70a8bed0bcffe5a5e700d1dc6007e3a6?s=256&d=identicon&r=PG","display_name":"tsee","link":"https:\/\/stackoverflow.com\/users\/13164\/tsee"},"is_accepted":false,"score":9,"last_activity_date":1260515847,"last_edit_date":null,"creation_date":1260515847,"answer_id":1886388,"question_id":1885800,"content_license":"CC BY-SA 2.5","body_markdown":"First, let me say that you&#39;re barking up the wrong tree. What you want to do is the wrong approach for many reasons.\r\n\r\nSecond, check out [Filter::Crypto][1] (and [PAR::Filter::Crypto][2]). Read the whole manual before your start.\r\n\r\n\r\n  [1]: http:\/\/search.cpan.org\/dist\/Filter-Crypto\/lib\/Filter\/Crypto.pm\r\n  [2]: http:\/\/search.cpan.org\/dist\/Filter-Crypto\/lib\/PAR\/Filter\/Crypto.pm","body":"<p>First, let me say that you're barking up the wrong tree. What you want to do is the wrong approach for many reasons.<\/p>\n\n<p>Second, check out <a href=\"http:\/\/search.cpan.org\/dist\/Filter-Crypto\/lib\/Filter\/Crypto.pm\" rel=\"noreferrer\">Filter::Crypto<\/a> (and <a href=\"http:\/\/search.cpan.org\/dist\/Filter-Crypto\/lib\/PAR\/Filter\/Crypto.pm\" rel=\"noreferrer\">PAR::Filter::Crypto<\/a>). Read the whole manual before your start.<\/p>\n"},{"owner":{"account_id":2960,"reputation":34741,"user_id":4200,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/i.stack.imgur.com\/yLqBc.jpg?s=256&g=1","display_name":"Ed Guiness","link":"https:\/\/stackoverflow.com\/users\/4200\/ed-guiness"},"is_accepted":false,"score":9,"last_activity_date":1394999822,"last_edit_date":1394999822.0,"creation_date":1261403960,"answer_id":1940246,"question_id":1940182,"content_license":"CC BY-SA 3.0","body_markdown":"Perl modules must return something that evaluates to true. If they don&#39;t, Perl reports an error.\r\n\r\n    C:\\temp&gt;cat MyTest.pm\r\n    package MyTest;\r\n    use strict;\r\n    sub test { print &quot;test\\n&quot;; }\r\n    #1;  # commented out to show error\r\n\r\n    C:\\temp&gt;perl -e &quot;use MyTest&quot;\r\n    MyTest.pm did not return a true value at -e line 1.\r\n    BEGIN failed--compilation aborted at -e line 1.\r\n\r\n    C:\\temp&gt;\r\n\r\nAlthough it&#39;s customary to use &quot;1;&quot;, anything that evaluates to true will work.\r\n\r\n    C:\\temp&gt;cat MyTest.pm\r\n    package MyTest;\r\n    use strict;\r\n    sub test { print &quot;test\\n&quot;; }\r\n    &quot;false&quot;;\r\n\r\n    C:\\temp&gt;perl -e &quot;use MyTest&quot;\r\n\r\n    C:\\temp&gt;  (no error here)\r\n\r\nFor [obvious reasons][1] another popular return value is **42**.  \r\n\r\nThere&#39;s a list of cool return values maintained at http:\/\/returnvalues.useperl.at\/values.html.\r\n\r\n  [1]: https:\/\/en.wikipedia.org\/wiki\/Phrases_from_The_Hitchhiker%27s_Guide_to_the_Galaxy#The_number_42\r\n","body":"<p>Perl modules must return something that evaluates to true. If they don't, Perl reports an error.<\/p>\n\n<pre><code>C:\\temp&gt;cat MyTest.pm\npackage MyTest;\nuse strict;\nsub test { print \"test\\n\"; }\n#1;  # commented out to show error\n\nC:\\temp&gt;perl -e \"use MyTest\"\nMyTest.pm did not return a true value at -e line 1.\nBEGIN failed--compilation aborted at -e line 1.\n\nC:\\temp&gt;\n<\/code><\/pre>\n\n<p>Although it's customary to use \"1;\", anything that evaluates to true will work.<\/p>\n\n<pre><code>C:\\temp&gt;cat MyTest.pm\npackage MyTest;\nuse strict;\nsub test { print \"test\\n\"; }\n\"false\";\n\nC:\\temp&gt;perl -e \"use MyTest\"\n\nC:\\temp&gt;  (no error here)\n<\/code><\/pre>\n\n<p>For <a href=\"https:\/\/en.wikipedia.org\/wiki\/Phrases_from_The_Hitchhiker%27s_Guide_to_the_Galaxy#The_number_42\" rel=\"nofollow noreferrer\">obvious reasons<\/a> another popular return value is <strong>42<\/strong>.  <\/p>\n\n<p>There's a list of cool return values maintained at <a href=\"http:\/\/returnvalues.useperl.at\/values.html\" rel=\"nofollow noreferrer\">http:\/\/returnvalues.useperl.at\/values.html<\/a>.<\/p>\n"},{"owner":{"account_id":113371,"reputation":100018,"user_id":298607,"user_type":"registered","accept_rate":88,"profile_image":"https:\/\/i.stack.imgur.com\/DVW9g.jpg?s=256&g=1","display_name":"dawg","link":"https:\/\/stackoverflow.com\/users\/298607\/dawg"},"is_accepted":false,"score":9,"last_activity_date":1285270921,"last_edit_date":1285270921.0,"creation_date":1285216181,"answer_id":3775460,"question_id":3775413,"content_license":"CC BY-SA 2.5","body_markdown":"There is a similar method to produce a Iterator \/ Generator, but it is not a &quot;first class citizen&quot; as it is on Python.\r\n\r\nIn Perl, if you do not see what you want (after a **MANDATORY** trip to [CPAN][1] **FIRST**!), you can roll your own that is similar to a Python iterator based on Perl closures and an anonymous subroutine. \r\n\r\nConsider:\r\n\r\n    use strict; use warnings;\r\n    \r\n    sub fibo {\r\n    \tmy ($an, $bn)=(1,0);\r\n    \tmy $mag=(shift || 1);\r\n    \tmy $limit=10**$mag;\r\n    \tmy $i=0;\r\n    \t\t\r\n    \treturn sub {\r\n    \t\t($an, $bn)=($bn, $an+$bn);\t\t\r\n    \t\treturn undef if ($an &gt;=$limit || wantarray );\r\n    \t\treturn $an;\r\n    \t}\r\n    }\r\n    \r\n    my $num;\r\n    my $iter=fibo(15);\r\n    while (defined($num=$iter-&gt;()) ) { printf &quot;%17d\\n&quot;, $num; }\r\n\r\nThe sub `fibo` maintains a Perl [closure][2] that allows persistent variables to be maintained. You can do the same by having a module, similar to C \/ C++. Inside `fibo` an anonymous subroutine does the work of returning the next data item. \r\n\r\nTo quote from the [Perl Bible][3] &quot;You will be miserable until you learn the difference between scalar and list context&quot; -- p 69 (A highly recommended book btw...)\r\n\r\nIn this case, the annon sub only returns a single value. The only looping mechanism that I know of in Perl that can work in scalar context is `while`; The others try to fill the list before proceeding I think. Therefor, if you called the anon sub in list context, it will dutifully return the next fibonacci number, unlike Python&#39;s for iterators, and the loop would terminate. That is why I put the `return undef if .... wantarray` because it does not work in list context as written. \r\n\r\nThere are ways to fix that. Indeed, you can write subroutines that act like `map` `foreach` etc but it is not as straightforward as Python&#39;s yield. You will need an additional function to use inside a foreach loop. The tradeoff is the Perl approach has tremendous power and flexibility.  \r\n\r\nYou can read more about Perl iterators in Mark Jason Dominus&#39; excellent book &quot;Higher Order Perl&quot; [Chapter 4 is all about Interators][4] brian d foy also has an excellent [article][5] on Interators in the Perl Review.\r\n\r\n\r\n  [1]: http:\/\/search.cpan.org\/search?query=iterator&amp;mode=all\r\n  [2]: http:\/\/perldoc.perl.org\/perlfaq7.html#What&#39;s-a-closure%3f\r\n  [3]: http:\/\/www.amazon.com\/Programming-Perl-3rd-Larry-Wall\/dp\/0596000278\/ref=sr_1_1?s=gateway&amp;ie=UTF8&amp;qid=1285215852&amp;sr=8-1\r\n  [4]: http:\/\/hop.perl.plover.com\/book\/pdf\/04Iterators.pdf\r\n  [5]: http:\/\/www.theperlreview.com\/Articles\/v0i5\/iterators.pdf","body":"<p>There is a similar method to produce a Iterator \/ Generator, but it is not a \"first class citizen\" as it is on Python.<\/p>\n\n<p>In Perl, if you do not see what you want (after a <strong>MANDATORY<\/strong> trip to <a href=\"http:\/\/search.cpan.org\/search?query=iterator&amp;mode=all\" rel=\"noreferrer\">CPAN<\/a> <strong>FIRST<\/strong>!), you can roll your own that is similar to a Python iterator based on Perl closures and an anonymous subroutine. <\/p>\n\n<p>Consider:<\/p>\n\n<pre><code>use strict; use warnings;\n\nsub fibo {\n    my ($an, $bn)=(1,0);\n    my $mag=(shift || 1);\n    my $limit=10**$mag;\n    my $i=0;\n\n    return sub {\n        ($an, $bn)=($bn, $an+$bn);      \n        return undef if ($an &gt;=$limit || wantarray );\n        return $an;\n    }\n}\n\nmy $num;\nmy $iter=fibo(15);\nwhile (defined($num=$iter-&gt;()) ) { printf \"%17d\\n\", $num; }\n<\/code><\/pre>\n\n<p>The sub <code>fibo<\/code> maintains a Perl <a href=\"http:\/\/perldoc.perl.org\/perlfaq7.html#What&#39;s-a-closure%3f\" rel=\"noreferrer\">closure<\/a> that allows persistent variables to be maintained. You can do the same by having a module, similar to C \/ C++. Inside <code>fibo<\/code> an anonymous subroutine does the work of returning the next data item. <\/p>\n\n<p>To quote from the <a href=\"https:\/\/rads.stackoverflow.com\/amzn\/click\/com\/0596000278\" rel=\"noreferrer\" rel=\"nofollow noreferrer\">Perl Bible<\/a> \"You will be miserable until you learn the difference between scalar and list context\" -- p 69 (A highly recommended book btw...)<\/p>\n\n<p>In this case, the annon sub only returns a single value. The only looping mechanism that I know of in Perl that can work in scalar context is <code>while<\/code>; The others try to fill the list before proceeding I think. Therefor, if you called the anon sub in list context, it will dutifully return the next fibonacci number, unlike Python's for iterators, and the loop would terminate. That is why I put the <code>return undef if .... wantarray<\/code> because it does not work in list context as written. <\/p>\n\n<p>There are ways to fix that. Indeed, you can write subroutines that act like <code>map<\/code> <code>foreach<\/code> etc but it is not as straightforward as Python's yield. You will need an additional function to use inside a foreach loop. The tradeoff is the Perl approach has tremendous power and flexibility.  <\/p>\n\n<p>You can read more about Perl iterators in Mark Jason Dominus' excellent book \"Higher Order Perl\" <a href=\"http:\/\/hop.perl.plover.com\/book\/pdf\/04Iterators.pdf\" rel=\"noreferrer\">Chapter 4 is all about Interators<\/a> brian d foy also has an excellent <a href=\"http:\/\/www.theperlreview.com\/Articles\/v0i5\/iterators.pdf\" rel=\"noreferrer\">article<\/a> on Interators in the Perl Review.<\/p>\n"},{"owner":{"account_id":64111,"reputation":39931,"user_id":189416,"user_type":"registered","accept_rate":58,"profile_image":"https:\/\/www.gravatar.com\/avatar\/37d8e0ce7024584f0c4d2eddfcfacd2f?s=256&d=identicon&r=PG","display_name":"Eric Strom","link":"https:\/\/stackoverflow.com\/users\/189416\/eric-strom"},"is_accepted":false,"score":9,"last_activity_date":1304714758,"last_edit_date":1304714758.0,"creation_date":1304713332,"answer_id":5916603,"question_id":5916194,"content_license":"CC BY-SA 3.0","body_markdown":"The axiom &quot;Only perl can parse Perl&quot; where &quot;perl&quot; is the interpreter binary and &quot;Perl&quot; is the language largely stems from the fact that parsing rules can change while the file is being parsed.  In Perl 5, this comes from prototyped subroutine declarations, from various pragmas, and from source filters.\r\n\r\nIn my opinion, this is only going to become more of a problem in Perl 6.  In Perl 5, the number of places where parser rules could change are limited, whereas in Perl 6, they are wide and varied.  In addition to everything Perl 5 has, Perl 6 allows you to define your own operators, and since this definition is done in Perl code, a Perl interpreter is needed to make sense of it.  \r\n\r\nAs far as I know, no implementation supports it yet, but the Perl 6 spec also includes real language level macros, which can restructure Perl 6 code either textually or by manipulating the AST.  Both of these require the existence of a Perl interpreter to perform their magic.\r\n\r\nSo in conclusion, I have a feeling that Perl 6 will make the axiom stronger than it is for Perl 5. (And will be even more of a nightmare for the authors of syntax highlighters :) )  Of course this is all to increase the expressive power of the language, so I am ok with the concession. \r\n\r\nA corollary to the above is that unlike Perl 5, Perl 6 has a formal spec, so the axiom might have to change to &quot;Only an interpreter implementing the Perl 6 spec can parse Perl 6&quot;, but that&#39;s being a bit pedantic.\r\n\r\nPer the update:\r\n\r\nI don&#39;t think that the above precludes the idea of a JIT compiler for Perl 6, since by definition, such a compiler would also have to contain a Perl 6 interpreter.  As far as static compilation goes, it MIGHT be possible, but it would severely restrict the language&#39;s runtime power, since any construct involving eval would not work.\r\n\r\nPPI is useful in Perl 5 land because the perl interpreter does not provide many rich and easy to use interfaces to its AST.  In Perl 6, the level of introspection is FAR greater, so the interpreter itself may provide all of the necessary tools.","body":"<p>The axiom \"Only perl can parse Perl\" where \"perl\" is the interpreter binary and \"Perl\" is the language largely stems from the fact that parsing rules can change while the file is being parsed.  In Perl 5, this comes from prototyped subroutine declarations, from various pragmas, and from source filters.<\/p>\n\n<p>In my opinion, this is only going to become more of a problem in Perl 6.  In Perl 5, the number of places where parser rules could change are limited, whereas in Perl 6, they are wide and varied.  In addition to everything Perl 5 has, Perl 6 allows you to define your own operators, and since this definition is done in Perl code, a Perl interpreter is needed to make sense of it.  <\/p>\n\n<p>As far as I know, no implementation supports it yet, but the Perl 6 spec also includes real language level macros, which can restructure Perl 6 code either textually or by manipulating the AST.  Both of these require the existence of a Perl interpreter to perform their magic.<\/p>\n\n<p>So in conclusion, I have a feeling that Perl 6 will make the axiom stronger than it is for Perl 5. (And will be even more of a nightmare for the authors of syntax highlighters :) )  Of course this is all to increase the expressive power of the language, so I am ok with the concession. <\/p>\n\n<p>A corollary to the above is that unlike Perl 5, Perl 6 has a formal spec, so the axiom might have to change to \"Only an interpreter implementing the Perl 6 spec can parse Perl 6\", but that's being a bit pedantic.<\/p>\n\n<p>Per the update:<\/p>\n\n<p>I don't think that the above precludes the idea of a JIT compiler for Perl 6, since by definition, such a compiler would also have to contain a Perl 6 interpreter.  As far as static compilation goes, it MIGHT be possible, but it would severely restrict the language's runtime power, since any construct involving eval would not work.<\/p>\n\n<p>PPI is useful in Perl 5 land because the perl interpreter does not provide many rich and easy to use interfaces to its AST.  In Perl 6, the level of introspection is FAR greater, so the interpreter itself may provide all of the necessary tools.<\/p>\n"},{"owner":{"account_id":369203,"reputation":13852,"user_id":716443,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/a8d13509991dbbd5467f01f55988ae4e?s=256&d=identicon&r=PG","display_name":"DavidO","link":"https:\/\/stackoverflow.com\/users\/716443\/davido"},"is_accepted":false,"score":9,"last_activity_date":1305389275,"last_edit_date":null,"creation_date":1305389275,"answer_id":6003042,"question_id":6002296,"content_license":"CC BY-SA 3.0","body_markdown":"In Perl, the backtick operator has a synonym: qx\/\/.  The q and x stand for &quot;quote &amp; execute.&quot;  You&#39;ll see it referred to as &#39;command&#39; too, but frankly, in the Perl community and throughout most of the Perl documentation, they&#39;re just called the backtick operator or backticks.  Calling them anything other than backticks or the backtick operator in the context of a Perl program will simply make it harder to know what one is talking about.","body":"<p>In Perl, the backtick operator has a synonym: qx\/\/.  The q and x stand for \"quote &amp; execute.\"  You'll see it referred to as 'command' too, but frankly, in the Perl community and throughout most of the Perl documentation, they're just called the backtick operator or backticks.  Calling them anything other than backticks or the backtick operator in the context of a Perl program will simply make it harder to know what one is talking about.<\/p>\n"},{"owner":{"account_id":1136852,"reputation":91,"user_id":1121750,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/d567180324b4fe8fca85a55ea14bc331?s=256&d=identicon&r=PG","display_name":"user1121750","link":"https:\/\/stackoverflow.com\/users\/1121750\/user1121750"},"is_accepted":false,"score":9,"last_activity_date":1325188608,"last_edit_date":null,"creation_date":1325188608,"answer_id":8672753,"question_id":341484,"content_license":"CC BY-SA 3.0","body_markdown":"&gt; perl -M&#39;LWP&#39; -e &#39;use Data::Dumper; print Dumper \\%INC&#39; | grep LWP\r\n\r\nThis will list out the LWP module location on the disk and also lists out modules loaded inside LWP.\r\n\r\n          &#39;LWP.pm&#39; =&gt; &#39;\/usr\/lib\/perl5\/5.10.0\/LWP.pm&#39;,\r\n          &#39;LWP\/Protocol.pm&#39; =&gt; &#39;\/usr\/lib\/perl5\/5.10.0\/LWP\/Protocol.pm&#39;,\r\n          &#39;LWP\/UserAgent.pm&#39; =&gt; &#39;\/usr\/lib\/perl5\/5.10.0\/LWP\/UserAgent.pm&#39;,\r\n","body":"<blockquote>\n  <p>perl -M'LWP' -e 'use Data::Dumper; print Dumper \\%INC' | grep LWP<\/p>\n<\/blockquote>\n\n<p>This will list out the LWP module location on the disk and also lists out modules loaded inside LWP.<\/p>\n\n<pre><code>      'LWP.pm' =&gt; '\/usr\/lib\/perl5\/5.10.0\/LWP.pm',\n      'LWP\/Protocol.pm' =&gt; '\/usr\/lib\/perl5\/5.10.0\/LWP\/Protocol.pm',\n      'LWP\/UserAgent.pm' =&gt; '\/usr\/lib\/perl5\/5.10.0\/LWP\/UserAgent.pm',\n<\/code><\/pre>\n"},{"owner":{"account_id":289134,"reputation":372786,"user_id":589924,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/b2cf53d5a3d25f95c0db4e025aed4153?s=256&d=identicon&r=PG","display_name":"ikegami","link":"https:\/\/stackoverflow.com\/users\/589924\/ikegami"},"is_accepted":false,"score":9,"last_activity_date":1333576666,"last_edit_date":null,"creation_date":1333576666,"answer_id":10019841,"question_id":10019049,"content_license":"CC BY-SA 3.0","body_markdown":"The code is testing whether `9eaf` is a substring of the value of `$tag`.\r\n\r\n---\r\n\r\n    $tag =~ \/9eaf\/\r\n\r\nis short for\r\n\r\n    $tag =~ m\/9eaf\/\r\n\r\nwhere `m\/\/` is the match operator. It matches the regular expression pattern (regexp) `9eaf` against the value bound by `=~` (returned by the left hand side of `=~`).\r\n\r\n---\r\n\r\nOperators, including `m\/\/` and `=~`, are documented in [perlop](http:\/\/perldoc.perl.org\/perlop.html).\r\n\r\nRegular expressions (e.g. `9eaf`) are documented in [perlre](http:\/\/perldoc.perl.org\/perlre.html), [perlretut](http:\/\/perldoc.perl.org\/perlretut.html).\r\n\r\n","body":"<p>The code is testing whether <code>9eaf<\/code> is a substring of the value of <code>$tag<\/code>.<\/p>\n\n<hr>\n\n<pre><code>$tag =~ \/9eaf\/\n<\/code><\/pre>\n\n<p>is short for<\/p>\n\n<pre><code>$tag =~ m\/9eaf\/\n<\/code><\/pre>\n\n<p>where <code>m\/\/<\/code> is the match operator. It matches the regular expression pattern (regexp) <code>9eaf<\/code> against the value bound by <code>=~<\/code> (returned by the left hand side of <code>=~<\/code>).<\/p>\n\n<hr>\n\n<p>Operators, including <code>m\/\/<\/code> and <code>=~<\/code>, are documented in <a href=\"http:\/\/perldoc.perl.org\/perlop.html\" rel=\"noreferrer\">perlop<\/a>.<\/p>\n\n<p>Regular expressions (e.g. <code>9eaf<\/code>) are documented in <a href=\"http:\/\/perldoc.perl.org\/perlre.html\" rel=\"noreferrer\">perlre<\/a>, <a href=\"http:\/\/perldoc.perl.org\/perlretut.html\" rel=\"noreferrer\">perlretut<\/a>.<\/p>\n"},{"owner":{"account_id":1588658,"reputation":91,"user_id":1472471,"user_type":"unregistered","profile_image":"https:\/\/www.gravatar.com\/avatar\/647520f971b7d066607cd00bb3f73d35?s=256&d=identicon&r=PG","display_name":"Shyam","link":"https:\/\/stackoverflow.com\/users\/1472471\/shyam"},"is_accepted":false,"score":9,"last_activity_date":1340293306,"last_edit_date":1340293306.0,"creation_date":1340290003,"answer_id":11140708,"question_id":1041182,"content_license":"CC BY-SA 3.0","body_markdown":"I got the same error code 137 from an ANT script. Looking at \/var\/log\/messages, I understand it&#39;s out of memory error.\r\n\r\n    Jun 21 07:33:30 myhost kernel: Out of memory: Kill process 52959 (java) score 164 or sacrifice child\r\n    Jun 21 07:33:30 myhost kernel: Killed process 52959 (java) total-vm:709496kB, anon-rss:397016kB, file-rss:0kB\r\n","body":"<p>I got the same error code 137 from an ANT script. Looking at \/var\/log\/messages, I understand it's out of memory error.<\/p>\n\n<pre><code>Jun 21 07:33:30 myhost kernel: Out of memory: Kill process 52959 (java) score 164 or sacrifice child\nJun 21 07:33:30 myhost kernel: Killed process 52959 (java) total-vm:709496kB, anon-rss:397016kB, file-rss:0kB\n<\/code><\/pre>\n"},{"owner":{"account_id":56304,"reputation":117607,"user_id":168657,"user_type":"registered","accept_rate":92,"profile_image":"https:\/\/www.gravatar.com\/avatar\/f14e7610fca39322ebbf23530def15f8?s=256&d=identicon&r=PG","display_name":"mob","link":"https:\/\/stackoverflow.com\/users\/168657\/mob"},"is_accepted":false,"score":9,"last_activity_date":1442504662,"last_edit_date":null,"creation_date":1442504662,"answer_id":32634629,"question_id":3852395,"content_license":"CC BY-SA 3.0","body_markdown":"The [`Devel::DumpTrace`](http:\/\/metacpan.org\/pod\/Devel::DumpTrace) module has been available since 2011.\r\n\r\nSample usage:\r\n\r\n    $ cat demo.pl\r\n    # demo.pl\r\n    # a demonstration of Devel::DumpTrace\r\n    $a = 1;\r\n    $b = 3;\r\n    $c = 2 * $a + 7 * $b;\r\n    @d = ($a, $b, $c + $b);\r\n\r\n    $ perl -d:DumpTrace demo.pl\r\n    &gt;&gt;&gt;&gt;&gt; demo.pl:3:        $a:1 = 1;\r\n    &gt;&gt;&gt;&gt;&gt; demo.pl:4:        $b:3 = 3;\r\n    &gt;&gt;&gt;&gt;&gt; demo.pl:5:        $c:23 = 2 * $a:1 + 7 * $b:3;\r\n    &gt;&gt;&gt;&gt;&gt; demo.pl:6:        @d:(1,3,26) = ($a:1, $b:3, $c:23 + $b:3);\r\n\r\n\r\n","body":"<p>The <a href=\"http:\/\/metacpan.org\/pod\/Devel::DumpTrace\" rel=\"noreferrer\"><code>Devel::DumpTrace<\/code><\/a> module has been available since 2011.<\/p>\n\n<p>Sample usage:<\/p>\n\n<pre><code>$ cat demo.pl\n# demo.pl\n# a demonstration of Devel::DumpTrace\n$a = 1;\n$b = 3;\n$c = 2 * $a + 7 * $b;\n@d = ($a, $b, $c + $b);\n\n$ perl -d:DumpTrace demo.pl\n&gt;&gt;&gt;&gt;&gt; demo.pl:3:        $a:1 = 1;\n&gt;&gt;&gt;&gt;&gt; demo.pl:4:        $b:3 = 3;\n&gt;&gt;&gt;&gt;&gt; demo.pl:5:        $c:23 = 2 * $a:1 + 7 * $b:3;\n&gt;&gt;&gt;&gt;&gt; demo.pl:6:        @d:(1,3,26) = ($a:1, $b:3, $c:23 + $b:3);\n<\/code><\/pre>\n"},{"owner":{"account_id":2455,"reputation":30740,"user_id":3421,"user_type":"registered","accept_rate":89,"profile_image":"https:\/\/www.gravatar.com\/avatar\/9ecd2f59de5e03ba481723637fc74fad?s=256&d=identicon&r=PG","display_name":"Jack M.","link":"https:\/\/stackoverflow.com\/users\/3421\/jack-m"},"is_accepted":false,"score":8,"last_activity_date":1222206645,"last_edit_date":null,"creation_date":1222206645,"answer_id":124128,"question_id":122277,"content_license":"CC BY-SA 2.5","body_markdown":"I&#39;d suggest this, as it uses the least regex to accomplish your goal.  It is still functional code, but no worse then your old Perl.\r\n\r\n    import re\r\n    var = &quot;barbazfoo&quot;\r\n    \r\n    m = re.search(r&#39;(foo|bar|baz)(.+)&#39;, var)\r\n    if m.group(1) == &#39;foo&#39;:\r\n        print m.group(1)\r\n        # do something with m.group(1)\r\n    elif m.group(1) == &quot;bar&quot;:\r\n        print m.group(1)\r\n        # do something with m.group(1)\r\n    elif m.group(1) == &quot;baz&quot;:\r\n        print m.group(2)\r\n        # do something with m.group(2)\r\n\r\n\r\n","body":"<p>I'd suggest this, as it uses the least regex to accomplish your goal.  It is still functional code, but no worse then your old Perl.<\/p>\n\n<pre><code>import re\nvar = \"barbazfoo\"\n\nm = re.search(r'(foo|bar|baz)(.+)', var)\nif m.group(1) == 'foo':\n    print m.group(1)\n    # do something with m.group(1)\nelif m.group(1) == \"bar\":\n    print m.group(1)\n    # do something with m.group(1)\nelif m.group(1) == \"baz\":\n    print m.group(2)\n    # do something with m.group(2)\n<\/code><\/pre>\n"},{"owner":{"account_id":13524,"reputation":585,"user_id":27239,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/8c23117fe61bfe1504fde64c5ccab8a3?s=256&d=identicon&r=PG","display_name":"maletin","link":"https:\/\/stackoverflow.com\/users\/27239\/maletin"},"is_accepted":false,"score":8,"last_activity_date":1223860980,"last_edit_date":1223860980.0,"creation_date":1223841842,"answer_id":195946,"question_id":193020,"content_license":"CC BY-SA 2.5","body_markdown":"    package Foo;\r\n    use Readonly;\r\n    Readonly my  $C1 =&gt; &#39;const1&#39;;\r\n    Readonly our $C2 =&gt; &#39;const2&#39;;\r\n    sub get_c1 { return $C1 }\r\n    1;\r\n\r\n    perl -MFoo -e &#39;print &quot;$_\\n&quot; for Foo-&gt;get_c1, $Foo::C2&#39;","body":"<pre><code>package Foo;\nuse Readonly;\nReadonly my  $C1 =&gt; 'const1';\nReadonly our $C2 =&gt; 'const2';\nsub get_c1 { return $C1 }\n1;\n\nperl -MFoo -e 'print \"$_\\n\" for Foo-&gt;get_c1, $Foo::C2'\n<\/code><\/pre>\n"},{"owner":{"account_id":6821,"reputation":809,"user_id":11590,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/134c2e494b8809e9f3ddd5d3e6018283?s=256&d=identicon&r=PG","display_name":"bigiain","link":"https:\/\/stackoverflow.com\/users\/11590\/bigiain"},"is_accepted":false,"score":8,"last_activity_date":1667157121,"last_edit_date":1667157121.0,"creation_date":1228962866,"answer_id":358293,"question_id":355456,"content_license":"CC BY-SA 4.0","body_markdown":"Note there&#39;s a gotcha with \r\n\r\n    $ perl -e&#39;warn(&quot;foo&quot;)&#39;\r\n    foo at -e line 1.\r\n\r\n\r\nIf it ends with a newline it _won&#39;t_ print the line number\r\n\r\n    $ perl -e&#39;warn(&quot;foo\\n&quot;)&#39;\r\n    foo\r\n\r\nThis is documented in `perldoc -f die`, but is perhaps easy to miss in the `perldoc -f warn` section&#39;s reference to `die`.","body":"<p>Note there's a gotcha with<\/p>\n<pre><code>$ perl -e'warn(&quot;foo&quot;)'\nfoo at -e line 1.\n<\/code><\/pre>\n<p>If it ends with a newline it <em>won't<\/em> print the line number<\/p>\n<pre><code>$ perl -e'warn(&quot;foo\\n&quot;)'\nfoo\n<\/code><\/pre>\n<p>This is documented in <code>perldoc -f die<\/code>, but is perhaps easy to miss in the <code>perldoc -f warn<\/code> section's reference to <code>die<\/code>.<\/p>\n"},{"owner":{"account_id":9305,"reputation":62086,"user_id":17121,"user_type":"registered","accept_rate":71,"profile_image":"https:\/\/www.gravatar.com\/avatar\/5ec917bad003bdf6cfead04bff473929?s=256&d=identicon&r=PG","display_name":"Dan","link":"https:\/\/stackoverflow.com\/users\/17121\/dan"},"is_accepted":false,"score":8,"last_activity_date":1230012483,"last_edit_date":null,"creation_date":1230012483,"answer_id":388289,"question_id":388187,"content_license":"CC BY-SA 2.5","body_markdown":"[Clone][1] is probably what you want for that. At least, that&#39;s what all the code I&#39;ve seen uses.\r\n\r\n\r\n  [1]: http:\/\/search.cpan.org\/~rdf\/Clone-0.30\/Clone.pm","body":"<p><a href=\"http:\/\/search.cpan.org\/~rdf\/Clone-0.30\/Clone.pm\" rel=\"noreferrer\">Clone<\/a> is probably what you want for that. At least, that's what all the code I've seen uses.<\/p>\n"},{"owner":{"account_id":5473,"reputation":130134,"user_id":2766176,"user_type":"registered","accept_rate":61,"profile_image":"https:\/\/www.gravatar.com\/avatar\/edd8638efe875601bfe394a8aea5b16d?s=256&d=identicon&r=PG","display_name":"brian d foy","link":"https:\/\/stackoverflow.com\/users\/2766176\/brian-d-foy"},"is_accepted":false,"score":8,"last_activity_date":1682686358,"last_edit_date":1682686358.0,"creation_date":1235158278,"answer_id":570914,"question_id":569772,"content_license":"CC BY-SA 4.0","body_markdown":"Perl v5.36 added the experimental `for_list` that allows you to iterate over multiple items at the same time:\r\n\r\n\tuse v5.36;\r\n\tuse experimental qw(for_list);\r\n\r\n\tmy @array = qw(1 2 3 4 5 6);\r\n\tfor my( $i, $j ) ( @array ) {\r\n\t\tsay &quot;i:$i, j:$j&quot;;\r\n\t\t}\r\n\r\n# Prior to v5.36\r\n\r\nIf I only could use standard Perl with no modules, I&#39;d probably drop down to a C-style for loop that counts by 2:\r\n\r\n    for( my $i = 0; $i &lt; @array; $i += 2 ) {\r\n        my( $j, $k ) = @array[ $i, $i+1 ];\r\n        ...\r\n        }\r\n\r\nIf you have an odd number of elements, you&#39;ll have to decide how to handle an extra element. Your problem may not care that you get an extra element that is undefined since you specifically need pairs.\r\n\r\nSimply reading past the end of an array does not change the array, so that part is fine.\r\n\r\nIf you must have pairs, a simple tactic might be to add an appropriate value to the end of the array so you always end up with pairs. Likewise, you can remove the last element (or whichever element) to end up with an even number again. Those depend on your problem.\r\n\r\nOtherwise, you&#39;re doing slightly more work:\r\n\r\n\tfor( my $i = 0; $i &lt; @array; $i += 2 ) {\r\n\t\tpush @pair, $array[$i];\r\n\t\tpush @pair, $array[$i+1] if $i+1 &lt;= $#array;\r\n\t\t...\t\r\n\t\t}\r\n\r\n\r\nHowever, if you wanted something fancy from one of the modules you can&#39;t use, you can just add that module to your code. If you can write code, you can use modules. You might just have to include the module with all of the code you deliver while you set `@INC` appropriately. This is the basic idea of [inc::Module::Install](http:\/\/search.cpan.org\/dist\/Module-Install) and [PAR](http:\/\/search.cpan.org\/dist\/PAR).\r\n\r\nI spend a lot of my time working with a build system that creates its own CPAN repository, installs its dependencies from its private CPAN, and then tests code. Having a build farm doesn&#39;t preclude using modules; it&#39;s local policy that does. However, that might not make sense in all cases even though it&#39;s possible.","body":"<p>Perl v5.36 added the experimental <code>for_list<\/code> that allows you to iterate over multiple items at the same time:<\/p>\n<pre><code>use v5.36;\nuse experimental qw(for_list);\n\nmy @array = qw(1 2 3 4 5 6);\nfor my( $i, $j ) ( @array ) {\n    say &quot;i:$i, j:$j&quot;;\n    }\n<\/code><\/pre>\n<h1>Prior to v5.36<\/h1>\n<p>If I only could use standard Perl with no modules, I'd probably drop down to a C-style for loop that counts by 2:<\/p>\n<pre><code>for( my $i = 0; $i &lt; @array; $i += 2 ) {\n    my( $j, $k ) = @array[ $i, $i+1 ];\n    ...\n    }\n<\/code><\/pre>\n<p>If you have an odd number of elements, you'll have to decide how to handle an extra element. Your problem may not care that you get an extra element that is undefined since you specifically need pairs.<\/p>\n<p>Simply reading past the end of an array does not change the array, so that part is fine.<\/p>\n<p>If you must have pairs, a simple tactic might be to add an appropriate value to the end of the array so you always end up with pairs. Likewise, you can remove the last element (or whichever element) to end up with an even number again. Those depend on your problem.<\/p>\n<p>Otherwise, you're doing slightly more work:<\/p>\n<pre><code>for( my $i = 0; $i &lt; @array; $i += 2 ) {\n    push @pair, $array[$i];\n    push @pair, $array[$i+1] if $i+1 &lt;= $#array;\n    ... \n    }\n<\/code><\/pre>\n<p>However, if you wanted something fancy from one of the modules you can't use, you can just add that module to your code. If you can write code, you can use modules. You might just have to include the module with all of the code you deliver while you set <code>@INC<\/code> appropriately. This is the basic idea of <a href=\"http:\/\/search.cpan.org\/dist\/Module-Install\" rel=\"nofollow noreferrer\">inc::Module::Install<\/a> and <a href=\"http:\/\/search.cpan.org\/dist\/PAR\" rel=\"nofollow noreferrer\">PAR<\/a>.<\/p>\n<p>I spend a lot of my time working with a build system that creates its own CPAN repository, installs its dependencies from its private CPAN, and then tests code. Having a build farm doesn't preclude using modules; it's local policy that does. However, that might not make sense in all cases even though it's possible.<\/p>\n"},{"owner":{"account_id":20591,"reputation":69573,"user_id":49376,"user_type":"registered","accept_rate":83,"profile_image":"https:\/\/www.gravatar.com\/avatar\/2b0a93dc132be4bf3b15b50c8a7e8089?s=256&d=identicon&r=PG","display_name":"Skilldrick","link":"https:\/\/stackoverflow.com\/users\/49376\/skilldrick"},"is_accepted":false,"score":8,"last_activity_date":1260293839,"last_edit_date":null,"creation_date":1260293839,"answer_id":1868586,"question_id":1866098,"content_license":"CC BY-SA 2.5","body_markdown":"[Douglas Crockford thinks that + for Concatenation is a Bad Idea][1]:\r\n\r\n&gt; JavaScript has its share of design errors, such as the overloading of + to mean both\r\n&gt; addition and concatenation with type coercion\r\n\r\n[1]:http:\/\/www.crockford.com\/javascript\/javascript.html","body":"<p><a href=\"http:\/\/www.crockford.com\/javascript\/javascript.html\" rel=\"noreferrer\">Douglas Crockford thinks that + for Concatenation is a Bad Idea<\/a>:<\/p>\n\n<blockquote>\n  <p>JavaScript has its share of design errors, such as the overloading of + to mean both\n  addition and concatenation with type coercion<\/p>\n<\/blockquote>\n"},{"owner":{"account_id":10162,"reputation":923151,"user_id":19068,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/1d2d3229ed1961d2bd81853242493247?s=256&d=identicon&r=PG","display_name":"Quentin","link":"https:\/\/stackoverflow.com\/users\/19068\/quentin"},"is_accepted":false,"score":8,"last_activity_date":1261403654,"last_edit_date":null,"creation_date":1261403654,"answer_id":1940213,"question_id":1940182,"content_license":"CC BY-SA 2.5","body_markdown":"Modules have to return a true value. `1` is a true value.","body":"<p>Modules have to return a true value. <code>1<\/code> is a true value.<\/p>\n"},{"owner":{"account_id":99268,"reputation":5720,"user_id":268224,"user_type":"registered","accept_rate":73,"profile_image":"https:\/\/www.gravatar.com\/avatar\/fb7d0e5dd1af9f2b9bc7d5d24cbea1e9?s=256&d=identicon&r=PG","display_name":"codeholic","link":"https:\/\/stackoverflow.com\/users\/268224\/codeholic"},"is_accepted":false,"score":8,"last_activity_date":1266650628,"last_edit_date":null,"creation_date":1266650628,"answer_id":2301436,"question_id":2300765,"content_license":"CC BY-SA 2.5","body_markdown":"In *very rare cases* you&#39;re not able to use placeholders, as described in other answers. But even in such rare case you shouldn&#39;t tamper with data by yourself, since it makes a place for a potential bug. It&#39;s better to use DBI&#39;s `quote` and `quote_identifier` methods. Also it makes your code less dependent on a particular RDBMS.\r\n\r\n**Disclaimer.** The following is a dummy example and is not meant to illustrate the *very rare case* I mentioned.\r\n\r\n    $dbh-&gt;do(&#39;INSERT INTO &#39; . $dbh-&gt;quote_identifier($table) . &#39; (id, name) VALUES &#39;\r\n        &#39;(NULL, &#39; . $dbh-&gt;quote($name) . &#39;)&#39;);\r\n","body":"<p>In <em>very rare cases<\/em> you're not able to use placeholders, as described in other answers. But even in such rare case you shouldn't tamper with data by yourself, since it makes a place for a potential bug. It's better to use DBI's <code>quote<\/code> and <code>quote_identifier<\/code> methods. Also it makes your code less dependent on a particular RDBMS.<\/p>\n\n<p><strong>Disclaimer.<\/strong> The following is a dummy example and is not meant to illustrate the <em>very rare case<\/em> I mentioned.<\/p>\n\n<pre><code>$dbh-&gt;do('INSERT INTO ' . $dbh-&gt;quote_identifier($table) . ' (id, name) VALUES '\n    '(NULL, ' . $dbh-&gt;quote($name) . ')');\n<\/code><\/pre>\n"},{"owner":{"account_id":80529,"reputation":448484,"user_id":227665,"user_type":"registered","accept_rate":33,"profile_image":"https:\/\/www.gravatar.com\/avatar\/ccc83a013527c186c03ea3a475552813?s=256&d=identicon&r=PG","display_name":"codaddict","link":"https:\/\/stackoverflow.com\/users\/227665\/codaddict"},"is_accepted":false,"score":8,"last_activity_date":1522097491,"last_edit_date":1522097491.0,"creation_date":1287250617,"answer_id":3949999,"question_id":3949991,"content_license":"CC BY-SA 3.0","body_markdown":"This [`comparison`][1] will answer all your queries.\r\n\r\n\r\n  [1]: https:\/\/web.archive.org\/web\/20130830063653\/http:\/\/www.regular-expressions.info\/refflavors.html","body":"<p>This <a href=\"https:\/\/web.archive.org\/web\/20130830063653\/http:\/\/www.regular-expressions.info\/refflavors.html\" rel=\"nofollow noreferrer\"><code>comparison<\/code><\/a> will answer all your queries.<\/p>\n"},{"owner":{"account_id":2866846,"reputation":81,"user_id":2460998,"user_type":"unregistered","profile_image":"https:\/\/www.gravatar.com\/avatar\/4557764fa7868c6efb27d14b8f39dbfe?s=256&d=identicon&r=PG","display_name":"Just Another Perl Hacker","link":"https:\/\/stackoverflow.com\/users\/2460998\/just-another-perl-hacker"},"is_accepted":false,"score":8,"last_activity_date":1370545083,"last_edit_date":null,"creation_date":1370545083,"answer_id":16970044,"question_id":10342875,"content_license":"CC BY-SA 3.0","body_markdown":"If you want something a bit more powerful than Try::Tiny, you might want to try looking at the &lt;a href=&quot;http:\/\/search.cpan.org\/~ash\/TryCatch-1.003002\/lib\/TryCatch.pm&quot;&gt;TryCatch&lt;\/a&gt; module in CPAN.","body":"<p>If you want something a bit more powerful than Try::Tiny, you might want to try looking at the <a href=\"http:\/\/search.cpan.org\/~ash\/TryCatch-1.003002\/lib\/TryCatch.pm\">TryCatch<\/a> module in CPAN.<\/p>\n"},{"owner":{"account_id":153395,"reputation":105635,"user_id":368630,"user_type":"registered","accept_rate":83,"profile_image":"https:\/\/www.gravatar.com\/avatar\/107085826cfbb2700f535417a12c89cb?s=256&d=identicon&r=PG","display_name":"David W.","link":"https:\/\/stackoverflow.com\/users\/368630\/david-w"},"is_accepted":false,"score":8,"last_activity_date":1375457448,"last_edit_date":1495540445.0,"creation_date":1375457448,"answer_id":18020769,"question_id":2933347,"content_license":"CC BY-SA 3.0","body_markdown":"You can try `Arrays::Utils`, and it makes it look nice and simple, but it&#39;s not doing any powerful magic on the back end. Here&#39;s the `array_diffs` code:\r\n\r\n\r\n    sub array_diff(\\@\\@) {\r\n        my %e = map { $_ =&gt; undef } @{$_[1]};\r\n        return @{[ ( grep { (exists $e{$_}) ? ( delete $e{$_} ) : ( 1 ) } @{ $_[0] } ), keys %e ] };\r\n    }\r\n\r\nSince `Arrays::Utils` isn&#39;t a standard module, you need to ask yourself if it&#39;s worth the effort to install and maintain this module. Otherwise, it&#39;s pretty close to [DVK](https:\/\/stackoverflow.com\/a\/2933418\/368630)&#39;s answer.\r\n\r\nThere are certain things you must watch out for, and you have to define what you want to do in that particular case. Let&#39;s say:\r\n\r\n    @array1 = qw(1 1 2 2 3 3 4 4 5 5);\r\n    @array2 = qw(1 2 3 4 5);\r\n\r\nAre these arrays the same? Or, are they different? They have the same values, but there are duplicates in `@array1` and not `@array2`.\r\n\r\nWhat about this?\r\n\r\n    @array1 = qw( 1 1 2 3 4 5 );\r\n    @array2 = qw( 1 1 2 3 4 5 );\r\n\r\nI would say that these arrays are the same, but `Array::Utils::arrays_diff` begs to differ. This is because `Array::Utils` assumes that there are no duplicate entries.\r\n\r\nAnd, even the Perl FAQ pointed out by [mob](https:\/\/stackoverflow.com\/a\/2933416\/368630) also says that _It assumes that each element is unique in a given array_. Is this an assumption you can make?\r\n\r\nNo matter what, hashes are the answer. It&#39;s easy and quick to look up a hash. The problem is what do you want to do with unique values. \r\n\r\nHere&#39;s a solid solution that assumes duplicates don&#39;t matter:\r\n\r\n    sub array_diff {\r\n        my @array1 = @{ shift() };\r\n        my @array2 = @{ shift() }; \r\n\r\n        my %array1_hash;\r\n        my %array2_hash;\r\n\r\n        # Create a hash entry for each element in @array1\r\n        for my $element ( @array1 ) {\r\n           $array1_hash{$element} = @array1;\r\n        }\r\n\r\n        # Same for @array2: This time, use map instead of a loop\r\n        map { $array_2{$_} = 1 } @array2;\r\n\r\n        for my $entry ( @array2 ) {\r\n            if ( not $array1_hash{$entry} ) {\r\n                return 1;  #Entry in @array2 but not @array1: Differ\r\n            }\r\n        }\r\n        if ( keys %array_hash1 != keys %array_hash2 ) {\r\n           return 1;   #Arrays differ\r\n        }\r\n        else {\r\n           return 0;   #Arrays contain the same elements\r\n        }\r\n    }\r\n\r\nIf duplicates do matter, you&#39;ll need a way to count them. Here&#39;s using map not just to create a hash keyed by each element in the array, but also count the duplicates in the array:\r\n\r\n    my %array1_hash;\r\n    my %array2_hash;\r\n    map { $array1_hash{$_} += 1 } @array1;\r\n    map { $array2_hash{$_} += 2 } @array2;\r\n\r\nNow, you can go through each hash and verify that not only do the keys exist, but that their entries match\r\n\r\n    for my $key ( keys %array1_hash ) {\r\n        if ( not exists $array2_hash{$key} \r\n           or $array1_hash{$key} != $array2_hash{$key} ) {\r\n           return 1;   #Arrays differ\r\n        }\r\n     }\r\n\r\nYou will only exit the for loop if all of the entries in `%array1_hash` match their corresponding entries in `%array2_hash`. Now, you have to show that all of the entries in `%array2_hash` also match their entries in `%array1_hash`, and that `%array2_hash` doesn&#39;t have more entries. Fortunately, we can do what we did before:\r\n\r\n    if ( keys %array2_hash != keys %array1_hash ) {\r\n         return 1;  #Arrays have a different number of keys: Don&#39;t match\r\n    }\r\n    else {\r\n         return;    #Arrays have the same keys: They do match\r\n    }","body":"<p>You can try <code>Arrays::Utils<\/code>, and it makes it look nice and simple, but it's not doing any powerful magic on the back end. Here's the <code>array_diffs<\/code> code:<\/p>\n\n<pre><code>sub array_diff(\\@\\@) {\n    my %e = map { $_ =&gt; undef } @{$_[1]};\n    return @{[ ( grep { (exists $e{$_}) ? ( delete $e{$_} ) : ( 1 ) } @{ $_[0] } ), keys %e ] };\n}\n<\/code><\/pre>\n\n<p>Since <code>Arrays::Utils<\/code> isn't a standard module, you need to ask yourself if it's worth the effort to install and maintain this module. Otherwise, it's pretty close to <a href=\"https:\/\/stackoverflow.com\/a\/2933418\/368630\">DVK<\/a>'s answer.<\/p>\n\n<p>There are certain things you must watch out for, and you have to define what you want to do in that particular case. Let's say:<\/p>\n\n<pre><code>@array1 = qw(1 1 2 2 3 3 4 4 5 5);\n@array2 = qw(1 2 3 4 5);\n<\/code><\/pre>\n\n<p>Are these arrays the same? Or, are they different? They have the same values, but there are duplicates in <code>@array1<\/code> and not <code>@array2<\/code>.<\/p>\n\n<p>What about this?<\/p>\n\n<pre><code>@array1 = qw( 1 1 2 3 4 5 );\n@array2 = qw( 1 1 2 3 4 5 );\n<\/code><\/pre>\n\n<p>I would say that these arrays are the same, but <code>Array::Utils::arrays_diff<\/code> begs to differ. This is because <code>Array::Utils<\/code> assumes that there are no duplicate entries.<\/p>\n\n<p>And, even the Perl FAQ pointed out by <a href=\"https:\/\/stackoverflow.com\/a\/2933416\/368630\">mob<\/a> also says that <em>It assumes that each element is unique in a given array<\/em>. Is this an assumption you can make?<\/p>\n\n<p>No matter what, hashes are the answer. It's easy and quick to look up a hash. The problem is what do you want to do with unique values. <\/p>\n\n<p>Here's a solid solution that assumes duplicates don't matter:<\/p>\n\n<pre><code>sub array_diff {\n    my @array1 = @{ shift() };\n    my @array2 = @{ shift() }; \n\n    my %array1_hash;\n    my %array2_hash;\n\n    # Create a hash entry for each element in @array1\n    for my $element ( @array1 ) {\n       $array1_hash{$element} = @array1;\n    }\n\n    # Same for @array2: This time, use map instead of a loop\n    map { $array_2{$_} = 1 } @array2;\n\n    for my $entry ( @array2 ) {\n        if ( not $array1_hash{$entry} ) {\n            return 1;  #Entry in @array2 but not @array1: Differ\n        }\n    }\n    if ( keys %array_hash1 != keys %array_hash2 ) {\n       return 1;   #Arrays differ\n    }\n    else {\n       return 0;   #Arrays contain the same elements\n    }\n}\n<\/code><\/pre>\n\n<p>If duplicates do matter, you'll need a way to count them. Here's using map not just to create a hash keyed by each element in the array, but also count the duplicates in the array:<\/p>\n\n<pre><code>my %array1_hash;\nmy %array2_hash;\nmap { $array1_hash{$_} += 1 } @array1;\nmap { $array2_hash{$_} += 2 } @array2;\n<\/code><\/pre>\n\n<p>Now, you can go through each hash and verify that not only do the keys exist, but that their entries match<\/p>\n\n<pre><code>for my $key ( keys %array1_hash ) {\n    if ( not exists $array2_hash{$key} \n       or $array1_hash{$key} != $array2_hash{$key} ) {\n       return 1;   #Arrays differ\n    }\n }\n<\/code><\/pre>\n\n<p>You will only exit the for loop if all of the entries in <code>%array1_hash<\/code> match their corresponding entries in <code>%array2_hash<\/code>. Now, you have to show that all of the entries in <code>%array2_hash<\/code> also match their entries in <code>%array1_hash<\/code>, and that <code>%array2_hash<\/code> doesn't have more entries. Fortunately, we can do what we did before:<\/p>\n\n<pre><code>if ( keys %array2_hash != keys %array1_hash ) {\n     return 1;  #Arrays have a different number of keys: Don't match\n}\nelse {\n     return;    #Arrays have the same keys: They do match\n}\n<\/code><\/pre>\n"},{"owner":{"account_id":379571,"reputation":1547,"user_id":733029,"user_type":"registered","accept_rate":83,"profile_image":"https:\/\/www.gravatar.com\/avatar\/e2a27cdd8f3ca6b26132176c4f22054d?s=256&d=identicon&r=PG","display_name":"PeakJi","link":"https:\/\/stackoverflow.com\/users\/733029\/peakji"},"is_accepted":false,"score":8,"last_activity_date":1378563157,"last_edit_date":null,"creation_date":1378563157,"answer_id":18674180,"question_id":10726638,"content_license":"CC BY-SA 3.0","body_markdown":"Method:\r\n\r\n    String.prototype.mapReplace = function(map) {\r\n    \tvar regex = [];\r\n    \tfor(var key in map)\r\n    \t\tregex.push(key.replace(\/[\\-\\[\\]\\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]\/g, &quot;\\\\$&amp;&quot;));\r\n    \treturn this.replace(new RegExp(regex.join(&#39;|&#39;),&quot;g&quot;),function(word){\r\n    \t\treturn map[word];\r\n    \t});\r\n    };\r\n\r\nA perfect example:\r\n\r\n    var s = &quot;I think Peak rocks!&quot;\r\n    s.mapReplace({&quot;I think&quot;:&quot;Actually&quot;,&quot;rocks&quot;:&quot;sucks&quot;})\r\n    \/\/ console: &quot;Actually Peak sucks!&quot;","body":"<p>Method:<\/p>\n\n<pre><code>String.prototype.mapReplace = function(map) {\n    var regex = [];\n    for(var key in map)\n        regex.push(key.replace(\/[\\-\\[\\]\\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]\/g, \"\\\\$&amp;\"));\n    return this.replace(new RegExp(regex.join('|'),\"g\"),function(word){\n        return map[word];\n    });\n};\n<\/code><\/pre>\n\n<p>A perfect example:<\/p>\n\n<pre><code>var s = \"I think Peak rocks!\"\ns.mapReplace({\"I think\":\"Actually\",\"rocks\":\"sucks\"})\n\/\/ console: \"Actually Peak sucks!\"\n<\/code><\/pre>\n"},{"owner":{"account_id":282227,"reputation":12538,"user_id":578989,"user_type":"registered","accept_rate":22,"profile_image":"https:\/\/i.stack.imgur.com\/RHO8V.jpg?s=256&g=1","display_name":"Mayank Jaiswal","link":"https:\/\/stackoverflow.com\/users\/578989\/mayank-jaiswal"},"is_accepted":false,"score":8,"last_activity_date":1474313351,"last_edit_date":null,"creation_date":1474313351,"answer_id":39580670,"question_id":11011674,"content_license":"CC BY-SA 3.0","body_markdown":"**My practical Advice.** \r\n\r\nPersonally, I would refrain writing such a complex regex altogether. What if your number changes from 100 to 200 in near future. Your regex will have to change significantly and it might be even harder to write. All the above solutions are NOT self explanatory and you will have to complement it with a comment in your code. That&#39;s a smell. \r\n\r\nReadability matters. Code is for humans and not for machines.\r\n\r\nWhy not write some code around it and keep regex dead simple to understand. \r\n","body":"<p><strong>My practical Advice.<\/strong> <\/p>\n\n<p>Personally, I would refrain writing such a complex regex altogether. What if your number changes from 100 to 200 in near future. Your regex will have to change significantly and it might be even harder to write. All the above solutions are NOT self explanatory and you will have to complement it with a comment in your code. That's a smell. <\/p>\n\n<p>Readability matters. Code is for humans and not for machines.<\/p>\n\n<p>Why not write some code around it and keep regex dead simple to understand. <\/p>\n"},{"owner":{"account_id":12852886,"reputation":57012,"user_id":9297144,"user_type":"registered","profile_image":"https:\/\/i.stack.imgur.com\/WLMMD.png?s=256&g=1","display_name":"Xavier Guihot","link":"https:\/\/stackoverflow.com\/users\/9297144\/xavier-guihot"},"is_accepted":true,"score":8,"last_activity_date":1584014091,"last_edit_date":1584014091.0,"creation_date":1556431576,"answer_id":55887489,"question_id":122277,"content_license":"CC BY-SA 4.0","body_markdown":"Starting `Python 3.8`, and the introduction of [assignment expressions (PEP 572)](https:\/\/www.python.org\/dev\/peps\/pep-0572\/) (`:=` operator), we can now capture the condition value `re.search(pattern, text)` in a variable `match` in order to both check if it&#39;s not `None` and then re-use it within the body of the condition:\r\n\r\n    if match := re.search(r&#39;foo(.+)&#39;, text):\r\n      # do something with match.group(1)\r\n    elif match := re.search(r&#39;bar(.+)&#39;, text):\r\n      # do something with match.group(1)\r\n    elif match := re.search(r&#39;baz(.+)&#39;, text)\r\n      # do something with match.group(1)\r\n","body":"<p>Starting <code>Python 3.8<\/code>, and the introduction of <a href=\"https:\/\/www.python.org\/dev\/peps\/pep-0572\/\" rel=\"nofollow noreferrer\">assignment expressions (PEP 572)<\/a> (<code>:=<\/code> operator), we can now capture the condition value <code>re.search(pattern, text)<\/code> in a variable <code>match<\/code> in order to both check if it's not <code>None<\/code> and then re-use it within the body of the condition:<\/p>\n\n<pre><code>if match := re.search(r'foo(.+)', text):\n  # do something with match.group(1)\nelif match := re.search(r'bar(.+)', text):\n  # do something with match.group(1)\nelif match := re.search(r'baz(.+)', text)\n  # do something with match.group(1)\n<\/code><\/pre>\n"},{"owner":{"account_id":3404868,"reputation":3942,"user_id":2856202,"user_type":"registered","accept_rate":50,"profile_image":"https:\/\/i.stack.imgur.com\/8GGC1.png?s=256&g=1","display_name":"daparic","link":"https:\/\/stackoverflow.com\/users\/2856202\/daparic"},"is_accepted":false,"score":8,"last_activity_date":1572794440,"last_edit_date":null,"creation_date":1572794440,"answer_id":58681578,"question_id":33812618,"content_license":"CC BY-SA 4.0","body_markdown":"To those who don&#39;t want to call `flush()` following every `print` like a baby-sitter thing, because it might be in a `loop` or something and you simply want your `print` to be unbuffered, then simply put this at the top portion of your perl script:\r\n\r\n    STDOUT-&gt;autoflush(1);\r\n\r\nThereafter, no need to call `flush()` after `print`. ","body":"<p>To those who don't want to call <code>flush()<\/code> following every <code>print<\/code> like a baby-sitter thing, because it might be in a <code>loop<\/code> or something and you simply want your <code>print<\/code> to be unbuffered, then simply put this at the top portion of your perl script:<\/p>\n\n<pre><code>STDOUT-&gt;autoflush(1);\n<\/code><\/pre>\n\n<p>Thereafter, no need to call <code>flush()<\/code> after <code>print<\/code>. <\/p>\n"},{"owner":{"account_id":8210,"reputation":155382,"user_id":14660,"user_type":"registered","accept_rate":62,"profile_image":"https:\/\/www.gravatar.com\/avatar\/e55e0ec3c00f834d78fbdddeaa36e308?s=256&d=identicon&r=PG","display_name":"Schwern","link":"https:\/\/stackoverflow.com\/users\/14660\/schwern"},"is_accepted":false,"score":7,"last_activity_date":1224320876,"last_edit_date":null,"creation_date":1224320876,"answer_id":214795,"question_id":193020,"content_license":"CC BY-SA 2.5","body_markdown":"To add to the bag of tricks, since a constant is just a subroutine you can even call it as a class method.\r\n\r\n    package Foo;\r\n    use constant PI =&gt; 3.14;\r\n    \r\n    print Foo-&gt;PI;\r\n\r\nIf you have lots of constants it&#39;s a nice way to get at the occasional one without having to export them all.  However, unlike `Foo::PI` or exporting `PI`, Perl will not compile out `Foo-&gt;PI` so you incur the cost of a method call (which probably doesn&#39;t matter).","body":"<p>To add to the bag of tricks, since a constant is just a subroutine you can even call it as a class method.<\/p>\n\n<pre><code>package Foo;\nuse constant PI =&gt; 3.14;\n\nprint Foo-&gt;PI;\n<\/code><\/pre>\n\n<p>If you have lots of constants it's a nice way to get at the occasional one without having to export them all.  However, unlike <code>Foo::PI<\/code> or exporting <code>PI<\/code>, Perl will not compile out <code>Foo-&gt;PI<\/code> so you incur the cost of a method call (which probably doesn't matter).<\/p>\n"},{"owner":{"account_id":5473,"reputation":130134,"user_id":2766176,"user_type":"registered","accept_rate":61,"profile_image":"https:\/\/www.gravatar.com\/avatar\/edd8638efe875601bfe394a8aea5b16d?s=256&d=identicon&r=PG","display_name":"brian d foy","link":"https:\/\/stackoverflow.com\/users\/2766176\/brian-d-foy"},"is_accepted":false,"score":7,"last_activity_date":1228424580,"last_edit_date":null,"creation_date":1228424580,"answer_id":342054,"question_id":341484,"content_license":"CC BY-SA 2.5","body_markdown":"You want to look in the `%INC` variable, which records the filename it loaded for the libraries you load with `do`, `require`, or `use`. See [perlvar](http:\/\/perldoc.perl.org\/perlvar.html) for the details.","body":"<p>You want to look in the <code>%INC<\/code> variable, which records the filename it loaded for the libraries you load with <code>do<\/code>, <code>require<\/code>, or <code>use<\/code>. See <a href=\"http:\/\/perldoc.perl.org\/perlvar.html\" rel=\"noreferrer\">perlvar<\/a> for the details.<\/p>\n"},{"owner":{"account_id":19405,"reputation":71,"user_id":45474,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/?s=256&d=identicon&r=PG","display_name":"ChrisD","link":"https:\/\/stackoverflow.com\/users\/45474\/chrisd"},"is_accepted":false,"score":7,"last_activity_date":1229465229,"last_edit_date":null,"creation_date":1229465229,"answer_id":372936,"question_id":372370,"content_license":"CC BY-SA 2.5","body_markdown":"Actually, to catch the odd character, you want to make the second character optional:\r\n\r\n    @array = ( $string =~ m\/..?\/g );","body":"<p>Actually, to catch the odd character, you want to make the second character optional:<\/p>\n\n<pre><code>@array = ( $string =~ m\/..?\/g );\n<\/code><\/pre>\n"},{"owner":{"account_id":22899,"reputation":196,"user_id":56945,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/1538e488ef2fefd0a9032d4802f81eef?s=256&d=identicon&r=PG","display_name":"noswonky","link":"https:\/\/stackoverflow.com\/users\/56945\/noswonky"},"is_accepted":false,"score":7,"last_activity_date":1248963209,"last_edit_date":1248963209.0,"creation_date":1233102490,"answer_id":485965,"question_id":483655,"content_license":"CC BY-SA 2.5","body_markdown":"Actually you can just stick &#39;0b&#39; on the front and it&#39;s treated as a binary number.\r\n\r\n    perl -le &#39;print 0b101&#39;\r\n    5\r\n\r\nBut this only works for a bareword.\r\n","body":"<p>Actually you can just stick '0b' on the front and it's treated as a binary number.<\/p>\n\n<pre><code>perl -le 'print 0b101'\n5\n<\/code><\/pre>\n\n<p>But this only works for a bareword.<\/p>\n"},{"owner":{"account_id":13549,"reputation":1898,"user_id":27310,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/ef10e56567f5d6e20bc3f7f4ab4e3254?s=256&d=identicon&r=PG","display_name":"Gaurav","link":"https:\/\/stackoverflow.com\/users\/27310\/gaurav"},"is_accepted":false,"score":7,"last_activity_date":1237357218,"last_edit_date":null,"creation_date":1237357218,"answer_id":657150,"question_id":655986,"content_license":"CC BY-SA 2.5","body_markdown":"I work on a pretty small website application, and we&#39;re just working on improving our deployment (improving it from &quot;spend a day setting up all the modules we need on Windows and then throw files at it until everything works&quot;, so that&#39;s some improvement).\r\n\r\nWe&#39;ve got three things which we need doing to set up our website:\r\n\r\n 1. A Perl module made using `Module::Starter`, containing a `Config` module which holds the site-wide configuration options. On installation, this module (using `MakeMaker`&#39;s `PREREQ_PM` to check that all the modules we require have already been installed). Any modules which haven&#39;t need to be installed before this module can be installed.\r\n 2. A few SQL files which need to be executed to set up the database.\r\n 3. The Perl CGI files which make up the website. As long as Apache is pointed to them, the website &quot;just works&quot;. This includes the common code modules used by all Perl files.\r\n\r\nDeployment consists in me pulling from everybody&#39;s Git branches and packaging a version. We can then hand this over for testing, either locally or on an Amazon EC2 instance. Once we&#39;re good to release, we either install it over the last version, or move the database over to the testing instance and make *that* the new instance.\r\n\r\nComparing this to your criteria:\r\n\r\n 1. Control of libraries: Somewhat. We use CPAN modules quite extensively. To try a new version, we upgrade our own version of a module before doing that upgrade on the production server. We manually maintain a list, but since our codebase is fairly small, it&#39;s not hard to figure out which modules are being used (via `grep`ing for lines starting with `use`, for instance).\r\n 2. Makefile\/Build integration: Yes. Any Makefile related stuff is done by our EU::MM setup. We don&#39;t have global tests, but since our entire test suite recently ended up in one folder, hopefully we&#39;ll soon have something you can run `prove` on directly.\r\n 3. Version control friendly: Yes. Our entire source code is contained in a single folder, without too much duplication.\r\n 4. Cross platform: Yes. We&#39;ve got lots of weird stuff happening in MakeMaker to allow us to do this, but as a startup, having cross-platform code gives us valuable flexibility. We try to use Perl&#39;s core modules and tools, and Pure Perl modules from the CPAN, as much as possible.\r\n 5. Single Perl install: Yes. We can handle Perl being anywhere, and installed under any settings, as long as all of Perl&#39;s own module tools can work - there&#39;s been a lot of effort put into getting `CPAN`, `EU::MM` and others working well across all systems, and it seems a shame to waste it.\r\n 6. Easy start up: Not really. This system evolved (ie: was not intelligently designed) from a single folder of all the source files and a text file with a list of modules which need to be installed. While formalizing testing for installed modules is a huge improvement, it still takes us something like a day to set this up, mainly spent installing our prerequisite modules (not all of them are easy to install on Windows). I&#39;m hoping to use [the Perl Win32 community][1] to try and get issues with problematic CPAN modules ironed out.\r\n\r\nMind you, it&#39;s a _really_ simple website, no XS, complicated web framework, or any such. We&#39;ve also only supported this setup through about two versions, so we don&#39;t have enough experience as to how this is going to work as the code gets more complicated and our deployment platforms become more varied. I&#39;d really appreciate any suggestions or comments on our system.\r\n\r\n\r\n  [1]: http:\/\/win32.perl.org\/","body":"<p>I work on a pretty small website application, and we're just working on improving our deployment (improving it from \"spend a day setting up all the modules we need on Windows and then throw files at it until everything works\", so that's some improvement).<\/p>\n\n<p>We've got three things which we need doing to set up our website:<\/p>\n\n<ol>\n<li>A Perl module made using <code>Module::Starter<\/code>, containing a <code>Config<\/code> module which holds the site-wide configuration options. On installation, this module (using <code>MakeMaker<\/code>'s <code>PREREQ_PM<\/code> to check that all the modules we require have already been installed). Any modules which haven't need to be installed before this module can be installed.<\/li>\n<li>A few SQL files which need to be executed to set up the database.<\/li>\n<li>The Perl CGI files which make up the website. As long as Apache is pointed to them, the website \"just works\". This includes the common code modules used by all Perl files.<\/li>\n<\/ol>\n\n<p>Deployment consists in me pulling from everybody's Git branches and packaging a version. We can then hand this over for testing, either locally or on an Amazon EC2 instance. Once we're good to release, we either install it over the last version, or move the database over to the testing instance and make <em>that<\/em> the new instance.<\/p>\n\n<p>Comparing this to your criteria:<\/p>\n\n<ol>\n<li>Control of libraries: Somewhat. We use CPAN modules quite extensively. To try a new version, we upgrade our own version of a module before doing that upgrade on the production server. We manually maintain a list, but since our codebase is fairly small, it's not hard to figure out which modules are being used (via <code>grep<\/code>ing for lines starting with <code>use<\/code>, for instance).<\/li>\n<li>Makefile\/Build integration: Yes. Any Makefile related stuff is done by our EU::MM setup. We don't have global tests, but since our entire test suite recently ended up in one folder, hopefully we'll soon have something you can run <code>prove<\/code> on directly.<\/li>\n<li>Version control friendly: Yes. Our entire source code is contained in a single folder, without too much duplication.<\/li>\n<li>Cross platform: Yes. We've got lots of weird stuff happening in MakeMaker to allow us to do this, but as a startup, having cross-platform code gives us valuable flexibility. We try to use Perl's core modules and tools, and Pure Perl modules from the CPAN, as much as possible.<\/li>\n<li>Single Perl install: Yes. We can handle Perl being anywhere, and installed under any settings, as long as all of Perl's own module tools can work - there's been a lot of effort put into getting <code>CPAN<\/code>, <code>EU::MM<\/code> and others working well across all systems, and it seems a shame to waste it.<\/li>\n<li>Easy start up: Not really. This system evolved (ie: was not intelligently designed) from a single folder of all the source files and a text file with a list of modules which need to be installed. While formalizing testing for installed modules is a huge improvement, it still takes us something like a day to set this up, mainly spent installing our prerequisite modules (not all of them are easy to install on Windows). I'm hoping to use <a href=\"http:\/\/win32.perl.org\/\" rel=\"noreferrer\">the Perl Win32 community<\/a> to try and get issues with problematic CPAN modules ironed out.<\/li>\n<\/ol>\n\n<p>Mind you, it's a <em>really<\/em> simple website, no XS, complicated web framework, or any such. We've also only supported this setup through about two versions, so we don't have enough experience as to how this is going to work as the code gets more complicated and our deployment platforms become more varied. I'd really appreciate any suggestions or comments on our system.<\/p>\n"},{"owner":{"account_id":27626,"reputation":347306,"user_id":73070,"user_type":"registered","accept_rate":81,"profile_image":"https:\/\/www.gravatar.com\/avatar\/d54ed51c0f03cb461741c3ec77a837b2?s=256&d=identicon&r=PG","display_name":"Joey","link":"https:\/\/stackoverflow.com\/users\/73070\/joey"},"is_accepted":false,"score":7,"last_activity_date":1260268804,"last_edit_date":null,"creation_date":1260268804,"answer_id":1866137,"question_id":1866098,"content_license":"CC BY-SA 2.5","body_markdown":"The use of the dot as string concatenation operator in PHP probably dates back to Perl. Remember that PHP once was nothing more than a bunch of Perl scripts.\r\n\r\nAlso it makes sense to have distinct string concatenation and addition operators, especially in weakly-typed languages. There are enough pitfalls in PHP already to shoot yourself in the foot, you don&#39;t need to add another one.","body":"<p>The use of the dot as string concatenation operator in PHP probably dates back to Perl. Remember that PHP once was nothing more than a bunch of Perl scripts.<\/p>\n\n<p>Also it makes sense to have distinct string concatenation and addition operators, especially in weakly-typed languages. There are enough pitfalls in PHP already to shoot yourself in the foot, you don't need to add another one.<\/p>\n"},{"owner":{"account_id":25722,"reputation":73090,"user_id":66353,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/b56a740041997df881354ef8c97496d7?s=256&d=identicon&r=PG","display_name":"Alan Haggai Alavi","link":"https:\/\/stackoverflow.com\/users\/66353\/alan-haggai-alavi"},"is_accepted":false,"score":7,"last_activity_date":1269858158,"last_edit_date":1269858158.0,"creation_date":1260506393,"answer_id":1885817,"question_id":1885800,"content_license":"CC BY-SA 2.5","body_markdown":"Use [Acme::Bleach][1] to bleach the code clean. Then obfuscate the resulting bleached code. However, any encoded\/obfuscated code can be decoded, as the Perl interpreter has to decode it anyway.\r\n\r\n\r\n  [1]: http:\/\/search.cpan.org\/perldoc?Acme::Bleach","body":"<p>Use <a href=\"http:\/\/search.cpan.org\/perldoc?Acme::Bleach\" rel=\"nofollow noreferrer\">Acme::Bleach<\/a> to bleach the code clean. Then obfuscate the resulting bleached code. However, any encoded\/obfuscated code can be decoded, as the Perl interpreter has to decode it anyway.<\/p>\n"},{"owner":{"account_id":47659,"reputation":5206,"user_id":141274,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/dbb220a8a224228bec772768e5f8a1d8?s=256&d=identicon&r=PG","display_name":"Mikael S","link":"https:\/\/stackoverflow.com\/users\/141274\/mikael-s"},"is_accepted":false,"score":7,"last_activity_date":1450819575,"last_edit_date":1450819575.0,"creation_date":1266632613,"answer_id":2300793,"question_id":2300765,"content_license":"CC BY-SA 3.0","body_markdown":"How do you call the database?\r\n\r\n[DBI][1] has support for prepared statements using [placeholders][2]. Both [DBIx::Class][3] and  [Rose::DB::Object][4] sanitize values automatically, if you use the &quot;find&quot; method provided by each library.\r\n\r\n\r\n  [1]: http:\/\/search.cpan.org\/perldoc\/DBI\r\n  [2]: http:\/\/search.cpan.org\/perldoc\/DBI#Placeholders_and_Bind_Values\r\n  [3]: https:\/\/metacpan.org\/pod\/DBIx::Class\r\n  [4]: http:\/\/search.cpan.org\/perldoc\/Rose::DB::Object","body":"<p>How do you call the database?<\/p>\n\n<p><a href=\"http:\/\/search.cpan.org\/perldoc\/DBI\" rel=\"nofollow noreferrer\">DBI<\/a> has support for prepared statements using <a href=\"http:\/\/search.cpan.org\/perldoc\/DBI#Placeholders_and_Bind_Values\" rel=\"nofollow noreferrer\">placeholders<\/a>. Both <a href=\"https:\/\/metacpan.org\/pod\/DBIx::Class\" rel=\"nofollow noreferrer\">DBIx::Class<\/a> and  <a href=\"http:\/\/search.cpan.org\/perldoc\/Rose::DB::Object\" rel=\"nofollow noreferrer\">Rose::DB::Object<\/a> sanitize values automatically, if you use the \"find\" method provided by each library.<\/p>\n"},{"owner":{"account_id":80529,"reputation":448484,"user_id":227665,"user_type":"registered","accept_rate":33,"profile_image":"https:\/\/www.gravatar.com\/avatar\/ccc83a013527c186c03ea3a475552813?s=256&d=identicon&r=PG","display_name":"codaddict","link":"https:\/\/stackoverflow.com\/users\/227665\/codaddict"},"is_accepted":false,"score":7,"last_activity_date":1406655251,"last_edit_date":1406655251.0,"creation_date":1283786330,"answer_id":3652544,"question_id":3652527,"content_license":"CC BY-SA 3.0","body_markdown":"You can do substitution as:\r\n\r\n    $a = &#39;stackoverflow&#39;;\r\n    $a =~ s\/(\\w+)overflow\/$1\/;\r\n\r\n`$a` is now `&quot;stack&quot;`\r\n\r\n","body":"<p>You can do substitution as:<\/p>\n\n<pre><code>$a = 'stackoverflow';\n$a =~ s\/(\\w+)overflow\/$1\/;\n<\/code><\/pre>\n\n<p><code>$a<\/code> is now <code>\"stack\"<\/code><\/p>\n"},{"owner":{"account_id":29074,"reputation":64398,"user_id":78259,"user_type":"registered","accept_rate":53,"profile_image":"https:\/\/www.gravatar.com\/avatar\/844c572938eaad1e44eb084fb39416f9?s=256&d=identicon&r=PG","display_name":"Chas. Owens","link":"https:\/\/stackoverflow.com\/users\/78259\/chas-owens"},"is_accepted":false,"score":7,"last_activity_date":1283787046,"last_edit_date":null,"creation_date":1283787046,"answer_id":3652612,"question_id":3652527,"content_license":"CC BY-SA 2.5","body_markdown":"Well, you could say\r\n\r\n    my $variable;\r\n    ($variable) = ($variable = &quot;find something soon&quot;) =~ \/(find something).*\/;\r\n\r\nor\r\n\r\n    (my $variable = &quot;find something soon&quot;) =~ s\/^.*?(find something).*\/$1\/;\r\n","body":"<p>Well, you could say<\/p>\n\n<pre><code>my $variable;\n($variable) = ($variable = \"find something soon\") =~ \/(find something).*\/;\n<\/code><\/pre>\n\n<p>or<\/p>\n\n<pre><code>(my $variable = \"find something soon\") =~ s\/^.*?(find something).*\/$1\/;\n<\/code><\/pre>\n"},{"owner":{"account_id":93007,"reputation":52010,"user_id":254643,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/211ea8bb93bbd3df4eca1d59fe2c7e0d?s=256&d=identicon&r=PG","display_name":"Raghuram","link":"https:\/\/stackoverflow.com\/users\/254643\/raghuram"},"is_accepted":false,"score":7,"last_activity_date":1286158176,"last_edit_date":null,"creation_date":1286158176,"answer_id":3852424,"question_id":3852395,"content_license":"CC BY-SA 2.5","body_markdown":"You should look at &quot;perl -d&quot; (turn on debugger) or &quot;perl -c&quot; (check your script before executing","body":"<p>You should look at \"perl -d\" (turn on debugger) or \"perl -c\" (check your script before executing<\/p>\n"},{"owner":{"account_id":104998,"reputation":5278,"user_id":280449,"user_type":"registered","accept_rate":79,"profile_image":"https:\/\/www.gravatar.com\/avatar\/89f948c00bdba752360909d1cc585e12?s=256&d=identicon&r=PG","display_name":"Dallaylaen","link":"https:\/\/stackoverflow.com\/users\/280449\/dallaylaen"},"is_accepted":false,"score":7,"last_activity_date":1295429680,"last_edit_date":1295429680.0,"creation_date":1295382335,"answer_id":4728653,"question_id":4727480,"content_license":"CC BY-SA 2.5","body_markdown":"Convert your perl scripts into batch files using [pl2bat](http:\/\/p3rl.org\/pl2bat) once they are ready to be run by users.\r\n\r\nThe trick works through the `perl -x` switch which, according to `perldoc perlrun`, makes Perl search for the first line looking like `#!.*perl`.","body":"<p>Convert your perl scripts into batch files using <a href=\"http:\/\/p3rl.org\/pl2bat\" rel=\"noreferrer\">pl2bat<\/a> once they are ready to be run by users.<\/p>\n\n<p>The trick works through the <code>perl -x<\/code> switch which, according to <code>perldoc perlrun<\/code>, makes Perl search for the first line looking like <code>#!.*perl<\/code>.<\/p>\n"},{"owner":{"account_id":4365,"reputation":297370,"user_id":6521,"user_type":"registered","accept_rate":95,"profile_image":"https:\/\/www.gravatar.com\/avatar\/6af19633ae0228e3b5bb4de168b5d19d?s=256&d=identicon&r=PG","display_name":"Paul Dixon","link":"https:\/\/stackoverflow.com\/users\/6521\/paul-dixon"},"is_accepted":false,"score":7,"last_activity_date":1296996797,"last_edit_date":1296996797.0,"creation_date":1296996459,"answer_id":4913378,"question_id":4913280,"content_license":"CC BY-SA 2.5","body_markdown":"The outer `@{}` part is a dereference - this implies `$m-&gt;links` is a *reference* to an array, so this operator deferences it to refer to the array directly, which is then copied to `@top_links`\r\n\r\nChapter 8 of the &#39;[Camel Book][1]&#39; is a good place to learn about references, or the [perlref][2] section of the Perl documentation.\r\n\r\nThe `-&gt;` arrow operator is an object dereference, in this case fetching the `links` member of the `$m` object. Similarly, later chapters of the Camel Book cover Perl&#39;s object oriented support in detail. See the [perlobj][3] section of the Perl documentation also.\r\n\r\n\r\n  [1]: http:\/\/oreilly.com\/catalog\/9780596000271\r\n  [2]: http:\/\/perldoc.perl.org\/perlref.html\r\n  [3]: http:\/\/perldoc.perl.org\/perlobj.html","body":"<p>The outer <code>@{}<\/code> part is a dereference - this implies <code>$m-&gt;links<\/code> is a <em>reference<\/em> to an array, so this operator deferences it to refer to the array directly, which is then copied to <code>@top_links<\/code><\/p>\n\n<p>Chapter 8 of the '<a href=\"http:\/\/oreilly.com\/catalog\/9780596000271\" rel=\"noreferrer\">Camel Book<\/a>' is a good place to learn about references, or the <a href=\"http:\/\/perldoc.perl.org\/perlref.html\" rel=\"noreferrer\">perlref<\/a> section of the Perl documentation.<\/p>\n\n<p>The <code>-&gt;<\/code> arrow operator is an object dereference, in this case fetching the <code>links<\/code> member of the <code>$m<\/code> object. Similarly, later chapters of the Camel Book cover Perl's object oriented support in detail. See the <a href=\"http:\/\/perldoc.perl.org\/perlobj.html\" rel=\"noreferrer\">perlobj<\/a> section of the Perl documentation also.<\/p>\n"},{"owner":{"account_id":57525,"reputation":37103,"user_id":172322,"user_type":"registered","accept_rate":97,"profile_image":"https:\/\/i.stack.imgur.com\/wyuMa.jpg?s=256&g=1","display_name":"Yahel","link":"https:\/\/stackoverflow.com\/users\/172322\/yahel"},"is_accepted":false,"score":7,"last_activity_date":1310167413,"last_edit_date":1495541652.0,"creation_date":1310167413,"answer_id":6631563,"question_id":4731104,"content_license":"CC BY-SA 3.0","body_markdown":"You might get what you&#39;re looking for something like using `re.compile` with `re.DEBUG`. See this [excellent answer][1] from the [Python Hidden Features][2] Community wiki for an extensive explanation. \r\n\r\n\r\n  [1]: https:\/\/stackoverflow.com\/questions\/101268\/hidden-features-of-python\/143636#143636\r\n  [2]: https:\/\/stackoverflow.com\/q\/101268\/172322","body":"<p>You might get what you're looking for something like using <code>re.compile<\/code> with <code>re.DEBUG<\/code>. See this <a href=\"https:\/\/stackoverflow.com\/questions\/101268\/hidden-features-of-python\/143636#143636\">excellent answer<\/a> from the <a href=\"https:\/\/stackoverflow.com\/q\/101268\/172322\">Python Hidden Features<\/a> Community wiki for an extensive explanation. <\/p>\n"},{"owner":{"account_id":39208,"reputation":251717,"user_id":112968,"user_type":"registered","accept_rate":68,"profile_image":"https:\/\/i.stack.imgur.com\/zHTaT.png?s=256&g=1","display_name":"knittl","link":"https:\/\/stackoverflow.com\/users\/112968\/knittl"},"is_accepted":false,"score":7,"last_activity_date":1667222504,"last_edit_date":1667222504.0,"creation_date":1333639770,"answer_id":10031531,"question_id":10031455,"content_license":"CC BY-SA 4.0","body_markdown":"I&#39;m not a Perl pro (by all means, I&#39;m not), but AFAIK it has to do with lists.\r\nPerl has different contexts (scalar, list). Using `($var)` switches to list context, `$var` is scalar context.\r\n\r\n    my $var = (1, 2, 4);   # $var = 4 (last element)\r\n    my ($var) = (1, 2, 4); # $var = 1\r\n","body":"<p>I'm not a Perl pro (by all means, I'm not), but AFAIK it has to do with lists.\nPerl has different contexts (scalar, list). Using <code>($var)<\/code> switches to list context, <code>$var<\/code> is scalar context.<\/p>\n<pre><code>my $var = (1, 2, 4);   # $var = 4 (last element)\nmy ($var) = (1, 2, 4); # $var = 1\n<\/code><\/pre>\n"},{"owner":{"account_id":374917,"reputation":66886,"user_id":725418,"user_type":"registered","accept_rate":86,"profile_image":"https:\/\/www.gravatar.com\/avatar\/82ac2dc3e1ad4b7187f245c416528df9?s=256&d=identicon&r=PG","display_name":"TLP","link":"https:\/\/stackoverflow.com\/users\/725418\/tlp"},"is_accepted":false,"score":7,"last_activity_date":1333726673,"last_edit_date":1333726673.0,"creation_date":1333641059,"answer_id":10031844,"question_id":10031455,"content_license":"CC BY-SA 3.0","body_markdown":"You are confusing two different things. First off, when using `my` to declare several variables, you need to use parentheses:\r\n\r\n    my $foo, $bar;  \r\n\r\nDoes not work, as it is considered to be two different statements:\r\n\r\n    my $foo;\r\n    $bar;\r\n\r\nSo you need parentheses to group together the argument into an argument list to the *function* `my`:\r\n\r\n    my($foo, $bar);\r\n\r\nSecondly, you have explicit grouping in order to invoke list context:\r\n\r\n    $foo, $bar = &quot;a&quot;, &quot;b&quot;; # wrong!\r\n\r\nWill be considered three separate statements:\r\n\r\n    $foo;\r\n    $bar = &quot;a&quot;;\r\n    &quot;b&quot;;\r\n\r\nBut if you use parentheses to group `$foo` and `$bar` into a list, the assignment operator will use a list context:\r\n\r\n    ($foo, $bar) = (&quot;a&quot;, &quot;b&quot;);\r\n\r\nCuriously, if you remove the RHS parentheses, you will also experience a hickup:\r\n\r\n    ($foo, $bar) = &quot;a&quot;, &quot;b&quot;; # Useless use of a constant (b) in void context\r\n\r\nBut that is because the `=` operator has higher precedence than comma `,`, which you can see in [perlop][1]. If you try:\r\n\r\n    my @array = (&quot;a&quot;, &quot;b&quot;);\r\n    ($foo, $bar) = @array;\r\n\r\nYou will get the desired behaviour without parentheses.\r\n\r\nNow to complete the circle, lets remove the list context in the above and see what happens:\r\n\r\n    my @array = (&quot;a&quot;, &quot;b&quot;);\r\n    $foo = @array;\r\n    print $foo;\r\n\r\nThis prints `2`, because the array is evaluated in scalar context, and arrays in scalar context return the number of elements they contain. In this case, it is `2`.\r\n\r\nHence, statements such as these use list context:\r\n\r\n    my ($foo) = @array;          # $foo is set to $array[0], first array element\r\n    my ($bar) = (&quot;a&quot;, &quot;b&quot;, &quot;c&quot;); # $bar is set to &quot;a&quot;, first list element\r\n\r\nIt is a way of overriding the scalar context which is implied in scalar assignment. For comparison, these assignments are in scalar context:\r\n\r\n    my $foo = @array;            # $foo is set to the number of elements in the array\r\n    my $bar = (&quot;a&quot;, &quot;b&quot;, &quot;c&quot;);   # $bar is set to &quot;c&quot;, last list element\r\n\r\n  [1]: http:\/\/perldoc.perl.org\/perlop.html","body":"<p>You are confusing two different things. First off, when using <code>my<\/code> to declare several variables, you need to use parentheses:<\/p>\n\n<pre><code>my $foo, $bar;  \n<\/code><\/pre>\n\n<p>Does not work, as it is considered to be two different statements:<\/p>\n\n<pre><code>my $foo;\n$bar;\n<\/code><\/pre>\n\n<p>So you need parentheses to group together the argument into an argument list to the <em>function<\/em> <code>my<\/code>:<\/p>\n\n<pre><code>my($foo, $bar);\n<\/code><\/pre>\n\n<p>Secondly, you have explicit grouping in order to invoke list context:<\/p>\n\n<pre><code>$foo, $bar = \"a\", \"b\"; # wrong!\n<\/code><\/pre>\n\n<p>Will be considered three separate statements:<\/p>\n\n<pre><code>$foo;\n$bar = \"a\";\n\"b\";\n<\/code><\/pre>\n\n<p>But if you use parentheses to group <code>$foo<\/code> and <code>$bar<\/code> into a list, the assignment operator will use a list context:<\/p>\n\n<pre><code>($foo, $bar) = (\"a\", \"b\");\n<\/code><\/pre>\n\n<p>Curiously, if you remove the RHS parentheses, you will also experience a hickup:<\/p>\n\n<pre><code>($foo, $bar) = \"a\", \"b\"; # Useless use of a constant (b) in void context\n<\/code><\/pre>\n\n<p>But that is because the <code>=<\/code> operator has higher precedence than comma <code>,<\/code>, which you can see in <a href=\"http:\/\/perldoc.perl.org\/perlop.html\" rel=\"noreferrer\">perlop<\/a>. If you try:<\/p>\n\n<pre><code>my @array = (\"a\", \"b\");\n($foo, $bar) = @array;\n<\/code><\/pre>\n\n<p>You will get the desired behaviour without parentheses.<\/p>\n\n<p>Now to complete the circle, lets remove the list context in the above and see what happens:<\/p>\n\n<pre><code>my @array = (\"a\", \"b\");\n$foo = @array;\nprint $foo;\n<\/code><\/pre>\n\n<p>This prints <code>2<\/code>, because the array is evaluated in scalar context, and arrays in scalar context return the number of elements they contain. In this case, it is <code>2<\/code>.<\/p>\n\n<p>Hence, statements such as these use list context:<\/p>\n\n<pre><code>my ($foo) = @array;          # $foo is set to $array[0], first array element\nmy ($bar) = (\"a\", \"b\", \"c\"); # $bar is set to \"a\", first list element\n<\/code><\/pre>\n\n<p>It is a way of overriding the scalar context which is implied in scalar assignment. For comparison, these assignments are in scalar context:<\/p>\n\n<pre><code>my $foo = @array;            # $foo is set to the number of elements in the array\nmy $bar = (\"a\", \"b\", \"c\");   # $bar is set to \"c\", last list element\n<\/code><\/pre>\n"},{"owner":{"account_id":1358021,"reputation":419,"user_id":1296010,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/ac2ba21a2e5d890069d89daf21fdba30?s=256&d=identicon&r=PG","display_name":"neniu","link":"https:\/\/stackoverflow.com\/users\/1296010\/neniu"},"is_accepted":false,"score":7,"last_activity_date":1524113904,"last_edit_date":1524113904.0,"creation_date":1337805890,"answer_id":10727555,"question_id":10726638,"content_license":"CC BY-SA 3.0","body_markdown":"I can&#39;t vouch for &#39;efficient&#39; but this uses a regex and a callback to provide the replacement character.\r\n\r\n&lt;!-- language: lang-js --&gt;\r\n\r\n    function tr( text, search, replace ) {\r\n        \/\/ Make the search string a regex.\r\n        var regex = RegExp( &#39;[&#39; + search + &#39;]&#39;, &#39;g&#39; );\r\n        var t = text.replace( regex, \r\n                function( chr ) {\r\n                    \/\/ Get the position of the found character in the search string.\r\n                    var ind = search.indexOf( chr );\r\n                    \/\/ Get the corresponding character from the replace string.\r\n                    var r = replace.charAt( ind );\r\n                    return r;\r\n                } );\r\n        return t;\r\n    }\r\n\r\nFor long strings of search and replacement characters, it might be worth putting them in a hash and have the function return from that. ie, tr\/abcd\/QRST\/ becomes the hash { a: Q, b: R, c: S, d: T } and the callback returns hash[ chr ].","body":"<p>I can't vouch for 'efficient' but this uses a regex and a callback to provide the replacement character.<\/p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function tr( text, search, replace ) {\n    \/\/ Make the search string a regex.\n    var regex = RegExp( '[' + search + ']', 'g' );\n    var t = text.replace( regex, \n            function( chr ) {\n                \/\/ Get the position of the found character in the search string.\n                var ind = search.indexOf( chr );\n                \/\/ Get the corresponding character from the replace string.\n                var r = replace.charAt( ind );\n                return r;\n            } );\n    return t;\n}\n<\/code><\/pre>\n\n<p>For long strings of search and replacement characters, it might be worth putting them in a hash and have the function return from that. ie, tr\/abcd\/QRST\/ becomes the hash { a: Q, b: R, c: S, d: T } and the callback returns hash[ chr ].<\/p>\n"},{"owner":{"account_id":1812241,"reputation":563,"user_id":1648049,"user_type":"registered","accept_rate":88,"profile_image":"https:\/\/www.gravatar.com\/avatar\/a6762f252e8544eff04a6a48c8098ac0?s=256&d=identicon&r=PG","display_name":"Aquaplanet","link":"https:\/\/stackoverflow.com\/users\/1648049\/aquaplanet"},"is_accepted":false,"score":7,"last_activity_date":1346825904,"last_edit_date":null,"creation_date":1346825904,"answer_id":12275510,"question_id":12275408,"content_license":"CC BY-SA 3.0","body_markdown":"It is called the diamond operator and feeds data from either stdin if ARGV is empty or each line from the files named in ARGV. This webpage http:\/\/docstore.mik.ua\/orelly\/perl\/learn\/ch06_02.htm explains it very well.","body":"<p>It is called the diamond operator and feeds data from either stdin if ARGV is empty or each line from the files named in ARGV. This webpage <a href=\"http:\/\/docstore.mik.ua\/orelly\/perl\/learn\/ch06_02.htm\">http:\/\/docstore.mik.ua\/orelly\/perl\/learn\/ch06_02.htm<\/a> explains it very well.<\/p>\n"},{"owner":{"account_id":289134,"reputation":372786,"user_id":589924,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/b2cf53d5a3d25f95c0db4e025aed4153?s=256&d=identicon&r=PG","display_name":"ikegami","link":"https:\/\/stackoverflow.com\/users\/589924\/ikegami"},"is_accepted":false,"score":7,"last_activity_date":1676924946,"last_edit_date":1676924946.0,"creation_date":1355339120,"answer_id":13846822,"question_id":13846676,"content_license":"CC BY-SA 4.0","body_markdown":"Short answer: It&#39;s the same as `my $i = &#39;08&#39;;`. You probably wanted `$i \/\/= &#39;08&#39;;`.\r\n\r\n---\r\n\r\nFirst, let&#39;s look at `$i \/\/= &#39;08&#39;;`\r\n\r\n    EXPR1 \/\/= EXPR2;\r\n\r\nis the same as\r\n\r\n    EXPR1 = EXPR1 \/\/ EXPR2;\r\n\r\nexcept that EXPR1 is only evaluated once. It&#39;s a convenient way of writing\r\n\r\n    EXPR1 = EXPR2 if !defined(EXPR1);\r\n\r\nSee [perlop](http:\/\/perldoc.perl.org\/perlop.html) for documentation on Perl operators.\r\n\r\n---\r\n\r\nBack to `my $i \/\/= &#39;08&#39;;`. That means\r\n\r\n    my $i;\r\n    $i = &#39;08&#39; if !defined($i);\r\n\r\nbut `$i` will always be undefined in that situation. It would be far better to write\r\n\r\n    my $i = &#39;08&#39;;\r\n\r\nBut, the code was probably supposed to be\r\n\r\n    $i \/\/= &#39;08&#39;;   # no `my`\r\n","body":"<p>Short answer: It's the same as <code>my $i = '08';<\/code>. You probably wanted <code>$i \/\/= '08';<\/code>.<\/p>\n<hr \/>\n<p>First, let's look at <code>$i \/\/= '08';<\/code><\/p>\n<pre><code>EXPR1 \/\/= EXPR2;\n<\/code><\/pre>\n<p>is the same as<\/p>\n<pre><code>EXPR1 = EXPR1 \/\/ EXPR2;\n<\/code><\/pre>\n<p>except that EXPR1 is only evaluated once. It's a convenient way of writing<\/p>\n<pre><code>EXPR1 = EXPR2 if !defined(EXPR1);\n<\/code><\/pre>\n<p>See <a href=\"http:\/\/perldoc.perl.org\/perlop.html\" rel=\"nofollow noreferrer\">perlop<\/a> for documentation on Perl operators.<\/p>\n<hr \/>\n<p>Back to <code>my $i \/\/= '08';<\/code>. That means<\/p>\n<pre><code>my $i;\n$i = '08' if !defined($i);\n<\/code><\/pre>\n<p>but <code>$i<\/code> will always be undefined in that situation. It would be far better to write<\/p>\n<pre><code>my $i = '08';\n<\/code><\/pre>\n<p>But, the code was probably supposed to be<\/p>\n<pre><code>$i \/\/= '08';   # no `my`\n<\/code><\/pre>\n"},{"owner":{"account_id":2649777,"reputation":745,"user_id":2291758,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/4391c4d45560de40165b291211b13ba6?s=256&d=identicon&r=PG","display_name":"user2291758","link":"https:\/\/stackoverflow.com\/users\/2291758\/user2291758"},"is_accepted":false,"score":7,"last_activity_date":1400615267,"last_edit_date":null,"creation_date":1400615267,"answer_id":23768616,"question_id":23748548,"content_license":"CC BY-SA 3.0","body_markdown":"It is indeed a good practice and also mentioned in the famous PBP.\r\n\r\nThere is actually a Policy for perlcritic which always gets me: https:\/\/metacpan.org\/pod\/Perl::Critic::Policy::CodeLayout::RequireTrailingCommas","body":"<p>It is indeed a good practice and also mentioned in the famous PBP.<\/p>\n\n<p>There is actually a Policy for perlcritic which always gets me: <a href=\"https:\/\/metacpan.org\/pod\/Perl::Critic::Policy::CodeLayout::RequireTrailingCommas\" rel=\"noreferrer\">https:\/\/metacpan.org\/pod\/Perl::Critic::Policy::CodeLayout::RequireTrailingCommas<\/a><\/p>\n"},{"owner":{"account_id":1810978,"reputation":2568,"user_id":1647057,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/f41b1193c5aa3f7e5394069885695b83?s=256&d=identicon&r=PG","display_name":"oscfri","link":"https:\/\/stackoverflow.com\/users\/1647057\/oscfri"},"is_accepted":false,"score":7,"last_activity_date":1406193421,"last_edit_date":null,"creation_date":1406193421,"answer_id":24929718,"question_id":3998619,"content_license":"CC BY-SA 3.0","body_markdown":"While the other answers are true, I find it also worth to mention the use of `BEGIN` and `END` blocks when using the `-n` or `-p` switches to Perl.\r\n\r\nFrom http:\/\/perldoc.perl.org\/perlmod.html\r\n&gt; When you use the -n and -p switches to Perl, BEGIN and END work just as they do in awk, as a degenerate case.\r\n\r\nFor those unfamiliar with the `-n` switch, it tells Perl to wrap the program with:\r\n\r\n    while (&lt;&gt;) {\r\n        ...  # your program goes here\r\n    }\r\n\r\nhttp:\/\/perldoc.perl.org\/perlrun.html#Command-Switches if you&#39;re interested about more specific information about Perl switches.\r\n\r\nAs an example to demonstrate the use of `BEGIN` with the `-n` switch, this Perl one-liner enumerates the lines of the `ls` command:\r\n\r\n    ls | perl -ne &#39;BEGIN{$i = 1} print &quot;$i: $_&quot;; $i += 1;&#39;\r\n\r\nIn this case, the `BEGIN`-block is used to initiate the variable `$i` by setting it to 1 before processing the lines of `ls`. This example will output something like:\r\n\r\n    1: foo.txt\r\n    2: bar.txt\r\n    3: program.pl\r\n    4: config.xml","body":"<p>While the other answers are true, I find it also worth to mention the use of <code>BEGIN<\/code> and <code>END<\/code> blocks when using the <code>-n<\/code> or <code>-p<\/code> switches to Perl.<\/p>\n\n<p>From <a href=\"http:\/\/perldoc.perl.org\/perlmod.html\" rel=\"noreferrer\">http:\/\/perldoc.perl.org\/perlmod.html<\/a><\/p>\n\n<blockquote>\n  <p>When you use the -n and -p switches to Perl, BEGIN and END work just as they do in awk, as a degenerate case.<\/p>\n<\/blockquote>\n\n<p>For those unfamiliar with the <code>-n<\/code> switch, it tells Perl to wrap the program with:<\/p>\n\n<pre><code>while (&lt;&gt;) {\n    ...  # your program goes here\n}\n<\/code><\/pre>\n\n<p><a href=\"http:\/\/perldoc.perl.org\/perlrun.html#Command-Switches\" rel=\"noreferrer\">http:\/\/perldoc.perl.org\/perlrun.html#Command-Switches<\/a> if you're interested about more specific information about Perl switches.<\/p>\n\n<p>As an example to demonstrate the use of <code>BEGIN<\/code> with the <code>-n<\/code> switch, this Perl one-liner enumerates the lines of the <code>ls<\/code> command:<\/p>\n\n<pre><code>ls | perl -ne 'BEGIN{$i = 1} print \"$i: $_\"; $i += 1;'\n<\/code><\/pre>\n\n<p>In this case, the <code>BEGIN<\/code>-block is used to initiate the variable <code>$i<\/code> by setting it to 1 before processing the lines of <code>ls<\/code>. This example will output something like:<\/p>\n\n<pre><code>1: foo.txt\n2: bar.txt\n3: program.pl\n4: config.xml\n<\/code><\/pre>\n"},{"owner":{"account_id":22370,"reputation":158397,"user_id":55075,"user_type":"registered","accept_rate":76,"profile_image":"https:\/\/www.gravatar.com\/avatar\/8bbc94977312d285045b2412257b6cb8?s=256&d=identicon&r=PG","display_name":"kenorb","link":"https:\/\/stackoverflow.com\/users\/55075\/kenorb"},"is_accepted":false,"score":7,"last_activity_date":1409563684,"last_edit_date":null,"creation_date":1409563684,"answer_id":25602732,"question_id":17131249,"content_license":"CC BY-SA 3.0","body_markdown":"The problem is that you&#39;re trying to use DOS\/Windows text format on Linux\/Unix\/OSX machine.\r\n\r\nIn DOS\/Windows text files a line break, also known as newline, is a combination of two characters: a Carriage Return (CR) followed by a Line Feed (LF). In Unix text files a line break is a single character: the Line Feed (LF).\r\n\r\n\r\nDos2unix can convert for you the encoding of files, in example:\r\n\r\n    dos2unix yourfile yourfile\r\n\r\nFor help, run: `man dos2unix`.","body":"<p>The problem is that you're trying to use DOS\/Windows text format on Linux\/Unix\/OSX machine.<\/p>\n\n<p>In DOS\/Windows text files a line break, also known as newline, is a combination of two characters: a Carriage Return (CR) followed by a Line Feed (LF). In Unix text files a line break is a single character: the Line Feed (LF).<\/p>\n\n<p>Dos2unix can convert for you the encoding of files, in example:<\/p>\n\n<pre><code>dos2unix yourfile yourfile\n<\/code><\/pre>\n\n<p>For help, run: <code>man dos2unix<\/code>.<\/p>\n"},{"owner":{"account_id":69492,"reputation":4258,"user_id":202130,"user_type":"registered","accept_rate":90,"profile_image":"https:\/\/www.gravatar.com\/avatar\/d7fbc3ad0efe66fd7a173230a3b91f1f?s=256&d=identicon&r=PG","display_name":"Rhubbarb","link":"https:\/\/stackoverflow.com\/users\/202130\/rhubbarb"},"is_accepted":false,"score":7,"last_activity_date":1411464430,"last_edit_date":null,"creation_date":1411464430,"answer_id":25991506,"question_id":550258,"content_license":"CC BY-SA 3.0","body_markdown":"In the Perl 5 version 20.0 documentation\r\nhttp:\/\/perldoc.perl.org\/perlre.html\r\nit states\r\n\r\n    Modifiers\r\n    \r\n    Other Modifiers\r\n    \r\n    \u2026\r\n    \r\n    o - pretend to optimize your code, but actually introduce bugs\r\n\r\nwhich may be a humorous way of saying it was supposed to perform some kind of optimisation, but the implementation is broken.\r\n\r\nThus the option might be best avoided.","body":"<p>In the Perl 5 version 20.0 documentation\n<a href=\"http:\/\/perldoc.perl.org\/perlre.html\">http:\/\/perldoc.perl.org\/perlre.html<\/a>\nit states<\/p>\n\n<pre><code>Modifiers\n\nOther Modifiers\n\n\u2026\n\no - pretend to optimize your code, but actually introduce bugs\n<\/code><\/pre>\n\n<p>which may be a humorous way of saying it was supposed to perform some kind of optimisation, but the implementation is broken.<\/p>\n\n<p>Thus the option might be best avoided.<\/p>\n"},{"owner":{"account_id":56304,"reputation":117607,"user_id":168657,"user_type":"registered","accept_rate":92,"profile_image":"https:\/\/www.gravatar.com\/avatar\/f14e7610fca39322ebbf23530def15f8?s=256&d=identicon&r=PG","display_name":"mob","link":"https:\/\/stackoverflow.com\/users\/168657\/mob"},"is_accepted":false,"score":7,"last_activity_date":1442504772,"last_edit_date":null,"creation_date":1442504772,"answer_id":32634664,"question_id":2872089,"content_license":"CC BY-SA 3.0","body_markdown":"[`Devel::DumpTrace`](http:\/\/metacpan.org\/pod\/Devel::DumpTrace) was released in 2011 and has more features than `Devel::Trace`, such as evaluating variable values in the trace output.","body":"<p><a href=\"http:\/\/metacpan.org\/pod\/Devel::DumpTrace\" rel=\"noreferrer\"><code>Devel::DumpTrace<\/code><\/a> was released in 2011 and has more features than <code>Devel::Trace<\/code>, such as evaluating variable values in the trace output.<\/p>\n"},{"owner":{"account_id":11481714,"reputation":71,"user_id":8415550,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/78e20e81d121a3d086b804fba0bc6dfe?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"Aparna Asok","link":"https:\/\/stackoverflow.com\/users\/8415550\/aparna-asok"},"is_accepted":false,"score":7,"last_activity_date":1501828415,"last_edit_date":null,"creation_date":1501828415,"answer_id":45499704,"question_id":560749,"content_license":"CC BY-SA 3.0","body_markdown":"If you have successfully installed Apache web server and Perl please follow the following steps to run cgi script using perl on ubuntu systems.\r\n\r\nBefore starting with CGI scripting it is necessary to configure apache server in such a way that it recognizes the CGI directory (where the cgi programs are saved) and allow for the execution of programs within that directory.\r\n\r\n1. In Ubuntu cgi-bin directory usually resides in path \/usr\/lib , if not present create the cgi-bin directory using the following command.**cgi-bin** should be in this path itself.\r\n\r\n         mkdir \/usr\/lib\/cgi-bin\r\n\r\n2. Issue the following command to check the permission status of the directory.\r\n\r\n         ls -l \/usr\/lib | less\r\n\r\nCheck whether the permission looks as  \u201cdrwxr-xr-x 2 root root 4096 2011-11-23 09:08 cgi-\tbin\u201d if yes go to step 3.\r\n\r\nIf not issue the following command to ensure the appropriate permission for our cgi-bin directory.\r\n\r\n         sudo chmod 755 \/usr\/lib\/cgi-bin\r\n         sudo chmod root.root \/usr\/lib\/cgi-bin\r\n\r\n3. Give execution permission to cgi-bin directory\r\n\r\n         sudo chmod 755 \/usr\/lib\/cgi-bin\r\n\r\nThus your cgi-bin directory is ready to go. This is where you put all your cgi scripts for execution. Our next step is configure apache to recognize cgi-bin directory and allow execution of all programs in it as cgi scripts. \r\n\r\n**Configuring Apache to run CGI script using perl**\r\n\r\n1. A directive need to be added in the configuration file of  apache server so it knows the presence of CGI and the location of its directories. Initially go to location of configuration file of apache and open it with your favorite text editor\r\n\r\n        cd \/etc\/apache2\/sites-available\/ \r\n        sudo gedit 000-default.conf\r\n\r\n2. Copy the below content to the file 000-default.conf between the line of codes \u201cDocumentRoot \/var\/www\/html\/\u201d and \u201cErrorLog $ {APACHE_LOG_DIR}\/error.log\u201d \r\n\r\n        ScriptAlias \/cgi-bin\/ \/usr\/lib\/cgi-bin\/\r\n        &lt;Directory &quot;\/usr\/lib\/cgi-bin&quot;&gt;\r\n        AllowOverride None\r\n        Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch\r\n        Require all granted\r\n       &lt;\/Directory&gt;\r\n\r\n3. Restart apache server with the following code\r\n\r\n        sudo service apache2 restart\r\n\r\n4. Now we need to enable cgi module which  is present in newer versions of ubuntu by default \r\n\r\n        sudo a2enmod cgi.load\r\n        sudo a2enmod cgid.load\r\n\r\n5. At this point we can reload the apache webserver so that it reads the configuration files again.\r\n\r\n        sudo service apache2 reload\r\n\r\nThe configuration part of apache is over now let us check it with a sample cgi perl program.\r\n\r\n**Testing it out**\r\n\r\n1. Go to the cgi-bin directory and create a cgi file with extension .pl \r\n\r\n        cd \/usr\/lib\/cgi-bin\/\r\n        sudo gedit test.pl\r\n\r\n2. Copy the following code on test.pl and save it.\r\n\r\n        #!\/usr\/bin\/perl -w\r\n        print \u201cContent-type: text\/html\\r\\n\\r\\n\u201d;\r\n        print \u201cCGI working perfectly!! \\n\u201d;\r\n\r\n3. Now give the test.pl execution permission.\r\n\r\n        sudo chmod 755 test.pl\r\n\r\n4. Now open that file in your web browser http:\/\/Localhost\/cgi-bin\/test.pl\r\n\r\n5. If you see the output \u201cCGI working perfectly\u201d you are ready to go.Now dump all your programs into the cgi-bin directory and start using them.\r\n\r\nNB: Don&#39;t forget to give your new programs in cgi-bin, chmod 755 permissions so as to run it successfully without any internal server errors.\r\n\r\n","body":"<p>If you have successfully installed Apache web server and Perl please follow the following steps to run cgi script using perl on ubuntu systems.<\/p>\n\n<p>Before starting with CGI scripting it is necessary to configure apache server in such a way that it recognizes the CGI directory (where the cgi programs are saved) and allow for the execution of programs within that directory.<\/p>\n\n<ol>\n<li><p>In Ubuntu cgi-bin directory usually resides in path \/usr\/lib , if not present create the cgi-bin directory using the following command.<strong>cgi-bin<\/strong> should be in this path itself.<\/p>\n\n<pre><code> mkdir \/usr\/lib\/cgi-bin\n<\/code><\/pre><\/li>\n<li><p>Issue the following command to check the permission status of the directory.<\/p>\n\n<pre><code> ls -l \/usr\/lib | less\n<\/code><\/pre><\/li>\n<\/ol>\n\n<p>Check whether the permission looks as  \u201cdrwxr-xr-x 2 root root 4096 2011-11-23 09:08 cgi-   bin\u201d if yes go to step 3.<\/p>\n\n<p>If not issue the following command to ensure the appropriate permission for our cgi-bin directory.<\/p>\n\n<pre><code>     sudo chmod 755 \/usr\/lib\/cgi-bin\n     sudo chmod root.root \/usr\/lib\/cgi-bin\n<\/code><\/pre>\n\n<ol start=\"3\">\n<li><p>Give execution permission to cgi-bin directory<\/p>\n\n<pre><code> sudo chmod 755 \/usr\/lib\/cgi-bin\n<\/code><\/pre><\/li>\n<\/ol>\n\n<p>Thus your cgi-bin directory is ready to go. This is where you put all your cgi scripts for execution. Our next step is configure apache to recognize cgi-bin directory and allow execution of all programs in it as cgi scripts. <\/p>\n\n<p><strong>Configuring Apache to run CGI script using perl<\/strong><\/p>\n\n<ol>\n<li><p>A directive need to be added in the configuration file of  apache server so it knows the presence of CGI and the location of its directories. Initially go to location of configuration file of apache and open it with your favorite text editor<\/p>\n\n<pre><code>cd \/etc\/apache2\/sites-available\/ \nsudo gedit 000-default.conf\n<\/code><\/pre><\/li>\n<li><p>Copy the below content to the file 000-default.conf between the line of codes \u201cDocumentRoot \/var\/www\/html\/\u201d and \u201cErrorLog $ {APACHE_LOG_DIR}\/error.log\u201d <\/p>\n\n<pre><code>ScriptAlias \/cgi-bin\/ \/usr\/lib\/cgi-bin\/\n&lt;Directory \"\/usr\/lib\/cgi-bin\"&gt;\nAllowOverride None\nOptions +ExecCGI -MultiViews +SymLinksIfOwnerMatch\nRequire all granted\n<\/code><\/pre>\n\n<p><\/p><\/li>\n<li><p>Restart apache server with the following code<\/p>\n\n<pre><code>sudo service apache2 restart\n<\/code><\/pre><\/li>\n<li><p>Now we need to enable cgi module which  is present in newer versions of ubuntu by default <\/p>\n\n<pre><code>sudo a2enmod cgi.load\nsudo a2enmod cgid.load\n<\/code><\/pre><\/li>\n<li><p>At this point we can reload the apache webserver so that it reads the configuration files again.<\/p>\n\n<pre><code>sudo service apache2 reload\n<\/code><\/pre><\/li>\n<\/ol>\n\n<p>The configuration part of apache is over now let us check it with a sample cgi perl program.<\/p>\n\n<p><strong>Testing it out<\/strong><\/p>\n\n<ol>\n<li><p>Go to the cgi-bin directory and create a cgi file with extension .pl <\/p>\n\n<pre><code>cd \/usr\/lib\/cgi-bin\/\nsudo gedit test.pl\n<\/code><\/pre><\/li>\n<li><p>Copy the following code on test.pl and save it.<\/p>\n\n<pre><code>#!\/usr\/bin\/perl -w\nprint \u201cContent-type: text\/html\\r\\n\\r\\n\u201d;\nprint \u201cCGI working perfectly!! \\n\u201d;\n<\/code><\/pre><\/li>\n<li><p>Now give the test.pl execution permission.<\/p>\n\n<pre><code>sudo chmod 755 test.pl\n<\/code><\/pre><\/li>\n<li><p>Now open that file in your web browser <a href=\"http:\/\/Localhost\/cgi-bin\/test.pl\" rel=\"noreferrer\">http:\/\/Localhost\/cgi-bin\/test.pl<\/a><\/p><\/li>\n<li><p>If you see the output \u201cCGI working perfectly\u201d you are ready to go.Now dump all your programs into the cgi-bin directory and start using them.<\/p><\/li>\n<\/ol>\n\n<p>NB: Don't forget to give your new programs in cgi-bin, chmod 755 permissions so as to run it successfully without any internal server errors.<\/p>\n"},{"owner":{"account_id":9640511,"reputation":4099,"user_id":7154924,"user_type":"registered","accept_rate":86,"profile_image":"https:\/\/www.gravatar.com\/avatar\/8c111adcdb9a53d603a68e9fc1c1b8ac?s=256&d=identicon&r=PG&f=y&so-version=2","display_name":"flow2k","link":"https:\/\/stackoverflow.com\/users\/7154924\/flow2k"},"is_accepted":false,"score":7,"last_activity_date":1506329334,"last_edit_date":null,"creation_date":1506329334,"answer_id":46401110,"question_id":4913280,"content_license":"CC BY-SA 3.0","body_markdown":"Perl arrow operator has one other use:\r\n\r\nClass\u2212&gt;method invokes subroutine method in package Class\r\n\r\nthough it&#39;s completely different than your code sample. Only including it for completeness for the question in the title.","body":"<p>Perl arrow operator has one other use:<\/p>\n\n<p>Class\u2212>method invokes subroutine method in package Class<\/p>\n\n<p>though it's completely different than your code sample. Only including it for completeness for the question in the title.<\/p>\n"},{"owner":{"account_id":7957,"reputation":15921,"user_id":14032,"user_type":"registered","accept_rate":71,"profile_image":"https:\/\/www.gravatar.com\/avatar\/f512d4df44ba209215e5675954276a1d?s=256&d=identicon&r=PG","display_name":"bmdhacks","link":"https:\/\/stackoverflow.com\/users\/14032\/bmdhacks"},"is_accepted":false,"score":6,"last_activity_date":1222365569,"last_edit_date":null,"creation_date":1222365569,"answer_id":134884,"question_id":134858,"content_license":"CC BY-SA 2.5","body_markdown":"Take a look at [LWP::Simple](http:\/\/search.cpan.org\/perldoc?LWP::Simple).\r\nFor more involved queries, there&#39;s even [a book about it](http:\/\/oreilly.com\/catalog\/9780596001780\/).","body":"<p>Take a look at <a href=\"http:\/\/search.cpan.org\/perldoc?LWP::Simple\" rel=\"noreferrer\">LWP::Simple<\/a>.\nFor more involved queries, there's even <a href=\"http:\/\/oreilly.com\/catalog\/9780596001780\/\" rel=\"noreferrer\">a book about it<\/a>.<\/p>\n"},{"owner":{"account_id":4153,"reputation":1177,"user_id":6154,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/4d3bcbc5052f9ef71f1cafc1933e27c4?s=256&d=identicon&r=PG","display_name":"AndrewJFord","link":"https:\/\/stackoverflow.com\/users\/6154\/andrewjford"},"is_accepted":false,"score":6,"last_activity_date":1396759673,"last_edit_date":1396759673.0,"creation_date":1222365592,"answer_id":134891,"question_id":134858,"content_license":"CC BY-SA 3.0","body_markdown":"I would use the [LWP::Simple][1] module.\r\n\r\n\r\n  [1]: http:\/\/metacpan.org\/pod\/LWP::Simple","body":"<p>I would use the <a href=\"http:\/\/metacpan.org\/pod\/LWP::Simple\" rel=\"nofollow noreferrer\">LWP::Simple<\/a> module.<\/p>\n"},{"owner":{"account_id":5473,"reputation":130134,"user_id":2766176,"user_type":"registered","accept_rate":61,"profile_image":"https:\/\/www.gravatar.com\/avatar\/edd8638efe875601bfe394a8aea5b16d?s=256&d=identicon&r=PG","display_name":"brian d foy","link":"https:\/\/stackoverflow.com\/users\/2766176\/brian-d-foy"},"is_accepted":false,"score":6,"last_activity_date":1227650819,"last_edit_date":null,"creation_date":1227650819,"answer_id":319070,"question_id":318789,"content_license":"CC BY-SA 2.5","body_markdown":"There is no best way to open and read a file. It&#39;s the wrong question to ask. What&#39;s in the file? How much data do you need at any point? Do you need all of the data at once? What do you need to do with the data? You need to figure those out before you think about how you need to open and read the file.\r\n\r\nIs anything that you are doing now causing you problems? If not, don&#39;t you have better problems to solve? :)\r\n\r\nMost of your question is merely syntax, and that&#39;s all answered in the Perl documentation (especially ([perlopentut](http:\/\/perldoc.perl.org\/perlopentut.html)). You might also like to pick up [Learning Perl](http:\/\/oreilly.com\/catalog\/9780596520106\/), which answers most of the problems you have in your question.\r\n\r\nGood luck, :)","body":"<p>There is no best way to open and read a file. It's the wrong question to ask. What's in the file? How much data do you need at any point? Do you need all of the data at once? What do you need to do with the data? You need to figure those out before you think about how you need to open and read the file.<\/p>\n\n<p>Is anything that you are doing now causing you problems? If not, don't you have better problems to solve? :)<\/p>\n\n<p>Most of your question is merely syntax, and that's all answered in the Perl documentation (especially (<a href=\"http:\/\/perldoc.perl.org\/perlopentut.html\" rel=\"noreferrer\">perlopentut<\/a>). You might also like to pick up <a href=\"http:\/\/oreilly.com\/catalog\/9780596520106\/\" rel=\"noreferrer\">Learning Perl<\/a>, which answers most of the problems you have in your question.<\/p>\n\n<p>Good luck, :)<\/p>\n"},{"owner":{"account_id":3283,"reputation":30073,"user_id":4727,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/01a99498921b93509c73d390704bddf6?s=256&d=identicon&r=PG","display_name":"Leon Timmermans","link":"https:\/\/stackoverflow.com\/users\/4727\/leon-timmermans"},"is_accepted":false,"score":6,"last_activity_date":1229532348,"last_edit_date":1229532348.0,"creation_date":1229531894,"answer_id":375170,"question_id":375104,"content_license":"CC BY-SA 2.5","body_markdown":"I&#39;d say the second one is better, because it fails faster when the terminating `&quot;` is missing. The first one will backtrack over the string, a potentially expensive operation. An alternative regexp if you are using perl 5.10 would be `\/&quot;[^&quot;]++&quot;\/`. It conveys the same meaning as version 1 does, but is as fast as version two.","body":"<p>I'd say the second one is better, because it fails faster when the terminating <code>\"<\/code> is missing. The first one will backtrack over the string, a potentially expensive operation. An alternative regexp if you are using perl 5.10 would be <code>\/\"[^\"]++\"\/<\/code>. It conveys the same meaning as version 1 does, but is as fast as version two.<\/p>\n"},{"owner":{"account_id":19584,"reputation":16208,"user_id":45978,"user_type":"registered","accept_rate":84,"profile_image":"https:\/\/www.gravatar.com\/avatar\/d0c6b3923ad69ce9a13dbe8775b7b3dc?s=256&d=identicon&r=PG","display_name":"Joe Casadonte","link":"https:\/\/stackoverflow.com\/users\/45978\/joe-casadonte"},"is_accepted":false,"score":6,"last_activity_date":1230684265,"last_edit_date":null,"creation_date":1230684265,"answer_id":401964,"question_id":401556,"content_license":"CC BY-SA 2.5","body_markdown":"I don&#39;t think there&#39;s a best practice on this one.  Personally I use them in hash keys like so:\r\n\r\n    $ident{&#39;name&#39;} = standardize_name($name);\r\n\r\nbut don&#39;t use them to the left of the arrow operator:\r\n\r\n    $ident = {name =&gt; standardize_name($name)};\r\n\r\nDon&#39;t ask me why, it&#39;s just the way I do it :)\r\n\r\nI think the most important thing you can do is to always, always, always:\r\n\r\n    use strict;\r\n    use warnings; \r\n\r\nThat way the compiler will catch any semantic errors for you, leaving you less likely to mistype something, whichever way you decide to go.\r\n\r\nAnd the second most important thing is to be consistent.","body":"<p>I don't think there's a best practice on this one.  Personally I use them in hash keys like so:<\/p>\n\n<pre><code>$ident{'name'} = standardize_name($name);\n<\/code><\/pre>\n\n<p>but don't use them to the left of the arrow operator:<\/p>\n\n<pre><code>$ident = {name =&gt; standardize_name($name)};\n<\/code><\/pre>\n\n<p>Don't ask me why, it's just the way I do it :)<\/p>\n\n<p>I think the most important thing you can do is to always, always, always:<\/p>\n\n<pre><code>use strict;\nuse warnings; \n<\/code><\/pre>\n\n<p>That way the compiler will catch any semantic errors for you, leaving you less likely to mistype something, whichever way you decide to go.<\/p>\n\n<p>And the second most important thing is to be consistent.<\/p>\n"},{"owner":{"account_id":5473,"reputation":130134,"user_id":2766176,"user_type":"registered","accept_rate":61,"profile_image":"https:\/\/www.gravatar.com\/avatar\/edd8638efe875601bfe394a8aea5b16d?s=256&d=identicon&r=PG","display_name":"brian d foy","link":"https:\/\/stackoverflow.com\/users\/2766176\/brian-d-foy"},"is_accepted":false,"score":6,"last_activity_date":1232141332,"last_edit_date":null,"creation_date":1232141332,"answer_id":452095,"question_id":451521,"content_license":"CC BY-SA 2.5","body_markdown":"What are you trying to do? Maybe there is a better Perl way of doing whatever you are trying to accomplish. \r\n\r\nFor instance, if you don&#39;t want people mucking around in your objects because you want to enforce encapsulation, you can use something like [Class::InsideOut](http:\/\/search.cpan.org\/dist\/Class-InsideOut). That module has a Class::InsideOut::About documentation module that explains the concept. There is also [Object::InsideOut](http:\/\/search.cpan.org\/dist\/Object-InsideOut), which Brian Phillips already mentioned.","body":"<p>What are you trying to do? Maybe there is a better Perl way of doing whatever you are trying to accomplish. <\/p>\n\n<p>For instance, if you don't want people mucking around in your objects because you want to enforce encapsulation, you can use something like <a href=\"http:\/\/search.cpan.org\/dist\/Class-InsideOut\" rel=\"noreferrer\">Class::InsideOut<\/a>. That module has a Class::InsideOut::About documentation module that explains the concept. There is also <a href=\"http:\/\/search.cpan.org\/dist\/Object-InsideOut\" rel=\"noreferrer\">Object::InsideOut<\/a>, which Brian Phillips already mentioned.<\/p>\n"},{"owner":{"account_id":23833,"reputation":42160,"user_id":60075,"user_type":"registered","accept_rate":68,"profile_image":"https:\/\/www.gravatar.com\/avatar\/da582d6fbfa2ae515004ef49fcb7c281?s=256&d=identicon&r=PG","display_name":"Craig McQueen","link":"https:\/\/stackoverflow.com\/users\/60075\/craig-mcqueen"},"is_accepted":false,"score":6,"last_activity_date":1454779058,"last_edit_date":1495535410.0,"creation_date":1259283941,"answer_id":1806345,"question_id":122277,"content_license":"CC BY-SA 3.0","body_markdown":"With thanks to [this other SO question][1]:\r\n\r\n    import re\r\n    \r\n    class DataHolder:\r\n        def __init__(self, value=None, attr_name=&#39;value&#39;):\r\n            self._attr_name = attr_name\r\n            self.set(value)\r\n        def __call__(self, value):\r\n            return self.set(value)\r\n        def set(self, value):\r\n            setattr(self, self._attr_name, value)\r\n            return value\r\n        def get(self):\r\n            return getattr(self, self._attr_name)\r\n    \r\n    string = u&#39;test bar 123&#39;\r\n    save_match = DataHolder(attr_name=&#39;match&#39;)\r\n    if save_match(re.search(&#39;foo (\\d+)&#39;, string)):\r\n        print &quot;Foo&quot;\r\n        print save_match.match.group(1)\r\n    elif save_match(re.search(&#39;bar (\\d+)&#39;, string)):\r\n        print &quot;Bar&quot;\r\n        print save_match.match.group(1)\r\n    elif save_match(re.search(&#39;baz (\\d+)&#39;, string)):\r\n        print &quot;Baz&quot;\r\n        print save_match.match.group(1)\r\n\r\n\r\n  [1]: https:\/\/stackoverflow.com\/questions\/1663995\/python-variable-assignment-and-if-statement","body":"<p>With thanks to <a href=\"https:\/\/stackoverflow.com\/questions\/1663995\/python-variable-assignment-and-if-statement\">this other SO question<\/a>:<\/p>\n\n<pre><code>import re\n\nclass DataHolder:\n    def __init__(self, value=None, attr_name='value'):\n        self._attr_name = attr_name\n        self.set(value)\n    def __call__(self, value):\n        return self.set(value)\n    def set(self, value):\n        setattr(self, self._attr_name, value)\n        return value\n    def get(self):\n        return getattr(self, self._attr_name)\n\nstring = u'test bar 123'\nsave_match = DataHolder(attr_name='match')\nif save_match(re.search('foo (\\d+)', string)):\n    print \"Foo\"\n    print save_match.match.group(1)\nelif save_match(re.search('bar (\\d+)', string)):\n    print \"Bar\"\n    print save_match.match.group(1)\nelif save_match(re.search('baz (\\d+)', string)):\n    print \"Baz\"\n    print save_match.match.group(1)\n<\/code><\/pre>\n"},{"owner":{"account_id":10100,"reputation":45581,"user_id":18914,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/7a20a39ae2ef47ae042a3eddd5b5bd19?s=256&d=identicon&r=PG","display_name":"Dave Sherohman","link":"https:\/\/stackoverflow.com\/users\/18914\/dave-sherohman"},"is_accepted":false,"score":6,"last_activity_date":1266443315,"last_edit_date":1266443315.0,"creation_date":1266401796,"answer_id":2279774,"question_id":2279471,"content_license":"CC BY-SA 2.5","body_markdown":"Four letters.\r\n\r\nThey&#39;re &lt;strike&gt;functionally&lt;\/strike&gt; identical, just spelled differently.","body":"<p>Four letters.<\/p>\n\n<p>They're <strike>functionally<\/strike> identical, just spelled differently.<\/p>\n"},{"owner":{"account_id":42267,"reputation":136069,"user_id":123109,"user_type":"registered","accept_rate":55,"profile_image":"https:\/\/www.gravatar.com\/avatar\/157c96de3d125abc1c363ff25c20dfaf?s=256&d=identicon&r=PG","display_name":"Greg Bacon","link":"https:\/\/stackoverflow.com\/users\/123109\/greg-bacon"},"is_accepted":false,"score":6,"last_activity_date":1266418835,"last_edit_date":null,"creation_date":1266418835,"answer_id":2281694,"question_id":2279471,"content_license":"CC BY-SA 2.5","body_markdown":"Ever since its [introduction in perl-2.0][perl2], `foreach` has been synonymous with `for`. It&#39;s a nod to the C shell&#39;s [`foreach`][foreach] command.\r\n\r\n[perl2]: http:\/\/github.com\/github\/perl\/blob\/perl-2.0\/perl.man.1\r\n[foreach]: http:\/\/www.tcsh.org\/tcsh.html\/Builtin_commands.html#foreach\r\n\r\nIn my own code, in the rare case that I&#39;m using a C-style for-loop, I write\r\n\r\n    for (my $i = 0; $i &lt; $n; ++$i)\r\n\r\nbut for iterating over an array, I spell out\r\n\r\n    foreach my $x (@a)\r\n\r\nI find that it reads better in my head that way.","body":"<p>Ever since its <a href=\"http:\/\/github.com\/github\/perl\/blob\/perl-2.0\/perl.man.1\" rel=\"noreferrer\">introduction in perl-2.0<\/a>, <code>foreach<\/code> has been synonymous with <code>for<\/code>. It's a nod to the C shell's <a href=\"http:\/\/www.tcsh.org\/tcsh.html\/Builtin_commands.html#foreach\" rel=\"noreferrer\"><code>foreach<\/code><\/a> command.<\/p>\n\n<p>In my own code, in the rare case that I'm using a C-style for-loop, I write<\/p>\n\n<pre><code>for (my $i = 0; $i &lt; $n; ++$i)\n<\/code><\/pre>\n\n<p>but for iterating over an array, I spell out<\/p>\n\n<pre><code>foreach my $x (@a)\n<\/code><\/pre>\n\n<p>I find that it reads better in my head that way.<\/p>\n"},{"owner":{"account_id":10311,"reputation":96445,"user_id":19410,"user_type":"registered","accept_rate":74,"profile_image":"https:\/\/www.gravatar.com\/avatar\/175f1d55c73ce5cb1d071dc4d0f1a333?s=256&d=identicon&r=PG","display_name":"Alex Reynolds","link":"https:\/\/stackoverflow.com\/users\/19410\/alex-reynolds"},"is_accepted":false,"score":6,"last_activity_date":1414029403,"last_edit_date":1414029403.0,"creation_date":1275001449,"answer_id":2925637,"question_id":2925604,"content_license":"CC BY-SA 3.0","body_markdown":"    #!\/usr\/bin\/env perl\r\n    \r\n    use strict;\r\n    use warnings;\r\n    use Data::Dumper;\r\n\r\n    my @bar = qw(aaa bbb);\r\n    my @foo = grep {\/aAa\/i} @bar;\r\n    \r\n    print Dumper \\@foo;","body":"<pre><code>#!\/usr\/bin\/env perl\n\nuse strict;\nuse warnings;\nuse Data::Dumper;\n\nmy @bar = qw(aaa bbb);\nmy @foo = grep {\/aAa\/i} @bar;\n\nprint Dumper \\@foo;\n<\/code><\/pre>\n"},{"owner":{"account_id":23567,"reputation":26767,"user_id":59135,"user_type":"registered","accept_rate":94,"profile_image":"https:\/\/www.gravatar.com\/avatar\/90c563665ec03a1b9e80671bb95deeed?s=256&d=identicon&r=PG","display_name":"daotoad","link":"https:\/\/stackoverflow.com\/users\/59135\/daotoad"},"is_accepted":false,"score":6,"last_activity_date":1275028002,"last_edit_date":null,"creation_date":1275028002,"answer_id":2927002,"question_id":2925604,"content_license":"CC BY-SA 2.5","body_markdown":"If you will be doing *many* searches of the array, **AND** matching always is defined as string equivalence, then you can normalize your data and use a hash.\r\n\r\n\r\n    my @strings = qw( aAa Bbb cCC DDD eee );\r\n    \r\n    my %string_lut;\r\n    \r\n    # Init via slice:\r\n    @string_lut{ map uc, @strings } = ();\r\n    \r\n    # or use a for loop:\r\n    #    for my $string ( @strings ) {\r\n    #        $string_lut{ uc($string) } = undef;\r\n    #    }\r\n    \r\n    \r\n    #Look for a string:\r\n    \r\n    my $search = &#39;AAa&#39;;\r\n    \r\n    print &quot;&#39;$string&#39; &quot;, \r\n        ( exists $string_lut{ uc $string ? &quot;IS&quot; : &quot;is NOT&quot; ),\r\n        &quot; in the array\\n&quot;;\r\n\r\n\r\nLet me emphasize that doing a hash lookup is good if you are planning on doing many lookups on the array.  Also, it will only work if matching means that `$foo eq $bar`, or other requirements that can be met through normalization (like case insensitivity).\r\n","body":"<p>If you will be doing <em>many<\/em> searches of the array, <strong>AND<\/strong> matching always is defined as string equivalence, then you can normalize your data and use a hash.<\/p>\n\n<pre><code>my @strings = qw( aAa Bbb cCC DDD eee );\n\nmy %string_lut;\n\n# Init via slice:\n@string_lut{ map uc, @strings } = ();\n\n# or use a for loop:\n#    for my $string ( @strings ) {\n#        $string_lut{ uc($string) } = undef;\n#    }\n\n\n#Look for a string:\n\nmy $search = 'AAa';\n\nprint \"'$string' \", \n    ( exists $string_lut{ uc $string ? \"IS\" : \"is NOT\" ),\n    \" in the array\\n\";\n<\/code><\/pre>\n\n<p>Let me emphasize that doing a hash lookup is good if you are planning on doing many lookups on the array.  Also, it will only work if matching means that <code>$foo eq $bar<\/code>, or other requirements that can be met through normalization (like case insensitivity).<\/p>\n"},{"owner":{"account_id":7105,"reputation":22469,"user_id":12195,"user_type":"registered","profile_image":"https:\/\/www.gravatar.com\/avatar\/29cb106071d163d703484e63839d89cb?s=256&d=identicon&r=PG","display_name":"draegtun","link":"https:\/\/stackoverflow.com\/users\/12195\/draegtun"},"is_accepted":false,"score":6,"last_activity_date":1492789052,"last_edit_date":1492789052.0,"creation_date":1278852923,"answer_id":3223103,"question_id":3222138,"content_license":"CC BY-SA 3.0","body_markdown":"Here is an [`autobox`][autobox] solution:\r\n\r\n    use autobox::Core;\r\n\r\n    my @things = qw\/blue black green red green yellow\/;\r\n\r\n    my $first_green = @things-&gt;first_index( sub{ $_[0] eq &#39;green&#39; } ); # code block\r\n    my $last_green  = @things-&gt;last_index ( qr\/^green$\/ );             # or regex\r\n\r\n    say $first_green;    # =&gt; 2\r\n    say $last_green;     # =&gt; 4\r\n\r\n[autobox]:http:\/\/search.cpan.org\/dist\/autobox-Core\/","body":"<p>Here is an <a href=\"http:\/\/search.cpan.org\/dist\/autobox-Core\/\" rel=\"nofollow noreferrer\"><code>autobox<\/code><\/a> solution:<\/p>\n\n<pre><code>use autobox::Core;\n\nmy @things = qw\/blue black green red green yellow\/;\n\nmy $first_green = @things-&gt;first_index( sub{ $_[0] eq 'green' } ); # code block\nmy $last_green  = @things-&gt;last_index ( qr\/^green$\/ );             # or regex\n\nsay $first_green;    # =&gt; 2\nsay $last_green;     # =&gt; 4\n<\/code><\/pre>\n"},{"owner":{"account_id":34048,"reputation":861721,"user_id":95810,"user_type":"registered","accept_rate":80,"profile_image":"https:\/\/www.gravatar.com\/avatar\/e8d5fe90f1fe2148bf130cccd4dc311c?s=256&d=identicon&r=PG","display_name":"Alex Martelli","link":"https:\/\/stackoverflow.com\/users\/95810\/alex-martelli"},"is_accepted":false,"score":6,"last_activity_date":1285215798,"last_edit_date":null,"creation_date":1285215798,"answer_id":3775442,"question_id":3775413,"content_license":"CC BY-SA 2.5","body_markdown":"There&#39;s a good practical example [here][1] and a PDF article [here][2]... but I&#39;m too rusty in Perl to try to implement your challenge directly (as you&#39;ll see, both the example and the approach in the PDF use a less direct approach).\r\n\r\n\r\n  [1]: http:\/\/www.perl.com\/pub\/2005\/06\/16\/iterators.html\r\n  [2]: http:\/\/www.theperlreview.com\/Articles\/v0i5\/iterators.pdf ","body":"<p>There's a good practical example <a href=\"http:\/\/www.perl.com\/pub\/2005\/06\/16\/iterators.html\" rel=\"noreferrer\">here<\/a> and a PDF article <a href=\"http:\/\/www.theperlreview.com\/Articles\/v0i5\/iterators.pdf\" rel=\"noreferrer\">here<\/a>... but I'm too rusty in Perl to try to implement your challenge directly (as you'll see, both the example and the approach in the PDF use a less direct approach).<\/p>\n"},{"owner":{"account_id":67803,"reputation":24369,"user_id":198183,"user_type":"registered","accept_rate":95,"profile_image":"https:\/\/www.gravatar.com\/avatar\/52f281a988bae754991af26224c796af?s=256&d=identicon&r=PG","display_name":"sid_com","link":"https:\/\/stackoverflow.com\/users\/198183\/sid-com"},"is_accepted":false,"score":6,"last_activity_date":1386758873,"last_edit_date":1386758873.0,"creation_date":1295297309,"answer_id":4717743,"question_id":4717250,"content_license":"CC BY-SA 3.0","body_markdown":"with grep:\r\n\r\n    grep -F -x -v -f file_1 file_2 \r\n\r\n","body":"<p>with grep:<\/p>\n\n<pre><code>grep -F -x -v -f file_1 file_2 \n<\/code><\/pre>\n"},{"owner":{"account_id":293792,"reputation":8986,"user_id":597305,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/2ad05a19a937275934237503fc77d887?s=256&d=identicon&r=PG","display_name":"Bill Ruppert","link":"https:\/\/stackoverflow.com\/users\/597305\/bill-ruppert"},"is_accepted":false,"score":6,"last_activity_date":1304723779,"last_edit_date":null,"creation_date":1304723779,"answer_id":5917963,"question_id":5916194,"content_license":"CC BY-SA 3.0","body_markdown":"Perl 6 is a specification and any program that follows that spec is Perl 6, just as is true for most other languages.  There are a number of Perl 6 implementations in the works.","body":"<p>Perl 6 is a specification and any program that follows that spec is Perl 6, just as is true for most other languages.  There are a number of Perl 6 implementations in the works.<\/p>\n"},{"owner":{"account_id":289134,"reputation":372786,"user_id":589924,"user_type":"registered","accept_rate":100,"profile_image":"https:\/\/www.gravatar.com\/avatar\/b2cf53d5a3d25f95c0db4e025aed4153?s=256&d=identicon&r=PG","display_name":"ikegami","link":"https:\/\/stackoverflow.com\/users\/589924\/ikegami"},"is_accepted":false,"score":6,"last_activity_date":1305822495,"last_edit_date":null,"creation_date":1305822495,"answer_id":6061787,"question_id":372370,"content_license":"CC BY-SA 3.0","body_markdown":"The pattern passed to `split` identifies what *separates* that which you want. If you wanted to use split, you&#39;d use something like\r\n\r\n    my @pairs = split \/(?(?{ pos() % 2 })(?!))\/, $string;\r\n\r\nor\r\n\r\n    my @pairs = split \/(?=(?:.{2})+\\z)\/s, $string;\r\n\r\nThose are rather poor solutions. Better solutions include:\r\n\r\n    my @pairs = $string =~ \/..?\/sg;  # Accepts odd-length strings.\r\n\r\n    my @pairs = $string =~ \/..\/sg;\r\n\r\n    my @pairs = unpack &#39;(a2)*&#39;, $string;\r\n","body":"<p>The pattern passed to <code>split<\/code> identifies what <em>separates<\/em> that which you want. If you wanted to use split, you'd use something like<\/p>\n\n<pre><code>my @pairs = split \/(?(?{ pos() % 2 })(?!))\/, $string;\n<\/code><\/pre>\n\n<p>or<\/p>\n\n<pre><code>my @pairs = split \/(?=(?:.{2})+\\z)\/s, $string;\n<\/code><\/pre>\n\n<p>Those are rather poor solutions. Better solutions include:<\/p>\n\n<pre><code>my @pairs = $string =~ \/..?\/sg;  # Accepts odd-length strings.\n\nmy @pairs = $string =~ \/..\/sg;\n\nmy @pairs = unpack '(a2)*', $string;\n<\/code><\/pre>\n"}]
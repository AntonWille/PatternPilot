[
    {
        "owner": {
            "account_id": 216196,
            "reputation": 79164,
            "user_id": 471272,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/i.stack.imgur.com\/jSlyx.gif?s=256&g=1",
            "display_name": "tchrist",
            "link": "https:\/\/stackoverflow.com\/users\/471272\/tchrist"
        },
        "is_accepted": true,
        "score": 1200,
        "last_activity_date": 1592599123,
        "last_edit_date": 1592599123.0,
        "creation_date": 1306602595,
        "answer_id": 6163129,
        "question_id": 6162484,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "&#120398;&#120414;&#120418;&#120421;&#120417;&#120410;&#120424;&#120425; *\u211e*:   &#120789; &#120383;&#120414;&#120424;&#120408;&#120423;&#120410;&#120425;&#120410;  &#120397;&#120410;&#120408;&#120420;&#120418;&#120418;&#120410;&#120419;&#120409;&#120406;&#120425;&#120414;&#120420;&#120419;&#120424;\r\n===\r\n1. Set your `PERL_UNICODE` envariable to `AS`. This makes all Perl scripts decode `@ARGV` as UTF\u20118 strings, and sets the encoding of all three of stdin, stdout, and stderr to UTF\u20118. Both these are global effects, not lexical ones.\r\n\r\n1. At the top of your source file (program, module, library, `do`hickey), prominently assert that you are running perl version 5.12 or better via:\r\n\r\n        use v5.12;  # minimal for unicode string feature\r\n        use v5.14;  # optimal for unicode string feature\r\n\r\n\r\n3. Enable warnings, since the previous declaration only enables strictures and features, not warnings. I also suggest promoting Unicode warnings into exceptions, so use both these lines, not just one of them.  Note however that under v5.14, the `utf8` warning class comprises three other subwarnings which can all be separately enabled: `nonchar`, `surrogate`, and `non_unicode`. These you may wish to exert greater control over.\r\n\r\n        use warnings;\r\n        use warnings qw( FATAL utf8 );\r\n\r\n3. Declare that this source unit is encoded as UTF\u20118. Although once upon a time this pragma did other things, it now serves this one singular purpose alone and no other:\r\n\r\n        use utf8;\r\n\r\n4. Declare that anything that opens a filehandle *within this lexical scope but not elsewhere* is to assume that that stream is encoded in UTF\u20118 unless you tell it otherwise. That way you do not affect other module\u2019s or other program\u2019s code.\r\n\r\n        use open qw( :encoding(UTF-8) :std );\r\n\r\n5. Enable named characters via `\\N{CHARNAME}`.\r\n\r\n        use charnames qw( :full :short );\r\n     \r\n6. If you have a `DATA` handle, you must explicitly set its encoding. If you want this to be UTF\u20118, then say:\r\n\r\n        binmode(DATA, &quot;:encoding(UTF-8)&quot;);\r\n\r\nThere is of course no end of other matters with which you may eventually find yourself concerned, but these will suffice to approximate the state goal to \u201cmake everything just work with UTF\u20118\u201d, albeit for a somewhat weakened sense of those terms. \r\n\r\nOne other pragma, although it is not Unicode related, is:\r\n\r\n          use autodie;\r\n\r\nIt is strongly recommended.\r\n\r\n&#127796; &#128042;&#128043;&#128042; &#127774; *&#120178;&#120212;  &#120191;&#120205;&#120212;&#120218;  &#120198;&#120211;&#120201;  &#120175;&#120212;  &#120183;&#120206;&#120208;&#120202;&#120220;&#120206;&#120216;&#120202;* &#127774; &#128042;&#128043;&#128042; &#128001;\r\n\r\n\r\n-------\r\n        &#127873;   &#128042;       &#120173;&#120212;&#120206;&#120209;&#120202;&#120215;\u2e17&#120213;&#120209;&#120198;&#120217;&#120202;  &#120203;&#120212;&#120215;   &#120192;&#120211;&#120206;&#120200;&#120212;&#120201;&#120202;\u2e17&#120172;&#120220;&#120198;&#120215;&#120202;    &#120174;&#120212;&#120201;&#120202;        &#128042;    &#127873; \r\n----\r\n\r\n------\r\n\r\nMy own boilerplate these days tends to look like this:\r\n\r\n    use 5.014;\r\n\r\n    use utf8;\r\n    use strict;\r\n    use autodie;\r\n    use warnings; \r\n    use warnings    qw&lt; FATAL  utf8     &gt;;\r\n    use open        qw&lt; :std  :utf8     &gt;;\r\n    use charnames   qw&lt; :full &gt;;\r\n    use feature     qw&lt; unicode_strings &gt;;\r\n\r\n    use File::Basename      qw&lt; basename &gt;;\r\n    use Carp                qw&lt; carp croak confess cluck &gt;;\r\n    use Encode              qw&lt; encode decode &gt;;\r\n    use Unicode::Normalize  qw&lt; NFD NFC &gt;;\r\n\r\n    END { close STDOUT }\r\n\r\n    if (grep \/\\P{ASCII}\/ =&gt; @ARGV) { \r\n       @ARGV = map { decode(&quot;UTF-8&quot;, $_) } @ARGV;\r\n    }\r\n    \r\n    $0 = basename($0);  # shorter messages\r\n    $| = 1;\r\n    \r\n    binmode(DATA, &quot;:utf8&quot;);\r\n    \r\n    # give a full stack dump on any untrapped exceptions\r\n    local $SIG{__DIE__} = sub {\r\n        confess &quot;Uncaught exception: @_&quot; unless $^S;\r\n    };\r\n    \r\n    # now promote run-time warnings into stack-dumped\r\n    #   exceptions *unless* we&#39;re in an try block, in\r\n    #   which case just cluck the stack dump instead\r\n    local $SIG{__WARN__} = sub {\r\n        if ($^S) { cluck   &quot;Trapped warning: @_&quot; } \r\n        else     { confess &quot;Deadly warning: @_&quot;  }\r\n    };\r\n\r\n    while (&lt;&gt;)  {\r\n        chomp;\r\n        $_ = NFD($_);\r\n        ...\r\n    } continue {\r\n        say NFC($_);\r\n    }\r\n\r\n    __END__\r\n\r\n\r\n\r\n-------\r\n                     &#127877;      &#120185; &#120212;   &#120184; &#120198; &#120204; &#120206; &#120200;   &#120173; &#120218; &#120209; &#120209; &#120202; &#120217;    &#127877;  \r\n==========\r\n--------\r\n\r\nSaying that \u201cPerl should [**somehow!**] enable Unicode by default\u201d doesn\u2019t even start to begin to think about getting around to saying enough to be even marginally useful in some sort of rare and isolated case.  Unicode is much much more than just a larger character repertoire; it\u2019s also how those characters all interact in many, many ways.\r\n\r\nEven the simple-minded minimal measures that (some) people seem to think they want are guaranteed to miserably break millions of lines of code, code that has no chance to \u201cupgrade\u201d to your spiffy new *Brave New World* modernity. \r\n\r\nIt is way way way more complicated than people pretend.  I\u2019ve thought about this a huge, whole lot over the past few years.  I would love to be shown that I am wrong.  But I don\u2019t think I am.  Unicode is fundamentally more complex than the model that you would like to impose on it, and there is complexity here that you can never sweep under the carpet. If you try, you\u2019ll break either your own code or somebody else\u2019s.  At some point, you simply have to break down and learn what Unicode is about.  You cannot pretend it is something it is not. \r\n\r\n&#128042;  goes out of its way to make Unicode easy, far more than anything else I\u2019ve ever used. If you think this is bad, try something else for a while. Then come back to &#128042;: either you will have returned to a better world, or else you will bring knowledge of the same with you so that we can make use of your new knowledge to make &#128042;  better at these things.\r\n\r\n----\r\n\r\n         &#128161;     &#120180;&#120201;&#120202;&#120198;&#120216;       &#120203;&#120212;&#120215;    &#120198;       &#120192;&#120211;&#120206;&#120200;&#120212;&#120201;&#120202; \u2e17 &#120172;&#120220;&#120198;&#120215;&#120202;    &#128042;    &#120183;&#120198;&#120218;&#120211;&#120201;&#120215;&#120222;    &#120183;&#120206;&#120216;&#120217;      &#128161; \r\n-----\r\n\r\n------\r\n\r\n  At a minimum, here  are some things that would appear to be required for &#128042; to \u201cenable Unicode by default\u201d, as you put it:\r\n\r\n\r\n 1. All &#128042;  source code should be in UTF-8 by default.  You can get that with `use utf8` or `export PERL5OPTS=-Mutf8`.\r\n\r\n 1. The &#128042;  `DATA` handle should be UTF-8. You will have to do this on a per-package basis, as in `binmode(DATA, &quot;:encoding(UTF-8)&quot;)`.\r\n\r\n 1. Program arguments to &#128042;  scripts should be understood to be UTF-8 by default.  `export PERL_UNICODE=A`, or `perl -CA`, or `export PERL5OPTS=-CA`.\r\n\r\n 1. The standard input, output, and error streams should default to UTF-8. `export PERL_UNICODE=S` for all of them, or `I`, `O`, and\/or `E` for just some of them. This is like `perl -CS`.\r\n\r\n 1. Any other handles opened by &#128042; should be considered UTF-8 unless declared otherwise; `export PERL_UNICODE=D` or with `i` and `o` for particular ones of these; `export PERL5OPTS=-CD` would work.  That makes `-CSAD` for all of them.\r\n\r\n 1. Cover both bases plus all the streams you open with `export PERL5OPTS=-Mopen=:utf8,:std`. See [*uniquote*](http:\/\/training.perl.com\/scripts\/uniquote).\r\n\r\n 2. You don\u2019t want to miss UTF-8 encoding errors. Try `export PERL5OPTS=-Mwarnings=FATAL,utf8`.  And make sure your input streams are always `binmode`d to `:encoding(UTF-8)`, not just to `:utf8`.\r\n\r\n 1. Code points between 128\u2013255 should be understood by &#128042; to be the corresponding Unicode code points, not just unpropertied binary values.  `use feature &quot;unicode_strings&quot;` or `export PERL5OPTS=-Mfeature=unicode_strings`.  That will make `uc(&quot;\\xDF&quot;) eq &quot;SS&quot;` and `&quot;\\xE9&quot; =~ \/\\w\/`.  A simple `export PERL5OPTS=-Mv5.12` or better will also get that.\r\n\r\n 2. Named Unicode characters are not by default enabled, so add `export PERL5OPTS=-Mcharnames=:full,:short,latin,greek` or some such. See [*uninames*](http:\/\/training.perl.com\/scripts\/uninames) and [tcgrep](http:\/\/training.perl.com\/scripts\/tcgrep).\r\n\r\n 2. You almost always need access to the functions from [the standard `Unicode::Normalize` module](https:\/\/metacpan.org\/pod\/Unicode::Normalize) various types of decompositions.  `export PERL5OPTS=-MUnicode::Normalize=NFD,NFKD,NFC,NFKD`, and then always run incoming stuff through NFD and outbound stuff from NFC. There\u2019s no I\/O layer for these yet that I\u2019m aware of, but see [*nfc*](http:\/\/training.perl.com\/scripts\/nfc), [*nfd*](http:\/\/training.perl.com\/scripts\/nfd), [*nfkd*](http:\/\/training.perl.com\/scripts\/nfkd), and [*nfkc*](http:\/\/training.perl.com\/scripts\/nfkc).\r\n \r\n 2. String comparisons in &#128042; using `eq`, `ne`, `lc`, `cmp`, `sort`, &amp;c&amp;cc are always wrong.  So instead of `@a = sort @b`, you need `@a = Unicode::Collate-&gt;new-&gt;sort(@b)`.  Might as well add that to your `export PERL5OPTS=-MUnicode::Collate`. You can cache the key for binary comparisons.\r\n\r\n 2. &#128042; built-ins like `printf` and `write` do the wrong thing with Unicode data.  You need to use [the `Unicode::GCString` module](https:\/\/metacpan.org\/pod\/Unicode::GCString) for the former, and both that and also [the `Unicode::LineBreak` module](https:\/\/metacpan.org\/pod\/Unicode::LineBreak) as well for the latter. See [*uwc*](http:\/\/training.perl.com\/scripts\/uwc) and [*unifmt*](http:\/\/training.perl.com\/scripts\/ucsort).\r\n\r\n 2. If you want them to count as integers, then you are going to have to run your `\\d+` captures through [the `Unicode::UCD::num` function](https:\/\/metacpan.org\/pod\/release\/JESSE\/perl-5.14.0\/lib\/Unicode\/UCD.pm#num) because &#128042;\u2019s built-in *atoi*(3) isn\u2019t currently clever enough.\r\n\r\n 2. You are going to have filesystem issues on &#128125; filesystems. Some filesystems silently enforce a conversion to NFC; others silently enforce a conversion to NFD. And others do something else still. Some even ignore the matter altogether, which leads to even greater problems. So you have to do your own NFC\/NFD handling to keep sane.\r\n\r\n 1. All your &#128042;  code involving `a-z` or `A-Z` and such **MUST BE CHANGED**, including `m\/\/`, `s\/\/\/`, and `tr\/\/\/`. It\u2019s should stand out as a screaming red flag that your code is broken. But it is not clear how it must change. Getting the right properties, and understanding their casefolds, is harder than you might think. I use [*unichars*](http:\/\/training.perl.com\/scripts\/unichars) and [*uniprops*](http:\/\/training.perl.com\/scripts\/uniprops) every single day.\r\n\r\n 2. Code that uses `\\p{Lu}` is almost as wrong as code that uses `[A-Za-z]`.  You need to use `\\p{Upper}` instead, and know the reason why. Yes, `\\p{Lowercase}` and `\\p{Lower}` are different from `\\p{Ll}` and `\\p{Lowercase_Letter}`.\r\n\r\n 2. Code that uses `[a-zA-Z]` is even worse.  And it can\u2019t use `\\pL` or `\\p{Letter}`; it needs to use `\\p{Alphabetic}`. Not all alphabetics are letters, you know!\r\n\r\n 3. If you are looking for &#128042; variables with `\/[\\$\\@\\%]\\w+\/`, then you have a problem.  You need to look for `\/[\\$\\@\\%]\\p{IDS}\\p{IDC}*\/`, and even that isn\u2019t thinking about the punctuation variables or package variables.\r\n\r\n 3. If you are checking for whitespace, then you should choose between `\\h` and `\\v`, depending.  And you should never use `\\s`, since it **DOES NOT MEAN** `[\\h\\v]`, contrary to popular belief.\r\n\r\n 3. If you are using `\\n` for a line boundary, or even `\\r\\n`, then you are doing it wrong.  You have to use `\\R`, which is not the same!\r\n\r\n 3. If you don\u2019t know when and whether to call [Unicode::Stringprep](https:\/\/metacpan.org\/pod\/Unicode::Stringprep), then you had better learn.\r\n\r\n 1. Case-insensitive comparisons need to check for whether two things are the same letters no matter their diacritics and such.  The easiest way to do that is with the [standard Unicode::Collate](https:\/\/metacpan.org\/pod\/Unicode::Collate) module. `Unicode::Collate-&gt;new(level =&gt; 1)-&gt;cmp($a, $b)`.  There are also `eq` methods and such, and you should probably learn about the `match` and `substr` methods, too. These are have distinct advantages over the &#128042;  built-ins.\r\n\r\n 1. Sometimes that\u2019s still not enough, and you need [the Unicode::Collate::Locale](https:\/\/metacpan.org\/pod\/Unicode::Collate::Locale) module instead, as in  `Unicode::Collate::Locale-&gt;new(locale =&gt; &quot;de__phonebook&quot;, level =&gt; 1)-&gt;cmp($a, $b)` instead.   Consider that `Unicode::Collate::-&gt;new(level =&gt; 1)-&gt;eq(&quot;d&quot;, &quot;&#240;&quot;)` is true, but `Unicode::Collate::Locale-&gt;new(locale=&gt;&quot;is&quot;,level =&gt; 1)-&gt;eq(&quot;d&quot;, &quot; &#240;&quot;)` is false. Similarly, &quot;ae&quot; and &quot;&#230;&quot; are `eq` if you don\u2019t use locales, or if you use the English one, but they are different in the Icelandic locale.  Now what? It\u2019s tough, I tell you.  You can play with  [*ucsort*](http:\/\/training.perl.com\/scripts\/ucsort) to test some of these things out.\r\n\r\n 1. Consider how to match the pattern CVCV (consonsant, vowel, consonant, vowel)  in the string \u201c*ni&#241;o*\u201d.  Its NFD form \u2014 which you had darned well better have remembered to put it in \u2014 becomes \u201cnin\\x{303}o\u201d.  Now what are you going to do?  Even pretending that a vowel is `[aeiou]` (which is wrong, by the way), you won\u2019t be able to do something like `(?=[aeiou])\\X)` either, because even in NFD a code point like \u2018&#248;\u2019 **does not decompose**!  However, it will test equal to an \u2018o\u2019 using the UCA comparison I just showed you. You can\u2019t rely on NFD, you have to rely on UCA. \r\n\r\n----- \r\n\r\n                &#128169;          &#120120; &#120164; &#120164; &#120166; &#120158; &#120150;   &#120121; &#120163; &#120160; &#120156; &#120150; &#120159; &#120159; &#120150; &#120164; &#120164;           &#128169; \r\n---------\r\n----------\r\n\r\nAnd that\u2019s not all. There are a million broken assumptions that people make about Unicode. Until they understand these things, their  &#128042; code will be broken.\r\n\r\n1. Code that assumes it can open a text file without specifying the encoding is broken.\r\n\r\n1. Code that assumes the default encoding is some sort of native platform encoding is broken.\r\n\r\n1. Code that assumes that web pages in Japanese or Chinese take up less space in UTF\u201116 than in UTF\u20118 is wrong.\r\n\r\n1. Code that assumes Perl uses UTF\u20118 internally is wrong.\r\n\r\n1. Code that assumes that encoding errors will always raise an exception is wrong.\r\n\r\n1. Code that assumes Perl code points are limited to 0x10_FFFF is wrong.\r\n\r\n1. Code that assumes you can set `$\/` to something that will work with any valid line separator is wrong.\r\n\r\n1. Code that assumes roundtrip equality on casefolding, like `lc(uc($s)) eq $s` or `uc(lc($s)) eq $s`, is completely broken and wrong.  Consider that the `uc(&quot;\u03c3&quot;)` and `uc(&quot;\u03c2&quot;)`  are both `&quot;\u03a3&quot;`, but `lc(&quot;\u03a3&quot;)` cannot possibly return both of those.\r\n\r\n2. Code that assumes every lowercase code point has a distinct uppercase one, or vice versa, is broken. For example, `&quot;&#170;&quot;` is a lowercase letter with no uppercase; whereas both `&quot;\u1d43&quot;` and `&quot;\u1d2c&quot;` are letters, but they are not lowercase letters; however, they are both lowercase code points without corresponding uppercase versions. Got that? They are **not** `\\p{Lowercase_Letter}`, despite being both `\\p{Letter}` and `\\p{Lowercase}`.\r\n\r\n3. Code that assumes changing the case doesn\u2019t change the length of the string is broken.\r\n\r\n4. Code that assumes there are only two cases is broken. There\u2019s also titlecase.\r\n\r\n5. Code that assumes only letters have case is broken. Beyond just letters, it turns out that numbers, symbols, and even marks have case. In fact, changing the case can even make something change its main general category, like a `\\p{Mark}` turning into a `\\p{Letter}`. It can also make it switch from one script to another.\r\n\r\n6. Code that assumes that case is never locale-dependent is broken.\r\n\r\n6. Code that assumes Unicode gives a fig about POSIX locales is broken.\r\n\r\n7. Code that assumes you can remove diacritics to get at base ASCII letters is evil, still, broken, brain-damaged, wrong, and justification for capital punishment.\r\n\r\n8. Code that assumes that diacritics `\\p{Diacritic}` and marks `\\p{Mark}` are the same thing is broken.\r\n\r\n9. Code that assumes `\\p{GC=Dash_Punctuation}` covers as much as `\\p{Dash}` is broken.\r\n\r\n1. Code that assumes dash, hyphens, and minuses are the same thing as each other, or that there is only one of each, is broken and wrong.\r\n\r\n10. Code that assumes every code point takes up no more than one print column is broken.\r\n\r\n10. Code that assumes that all `\\p{Mark}` characters take up zero print columns is broken.\r\n\r\n20. Code that assumes that characters which look alike *are* alike is broken.\r\n\r\n20. Code that assumes that characters which do *not* look alike are *not* alike is broken.\r\n\r\n1. Code that assumes there is a limit to the number of code points in a row that just one `\\X` can match is wrong.\r\n\r\n1. Code that assumes `\\X` can never start with a `\\p{Mark}` character is wrong.\r\n\r\n1. Code that assumes that `\\X` can never hold two non-`\\p{Mark}` characters is wrong.\r\n\r\n1. Code that assumes that it cannot use `&quot;\\x{FFFF}&quot;` is wrong.\r\n\r\n1. Code that assumes a non-BMP code point that requires two UTF-16 (surrogate) code units will encode to two separate UTF-8 characters, one per code unit, is wrong. It doesn\u2019t: it encodes to single code point.\r\n\r\n1. Code that transcodes from UTF\u201016 or UTF\u201032 with leading BOMs into UTF\u20108 is broken if it puts a BOM at the start of the resulting UTF-8.  This is so stupid the engineer should have their eyelids removed.\r\n\r\n1. Code that assumes the CESU-8 is a valid UTF encoding is wrong. Likewise, code that thinks encoding U+0000 as `&quot;\\xC0\\x80&quot;` is UTF-8 is broken and wrong. These guys also deserve the eyelid treatment.\r\n\r\n1. Code that assumes characters like `&gt;` always points to the right and `&lt;` always points to the left are wrong \u2014 because they in fact do not.\r\n\r\n1. Code that assumes if you first output character `X` and then character `Y`, that those will show up as `XY` is wrong. Sometimes they don\u2019t.\r\n\r\n1. **Code that assumes that ASCII is good enough for writing English properly is stupid, shortsighted, illiterate, broken, evil, and wrong.**  Off with their heads! If that seems too extreme, we can compromise: henceforth they may type only with their big toe from one foot. (The rest will be duct taped.)\r\n\r\n1. Code that assumes that all `\\p{Math}` code points are visible characters is wrong.\r\n\r\n1. Code that assumes `\\w` contains only letters, digits, and underscores is wrong.\r\n\r\n1. Code that assumes that `^` and `~` are punctuation marks is wrong.\r\n\r\n1. Code that assumes that `&#252;` has an umlaut is wrong.\r\n\r\n1. Code that believes things like `\u20a8` contain any letters in them is wrong.\r\n\r\n1. Code that believes `\\p{InLatin}` is the same as `\\p{Latin}` is  heinously broken. \r\n\r\n1. Code that believe that `\\p{InLatin}` is almost ever useful is almost certainly wrong.\r\n\r\n1. Code that believes that given `$FIRST_LETTER` as the first letter in some alphabet and `$LAST_LETTER` as the last letter in that same alphabet, that `[${FIRST_LETTER}-${LAST_LETTER}]` has any meaning whatsoever is almost always complete broken and wrong and meaningless.\r\n\r\n1. Code that believes someone\u2019s name can only contain certain characters is stupid, offensive, and wrong.\r\n\r\n1. Code that tries to reduce Unicode to ASCII is not merely wrong, its perpetrator should never be allowed to work in programming again. Period. I\u2019m not even positive they should even be allowed to see again, since it obviously hasn\u2019t done them much good so far.\r\n\r\n1. Code that believes there\u2019s some way to pretend textfile encodings don\u2019t exist is broken and dangerous. Might as well poke the other eye out, too.\r\n\r\n1. Code that converts unknown characters to `?` is broken, stupid, braindead, and runs contrary to the standard recommendation, which says **NOT TO DO THAT!** RTFM for why not.\r\n\r\n1. Code that believes it can reliably guess the encoding of an unmarked textfile is guilty of a fatal m&#233;lange of hubris and na&#239;vet&#233; that only a lightning bolt from  Zeus will fix.\r\n\r\n1. Code that believes you can use &#128042; `printf` widths to pad and justify Unicode data is broken and wrong.\r\n\r\n1. Code that believes once you successfully create a file by a given name, that when you run `ls` or `readdir` on its enclosing directory, you\u2019ll actually find that file with the name you created it under is buggy, broken, and wrong. Stop being surprised by this!\r\n\r\n1. Code that believes UTF-16 is a fixed-width encoding is stupid, broken, and wrong. Revoke their programming licence.\r\n\r\n1. Code that treats code points from one plane one whit differently than those from any other plane is *ipso facto* broken and wrong. Go back to school.\r\n\r\n1. Code that believes that stuff like `\/s\/i` can only match `&quot;S&quot;` or `&quot;s&quot;` is broken and wrong.  You\u2019d be surprised.\r\n\r\n1. Code that uses `\\PM\\pM*` to find grapheme clusters instead of using `\\X` is broken and wrong.\r\n\r\n1. People who want to go back to the ASCII world should be whole-heartedly encouraged to do so, and in honor of their glorious upgrade they should be provided *gratis* with a pre-electric manual typewriter for all their data-entry needs.  Messages sent to them should be sent via an \u1d00\u029f\u029f\u1d04\u1d00\u1d18s telegraph at 40 characters per line and hand-delivered by a courier.  STOP.\r\n\r\n------\r\n\r\n                        &#128561;      &#120190; &#120192; &#120184; &#120184; &#120172; &#120189; &#120196;     &#128561; \r\n===\r\n\r\n----\r\n\r\nI don\u2019t know how much more \u201cdefault Unicode in &#128042;\u201d you can get than what I\u2019ve written. Well, yes I do: you should be using `Unicode::Collate` and `Unicode::LineBreak`, too.  And probably more.\r\n\r\nAs you see, there are far too many Unicode things that you really *do* have to worry about for there to *ever* exist any such thing as \u201cdefault to Unicode\u201d.\r\n\r\nWhat you\u2019re going to discover, just as we did back in &#128042; 5.8, that it is simply impossible to impose all these things on code that hasn\u2019t been designed right from the beginning to account for them. Your well-meaning selfishness just broke the entire world.\r\n\r\nAnd even once you do, there are still critical issues that require a great deal of thought to get right.  There is no switch you can flip.  Nothing but brain, and I mean *real brain*, will suffice here. There\u2019s a heck of a lot of stuff you have to learn. Modulo the retreat to the manual typewriter, you simply cannot hope to sneak by in ignorance. This is the 21\u02e2\u1d57 century, and you cannot wish Unicode away by willful ignorance. \r\n\r\nYou have to learn it. Period. It will never be so easy that \u201ceverything just works,\u201d because that will guarantee that a lot of things **don\u2019t** work \u2014 which invalidates the assumption that there can ever be a way to \u201cmake it all work.\u201d\r\n\r\nYou may be able to get a few reasonable defaults for a very few and very limited operations, but not without thinking about things a whole lot more than I think you have.\r\n\r\n  As just one example, canonical ordering is going to cause some real headaches. &#128557;`&quot;\\x{F5}&quot;` **\u2018&#245;\u2019**, `&quot;o\\x{303}&quot;` **\u2018&#245;\u2019**, `&quot;o\\x{303}\\x{304}&quot;` **\u2018\u022d\u2019**, and `&quot;o\\x{304}\\x{303}&quot;` **\u2018\u014d\u0303\u2019** should all match **\u2018&#245;\u2019**, but how in the world are you going to do that? This is harder than it looks, but it\u2019s something you need to account for.  &#128163; \r\n\r\nIf there\u2019s one thing I know about Perl, it is what its Unicode bits do and do not do, and this thing I promise you:  **\u201c   \u0332\u1d1b\u0332\u029c\u0332\u1d07\u0332\u0280\u0332\u1d07\u0332 \u0332\u026a\u0332s\u0332 \u0332\u0274\u0332\u1d0f\u0332 \u0332U\u0332\u0274\u0332\u026a\u0332\u1d04\u0332\u1d0f\u0332\u1d05\u0332\u1d07\u0332 \u0332\u1d0d\u0332\u1d00\u0332\u0262\u0332\u026a\u0332\u1d04\u0332 \u0332\u0299\u0332\u1d1c\u0332\u029f\u0332\u029f\u0332\u1d07\u0332\u1d1b\u0332 \u0332  \u201d**  &#128542; \r\n\r\n  You cannot just change some defaults and get smooth sailing.  It\u2019s true that I run &#128042; with `PERL_UNICODE` set to `&quot;SA&quot;`, but that\u2019s all, and even that is mostly for command-line stuff.  For real work, I go through all the many steps outlined above, and I do it very, ** very** carefully.\r\n\r\n----\r\n\r\n  &#128520; &#161;\u01a8dl\u0259\u0265 \u01a8\u1d09\u0265\u0287 \u0259do\u0265 pu\u0250 \u02bb\u03bb\u0250p \u0259\u0254\u1d09u \u0250 \u0259\u028c\u0250\u0265 \u02bb\u029e\u0254nl poo\u2141   &#128520; \r\n=======\r\n\r\n",
        "body": "<h1>\ud835\ude4e\ud835\ude5e\ud835\ude62\ud835\ude65\ud835\ude61\ud835\ude5a\ud835\ude68\ud835\ude69 <em>\u211e<\/em>:   \ud835\udfd5 \ud835\ude3f\ud835\ude5e\ud835\ude68\ud835\ude58\ud835\ude67\ud835\ude5a\ud835\ude69\ud835\ude5a  \ud835\ude4d\ud835\ude5a\ud835\ude58\ud835\ude64\ud835\ude62\ud835\ude62\ud835\ude5a\ud835\ude63\ud835\ude59\ud835\ude56\ud835\ude69\ud835\ude5e\ud835\ude64\ud835\ude63\ud835\ude68<\/h1>\n\n<ol>\n<li><p>Set your <code>PERL_UNICODE<\/code> envariable to <code>AS<\/code>. This makes all Perl scripts decode <code>@ARGV<\/code> as UTF\u20118 strings, and sets the encoding of all three of stdin, stdout, and stderr to UTF\u20118. Both these are global effects, not lexical ones.<\/p><\/li>\n<li><p>At the top of your source file (program, module, library, <code>do<\/code>hickey), prominently assert that you are running perl version 5.12 or better via:<\/p>\n\n<pre><code>use v5.12;  # minimal for unicode string feature\nuse v5.14;  # optimal for unicode string feature\n<\/code><\/pre><\/li>\n<li><p>Enable warnings, since the previous declaration only enables strictures and features, not warnings. I also suggest promoting Unicode warnings into exceptions, so use both these lines, not just one of them.  Note however that under v5.14, the <code>utf8<\/code> warning class comprises three other subwarnings which can all be separately enabled: <code>nonchar<\/code>, <code>surrogate<\/code>, and <code>non_unicode<\/code>. These you may wish to exert greater control over.<\/p>\n\n<pre><code>use warnings;\nuse warnings qw( FATAL utf8 );\n<\/code><\/pre><\/li>\n<li><p>Declare that this source unit is encoded as UTF\u20118. Although once upon a time this pragma did other things, it now serves this one singular purpose alone and no other:<\/p>\n\n<pre><code>use utf8;\n<\/code><\/pre><\/li>\n<li><p>Declare that anything that opens a filehandle <em>within this lexical scope but not elsewhere<\/em> is to assume that that stream is encoded in UTF\u20118 unless you tell it otherwise. That way you do not affect other module\u2019s or other program\u2019s code.<\/p>\n\n<pre><code>use open qw( :encoding(UTF-8) :std );\n<\/code><\/pre><\/li>\n<li><p>Enable named characters via <code>\\N{CHARNAME}<\/code>.<\/p>\n\n<pre><code>use charnames qw( :full :short );\n<\/code><\/pre><\/li>\n<li><p>If you have a <code>DATA<\/code> handle, you must explicitly set its encoding. If you want this to be UTF\u20118, then say:<\/p>\n\n<pre><code>binmode(DATA, \":encoding(UTF-8)\");\n<\/code><\/pre><\/li>\n<\/ol>\n\n<p>There is of course no end of other matters with which you may eventually find yourself concerned, but these will suffice to approximate the state goal to \u201cmake everything just work with UTF\u20118\u201d, albeit for a somewhat weakened sense of those terms. <\/p>\n\n<p>One other pragma, although it is not Unicode related, is:<\/p>\n\n<pre><code>      use autodie;\n<\/code><\/pre>\n\n<p>It is strongly recommended.<\/p>\n\n<p>\ud83c\udf34 \ud83d\udc2a\ud83d\udc2b\ud83d\udc2a \ud83c\udf1e <em>\ud835\udd72\ud835\udd94  \ud835\udd7f\ud835\udd8d\ud835\udd94\ud835\udd9a  \ud835\udd86\ud835\udd93\ud835\udd89  \ud835\udd6f\ud835\udd94  \ud835\udd77\ud835\udd8e\ud835\udd90\ud835\udd8a\ud835\udd9c\ud835\udd8e\ud835\udd98\ud835\udd8a<\/em> \ud83c\udf1e \ud83d\udc2a\ud83d\udc2b\ud83d\udc2a \ud83d\udc01<\/p>\n\n<hr>\n\n<h2>        \ud83c\udf81   \ud83d\udc2a       \ud835\udd6d\ud835\udd94\ud835\udd8e\ud835\udd91\ud835\udd8a\ud835\udd97\u2e17\ud835\udd95\ud835\udd91\ud835\udd86\ud835\udd99\ud835\udd8a  \ud835\udd8b\ud835\udd94\ud835\udd97   \ud835\udd80\ud835\udd93\ud835\udd8e\ud835\udd88\ud835\udd94\ud835\udd89\ud835\udd8a\u2e17\ud835\udd6c\ud835\udd9c\ud835\udd86\ud835\udd97\ud835\udd8a    \ud835\udd6e\ud835\udd94\ud835\udd89\ud835\udd8a        \ud83d\udc2a    \ud83c\udf81<\/h2>\n\n<hr>\n\n<p>My own boilerplate these days tends to look like this:<\/p>\n\n<pre><code>use 5.014;\n\nuse utf8;\nuse strict;\nuse autodie;\nuse warnings; \nuse warnings    qw&lt; FATAL  utf8     &gt;;\nuse open        qw&lt; :std  :utf8     &gt;;\nuse charnames   qw&lt; :full &gt;;\nuse feature     qw&lt; unicode_strings &gt;;\n\nuse File::Basename      qw&lt; basename &gt;;\nuse Carp                qw&lt; carp croak confess cluck &gt;;\nuse Encode              qw&lt; encode decode &gt;;\nuse Unicode::Normalize  qw&lt; NFD NFC &gt;;\n\nEND { close STDOUT }\n\nif (grep \/\\P{ASCII}\/ =&gt; @ARGV) { \n   @ARGV = map { decode(\"UTF-8\", $_) } @ARGV;\n}\n\n$0 = basename($0);  # shorter messages\n$| = 1;\n\nbinmode(DATA, \":utf8\");\n\n# give a full stack dump on any untrapped exceptions\nlocal $SIG{__DIE__} = sub {\n    confess \"Uncaught exception: @_\" unless $^S;\n};\n\n# now promote run-time warnings into stack-dumped\n#   exceptions *unless* we're in an try block, in\n#   which case just cluck the stack dump instead\nlocal $SIG{__WARN__} = sub {\n    if ($^S) { cluck   \"Trapped warning: @_\" } \n    else     { confess \"Deadly warning: @_\"  }\n};\n\nwhile (&lt;&gt;)  {\n    chomp;\n    $_ = NFD($_);\n    ...\n} continue {\n    say NFC($_);\n}\n\n__END__\n<\/code><\/pre>\n\n<hr>\n\n<h1>                     \ud83c\udf85      \ud835\udd79 \ud835\udd94   \ud835\udd78 \ud835\udd86 \ud835\udd8c \ud835\udd8e \ud835\udd88   \ud835\udd6d \ud835\udd9a \ud835\udd91 \ud835\udd91 \ud835\udd8a \ud835\udd99    \ud83c\udf85<\/h1>\n\n<hr>\n\n<p>Saying that \u201cPerl should [<strong>somehow!<\/strong>] enable Unicode by default\u201d doesn\u2019t even start to begin to think about getting around to saying enough to be even marginally useful in some sort of rare and isolated case.  Unicode is much much more than just a larger character repertoire; it\u2019s also how those characters all interact in many, many ways.<\/p>\n\n<p>Even the simple-minded minimal measures that (some) people seem to think they want are guaranteed to miserably break millions of lines of code, code that has no chance to \u201cupgrade\u201d to your spiffy new <em>Brave New World<\/em> modernity. <\/p>\n\n<p>It is way way way more complicated than people pretend.  I\u2019ve thought about this a huge, whole lot over the past few years.  I would love to be shown that I am wrong.  But I don\u2019t think I am.  Unicode is fundamentally more complex than the model that you would like to impose on it, and there is complexity here that you can never sweep under the carpet. If you try, you\u2019ll break either your own code or somebody else\u2019s.  At some point, you simply have to break down and learn what Unicode is about.  You cannot pretend it is something it is not. <\/p>\n\n<p>\ud83d\udc2a  goes out of its way to make Unicode easy, far more than anything else I\u2019ve ever used. If you think this is bad, try something else for a while. Then come back to \ud83d\udc2a: either you will have returned to a better world, or else you will bring knowledge of the same with you so that we can make use of your new knowledge to make \ud83d\udc2a  better at these things.<\/p>\n\n<hr>\n\n<h2>         \ud83d\udca1     \ud835\udd74\ud835\udd89\ud835\udd8a\ud835\udd86\ud835\udd98       \ud835\udd8b\ud835\udd94\ud835\udd97    \ud835\udd86       \ud835\udd80\ud835\udd93\ud835\udd8e\ud835\udd88\ud835\udd94\ud835\udd89\ud835\udd8a \u2e17 \ud835\udd6c\ud835\udd9c\ud835\udd86\ud835\udd97\ud835\udd8a    \ud83d\udc2a    \ud835\udd77\ud835\udd86\ud835\udd9a\ud835\udd93\ud835\udd89\ud835\udd97\ud835\udd9e    \ud835\udd77\ud835\udd8e\ud835\udd98\ud835\udd99      \ud83d\udca1<\/h2>\n\n<hr>\n\n<p>At a minimum, here  are some things that would appear to be required for \ud83d\udc2a to \u201cenable Unicode by default\u201d, as you put it:<\/p>\n\n<ol>\n<li><p>All \ud83d\udc2a  source code should be in UTF-8 by default.  You can get that with <code>use utf8<\/code> or <code>export PERL5OPTS=-Mutf8<\/code>.<\/p><\/li>\n<li><p>The \ud83d\udc2a  <code>DATA<\/code> handle should be UTF-8. You will have to do this on a per-package basis, as in <code>binmode(DATA, \":encoding(UTF-8)\")<\/code>.<\/p><\/li>\n<li><p>Program arguments to \ud83d\udc2a  scripts should be understood to be UTF-8 by default.  <code>export PERL_UNICODE=A<\/code>, or <code>perl -CA<\/code>, or <code>export PERL5OPTS=-CA<\/code>.<\/p><\/li>\n<li><p>The standard input, output, and error streams should default to UTF-8. <code>export PERL_UNICODE=S<\/code> for all of them, or <code>I<\/code>, <code>O<\/code>, and\/or <code>E<\/code> for just some of them. This is like <code>perl -CS<\/code>.<\/p><\/li>\n<li><p>Any other handles opened by \ud83d\udc2a should be considered UTF-8 unless declared otherwise; <code>export PERL_UNICODE=D<\/code> or with <code>i<\/code> and <code>o<\/code> for particular ones of these; <code>export PERL5OPTS=-CD<\/code> would work.  That makes <code>-CSAD<\/code> for all of them.<\/p><\/li>\n<li><p>Cover both bases plus all the streams you open with <code>export PERL5OPTS=-Mopen=:utf8,:std<\/code>. See <a href=\"http:\/\/training.perl.com\/scripts\/uniquote\" rel=\"noreferrer\"><em>uniquote<\/em><\/a>.<\/p><\/li>\n<li><p>You don\u2019t want to miss UTF-8 encoding errors. Try <code>export PERL5OPTS=-Mwarnings=FATAL,utf8<\/code>.  And make sure your input streams are always <code>binmode<\/code>d to <code>:encoding(UTF-8)<\/code>, not just to <code>:utf8<\/code>.<\/p><\/li>\n<li><p>Code points between 128\u2013255 should be understood by \ud83d\udc2a to be the corresponding Unicode code points, not just unpropertied binary values.  <code>use feature \"unicode_strings\"<\/code> or <code>export PERL5OPTS=-Mfeature=unicode_strings<\/code>.  That will make <code>uc(\"\\xDF\") eq \"SS\"<\/code> and <code>\"\\xE9\" =~ \/\\w\/<\/code>.  A simple <code>export PERL5OPTS=-Mv5.12<\/code> or better will also get that.<\/p><\/li>\n<li><p>Named Unicode characters are not by default enabled, so add <code>export PERL5OPTS=-Mcharnames=:full,:short,latin,greek<\/code> or some such. See <a href=\"http:\/\/training.perl.com\/scripts\/uninames\" rel=\"noreferrer\"><em>uninames<\/em><\/a> and <a href=\"http:\/\/training.perl.com\/scripts\/tcgrep\" rel=\"noreferrer\">tcgrep<\/a>.<\/p><\/li>\n<li><p>You almost always need access to the functions from <a href=\"https:\/\/metacpan.org\/pod\/Unicode::Normalize\" rel=\"noreferrer\">the standard <code>Unicode::Normalize<\/code> module<\/a> various types of decompositions.  <code>export PERL5OPTS=-MUnicode::Normalize=NFD,NFKD,NFC,NFKD<\/code>, and then always run incoming stuff through NFD and outbound stuff from NFC. There\u2019s no I\/O layer for these yet that I\u2019m aware of, but see <a href=\"http:\/\/training.perl.com\/scripts\/nfc\" rel=\"noreferrer\"><em>nfc<\/em><\/a>, <a href=\"http:\/\/training.perl.com\/scripts\/nfd\" rel=\"noreferrer\"><em>nfd<\/em><\/a>, <a href=\"http:\/\/training.perl.com\/scripts\/nfkd\" rel=\"noreferrer\"><em>nfkd<\/em><\/a>, and <a href=\"http:\/\/training.perl.com\/scripts\/nfkc\" rel=\"noreferrer\"><em>nfkc<\/em><\/a>.<\/p><\/li>\n<li><p>String comparisons in \ud83d\udc2a using <code>eq<\/code>, <code>ne<\/code>, <code>lc<\/code>, <code>cmp<\/code>, <code>sort<\/code>, &amp;c&amp;cc are always wrong.  So instead of <code>@a = sort @b<\/code>, you need <code>@a = Unicode::Collate-&gt;new-&gt;sort(@b)<\/code>.  Might as well add that to your <code>export PERL5OPTS=-MUnicode::Collate<\/code>. You can cache the key for binary comparisons.<\/p><\/li>\n<li><p>\ud83d\udc2a built-ins like <code>printf<\/code> and <code>write<\/code> do the wrong thing with Unicode data.  You need to use <a href=\"https:\/\/metacpan.org\/pod\/Unicode::GCString\" rel=\"noreferrer\">the <code>Unicode::GCString<\/code> module<\/a> for the former, and both that and also <a href=\"https:\/\/metacpan.org\/pod\/Unicode::LineBreak\" rel=\"noreferrer\">the <code>Unicode::LineBreak<\/code> module<\/a> as well for the latter. See <a href=\"http:\/\/training.perl.com\/scripts\/uwc\" rel=\"noreferrer\"><em>uwc<\/em><\/a> and <a href=\"http:\/\/training.perl.com\/scripts\/ucsort\" rel=\"noreferrer\"><em>unifmt<\/em><\/a>.<\/p><\/li>\n<li><p>If you want them to count as integers, then you are going to have to run your <code>\\d+<\/code> captures through <a href=\"https:\/\/metacpan.org\/pod\/release\/JESSE\/perl-5.14.0\/lib\/Unicode\/UCD.pm#num\" rel=\"noreferrer\">the <code>Unicode::UCD::num<\/code> function<\/a> because \ud83d\udc2a\u2019s built-in <em>atoi<\/em>(3) isn\u2019t currently clever enough.<\/p><\/li>\n<li><p>You are going to have filesystem issues on \ud83d\udc7d filesystems. Some filesystems silently enforce a conversion to NFC; others silently enforce a conversion to NFD. And others do something else still. Some even ignore the matter altogether, which leads to even greater problems. So you have to do your own NFC\/NFD handling to keep sane.<\/p><\/li>\n<li><p>All your \ud83d\udc2a  code involving <code>a-z<\/code> or <code>A-Z<\/code> and such <strong>MUST BE CHANGED<\/strong>, including <code>m\/\/<\/code>, <code>s\/\/\/<\/code>, and <code>tr\/\/\/<\/code>. It\u2019s should stand out as a screaming red flag that your code is broken. But it is not clear how it must change. Getting the right properties, and understanding their casefolds, is harder than you might think. I use <a href=\"http:\/\/training.perl.com\/scripts\/unichars\" rel=\"noreferrer\"><em>unichars<\/em><\/a> and <a href=\"http:\/\/training.perl.com\/scripts\/uniprops\" rel=\"noreferrer\"><em>uniprops<\/em><\/a> every single day.<\/p><\/li>\n<li><p>Code that uses <code>\\p{Lu}<\/code> is almost as wrong as code that uses <code>[A-Za-z]<\/code>.  You need to use <code>\\p{Upper}<\/code> instead, and know the reason why. Yes, <code>\\p{Lowercase}<\/code> and <code>\\p{Lower}<\/code> are different from <code>\\p{Ll}<\/code> and <code>\\p{Lowercase_Letter}<\/code>.<\/p><\/li>\n<li><p>Code that uses <code>[a-zA-Z]<\/code> is even worse.  And it can\u2019t use <code>\\pL<\/code> or <code>\\p{Letter}<\/code>; it needs to use <code>\\p{Alphabetic}<\/code>. Not all alphabetics are letters, you know!<\/p><\/li>\n<li><p>If you are looking for \ud83d\udc2a variables with <code>\/[\\$\\@\\%]\\w+\/<\/code>, then you have a problem.  You need to look for <code>\/[\\$\\@\\%]\\p{IDS}\\p{IDC}*\/<\/code>, and even that isn\u2019t thinking about the punctuation variables or package variables.<\/p><\/li>\n<li><p>If you are checking for whitespace, then you should choose between <code>\\h<\/code> and <code>\\v<\/code>, depending.  And you should never use <code>\\s<\/code>, since it <strong>DOES NOT MEAN<\/strong> <code>[\\h\\v]<\/code>, contrary to popular belief.<\/p><\/li>\n<li><p>If you are using <code>\\n<\/code> for a line boundary, or even <code>\\r\\n<\/code>, then you are doing it wrong.  You have to use <code>\\R<\/code>, which is not the same!<\/p><\/li>\n<li><p>If you don\u2019t know when and whether to call <a href=\"https:\/\/metacpan.org\/pod\/Unicode::Stringprep\" rel=\"noreferrer\">Unicode::Stringprep<\/a>, then you had better learn.<\/p><\/li>\n<li><p>Case-insensitive comparisons need to check for whether two things are the same letters no matter their diacritics and such.  The easiest way to do that is with the <a href=\"https:\/\/metacpan.org\/pod\/Unicode::Collate\" rel=\"noreferrer\">standard Unicode::Collate<\/a> module. <code>Unicode::Collate-&gt;new(level =&gt; 1)-&gt;cmp($a, $b)<\/code>.  There are also <code>eq<\/code> methods and such, and you should probably learn about the <code>match<\/code> and <code>substr<\/code> methods, too. These are have distinct advantages over the \ud83d\udc2a  built-ins.<\/p><\/li>\n<li><p>Sometimes that\u2019s still not enough, and you need <a href=\"https:\/\/metacpan.org\/pod\/Unicode::Collate::Locale\" rel=\"noreferrer\">the Unicode::Collate::Locale<\/a> module instead, as in  <code>Unicode::Collate::Locale-&gt;new(locale =&gt; \"de__phonebook\", level =&gt; 1)-&gt;cmp($a, $b)<\/code> instead.   Consider that <code>Unicode::Collate::-&gt;new(level =&gt; 1)-&gt;eq(\"d\", \"\u00f0\")<\/code> is true, but <code>Unicode::Collate::Locale-&gt;new(locale=&gt;\"is\",level =&gt; 1)-&gt;eq(\"d\", \" \u00f0\")<\/code> is false. Similarly, \"ae\" and \"\u00e6\" are <code>eq<\/code> if you don\u2019t use locales, or if you use the English one, but they are different in the Icelandic locale.  Now what? It\u2019s tough, I tell you.  You can play with  <a href=\"http:\/\/training.perl.com\/scripts\/ucsort\" rel=\"noreferrer\"><em>ucsort<\/em><\/a> to test some of these things out.<\/p><\/li>\n<li><p>Consider how to match the pattern CVCV (consonsant, vowel, consonant, vowel)  in the string \u201c<em>ni\u00f1o<\/em>\u201d.  Its NFD form \u2014 which you had darned well better have remembered to put it in \u2014 becomes \u201cnin\\x{303}o\u201d.  Now what are you going to do?  Even pretending that a vowel is <code>[aeiou]<\/code> (which is wrong, by the way), you won\u2019t be able to do something like <code>(?=[aeiou])\\X)<\/code> either, because even in NFD a code point like \u2018\u00f8\u2019 <strong>does not decompose<\/strong>!  However, it will test equal to an \u2018o\u2019 using the UCA comparison I just showed you. You can\u2019t rely on NFD, you have to rely on UCA. <\/p><\/li>\n<\/ol>\n\n<hr>\n\n<h2>                \ud83d\udca9          \ud835\udd38 \ud835\udd64 \ud835\udd64 \ud835\udd66 \ud835\udd5e \ud835\udd56   \ud835\udd39 \ud835\udd63 \ud835\udd60 \ud835\udd5c \ud835\udd56 \ud835\udd5f \ud835\udd5f \ud835\udd56 \ud835\udd64 \ud835\udd64           \ud83d\udca9<\/h2>\n\n<hr>\n\n<p>And that\u2019s not all. There are a million broken assumptions that people make about Unicode. Until they understand these things, their  \ud83d\udc2a code will be broken.<\/p>\n\n<ol>\n<li><p>Code that assumes it can open a text file without specifying the encoding is broken.<\/p><\/li>\n<li><p>Code that assumes the default encoding is some sort of native platform encoding is broken.<\/p><\/li>\n<li><p>Code that assumes that web pages in Japanese or Chinese take up less space in UTF\u201116 than in UTF\u20118 is wrong.<\/p><\/li>\n<li><p>Code that assumes Perl uses UTF\u20118 internally is wrong.<\/p><\/li>\n<li><p>Code that assumes that encoding errors will always raise an exception is wrong.<\/p><\/li>\n<li><p>Code that assumes Perl code points are limited to 0x10_FFFF is wrong.<\/p><\/li>\n<li><p>Code that assumes you can set <code>$\/<\/code> to something that will work with any valid line separator is wrong.<\/p><\/li>\n<li><p>Code that assumes roundtrip equality on casefolding, like <code>lc(uc($s)) eq $s<\/code> or <code>uc(lc($s)) eq $s<\/code>, is completely broken and wrong.  Consider that the <code>uc(\"\u03c3\")<\/code> and <code>uc(\"\u03c2\")<\/code>  are both <code>\"\u03a3\"<\/code>, but <code>lc(\"\u03a3\")<\/code> cannot possibly return both of those.<\/p><\/li>\n<li><p>Code that assumes every lowercase code point has a distinct uppercase one, or vice versa, is broken. For example, <code>\"\u00aa\"<\/code> is a lowercase letter with no uppercase; whereas both <code>\"\u1d43\"<\/code> and <code>\"\u1d2c\"<\/code> are letters, but they are not lowercase letters; however, they are both lowercase code points without corresponding uppercase versions. Got that? They are <strong>not<\/strong> <code>\\p{Lowercase_Letter}<\/code>, despite being both <code>\\p{Letter}<\/code> and <code>\\p{Lowercase}<\/code>.<\/p><\/li>\n<li><p>Code that assumes changing the case doesn\u2019t change the length of the string is broken.<\/p><\/li>\n<li><p>Code that assumes there are only two cases is broken. There\u2019s also titlecase.<\/p><\/li>\n<li><p>Code that assumes only letters have case is broken. Beyond just letters, it turns out that numbers, symbols, and even marks have case. In fact, changing the case can even make something change its main general category, like a <code>\\p{Mark}<\/code> turning into a <code>\\p{Letter}<\/code>. It can also make it switch from one script to another.<\/p><\/li>\n<li><p>Code that assumes that case is never locale-dependent is broken.<\/p><\/li>\n<li><p>Code that assumes Unicode gives a fig about POSIX locales is broken.<\/p><\/li>\n<li><p>Code that assumes you can remove diacritics to get at base ASCII letters is evil, still, broken, brain-damaged, wrong, and justification for capital punishment.<\/p><\/li>\n<li><p>Code that assumes that diacritics <code>\\p{Diacritic}<\/code> and marks <code>\\p{Mark}<\/code> are the same thing is broken.<\/p><\/li>\n<li><p>Code that assumes <code>\\p{GC=Dash_Punctuation}<\/code> covers as much as <code>\\p{Dash}<\/code> is broken.<\/p><\/li>\n<li><p>Code that assumes dash, hyphens, and minuses are the same thing as each other, or that there is only one of each, is broken and wrong.<\/p><\/li>\n<li><p>Code that assumes every code point takes up no more than one print column is broken.<\/p><\/li>\n<li><p>Code that assumes that all <code>\\p{Mark}<\/code> characters take up zero print columns is broken.<\/p><\/li>\n<li><p>Code that assumes that characters which look alike <em>are<\/em> alike is broken.<\/p><\/li>\n<li><p>Code that assumes that characters which do <em>not<\/em> look alike are <em>not<\/em> alike is broken.<\/p><\/li>\n<li><p>Code that assumes there is a limit to the number of code points in a row that just one <code>\\X<\/code> can match is wrong.<\/p><\/li>\n<li><p>Code that assumes <code>\\X<\/code> can never start with a <code>\\p{Mark}<\/code> character is wrong.<\/p><\/li>\n<li><p>Code that assumes that <code>\\X<\/code> can never hold two non-<code>\\p{Mark}<\/code> characters is wrong.<\/p><\/li>\n<li><p>Code that assumes that it cannot use <code>\"\\x{FFFF}\"<\/code> is wrong.<\/p><\/li>\n<li><p>Code that assumes a non-BMP code point that requires two UTF-16 (surrogate) code units will encode to two separate UTF-8 characters, one per code unit, is wrong. It doesn\u2019t: it encodes to single code point.<\/p><\/li>\n<li><p>Code that transcodes from UTF\u201016 or UTF\u201032 with leading BOMs into UTF\u20108 is broken if it puts a BOM at the start of the resulting UTF-8.  This is so stupid the engineer should have their eyelids removed.<\/p><\/li>\n<li><p>Code that assumes the CESU-8 is a valid UTF encoding is wrong. Likewise, code that thinks encoding U+0000 as <code>\"\\xC0\\x80\"<\/code> is UTF-8 is broken and wrong. These guys also deserve the eyelid treatment.<\/p><\/li>\n<li><p>Code that assumes characters like <code>&gt;<\/code> always points to the right and <code>&lt;<\/code> always points to the left are wrong \u2014 because they in fact do not.<\/p><\/li>\n<li><p>Code that assumes if you first output character <code>X<\/code> and then character <code>Y<\/code>, that those will show up as <code>XY<\/code> is wrong. Sometimes they don\u2019t.<\/p><\/li>\n<li><p><strong>Code that assumes that ASCII is good enough for writing English properly is stupid, shortsighted, illiterate, broken, evil, and wrong.<\/strong>  Off with their heads! If that seems too extreme, we can compromise: henceforth they may type only with their big toe from one foot. (The rest will be duct taped.)<\/p><\/li>\n<li><p>Code that assumes that all <code>\\p{Math}<\/code> code points are visible characters is wrong.<\/p><\/li>\n<li><p>Code that assumes <code>\\w<\/code> contains only letters, digits, and underscores is wrong.<\/p><\/li>\n<li><p>Code that assumes that <code>^<\/code> and <code>~<\/code> are punctuation marks is wrong.<\/p><\/li>\n<li><p>Code that assumes that <code>\u00fc<\/code> has an umlaut is wrong.<\/p><\/li>\n<li><p>Code that believes things like <code>\u20a8<\/code> contain any letters in them is wrong.<\/p><\/li>\n<li><p>Code that believes <code>\\p{InLatin}<\/code> is the same as <code>\\p{Latin}<\/code> is  heinously broken. <\/p><\/li>\n<li><p>Code that believe that <code>\\p{InLatin}<\/code> is almost ever useful is almost certainly wrong.<\/p><\/li>\n<li><p>Code that believes that given <code>$FIRST_LETTER<\/code> as the first letter in some alphabet and <code>$LAST_LETTER<\/code> as the last letter in that same alphabet, that <code>[${FIRST_LETTER}-${LAST_LETTER}]<\/code> has any meaning whatsoever is almost always complete broken and wrong and meaningless.<\/p><\/li>\n<li><p>Code that believes someone\u2019s name can only contain certain characters is stupid, offensive, and wrong.<\/p><\/li>\n<li><p>Code that tries to reduce Unicode to ASCII is not merely wrong, its perpetrator should never be allowed to work in programming again. Period. I\u2019m not even positive they should even be allowed to see again, since it obviously hasn\u2019t done them much good so far.<\/p><\/li>\n<li><p>Code that believes there\u2019s some way to pretend textfile encodings don\u2019t exist is broken and dangerous. Might as well poke the other eye out, too.<\/p><\/li>\n<li><p>Code that converts unknown characters to <code>?<\/code> is broken, stupid, braindead, and runs contrary to the standard recommendation, which says <strong>NOT TO DO THAT!<\/strong> RTFM for why not.<\/p><\/li>\n<li><p>Code that believes it can reliably guess the encoding of an unmarked textfile is guilty of a fatal m\u00e9lange of hubris and na\u00efvet\u00e9 that only a lightning bolt from  Zeus will fix.<\/p><\/li>\n<li><p>Code that believes you can use \ud83d\udc2a <code>printf<\/code> widths to pad and justify Unicode data is broken and wrong.<\/p><\/li>\n<li><p>Code that believes once you successfully create a file by a given name, that when you run <code>ls<\/code> or <code>readdir<\/code> on its enclosing directory, you\u2019ll actually find that file with the name you created it under is buggy, broken, and wrong. Stop being surprised by this!<\/p><\/li>\n<li><p>Code that believes UTF-16 is a fixed-width encoding is stupid, broken, and wrong. Revoke their programming licence.<\/p><\/li>\n<li><p>Code that treats code points from one plane one whit differently than those from any other plane is <em>ipso facto<\/em> broken and wrong. Go back to school.<\/p><\/li>\n<li><p>Code that believes that stuff like <code>\/s\/i<\/code> can only match <code>\"S\"<\/code> or <code>\"s\"<\/code> is broken and wrong.  You\u2019d be surprised.<\/p><\/li>\n<li><p>Code that uses <code>\\PM\\pM*<\/code> to find grapheme clusters instead of using <code>\\X<\/code> is broken and wrong.<\/p><\/li>\n<li><p>People who want to go back to the ASCII world should be whole-heartedly encouraged to do so, and in honor of their glorious upgrade they should be provided <em>gratis<\/em> with a pre-electric manual typewriter for all their data-entry needs.  Messages sent to them should be sent via an \u1d00\u029f\u029f\u1d04\u1d00\u1d18s telegraph at 40 characters per line and hand-delivered by a courier.  STOP.<\/p><\/li>\n<\/ol>\n\n<hr>\n\n<h1>                        \ud83d\ude31      \ud835\udd7e \ud835\udd80 \ud835\udd78 \ud835\udd78 \ud835\udd6c \ud835\udd7d \ud835\udd84     \ud83d\ude31<\/h1>\n\n<hr>\n\n<p>I don\u2019t know how much more \u201cdefault Unicode in \ud83d\udc2a\u201d you can get than what I\u2019ve written. Well, yes I do: you should be using <code>Unicode::Collate<\/code> and <code>Unicode::LineBreak<\/code>, too.  And probably more.<\/p>\n\n<p>As you see, there are far too many Unicode things that you really <em>do<\/em> have to worry about for there to <em>ever<\/em> exist any such thing as \u201cdefault to Unicode\u201d.<\/p>\n\n<p>What you\u2019re going to discover, just as we did back in \ud83d\udc2a 5.8, that it is simply impossible to impose all these things on code that hasn\u2019t been designed right from the beginning to account for them. Your well-meaning selfishness just broke the entire world.<\/p>\n\n<p>And even once you do, there are still critical issues that require a great deal of thought to get right.  There is no switch you can flip.  Nothing but brain, and I mean <em>real brain<\/em>, will suffice here. There\u2019s a heck of a lot of stuff you have to learn. Modulo the retreat to the manual typewriter, you simply cannot hope to sneak by in ignorance. This is the 21\u02e2\u1d57 century, and you cannot wish Unicode away by willful ignorance. <\/p>\n\n<p>You have to learn it. Period. It will never be so easy that \u201ceverything just works,\u201d because that will guarantee that a lot of things <strong>don\u2019t<\/strong> work \u2014 which invalidates the assumption that there can ever be a way to \u201cmake it all work.\u201d<\/p>\n\n<p>You may be able to get a few reasonable defaults for a very few and very limited operations, but not without thinking about things a whole lot more than I think you have.<\/p>\n\n<p>As just one example, canonical ordering is going to cause some real headaches. \ud83d\ude2d<code>\"\\x{F5}\"<\/code> <strong>\u2018\u00f5\u2019<\/strong>, <code>\"o\\x{303}\"<\/code> <strong>\u2018\u00f5\u2019<\/strong>, <code>\"o\\x{303}\\x{304}\"<\/code> <strong>\u2018\u022d\u2019<\/strong>, and <code>\"o\\x{304}\\x{303}\"<\/code> <strong>\u2018\u014d\u0303\u2019<\/strong> should all match <strong>\u2018\u00f5\u2019<\/strong>, but how in the world are you going to do that? This is harder than it looks, but it\u2019s something you need to account for.  \ud83d\udca3 <\/p>\n\n<p>If there\u2019s one thing I know about Perl, it is what its Unicode bits do and do not do, and this thing I promise you:  <strong>\u201c   \u0332\u1d1b\u0332\u029c\u0332\u1d07\u0332\u0280\u0332\u1d07\u0332 \u0332\u026a\u0332s\u0332 \u0332\u0274\u0332\u1d0f\u0332 \u0332U\u0332\u0274\u0332\u026a\u0332\u1d04\u0332\u1d0f\u0332\u1d05\u0332\u1d07\u0332 \u0332\u1d0d\u0332\u1d00\u0332\u0262\u0332\u026a\u0332\u1d04\u0332 \u0332\u0299\u0332\u1d1c\u0332\u029f\u0332\u029f\u0332\u1d07\u0332\u1d1b\u0332 \u0332  \u201d<\/strong>  \ud83d\ude1e <\/p>\n\n<p>You cannot just change some defaults and get smooth sailing.  It\u2019s true that I run \ud83d\udc2a with <code>PERL_UNICODE<\/code> set to <code>\"SA\"<\/code>, but that\u2019s all, and even that is mostly for command-line stuff.  For real work, I go through all the many steps outlined above, and I do it very, ** very** carefully.<\/p>\n\n<hr>\n\n<h1>  \ud83d\ude08 \u00a1\u01a8dl\u0259\u0265 \u01a8\u1d09\u0265\u0287 \u0259do\u0265 pu\u0250 \u02bb\u03bb\u0250p \u0259\u0254\u1d09u \u0250 \u0259\u028c\u0250\u0265 \u02bb\u029e\u0254nl poo\u2141   \ud83d\ude08<\/h1>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 8423,
            "reputation": 736751,
            "user_id": 15168,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/i.stack.imgur.com\/WtEI9.png?s=256&g=1",
            "display_name": "Jonathan Leffler",
            "link": "https:\/\/stackoverflow.com\/users\/15168\/jonathan-leffler"
        },
        "is_accepted": true,
        "score": 608,
        "last_activity_date": 1571745943,
        "last_edit_date": 1571745943.0,
        "creation_date": 1229290409,
        "answer_id": 367014,
        "question_id": 366980,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "In order of appearance, the languages are `sed`, `awk`, `perl`, `python`.\r\n\r\nThe `sed` program is a stream editor and is designed to apply the actions from a script to each line (or, more generally, to specified ranges of lines) of the input file or files. Its language is based on `ed`, the Unix editor, and although it has conditionals and so on, it is hard to work with for complex tasks. You can work minor miracles with it - but at a cost to the hair on your head. However, it is probably the fastest of the programs when attempting tasks within its remit. (It has the least powerful regular expressions of the programs discussed - adequate for many purposes, but certainly not PCRE - Perl-Compatible Regular Expressions)\r\n\r\nThe `awk` program (name from the initials of its authors - Aho, Weinberger, and Kernighan) is a tool initially for formatting reports. It can be used as a souped-up `sed`; in its more recent versions, it is computationally complete. It uses an interesting idea - the program is based on &#39;patterns matched&#39; and &#39;actions taken when the pattern matches&#39;. The patterns are fairly powerful (Extended Regular Expressions). The language for the actions is similar to C. One of the key features of `awk` is that it splits the input automatically into records and each record into fields.\r\n\r\nPerl was written in part as an awk-killer and sed-killer. Two of the programs provided with it are `a2p` and `s2p` for converting `awk` scripts and `sed` scripts into Perl. Perl is one of the earliest of the next generation of scripting languages (Tcl\/Tk can probably claim primacy). It has powerful integrated regular expression handling with a vastly more powerful language. It provides access to almost all system calls and has the extensibility of the CPAN modules. (Neither `awk` nor `sed` is extensible.) One of Perl&#39;s mottos is &quot;TMTOWTDI - There&#39;s more than one way to do it&quot; (pronounced &quot;tim-toady&quot;). Perl has &#39;objects&#39;, but it is more of an add-on than a fundamental part of the language.\r\n\r\nPython was written last, and probably in part as a reaction to Perl. It has some interesting syntactic ideas (indenting to indicate levels - no braces or equivalents). It is more fundamentally object-oriented than Perl; it is just as extensible as Perl.\r\n\r\nOK - when to use each?\r\n\r\n* Sed - when you need to do simple text transforms on files.\r\n* Awk - when you only need simple formatting and summarisation or transformation of data.\r\n* Perl - for almost any task, but especially when the task needs complex regular expressions.\r\n* Python - for the same tasks that you could use Perl for.\r\n\r\nI&#39;m not aware of anything that Perl can do that Python can&#39;t, nor vice versa. The choice between the two would depend on other factors. I learned Perl before there was a Python, so I tend to use it. Python has less accreted syntax and is generally somewhat simpler to learn. Perl 6, when it becomes available, will be a fascinating development.\r\n\r\n(Note that the &#39;overviews&#39; of Perl and Python, in particular, are woefully incomplete; whole books could be written on the topic.)",
        "body": "<p>In order of appearance, the languages are <code>sed<\/code>, <code>awk<\/code>, <code>perl<\/code>, <code>python<\/code>.<\/p>\n\n<p>The <code>sed<\/code> program is a stream editor and is designed to apply the actions from a script to each line (or, more generally, to specified ranges of lines) of the input file or files. Its language is based on <code>ed<\/code>, the Unix editor, and although it has conditionals and so on, it is hard to work with for complex tasks. You can work minor miracles with it - but at a cost to the hair on your head. However, it is probably the fastest of the programs when attempting tasks within its remit. (It has the least powerful regular expressions of the programs discussed - adequate for many purposes, but certainly not PCRE - Perl-Compatible Regular Expressions)<\/p>\n\n<p>The <code>awk<\/code> program (name from the initials of its authors - Aho, Weinberger, and Kernighan) is a tool initially for formatting reports. It can be used as a souped-up <code>sed<\/code>; in its more recent versions, it is computationally complete. It uses an interesting idea - the program is based on 'patterns matched' and 'actions taken when the pattern matches'. The patterns are fairly powerful (Extended Regular Expressions). The language for the actions is similar to C. One of the key features of <code>awk<\/code> is that it splits the input automatically into records and each record into fields.<\/p>\n\n<p>Perl was written in part as an awk-killer and sed-killer. Two of the programs provided with it are <code>a2p<\/code> and <code>s2p<\/code> for converting <code>awk<\/code> scripts and <code>sed<\/code> scripts into Perl. Perl is one of the earliest of the next generation of scripting languages (Tcl\/Tk can probably claim primacy). It has powerful integrated regular expression handling with a vastly more powerful language. It provides access to almost all system calls and has the extensibility of the CPAN modules. (Neither <code>awk<\/code> nor <code>sed<\/code> is extensible.) One of Perl's mottos is \"TMTOWTDI - There's more than one way to do it\" (pronounced \"tim-toady\"). Perl has 'objects', but it is more of an add-on than a fundamental part of the language.<\/p>\n\n<p>Python was written last, and probably in part as a reaction to Perl. It has some interesting syntactic ideas (indenting to indicate levels - no braces or equivalents). It is more fundamentally object-oriented than Perl; it is just as extensible as Perl.<\/p>\n\n<p>OK - when to use each?<\/p>\n\n<ul>\n<li>Sed - when you need to do simple text transforms on files.<\/li>\n<li>Awk - when you only need simple formatting and summarisation or transformation of data.<\/li>\n<li>Perl - for almost any task, but especially when the task needs complex regular expressions.<\/li>\n<li>Python - for the same tasks that you could use Perl for.<\/li>\n<\/ul>\n\n<p>I'm not aware of anything that Perl can do that Python can't, nor vice versa. The choice between the two would depend on other factors. I learned Perl before there was a Python, so I tend to use it. Python has less accreted syntax and is generally somewhat simpler to learn. Perl 6, when it becomes available, will be a fascinating development.<\/p>\n\n<p>(Note that the 'overviews' of Perl and Python, in particular, are woefully incomplete; whole books could be written on the topic.)<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 29070,
            "reputation": 14844,
            "user_id": 78254,
            "user_type": "registered",
            "accept_rate": 64,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/2d4af5a4e43bff332dc81538526ac369?s=256&d=identicon&r=PG",
            "display_name": "Allen Bargi",
            "link": "https:\/\/stackoverflow.com\/users\/78254\/allen-bargi"
        },
        "is_accepted": false,
        "score": 603,
        "last_activity_date": 1607105888,
        "last_edit_date": 1607105888.0,
        "creation_date": 1315991364,
        "answer_id": 7413863,
        "question_id": 2499794,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Here is how to solve it on [Mac&amp;nbsp;OS&amp;nbsp;X v10.7][1] (Lion) or Cygwin (Windows 10):\r\n\r\nAdd the following lines to your *bashrc* or *bash_profile* file on the host machine:\r\n\r\n    # Setting for the new UTF-8 terminal support in Lion\r\n    export LC_CTYPE=en_US.UTF-8\r\n    export LC_ALL=en_US.UTF-8\r\n\r\nIf you are using [Z shell][2] (zsh), edit file *zshrc*:\r\n\r\n    # Setting for the new UTF-8 terminal support in Lion\r\n    LC_CTYPE=en_US.UTF-8\r\n    LC_ALL=en_US.UTF-8\r\n\r\n  [1]: https:\/\/en.wikipedia.org\/wiki\/Mac_OS_X_Lion\r\n  [2]: https:\/\/en.wikipedia.org\/wiki\/Z_shell\r\n\r\n\r\n",
        "body": "<p>Here is how to solve it on <a href=\"https:\/\/en.wikipedia.org\/wiki\/Mac_OS_X_Lion\" rel=\"noreferrer\">Mac\u00a0OS\u00a0X v10.7<\/a> (Lion) or Cygwin (Windows 10):<\/p>\n<p>Add the following lines to your <em>bashrc<\/em> or <em>bash_profile<\/em> file on the host machine:<\/p>\n<pre><code># Setting for the new UTF-8 terminal support in Lion\nexport LC_CTYPE=en_US.UTF-8\nexport LC_ALL=en_US.UTF-8\n<\/code><\/pre>\n<p>If you are using <a href=\"https:\/\/en.wikipedia.org\/wiki\/Z_shell\" rel=\"noreferrer\">Z shell<\/a> (zsh), edit file <em>zshrc<\/em>:<\/p>\n<pre><code># Setting for the new UTF-8 terminal support in Lion\nLC_CTYPE=en_US.UTF-8\nLC_ALL=en_US.UTF-8\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 289134,
            "reputation": 372786,
            "user_id": 589924,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/b2cf53d5a3d25f95c0db4e025aed4153?s=256&d=identicon&r=PG",
            "display_name": "ikegami",
            "link": "https:\/\/stackoverflow.com\/users\/589924\/ikegami"
        },
        "is_accepted": true,
        "score": 573,
        "last_activity_date": 1690998366,
        "last_edit_date": 1690998366.0,
        "creation_date": 1343421360,
        "answer_id": 11695310,
        "question_id": 11695110,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Perl has a syntax called &quot;indirect method notation&quot;. It allows\r\n\r\n    Foo-&gt;new($bar)\r\n\r\nto be written as\r\n\r\n    new Foo $bar\r\n\r\nSo that means\r\n\r\n    Syntax error ! exit 0;\r\n\r\nis the same as\r\n\r\n    error-&gt;Syntax(! exit 0);\r\n\r\nor\r\n\r\n    error-&gt;Syntax(!exit(0));\r\n\r\nNot only is it valid syntax, it doesn&#39;t result in a run-time error because the first thing executed is `exit(0)`.\r\n\r\n---\r\n\r\nThis feature can be disabled using any of the following:\r\n\r\n```perl\r\nno feature qw( indirect );  # Perl 5.32+\r\n\r\nuse v5.36;                  # Perl 5.36+\r\n\r\nno indirect;                # CPAN module\r\n```\r\n",
        "body": "<p>Perl has a syntax called &quot;indirect method notation&quot;. It allows<\/p>\n<pre><code>Foo-&gt;new($bar)\n<\/code><\/pre>\n<p>to be written as<\/p>\n<pre><code>new Foo $bar\n<\/code><\/pre>\n<p>So that means<\/p>\n<pre><code>Syntax error ! exit 0;\n<\/code><\/pre>\n<p>is the same as<\/p>\n<pre><code>error-&gt;Syntax(! exit 0);\n<\/code><\/pre>\n<p>or<\/p>\n<pre><code>error-&gt;Syntax(!exit(0));\n<\/code><\/pre>\n<p>Not only is it valid syntax, it doesn't result in a run-time error because the first thing executed is <code>exit(0)<\/code>.<\/p>\n<hr \/>\n<p>This feature can be disabled using any of the following:<\/p>\n<pre class=\"lang-perl prettyprint-override\"><code>no feature qw( indirect );  # Perl 5.32+\n\nuse v5.36;                  # Perl 5.36+\n\nno indirect;                # CPAN module\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 42267,
            "reputation": 136069,
            "user_id": 123109,
            "user_type": "registered",
            "accept_rate": 55,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/157c96de3d125abc1c363ff25c20dfaf?s=256&d=identicon&r=PG",
            "display_name": "Greg Bacon",
            "link": "https:\/\/stackoverflow.com\/users\/123109\/greg-bacon"
        },
        "is_accepted": true,
        "score": 551,
        "last_activity_date": 1607105701,
        "last_edit_date": 1607105701.0,
        "creation_date": 1269456655,
        "answer_id": 2510548,
        "question_id": 2499794,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Your OS doesn&#39;t know about `en_US.UTF-8`.\r\n\r\nYou didn&#39;t mention a specific platform, but I can reproduce your problem:\r\n\r\n&lt;pre&gt;% uname -a\r\nOSF1 hunter2 V5.1 2650 alpha\r\n% perl -e exit\r\nperl: warning: Setting locale failed.\r\nperl: warning: Please check that your locale settings:\r\n    LC_ALL = (unset),\r\n    LANG = &quot;en_US.UTF-8&quot;\r\n    are supported and installed on your system.\r\nperl: warning: Falling back to the standard locale (&quot;C&quot;).&lt;\/pre&gt;\r\n\r\nMy guess is you used ssh to connect to this older host from a newer desktop machine. It&#39;s common for `\/etc\/ssh\/sshd_config` to contain\r\n\r\n    AcceptEnv LANG LC_*\r\n\r\nwhich allows clients to propagate the values of those environment variables into new sessions.\r\n\r\nThe warning gives you a hint about how to squelch it if you don&#39;t require the full-up locale:\r\n\r\n&lt;pre&gt;% env LANG=C perl -e exit\r\n%&lt;\/pre&gt;\r\n\r\nor with Bash:\r\n\r\n&lt;pre&gt;$ LANG=C perl -e exit\r\n$ &lt;\/pre&gt;\r\n\r\nFor a permanent fix, choose one of\r\n\r\n1. On the older host, set the `LANG` environment variable in your shell&#39;s initialization file.\r\n2. Modify your environment on the client side, *e.g.*, rather than `ssh hunter2`, use the command `LANG=C ssh hunter2`.\r\n3. If you have administrator rights, stop ssh from sending the environment variables by commenting out the `SendEnv LANG LC_*` line in the *local* `\/etc\/ssh\/ssh_config` file. (Thanks to [this answer][1]. See [Bug 1285][2] for OpenSSH for more.)\r\n\r\n  [1]: https:\/\/askubuntu.com\/questions\/144235\/locale-variables-have-no-effect-in-remote-shell-perl-warning-setting-locale-f\/144448#144448\r\n  [2]: https:\/\/bugzilla.mindrot.org\/show_bug.cgi?id=1285#c2\r\n\r\n\r\n",
        "body": "<p>Your OS doesn't know about <code>en_US.UTF-8<\/code>.<\/p>\n<p>You didn't mention a specific platform, but I can reproduce your problem:<\/p>\n<pre>% uname -a\nOSF1 hunter2 V5.1 2650 alpha\n% perl -e exit\nperl: warning: Setting locale failed.\nperl: warning: Please check that your locale settings:\n    LC_ALL = (unset),\n    LANG = \"en_US.UTF-8\"\n    are supported and installed on your system.\nperl: warning: Falling back to the standard locale (\"C\").<\/pre>\n<p>My guess is you used ssh to connect to this older host from a newer desktop machine. It's common for <code>\/etc\/ssh\/sshd_config<\/code> to contain<\/p>\n<pre><code>AcceptEnv LANG LC_*\n<\/code><\/pre>\n<p>which allows clients to propagate the values of those environment variables into new sessions.<\/p>\n<p>The warning gives you a hint about how to squelch it if you don't require the full-up locale:<\/p>\n<pre>% env LANG=C perl -e exit\n%<\/pre>\n<p>or with Bash:<\/p>\n<pre>$ LANG=C perl -e exit\n$ <\/pre>\n<p>For a permanent fix, choose one of<\/p>\n<ol>\n<li>On the older host, set the <code>LANG<\/code> environment variable in your shell's initialization file.<\/li>\n<li>Modify your environment on the client side, <em>e.g.<\/em>, rather than <code>ssh hunter2<\/code>, use the command <code>LANG=C ssh hunter2<\/code>.<\/li>\n<li>If you have administrator rights, stop ssh from sending the environment variables by commenting out the <code>SendEnv LANG LC_*<\/code> line in the <em>local<\/em> <code>\/etc\/ssh\/ssh_config<\/code> file. (Thanks to <a href=\"https:\/\/askubuntu.com\/questions\/144235\/locale-variables-have-no-effect-in-remote-shell-perl-warning-setting-locale-f\/144448#144448\">this answer<\/a>. See <a href=\"https:\/\/bugzilla.mindrot.org\/show_bug.cgi?id=1285#c2\" rel=\"noreferrer\">Bug 1285<\/a> for OpenSSH for more.)<\/li>\n<\/ol>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 42267,
            "reputation": 136069,
            "user_id": 123109,
            "user_type": "registered",
            "accept_rate": 55,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/157c96de3d125abc1c363ff25c20dfaf?s=256&d=identicon&r=PG",
            "display_name": "Greg Bacon",
            "link": "https:\/\/stackoverflow.com\/users\/123109\/greg-bacon"
        },
        "is_accepted": false,
        "score": 548,
        "last_activity_date": 1695914092,
        "last_edit_date": 1695914092.0,
        "creation_date": 1281625679,
        "answer_id": 3469155,
        "question_id": 3469080,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "# Summary\r\n\r\n* Use `\\h` to match horizontal whitespace, [in perl since v5.10.0][v5100] (released in 2007)\r\n* For non-[PCRE] engines, use a double-negative: `[^\\S\\r\\n]`\r\n* Unicode properties: `\\p{Blank}` or `\\p{HorizSpace}`\r\n* Be direct, in ASCII: `[\\t\\f\\cK ]`\r\n* Be direct, in Unicode (but don\u2019t, really)\r\n* Other applications of double-negatives and Unicode properties\r\n\r\n----------\r\n\r\n## Horizontal Whitespace\r\n\r\nThe [\u201cCharacter Classes and other Special Escapes\u201d section of perlre][ccesc] includes\r\n\r\n&gt; * `\\h` Horizontal whitespace\r\n&gt; * `\\H` Not horizontal whitespace\r\n\r\n[ccesc]: https:\/\/perldoc.perl.org\/perlre#Character-Classes-and-other-Special-Escapes\r\n[perluni]: https:\/\/perldoc.perl.org\/perlunicode#Other-Properties\r\n[v5100]: https:\/\/perldoc.perl.org\/perl5100delta#Vertical-and-horizontal-whitespace,-and-linebreak\r\n\r\n----------\r\n\r\n## Double-Negative\r\n\r\nIf you might use your pattern with other engines, particularly ones that are not [Perl-compatible][PCRE] or otherwise don\u2019t support `\\h`, express it as a double-negative:\r\n\r\n    [^\\S\\r\\n]\r\n\r\nThat is, not-not-whitespace (the capital `S` complements) or not-carriage-return or not-newline. Distributing the outer not (*i.e.*, the complementing `^` in the [bracketed character class]) with [De&amp;nbsp;Morgan\u2019s law][1], this is equivalent to subtracting `\\r` and `\\n` from `\\s`. Including both carriage return and newline in the pattern correctly handles all of Unix (LF), classic Mac OS (CR), and DOS-ish (CRLF) [newline conventions][nl].\r\n\r\n[nl]: https:\/\/en.wikipedia.org\/wiki\/Newline#Representation\r\n[PCRE]: http:\/\/www.pcre.org\/\r\n[bracketed character class]: https:\/\/perldoc.perl.org\/perlrecharclass#Bracketed-Character-Classes\r\n\r\nNo need to take my word for it:\r\n\r\n    #! \/usr\/bin\/env perl\r\n    \r\n    use strict;\r\n    use warnings;\r\n    \r\n    my $ws_not_crlf = qr\/[^\\S\\r\\n]\/;\r\n    \r\n    for (&#39; &#39;, &#39;\\f&#39;, &#39;\\t&#39;, &#39;\\r&#39;, &#39;\\n&#39;) {\r\n      my $qq = qq[&quot;$_&quot;];\r\n      printf &quot;%-4s =&gt; %s\\n&quot;, $qq,\r\n        (eval $qq) =~ $ws_not_crlf ? &quot;match&quot; : &quot;no match&quot;;\r\n    }\r\n\r\nOutput:\r\n\r\n&lt;pre&gt;&quot; &quot;  =&gt; match\r\n&quot;\\f&quot; =&gt; match\r\n&quot;\\t&quot; =&gt; match\r\n&quot;\\r&quot; =&gt; no match\r\n&quot;\\n&quot; =&gt; no match&lt;\/pre&gt;\r\n\r\nNote the exclusion of vertical tab, but this is [addressed in v5.18][vtws].\r\n\r\n[vtws]: http:\/\/search.cpan.org\/dist\/perl-5.18.0\/pod\/perldelta.pod#Vertical_tabs_are_now_whitespace\r\n\r\nBefore objecting too harshly, the Perl documentation uses the same technique. A footnote in the [\u201cWhitespace\u201d section of perlrecharclass][ws] reads\r\n\r\n&gt; Prior to Perl v5.18, `\\s` did not match the vertical tab. `[^\\S\\cK]` (obscurely) matches what `\\s` traditionally did.\r\n\r\n----------\r\n\r\n## Unicode Properties\r\n\r\nThe aforementioned [perlre documentation on `\\h` and `\\H`][ccesc] references the [perlunicode documentation][perluni] where we read about a family of useful Unicode properties.\r\n\r\n&gt; * `\\p{Blank}`\r\n&gt;   * This is the same as `\\h` and `\\p{HorizSpace}`: A character that changes the spacing horizontally.\r\n&gt; * `\\p{HorizSpace}`\r\n&gt;   * This is the same as `\\h` and `\\p{Blank}`: a character that changes the spacing horizontally.\r\n\r\n----------\r\n\r\n## The Direct Approach: ASCII Edition\r\n\r\nThe [\u201cWhitespace\u201d section of perlrecharclass][ws] also suggests other approaches that won\u2019t offend grammar instructors\u2019 opposition to double-negatives.\r\n\r\nSay what you want rather than what you don\u2019t.\r\n\r\nOutside locale and Unicode rules or when the [`\/a` or `\/aa` switch][aaa] is in effect, \u201c`\\s` matches `[\\t\\n\\f\\r ]` and, starting in Perl v5.18, the vertical tab, `\\cK`.\u201d\r\n\r\nTo match whitespace but not newlines (broadly), discard `\\r` and `\\n` to leave\r\n\r\n    [\\t\\f\\cK ]\r\n\r\n[aaa]: https:\/\/perldoc.perl.org\/perlre#\/a-(and-\/aa)\r\n\r\n----\r\n\r\n## The Direct Approach: Unicode Edition\r\n\r\nIf your text is Unicode, use code similar to the sub below to construct a pattern from the table in the [\u201cWhitespace\u201d section of perlrecharclass][ws].\r\n\r\n    sub ws_not_nl {\r\n      local($_) = &lt;&lt;&#39;EOTable&#39;;\r\n    0x0009        CHARACTER TABULATION   h s\r\n    0x000a              LINE FEED (LF)    vs\r\n    0x000b             LINE TABULATION    vs  [1]\r\n    0x000c              FORM FEED (FF)    vs\r\n    0x000d        CARRIAGE RETURN (CR)    vs\r\n    0x0020                       SPACE   h s\r\n    0x0085             NEXT LINE (NEL)    vs  [2]\r\n    0x00a0              NO-BREAK SPACE   h s  [2]\r\n    0x1680            OGHAM SPACE MARK   h s\r\n    0x2000                     EN QUAD   h s\r\n    0x2001                     EM QUAD   h s\r\n    0x2002                    EN SPACE   h s\r\n    0x2003                    EM SPACE   h s\r\n    0x2004          THREE-PER-EM SPACE   h s\r\n    0x2005           FOUR-PER-EM SPACE   h s\r\n    0x2006            SIX-PER-EM SPACE   h s\r\n    0x2007                FIGURE SPACE   h s\r\n    0x2008           PUNCTUATION SPACE   h s\r\n    0x2009                  THIN SPACE   h s\r\n    0x200a                  HAIR SPACE   h s\r\n    0x2028              LINE SEPARATOR    vs\r\n    0x2029         PARAGRAPH SEPARATOR    vs\r\n    0x202f       NARROW NO-BREAK SPACE   h s\r\n    0x205f   MEDIUM MATHEMATICAL SPACE   h s\r\n    0x3000           IDEOGRAPHIC SPACE   h s\r\n    EOTable\r\n    \r\n      my $class;\r\n      while (\/^0x([0-9a-f]{4})\\s+([A-Z\\s]+)\/mg) {\r\n        my($hex,$name) = ($1,$2);\r\n        next if $name =~ \/\\b(?:CR|NL|NEL|SEPARATOR)\\b\/;\r\n        $class .= &quot;\\\\N{U+$hex}&quot;;\r\n      }\r\n    \r\n      qr\/[$class]\/u;\r\n    }\r\n\r\nThis above is for completeness. Use the Unicode properties rather than writing it out longhand.\r\n \r\n----------\r\n\r\n## Other Applications\r\n\r\nThe double-negative trick is also handy for matching alphabetic characters too. Remember that `\\w` matches \u201cword characters,\u201d alphabetic characters *and* digits and underscore. We ugly-Americans sometimes want to write it as, say,\r\n\r\n    if (\/[A-Za-z]+\/) { ... }\r\n\r\nbut a double-negative character-class can respect the locale:\r\n\r\n    if (\/[^\\W\\d_]+\/) { ... }\r\n\r\nExpressing \u201ca word character but not digit or underscore\u201d this way is a bit opaque. A POSIX character-class communicates the intent more directly\r\n\r\n    if (\/[[:alpha:]]+\/) { ... }\r\n\r\nor with a Unicode property as [szbalint][2] suggested\r\n\r\n    if (\/\\p{Letter}+\/) { ... }\r\n\r\n[Pingui] asked about nesting the double-negative character class to effectively modify the `\\s` in\r\n\r\n    \/(\\+|0|\\()[\\d()\\s-]{6,20}\\d\/g\r\n\r\nThe [best I could come up with][tio] is to use `|` for an alternative and move the `\\s` to the other branch:\r\n\r\n    \/(\\+|0|\\()(?:[\\d()-]|[^\\S\\r\\n]){6,20}\\d\/g\r\n\r\n[1]: http:\/\/en.wikipedia.org\/wiki\/De_Morgan&#39;s_laws\r\n[2]: https:\/\/stackoverflow.com\/users\/415428\/szbalint\r\n[ws]: https:\/\/perldoc.perl.org\/perlrecharclass.html#Whitespace\r\n[Pingui]: https:\/\/stackoverflow.com\/users\/3253673\/pingui\r\n[tio]: https:\/\/tio.run\/##ZY7NCoJAFIX39yku6WIGE0f7WTT9EPQGtfNOQ6SZIIOMSovs2U0FN7X7OHyHc8rUFquua6oUq9rm91rCwK@bNbnJKgnQmCR9oBtIcDXucHs6Xo57CU5pc9Pb4LyeeZEiCxh5rWiJcRZTwjhVvnqv55H4UMKDjOMb\/k122Iyyr9r4SmeyZBT\/aSGOUziL3VDFbqTIzCR8ALQevmgNHjIQ4IXRYrlaT4AT8Al8AaLf5GyAMQHRdV8",
        "body": "<h1>Summary<\/h1>\n<ul>\n<li>Use <code>\\h<\/code> to match horizontal whitespace, <a href=\"https:\/\/perldoc.perl.org\/perl5100delta#Vertical-and-horizontal-whitespace,-and-linebreak\" rel=\"noreferrer\">in perl since v5.10.0<\/a> (released in 2007)<\/li>\n<li>For non-<a href=\"http:\/\/www.pcre.org\/\" rel=\"noreferrer\">PCRE<\/a> engines, use a double-negative: <code>[^\\S\\r\\n]<\/code><\/li>\n<li>Unicode properties: <code>\\p{Blank}<\/code> or <code>\\p{HorizSpace}<\/code><\/li>\n<li>Be direct, in ASCII: <code>[\\t\\f\\cK ]<\/code><\/li>\n<li>Be direct, in Unicode (but don\u2019t, really)<\/li>\n<li>Other applications of double-negatives and Unicode properties<\/li>\n<\/ul>\n<hr \/>\n<h2>Horizontal Whitespace<\/h2>\n<p>The <a href=\"https:\/\/perldoc.perl.org\/perlre#Character-Classes-and-other-Special-Escapes\" rel=\"noreferrer\">\u201cCharacter Classes and other Special Escapes\u201d section of perlre<\/a> includes<\/p>\n<blockquote>\n<ul>\n<li><code>\\h<\/code> Horizontal whitespace<\/li>\n<li><code>\\H<\/code> Not horizontal whitespace<\/li>\n<\/ul>\n<\/blockquote>\n<hr \/>\n<h2>Double-Negative<\/h2>\n<p>If you might use your pattern with other engines, particularly ones that are not <a href=\"http:\/\/www.pcre.org\/\" rel=\"noreferrer\">Perl-compatible<\/a> or otherwise don\u2019t support <code>\\h<\/code>, express it as a double-negative:<\/p>\n<pre><code>[^\\S\\r\\n]\n<\/code><\/pre>\n<p>That is, not-not-whitespace (the capital <code>S<\/code> complements) or not-carriage-return or not-newline. Distributing the outer not (<em>i.e.<\/em>, the complementing <code>^<\/code> in the <a href=\"https:\/\/perldoc.perl.org\/perlrecharclass#Bracketed-Character-Classes\" rel=\"noreferrer\">bracketed character class<\/a>) with <a href=\"http:\/\/en.wikipedia.org\/wiki\/De_Morgan%27s_laws\" rel=\"noreferrer\">De\u00a0Morgan\u2019s law<\/a>, this is equivalent to subtracting <code>\\r<\/code> and <code>\\n<\/code> from <code>\\s<\/code>. Including both carriage return and newline in the pattern correctly handles all of Unix (LF), classic Mac OS (CR), and DOS-ish (CRLF) <a href=\"https:\/\/en.wikipedia.org\/wiki\/Newline#Representation\" rel=\"noreferrer\">newline conventions<\/a>.<\/p>\n<p>No need to take my word for it:<\/p>\n<pre><code>#! \/usr\/bin\/env perl\n\nuse strict;\nuse warnings;\n\nmy $ws_not_crlf = qr\/[^\\S\\r\\n]\/;\n\nfor (' ', '\\f', '\\t', '\\r', '\\n') {\n  my $qq = qq[&quot;$_&quot;];\n  printf &quot;%-4s =&gt; %s\\n&quot;, $qq,\n    (eval $qq) =~ $ws_not_crlf ? &quot;match&quot; : &quot;no match&quot;;\n}\n<\/code><\/pre>\n<p>Output:<\/p>\n<pre>\" \"  => match\n\"\\f\" => match\n\"\\t\" => match\n\"\\r\" => no match\n\"\\n\" => no match<\/pre>\n<p>Note the exclusion of vertical tab, but this is <a href=\"http:\/\/search.cpan.org\/dist\/perl-5.18.0\/pod\/perldelta.pod#Vertical_tabs_are_now_whitespace\" rel=\"noreferrer\">addressed in v5.18<\/a>.<\/p>\n<p>Before objecting too harshly, the Perl documentation uses the same technique. A footnote in the <a href=\"https:\/\/perldoc.perl.org\/perlrecharclass.html#Whitespace\" rel=\"noreferrer\">\u201cWhitespace\u201d section of perlrecharclass<\/a> reads<\/p>\n<blockquote>\n<p>Prior to Perl v5.18, <code>\\s<\/code> did not match the vertical tab. <code>[^\\S\\cK]<\/code> (obscurely) matches what <code>\\s<\/code> traditionally did.<\/p>\n<\/blockquote>\n<hr \/>\n<h2>Unicode Properties<\/h2>\n<p>The aforementioned <a href=\"https:\/\/perldoc.perl.org\/perlre#Character-Classes-and-other-Special-Escapes\" rel=\"noreferrer\">perlre documentation on <code>\\h<\/code> and <code>\\H<\/code><\/a> references the <a href=\"https:\/\/perldoc.perl.org\/perlunicode#Other-Properties\" rel=\"noreferrer\">perlunicode documentation<\/a> where we read about a family of useful Unicode properties.<\/p>\n<blockquote>\n<ul>\n<li><code>\\p{Blank}<\/code>\n<ul>\n<li>This is the same as <code>\\h<\/code> and <code>\\p{HorizSpace}<\/code>: A character that changes the spacing horizontally.<\/li>\n<\/ul>\n<\/li>\n<li><code>\\p{HorizSpace}<\/code>\n<ul>\n<li>This is the same as <code>\\h<\/code> and <code>\\p{Blank}<\/code>: a character that changes the spacing horizontally.<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<\/blockquote>\n<hr \/>\n<h2>The Direct Approach: ASCII Edition<\/h2>\n<p>The <a href=\"https:\/\/perldoc.perl.org\/perlrecharclass.html#Whitespace\" rel=\"noreferrer\">\u201cWhitespace\u201d section of perlrecharclass<\/a> also suggests other approaches that won\u2019t offend grammar instructors\u2019 opposition to double-negatives.<\/p>\n<p>Say what you want rather than what you don\u2019t.<\/p>\n<p>Outside locale and Unicode rules or when the <a href=\"https:\/\/perldoc.perl.org\/perlre#\/a-(and-\/aa)\" rel=\"noreferrer\"><code>\/a<\/code> or <code>\/aa<\/code> switch<\/a> is in effect, \u201c<code>\\s<\/code> matches <code>[\\t\\n\\f\\r ]<\/code> and, starting in Perl v5.18, the vertical tab, <code>\\cK<\/code>.\u201d<\/p>\n<p>To match whitespace but not newlines (broadly), discard <code>\\r<\/code> and <code>\\n<\/code> to leave<\/p>\n<pre><code>[\\t\\f\\cK ]\n<\/code><\/pre>\n<hr \/>\n<h2>The Direct Approach: Unicode Edition<\/h2>\n<p>If your text is Unicode, use code similar to the sub below to construct a pattern from the table in the <a href=\"https:\/\/perldoc.perl.org\/perlrecharclass.html#Whitespace\" rel=\"noreferrer\">\u201cWhitespace\u201d section of perlrecharclass<\/a>.<\/p>\n<pre><code>sub ws_not_nl {\n  local($_) = &lt;&lt;'EOTable';\n0x0009        CHARACTER TABULATION   h s\n0x000a              LINE FEED (LF)    vs\n0x000b             LINE TABULATION    vs  [1]\n0x000c              FORM FEED (FF)    vs\n0x000d        CARRIAGE RETURN (CR)    vs\n0x0020                       SPACE   h s\n0x0085             NEXT LINE (NEL)    vs  [2]\n0x00a0              NO-BREAK SPACE   h s  [2]\n0x1680            OGHAM SPACE MARK   h s\n0x2000                     EN QUAD   h s\n0x2001                     EM QUAD   h s\n0x2002                    EN SPACE   h s\n0x2003                    EM SPACE   h s\n0x2004          THREE-PER-EM SPACE   h s\n0x2005           FOUR-PER-EM SPACE   h s\n0x2006            SIX-PER-EM SPACE   h s\n0x2007                FIGURE SPACE   h s\n0x2008           PUNCTUATION SPACE   h s\n0x2009                  THIN SPACE   h s\n0x200a                  HAIR SPACE   h s\n0x2028              LINE SEPARATOR    vs\n0x2029         PARAGRAPH SEPARATOR    vs\n0x202f       NARROW NO-BREAK SPACE   h s\n0x205f   MEDIUM MATHEMATICAL SPACE   h s\n0x3000           IDEOGRAPHIC SPACE   h s\nEOTable\n\n  my $class;\n  while (\/^0x([0-9a-f]{4})\\s+([A-Z\\s]+)\/mg) {\n    my($hex,$name) = ($1,$2);\n    next if $name =~ \/\\b(?:CR|NL|NEL|SEPARATOR)\\b\/;\n    $class .= &quot;\\\\N{U+$hex}&quot;;\n  }\n\n  qr\/[$class]\/u;\n}\n<\/code><\/pre>\n<p>This above is for completeness. Use the Unicode properties rather than writing it out longhand.<\/p>\n<hr \/>\n<h2>Other Applications<\/h2>\n<p>The double-negative trick is also handy for matching alphabetic characters too. Remember that <code>\\w<\/code> matches \u201cword characters,\u201d alphabetic characters <em>and<\/em> digits and underscore. We ugly-Americans sometimes want to write it as, say,<\/p>\n<pre><code>if (\/[A-Za-z]+\/) { ... }\n<\/code><\/pre>\n<p>but a double-negative character-class can respect the locale:<\/p>\n<pre><code>if (\/[^\\W\\d_]+\/) { ... }\n<\/code><\/pre>\n<p>Expressing \u201ca word character but not digit or underscore\u201d this way is a bit opaque. A POSIX character-class communicates the intent more directly<\/p>\n<pre><code>if (\/[[:alpha:]]+\/) { ... }\n<\/code><\/pre>\n<p>or with a Unicode property as <a href=\"https:\/\/stackoverflow.com\/users\/415428\/szbalint\">szbalint<\/a> suggested<\/p>\n<pre><code>if (\/\\p{Letter}+\/) { ... }\n<\/code><\/pre>\n<p><a href=\"https:\/\/stackoverflow.com\/users\/3253673\/pingui\">Pingui<\/a> asked about nesting the double-negative character class to effectively modify the <code>\\s<\/code> in<\/p>\n<pre><code>\/(\\+|0|\\()[\\d()\\s-]{6,20}\\d\/g\n<\/code><\/pre>\n<p>The <a href=\"https:\/\/tio.run\/##ZY7NCoJAFIX39yku6WIGE0f7WTT9EPQGtfNOQ6SZIIOMSovs2U0FN7X7OHyHc8rUFquua6oUq9rm91rCwK@bNbnJKgnQmCR9oBtIcDXucHs6Xo57CU5pc9Pb4LyeeZEiCxh5rWiJcRZTwjhVvnqv55H4UMKDjOMb\/k122Iyyr9r4SmeyZBT\/aSGOUziL3VDFbqTIzCR8ALQevmgNHjIQ4IXRYrlaT4AT8Al8AaLf5GyAMQHRdV8\" rel=\"noreferrer\">best I could come up with<\/a> is to use <code>|<\/code> for an alternative and move the <code>\\s<\/code> to the other branch:<\/p>\n<pre><code>\/(\\+|0|\\()(?:[\\d()-]|[^\\S\\r\\n]){6,20}\\d\/g\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2172,
            "reputation": 365278,
            "user_id": 2988,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/ed181f8c80df53d2b67a4f4fff088ed4?s=256&d=identicon&r=PG",
            "display_name": "J&#246;rg W Mittag",
            "link": "https:\/\/stackoverflow.com\/users\/2988\/j%c3%b6rg-w-mittag"
        },
        "is_accepted": true,
        "score": 482,
        "last_activity_date": 1368205072,
        "last_edit_date": 1368205072.0,
        "creation_date": 1283559983,
        "answer_id": 3640403,
        "question_id": 3637668,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "There are a couple of differences that I can think of; just thoughtstreaming here, in no particular order:\r\n\r\n1. Python &amp; Co. are designed to be good at scripting. Bash &amp; Co. are designed to be *only* good at scripting, with absolutely no compromise. IOW: Python is designed to be good both at scripting and non-scripting, Bash cares only about scripting.\r\n\r\n2. Bash &amp; Co. are untyped, Python &amp; Co. are strongly typed, which means that the number `123`, the string `123` and the file `123` are quite different. They are, however, not *statically* typed, which means they need to have different literals for those, in order to keep them apart.  \r\nExample:\r\n\r\n                        | Ruby             | Bash    \r\n        -----------------------------------------\r\n        number          | 123              | 123\r\n        string          | &#39;123&#39;            | 123\r\n        regexp          | \/123\/            | 123\r\n        file            | File.open(&#39;123&#39;) | 123\r\n        file descriptor | IO.open(&#39;123&#39;)   | 123\r\n        URI             | URI.parse(&#39;123&#39;) | 123\r\n        command         | `123`            | 123\r\n\r\n3. Python &amp; Co. are designed to scale *up* to 10000, 100000, maybe even 1000000 line programs, Bash &amp; Co. are designed to scale *down* to 10 *character* programs.\r\n\r\n4. In Bash &amp; Co., files, directories, file descriptors, processes are all first-class objects, in Python, only Python objects are first-class, if you want to manipulate files, directories etc., you have to wrap them in a Python object first.\r\n\r\n5. Shell programming is basically dataflow programming. Nobody realizes that, not even the people who write shells, but it turns out that shells are quite good at that, and general-purpose languages not so much. In the general-purpose programming world, dataflow seems to be mostly viewed as a concurrency model, not so much as a programming paradigm.\r\n\r\nI have the feeling that trying to address these points by bolting features or DSLs onto a general-purpose programming language doesn&#39;t work. At least, I have yet to see a convincing implementation of it. There is **RuSH** (Ruby shell), which tries to implement a shell in Ruby, there is [**rush**][1], which is an internal DSL for shell programming in Ruby, there is [**Hotwire**][2], which is a Python shell, but IMO none of those come even close to competing with Bash, Zsh, fish and friends.\r\n\r\nActually, IMHO, the best current shell is [**Microsoft PowerShell**][3], which is very surprising considering that for several *decades* now, Microsoft has continually had the *worst* shells *evar*. I mean, `COMMAND.COM`? Really? (Unfortunately, they still have a crappy terminal. It&#39;s still the &quot;command prompt&quot; that has been around since, what? Windows 3.0?)\r\n\r\nPowerShell was basically created by ignoring everything Microsoft has ever done (`COMMAND.COM`, `CMD.EXE`, VBScript, JScript) and instead starting from the Unix shell, then removing all backwards-compatibility cruft (like backticks for command substitution) and massaging it a bit to make it more Windows-friendly (like using the now unused backtick as an escape character instead of the backslash which is the path component separator character in Windows). After that, is when the magic happens.\r\n\r\nThey address **problem 1 and 3** from above, by basically making the opposite choice compared to Python. Python cares about large programs first, scripting second. Bash cares only about scripting. PowerShell cares about scripting first, large programs second. A defining moment for me was watching a video of an interview with Jeffrey Snover (PowerShell&#39;s lead designer), when the interviewer asked him how big of a program one could write with PowerShell and Snover answered without missing a beat: &quot;80 characters.&quot; At that moment I realized that this is *finally* a guy at Microsoft who &quot;gets&quot; shell programming (probably related to the fact that PowerShell was *neither* developed by Microsoft&#39;s programming language group (i.e. lambda-calculus math nerds) nor the OS group (kernel nerds) but rather the server group (i.e. sysadmins who actually *use* shells)), and that I should probably take a serious look at PowerShell.\r\n\r\n**Number 2** is solved by having arguments be statically typed. So, you can write just `123` and PowerShell knows whether it is a string or a number or a file, because the cmdlet (which is what shell commands are called in PowerShell) declares the types of its arguments to the shell. This has pretty deep ramifications: unlike Unix, where each command is responsible for parsing its own arguments (the shell basically passes the arguments as an array of strings), argument parsing in PowerShell is done by the *shell*. The cmdlets specify all their options and flags and arguments, as well as their types and names and documentation(!) to the shell, which then can perform argument parsing, tab completion, IntelliSense, inline documentation popups etc. in one centralized place. (This is not revolutionary, and the PowerShell designers acknowledge shells like the DIGITAL Command Language (DCL) and the IBM OS\/400 Command Language (CL) as prior art. For anyone who has ever used an AS\/400, this should sound familiar. In OS\/400, you can write a shell command and if you don&#39;t know the syntax of certain arguments, you can simply leave them out and hit &lt;kbd&gt;F4&lt;\/kbd&gt;, which will bring a menu (similar to an HTML form) with labelled fields, dropdown, help texts etc. This is only possible because the OS knows about all the possible arguments and their types.) In the Unix shell, this information is often duplicated three times: in the argument parsing code in the command itself, in the `bash-completion` script for tab-completion and in the manpage.\r\n\r\n**Number 4** is solved by the fact that PowerShell operates on strongly typed objects, which includes stuff like files, processes, folders and so on.\r\n\r\n**Number 5** is particularly interesting, because PowerShell is the only shell I know of, where the people who wrote it were actually *aware* of the fact that shells are essentially dataflow engines and deliberately implemented it as a dataflow engine.\r\n\r\nAnother nice thing about PowerShell are the naming conventions: all cmdlets are named `Action-Object` and moreover, there are also standardized names for specific actions and specific objects. (Again, this should sound familar to OS\/400 users.) For example, everything which is related to receiving some information is called `Get-Foo`. And everything operating on (sub-)objects is called `Bar-ChildItem`. So, the equivalent to `ls` is `Get-ChildItem` (although PowerShell also provides builtin aliases `ls` and `dir`&amp;nbsp;&amp;ndash; in fact, whenever it makes sense, they provide both Unix and `CMD.EXE` aliases as well as abbreviations (`gci` in this case)).\r\n\r\nBut the **killer feature** IMO is the strongly typed object pipelines. While PowerShell is derived from the Unix shell, there is one very important distinction: in Unix, all communication (both via pipes and redirections as well as via command arguments) is done with untyped, unstructured strings. In PowerShell, it&#39;s all strongly typed, structured objects. This is so incredibly powerful that I seriously wonder why noone else has thought of it. (Well, they have, but they never became popular.) In my shell scripts, I estimate that up to one third of the commands is only there to act as an adapter between two other commands that don&#39;t agree on a common textual format. Many of those adapters go away in PowerShell, because the cmdlets exchange structured objects instead of unstructured text. And if you look *inside* the commands, then they pretty much consist of three stages: parse the textual input into an internal object representation, manipulate the objects, convert them back into text. Again, the first and third stage basically go away, because the data already comes in as objects.\r\n\r\nHowever, the designers have taken great care to preserve the dynamicity and flexibility of shell scripting through what they call an *Adaptive Type System*. \r\n\r\nAnyway, I don&#39;t want to turn this into a PowerShell commercial. There are plenty of things that are *not* so great about PowerShell, although most of those have to do either with Windows or with the specific implementation, and not so much with the concepts. (E.g. the fact that it is implemented in .NET means that the very first time you start up the shell can take up to several seconds if the .NET framework is not already in the filesystem cache due to some other application that needs it. Considering that you often use the shell for well under a second, that is completely unacceptable.)\r\n\r\nThe most important point I want to make is that if you want to look at existing work in scripting languages and shells, **you shouldn&#39;t stop at Unix and the Ruby\/Python\/Perl\/PHP family**. For example, [Tcl][4] was already mentioned. [Rexx][5] would be another scripting language. [Emacs Lisp][6] would be yet another. And in the shell realm there are some of the already mentioned mainframe\/midrange shells such as the OS\/400 command line and DCL. Also, Plan9&#39;s rc.\r\n\r\n\r\n  [1]: http:\/\/rush.heroku.com\/\r\n  [2]: http:\/\/code.google.com\/p\/hotwire-shell\/\r\n  [3]: http:\/\/msdn.microsoft.com\/en-us\/library\/windows\/desktop\/dd835506%28v=vs.85%29.aspx\r\n  [4]: http:\/\/www.tcl.tk\/\r\n  [5]: http:\/\/en.wikipedia.org\/wiki\/REXX\r\n  [6]: http:\/\/www.gnu.org\/software\/emacs\/emacs.html\r\n",
        "body": "<p>There are a couple of differences that I can think of; just thoughtstreaming here, in no particular order:<\/p>\n\n<ol>\n<li><p>Python &amp; Co. are designed to be good at scripting. Bash &amp; Co. are designed to be <em>only<\/em> good at scripting, with absolutely no compromise. IOW: Python is designed to be good both at scripting and non-scripting, Bash cares only about scripting.<\/p><\/li>\n<li><p>Bash &amp; Co. are untyped, Python &amp; Co. are strongly typed, which means that the number <code>123<\/code>, the string <code>123<\/code> and the file <code>123<\/code> are quite different. They are, however, not <em>statically<\/em> typed, which means they need to have different literals for those, in order to keep them apart.<br>\nExample:<\/p>\n\n<pre><code>                | Ruby             | Bash    \n-----------------------------------------\nnumber          | 123              | 123\nstring          | '123'            | 123\nregexp          | \/123\/            | 123\nfile            | File.open('123') | 123\nfile descriptor | IO.open('123')   | 123\nURI             | URI.parse('123') | 123\ncommand         | `123`            | 123\n<\/code><\/pre><\/li>\n<li><p>Python &amp; Co. are designed to scale <em>up<\/em> to 10000, 100000, maybe even 1000000 line programs, Bash &amp; Co. are designed to scale <em>down<\/em> to 10 <em>character<\/em> programs.<\/p><\/li>\n<li><p>In Bash &amp; Co., files, directories, file descriptors, processes are all first-class objects, in Python, only Python objects are first-class, if you want to manipulate files, directories etc., you have to wrap them in a Python object first.<\/p><\/li>\n<li><p>Shell programming is basically dataflow programming. Nobody realizes that, not even the people who write shells, but it turns out that shells are quite good at that, and general-purpose languages not so much. In the general-purpose programming world, dataflow seems to be mostly viewed as a concurrency model, not so much as a programming paradigm.<\/p><\/li>\n<\/ol>\n\n<p>I have the feeling that trying to address these points by bolting features or DSLs onto a general-purpose programming language doesn't work. At least, I have yet to see a convincing implementation of it. There is <strong>RuSH<\/strong> (Ruby shell), which tries to implement a shell in Ruby, there is <a href=\"http:\/\/rush.heroku.com\/\" rel=\"noreferrer\"><strong>rush<\/strong><\/a>, which is an internal DSL for shell programming in Ruby, there is <a href=\"http:\/\/code.google.com\/p\/hotwire-shell\/\" rel=\"noreferrer\"><strong>Hotwire<\/strong><\/a>, which is a Python shell, but IMO none of those come even close to competing with Bash, Zsh, fish and friends.<\/p>\n\n<p>Actually, IMHO, the best current shell is <a href=\"http:\/\/msdn.microsoft.com\/en-us\/library\/windows\/desktop\/dd835506%28v=vs.85%29.aspx\" rel=\"noreferrer\"><strong>Microsoft PowerShell<\/strong><\/a>, which is very surprising considering that for several <em>decades<\/em> now, Microsoft has continually had the <em>worst<\/em> shells <em>evar<\/em>. I mean, <code>COMMAND.COM<\/code>? Really? (Unfortunately, they still have a crappy terminal. It's still the \"command prompt\" that has been around since, what? Windows 3.0?)<\/p>\n\n<p>PowerShell was basically created by ignoring everything Microsoft has ever done (<code>COMMAND.COM<\/code>, <code>CMD.EXE<\/code>, VBScript, JScript) and instead starting from the Unix shell, then removing all backwards-compatibility cruft (like backticks for command substitution) and massaging it a bit to make it more Windows-friendly (like using the now unused backtick as an escape character instead of the backslash which is the path component separator character in Windows). After that, is when the magic happens.<\/p>\n\n<p>They address <strong>problem 1 and 3<\/strong> from above, by basically making the opposite choice compared to Python. Python cares about large programs first, scripting second. Bash cares only about scripting. PowerShell cares about scripting first, large programs second. A defining moment for me was watching a video of an interview with Jeffrey Snover (PowerShell's lead designer), when the interviewer asked him how big of a program one could write with PowerShell and Snover answered without missing a beat: \"80 characters.\" At that moment I realized that this is <em>finally<\/em> a guy at Microsoft who \"gets\" shell programming (probably related to the fact that PowerShell was <em>neither<\/em> developed by Microsoft's programming language group (i.e. lambda-calculus math nerds) nor the OS group (kernel nerds) but rather the server group (i.e. sysadmins who actually <em>use<\/em> shells)), and that I should probably take a serious look at PowerShell.<\/p>\n\n<p><strong>Number 2<\/strong> is solved by having arguments be statically typed. So, you can write just <code>123<\/code> and PowerShell knows whether it is a string or a number or a file, because the cmdlet (which is what shell commands are called in PowerShell) declares the types of its arguments to the shell. This has pretty deep ramifications: unlike Unix, where each command is responsible for parsing its own arguments (the shell basically passes the arguments as an array of strings), argument parsing in PowerShell is done by the <em>shell<\/em>. The cmdlets specify all their options and flags and arguments, as well as their types and names and documentation(!) to the shell, which then can perform argument parsing, tab completion, IntelliSense, inline documentation popups etc. in one centralized place. (This is not revolutionary, and the PowerShell designers acknowledge shells like the DIGITAL Command Language (DCL) and the IBM OS\/400 Command Language (CL) as prior art. For anyone who has ever used an AS\/400, this should sound familiar. In OS\/400, you can write a shell command and if you don't know the syntax of certain arguments, you can simply leave them out and hit <kbd>F4<\/kbd>, which will bring a menu (similar to an HTML form) with labelled fields, dropdown, help texts etc. This is only possible because the OS knows about all the possible arguments and their types.) In the Unix shell, this information is often duplicated three times: in the argument parsing code in the command itself, in the <code>bash-completion<\/code> script for tab-completion and in the manpage.<\/p>\n\n<p><strong>Number 4<\/strong> is solved by the fact that PowerShell operates on strongly typed objects, which includes stuff like files, processes, folders and so on.<\/p>\n\n<p><strong>Number 5<\/strong> is particularly interesting, because PowerShell is the only shell I know of, where the people who wrote it were actually <em>aware<\/em> of the fact that shells are essentially dataflow engines and deliberately implemented it as a dataflow engine.<\/p>\n\n<p>Another nice thing about PowerShell are the naming conventions: all cmdlets are named <code>Action-Object<\/code> and moreover, there are also standardized names for specific actions and specific objects. (Again, this should sound familar to OS\/400 users.) For example, everything which is related to receiving some information is called <code>Get-Foo<\/code>. And everything operating on (sub-)objects is called <code>Bar-ChildItem<\/code>. So, the equivalent to <code>ls<\/code> is <code>Get-ChildItem<\/code> (although PowerShell also provides builtin aliases <code>ls<\/code> and <code>dir<\/code>&nbsp;&ndash; in fact, whenever it makes sense, they provide both Unix and <code>CMD.EXE<\/code> aliases as well as abbreviations (<code>gci<\/code> in this case)).<\/p>\n\n<p>But the <strong>killer feature<\/strong> IMO is the strongly typed object pipelines. While PowerShell is derived from the Unix shell, there is one very important distinction: in Unix, all communication (both via pipes and redirections as well as via command arguments) is done with untyped, unstructured strings. In PowerShell, it's all strongly typed, structured objects. This is so incredibly powerful that I seriously wonder why noone else has thought of it. (Well, they have, but they never became popular.) In my shell scripts, I estimate that up to one third of the commands is only there to act as an adapter between two other commands that don't agree on a common textual format. Many of those adapters go away in PowerShell, because the cmdlets exchange structured objects instead of unstructured text. And if you look <em>inside<\/em> the commands, then they pretty much consist of three stages: parse the textual input into an internal object representation, manipulate the objects, convert them back into text. Again, the first and third stage basically go away, because the data already comes in as objects.<\/p>\n\n<p>However, the designers have taken great care to preserve the dynamicity and flexibility of shell scripting through what they call an <em>Adaptive Type System<\/em>. <\/p>\n\n<p>Anyway, I don't want to turn this into a PowerShell commercial. There are plenty of things that are <em>not<\/em> so great about PowerShell, although most of those have to do either with Windows or with the specific implementation, and not so much with the concepts. (E.g. the fact that it is implemented in .NET means that the very first time you start up the shell can take up to several seconds if the .NET framework is not already in the filesystem cache due to some other application that needs it. Considering that you often use the shell for well under a second, that is completely unacceptable.)<\/p>\n\n<p>The most important point I want to make is that if you want to look at existing work in scripting languages and shells, <strong>you shouldn't stop at Unix and the Ruby\/Python\/Perl\/PHP family<\/strong>. For example, <a href=\"http:\/\/www.tcl.tk\/\" rel=\"noreferrer\">Tcl<\/a> was already mentioned. <a href=\"http:\/\/en.wikipedia.org\/wiki\/REXX\" rel=\"noreferrer\">Rexx<\/a> would be another scripting language. <a href=\"http:\/\/www.gnu.org\/software\/emacs\/emacs.html\" rel=\"noreferrer\">Emacs Lisp<\/a> would be yet another. And in the shell realm there are some of the already mentioned mainframe\/midrange shells such as the OS\/400 command line and DCL. Also, Plan9's rc.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 11221,
            "reputation": 23876,
            "user_id": 21539,
            "user_type": "registered",
            "accept_rate": 93,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/d620c3ccb17934ab778e66839a7168af?s=256&d=identicon&r=PG",
            "display_name": "Zain Rizvi",
            "link": "https:\/\/stackoverflow.com\/users\/21539\/zain-rizvi"
        },
        "is_accepted": true,
        "score": 475,
        "last_activity_date": 1685014838,
        "last_edit_date": 1685014838.0,
        "creation_date": 1227126228,
        "answer_id": 303231,
        "question_id": 303216,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Oh, I found it.  You use [last][1] instead of [break][2]\r\n\r\n    for my $entry (@array){\r\n        if ($string eq &quot;text&quot;){\r\n             last;\r\n        }\r\n    }\r\n\r\nIt&#39;s also described under **Loop Control** in &quot;perlsyn(1)&quot; (`man perlsyn` on UNIX-like).\r\n\r\n  [1]: http:\/\/perldoc.perl.org\/functions\/last.html\r\n  [2]: https:\/\/perldoc.perl.org\/functions\/break.html",
        "body": "<p>Oh, I found it.  You use <a href=\"http:\/\/perldoc.perl.org\/functions\/last.html\" rel=\"nofollow noreferrer\">last<\/a> instead of <a href=\"https:\/\/perldoc.perl.org\/functions\/break.html\" rel=\"nofollow noreferrer\">break<\/a><\/p>\n<pre><code>for my $entry (@array){\n    if ($string eq &quot;text&quot;){\n         last;\n    }\n}\n<\/code><\/pre>\n<p>It's also described under <strong>Loop Control<\/strong> in &quot;perlsyn(1)&quot; (<code>man perlsyn<\/code> on UNIX-like).<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 10864,
            "reputation": 200163,
            "user_id": 20713,
            "user_type": "registered",
            "accept_rate": 80,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/09b9758a4a83cc25547eb93891f19df7?s=256&d=identicon&r=PG",
            "display_name": "ephemient",
            "link": "https:\/\/stackoverflow.com\/users\/20713\/ephemient"
        },
        "is_accepted": false,
        "score": 461,
        "last_activity_date": 1591033193,
        "last_edit_date": 1591033193.0,
        "creation_date": 1322520798,
        "answer_id": 8303552,
        "question_id": 8303488,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "If you don&#39;t want add the `\/s` regex modifier (perhaps you still want `.` to retain its original meaning elsewhere in the regex), you may also use a character class.  One possibility:\r\n\r\n    [\\S\\s]\r\n\r\na character which is not a space or is a space. In other words, any character.\r\n\r\nYou can also change modifiers locally in a small part of the regex, like so:\r\n\r\n    (?s:.)",
        "body": "<p>If you don't want add the <code>\/s<\/code> regex modifier (perhaps you still want <code>.<\/code> to retain its original meaning elsewhere in the regex), you may also use a character class.  One possibility:<\/p>\n\n<pre><code>[\\S\\s]\n<\/code><\/pre>\n\n<p>a character which is not a space or is a space. In other words, any character.<\/p>\n\n<p>You can also change modifiers locally in a small part of the regex, like so:<\/p>\n\n<pre><code>(?s:.)\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 17732,
            "reputation": 133614,
            "user_id": 40005,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/9430c2f290372174f5c818a318e14ed8?s=256&d=identicon&r=PG",
            "display_name": "Ayman Hourieh",
            "link": "https:\/\/stackoverflow.com\/users\/40005\/ayman-hourieh"
        },
        "is_accepted": false,
        "score": 460,
        "last_activity_date": 1272065995,
        "last_edit_date": null,
        "creation_date": 1272065995,
        "answer_id": 2702577,
        "question_id": 2702564,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "You can use awk:\r\n\r\n    awk &#39;{ sum += $1 } END { print sum }&#39; file",
        "body": "<p>You can use awk:<\/p>\n\n<pre><code>awk '{ sum += $1 } END { print sum }' file\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4877,
            "reputation": 16235,
            "user_id": 7548,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/8dbf61180e3e86ac1620fa9753eafab6?s=256&d=identicon&r=PG",
            "display_name": "Daniel Papasian",
            "link": "https:\/\/stackoverflow.com\/users\/7548\/daniel-papasian"
        },
        "is_accepted": true,
        "score": 343,
        "last_activity_date": 1685013968,
        "last_edit_date": 1685013968.0,
        "creation_date": 1221579533,
        "answer_id": 73703,
        "question_id": 73667,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "You can use the perl debugger on a trivial program, like so:\r\n\r\n    perl -de1\r\n\r\nThis command will start the Perl debugger (`-d`) on expression `1` (`-e1`), because the debugger wants something to debug (usually a file containing Perl code).\r\nThe command could be written as `perl -d -e 1` as well.\r\n\r\nAlternatively there&#39;s [*Alexis Sukrieh*&#39;s Perl Console][perlconsole] application, but I haven&#39;t used it.\r\n\r\n\r\n[perlconsole]: http:\/\/search.cpan.org\/~sukria\/perlconsole-0.4\/perlconsole",
        "body": "<p>You can use the perl debugger on a trivial program, like so:<\/p>\n<pre><code>perl -de1\n<\/code><\/pre>\n<p>This command will start the Perl debugger (<code>-d<\/code>) on expression <code>1<\/code> (<code>-e1<\/code>), because the debugger wants something to debug (usually a file containing Perl code).\nThe command could be written as <code>perl -d -e 1<\/code> as well.<\/p>\n<p>Alternatively there's <a href=\"http:\/\/search.cpan.org\/%7Esukria\/perlconsole-0.4\/perlconsole\" rel=\"nofollow noreferrer\"><em>Alexis Sukrieh<\/em>'s Perl Console<\/a> application, but I haven't used it.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 25722,
            "reputation": 73090,
            "user_id": 66353,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/b56a740041997df881354ef8c97496d7?s=256&d=identicon&r=PG",
            "display_name": "Alan Haggai Alavi",
            "link": "https:\/\/stackoverflow.com\/users\/66353\/alan-haggai-alavi"
        },
        "is_accepted": true,
        "score": 305,
        "last_activity_date": 1698943665,
        "last_edit_date": 1698943665.0,
        "creation_date": 1245816616,
        "answer_id": 1036353,
        "question_id": 1036347,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "**Truth and Falsehood** in `man perlsyn` explains:\r\n&gt; The number 0, the strings &#39;0&#39; and &quot;&quot;, the empty list &quot;()&quot;, and &quot;undef&quot; are all false in a boolean context.  All other values are true.\r\n \r\nIn Perl, the following evaluate to false in conditionals:\r\n\r\n    0\r\n    &#39;0&#39;\r\n    undef\r\n    &#39;&#39;  # Empty scalar\r\n    ()  # Empty list\r\n    (&#39;&#39;)\r\n\r\nThe rest are true. There are no barewords for `true` or `false`. (Note: Perl v5.38 introduced `true` and `false` through the new [builtin](https:\/\/perldoc.perl.org\/builtin) pragma).",
        "body": "<p><strong>Truth and Falsehood<\/strong> in <code>man perlsyn<\/code> explains:<\/p>\n<blockquote>\n<p>The number 0, the strings '0' and &quot;&quot;, the empty list &quot;()&quot;, and &quot;undef&quot; are all false in a boolean context.  All other values are true.<\/p>\n<\/blockquote>\n<p>In Perl, the following evaluate to false in conditionals:<\/p>\n<pre><code>0\n'0'\nundef\n''  # Empty scalar\n()  # Empty list\n('')\n<\/code><\/pre>\n<p>The rest are true. There are no barewords for <code>true<\/code> or <code>false<\/code>. (Note: Perl v5.38 introduced <code>true<\/code> and <code>false<\/code> through the new <a href=\"https:\/\/perldoc.perl.org\/builtin\" rel=\"nofollow noreferrer\">builtin<\/a> pragma).<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 32581,
            "reputation": 76131,
            "user_id": 90527,
            "user_type": "registered",
            "accept_rate": 85,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/62d3a421bbe13cae0425a563579618ae?s=256&d=identicon&r=PG",
            "display_name": "outis",
            "link": "https:\/\/stackoverflow.com\/users\/90527\/outis"
        },
        "is_accepted": false,
        "score": 303,
        "last_activity_date": 1639035660,
        "last_edit_date": 1639035660.0,
        "creation_date": 1269835546,
        "answer_id": 2535739,
        "question_id": 2534756,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Perl and PHP are more different than alike. Let&#39;s consider Perl 5, since Perl 6 has become its own language (Raku), rather than a new version of Perl. Each language continues to evolve, so some items in this list may become out of date; readers should rely on official documentation to learn the current features of each language.\r\n\r\nSome differences, grouped roughly by subject:\r\n\r\n - Perl has native regular expression support, including regexp literals. PHP uses Perl&#39;s regexp functions as an extension.\r\n - A number of language features are supported at the language level in PHP, but are implemented as packages in Perl (such as generators and some OOP operators). Some of these are mentioned below.\r\n - Both support escape sequences in strings, and support some of the same sequences, but [Perl][1] and [PHP][2] also have some different escape sequences for the same functionality (such as Unicode codepoints) and escapes sequences that they don&#39;t share at all.\r\n - Perl has quite a few more [operators][3], including [matching][4] (`=~`, `!~`), [quote-like][5] (`qw`, `qx` &amp;c.), [string repetition][6] (`x`) and [range][7] (`..` and `...`). PHP has a few operators Perl doesn&#39;t, such as the [error suppression operator][8] (`@`), [`instanceof`][9] and [`clone`][10] (though Perl offers some of these via modules, such as [`Universal::isa`][11]).\r\n    * [Exponentiation][12] (`**`) was not available in PHP before [5.6][13]. \r\n    * The spaceship comparison operator (`&lt;=&gt;`) wasn&#39;t available in PHP until [7.0][14]. In Perl, `&lt;=&gt;` is for numeric comparison (`cmp` for string); in PHP, it handles any comparable values.\r\n - In PHP, [`new`][15] is an operator. In Perl, it&#39;s the conventional name of an [object creation subroutine][16] defined in packages, nothing special as far as the language is concerned.\r\n - Perl logical operators return their arguments, while they [return booleans][17] in PHP. Try:\r\n\r\n        $foo = &#39;&#39; || &#39;bar&#39;;\r\n\r\n   in each language. In Perl, you can even do `$foo ||= &#39;default&#39;` to set `$foo` to a value if it&#39;s not already set. \r\n - PHP 7.0 added a NULL-coalescing operator [`??`][18], and 7.4 added NULL-coalescing assignment `??=`. These are similar to, but more limited than, Perl&#39;s `||`, because they only return the right side if the left is `NULL`, rather than any falsey value. Perl 5.10 added it&#39;s own NULL coalescing operator, [`\/\/`][19]. (Unrelated, &#39;\/\/&#39; begins a single-line comment in PHP.)\r\n - Perl [variable names][20] indicate built-in type, of which Perl has three, and the type specifier is part of the name (called a &quot;[sigil][10]&quot;), so `$foo` is a different variable than `@foo` or `%foo`.\r\n - (related to the previous point) Perl has separate [symbol table][21] entries for scalars, arrays, hashes, code, file\/directory handles and formats. Each has its own namespace.\r\n - Perl gives access to the [symbol table][22], though manipulating it isn&#39;t for the faint of heart. In PHP, symbol table manipulation is limited to creating [references][23] and the [`extract`][24] function.\r\n - Note that &quot;references&quot; has a different meaning in PHP and Perl. In PHP, [references][23] are symbol table aliases. In Perl, [references][25] are smart pointers.\r\n - Perl has different types for integer-indexed collections (arrays) and string indexed collections (hashes). In PHP, they&#39;re the same type: an [associative array\/ordered map][26].\r\n - Perl arrays aren&#39;t sparse: setting an element with index larger than the current size of the array will create all intervening elements, though without initializing them (see [perldata][27] and [`exists`][28]). PHP arrays are sparse; setting an element won&#39;t create intervening elements.\r\n - Perl supports hash and array [slices][29] natively, and slices are assignable, which has all sorts of [uses][30]. In PHP, you use [`array_slice`][31] to extract a slice and [`array_splice`][32] to assign to a slice.\r\n - Perl interpolates [arrays into strings][33] by joining all the elements with `$&quot;`. PHP interpolates arrays into strings by first [converting the array to a string][34], which always results in the value &quot;Array&quot;.\r\n - Perl automatically flattens lists (see [perlsub][35]); for un-flattened data structures, use references. \r\n\r\n        @foo = qw(bar baz);\r\n        @qux = (&#39;qux&#39;, @foo, &#39;quux&#39;); # @qux is an array containing 4 strings\r\n        @bam = (&#39;bug-AWWK!&#39;, \\@foo, &#39;fum&#39;); # @bam contains 3 elements: two strings and a array ref\r\n\r\n    PHP added support for [spreading in argument lists][36] (called &quot;argument unpacking&quot;) starting in 5.6, which must be done explicitly using `...`. In [7.4][37] a [spread operator][38] (under the moniker &quot;array unpacking&quot;) was added, though only for integer indices. In [8.1][39] this operation was extended to string indices.\r\n - Before 7.4, PHP didn&#39;t allow [underscores][40] as digit separators in [integer][41] and [floating point][42] literals.\r\n - You can leave out the [argument to the subscript operator][43] in PHP for a bit of magic. In Perl, you can&#39;t leave out the subscript.\r\n - Perl hashes are [unordered][44].\r\n - Perl has a large number of [predefined and magic variables][45]. PHP&#39;s [predefined variables][46] have quite a different purpose.\r\n - Perl has [statement modifiers][47]: some control statements can be placed at the end of a statement.\r\n - PHP added the [`match`][48] expression in [8.0][49].\r\n - Perl supports [dynamic scoping][50] via the `local` keyword.\r\n - In addition, Perl has global, lexical (block), and package [scope][51]. PHP has global, function, object, class and namespace [scope][52]. \r\n - In Perl, variables are global by default. In PHP, variables in functions are local by default.\r\n - Perl supports explicit [tail calls][53] via the [`goto`][54] function.\r\n - Where PHP uses the more common parameter list to declare function arguments, Perl has [prototypes][55].\r\n    * Prototypes are evaluated at compile time, and thus aren&#39;t checked in a number of situations (e.g. method calls).\r\n    * Prototypes offer more limited type checking for function arguments than PHP&#39;s [type hinting][56]. As a result, prototypes are of more limited utility than type hinting.\r\n    * The differing approaches to parameters affect related features, such as variadic functions, default parameter values and named parameters.\r\n - Perl uses pass-by-reference (even though array arguments are flattened in argument lists, the elements are passed by reference). Note that, due in part to the particular meaning of &quot;reference&quot; in Perl (mentioned above), &quot;[pass-by-reference][57]&quot; is used in the Perl documentation to mean something else (&quot;passing a reference&quot; would be more accurate) and is a way to avoid array and hash flattening in argument lists. PHP uses pass-by-value by default, though [pass-by-reference][58] can be explicitly specified for individual parameters and the variadic parameter, if used. Note the value of a variable storing an object is a handle to it, which means objects can still be mutated when passed by value, though the original variable itself cannot be altered to hold a different value.\r\n - When it comes to type hints, PHP offers various static typing features not in Perl: argument, variable, return (including some [return-only][59]) and nullable type declarations, and [union][60] (as of [8.0][61]) and intersection (as of [8.1][62]) type declarations. Most of these features have been added starting with 7.0.\r\n - In Perl, the last evaluated statement is returned as the value of a subroutine if the statement is an expression (i.e. it has a value), even if a return statement isn&#39;t used. If the last statement isn&#39;t an expression (i.e. doesn&#39;t have a value), such as a loop, the return value is unspecified (see [perlsub][35]). In PHP, if there&#39;s no explicit return, the [return value is NULL][63].\r\n - Perl has [special code blocks][64] (`BEGIN`, `UNITCHECK`, `CHECK`, `INIT` and `END`) that are executed. Unlike PHP&#39;s [`auto_prepend_file`][65] and [`auto_append_file`][66], there is no limit to the number of each type of code block. Also, the code blocks are defined within the scripts, whereas the PHP options are set in the server and per-directory config files.\r\n - In Perl, the semicolon [separates statements][67]. In PHP, it [terminates][68] them, excepting that a PHP close tag (&quot;?&gt;&quot;) can also terminate a statement.\r\n - The value of expressions in Perl is [context sensitive][69].\r\n - Negative subscripts in Perl are relative to the end of the array. `$bam[-1]` is the final element of the array. Negative subscripts in PHP are subscripts like any other.\r\n - In Perl 5, classes are based on packages and look nothing like classes in PHP (or most other languages). Perl 6 classes are closer to PHP classes, but still quite different. (Perl 6 is [different][70] from Perl 5 in many other ways, but that&#39;s off topic.) Many of the differences between Perl 5 and PHP arise from the fact that most of the OO features are not built-in to Perl but based on hacks. For example, `$obj-&gt;method(@args)` gets translated to something like `(ref $obj)::method($obj, @args)`. Non-exhaustive list:\r\n     * PHP automatically provides the special variable `$this` in methods. Perl passes a reference to the object as the first argument to methods.\r\n     * Perl requires references to be [blessed][71] to create an object. Any reference can be blessed as an instance of a given class.\r\n     * In Perl, you can dynamically change inheritance via the packages `@ISA` variable.\r\n     * PHP supports [anonymous classes][72] as of [7.0][73].\r\n - Annotations (called &quot;attributes&quot; in both) are available in both starting with PHP 8.0, but are a [language feature in PHP][74] and a [module in Perl][75].\r\n - PHP [8.1][76] added [enums][77]. While some Perl modules offer similar features, it doesn&#39;t have [enums proper][78] (nor are they as useful, given how types are handled).\r\n - Perl supports [operator overloading][79].\r\n - Both use `#` to begin single line comments, but PHP also uses `\/\/` (which is a NULL-coalescing operator in Perl, as previously mentioned).\r\n - Strictly speaking, Perl doesn&#39;t have multiline comments, but the [POD][80] system can be used for the same affect.\r\n - Until PHP 5.3, PHP had terrible support for anonymous functions (the `create_function` function) and no support for closures.\r\n - PHP had nothing like Perl&#39;s packages until version 5.3, which introduced [namespaces][81].\r\n - Perl creates package aliases by defining constants, storing them in variables, manipulating the symbol table or using a package that does one of these. PHP creates [namespace aliases][82] with `use`.\r\n - Arguably, Perl&#39;s original built-in support for exceptions looks almost nothing like exceptions in other languages, so much so that they scarcely seem like exceptions. You evaluate a block and check the value of `$@` (`eval` instead of `try`, [`die`][83] instead of `throw`). The [TryCatch][84] and [Try::Tiny][85] modules support exceptions as you find them in other languages (as well as some other modules listed in [Error&#39;s See Also][86] section). Perl 5.34.0 added the more standard [`try`\/`catch`][87] syntax as an [experiment][88], which is not enabled by default.\r\n\r\nOne interesting thing that has been happening is the languages have gotten more similar in a few ways, though this is not the result of either language influencing the other but rather new features that have been introduced into many modern programming languages.\r\n\r\nPHP was inspired by Perl the same way *Phantom of the Paradise* was inspired by *Phantom of the Opera*, or *Strange Brew* was inspired by *Hamlet*. It&#39;s best to put the behavior specifics of PHP out of your mind when learning Perl, else you&#39;ll get tripped up.\r\n\r\nMy brain hurts now, so I&#39;m going to stop.\r\n\r\n\r\n  [1]: https:\/\/perldoc.perl.org\/perlop#Quote-and-Quote-like-Operators\r\n  [2]: https:\/\/php.net\/language.types.string#language.types.string.syntax.double\r\n  [3]: https:\/\/perldoc.perl.org\/perlop\r\n  [4]: https:\/\/perldoc.perl.org\/perlop#Binding-Operators\r\n  [5]: https:\/\/perldoc.perl.org\/perlop#Quote-Like-Operators\r\n  [6]: https:\/\/perldoc.perl.org\/perlop#Multiplicative-Operators\r\n  [7]: https:\/\/perldoc.perl.org\/perlop#Range-Operators\r\n  [8]: https:\/\/php.net\/\/language.operators.errorcontrol\r\n  [9]: https:\/\/php.net\/instanceof\r\n  [10]: https:\/\/en.wikipedia.org\/wiki\/Sigil_(computer_programming)\r\n  [11]: https:\/\/metacpan.org\/pod\/UNIVERSAL#$obj-%3Eisa(-TYPE-)\r\n  [12]: https:\/\/perldoc.perl.org\/perlop#Exponentiation\r\n  [13]: https:\/\/php.net\/manual\/en\/migration56.new-features#migration56.new-features.exponentiation\r\n  [14]: https:\/\/php.net\/manual\/en\/migration70.new-features#migration70.new-features.spaceship-op\r\n  [15]: https:\/\/php.net\/new\r\n  [16]: https:\/\/perldoc.perl.org\/perltoot#Constructors-and-Instance-Methods\r\n  [17]: https:\/\/php.net\/language.operators.logical\r\n  [18]: https:\/\/php.net\/language.operators.comparison#language.operators.comparison.coalesce\r\n  [19]: https:\/\/perldoc.perl.org\/perlop#Logical-Defined-Or\r\n  [20]: https:\/\/perldoc.perl.org\/perldata#Variable-names\r\n  [21]: https:\/\/www.oreilly.com\/library\/view\/mastering-perl\/9780596527242\/ch08.html\r\n  [22]: https:\/\/perldoc.perl.org\/perlmod#Symbol-Tables\r\n  [23]: https:\/\/php.net\/references\r\n  [24]: https:\/\/php.net\/extract\r\n  [25]: https:\/\/perldoc.perl.org\/perlref\r\n  [26]: https:\/\/php.net\/array\r\n  [27]: https:\/\/perldoc.perl.org\/perldata\r\n  [28]: https:\/\/perldoc.perl.org\/perlfunc#exists-EXPR\r\n  [29]: https:\/\/perldoc.perl.org\/perldata#Slices\r\n  [30]: https:\/\/stackoverflow.com\/questions\/1242040\/how-can-i-join-two-hashes-in-perl-without-using-a-loop\/1242125#1242125\r\n  [31]: https:\/\/php.net\/array_slice\r\n  [32]: https:\/\/php.net\/array_splice\r\n  [33]: https:\/\/perldoc.perl.org\/perldata#Array-Interpolation\r\n  [34]: https:\/\/php.net\/language.types.string#language.types.string.casting\r\n  [35]: https:\/\/perldoc.perl.org\/perlsub\r\n  [36]: https:\/\/php.net\/functions.arguments#functions.variable-arg-list\r\n  [37]: https:\/\/php.net\/manual\/en\/migration74.new-features#migration74.new-features.core.unpack-inside-array\r\n  [38]: https:\/\/php.net\/language.types.array#language.types.array.unpacking\r\n  [39]: https:\/\/php.net\/manual\/en\/migration81.new-features#migration81.new-features.core.unpacking-string-keys\r\n  [40]: https:\/\/php.net\/manual\/en\/migration74.new-features#migration74.new-features.core.numeric-literal-separator\r\n  [41]: https:\/\/php.net\/\/language.types.integer\r\n  [42]: https:\/\/php.net\/language.types.float\r\n  [43]: https:\/\/php.net\/language.types.array.php#language.types.array.syntax.modifying\r\n  [44]: https:\/\/perldoc.perl.org\/perlglossary#hash\r\n  [45]: https:\/\/perldoc.perl.org\/perlvar\r\n  [46]: https:\/\/php.net\/language.variables.predefined\r\n  [47]: https:\/\/perldoc.perl.org\/perlsyn#Statement-Modifiers\r\n  [48]: https:\/\/php.net\/control-structures.match\r\n  [49]: https:\/\/php.net\/manual\/en\/migration80.new-features#migration80.new-features.core.match\r\n  [50]: https:\/\/en.wikipedia.org\/wiki\/Scope_(programming)#Dynamic_scoping\r\n  [51]: https:\/\/docstore.mik.ua\/orelly\/perl\/prog3\/ch04_08.htm\r\n  [52]: https:\/\/php.net\/language.variables.scope\r\n  [53]: https:\/\/en.wikipedia.org\/wiki\/Tail_call\r\n  [54]: https:\/\/perldoc.perl.org\/functions\/goto\r\n  [55]: https:\/\/perldoc.perl.org\/perlsub#Prototypes\r\n  [56]: https:\/\/php.net\/language.oop5.typehinting\r\n  [57]: https:\/\/perldoc.perl.org\/perlsub#Pass-by-Reference\r\n  [58]: https:\/\/php.net\/functions.arguments#functions.arguments.by-reference\r\n  [59]: https:\/\/php.net\/manual\/en\/language.types.declarations#language.types.declarations.return-only\r\n  [60]: https:\/\/php.net\/language.types.declarations#language.types.declarations.union\r\n  [61]: https:\/\/php.net\/manual\/en\/migration80.new-features#migration80.new-features.core.union-types\r\n  [62]: https:\/\/php.net\/manual\/en\/migration81.new-features#migration81.new-features.core.intersection-types\r\n  [63]: https:\/\/php.net\/functions.returning-values\r\n  [64]: https:\/\/perldoc.perl.org\/perlmod#BEGIN%2c-UNITCHECK%2c-CHECK%2c-INIT-and-END\r\n  [65]: https:\/\/php.net\/ini.core#ini.auto-prepend-file\r\n  [66]: https:\/\/php.net\/ini.core#ini.auto-append-file\r\n  [67]: https:\/\/perldoc.perl.org\/perlsyn#Simple-Statements\r\n  [68]: https:\/\/php.net\/language.basic-syntax.instruction-separation\r\n  [69]: https:\/\/perldoc.perl.org\/perldata#Context\r\n  [70]: https:\/\/design.raku.org\/Differences.html\r\n  [71]: https:\/\/perldoc.perl.org\/functions\/bless\r\n  [72]: https:\/\/php.net\/language.oop5.anonymous\r\n  [73]: https:\/\/php.net\/manual\/en\/migration70.new-features.php#migration70.new-features.anonymous-classes\r\n  [74]: https:\/\/php.net\/language.attributes.overview\r\n  [75]: https:\/\/perldoc.perl.org\/attributes\r\n  [76]: https:\/\/php.net\/manual\/en\/migration81.new-features#migration81.new-features.core.enums\r\n  [77]: https:\/\/php.net\/language.enumerations\r\n  [78]: https:\/\/stackoverflow.com\/q\/473666\/90527\r\n  [79]: https:\/\/perldoc.perl.org\/overload\r\n  [80]: https:\/\/perldoc.perl.org\/perlpod\r\n  [81]: https:\/\/php.net\/language.namespaces\r\n  [82]: https:\/\/php.net\/language.namespaces.importing\r\n  [83]: https:\/\/perldoc.perl.org\/functions\/die\r\n  [84]: https:\/\/metacpan.org\/pod\/TryCatch\r\n  [85]: https:\/\/metacpan.org\/pod\/Try::Tiny\r\n  [86]: https:\/\/metacpan.org\/module\/Error#SEE-ALSO\r\n  [87]: https:\/\/perldoc.perl.org\/perlsyn#Try-Catch-Exception-Handling\r\n  [88]: https:\/\/perldoc.perl.org\/perlexperiment#try\/catch-control-structure",
        "body": "<p>Perl and PHP are more different than alike. Let's consider Perl 5, since Perl 6 has become its own language (Raku), rather than a new version of Perl. Each language continues to evolve, so some items in this list may become out of date; readers should rely on official documentation to learn the current features of each language.<\/p>\n<p>Some differences, grouped roughly by subject:<\/p>\n<ul>\n<li><p>Perl has native regular expression support, including regexp literals. PHP uses Perl's regexp functions as an extension.<\/p>\n<\/li>\n<li><p>A number of language features are supported at the language level in PHP, but are implemented as packages in Perl (such as generators and some OOP operators). Some of these are mentioned below.<\/p>\n<\/li>\n<li><p>Both support escape sequences in strings, and support some of the same sequences, but <a href=\"https:\/\/perldoc.perl.org\/perlop#Quote-and-Quote-like-Operators\" rel=\"noreferrer\">Perl<\/a> and <a href=\"https:\/\/php.net\/language.types.string#language.types.string.syntax.double\" rel=\"noreferrer\">PHP<\/a> also have some different escape sequences for the same functionality (such as Unicode codepoints) and escapes sequences that they don't share at all.<\/p>\n<\/li>\n<li><p>Perl has quite a few more <a href=\"https:\/\/perldoc.perl.org\/perlop\" rel=\"noreferrer\">operators<\/a>, including <a href=\"https:\/\/perldoc.perl.org\/perlop#Binding-Operators\" rel=\"noreferrer\">matching<\/a> (<code>=~<\/code>, <code>!~<\/code>), <a href=\"https:\/\/perldoc.perl.org\/perlop#Quote-Like-Operators\" rel=\"noreferrer\">quote-like<\/a> (<code>qw<\/code>, <code>qx<\/code> &amp;c.), <a href=\"https:\/\/perldoc.perl.org\/perlop#Multiplicative-Operators\" rel=\"noreferrer\">string repetition<\/a> (<code>x<\/code>) and <a href=\"https:\/\/perldoc.perl.org\/perlop#Range-Operators\" rel=\"noreferrer\">range<\/a> (<code>..<\/code> and <code>...<\/code>). PHP has a few operators Perl doesn't, such as the <a href=\"https:\/\/php.net\/\/language.operators.errorcontrol\" rel=\"noreferrer\">error suppression operator<\/a> (<code>@<\/code>), <a href=\"https:\/\/php.net\/instanceof\" rel=\"noreferrer\"><code>instanceof<\/code><\/a> and <a href=\"https:\/\/en.wikipedia.org\/wiki\/Sigil_(computer_programming)\" rel=\"noreferrer\"><code>clone<\/code><\/a> (though Perl offers some of these via modules, such as <a href=\"https:\/\/metacpan.org\/pod\/UNIVERSAL#$obj-%3Eisa(-TYPE-)\" rel=\"noreferrer\"><code>Universal::isa<\/code><\/a>).<\/p>\n<ul>\n<li><a href=\"https:\/\/perldoc.perl.org\/perlop#Exponentiation\" rel=\"noreferrer\">Exponentiation<\/a> (<code>**<\/code>) was not available in PHP before <a href=\"https:\/\/php.net\/manual\/en\/migration56.new-features#migration56.new-features.exponentiation\" rel=\"noreferrer\">5.6<\/a>.<\/li>\n<li>The spaceship comparison operator (<code>&lt;=&gt;<\/code>) wasn't available in PHP until <a href=\"https:\/\/php.net\/manual\/en\/migration70.new-features#migration70.new-features.spaceship-op\" rel=\"noreferrer\">7.0<\/a>. In Perl, <code>&lt;=&gt;<\/code> is for numeric comparison (<code>cmp<\/code> for string); in PHP, it handles any comparable values.<\/li>\n<\/ul>\n<\/li>\n<li><p>In PHP, <a href=\"https:\/\/php.net\/new\" rel=\"noreferrer\"><code>new<\/code><\/a> is an operator. In Perl, it's the conventional name of an <a href=\"https:\/\/perldoc.perl.org\/perltoot#Constructors-and-Instance-Methods\" rel=\"noreferrer\">object creation subroutine<\/a> defined in packages, nothing special as far as the language is concerned.<\/p>\n<\/li>\n<li><p>Perl logical operators return their arguments, while they <a href=\"https:\/\/php.net\/language.operators.logical\" rel=\"noreferrer\">return booleans<\/a> in PHP. Try:<\/p>\n<pre><code> $foo = '' || 'bar';\n<\/code><\/pre>\n<p>in each language. In Perl, you can even do <code>$foo ||= 'default'<\/code> to set <code>$foo<\/code> to a value if it's not already set.<\/p>\n<\/li>\n<li><p>PHP 7.0 added a NULL-coalescing operator <a href=\"https:\/\/php.net\/language.operators.comparison#language.operators.comparison.coalesce\" rel=\"noreferrer\"><code>??<\/code><\/a>, and 7.4 added NULL-coalescing assignment <code>??=<\/code>. These are similar to, but more limited than, Perl's <code>||<\/code>, because they only return the right side if the left is <code>NULL<\/code>, rather than any falsey value. Perl 5.10 added it's own NULL coalescing operator, <a href=\"https:\/\/perldoc.perl.org\/perlop#Logical-Defined-Or\" rel=\"noreferrer\"><code>\/\/<\/code><\/a>. (Unrelated, '\/\/' begins a single-line comment in PHP.)<\/p>\n<\/li>\n<li><p>Perl <a href=\"https:\/\/perldoc.perl.org\/perldata#Variable-names\" rel=\"noreferrer\">variable names<\/a> indicate built-in type, of which Perl has three, and the type specifier is part of the name (called a &quot;<a href=\"https:\/\/en.wikipedia.org\/wiki\/Sigil_(computer_programming)\" rel=\"noreferrer\">sigil<\/a>&quot;), so <code>$foo<\/code> is a different variable than <code>@foo<\/code> or <code>%foo<\/code>.<\/p>\n<\/li>\n<li><p>(related to the previous point) Perl has separate <a href=\"https:\/\/www.oreilly.com\/library\/view\/mastering-perl\/9780596527242\/ch08.html\" rel=\"noreferrer\">symbol table<\/a> entries for scalars, arrays, hashes, code, file\/directory handles and formats. Each has its own namespace.<\/p>\n<\/li>\n<li><p>Perl gives access to the <a href=\"https:\/\/perldoc.perl.org\/perlmod#Symbol-Tables\" rel=\"noreferrer\">symbol table<\/a>, though manipulating it isn't for the faint of heart. In PHP, symbol table manipulation is limited to creating <a href=\"https:\/\/php.net\/references\" rel=\"noreferrer\">references<\/a> and the <a href=\"https:\/\/php.net\/extract\" rel=\"noreferrer\"><code>extract<\/code><\/a> function.<\/p>\n<\/li>\n<li><p>Note that &quot;references&quot; has a different meaning in PHP and Perl. In PHP, <a href=\"https:\/\/php.net\/references\" rel=\"noreferrer\">references<\/a> are symbol table aliases. In Perl, <a href=\"https:\/\/perldoc.perl.org\/perlref\" rel=\"noreferrer\">references<\/a> are smart pointers.<\/p>\n<\/li>\n<li><p>Perl has different types for integer-indexed collections (arrays) and string indexed collections (hashes). In PHP, they're the same type: an <a href=\"https:\/\/php.net\/array\" rel=\"noreferrer\">associative array\/ordered map<\/a>.<\/p>\n<\/li>\n<li><p>Perl arrays aren't sparse: setting an element with index larger than the current size of the array will create all intervening elements, though without initializing them (see <a href=\"https:\/\/perldoc.perl.org\/perldata\" rel=\"noreferrer\">perldata<\/a> and <a href=\"https:\/\/perldoc.perl.org\/perlfunc#exists-EXPR\" rel=\"noreferrer\"><code>exists<\/code><\/a>). PHP arrays are sparse; setting an element won't create intervening elements.<\/p>\n<\/li>\n<li><p>Perl supports hash and array <a href=\"https:\/\/perldoc.perl.org\/perldata#Slices\" rel=\"noreferrer\">slices<\/a> natively, and slices are assignable, which has all sorts of <a href=\"https:\/\/stackoverflow.com\/questions\/1242040\/how-can-i-join-two-hashes-in-perl-without-using-a-loop\/1242125#1242125\">uses<\/a>. In PHP, you use <a href=\"https:\/\/php.net\/array_slice\" rel=\"noreferrer\"><code>array_slice<\/code><\/a> to extract a slice and <a href=\"https:\/\/php.net\/array_splice\" rel=\"noreferrer\"><code>array_splice<\/code><\/a> to assign to a slice.<\/p>\n<\/li>\n<li><p>Perl interpolates <a href=\"https:\/\/perldoc.perl.org\/perldata#Array-Interpolation\" rel=\"noreferrer\">arrays into strings<\/a> by joining all the elements with <code>$&quot;<\/code>. PHP interpolates arrays into strings by first <a href=\"https:\/\/php.net\/language.types.string#language.types.string.casting\" rel=\"noreferrer\">converting the array to a string<\/a>, which always results in the value &quot;Array&quot;.<\/p>\n<\/li>\n<li><p>Perl automatically flattens lists (see <a href=\"https:\/\/perldoc.perl.org\/perlsub\" rel=\"noreferrer\">perlsub<\/a>); for un-flattened data structures, use references.<\/p>\n<pre><code> @foo = qw(bar baz);\n @qux = ('qux', @foo, 'quux'); # @qux is an array containing 4 strings\n @bam = ('bug-AWWK!', \\@foo, 'fum'); # @bam contains 3 elements: two strings and a array ref\n<\/code><\/pre>\n<p>PHP added support for <a href=\"https:\/\/php.net\/functions.arguments#functions.variable-arg-list\" rel=\"noreferrer\">spreading in argument lists<\/a> (called &quot;argument unpacking&quot;) starting in 5.6, which must be done explicitly using <code>...<\/code>. In <a href=\"https:\/\/php.net\/manual\/en\/migration74.new-features#migration74.new-features.core.unpack-inside-array\" rel=\"noreferrer\">7.4<\/a> a <a href=\"https:\/\/php.net\/language.types.array#language.types.array.unpacking\" rel=\"noreferrer\">spread operator<\/a> (under the moniker &quot;array unpacking&quot;) was added, though only for integer indices. In <a href=\"https:\/\/php.net\/manual\/en\/migration81.new-features#migration81.new-features.core.unpacking-string-keys\" rel=\"noreferrer\">8.1<\/a> this operation was extended to string indices.<\/p>\n<\/li>\n<li><p>Before 7.4, PHP didn't allow <a href=\"https:\/\/php.net\/manual\/en\/migration74.new-features#migration74.new-features.core.numeric-literal-separator\" rel=\"noreferrer\">underscores<\/a> as digit separators in <a href=\"https:\/\/php.net\/\/language.types.integer\" rel=\"noreferrer\">integer<\/a> and <a href=\"https:\/\/php.net\/language.types.float\" rel=\"noreferrer\">floating point<\/a> literals.<\/p>\n<\/li>\n<li><p>You can leave out the <a href=\"https:\/\/php.net\/language.types.array.php#language.types.array.syntax.modifying\" rel=\"noreferrer\">argument to the subscript operator<\/a> in PHP for a bit of magic. In Perl, you can't leave out the subscript.<\/p>\n<\/li>\n<li><p>Perl hashes are <a href=\"https:\/\/perldoc.perl.org\/perlglossary#hash\" rel=\"noreferrer\">unordered<\/a>.<\/p>\n<\/li>\n<li><p>Perl has a large number of <a href=\"https:\/\/perldoc.perl.org\/perlvar\" rel=\"noreferrer\">predefined and magic variables<\/a>. PHP's <a href=\"https:\/\/php.net\/language.variables.predefined\" rel=\"noreferrer\">predefined variables<\/a> have quite a different purpose.<\/p>\n<\/li>\n<li><p>Perl has <a href=\"https:\/\/perldoc.perl.org\/perlsyn#Statement-Modifiers\" rel=\"noreferrer\">statement modifiers<\/a>: some control statements can be placed at the end of a statement.<\/p>\n<\/li>\n<li><p>PHP added the <a href=\"https:\/\/php.net\/control-structures.match\" rel=\"noreferrer\"><code>match<\/code><\/a> expression in <a href=\"https:\/\/php.net\/manual\/en\/migration80.new-features#migration80.new-features.core.match\" rel=\"noreferrer\">8.0<\/a>.<\/p>\n<\/li>\n<li><p>Perl supports <a href=\"https:\/\/en.wikipedia.org\/wiki\/Scope_(programming)#Dynamic_scoping\" rel=\"noreferrer\">dynamic scoping<\/a> via the <code>local<\/code> keyword.<\/p>\n<\/li>\n<li><p>In addition, Perl has global, lexical (block), and package <a href=\"https:\/\/docstore.mik.ua\/orelly\/perl\/prog3\/ch04_08.htm\" rel=\"noreferrer\">scope<\/a>. PHP has global, function, object, class and namespace <a href=\"https:\/\/php.net\/language.variables.scope\" rel=\"noreferrer\">scope<\/a>.<\/p>\n<\/li>\n<li><p>In Perl, variables are global by default. In PHP, variables in functions are local by default.<\/p>\n<\/li>\n<li><p>Perl supports explicit <a href=\"https:\/\/en.wikipedia.org\/wiki\/Tail_call\" rel=\"noreferrer\">tail calls<\/a> via the <a href=\"https:\/\/perldoc.perl.org\/functions\/goto\" rel=\"noreferrer\"><code>goto<\/code><\/a> function.<\/p>\n<\/li>\n<li><p>Where PHP uses the more common parameter list to declare function arguments, Perl has <a href=\"https:\/\/perldoc.perl.org\/perlsub#Prototypes\" rel=\"noreferrer\">prototypes<\/a>.<\/p>\n<ul>\n<li>Prototypes are evaluated at compile time, and thus aren't checked in a number of situations (e.g. method calls).<\/li>\n<li>Prototypes offer more limited type checking for function arguments than PHP's <a href=\"https:\/\/php.net\/language.oop5.typehinting\" rel=\"noreferrer\">type hinting<\/a>. As a result, prototypes are of more limited utility than type hinting.<\/li>\n<li>The differing approaches to parameters affect related features, such as variadic functions, default parameter values and named parameters.<\/li>\n<\/ul>\n<\/li>\n<li><p>Perl uses pass-by-reference (even though array arguments are flattened in argument lists, the elements are passed by reference). Note that, due in part to the particular meaning of &quot;reference&quot; in Perl (mentioned above), &quot;<a href=\"https:\/\/perldoc.perl.org\/perlsub#Pass-by-Reference\" rel=\"noreferrer\">pass-by-reference<\/a>&quot; is used in the Perl documentation to mean something else (&quot;passing a reference&quot; would be more accurate) and is a way to avoid array and hash flattening in argument lists. PHP uses pass-by-value by default, though <a href=\"https:\/\/php.net\/functions.arguments#functions.arguments.by-reference\" rel=\"noreferrer\">pass-by-reference<\/a> can be explicitly specified for individual parameters and the variadic parameter, if used. Note the value of a variable storing an object is a handle to it, which means objects can still be mutated when passed by value, though the original variable itself cannot be altered to hold a different value.<\/p>\n<\/li>\n<li><p>When it comes to type hints, PHP offers various static typing features not in Perl: argument, variable, return (including some <a href=\"https:\/\/php.net\/manual\/en\/language.types.declarations#language.types.declarations.return-only\" rel=\"noreferrer\">return-only<\/a>) and nullable type declarations, and <a href=\"https:\/\/php.net\/language.types.declarations#language.types.declarations.union\" rel=\"noreferrer\">union<\/a> (as of <a href=\"https:\/\/php.net\/manual\/en\/migration80.new-features#migration80.new-features.core.union-types\" rel=\"noreferrer\">8.0<\/a>) and intersection (as of <a href=\"https:\/\/php.net\/manual\/en\/migration81.new-features#migration81.new-features.core.intersection-types\" rel=\"noreferrer\">8.1<\/a>) type declarations. Most of these features have been added starting with 7.0.<\/p>\n<\/li>\n<li><p>In Perl, the last evaluated statement is returned as the value of a subroutine if the statement is an expression (i.e. it has a value), even if a return statement isn't used. If the last statement isn't an expression (i.e. doesn't have a value), such as a loop, the return value is unspecified (see <a href=\"https:\/\/perldoc.perl.org\/perlsub\" rel=\"noreferrer\">perlsub<\/a>). In PHP, if there's no explicit return, the <a href=\"https:\/\/php.net\/functions.returning-values\" rel=\"noreferrer\">return value is NULL<\/a>.<\/p>\n<\/li>\n<li><p>Perl has <a href=\"https:\/\/perldoc.perl.org\/perlmod#BEGIN%2c-UNITCHECK%2c-CHECK%2c-INIT-and-END\" rel=\"noreferrer\">special code blocks<\/a> (<code>BEGIN<\/code>, <code>UNITCHECK<\/code>, <code>CHECK<\/code>, <code>INIT<\/code> and <code>END<\/code>) that are executed. Unlike PHP's <a href=\"https:\/\/php.net\/ini.core#ini.auto-prepend-file\" rel=\"noreferrer\"><code>auto_prepend_file<\/code><\/a> and <a href=\"https:\/\/php.net\/ini.core#ini.auto-append-file\" rel=\"noreferrer\"><code>auto_append_file<\/code><\/a>, there is no limit to the number of each type of code block. Also, the code blocks are defined within the scripts, whereas the PHP options are set in the server and per-directory config files.<\/p>\n<\/li>\n<li><p>In Perl, the semicolon <a href=\"https:\/\/perldoc.perl.org\/perlsyn#Simple-Statements\" rel=\"noreferrer\">separates statements<\/a>. In PHP, it <a href=\"https:\/\/php.net\/language.basic-syntax.instruction-separation\" rel=\"noreferrer\">terminates<\/a> them, excepting that a PHP close tag (&quot;?&gt;&quot;) can also terminate a statement.<\/p>\n<\/li>\n<li><p>The value of expressions in Perl is <a href=\"https:\/\/perldoc.perl.org\/perldata#Context\" rel=\"noreferrer\">context sensitive<\/a>.<\/p>\n<\/li>\n<li><p>Negative subscripts in Perl are relative to the end of the array. <code>$bam[-1]<\/code> is the final element of the array. Negative subscripts in PHP are subscripts like any other.<\/p>\n<\/li>\n<li><p>In Perl 5, classes are based on packages and look nothing like classes in PHP (or most other languages). Perl 6 classes are closer to PHP classes, but still quite different. (Perl 6 is <a href=\"https:\/\/design.raku.org\/Differences.html\" rel=\"noreferrer\">different<\/a> from Perl 5 in many other ways, but that's off topic.) Many of the differences between Perl 5 and PHP arise from the fact that most of the OO features are not built-in to Perl but based on hacks. For example, <code>$obj-&gt;method(@args)<\/code> gets translated to something like <code>(ref $obj)::method($obj, @args)<\/code>. Non-exhaustive list:<\/p>\n<ul>\n<li>PHP automatically provides the special variable <code>$this<\/code> in methods. Perl passes a reference to the object as the first argument to methods.<\/li>\n<li>Perl requires references to be <a href=\"https:\/\/perldoc.perl.org\/functions\/bless\" rel=\"noreferrer\">blessed<\/a> to create an object. Any reference can be blessed as an instance of a given class.<\/li>\n<li>In Perl, you can dynamically change inheritance via the packages <code>@ISA<\/code> variable.<\/li>\n<li>PHP supports <a href=\"https:\/\/php.net\/language.oop5.anonymous\" rel=\"noreferrer\">anonymous classes<\/a> as of <a href=\"https:\/\/php.net\/manual\/en\/migration70.new-features.php#migration70.new-features.anonymous-classes\" rel=\"noreferrer\">7.0<\/a>.<\/li>\n<\/ul>\n<\/li>\n<li><p>Annotations (called &quot;attributes&quot; in both) are available in both starting with PHP 8.0, but are a <a href=\"https:\/\/php.net\/language.attributes.overview\" rel=\"noreferrer\">language feature in PHP<\/a> and a <a href=\"https:\/\/perldoc.perl.org\/attributes\" rel=\"noreferrer\">module in Perl<\/a>.<\/p>\n<\/li>\n<li><p>PHP <a href=\"https:\/\/php.net\/manual\/en\/migration81.new-features#migration81.new-features.core.enums\" rel=\"noreferrer\">8.1<\/a> added <a href=\"https:\/\/php.net\/language.enumerations\" rel=\"noreferrer\">enums<\/a>. While some Perl modules offer similar features, it doesn't have <a href=\"https:\/\/stackoverflow.com\/q\/473666\/90527\">enums proper<\/a> (nor are they as useful, given how types are handled).<\/p>\n<\/li>\n<li><p>Perl supports <a href=\"https:\/\/perldoc.perl.org\/overload\" rel=\"noreferrer\">operator overloading<\/a>.<\/p>\n<\/li>\n<li><p>Both use <code>#<\/code> to begin single line comments, but PHP also uses <code>\/\/<\/code> (which is a NULL-coalescing operator in Perl, as previously mentioned).<\/p>\n<\/li>\n<li><p>Strictly speaking, Perl doesn't have multiline comments, but the <a href=\"https:\/\/perldoc.perl.org\/perlpod\" rel=\"noreferrer\">POD<\/a> system can be used for the same affect.<\/p>\n<\/li>\n<li><p>Until PHP 5.3, PHP had terrible support for anonymous functions (the <code>create_function<\/code> function) and no support for closures.<\/p>\n<\/li>\n<li><p>PHP had nothing like Perl's packages until version 5.3, which introduced <a href=\"https:\/\/php.net\/language.namespaces\" rel=\"noreferrer\">namespaces<\/a>.<\/p>\n<\/li>\n<li><p>Perl creates package aliases by defining constants, storing them in variables, manipulating the symbol table or using a package that does one of these. PHP creates <a href=\"https:\/\/php.net\/language.namespaces.importing\" rel=\"noreferrer\">namespace aliases<\/a> with <code>use<\/code>.<\/p>\n<\/li>\n<li><p>Arguably, Perl's original built-in support for exceptions looks almost nothing like exceptions in other languages, so much so that they scarcely seem like exceptions. You evaluate a block and check the value of <code>$@<\/code> (<code>eval<\/code> instead of <code>try<\/code>, <a href=\"https:\/\/perldoc.perl.org\/functions\/die\" rel=\"noreferrer\"><code>die<\/code><\/a> instead of <code>throw<\/code>). The <a href=\"https:\/\/metacpan.org\/pod\/TryCatch\" rel=\"noreferrer\">TryCatch<\/a> and <a href=\"https:\/\/metacpan.org\/pod\/Try::Tiny\" rel=\"noreferrer\">Try::Tiny<\/a> modules support exceptions as you find them in other languages (as well as some other modules listed in <a href=\"https:\/\/metacpan.org\/module\/Error#SEE-ALSO\" rel=\"noreferrer\">Error's See Also<\/a> section). Perl 5.34.0 added the more standard <a href=\"https:\/\/perldoc.perl.org\/perlsyn#Try-Catch-Exception-Handling\" rel=\"noreferrer\"><code>try<\/code>\/<code>catch<\/code><\/a> syntax as an <a href=\"https:\/\/perldoc.perl.org\/perlexperiment#try\/catch-control-structure\" rel=\"noreferrer\">experiment<\/a>, which is not enabled by default.<\/p>\n<\/li>\n<\/ul>\n<p>One interesting thing that has been happening is the languages have gotten more similar in a few ways, though this is not the result of either language influencing the other but rather new features that have been introduced into many modern programming languages.<\/p>\n<p>PHP was inspired by Perl the same way <em>Phantom of the Paradise<\/em> was inspired by <em>Phantom of the Opera<\/em>, or <em>Strange Brew<\/em> was inspired by <em>Hamlet<\/em>. It's best to put the behavior specifics of PHP out of your mind when learning Perl, else you'll get tripped up.<\/p>\n<p>My brain hurts now, so I'm going to stop.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 135,
            "reputation": 15091,
            "user_id": 164,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/afb1af7924cbadd912a8b5b2f1308bba?s=256&d=identicon&r=PG",
            "display_name": "John Siracusa",
            "link": "https:\/\/stackoverflow.com\/users\/164\/john-siracusa"
        },
        "is_accepted": true,
        "score": 300,
        "last_activity_date": 1602255269,
        "last_edit_date": 1602255269.0,
        "creation_date": 1219424909,
        "answer_id": 22896,
        "question_id": 22836,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "This is the idiom I&#39;ve always used to get a modified copy of a string without changing the original:\r\n\r\n    (my $newstring = $oldstring) =~ s\/foo\/bar\/g;\r\n\r\nIn perl 5.14.0 or later, you can use the new `\/r` [non-destructive substitution modifier][1]:\r\n\r\n    my $newstring = $oldstring =~ s\/foo\/bar\/gr; \r\n\r\n---\r\n\r\n**NOTE:**  \r\nThe above solutions work without `g` too. They also work with any other modifiers.\r\n\r\n\r\n  [1]: https:\/\/metacpan.org\/pod\/release\/FLORA\/perl-5.14.2\/pod\/perl5140delta.pod#Non-destructive-substitution\r\n\r\n**SEE ALSO:**  \r\n[`perldoc perlrequick`: Perl regular expressions quick start](https:\/\/perldoc.perl.org\/perlrequick)  ",
        "body": "<p>This is the idiom I've always used to get a modified copy of a string without changing the original:<\/p>\n<pre><code>(my $newstring = $oldstring) =~ s\/foo\/bar\/g;\n<\/code><\/pre>\n<p>In perl 5.14.0 or later, you can use the new <code>\/r<\/code> <a href=\"https:\/\/metacpan.org\/pod\/release\/FLORA\/perl-5.14.2\/pod\/perl5140delta.pod#Non-destructive-substitution\" rel=\"noreferrer\">non-destructive substitution modifier<\/a>:<\/p>\n<pre><code>my $newstring = $oldstring =~ s\/foo\/bar\/gr; \n<\/code><\/pre>\n<hr \/>\n<p><strong>NOTE:<\/strong><br \/>\nThe above solutions work without <code>g<\/code> too. They also work with any other modifiers.<\/p>\n<p><strong>SEE ALSO:<\/strong><br \/>\n<a href=\"https:\/\/perldoc.perl.org\/perlrequick\" rel=\"noreferrer\"><code>perldoc perlrequick<\/code>: Perl regular expressions quick start<\/a><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 30948,
            "reputation": 16158,
            "user_id": 84671,
            "user_type": "registered",
            "accept_rate": 91,
            "profile_image": "https:\/\/i.stack.imgur.com\/3MeXc.jpg?s=256&g=1",
            "display_name": "Ludwig Weinzierl",
            "link": "https:\/\/stackoverflow.com\/users\/84671\/ludwig-weinzierl"
        },
        "is_accepted": true,
        "score": 294,
        "last_activity_date": 1329960283,
        "last_edit_date": 1329960283.0,
        "creation_date": 1240956460,
        "answer_id": 800034,
        "question_id": 799968,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "**exec**\r\n--------\r\n\r\n  executes a command and *never returns*.\r\n  It&#39;s like a `return` statement in a function.\r\n\r\n  If the command is not found `exec` returns false.\r\n  It never returns true, because if the command is found it never returns at all.\r\n  There is also no point in returning `STDOUT`, `STDERR` or exit status of the command.\r\n  You can find documentation about it in  &lt;a href=&quot;http:\/\/perldoc.perl.org\/functions\/exec.html&quot;&gt;**`perlfunc`**&lt;\/a&gt;, \r\n  because it is a function.\r\n\r\n**system**\r\n----------\r\n\r\n  executes a command and your Perl script is continued after the command has finished.\r\n\r\n  The return value is the exit status of the command.\r\n  You can find documentation about it in  &lt;a href=&quot;http:\/\/perldoc.perl.org\/functions\/system.html&quot;&gt;**`perlfunc`**&lt;\/a&gt;.\r\n  \r\n\r\n**backticks**\r\n-------------\r\n\r\n  like `system` executes a command and your perl script is continued after the command has finished.\r\n\r\n  In contrary to **`system`** the return value is `STDOUT` of the command.\r\n  `qx\/\/` is equivalent to backticks.\r\n  You can find documentation about it in &lt;a href=&quot;http:\/\/perldoc.perl.org\/perlop.html#Quote-Like-Operators&quot;&gt;**`perlop`**&lt;\/a&gt;, because unlike `system` and `exec`it is an operator.\r\n\r\n\r\n----------\r\n\r\n\r\n**Other ways**\r\n--------------\r\n\r\nWhat is missing from the above is a way to execute a command asynchronously.\r\nThat means your perl script and your command run simultaneously.\r\nThis can be accomplished with &lt;a href=&quot;http:\/\/perldoc.perl.org\/functions\/open.html&quot;&gt;**`open`**&lt;\/a&gt;.\r\nIt allows you to read `STDOUT`\/`STDERR` and write to `STDIN` of your command.\r\nIt is platform dependent though.\r\n\r\nThere are also several modules which can ease this tasks.\r\nThere is `IPC::Open2` and `IPC::Open3` and `IPC::Run`, as well as\r\n`Win32::Process::Create` if you are on windows.",
        "body": "<h2><strong>exec<\/strong><\/h2>\n\n<p>executes a command and <em>never returns<\/em>.\n  It's like a <code>return<\/code> statement in a function.<\/p>\n\n<p>If the command is not found <code>exec<\/code> returns false.\n  It never returns true, because if the command is found it never returns at all.\n  There is also no point in returning <code>STDOUT<\/code>, <code>STDERR<\/code> or exit status of the command.\n  You can find documentation about it in  <a href=\"http:\/\/perldoc.perl.org\/functions\/exec.html\" rel=\"noreferrer\"><strong><code>perlfunc<\/code><\/strong><\/a>, \n  because it is a function.<\/p>\n\n<h2><strong>system<\/strong><\/h2>\n\n<p>executes a command and your Perl script is continued after the command has finished.<\/p>\n\n<p>The return value is the exit status of the command.\n  You can find documentation about it in  <a href=\"http:\/\/perldoc.perl.org\/functions\/system.html\" rel=\"noreferrer\"><strong><code>perlfunc<\/code><\/strong><\/a>.<\/p>\n\n<h2><strong>backticks<\/strong><\/h2>\n\n<p>like <code>system<\/code> executes a command and your perl script is continued after the command has finished.<\/p>\n\n<p>In contrary to <strong><code>system<\/code><\/strong> the return value is <code>STDOUT<\/code> of the command.\n  <code>qx\/\/<\/code> is equivalent to backticks.\n  You can find documentation about it in <a href=\"http:\/\/perldoc.perl.org\/perlop.html#Quote-Like-Operators\" rel=\"noreferrer\"><strong><code>perlop<\/code><\/strong><\/a>, because unlike <code>system<\/code> and <code>exec<\/code>it is an operator.<\/p>\n\n<hr>\n\n<h2><strong>Other ways<\/strong><\/h2>\n\n<p>What is missing from the above is a way to execute a command asynchronously.\nThat means your perl script and your command run simultaneously.\nThis can be accomplished with <a href=\"http:\/\/perldoc.perl.org\/functions\/open.html\" rel=\"noreferrer\"><strong><code>open<\/code><\/strong><\/a>.\nIt allows you to read <code>STDOUT<\/code>\/<code>STDERR<\/code> and write to <code>STDIN<\/code> of your command.\nIt is platform dependent though.<\/p>\n\n<p>There are also several modules which can ease this tasks.\nThere is <code>IPC::Open2<\/code> and <code>IPC::Open3<\/code> and <code>IPC::Run<\/code>, as well as\n<code>Win32::Process::Create<\/code> if you are on windows.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 9399,
            "reputation": 17367,
            "user_id": 17339,
            "user_type": "registered",
            "accept_rate": 87,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/d1ed8a9e71adc2b356cfc4e020e0dd0f?s=256&d=identicon&r=PG",
            "display_name": "Drew Stephens",
            "link": "https:\/\/stackoverflow.com\/users\/17339\/drew-stephens"
        },
        "is_accepted": true,
        "score": 284,
        "last_activity_date": 1329012240,
        "last_edit_date": 1329012240.0,
        "creation_date": 1221723054,
        "answer_id": 90721,
        "question_id": 84932,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "There are a few ways:\r\n\r\n  - [`$0`][1] is the currently executing script as provided by POSIX, relative to the current working directory if the script is at or below the CWD\r\n  - Additionally, `cwd()`, `getcwd()` and `abs_path()` are provided by the [`Cwd`][2] module and tell you where the script is being run from\r\n  - The module [`FindBin`][3] provides the `$Bin` &amp; `$RealBin` variables that *usually* are the path to the executing script; this module also provides `$Script` &amp; `$RealScript` that are the name of the script\r\n  - [`__FILE__`][4] is the actual file that the Perl interpreter deals with during compilation, including its full path.\r\n\r\nI&#39;ve seen the first three ([`$0`][1], the [`Cwd`][2] module and the [`FindBin`][3] module) fail under `mod_perl` spectacularly, producing worthless output such as `&#39;.&#39;` or an empty string.  In such environments, I use [`__FILE__`][4] and get the path from that using the [`File::Basename`][5] module:\r\n\r\n    use File::Basename;\r\n    my $dirname = dirname(__FILE__);\r\n\r\n\r\n  [1]: http:\/\/perldoc.perl.org\/perlvar.html#$0\r\n  [2]: http:\/\/perldoc.perl.org\/Cwd.html\r\n  [3]: http:\/\/perldoc.perl.org\/FindBin.html\r\n  [4]: http:\/\/perldoc.perl.org\/perldata.html#Special-Literals\r\n  [5]: http:\/\/perldoc.perl.org\/File\/Basename.html",
        "body": "<p>There are a few ways:<\/p>\n\n<ul>\n<li><a href=\"http:\/\/perldoc.perl.org\/perlvar.html#$0\" rel=\"noreferrer\"><code>$0<\/code><\/a> is the currently executing script as provided by POSIX, relative to the current working directory if the script is at or below the CWD<\/li>\n<li>Additionally, <code>cwd()<\/code>, <code>getcwd()<\/code> and <code>abs_path()<\/code> are provided by the <a href=\"http:\/\/perldoc.perl.org\/Cwd.html\" rel=\"noreferrer\"><code>Cwd<\/code><\/a> module and tell you where the script is being run from<\/li>\n<li>The module <a href=\"http:\/\/perldoc.perl.org\/FindBin.html\" rel=\"noreferrer\"><code>FindBin<\/code><\/a> provides the <code>$Bin<\/code> &amp; <code>$RealBin<\/code> variables that <em>usually<\/em> are the path to the executing script; this module also provides <code>$Script<\/code> &amp; <code>$RealScript<\/code> that are the name of the script<\/li>\n<li><a href=\"http:\/\/perldoc.perl.org\/perldata.html#Special-Literals\" rel=\"noreferrer\"><code>__FILE__<\/code><\/a> is the actual file that the Perl interpreter deals with during compilation, including its full path.<\/li>\n<\/ul>\n\n<p>I've seen the first three (<a href=\"http:\/\/perldoc.perl.org\/perlvar.html#$0\" rel=\"noreferrer\"><code>$0<\/code><\/a>, the <a href=\"http:\/\/perldoc.perl.org\/Cwd.html\" rel=\"noreferrer\"><code>Cwd<\/code><\/a> module and the <a href=\"http:\/\/perldoc.perl.org\/FindBin.html\" rel=\"noreferrer\"><code>FindBin<\/code><\/a> module) fail under <code>mod_perl<\/code> spectacularly, producing worthless output such as <code>'.'<\/code> or an empty string.  In such environments, I use <a href=\"http:\/\/perldoc.perl.org\/perldata.html#Special-Literals\" rel=\"noreferrer\"><code>__FILE__<\/code><\/a> and get the path from that using the <a href=\"http:\/\/perldoc.perl.org\/File\/Basename.html\" rel=\"noreferrer\"><code>File::Basename<\/code><\/a> module:<\/p>\n\n<pre><code>use File::Basename;\nmy $dirname = dirname(__FILE__);\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 877901,
            "reputation": 3490,
            "user_id": 2129577,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/c41c983d360337bfdce866879a06943d?s=256&d=identicon&r=PG",
            "display_name": "tetromino",
            "link": "https:\/\/stackoverflow.com\/users\/2129577\/tetromino"
        },
        "is_accepted": false,
        "score": 281,
        "last_activity_date": 1351941905,
        "last_edit_date": 1351941905.0,
        "creation_date": 1248218831,
        "answer_id": 1162289,
        "question_id": 1162245,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "[Data::Dumper][1] is your friend.\r\n\r\n    use Data::Dumper;\r\n    my %hash = (&#39;abc&#39; =&gt; 123, &#39;def&#39; =&gt; [4,5,6]);\r\n    print Dumper(\\%hash);\r\n\r\nwill output\r\n\r\n    $VAR1 = {\r\n              &#39;def&#39; =&gt; [\r\n                         4,\r\n                         5,\r\n                         6\r\n                       ],\r\n              &#39;abc&#39; =&gt; 123\r\n            };\r\n\r\n\r\n  [1]: http:\/\/perldoc.perl.org\/Data\/Dumper.html",
        "body": "<p><a href=\"http:\/\/perldoc.perl.org\/Data\/Dumper.html\" rel=\"noreferrer\">Data::Dumper<\/a> is your friend.<\/p>\n\n<pre><code>use Data::Dumper;\nmy %hash = ('abc' =&gt; 123, 'def' =&gt; [4,5,6]);\nprint Dumper(\\%hash);\n<\/code><\/pre>\n\n<p>will output<\/p>\n\n<pre><code>$VAR1 = {\n          'def' =&gt; [\n                     4,\n                     5,\n                     6\n                   ],\n          'abc' =&gt; 123\n        };\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 3044,
            "reputation": 12496,
            "user_id": 4308,
            "user_type": "registered",
            "accept_rate": 84,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/76f01fe6a6341c2a2e1b6f7e3dfe9457?s=256&d=identicon&r=PG",
            "display_name": "Benedikt Waldvogel",
            "link": "https:\/\/stackoverflow.com\/users\/4308\/benedikt-waldvogel"
        },
        "is_accepted": true,
        "score": 275,
        "last_activity_date": 1605014085,
        "last_edit_date": 1605014085.0,
        "creation_date": 1221506272,
        "answer_id": 65883,
        "question_id": 65865,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "&lt;strong&gt;On Unix&lt;\/strong&gt;:\r\n\r\nusually you start *cpan* in your shell:\r\n\r\n  `$ cpan`\r\n\r\nand type\r\n\r\n  `install Chocolate::Belgian`\r\n\r\nor in short form:\r\n\r\n  `cpan Chocolate::Belgian`\r\n\r\n**On Windows**:\r\n\r\n  &gt; If you&#39;re using ActivePerl on Windows, the [PPM (Perl Package Manager)][4] has much of the same functionality as CPAN.pm.\r\n\r\nExample:\r\n\r\n `$ ppm`&lt;br\/&gt;\r\n `ppm&gt; search net-smtp`&lt;br\/&gt;\r\n `ppm&gt; install Net-SMTP-Multipart`\r\n\r\n**see [How do I install Perl modules?][1] in the CPAN FAQ**\r\n\r\nMany distributions ship a lot of perl modules as packages.\r\n\r\n  - Debian\/Ubuntu: `apt-cache search &#39;perl$&#39;`\r\n  - Arch Linux: `pacman -Ss &#39;^perl-&#39;`\r\n  - Gentoo: category `dev-perl`\r\n\r\nYou should *always* prefer them as you benefit from automatic (security) **updates** and the ease of **removal**. This can be pretty tricky with the *cpan* tool itself.\r\n\r\nFor Gentoo there&#39;s a nice tool called **[g-cpan][2]** which builds\/installs the module from CPAN and creates a Gentoo package ([ebuild][3]) for you.\r\n\r\n  [1]: http:\/\/www.cpan.org\/misc\/cpan-faq.html#How_install_Perl_modules\r\n  [2]: https:\/\/wiki.gentoo.org\/wiki\/Project:Perl\/g-cpan\r\n  [3]: http:\/\/en.wikipedia.org\/wiki\/Ebuild\r\n  [4]: http:\/\/docs.activestate.com\/activeperl\/5.10\/faq\/ActivePerl-faq2.html#pkg_operations",
        "body": "<p><strong>On Unix<\/strong>:<\/p>\n<p>usually you start <em>cpan<\/em> in your shell:<\/p>\n<p><code>$ cpan<\/code><\/p>\n<p>and type<\/p>\n<p><code>install Chocolate::Belgian<\/code><\/p>\n<p>or in short form:<\/p>\n<p><code>cpan Chocolate::Belgian<\/code><\/p>\n<p><strong>On Windows<\/strong>:<\/p>\n<blockquote>\n<p>If you're using ActivePerl on Windows, the <a href=\"http:\/\/docs.activestate.com\/activeperl\/5.10\/faq\/ActivePerl-faq2.html#pkg_operations\" rel=\"noreferrer\">PPM (Perl Package Manager)<\/a> has much of the same functionality as CPAN.pm.<\/p>\n<\/blockquote>\n<p>Example:<\/p>\n<p><code>$ ppm<\/code><br\/>\n<code>ppm&gt; search net-smtp<\/code><br\/>\n<code>ppm&gt; install Net-SMTP-Multipart<\/code><\/p>\n<p><strong>see <a href=\"http:\/\/www.cpan.org\/misc\/cpan-faq.html#How_install_Perl_modules\" rel=\"noreferrer\">How do I install Perl modules?<\/a> in the CPAN FAQ<\/strong><\/p>\n<p>Many distributions ship a lot of perl modules as packages.<\/p>\n<ul>\n<li>Debian\/Ubuntu: <code>apt-cache search 'perl$'<\/code><\/li>\n<li>Arch Linux: <code>pacman -Ss '^perl-'<\/code><\/li>\n<li>Gentoo: category <code>dev-perl<\/code><\/li>\n<\/ul>\n<p>You should <em>always<\/em> prefer them as you benefit from automatic (security) <strong>updates<\/strong> and the ease of <strong>removal<\/strong>. This can be pretty tricky with the <em>cpan<\/em> tool itself.<\/p>\n<p>For Gentoo there's a nice tool called <strong><a href=\"https:\/\/wiki.gentoo.org\/wiki\/Project:Perl\/g-cpan\" rel=\"noreferrer\">g-cpan<\/a><\/strong> which builds\/installs the module from CPAN and creates a Gentoo package (<a href=\"http:\/\/en.wikipedia.org\/wiki\/Ebuild\" rel=\"noreferrer\">ebuild<\/a>) for you.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 41067,
            "reputation": 127534,
            "user_id": 119280,
            "user_type": "registered",
            "accept_rate": 73,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/47b88555c03aad35b076726767fcfa35?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "DVK",
            "link": "https:\/\/stackoverflow.com\/users\/119280\/dvk"
        },
        "is_accepted": true,
        "score": 271,
        "last_activity_date": 1701125043,
        "last_edit_date": 1701125043.0,
        "creation_date": 1269638129,
        "answer_id": 2526809,
        "question_id": 2526804,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "We will look at how the contents of this array are constructed and can be manipulated to affect where the Perl interpreter will find module files.\r\n\r\n 1. Default `@INC`\r\n\r\n The Perl interpreter is [compiled with a specific default value for `@INC`][1]. To find this value, run the command `env -i perl -V` (`env -i` ignores the `PERL5LIB` environment variable - see #2) and in the output you will see something like this:\r\n\r\n &gt;     $ env -i perl -V\r\n &gt;     ...\r\n &gt;     @INC:\r\n &gt;      \/usr\/lib\/perl5\/site_perl\/5.18.0\/x86_64-linux-thread-multi-ld\r\n &gt;      \/usr\/lib\/perl5\/site_perl\/5.18.0\r\n &gt;      \/usr\/lib\/perl5\/5.18.0\/x86_64-linux-thread-multi-ld\r\n &gt;      \/usr\/lib\/perl5\/5.18.0\r\n &gt;      .\r\n\r\nNote the `.` at the end; this is the current directory (which is not necessarily the same as the script&#39;s directory). It is missing in Perl 5.26+, and when Perl runs with [`-T` (taint checks enabled)](http:\/\/perldoc.perl.org\/perlrun.html#*-T*).\r\n\r\n To change the default path when configuring compilation of the Perl binary, set the configuration option [`otherlibdirs`](http:\/\/search.cpan.org\/perldoc?INSTALL#otherlibdirs):\r\n\r\n &gt; `Configure -Dotherlibdirs=\/usr\/lib\/perl5\/site_perl\/5.16.3`\r\n\r\n 2. Environment variable `PERL5LIB` (or `PERLLIB`)\r\n\r\n Perl prepends a list of directories (colon-separated) contained in the `PERL5LIB` environment variable of your shell to `@INC` (if `PERL5LIB` is not defined, `PERLLIB` is used). To see the contents of `@INC` after the `PERL5LIB` and `PERLLIB` environment variables have taken effect, run `perl -V`:\r\n\r\n &gt;     $ perl -V\r\n &gt;     ...\r\n &gt;     %ENV:\r\n &gt;       PERL5LIB=&quot;\/home\/myuser\/test&quot;\r\n &gt;     @INC:\r\n &gt;      \/home\/myuser\/test\r\n &gt;      \/usr\/lib\/perl5\/site_perl\/5.18.0\/x86_64-linux-thread-multi-ld\r\n &gt;      \/usr\/lib\/perl5\/site_perl\/5.18.0\r\n &gt;      \/usr\/lib\/perl5\/5.18.0\/x86_64-linux-thread-multi-ld\r\n &gt;      \/usr\/lib\/perl5\/5.18.0\r\n &gt;      .\r\n\r\n 3. `-I ` command-line option\r\n\r\n Perl prepends a list of directories (colon-separated) passed as the parameter of the `-I` command-line option to `@INC`. This can be done in three ways, as usual with Perl options:\r\n\r\n  * Pass it on command line:\r\n\r\n            perl -I \/my\/moduledir your_script.pl\r\n\r\n  * Pass it via the first line (shebang) of your Perl script:\r\n\r\n            #!\/usr\/local\/bin\/perl -w -I \/my\/moduledir\r\n\r\n  * Pass it as part of the `PERL5OPT` (or `PERLOPT`) environment variable (see chapter 19.02 in [Programming Perl](http:\/\/oreilly.com\/catalog\/9780596004927))\r\n\r\n 4. Pass it via the [`lib` pragma][2]\r\n\r\n Perl prepends a list of directories passed in to it via `use lib` to `@INC`.\r\n\r\n In a program:\r\n\r\n        use lib (&quot;\/dir1&quot;, &quot;\/dir2&quot;);\r\n\r\n On the command line:\r\n\r\n        perl -Mlib=\/dir1,\/dir2\r\n\r\n You can also [remove the directories from `@INC` via `no lib`][3].\r\n\r\n 5. You can directly manipulate `@INC` as a regular Perl array.\r\n\r\n  Note: Since `@INC` is used during the compilation phase, this must be done inside a `BEGIN {}` block, which precedes the `use MyModule` statement.\r\n\r\n  - Add directories to the beginning via `unshift @INC, $dir`.\r\n\r\n  - Add directories to the end via `push @INC, $dir`.\r\n\r\n  - Do anything else you can do with a Perl array.\r\n\r\nNote: The directories are *unshifted* onto `@INC` in the order listed in this answer, e.g. default `@INC` is last in the list, preceded by `PERL5LIB`, preceded by `-I`, preceded by `use lib` and direct `@INC` manipulation, the latter two mixed in whichever order they are in Perl code.\r\n\r\n### References:\r\n\r\n  * [perldoc perlmod][4]\r\n  * [perldoc lib][5]\r\n  * [Perl Module Mechanics - a great guide containing practical HOW-TOs][6]\r\n  * [How do I &#39;use&#39; a Perl module in a directory not in `@INC`?][7]\r\n  * [Programming Perl](http:\/\/www.amazon.com\/Programming-Perl-3rd-Larry-Wall\/dp\/0596000278) - chapter 31 part 13, ch 7.2.41\r\n  * [How does a Perl program know where to find the file containing Perl module it uses?][8]\r\n\r\nThere does not seem to be a comprehensive `@INC` FAQ-type post on Stack Overflow, so this question is intended as one.\r\n\r\n### When to use each approach?\r\n\r\n - If the modules in a directory need to be used by many\/all scripts on your site, especially run by multiple users, that directory should be included in the default `@INC` compiled into the Perl binary.\r\n\r\n - If the modules in the directory will be used exclusively by a specific user for all the scripts that user runs (or if recompiling Perl is not an option for changing the default `@INC` in the previous use case), set the users&#39; `PERL5LIB`, usually during user login.\r\n\r\n *Note: Please be aware of the usual Unix environment variable pitfalls - e.g. in certain cases running the scripts as a particular user does not guarantee running them with that user&#39;s environment set up, e.g. via `su`.*\r\n\r\n - If the modules in the directory need to be used only in specific circumstances (e.g. when the script(s) is executed in development\/debug mode, you can either set `PERL5LIB` manually, or pass the `-I` option to perl.\r\n\r\n - If the modules need to be used only for specific scripts, by *all* users using them, use `use lib`\/`no lib` pragmas in the program itself. It also should be used when the directory to be searched needs to be dynamically determined during runtime - e.g. from the script&#39;s command line parameters or script&#39;s path (see the [FindBin](http:\/\/p3rl.org\/FindBin) module for a very nice use case).\r\n\r\n - If the directories in `@INC` need to be manipulated according to some complicated logic, either impossible or too unwieldy to implement by a combination of `use lib`\/`no lib` pragmas, then use direct `@INC` manipulation inside a `BEGIN {}` block or inside a special purpose library designated for `@INC` manipulation, which must be used by your script(s) before any other modules are used.\r\n\r\n An example of this is automatically switching between libraries in prod\/uat\/dev directories, with waterfall library pickup in prod if it&#39;s missing from dev and\/or UAT (the last condition makes the standard &quot;use lib + FindBin&quot; solution fairly complicated.\r\nA detailed illustration of this scenario is in [*How do I use beta Perl modules from beta Perl scripts?*][9].\r\n\r\n - An additional use case for directly manipulating `@INC` is to be able to add subroutine references or object references (yes, Virginia, `@INC` can contain custom Perl code and not just directory names, as explained in [*When is a subroutine reference in @INC called?*][10]).\r\n\r\n\r\n  [1]: http:\/\/search.cpan.org\/perldoc\/INSTALL\r\n  [2]: http:\/\/perldoc.perl.org\/lib.html\r\n  [3]: http:\/\/perldoc.perl.org\/lib.html#Deleting-directories-from-@INC\r\n  [4]: http:\/\/perldoc.perl.org\/perlmod.html#Perl-Modules\r\n  [5]: http:\/\/perldoc.perl.org\/lib.html\r\n  [6]: http:\/\/world.std.com\/~swmcd\/steven\/perl\/module_mechanics.html\r\n  [7]: https:\/\/stackoverflow.com\/questions\/185114\/how-do-i-use-a-perl-module-in-a-directory-not-in-inc\r\n  [8]: https:\/\/stackoverflow.com\/questions\/2526520\/how-does-a-perl-program-know-where-to-find-the-file-containing-perl-module-it-use\r\n  [9]: https:\/\/stackoverflow.com\/questions\/2474588\/how-do-i-use-beta-perl-modules-from-beta-perl-scripts\r\n  [10]: https:\/\/stackoverflow.com\/questions\/2541119\/when-is-a-subroutine-reference-in-inc-called",
        "body": "<p>We will look at how the contents of this array are constructed and can be manipulated to affect where the Perl interpreter will find module files.<\/p>\n<ol>\n<li>Default <code>@INC<\/code><\/li>\n<\/ol>\n<p>The Perl interpreter is <a href=\"http:\/\/search.cpan.org\/perldoc\/INSTALL\" rel=\"nofollow noreferrer\">compiled with a specific default value for <code>@INC<\/code><\/a>. To find this value, run the command <code>env -i perl -V<\/code> (<code>env -i<\/code> ignores the <code>PERL5LIB<\/code> environment variable - see #2) and in the output you will see something like this:<\/p>\n<blockquote>\n<pre><code>$ env -i perl -V\n...\n@INC:\n \/usr\/lib\/perl5\/site_perl\/5.18.0\/x86_64-linux-thread-multi-ld\n \/usr\/lib\/perl5\/site_perl\/5.18.0\n \/usr\/lib\/perl5\/5.18.0\/x86_64-linux-thread-multi-ld\n \/usr\/lib\/perl5\/5.18.0\n .\n<\/code><\/pre>\n<\/blockquote>\n<p>Note the <code>.<\/code> at the end; this is the current directory (which is not necessarily the same as the script's directory). It is missing in Perl 5.26+, and when Perl runs with <a href=\"http:\/\/perldoc.perl.org\/perlrun.html#*-T*\" rel=\"nofollow noreferrer\"><code>-T<\/code> (taint checks enabled)<\/a>.<\/p>\n<p>To change the default path when configuring compilation of the Perl binary, set the configuration option <a href=\"http:\/\/search.cpan.org\/perldoc?INSTALL#otherlibdirs\" rel=\"nofollow noreferrer\"><code>otherlibdirs<\/code><\/a>:<\/p>\n<blockquote>\n<p><code>Configure -Dotherlibdirs=\/usr\/lib\/perl5\/site_perl\/5.16.3<\/code><\/p>\n<\/blockquote>\n<ol start=\"2\">\n<li>Environment variable <code>PERL5LIB<\/code> (or <code>PERLLIB<\/code>)<\/li>\n<\/ol>\n<p>Perl prepends a list of directories (colon-separated) contained in the <code>PERL5LIB<\/code> environment variable of your shell to <code>@INC<\/code> (if <code>PERL5LIB<\/code> is not defined, <code>PERLLIB<\/code> is used). To see the contents of <code>@INC<\/code> after the <code>PERL5LIB<\/code> and <code>PERLLIB<\/code> environment variables have taken effect, run <code>perl -V<\/code>:<\/p>\n<blockquote>\n<pre><code>$ perl -V\n...\n%ENV:\n  PERL5LIB=&quot;\/home\/myuser\/test&quot;\n@INC:\n \/home\/myuser\/test\n \/usr\/lib\/perl5\/site_perl\/5.18.0\/x86_64-linux-thread-multi-ld\n \/usr\/lib\/perl5\/site_perl\/5.18.0\n \/usr\/lib\/perl5\/5.18.0\/x86_64-linux-thread-multi-ld\n \/usr\/lib\/perl5\/5.18.0\n .\n<\/code><\/pre>\n<\/blockquote>\n<ol start=\"3\">\n<li><code>-I <\/code> command-line option<\/li>\n<\/ol>\n<p>Perl prepends a list of directories (colon-separated) passed as the parameter of the <code>-I<\/code> command-line option to <code>@INC<\/code>. This can be done in three ways, as usual with Perl options:<\/p>\n<ul>\n<li><p>Pass it on command line:<\/p>\n<pre><code>    perl -I \/my\/moduledir your_script.pl\n<\/code><\/pre>\n<\/li>\n<li><p>Pass it via the first line (shebang) of your Perl script:<\/p>\n<pre><code>    #!\/usr\/local\/bin\/perl -w -I \/my\/moduledir\n<\/code><\/pre>\n<\/li>\n<li><p>Pass it as part of the <code>PERL5OPT<\/code> (or <code>PERLOPT<\/code>) environment variable (see chapter 19.02 in <a href=\"http:\/\/oreilly.com\/catalog\/9780596004927\" rel=\"nofollow noreferrer\">Programming Perl<\/a>)<\/p>\n<\/li>\n<\/ul>\n<ol start=\"4\">\n<li>Pass it via the <a href=\"http:\/\/perldoc.perl.org\/lib.html\" rel=\"nofollow noreferrer\"><code>lib<\/code> pragma<\/a><\/li>\n<\/ol>\n<p>Perl prepends a list of directories passed in to it via <code>use lib<\/code> to <code>@INC<\/code>.<\/p>\n<p>In a program:<\/p>\n<pre><code>    use lib (&quot;\/dir1&quot;, &quot;\/dir2&quot;);\n<\/code><\/pre>\n<p>On the command line:<\/p>\n<pre><code>    perl -Mlib=\/dir1,\/dir2\n<\/code><\/pre>\n<p>You can also <a href=\"http:\/\/perldoc.perl.org\/lib.html#Deleting-directories-from-@INC\" rel=\"nofollow noreferrer\">remove the directories from <code>@INC<\/code> via <code>no lib<\/code><\/a>.<\/p>\n<ol start=\"5\">\n<li>You can directly manipulate <code>@INC<\/code> as a regular Perl array.<\/li>\n<\/ol>\n<p>Note: Since <code>@INC<\/code> is used during the compilation phase, this must be done inside a <code>BEGIN {}<\/code> block, which precedes the <code>use MyModule<\/code> statement.<\/p>\n<ul>\n<li><p>Add directories to the beginning via <code>unshift @INC, $dir<\/code>.<\/p>\n<\/li>\n<li><p>Add directories to the end via <code>push @INC, $dir<\/code>.<\/p>\n<\/li>\n<li><p>Do anything else you can do with a Perl array.<\/p>\n<\/li>\n<\/ul>\n<p>Note: The directories are <em>unshifted<\/em> onto <code>@INC<\/code> in the order listed in this answer, e.g. default <code>@INC<\/code> is last in the list, preceded by <code>PERL5LIB<\/code>, preceded by <code>-I<\/code>, preceded by <code>use lib<\/code> and direct <code>@INC<\/code> manipulation, the latter two mixed in whichever order they are in Perl code.<\/p>\n<h3>References:<\/h3>\n<ul>\n<li><a href=\"http:\/\/perldoc.perl.org\/perlmod.html#Perl-Modules\" rel=\"nofollow noreferrer\">perldoc perlmod<\/a><\/li>\n<li><a href=\"http:\/\/perldoc.perl.org\/lib.html\" rel=\"nofollow noreferrer\">perldoc lib<\/a><\/li>\n<li><a href=\"http:\/\/world.std.com\/%7Eswmcd\/steven\/perl\/module_mechanics.html\" rel=\"nofollow noreferrer\">Perl Module Mechanics - a great guide containing practical HOW-TOs<\/a><\/li>\n<li><a href=\"https:\/\/stackoverflow.com\/questions\/185114\/how-do-i-use-a-perl-module-in-a-directory-not-in-inc\">How do I 'use' a Perl module in a directory not in <code>@INC<\/code>?<\/a><\/li>\n<li><a href=\"https:\/\/rads.stackoverflow.com\/amzn\/click\/com\/0596000278\" rel=\"nofollow noreferrer\" rel=\"nofollow noreferrer\">Programming Perl<\/a> - chapter 31 part 13, ch 7.2.41<\/li>\n<li><a href=\"https:\/\/stackoverflow.com\/questions\/2526520\/how-does-a-perl-program-know-where-to-find-the-file-containing-perl-module-it-use\">How does a Perl program know where to find the file containing Perl module it uses?<\/a><\/li>\n<\/ul>\n<p>There does not seem to be a comprehensive <code>@INC<\/code> FAQ-type post on Stack Overflow, so this question is intended as one.<\/p>\n<h3>When to use each approach?<\/h3>\n<ul>\n<li><p>If the modules in a directory need to be used by many\/all scripts on your site, especially run by multiple users, that directory should be included in the default <code>@INC<\/code> compiled into the Perl binary.<\/p>\n<\/li>\n<li><p>If the modules in the directory will be used exclusively by a specific user for all the scripts that user runs (or if recompiling Perl is not an option for changing the default <code>@INC<\/code> in the previous use case), set the users' <code>PERL5LIB<\/code>, usually during user login.<\/p>\n<\/li>\n<\/ul>\n<p><em>Note: Please be aware of the usual Unix environment variable pitfalls - e.g. in certain cases running the scripts as a particular user does not guarantee running them with that user's environment set up, e.g. via <code>su<\/code>.<\/em><\/p>\n<ul>\n<li><p>If the modules in the directory need to be used only in specific circumstances (e.g. when the script(s) is executed in development\/debug mode, you can either set <code>PERL5LIB<\/code> manually, or pass the <code>-I<\/code> option to perl.<\/p>\n<\/li>\n<li><p>If the modules need to be used only for specific scripts, by <em>all<\/em> users using them, use <code>use lib<\/code>\/<code>no lib<\/code> pragmas in the program itself. It also should be used when the directory to be searched needs to be dynamically determined during runtime - e.g. from the script's command line parameters or script's path (see the <a href=\"http:\/\/p3rl.org\/FindBin\" rel=\"nofollow noreferrer\">FindBin<\/a> module for a very nice use case).<\/p>\n<\/li>\n<li><p>If the directories in <code>@INC<\/code> need to be manipulated according to some complicated logic, either impossible or too unwieldy to implement by a combination of <code>use lib<\/code>\/<code>no lib<\/code> pragmas, then use direct <code>@INC<\/code> manipulation inside a <code>BEGIN {}<\/code> block or inside a special purpose library designated for <code>@INC<\/code> manipulation, which must be used by your script(s) before any other modules are used.<\/p>\n<\/li>\n<\/ul>\n<p>An example of this is automatically switching between libraries in prod\/uat\/dev directories, with waterfall library pickup in prod if it's missing from dev and\/or UAT (the last condition makes the standard &quot;use lib + FindBin&quot; solution fairly complicated.\nA detailed illustration of this scenario is in <a href=\"https:\/\/stackoverflow.com\/questions\/2474588\/how-do-i-use-beta-perl-modules-from-beta-perl-scripts\"><em>How do I use beta Perl modules from beta Perl scripts?<\/em><\/a>.<\/p>\n<ul>\n<li>An additional use case for directly manipulating <code>@INC<\/code> is to be able to add subroutine references or object references (yes, Virginia, <code>@INC<\/code> can contain custom Perl code and not just directory names, as explained in <a href=\"https:\/\/stackoverflow.com\/questions\/2541119\/when-is-a-subroutine-reference-in-inc-called\"><em>When is a subroutine reference in @INC called?<\/em><\/a>).<\/li>\n<\/ul>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 9,
            "reputation": 220393,
            "user_id": 13,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/i.stack.imgur.com\/1XtZi.jpg?s=256&g=1",
            "display_name": "C. K. Young",
            "link": "https:\/\/stackoverflow.com\/users\/13\/c-k-young"
        },
        "is_accepted": true,
        "score": 265,
        "last_activity_date": 1315939445,
        "last_edit_date": null,
        "creation_date": 1315939445,
        "answer_id": 7406842,
        "question_id": 7406807,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "The first and third ways are the same: they evaluate an array in scalar context. I would consider this to be the standard way to get an array&#39;s size.\r\n\r\nThe second way actually returns the last index of the array, which is not (usually) the same as the array size.",
        "body": "<p>The first and third ways are the same: they evaluate an array in scalar context. I would consider this to be the standard way to get an array's size.<\/p>\n\n<p>The second way actually returns the last index of the array, which is not (usually) the same as the array size.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 88287,
            "reputation": 144640,
            "user_id": 244297,
            "user_type": "registered",
            "accept_rate": 94,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/0e726125e86b084ffec695e845b360b7?s=256&d=identicon&r=PG",
            "display_name": "Eugene Yarmash",
            "link": "https:\/\/stackoverflow.com\/users\/244297\/eugene-yarmash"
        },
        "is_accepted": true,
        "score": 261,
        "last_activity_date": 1450172450,
        "last_edit_date": 1450172450.0,
        "creation_date": 1314966060,
        "answer_id": 7283308,
        "question_id": 7283274,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "To find out if a string contains substring you can use the [`index`][1] function:\r\n\r\n    if (index($str, $substr) != -1) {\r\n        print &quot;$str contains $substr\\n&quot;;\r\n    } \r\n\r\nIt will return the position of the first occurrence of `$substr` in `$str`, or -1 if the substring is not found.\r\n\r\n  [1]: http:\/\/perldoc.perl.org\/functions\/index.html",
        "body": "<p>To find out if a string contains substring you can use the <a href=\"http:\/\/perldoc.perl.org\/functions\/index.html\" rel=\"noreferrer\"><code>index<\/code><\/a> function:<\/p>\n\n<pre><code>if (index($str, $substr) != -1) {\n    print \"$str contains $substr\\n\";\n} \n<\/code><\/pre>\n\n<p>It will return the position of the first occurrence of <code>$substr<\/code> in <code>$str<\/code>, or -1 if the substring is not found.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 57089,
            "reputation": 2926,
            "user_id": 170997,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/6e55d50d942a7d2aa008ad5d5067975d?s=256&d=identicon&r=PG",
            "display_name": "Marc",
            "link": "https:\/\/stackoverflow.com\/users\/170997\/marc"
        },
        "is_accepted": false,
        "score": 260,
        "last_activity_date": 1504474026,
        "last_edit_date": 1504474026.0,
        "creation_date": 1331843282,
        "answer_id": 9727654,
        "question_id": 2499794,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "If you are creating a rootfs using debootstrap you will need to generate the locales.  You can do this by running:\r\n\r\n    # (optional) enable missing locales\r\n    sudo nano \/etc\/locale.gen\r\n    \r\n    # then regenerate\r\n    sudo locale-gen\r\n\r\nThis tip comes from, https:\/\/help.ubuntu.com\/community\/Xen",
        "body": "<p>If you are creating a rootfs using debootstrap you will need to generate the locales.  You can do this by running:<\/p>\n\n<pre><code># (optional) enable missing locales\nsudo nano \/etc\/locale.gen\n\n# then regenerate\nsudo locale-gen\n<\/code><\/pre>\n\n<p>This tip comes from, <a href=\"https:\/\/help.ubuntu.com\/community\/Xen\" rel=\"noreferrer\">https:\/\/help.ubuntu.com\/community\/Xen<\/a><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 142044,
            "reputation": 3068,
            "user_id": 349481,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/01d76d496a66f5464d8bbc5479e061e5?s=256&d=identicon&r=PG",
            "display_name": "Aaron T Harris",
            "link": "https:\/\/stackoverflow.com\/users\/349481\/aaron-t-harris"
        },
        "is_accepted": false,
        "score": 259,
        "last_activity_date": 1441925028,
        "last_edit_date": 1441925028.0,
        "creation_date": 1308967189,
        "answer_id": 6475315,
        "question_id": 2860226,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Best general purpose - Especially short arrays (1000 items or less) and coders that are unsure of what optimizations best suit their needs.\r\n\r\n    # $value can be any regex. be safe\r\n    if ( grep( \/^$value$\/, @array ) ) {\r\n      print &quot;found it&quot;;\r\n    }\r\n\r\nIt has been mentioned that grep passes through all values even if the first value in the array matches.  This is true, however &lt;b&gt;grep is still extremely fast for most cases&lt;\/b&gt;.  If you&#39;re talking about short arrays (less than 1000 items) then most algorithms are going to be pretty fast anyway.  If you&#39;re talking about very long arrays (1,000,000 items) grep is acceptably quick regardless of whether the item is the first or the middle or last in the array.\r\n\r\n&lt;b&gt;Optimization Cases for longer arrays:&lt;\/b&gt;\r\n\r\n&lt;b&gt;If your array is sorted&lt;\/b&gt;, use a &quot;binary search&quot;.\r\n\r\nIf the &lt;b&gt;same array is repeatedly searched&lt;\/b&gt; many times, copy it into a hash first and then check the hash.  If memory is a concern, then move each item from the array into the hash. More memory efficient but destroys the original array.\r\n\r\nIf &lt;b&gt;same values are searched repeatedly&lt;\/b&gt; within the array, lazily build a cache. (as each item is searched, first check if the search result was stored in a persisted hash. if the search result is not found in the hash, then search the array and put the result in the persisted hash so that next time we&#39;ll find it in the hash and skip the search).\r\n\r\nNote: these optimizations will only be faster when dealing with long arrays.  Don&#39;t over optimize.\r\n",
        "body": "<p>Best general purpose - Especially short arrays (1000 items or less) and coders that are unsure of what optimizations best suit their needs.<\/p>\n\n<pre><code># $value can be any regex. be safe\nif ( grep( \/^$value$\/, @array ) ) {\n  print \"found it\";\n}\n<\/code><\/pre>\n\n<p>It has been mentioned that grep passes through all values even if the first value in the array matches.  This is true, however <b>grep is still extremely fast for most cases<\/b>.  If you're talking about short arrays (less than 1000 items) then most algorithms are going to be pretty fast anyway.  If you're talking about very long arrays (1,000,000 items) grep is acceptably quick regardless of whether the item is the first or the middle or last in the array.<\/p>\n\n<p><b>Optimization Cases for longer arrays:<\/b><\/p>\n\n<p><b>If your array is sorted<\/b>, use a \"binary search\".<\/p>\n\n<p>If the <b>same array is repeatedly searched<\/b> many times, copy it into a hash first and then check the hash.  If memory is a concern, then move each item from the array into the hash. More memory efficient but destroys the original array.<\/p>\n\n<p>If <b>same values are searched repeatedly<\/b> within the array, lazily build a cache. (as each item is searched, first check if the search result was stored in a persisted hash. if the search result is not found in the hash, then search the array and put the result in the persisted hash so that next time we'll find it in the hash and skip the search).<\/p>\n\n<p>Note: these optimizations will only be faster when dealing with long arrays.  Don't over optimize.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 37175,
            "reputation": 706796,
            "user_id": 106224,
            "user_type": "registered",
            "accept_rate": 96,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/a2d818d801ce38a33807f68fdd92043a?s=256&d=identicon&r=PG",
            "display_name": "BoltClock",
            "link": "https:\/\/stackoverflow.com\/users\/106224\/boltclock"
        },
        "is_accepted": true,
        "score": 254,
        "last_activity_date": 1322520558,
        "last_edit_date": null,
        "creation_date": 1322520558,
        "answer_id": 8303507,
        "question_id": 8303488,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Add the [`s` modifier](http:\/\/perldoc.perl.org\/perlre.html#Modifiers) to your regex to cause `.` to match newlines:\r\n\r\n    $string =~ \/(START)(.+?)(END)\/s;\r\n",
        "body": "<p>Add the <a href=\"http:\/\/perldoc.perl.org\/perlre.html#Modifiers\" rel=\"noreferrer\"><code>s<\/code> modifier<\/a> to your regex to cause <code>.<\/code> to match newlines:<\/p>\n\n<pre><code>$string =~ \/(START)(.+?)(END)\/s;\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 51389,
            "reputation": 14868,
            "user_id": 153545,
            "user_type": "registered",
            "accept_rate": 92,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/1917fdbabb454b750dd272c068e5f23d?s=256&d=identicon&r=PG",
            "display_name": "pavium",
            "link": "https:\/\/stackoverflow.com\/users\/153545\/pavium"
        },
        "is_accepted": true,
        "score": 241,
        "last_activity_date": 1428512000,
        "last_edit_date": 1428512000.0,
        "creation_date": 1256986512,
        "answer_id": 1654042,
        "question_id": 1654021,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "    perl -pe &#39;chomp if eof&#39; filename &gt;filename2\r\n\r\nor, to edit the file in place:\r\n\r\n    perl -pi -e &#39;chomp if eof&#39; filename\r\n\r\n&lt;sup&gt;[Editor&#39;s note: `-pi -e` was originally `-pie`, but, as noted by several commenters and explained by @hvd, the latter doesn&#39;t work.]&lt;\/sup&gt;\r\n\r\nThis was described as a &#39;perl blasphemy&#39; on the awk website I saw.\r\n\r\nBut, in a test, it worked.\r\n",
        "body": "<pre><code>perl -pe 'chomp if eof' filename &gt;filename2\n<\/code><\/pre>\n\n<p>or, to edit the file in place:<\/p>\n\n<pre><code>perl -pi -e 'chomp if eof' filename\n<\/code><\/pre>\n\n<p><sup>[Editor's note: <code>-pi -e<\/code> was originally <code>-pie<\/code>, but, as noted by several commenters and explained by @hvd, the latter doesn't work.]<\/sup><\/p>\n\n<p>This was described as a 'perl blasphemy' on the awk website I saw.<\/p>\n\n<p>But, in a test, it worked.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 37175,
            "reputation": 706796,
            "user_id": 106224,
            "user_type": "registered",
            "accept_rate": 96,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/a2d818d801ce38a33807f68fdd92043a?s=256&d=identicon&r=PG",
            "display_name": "BoltClock",
            "link": "https:\/\/stackoverflow.com\/users\/106224\/boltclock"
        },
        "is_accepted": false,
        "score": 237,
        "last_activity_date": 1305189058,
        "last_edit_date": 1305189058.0,
        "creation_date": 1305165129,
        "answer_id": 5972529,
        "question_id": 5972516,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "PHP 5.3 has a shorthand `?:` operator:\r\n\r\n    $foo = $bar ?: $baz;\r\n\r\nWhich assigns `$bar` if it&#39;s not an empty value (I don&#39;t know how this would be different in PHP from Perl), otherwise `$baz`, and is the same as this in Perl and older versions of PHP:\r\n\r\n    $foo = $bar ? $bar : $baz;\r\n\r\nBut PHP does not have a compound assignment operator for this (that is, no equivalent of Perl&#39;s `||=`).\r\n\r\nAlso, PHP will make noise if `$bar` isn&#39;t set unless you turn notices off. There is also a semantic difference between `isset()` and `empty()`. The former returns false if the variable doesn&#39;t exist, or is set to `NULL`. The latter returns true if it doesn&#39;t exist, or is set to `0`, `&#39;&#39;`, `false` or `NULL`.",
        "body": "<p>PHP 5.3 has a shorthand <code>?:<\/code> operator:<\/p>\n\n<pre><code>$foo = $bar ?: $baz;\n<\/code><\/pre>\n\n<p>Which assigns <code>$bar<\/code> if it's not an empty value (I don't know how this would be different in PHP from Perl), otherwise <code>$baz<\/code>, and is the same as this in Perl and older versions of PHP:<\/p>\n\n<pre><code>$foo = $bar ? $bar : $baz;\n<\/code><\/pre>\n\n<p>But PHP does not have a compound assignment operator for this (that is, no equivalent of Perl's <code>||=<\/code>).<\/p>\n\n<p>Also, PHP will make noise if <code>$bar<\/code> isn't set unless you turn notices off. There is also a semantic difference between <code>isset()<\/code> and <code>empty()<\/code>. The former returns false if the variable doesn't exist, or is set to <code>NULL<\/code>. The latter returns true if it doesn't exist, or is set to <code>0<\/code>, <code>''<\/code>, <code>false<\/code> or <code>NULL<\/code>.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 38258,
            "reputation": 2881,
            "user_id": 109690,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/392b012d84473225a1069aaa4428c3c4?s=256&d=identicon&r=PG",
            "display_name": "Fran Corpier",
            "link": "https:\/\/stackoverflow.com\/users\/109690\/fran-corpier"
        },
        "is_accepted": true,
        "score": 234,
        "last_activity_date": 1636147646,
        "last_edit_date": 1636147646.0,
        "creation_date": 1242786143,
        "answer_id": 885888,
        "question_id": 845060,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "How does ***`our`*** differ from ***`my`*** and what does *`our`* do?\r\n\r\nIn Summary: \r\n\r\nAvailable since Perl 5, ***`my`*** is a way to declare non-package variables, that are:\r\n\r\n   - private\r\n   - new\r\n   - non-global \r\n   - separate from any package, so that the variable *cannot* be accessed in the form of `$package_name::variable`.\r\n\r\n&lt;br&gt;\r\n\r\nOn the other hand, ***`our`*** variables are package variables, and thus automatically:\r\n\r\n   - *global* variables\r\n   - definitely *not private*\r\n   - not necessarily new\r\n   - *can* be accessed outside the package (or lexical scope) with the\r\n   qualified namespace, as `$package_name::variable`.\r\n\r\n&lt;br&gt;\r\n\r\nDeclaring a variable with ***`our`*** allows you to predeclare variables in order to use them under *`use strict`* without getting typo warnings or compile-time errors. Since Perl 5.6, it has replaced the obsolete *`use vars`*, which was only file-scoped, and not lexically scoped as is ***`our`***.\r\n\r\nFor example, the formal, qualified name for variable `$x` inside `package main` is `$main::x`. Declaring ***`our $x`*** allows you to use the bare `$x` variable without penalty (i.e., without a resulting error), in the scope of the declaration, when the script uses *`use strict`* or *`use strict &quot;vars&quot;`*. The scope might be one, or two, or more packages, or one small block.\r\n",
        "body": "<p>How does <em><strong><code>our<\/code><\/strong><\/em> differ from <em><strong><code>my<\/code><\/strong><\/em> and what does <em><code>our<\/code><\/em> do?<\/p>\n<p>In Summary:<\/p>\n<p>Available since Perl 5, <em><strong><code>my<\/code><\/strong><\/em> is a way to declare non-package variables, that are:<\/p>\n<ul>\n<li>private<\/li>\n<li>new<\/li>\n<li>non-global<\/li>\n<li>separate from any package, so that the variable <em>cannot<\/em> be accessed in the form of <code>$package_name::variable<\/code>.<\/li>\n<\/ul>\n<br>\n<p>On the other hand, <em><strong><code>our<\/code><\/strong><\/em> variables are package variables, and thus automatically:<\/p>\n<ul>\n<li><em>global<\/em> variables<\/li>\n<li>definitely <em>not private<\/em><\/li>\n<li>not necessarily new<\/li>\n<li><em>can<\/em> be accessed outside the package (or lexical scope) with the\nqualified namespace, as <code>$package_name::variable<\/code>.<\/li>\n<\/ul>\n<br>\n<p>Declaring a variable with <em><strong><code>our<\/code><\/strong><\/em> allows you to predeclare variables in order to use them under <em><code>use strict<\/code><\/em> without getting typo warnings or compile-time errors. Since Perl 5.6, it has replaced the obsolete <em><code>use vars<\/code><\/em>, which was only file-scoped, and not lexically scoped as is <em><strong><code>our<\/code><\/strong><\/em>.<\/p>\n<p>For example, the formal, qualified name for variable <code>$x<\/code> inside <code>package main<\/code> is <code>$main::x<\/code>. Declaring <em><strong><code>our $x<\/code><\/strong><\/em> allows you to use the bare <code>$x<\/code> variable without penalty (i.e., without a resulting error), in the scope of the declaration, when the script uses <em><code>use strict<\/code><\/em> or <em><code>use strict &quot;vars&quot;<\/code><\/em>. The scope might be one, or two, or more packages, or one small block.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 135,
            "reputation": 15091,
            "user_id": 164,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/afb1af7924cbadd912a8b5b2f1308bba?s=256&d=identicon&r=PG",
            "display_name": "John Siracusa",
            "link": "https:\/\/stackoverflow.com\/users\/164\/john-siracusa"
        },
        "is_accepted": true,
        "score": 232,
        "last_activity_date": 1244099159,
        "last_edit_date": 1244099159.0,
        "creation_date": 1218028934,
        "answer_id": 3360,
        "question_id": 3033,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "The rule of thumb is to use the function most suited to your needs.\r\n\r\nIf you just want the keys and do not plan to ever *read* any of the values, use keys():\r\n\r\n    foreach my $key (keys %hash) { ... }\r\n\r\nIf you just want the values, use values():\r\n\r\n    foreach my $val (values %hash) { ... }\r\n\r\nIf you need the keys *and* the values, use each():\r\n\r\n    keys %hash; # reset the internal iterator so a prior each() doesn&#39;t affect the loop\r\n    while(my($k, $v) = each %hash) { ... }\r\n\r\nIf you plan to change the keys of the hash in any way *except* for deleting the current key during the iteration, then you must not use each().  For example, this code to create a new set of uppercase keys with doubled values works fine using keys():\r\n\r\n    %h = (a =&gt; 1, b =&gt; 2);\r\n    \r\n    foreach my $k (keys %h)\r\n    {\r\n      $h{uc $k} = $h{$k} * 2;\r\n    }\r\n\r\nproducing the expected resulting hash:\r\n\r\n    (a =&gt; 1, A =&gt; 2, b =&gt; 2, B =&gt; 4)\r\n\r\nBut using each() to do the same thing:\r\n\r\n    %h = (a =&gt; 1, b =&gt; 2);\r\n    \r\n    keys %h;\r\n    while(my($k, $v) = each %h)\r\n    {\r\n      $h{uc $k} = $h{$k} * 2; # BAD IDEA!\r\n    }\r\n\r\nproduces incorrect results in hard-to-predict ways.  For example:\r\n\r\n    (a =&gt; 1, A =&gt; 2, b =&gt; 2, B =&gt; 8)\r\n\r\nThis, however, is safe:\r\n\r\n    keys %h;\r\n    while(my($k, $v) = each %h)\r\n    {\r\n      if(...)\r\n      {\r\n        delete $h{$k}; # This is safe\r\n      }\r\n    }\r\n\r\nAll of this is described in the perl documentation:\r\n\r\n    % perldoc -f keys\r\n    % perldoc -f each",
        "body": "<p>The rule of thumb is to use the function most suited to your needs.<\/p>\n\n<p>If you just want the keys and do not plan to ever <em>read<\/em> any of the values, use keys():<\/p>\n\n<pre><code>foreach my $key (keys %hash) { ... }\n<\/code><\/pre>\n\n<p>If you just want the values, use values():<\/p>\n\n<pre><code>foreach my $val (values %hash) { ... }\n<\/code><\/pre>\n\n<p>If you need the keys <em>and<\/em> the values, use each():<\/p>\n\n<pre><code>keys %hash; # reset the internal iterator so a prior each() doesn't affect the loop\nwhile(my($k, $v) = each %hash) { ... }\n<\/code><\/pre>\n\n<p>If you plan to change the keys of the hash in any way <em>except<\/em> for deleting the current key during the iteration, then you must not use each().  For example, this code to create a new set of uppercase keys with doubled values works fine using keys():<\/p>\n\n<pre><code>%h = (a =&gt; 1, b =&gt; 2);\n\nforeach my $k (keys %h)\n{\n  $h{uc $k} = $h{$k} * 2;\n}\n<\/code><\/pre>\n\n<p>producing the expected resulting hash:<\/p>\n\n<pre><code>(a =&gt; 1, A =&gt; 2, b =&gt; 2, B =&gt; 4)\n<\/code><\/pre>\n\n<p>But using each() to do the same thing:<\/p>\n\n<pre><code>%h = (a =&gt; 1, b =&gt; 2);\n\nkeys %h;\nwhile(my($k, $v) = each %h)\n{\n  $h{uc $k} = $h{$k} * 2; # BAD IDEA!\n}\n<\/code><\/pre>\n\n<p>produces incorrect results in hard-to-predict ways.  For example:<\/p>\n\n<pre><code>(a =&gt; 1, A =&gt; 2, b =&gt; 2, B =&gt; 8)\n<\/code><\/pre>\n\n<p>This, however, is safe:<\/p>\n\n<pre><code>keys %h;\nwhile(my($k, $v) = each %h)\n{\n  if(...)\n  {\n    delete $h{$k}; # This is safe\n  }\n}\n<\/code><\/pre>\n\n<p>All of this is described in the perl documentation:<\/p>\n\n<pre><code>% perldoc -f keys\n% perldoc -f each\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 309711,
            "reputation": 126352,
            "user_id": 622310,
            "user_type": "registered",
            "accept_rate": 33,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/8b6d35219e1808520bc238b28161e2e6?s=256&d=identicon&r=PG",
            "display_name": "Borodin",
            "link": "https:\/\/stackoverflow.com\/users\/622310\/borodin"
        },
        "is_accepted": true,
        "score": 231,
        "last_activity_date": 1467806764,
        "last_edit_date": 1467806764.0,
        "creation_date": 1411284997,
        "answer_id": 25956935,
        "question_id": 3469080,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "&lt;!-- language-all: lang-none --&gt;\r\n\r\nPerl versions 5.10 and later support subsidiary vertical and horizontal character classes, `\\v` and `\\h`, as well as the generic whitespace character class `\\s`\r\n\r\nThe cleanest solution is to use the *horizontal whitespace* character class `\\h`. This will match tab and space from the ASCII set, non-breaking space from extended ASCII, or any of these Unicode characters\r\n\r\n    U+0009 CHARACTER TABULATION\r\n    U+0020 SPACE\r\n    U+00A0 NO-BREAK SPACE (not matched by \\s)\r\n\r\n    U+1680 OGHAM SPACE MARK\r\n    U+2000 EN QUAD\r\n    U+2001 EM QUAD\r\n    U+2002 EN SPACE\r\n    U+2003 EM SPACE\r\n    U+2004 THREE-PER-EM SPACE\r\n    U+2005 FOUR-PER-EM SPACE\r\n    U+2006 SIX-PER-EM SPACE\r\n    U+2007 FIGURE SPACE\r\n    U+2008 PUNCTUATION SPACE\r\n    U+2009 THIN SPACE\r\n    U+200A HAIR SPACE\r\n    U+202F NARROW NO-BREAK SPACE\r\n    U+205F MEDIUM MATHEMATICAL SPACE\r\n    U+3000 IDEOGRAPHIC SPACE\r\n\r\nThe *vertical space* pattern `\\v` is less useful, but matches these characters\r\n\r\n    U+000A LINE FEED\r\n    U+000B LINE TABULATION\r\n    U+000C FORM FEED\r\n    U+000D CARRIAGE RETURN\r\n    U+0085 NEXT LINE (not matched by \\s)\r\n\r\n    U+2028 LINE SEPARATOR\r\n    U+2029 PARAGRAPH SEPARATOR\r\n\r\nThere are seven vertical whitespace characters which match `\\v` and eighteen horizontal ones which match `\\h`. `\\s` matches twenty-three characters\r\n\r\nAll whitespace characters are either *vertical* or *horizontal* with no overlap, but they are not proper subsets because `\\h` also matches U+00A0 NO-BREAK SPACE, and `\\v` also matches U+0085 NEXT LINE, neither of which are matched by `\\s`\r\n",
        "body": "\n\n<p>Perl versions 5.10 and later support subsidiary vertical and horizontal character classes, <code>\\v<\/code> and <code>\\h<\/code>, as well as the generic whitespace character class <code>\\s<\/code><\/p>\n\n<p>The cleanest solution is to use the <em>horizontal whitespace<\/em> character class <code>\\h<\/code>. This will match tab and space from the ASCII set, non-breaking space from extended ASCII, or any of these Unicode characters<\/p>\n\n<pre class=\"lang-none prettyprint-override\"><code>U+0009 CHARACTER TABULATION\nU+0020 SPACE\nU+00A0 NO-BREAK SPACE (not matched by \\s)\n\nU+1680 OGHAM SPACE MARK\nU+2000 EN QUAD\nU+2001 EM QUAD\nU+2002 EN SPACE\nU+2003 EM SPACE\nU+2004 THREE-PER-EM SPACE\nU+2005 FOUR-PER-EM SPACE\nU+2006 SIX-PER-EM SPACE\nU+2007 FIGURE SPACE\nU+2008 PUNCTUATION SPACE\nU+2009 THIN SPACE\nU+200A HAIR SPACE\nU+202F NARROW NO-BREAK SPACE\nU+205F MEDIUM MATHEMATICAL SPACE\nU+3000 IDEOGRAPHIC SPACE\n<\/code><\/pre>\n\n<p>The <em>vertical space<\/em> pattern <code>\\v<\/code> is less useful, but matches these characters<\/p>\n\n<pre class=\"lang-none prettyprint-override\"><code>U+000A LINE FEED\nU+000B LINE TABULATION\nU+000C FORM FEED\nU+000D CARRIAGE RETURN\nU+0085 NEXT LINE (not matched by \\s)\n\nU+2028 LINE SEPARATOR\nU+2029 PARAGRAPH SEPARATOR\n<\/code><\/pre>\n\n<p>There are seven vertical whitespace characters which match <code>\\v<\/code> and eighteen horizontal ones which match <code>\\h<\/code>. <code>\\s<\/code> matches twenty-three characters<\/p>\n\n<p>All whitespace characters are either <em>vertical<\/em> or <em>horizontal<\/em> with no overlap, but they are not proper subsets because <code>\\h<\/code> also matches U+00A0 NO-BREAK SPACE, and <code>\\v<\/code> also matches U+0085 NEXT LINE, neither of which are matched by <code>\\s<\/code><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 16719,
            "reputation": 226280,
            "user_id": 36723,
            "user_type": "registered",
            "accept_rate": 97,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/d5a138149601087e78436b67718578cd?s=256&d=identicon&r=PG",
            "display_name": "bdonlan",
            "link": "https:\/\/stackoverflow.com\/users\/36723\/bdonlan"
        },
        "is_accepted": true,
        "score": 227,
        "last_activity_date": 1242788073,
        "last_edit_date": null,
        "creation_date": 1242788073,
        "answer_id": 885951,
        "question_id": 885908,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "In perl, they result in the same opcodes:\r\n\r\n    $ perl -MO=Concise -e &#39;for(;;) { print &quot;foo\\n&quot; }&#39;\r\n    a  &lt;@&gt; leave[1 ref] vKP\/REFC -&gt;(end)\r\n    1     &lt;0&gt; enter -&gt;2\r\n    2     &lt;;&gt; nextstate(main 2 -e:1) v -&gt;3\r\n    9     &lt;2&gt; leaveloop vK\/2 -&gt;a\r\n    3        &lt;{&gt; enterloop(next-&gt;8 last-&gt;9 redo-&gt;4) v -&gt;4\r\n    -        &lt;@&gt; lineseq vK -&gt;9\r\n    4           &lt;;&gt; nextstate(main 1 -e:1) v -&gt;5\r\n    7           &lt;@&gt; print vK -&gt;8\r\n    5              &lt;0&gt; pushmark s -&gt;6\r\n    6              &lt;$&gt; const[PV &quot;foo\\n&quot;] s -&gt;7\r\n    8           &lt;0&gt; unstack v -&gt;4\r\n    -e syntax OK\r\n\r\n    $ perl -MO=Concise -e &#39;while(1) { print &quot;foo\\n&quot; }&#39;\r\n    a  &lt;@&gt; leave[1 ref] vKP\/REFC -&gt;(end)\r\n    1     &lt;0&gt; enter -&gt;2\r\n    2     &lt;;&gt; nextstate(main 2 -e:1) v -&gt;3\r\n    9     &lt;2&gt; leaveloop vK\/2 -&gt;a\r\n    3        &lt;{&gt; enterloop(next-&gt;8 last-&gt;9 redo-&gt;4) v -&gt;4\r\n    -        &lt;@&gt; lineseq vK -&gt;9\r\n    4           &lt;;&gt; nextstate(main 1 -e:1) v -&gt;5\r\n    7           &lt;@&gt; print vK -&gt;8\r\n    5              &lt;0&gt; pushmark s -&gt;6\r\n    6              &lt;$&gt; const[PV &quot;foo\\n&quot;] s -&gt;7\r\n    8           &lt;0&gt; unstack v -&gt;4\r\n    -e syntax OK\r\n\r\nLikewise in GCC:\r\n\r\n    #include &lt;stdio.h&gt;\r\n    \r\n    void t_while() {\r\n    \twhile(1)\r\n    \t\tprintf(&quot;foo\\n&quot;);\r\n    }\r\n    \r\n    void t_for() {\r\n    \tfor(;;)\r\n    \t\tprintf(&quot;foo\\n&quot;);\r\n    }\r\n\r\n        .file\t&quot;test.c&quot;\r\n        .section\t.rodata\r\n    .LC0:\r\n        .string\t&quot;foo&quot;\r\n        .text\r\n    .globl t_while\r\n        .type\tt_while, @function\r\n    t_while:\r\n    .LFB2:\r\n        pushq\t%rbp\r\n    .LCFI0:\r\n        movq\t%rsp, %rbp\r\n    .LCFI1:\r\n    .L2:\r\n        movl\t$.LC0, %edi\r\n        call\tputs\r\n        jmp\t.L2\r\n    .LFE2:\r\n        .size\tt_while, .-t_while\r\n    .globl t_for\r\n        .type\tt_for, @function\r\n    t_for:\r\n    .LFB3:\r\n        pushq\t%rbp\r\n    .LCFI2:\r\n        movq\t%rsp, %rbp\r\n    .LCFI3:\r\n    .L5:\r\n        movl\t$.LC0, %edi\r\n        call\tputs\r\n        jmp\t.L5\r\n    .LFE3:\r\n        .size\tt_for, .-t_for\r\n        .section\t.eh_frame,&quot;a&quot;,@progbits\r\n    .Lframe1:\r\n        .long\t.LECIE1-.LSCIE1\r\n    .LSCIE1:\r\n        .long\t0x0\r\n        .byte\t0x1\r\n        .string\t&quot;zR&quot;\r\n        .uleb128 0x1\r\n        .sleb128 -8\r\n        .byte\t0x10\r\n        .uleb128 0x1\r\n        .byte\t0x3\r\n        .byte\t0xc\r\n        .uleb128 0x7\r\n        .uleb128 0x8\r\n        .byte\t0x90\r\n        .uleb128 0x1\r\n        .align 8\r\n    .LECIE1:\r\n    .LSFDE1:\r\n        .long\t.LEFDE1-.LASFDE1\r\n    .LASFDE1:\r\n        .long\t.LASFDE1-.Lframe1\r\n        .long\t.LFB2\r\n        .long\t.LFE2-.LFB2\r\n        .uleb128 0x0\r\n        .byte\t0x4\r\n        .long\t.LCFI0-.LFB2\r\n        .byte\t0xe\r\n        .uleb128 0x10\r\n        .byte\t0x86\r\n        .uleb128 0x2\r\n        .byte\t0x4\r\n        .long\t.LCFI1-.LCFI0\r\n        .byte\t0xd\r\n        .uleb128 0x6\r\n        .align 8\r\n    .LEFDE1:\r\n    .LSFDE3:\r\n        .long\t.LEFDE3-.LASFDE3\r\n    .LASFDE3:\r\n        .long\t.LASFDE3-.Lframe1\r\n        .long\t.LFB3\r\n        .long\t.LFE3-.LFB3\r\n        .uleb128 0x0\r\n        .byte\t0x4\r\n        .long\t.LCFI2-.LFB3\r\n        .byte\t0xe\r\n        .uleb128 0x10\r\n        .byte\t0x86\r\n        .uleb128 0x2\r\n        .byte\t0x4\r\n        .long\t.LCFI3-.LCFI2\r\n        .byte\t0xd\r\n        .uleb128 0x6\r\n        .align 8\r\n    .LEFDE3:\r\n        .ident\t&quot;GCC: (Ubuntu 4.3.3-5ubuntu4) 4.3.3&quot;\r\n        .section\t.note.GNU-stack,&quot;&quot;,@progbits\r\n\r\n\r\nSo I guess the answer is, they&#39;re the same in many compilers. Of course, for some other compilers this may not necessarily be the case, but chances are the code inside of the loop is going to be a few thousand times more expensive than the loop itself anyway, so who cares?",
        "body": "<p>In perl, they result in the same opcodes:<\/p>\n\n<pre><code>$ perl -MO=Concise -e 'for(;;) { print \"foo\\n\" }'\na  &lt;@&gt; leave[1 ref] vKP\/REFC -&gt;(end)\n1     &lt;0&gt; enter -&gt;2\n2     &lt;;&gt; nextstate(main 2 -e:1) v -&gt;3\n9     &lt;2&gt; leaveloop vK\/2 -&gt;a\n3        &lt;{&gt; enterloop(next-&gt;8 last-&gt;9 redo-&gt;4) v -&gt;4\n-        &lt;@&gt; lineseq vK -&gt;9\n4           &lt;;&gt; nextstate(main 1 -e:1) v -&gt;5\n7           &lt;@&gt; print vK -&gt;8\n5              &lt;0&gt; pushmark s -&gt;6\n6              &lt;$&gt; const[PV \"foo\\n\"] s -&gt;7\n8           &lt;0&gt; unstack v -&gt;4\n-e syntax OK\n\n$ perl -MO=Concise -e 'while(1) { print \"foo\\n\" }'\na  &lt;@&gt; leave[1 ref] vKP\/REFC -&gt;(end)\n1     &lt;0&gt; enter -&gt;2\n2     &lt;;&gt; nextstate(main 2 -e:1) v -&gt;3\n9     &lt;2&gt; leaveloop vK\/2 -&gt;a\n3        &lt;{&gt; enterloop(next-&gt;8 last-&gt;9 redo-&gt;4) v -&gt;4\n-        &lt;@&gt; lineseq vK -&gt;9\n4           &lt;;&gt; nextstate(main 1 -e:1) v -&gt;5\n7           &lt;@&gt; print vK -&gt;8\n5              &lt;0&gt; pushmark s -&gt;6\n6              &lt;$&gt; const[PV \"foo\\n\"] s -&gt;7\n8           &lt;0&gt; unstack v -&gt;4\n-e syntax OK\n<\/code><\/pre>\n\n<p>Likewise in GCC:<\/p>\n\n<pre><code>#include &lt;stdio.h&gt;\n\nvoid t_while() {\n    while(1)\n        printf(\"foo\\n\");\n}\n\nvoid t_for() {\n    for(;;)\n        printf(\"foo\\n\");\n}\n\n    .file   \"test.c\"\n    .section    .rodata\n.LC0:\n    .string \"foo\"\n    .text\n.globl t_while\n    .type   t_while, @function\nt_while:\n.LFB2:\n    pushq   %rbp\n.LCFI0:\n    movq    %rsp, %rbp\n.LCFI1:\n.L2:\n    movl    $.LC0, %edi\n    call    puts\n    jmp .L2\n.LFE2:\n    .size   t_while, .-t_while\n.globl t_for\n    .type   t_for, @function\nt_for:\n.LFB3:\n    pushq   %rbp\n.LCFI2:\n    movq    %rsp, %rbp\n.LCFI3:\n.L5:\n    movl    $.LC0, %edi\n    call    puts\n    jmp .L5\n.LFE3:\n    .size   t_for, .-t_for\n    .section    .eh_frame,\"a\",@progbits\n.Lframe1:\n    .long   .LECIE1-.LSCIE1\n.LSCIE1:\n    .long   0x0\n    .byte   0x1\n    .string \"zR\"\n    .uleb128 0x1\n    .sleb128 -8\n    .byte   0x10\n    .uleb128 0x1\n    .byte   0x3\n    .byte   0xc\n    .uleb128 0x7\n    .uleb128 0x8\n    .byte   0x90\n    .uleb128 0x1\n    .align 8\n.LECIE1:\n.LSFDE1:\n    .long   .LEFDE1-.LASFDE1\n.LASFDE1:\n    .long   .LASFDE1-.Lframe1\n    .long   .LFB2\n    .long   .LFE2-.LFB2\n    .uleb128 0x0\n    .byte   0x4\n    .long   .LCFI0-.LFB2\n    .byte   0xe\n    .uleb128 0x10\n    .byte   0x86\n    .uleb128 0x2\n    .byte   0x4\n    .long   .LCFI1-.LCFI0\n    .byte   0xd\n    .uleb128 0x6\n    .align 8\n.LEFDE1:\n.LSFDE3:\n    .long   .LEFDE3-.LASFDE3\n.LASFDE3:\n    .long   .LASFDE3-.Lframe1\n    .long   .LFB3\n    .long   .LFE3-.LFB3\n    .uleb128 0x0\n    .byte   0x4\n    .long   .LCFI2-.LFB3\n    .byte   0xe\n    .uleb128 0x10\n    .byte   0x86\n    .uleb128 0x2\n    .byte   0x4\n    .long   .LCFI3-.LCFI2\n    .byte   0xd\n    .uleb128 0x6\n    .align 8\n.LEFDE3:\n    .ident  \"GCC: (Ubuntu 4.3.3-5ubuntu4) 4.3.3\"\n    .section    .note.GNU-stack,\"\",@progbits\n<\/code><\/pre>\n\n<p>So I guess the answer is, they're the same in many compilers. Of course, for some other compilers this may not necessarily be the case, but chances are the code inside of the loop is going to be a few thousand times more expensive than the loop itself anyway, so who cares?<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 202404,
            "reputation": 208601,
            "user_id": 449449,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/b52c27e86c87d931e654d6a2d2cdf974?s=256&d=identicon&r=PG",
            "display_name": "eumiro",
            "link": "https:\/\/stackoverflow.com\/users\/449449\/eumiro"
        },
        "is_accepted": true,
        "score": 225,
        "last_activity_date": 1569483995,
        "last_edit_date": 1569483995.0,
        "creation_date": 1309855129,
        "answer_id": 6579933,
        "question_id": 6579876,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "If you don&#39;t want to use `str.lower()`, you can use a [regular expression][1]:\r\n\r\n    import re\r\n\r\n    if re.search(&#39;mandy&#39;, &#39;Mandy Pande&#39;, re.IGNORECASE):\r\n        # Is True\r\n\r\n  [1]: http:\/\/en.wikipedia.org\/wiki\/Regular_expression\r\n",
        "body": "<p>If you don't want to use <code>str.lower()<\/code>, you can use a <a href=\"http:\/\/en.wikipedia.org\/wiki\/Regular_expression\" rel=\"noreferrer\">regular expression<\/a>:<\/p>\n\n<pre><code>import re\n\nif re.search('mandy', 'Mandy Pande', re.IGNORECASE):\n    # Is True\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 268505,
            "reputation": 58166,
            "user_id": 557306,
            "user_type": "registered",
            "accept_rate": 98,
            "profile_image": "https:\/\/i.stack.imgur.com\/OAmpG.jpg?s=256&g=1",
            "display_name": "sidyll",
            "link": "https:\/\/stackoverflow.com\/users\/557306\/sidyll"
        },
        "is_accepted": true,
        "score": 221,
        "last_activity_date": 1559395631,
        "last_edit_date": 1559395631.0,
        "creation_date": 1298395265,
        "answer_id": 5081519,
        "question_id": 5080988,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Since you need to match content without including it in the result (must\r\nmatch `name=&quot;`  but it&#39;s not  part of the  desired result) some  form of\r\nzero-width matching  or group  capturing is required.  This can  be done\r\neasily with the following tools:\r\n\r\n### Perl\r\n\r\nWith Perl you  could use the `n`  option to loop line by  line and print\r\nthe content of a capturing group if it matches:\r\n\r\n    perl -ne &#39;print &quot;$1\\n&quot; if \/name=&quot;(.*?)&quot;\/&#39; filename\r\n\r\n### GNU grep\r\n\r\nIf you have an improved version of  grep, such as GNU grep, you may have\r\nthe  `-P` option  available. This  option will  enable Perl-like  regex,\r\nallowing you to use `\\K` which  is a shorthand lookbehind. It will reset\r\nthe match position, so anything before it is zero-width.\r\n\r\n    grep -Po &#39;name=&quot;\\K.*?(?=&quot;)&#39; filename\r\n\r\nThe `o`  option makes grep print  only the matched text,  instead of the\r\nwhole line.\r\n\r\n### Vim - Text Editor\r\n\r\nAnother way  is to  use a  text editor  directly. With  Vim, one  of the\r\nvarious  ways of  accomplishing this  would be  to delete  lines without\r\n`name=` and then extract the content from the resulting lines:\r\n\r\n    :v\/.*name=&quot;\\v([^&quot;]+).*\/d|%s\/\/\\1\r\n\r\n---\r\n\r\n### Standard grep\r\n\r\nIf you  don&#39;t have  access to  these tools,  for some  reason, something\r\nsimilar could be achieved with  standard grep. However, without the look\r\naround it will require some cleanup later:\r\n\r\n    grep -o &#39;name=&quot;[^&quot;]*&quot;&#39; filename\r\n\r\n---\r\n\r\n### A note about saving results\r\n\r\nIn all of the commands above the  results will be sent to `stdout`. It&#39;s\r\nimportant to remember  that you can always  save them by piping  it to a\r\nfile by appending:\r\n\r\n    &gt; result\r\n\r\nto the end of the command.\r\n",
        "body": "<p>Since you need to match content without including it in the result (must\nmatch <code>name=\"<\/code>  but it's not  part of the  desired result) some  form of\nzero-width matching  or group  capturing is required.  This can  be done\neasily with the following tools:<\/p>\n\n<h3>Perl<\/h3>\n\n<p>With Perl you  could use the <code>n<\/code>  option to loop line by  line and print\nthe content of a capturing group if it matches:<\/p>\n\n<pre><code>perl -ne 'print \"$1\\n\" if \/name=\"(.*?)\"\/' filename\n<\/code><\/pre>\n\n<h3>GNU grep<\/h3>\n\n<p>If you have an improved version of  grep, such as GNU grep, you may have\nthe  <code>-P<\/code> option  available. This  option will  enable Perl-like  regex,\nallowing you to use <code>\\K<\/code> which  is a shorthand lookbehind. It will reset\nthe match position, so anything before it is zero-width.<\/p>\n\n<pre><code>grep -Po 'name=\"\\K.*?(?=\")' filename\n<\/code><\/pre>\n\n<p>The <code>o<\/code>  option makes grep print  only the matched text,  instead of the\nwhole line.<\/p>\n\n<h3>Vim - Text Editor<\/h3>\n\n<p>Another way  is to  use a  text editor  directly. With  Vim, one  of the\nvarious  ways of  accomplishing this  would be  to delete  lines without\n<code>name=<\/code> and then extract the content from the resulting lines:<\/p>\n\n<pre><code>:v\/.*name=\"\\v([^\"]+).*\/d|%s\/\/\\1\n<\/code><\/pre>\n\n<hr>\n\n<h3>Standard grep<\/h3>\n\n<p>If you  don't have  access to  these tools,  for some  reason, something\nsimilar could be achieved with  standard grep. However, without the look\naround it will require some cleanup later:<\/p>\n\n<pre><code>grep -o 'name=\"[^\"]*\"' filename\n<\/code><\/pre>\n\n<hr>\n\n<h3>A note about saving results<\/h3>\n\n<p>In all of the commands above the  results will be sent to <code>stdout<\/code>. It's\nimportant to remember  that you can always  save them by piping  it to a\nfile by appending:<\/p>\n\n<pre><code>&gt; result\n<\/code><\/pre>\n\n<p>to the end of the command.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 3591,
            "reputation": 333165,
            "user_id": 5190,
            "user_type": "moderator",
            "accept_rate": 76,
            "profile_image": "https:\/\/i.stack.imgur.com\/WWHqF.jpg?s=256&g=1",
            "display_name": "Vinko Vrsalovic",
            "link": "https:\/\/stackoverflow.com\/users\/5190\/vinko-vrsalovic"
        },
        "is_accepted": true,
        "score": 215,
        "last_activity_date": 1250176518,
        "last_edit_date": 1250176518.0,
        "creation_date": 1223387652,
        "answer_id": 178551,
        "question_id": 178539,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "      \r\nOutput of [`perldoc -q round`][round]\r\n\r\n&lt;blockquote&gt;\r\nDoes Perl have a round() function?  What about ceil() and floor()?\r\nTrig functions?\r\n&lt;p&gt;\r\nRemember that &lt;a href=&quot;http:\/\/perldoc.perl.org\/functions\/int.html&quot;&gt;&lt;code&gt;int()&lt;\/code&gt;&lt;\/a&gt; merely truncates toward &lt;code&gt;0&lt;\/code&gt;.  For rounding to a certain number of digits, &lt;a href=&quot;http:\/\/perldoc.perl.org\/functions\/sprintf.html&quot;&gt;&lt;code&gt;sprintf()&lt;\/code&gt;&lt;\/a&gt; or &lt;a href=&quot;http:\/\/perldoc.perl.org\/functions\/printf.html&quot;&gt;&lt;code&gt;printf()&lt;\/code&gt;&lt;\/a&gt; is usually the easiest\r\nroute.\r\n&lt;p&gt;\r\n&lt;pre&gt;&lt;code&gt;    printf(&quot;%.3f&quot;, 3.1415926535);       # prints 3.142\r\n&lt;\/code&gt;&lt;\/pre&gt;\r\n&lt;p&gt;\r\nThe &lt;a href=&quot;http:\/\/perldoc.perl.org\/POSIX.html&quot;&gt;&lt;code&gt;POSIX&lt;\/code&gt;&lt;\/a&gt; module (part of the standard Perl distribution) implements\r\n&lt;code&gt;ceil()&lt;\/code&gt;, &lt;code&gt;floor()&lt;\/code&gt;, and a number of other mathematical and trigonometric\r\nfunctions.\r\n&lt;p&gt;\r\n&lt;pre&gt;&lt;code&gt;    use POSIX;\r\n    $ceil   = ceil(3.5);                        # 4\r\n    $floor  = floor(3.5);                       # 3\r\n&lt;\/code&gt;&lt;\/pre&gt;\r\n&lt;p&gt;\r\nIn 5.000 to 5.003 perls, trigonometry was done in the &lt;a href=&quot;http:\/\/perldoc.perl.org\/Math\/Complex.html&quot;&gt;&lt;code&gt;Math::Complex&lt;\/code&gt;&lt;\/a&gt;\r\nmodule.  With 5.004, the &lt;a href=&quot;http:\/\/perldoc.perl.org\/Math\/Trig.html&quot;&gt;&lt;code&gt;Math::Trig&lt;\/code&gt;&lt;\/a&gt; module (part of the standard Perl\r\ndistribution) implements the trigonometric functions. Internally it\r\nuses the &lt;a href=&quot;http:\/\/perldoc.perl.org\/Math\/Complex.html&quot;&gt;&lt;code&gt;Math::Complex&lt;\/code&gt;&lt;\/a&gt; module and some functions can break out from the\r\nreal axis into the complex plane, for example the inverse sine of 2.\r\n&lt;p&gt;\r\nRounding in financial applications can have serious implications, and\r\nthe rounding method used should be specified precisely.  In these\r\ncases, it probably pays not to trust whichever system rounding is being\r\nused by Perl, but to instead implement the rounding function you need\r\nyourself.\r\n&lt;p&gt;\r\nTo see why, notice how you&#39;ll still have an issue on half-way-point\r\nalternation:\r\n&lt;p&gt;\r\n&lt;pre&gt;&lt;code&gt;    for ($i = 0; $i &amp;lt; 1.01; $i += 0.05) { printf &quot;%.1f &quot;,$i}\r\n\r\n    0.0 0.1 0.1 0.2 0.2 0.2 0.3 0.3 0.4 0.4 0.5 0.5 0.6 0.7 0.7\r\n    0.8 0.8 0.9 0.9 1.0 1.0\r\n&lt;\/code&gt;&lt;\/pre&gt;\r\n&lt;p&gt;\r\nDon&#39;t blame Perl.  It&#39;s the same as in C.  IEEE says we have to do\r\nthis.  Perl numbers whose absolute values are integers under &lt;code&gt;2**31&lt;\/code&gt; (on\r\n32 bit machines) will work pretty much like mathematical integers.\r\nOther numbers are not guaranteed.\r\n&lt;\/p&gt;\r\n&lt;\/blockquote&gt;\r\n\r\n[round]: http:\/\/perldoc.perl.org\/perlfaq4.html#Does-Perl-have-a-round%28)-function%3f--What-about-ceil()-and-floor()%3f--Trig-functions%3f\r\n[sprintf]:       http:\/\/perldoc.perl.org\/functions\/sprintf.html\r\n[printf]:        http:\/\/perldoc.perl.org\/functions\/printf.html\r\n[int]:           http:\/\/perldoc.perl.org\/functions\/int.html\r\n[Math::Trig]:    http:\/\/perldoc.perl.org\/Math\/Trig.html\r\n[POSIX]:         http:\/\/perldoc.perl.org\/POSIX.html\r\n[Math::Complex]: http:\/\/perldoc.perl.org\/Math\/Complex.html",
        "body": "<p>Output of <a href=\"http:\/\/perldoc.perl.org\/perlfaq4.html#Does-Perl-have-a-round%28)-function%3f--What-about-ceil()-and-floor()%3f--Trig-functions%3f\" rel=\"noreferrer\"><code>perldoc -q round<\/code><\/a><\/p>\n\n<blockquote>\nDoes Perl have a round() function?  What about ceil() and floor()?\nTrig functions?\n<p>\nRemember that <a href=\"http:\/\/perldoc.perl.org\/functions\/int.html\" rel=\"noreferrer\"><code>int()<\/code><\/a> merely truncates toward <code>0<\/code>.  For rounding to a certain number of digits, <a href=\"http:\/\/perldoc.perl.org\/functions\/sprintf.html\" rel=\"noreferrer\"><code>sprintf()<\/code><\/a> or <a href=\"http:\/\/perldoc.perl.org\/functions\/printf.html\" rel=\"noreferrer\"><code>printf()<\/code><\/a> is usually the easiest\nroute.\n<p>\n<pre><code>    printf(\"%.3f\", 3.1415926535);       # prints 3.142\n<\/code><\/pre>\n<p>\nThe <a href=\"http:\/\/perldoc.perl.org\/POSIX.html\" rel=\"noreferrer\"><code>POSIX<\/code><\/a> module (part of the standard Perl distribution) implements\n<code>ceil()<\/code>, <code>floor()<\/code>, and a number of other mathematical and trigonometric\nfunctions.\n<p>\n<pre><code>    use POSIX;\n    $ceil   = ceil(3.5);                        # 4\n    $floor  = floor(3.5);                       # 3\n<\/code><\/pre>\n<p>\nIn 5.000 to 5.003 perls, trigonometry was done in the <a href=\"http:\/\/perldoc.perl.org\/Math\/Complex.html\" rel=\"noreferrer\"><code>Math::Complex<\/code><\/a>\nmodule.  With 5.004, the <a href=\"http:\/\/perldoc.perl.org\/Math\/Trig.html\" rel=\"noreferrer\"><code>Math::Trig<\/code><\/a> module (part of the standard Perl\ndistribution) implements the trigonometric functions. Internally it\nuses the <a href=\"http:\/\/perldoc.perl.org\/Math\/Complex.html\" rel=\"noreferrer\"><code>Math::Complex<\/code><\/a> module and some functions can break out from the\nreal axis into the complex plane, for example the inverse sine of 2.\n<p>\nRounding in financial applications can have serious implications, and\nthe rounding method used should be specified precisely.  In these\ncases, it probably pays not to trust whichever system rounding is being\nused by Perl, but to instead implement the rounding function you need\nyourself.\n<p>\nTo see why, notice how you'll still have an issue on half-way-point\nalternation:\n<p>\n<pre><code>    for ($i = 0; $i &lt; 1.01; $i += 0.05) { printf \"%.1f \",$i}\n\n    0.0 0.1 0.1 0.2 0.2 0.2 0.3 0.3 0.4 0.4 0.5 0.5 0.6 0.7 0.7\n    0.8 0.8 0.9 0.9 1.0 1.0\n<\/code><\/pre>\n<p>\nDon't blame Perl.  It's the same as in C.  IEEE says we have to do\nthis.  Perl numbers whose absolute values are integers under <code>2**31<\/code> (on\n32 bit machines) will work pretty much like mathematical integers.\nOther numbers are not guaranteed.\n<\/p>\n<\/blockquote>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 35556,
            "reputation": 117234,
            "user_id": 100754,
            "user_type": "registered",
            "accept_rate": 90,
            "profile_image": "https:\/\/i.stack.imgur.com\/g9hlb.jpg?s=256&g=1",
            "display_name": "Sinan &#220;n&#252;r",
            "link": "https:\/\/stackoverflow.com\/users\/100754\/sinan-%c3%9cn%c3%bcr"
        },
        "is_accepted": true,
        "score": 213,
        "last_activity_date": 1427907217,
        "last_edit_date": 1592644375.0,
        "creation_date": 1248399279,
        "answer_id": 1175398,
        "question_id": 1175390,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "See [perldoc perlop](https:\/\/metacpan.org\/pod\/perlop#Equality-Operators). Use `lt`, `gt`, `eq`, `ne`, and `cmp` as appropriate for string comparisons:\n\n&gt;Binary `eq` returns true if the left argument is stringwise equal to the right argument.\n&gt;\n&gt;Binary `ne` returns true if the left argument is stringwise not equal to the right argument.\n&gt;\n&gt; Binary `cmp` returns -1, 0, or 1 depending on whether the left argument is stringwise less than, equal to, or greater than the right argument.\n&gt;\n&gt; Binary `~~` does a smartmatch between its arguments. ...\n&gt;\n&gt; `lt`, `le`, `ge`, `gt` and `cmp` use the collation (sort) order specified by the current locale if a legacy use locale (but not `use locale &#39;:not_characters&#39;`) is in effect. See [perllocale](https:\/\/metacpan.org\/pod\/perllocale). Do not mix these with Unicode, only with legacy binary encodings. The standard [Unicode::Collate](https:\/\/metacpan.org\/pod\/Unicode::Collate) and [Unicode::Collate::Locale](https:\/\/metacpan.org\/pod\/Unicode::Collate::Locale) modules offer much more powerful solutions to collation issues.",
        "body": "<p>See <a href=\"https:\/\/metacpan.org\/pod\/perlop#Equality-Operators\" rel=\"noreferrer\">perldoc perlop<\/a>. Use <code>lt<\/code>, <code>gt<\/code>, <code>eq<\/code>, <code>ne<\/code>, and <code>cmp<\/code> as appropriate for string comparisons:<\/p>\n<blockquote>\n<p>Binary <code>eq<\/code> returns true if the left argument is stringwise equal to the right argument.<\/p>\n<p>Binary <code>ne<\/code> returns true if the left argument is stringwise not equal to the right argument.<\/p>\n<p>Binary <code>cmp<\/code> returns -1, 0, or 1 depending on whether the left argument is stringwise less than, equal to, or greater than the right argument.<\/p>\n<p>Binary <code>~~<\/code> does a smartmatch between its arguments. ...<\/p>\n<p><code>lt<\/code>, <code>le<\/code>, <code>ge<\/code>, <code>gt<\/code> and <code>cmp<\/code> use the collation (sort) order specified by the current locale if a legacy use locale (but not <code>use locale ':not_characters'<\/code>) is in effect. See <a href=\"https:\/\/metacpan.org\/pod\/perllocale\" rel=\"noreferrer\">perllocale<\/a>. Do not mix these with Unicode, only with legacy binary encodings. The standard <a href=\"https:\/\/metacpan.org\/pod\/Unicode::Collate\" rel=\"noreferrer\">Unicode::Collate<\/a> and <a href=\"https:\/\/metacpan.org\/pod\/Unicode::Collate::Locale\" rel=\"noreferrer\">Unicode::Collate::Locale<\/a> modules offer much more powerful solutions to collation issues.<\/p>\n<\/blockquote>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4243,
            "reputation": 1306727,
            "user_id": 6309,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/i.stack.imgur.com\/I4fiW.jpg?s=256&g=1",
            "display_name": "VonC",
            "link": "https:\/\/stackoverflow.com\/users\/6309\/vonc"
        },
        "is_accepted": true,
        "score": 212,
        "last_activity_date": 1680634227,
        "last_edit_date": 1680634227.0,
        "creation_date": 1586978087,
        "answer_id": 61236803,
        "question_id": 59175332,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Check the &quot;[GitHub Actions: New workflow features][1]&quot; from April 2020, which could help in your case (to reference step outputs from previous jobs)\r\n\r\n&gt; ## Job outputs\r\n\r\n&gt; You can specify a set of outputs that you want to pass to subsequent jobs and then access those values from your needs context.\r\n\r\nSee [documentation][2]:\r\n\r\n&gt;     jobs.&lt;jobs_id&gt;.outputs\r\n\r\n&gt; **A map of outputs for a job**. \r\n&gt;\r\n&gt; Job outputs are available to all downstream jobs that depend on this job.  \r\nFor more information on defining job dependencies, see [`jobs.&lt;job_id&gt;.needs`][3].\r\n&gt;\r\n&gt; Job outputs are strings, and job outputs containing expressions are evaluated on the runner at the end of each job. Outputs containing secrets are redacted on the runner and not sent to GitHub Actions.\r\n&gt;\r\n&gt; To use job outputs in a dependent job, you can use the `needs` context.  \r\nFor more information, see &quot;[Context and expression syntax for GitHub Actions.][4]&quot;\r\n&gt;\r\n&gt; To use job outputs in a dependent job, you can use the needs context.\r\n&gt;\r\n&gt; Example\r\n\r\n    jobs:\r\n      job1:\r\n        runs-on: ubuntu-latest\r\n        # Map a step output to a job output\r\n        outputs:\r\n          output1: ${{ steps.step1.outputs.test }}\r\n          output2: ${{ steps.step2.outputs.test }}\r\n        steps:\r\n        - id: step1\r\n          run: echo &quot;test=hello&quot; &gt;&gt; $GITHUB_OUTPUT\r\n        - id: step2\r\n          run: echo &quot;test=world&quot; &gt;&gt; $GITHUB_OUTPUT\r\n      job2:\r\n        runs-on: ubuntu-latest\r\n        needs: job1\r\n        steps:\r\n        - run: echo ${{needs.job1.outputs.output1}} ${{needs.job1.outputs.output2}}\r\n\r\nNote the use of [`$GITHUB_OUTPUT`][5], instead of the [older `::set-output` now (Oct. 2022) deprecated][6].\r\n\r\n&gt; To avoid untrusted logged data to use `set-state` and `set-output` workflow commands without the intention of the workflow author we have introduced a [new set of environment files][7] to manage state and output.\r\n\r\n---\r\n\r\n[Jesse Adelman][8] adds in [the comments][9]:\r\n\r\n&gt; This seems to not work well for anything beyond a static string.  \r\nHow, for example, would I take a multiline text output of step (say, I&#39;m running a `pytest` or similar) and use that output in another job? \r\n\r\n- either write the multi-line text to a file ([jschmitter][10]&#39;s [comment][11])\r\n- or multi-line text to `&gt;&gt; $GITHUB_OUTPUT` ([maxisam][12]&#39;s [answer][13])\r\n- or base64-encode the output and then decode it in the next job ([Nate Karasch][14]&#39;s [comment][15])\r\n\r\n\r\n  [1]: https:\/\/github.blog\/changelog\/2020-04-15-github-actions-new-workflow-features\/\r\n  [2]: https:\/\/docs.github.com\/en\/actions\/learn-github-actions\/workflow-syntax-for-github-actions#jobsjob_idoutputs\r\n  [3]: https:\/\/help.github.com\/en\/actions\/reference\/workflow-syntax-for-github-actions#jobsjob_idneeds\r\n  [4]: https:\/\/help.github.com\/en\/actions\/reference\/context-and-expression-syntax-for-github-actions#needs-context\r\n  [5]: https:\/\/docs.github.com\/en\/actions\/using-workflows\/workflow-commands-for-github-actions#setting-an-output-parameter\r\n  [6]: https:\/\/github.blog\/changelog\/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands\/\r\n  [7]: https:\/\/docs.github.com\/en\/actions\/using-workflows\/workflow-commands-for-github-actions#environment-files\r\n  [8]: https:\/\/stackoverflow.com\/users\/2808798\/jesse-adelman\r\n  [9]: https:\/\/stackoverflow.com\/questions\/59175332\/using-output-from-a-previous-job-in-a-new-one-in-a-github-action\/61236803?noredirect=1#comment121129789_61236803\r\n  [10]: https:\/\/stackoverflow.com\/users\/8059748\/jschmitter\r\n  [11]: https:\/\/stackoverflow.com\/questions\/59175332\/using-output-from-a-previous-job-in-a-new-one-in-a-github-action#comment122653396_61236803\r\n  [12]: https:\/\/stackoverflow.com\/users\/667767\/maxisam\r\n  [13]: https:\/\/stackoverflow.com\/a\/75932020\/6309\r\n  [14]: https:\/\/stackoverflow.com\/users\/10393763\/nate-karasch\r\n  [15]: https:\/\/stackoverflow.com\/questions\/59175332\/using-output-from-a-previous-job-in-a-new-one-in-a-github-action#comment125445157_61236803",
        "body": "<p>Check the &quot;<a href=\"https:\/\/github.blog\/changelog\/2020-04-15-github-actions-new-workflow-features\/\" rel=\"noreferrer\">GitHub Actions: New workflow features<\/a>&quot; from April 2020, which could help in your case (to reference step outputs from previous jobs)<\/p>\n<blockquote>\n<h2>Job outputs<\/h2>\n<\/blockquote>\n<blockquote>\n<p>You can specify a set of outputs that you want to pass to subsequent jobs and then access those values from your needs context.<\/p>\n<\/blockquote>\n<p>See <a href=\"https:\/\/docs.github.com\/en\/actions\/learn-github-actions\/workflow-syntax-for-github-actions#jobsjob_idoutputs\" rel=\"noreferrer\">documentation<\/a>:<\/p>\n<blockquote>\n<pre><code>jobs.&lt;jobs_id&gt;.outputs\n<\/code><\/pre>\n<\/blockquote>\n<blockquote>\n<p><strong>A map of outputs for a job<\/strong>.<\/p>\n<p>Job outputs are available to all downstream jobs that depend on this job.<br \/>\nFor more information on defining job dependencies, see <a href=\"https:\/\/help.github.com\/en\/actions\/reference\/workflow-syntax-for-github-actions#jobsjob_idneeds\" rel=\"noreferrer\"><code>jobs.&lt;job_id&gt;.needs<\/code><\/a>.<\/p>\n<p>Job outputs are strings, and job outputs containing expressions are evaluated on the runner at the end of each job. Outputs containing secrets are redacted on the runner and not sent to GitHub Actions.<\/p>\n<p>To use job outputs in a dependent job, you can use the <code>needs<\/code> context.<br \/>\nFor more information, see &quot;<a href=\"https:\/\/help.github.com\/en\/actions\/reference\/context-and-expression-syntax-for-github-actions#needs-context\" rel=\"noreferrer\">Context and expression syntax for GitHub Actions.<\/a>&quot;<\/p>\n<p>To use job outputs in a dependent job, you can use the needs context.<\/p>\n<p>Example<\/p>\n<\/blockquote>\n<pre><code>jobs:\n  job1:\n    runs-on: ubuntu-latest\n    # Map a step output to a job output\n    outputs:\n      output1: ${{ steps.step1.outputs.test }}\n      output2: ${{ steps.step2.outputs.test }}\n    steps:\n    - id: step1\n      run: echo &quot;test=hello&quot; &gt;&gt; $GITHUB_OUTPUT\n    - id: step2\n      run: echo &quot;test=world&quot; &gt;&gt; $GITHUB_OUTPUT\n  job2:\n    runs-on: ubuntu-latest\n    needs: job1\n    steps:\n    - run: echo ${{needs.job1.outputs.output1}} ${{needs.job1.outputs.output2}}\n<\/code><\/pre>\n<p>Note the use of <a href=\"https:\/\/docs.github.com\/en\/actions\/using-workflows\/workflow-commands-for-github-actions#setting-an-output-parameter\" rel=\"noreferrer\"><code>$GITHUB_OUTPUT<\/code><\/a>, instead of the <a href=\"https:\/\/github.blog\/changelog\/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands\/\" rel=\"noreferrer\">older <code>::set-output<\/code> now (Oct. 2022) deprecated<\/a>.<\/p>\n<blockquote>\n<p>To avoid untrusted logged data to use <code>set-state<\/code> and <code>set-output<\/code> workflow commands without the intention of the workflow author we have introduced a <a href=\"https:\/\/docs.github.com\/en\/actions\/using-workflows\/workflow-commands-for-github-actions#environment-files\" rel=\"noreferrer\">new set of environment files<\/a> to manage state and output.<\/p>\n<\/blockquote>\n<hr \/>\n<p><a href=\"https:\/\/stackoverflow.com\/users\/2808798\/jesse-adelman\">Jesse Adelman<\/a> adds in <a href=\"https:\/\/stackoverflow.com\/questions\/59175332\/using-output-from-a-previous-job-in-a-new-one-in-a-github-action\/61236803?noredirect=1#comment121129789_61236803\">the comments<\/a>:<\/p>\n<blockquote>\n<p>This seems to not work well for anything beyond a static string.<br \/>\nHow, for example, would I take a multiline text output of step (say, I'm running a <code>pytest<\/code> or similar) and use that output in another job?<\/p>\n<\/blockquote>\n<ul>\n<li>either write the multi-line text to a file (<a href=\"https:\/\/stackoverflow.com\/users\/8059748\/jschmitter\">jschmitter<\/a>'s <a href=\"https:\/\/stackoverflow.com\/questions\/59175332\/using-output-from-a-previous-job-in-a-new-one-in-a-github-action#comment122653396_61236803\">comment<\/a>)<\/li>\n<li>or multi-line text to <code>&gt;&gt; $GITHUB_OUTPUT<\/code> (<a href=\"https:\/\/stackoverflow.com\/users\/667767\/maxisam\">maxisam<\/a>'s <a href=\"https:\/\/stackoverflow.com\/a\/75932020\/6309\">answer<\/a>)<\/li>\n<li>or base64-encode the output and then decode it in the next job (<a href=\"https:\/\/stackoverflow.com\/users\/10393763\/nate-karasch\">Nate Karasch<\/a>'s <a href=\"https:\/\/stackoverflow.com\/questions\/59175332\/using-output-from-a-previous-job-in-a-new-one-in-a-github-action#comment125445157_61236803\">comment<\/a>)<\/li>\n<\/ul>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 7249,
            "reputation": 15520,
            "user_id": 12523,
            "user_type": "registered",
            "accept_rate": 90,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/9574c4e4811ef2a5f4d994b75715e518?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "jkramer",
            "link": "https:\/\/stackoverflow.com\/users\/12523\/jkramer"
        },
        "is_accepted": true,
        "score": 208,
        "last_activity_date": 1274209506,
        "last_edit_date": null,
        "creation_date": 1274209506,
        "answer_id": 2860242,
        "question_id": 2860226,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "Simply turn the array into a hash:\r\n\r\n    my %params = map { $_ =&gt; 1 } @badparams;\r\n\r\n    if(exists($params{$someparam})) { ... }\r\n\r\nYou can also add more (unique) params to the list:\r\n\r\n    $params{$newparam} = 1;\r\n\r\nAnd later get a list of (unique) params back:\r\n\r\n    @badparams = keys %params;",
        "body": "<p>Simply turn the array into a hash:<\/p>\n\n<pre><code>my %params = map { $_ =&gt; 1 } @badparams;\n\nif(exists($params{$someparam})) { ... }\n<\/code><\/pre>\n\n<p>You can also add more (unique) params to the list:<\/p>\n\n<pre><code>$params{$newparam} = 1;\n<\/code><\/pre>\n\n<p>And later get a list of (unique) params back:<\/p>\n\n<pre><code>@badparams = keys %params;\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 10843,
            "reputation": 330654,
            "user_id": 20670,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/251f2449ffba9fbcc3491db6564ff4a2?s=256&d=identicon&r=PG",
            "display_name": "Tim Pietzcker",
            "link": "https:\/\/stackoverflow.com\/users\/20670\/tim-pietzcker"
        },
        "is_accepted": true,
        "score": 201,
        "last_activity_date": 1575202430,
        "last_edit_date": 1575202430.0,
        "creation_date": 1306329794,
        "answer_id": 6125137,
        "question_id": 6125098,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "You can use a [character class][1]:\r\n \r\n    \/[^\\s\\\\]\/\r\n\r\nmatches anything that is not a whitespace character nor a `\\`.  Here&#39;s another example:\r\n\r\n`[abc]` means &quot;match `a`, `b` or `c`&quot;; `[^abc]` means &quot;match any character except `a`, `b` or `c`&quot;.\r\n\r\n\r\n  [1]: http:\/\/www.regular-expressions.info\/charclass.html",
        "body": "<p>You can use a <a href=\"http:\/\/www.regular-expressions.info\/charclass.html\" rel=\"noreferrer\">character class<\/a>:<\/p>\n\n<pre><code>\/[^\\s\\\\]\/\n<\/code><\/pre>\n\n<p>matches anything that is not a whitespace character nor a <code>\\<\/code>.  Here's another example:<\/p>\n\n<p><code>[abc]<\/code> means \"match <code>a<\/code>, <code>b<\/code> or <code>c<\/code>\"; <code>[^abc]<\/code> means \"match any character except <code>a<\/code>, <code>b<\/code> or <code>c<\/code>\".<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 42267,
            "reputation": 136069,
            "user_id": 123109,
            "user_type": "registered",
            "accept_rate": 55,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/157c96de3d125abc1c363ff25c20dfaf?s=256&d=identicon&r=PG",
            "display_name": "Greg Bacon",
            "link": "https:\/\/stackoverflow.com\/users\/123109\/greg-bacon"
        },
        "is_accepted": true,
        "score": 199,
        "last_activity_date": 1494253323,
        "last_edit_date": 1494253323.0,
        "creation_date": 1270739427,
        "answer_id": 2601042,
        "question_id": 2601027,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Test whether *something* exists at given path using the `-e` file-test operator.\r\n\r\n    print &quot;$base_path exists!\\n&quot; if -e $base_path;\r\n\r\nHowever, this test is probably broader than you intend. The code above will generate output if a plain file exists at that path, but it will also fire for a directory, a named pipe, a symlink, or a more exotic possibility. [See the documentation][1] for details.\r\n\r\nGiven the extension of `.TGZ` in your question, it seems that you expect a *plain file* rather than the alternatives. The `-f` file-test operator asks whether a path leads to a plain file.\r\n\r\n    print &quot;$base_path is a plain file!\\n&quot; if -f $base_path;\r\n\r\nThe perlfunc documentation covers the long list of [Perl&#39;s file-test operators][1] that covers many situations you will encounter in practice.\r\n\r\n&gt;   * **`-r`**  \r\n&gt; File is readable by effective uid\/gid.\r\n&gt;   * **`-w`**  \r\n&gt; File is writable by effective uid\/gid.\r\n&gt;   * **`-x`**  \r\n&gt; File is executable by effective uid\/gid.\r\n&gt;   * **`-o`**  \r\n&gt; File is owned by effective uid.\r\n&gt;   * **`-R`**  \r\n&gt; File is readable by real uid\/gid.\r\n&gt;   * **`-W`**  \r\n&gt; File is writable by real uid\/gid.\r\n&gt;   * **`-X`**  \r\n&gt; File is executable by real uid\/gid.\r\n&gt;   * **`-O`**  \r\n&gt; File is owned by real uid.\r\n&gt;   * **`-e`**  \r\n&gt; File exists.\r\n&gt;   * **`-z`**  \r\n&gt; File has zero size (is empty).\r\n&gt;   * **`-s`**  \r\n&gt; File has nonzero size (returns size in bytes).\r\n&gt;   * **`-f`**  \r\n&gt; File is a plain file.\r\n&gt;   * **`-d`**  \r\n&gt; File is a directory.\r\n&gt;   * **`-l`**  \r\n&gt; File is a symbolic link (false if symlinks aren\u2019t supported by the file system).\r\n&gt;   * **`-p`**  \r\n&gt; File is a named pipe (FIFO), or Filehandle is a pipe.\r\n&gt;   * **`-S`**  \r\n&gt; File is a socket.\r\n&gt;   * **`-b`**  \r\n&gt; File is a block special file.\r\n&gt;   * **`-c`**  \r\n&gt; File is a character special file.\r\n&gt;   * **`-t`**  \r\n&gt; Filehandle is opened to a tty.\r\n&gt;   * **`-u`**  \r\n&gt; File has setuid bit set.\r\n&gt;   * **`-g`**  \r\n&gt; File has setgid bit set.\r\n&gt;   * **`-k`**  \r\n&gt; File has sticky bit set.\r\n&gt;   * **`-T`**  \r\n&gt; File is an ASCII or UTF-8 text file (heuristic guess).\r\n&gt;   * **`-B`**  \r\n&gt; File is a \u201cbinary\u201d file (opposite of `-T`).\r\n&gt;   * **`-M`**  \r\n&gt; Script start time minus file modification time, in days.\r\n&gt;   * **`-A`**  \r\n&gt; Same for access time.\r\n&gt;   * **`-C`**  \r\n&gt; Same for inode change time (Unix, may differ for other platforms)\r\n\r\n\r\n[1]: http:\/\/perldoc.perl.org\/functions\/-X.html",
        "body": "<p>Test whether <em>something<\/em> exists at given path using the <code>-e<\/code> file-test operator.<\/p>\n\n<pre><code>print \"$base_path exists!\\n\" if -e $base_path;\n<\/code><\/pre>\n\n<p>However, this test is probably broader than you intend. The code above will generate output if a plain file exists at that path, but it will also fire for a directory, a named pipe, a symlink, or a more exotic possibility. <a href=\"http:\/\/perldoc.perl.org\/functions\/-X.html\" rel=\"noreferrer\">See the documentation<\/a> for details.<\/p>\n\n<p>Given the extension of <code>.TGZ<\/code> in your question, it seems that you expect a <em>plain file<\/em> rather than the alternatives. The <code>-f<\/code> file-test operator asks whether a path leads to a plain file.<\/p>\n\n<pre><code>print \"$base_path is a plain file!\\n\" if -f $base_path;\n<\/code><\/pre>\n\n<p>The perlfunc documentation covers the long list of <a href=\"http:\/\/perldoc.perl.org\/functions\/-X.html\" rel=\"noreferrer\">Perl's file-test operators<\/a> that covers many situations you will encounter in practice.<\/p>\n\n<blockquote>\n  <ul>\n  <li><strong><code>-r<\/code><\/strong><br>\n  File is readable by effective uid\/gid.<\/li>\n  <li><strong><code>-w<\/code><\/strong><br>\n  File is writable by effective uid\/gid.<\/li>\n  <li><strong><code>-x<\/code><\/strong><br>\n  File is executable by effective uid\/gid.<\/li>\n  <li><strong><code>-o<\/code><\/strong><br>\n  File is owned by effective uid.<\/li>\n  <li><strong><code>-R<\/code><\/strong><br>\n  File is readable by real uid\/gid.<\/li>\n  <li><strong><code>-W<\/code><\/strong><br>\n  File is writable by real uid\/gid.<\/li>\n  <li><strong><code>-X<\/code><\/strong><br>\n  File is executable by real uid\/gid.<\/li>\n  <li><strong><code>-O<\/code><\/strong><br>\n  File is owned by real uid.<\/li>\n  <li><strong><code>-e<\/code><\/strong><br>\n  File exists.<\/li>\n  <li><strong><code>-z<\/code><\/strong><br>\n  File has zero size (is empty).<\/li>\n  <li><strong><code>-s<\/code><\/strong><br>\n  File has nonzero size (returns size in bytes).<\/li>\n  <li><strong><code>-f<\/code><\/strong><br>\n  File is a plain file.<\/li>\n  <li><strong><code>-d<\/code><\/strong><br>\n  File is a directory.<\/li>\n  <li><strong><code>-l<\/code><\/strong><br>\n  File is a symbolic link (false if symlinks aren\u2019t supported by the file system).<\/li>\n  <li><strong><code>-p<\/code><\/strong><br>\n  File is a named pipe (FIFO), or Filehandle is a pipe.<\/li>\n  <li><strong><code>-S<\/code><\/strong><br>\n  File is a socket.<\/li>\n  <li><strong><code>-b<\/code><\/strong><br>\n  File is a block special file.<\/li>\n  <li><strong><code>-c<\/code><\/strong><br>\n  File is a character special file.<\/li>\n  <li><strong><code>-t<\/code><\/strong><br>\n  Filehandle is opened to a tty.<\/li>\n  <li><strong><code>-u<\/code><\/strong><br>\n  File has setuid bit set.<\/li>\n  <li><strong><code>-g<\/code><\/strong><br>\n  File has setgid bit set.<\/li>\n  <li><strong><code>-k<\/code><\/strong><br>\n  File has sticky bit set.<\/li>\n  <li><strong><code>-T<\/code><\/strong><br>\n  File is an ASCII or UTF-8 text file (heuristic guess).<\/li>\n  <li><strong><code>-B<\/code><\/strong><br>\n  File is a \u201cbinary\u201d file (opposite of <code>-T<\/code>).<\/li>\n  <li><strong><code>-M<\/code><\/strong><br>\n  Script start time minus file modification time, in days.<\/li>\n  <li><strong><code>-A<\/code><\/strong><br>\n  Same for access time.<\/li>\n  <li><strong><code>-C<\/code><\/strong><br>\n  Same for inode change time (Unix, may differ for other platforms)<\/li>\n  <\/ul>\n<\/blockquote>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 19109,
            "reputation": 2841,
            "user_id": 44511,
            "user_type": "registered",
            "accept_rate": 50,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/ef9a8fd5c37b26eaf2084f8866623fa4?s=256&d=identicon&r=PG",
            "display_name": "user44511",
            "link": "https:\/\/stackoverflow.com\/users\/44511\/user44511"
        },
        "is_accepted": true,
        "score": 193,
        "last_activity_date": 1477337856,
        "last_edit_date": 1477337856.0,
        "creation_date": 1229051702,
        "answer_id": 361771,
        "question_id": 361752,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Depends on what you want to do. If you want to use the two arguments as input files, you can just pass them in and then use `&lt;&gt;` to read their contents.\r\n\r\nIf they have a different meaning, you can use `GetOpt::Std` and `GetOpt::Long` to process them easily. `GetOpt::Std` supports only single-character switches and `GetOpt::Long` is much more flexible. From [`GetOpt::Long`][1]: \r\n\r\n    use Getopt::Long;\r\n    my $data   = &quot;file.dat&quot;;\r\n    my $length = 24;\r\n    my $verbose;\r\n    $result = GetOptions (&quot;length=i&quot; =&gt; \\$length,    # numeric\r\n                        &quot;file=s&quot;   =&gt; \\$data,      # string\r\n                        &quot;verbose&quot;  =&gt; \\$verbose);  # flag\r\n\r\nAlternatively, `@ARGV` is a special variable that contains all the command line arguments. `$ARGV[0]` is the first (ie. `&quot;string1&quot;` in your case) and `$ARGV[1]` is the second argument. You don&#39;t need a special module to access `@ARGV`.\r\n\r\n  [1]: http:\/\/perldoc.perl.org\/Getopt\/Long.html",
        "body": "<p>Depends on what you want to do. If you want to use the two arguments as input files, you can just pass them in and then use <code>&lt;&gt;<\/code> to read their contents.<\/p>\n\n<p>If they have a different meaning, you can use <code>GetOpt::Std<\/code> and <code>GetOpt::Long<\/code> to process them easily. <code>GetOpt::Std<\/code> supports only single-character switches and <code>GetOpt::Long<\/code> is much more flexible. From <a href=\"http:\/\/perldoc.perl.org\/Getopt\/Long.html\" rel=\"noreferrer\"><code>GetOpt::Long<\/code><\/a>: <\/p>\n\n<pre><code>use Getopt::Long;\nmy $data   = \"file.dat\";\nmy $length = 24;\nmy $verbose;\n$result = GetOptions (\"length=i\" =&gt; \\$length,    # numeric\n                    \"file=s\"   =&gt; \\$data,      # string\n                    \"verbose\"  =&gt; \\$verbose);  # flag\n<\/code><\/pre>\n\n<p>Alternatively, <code>@ARGV<\/code> is a special variable that contains all the command line arguments. <code>$ARGV[0]<\/code> is the first (ie. <code>\"string1\"<\/code> in your case) and <code>$ARGV[1]<\/code> is the second argument. You don't need a special module to access <code>@ARGV<\/code>.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 18437,
            "reputation": 31694,
            "user_id": 42223,
            "user_type": "registered",
            "accept_rate": 79,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/d73fc2c7bd494149d303a2b87aa5a6d5?s=256&d=identicon&r=PG",
            "display_name": "dreftymac",
            "link": "https:\/\/stackoverflow.com\/users\/42223\/dreftymac"
        },
        "is_accepted": true,
        "score": 188,
        "last_activity_date": 1624647958,
        "last_edit_date": 1624647958.0,
        "creation_date": 1228753026,
        "answer_id": 350038,
        "question_id": 350018,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "## Quick Answer (TL;DR)\r\n&lt;pre&gt;\r\n\r\n    %hash1 = (%hash1, %hash2)\r\n\r\n    ## or else ...\r\n\r\n    @hash1{keys %hash2} = values %hash2;\r\n\r\n    ## or with references ...\r\n\r\n    $hash_ref1 = { %$hash_ref1, %$hash_ref2 };\r\n\r\n&lt;\/pre&gt;\r\n    \r\n## Overview\r\n\r\n* **Context:** Perl 5.x\r\n* **Problem:** The user wishes to merge two hashes&lt;sup&gt;1&lt;\/sup&gt; into a single variable \r\n\r\n## Solution\r\n\r\n* use the syntax above for simple variables\r\n* use Hash::Merge for complex nested variables\r\n\r\n## Pitfalls\r\n\r\n* What do to when both hashes contain one or more duplicate keys\r\n    * (see e.g., https:\/\/stackoverflow.com\/questions\/46945713)\r\n    * (see e.g., https:\/\/stackoverflow.com\/questions\/17216007)\r\n* Should a key-value pair with an empty value ever overwrite a key-value pair with a non-empty value?\r\n    * What constitutes an empty vs non-empty value in the first place? (e.g. `undef`, zero, empty string, `false`, falsy ...)\r\n\r\n## See also\r\n\r\n- [PM post on merging hashes](http:\/\/www.perlmonks.org\/?node_id=524456)\r\n- [PM Categorical Q&amp;A hash union](http:\/\/www.perlmonks.org\/?node_id=157715)\r\n- [Perl Cookbook 5.10. Merging Hashes](http:\/\/pleac.sourceforge.net\/pleac_perl\/hashes.html)\r\n- websearch:\/\/perlfaq &quot;merge two hashes&quot;\r\n- websearch:\/\/perl merge hash\r\n- https:\/\/metacpan.org\/pod\/Hash::Merge\r\n\r\n----\r\n## Footnotes\r\n&lt;sup&gt;1&lt;\/sup&gt; * (aka [associative-array](https:\/\/stackoverflow.com\/questions\/tagged\/associative-array), aka [dictionary](https:\/\/stackoverflow.com\/questions\/tagged\/dictionary))\r\n",
        "body": "<h2>Quick Answer (TL;DR)<\/h2>\n<pre>\n\n    %hash1 = (%hash1, %hash2)\n\n    ## or else ...\n\n    @hash1{keys %hash2} = values %hash2;\n\n    ## or with references ...\n\n    $hash_ref1 = { %$hash_ref1, %$hash_ref2 };\n\n<\/pre>\n<h2>Overview<\/h2>\n<ul>\n<li><strong>Context:<\/strong> Perl 5.x<\/li>\n<li><strong>Problem:<\/strong> The user wishes to merge two hashes<sup>1<\/sup> into a single variable<\/li>\n<\/ul>\n<h2>Solution<\/h2>\n<ul>\n<li>use the syntax above for simple variables<\/li>\n<li>use Hash::Merge for complex nested variables<\/li>\n<\/ul>\n<h2>Pitfalls<\/h2>\n<ul>\n<li>What do to when both hashes contain one or more duplicate keys\n<ul>\n<li>(see e.g., <a href=\"https:\/\/stackoverflow.com\/questions\/46945713\">Perl - Merge hash containing duplicate keys<\/a>)<\/li>\n<li>(see e.g., <a href=\"https:\/\/stackoverflow.com\/questions\/17216007\">Perl hashes: how to deal with duplicate keys and get possible pair<\/a>)<\/li>\n<\/ul>\n<\/li>\n<li>Should a key-value pair with an empty value ever overwrite a key-value pair with a non-empty value?\n<ul>\n<li>What constitutes an empty vs non-empty value in the first place? (e.g. <code>undef<\/code>, zero, empty string, <code>false<\/code>, falsy ...)<\/li>\n<\/ul>\n<\/li>\n<\/ul>\n<h2>See also<\/h2>\n<ul>\n<li><a href=\"http:\/\/www.perlmonks.org\/?node_id=524456\" rel=\"noreferrer\">PM post on merging hashes<\/a><\/li>\n<li><a href=\"http:\/\/www.perlmonks.org\/?node_id=157715\" rel=\"noreferrer\">PM Categorical Q&amp;A hash union<\/a><\/li>\n<li><a href=\"http:\/\/pleac.sourceforge.net\/pleac_perl\/hashes.html\" rel=\"noreferrer\">Perl Cookbook 5.10. Merging Hashes<\/a><\/li>\n<li>websearch:\/\/perlfaq &quot;merge two hashes&quot;<\/li>\n<li>websearch:\/\/perl merge hash<\/li>\n<li><a href=\"https:\/\/metacpan.org\/pod\/Hash::Merge\" rel=\"noreferrer\">https:\/\/metacpan.org\/pod\/Hash::Merge<\/a><\/li>\n<\/ul>\n<hr \/>\n<h2>Footnotes<\/h2>\n<p><sup>1<\/sup> * (aka <a href=\"https:\/\/stackoverflow.com\/questions\/tagged\/associative-array\">associative-array<\/a>, aka <a href=\"https:\/\/stackoverflow.com\/questions\/tagged\/dictionary\">dictionary<\/a>)<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 45444,
            "reputation": 36830,
            "user_id": 133939,
            "user_type": "registered",
            "accept_rate": 95,
            "profile_image": "https:\/\/i.stack.imgur.com\/pN9C5.png?s=256&g=1",
            "display_name": "Zaid",
            "link": "https:\/\/stackoverflow.com\/users\/133939\/zaid"
        },
        "is_accepted": true,
        "score": 184,
        "last_activity_date": 1619620202,
        "last_edit_date": 1619620202.0,
        "creation_date": 1312886995,
        "answer_id": 6995010,
        "question_id": 6994947,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Use a one-liner:\r\n\r\n    $ perl -pi.bak -e &#39;s\/blue\/red\/g&#39; *_classification.dat\r\n\r\n---\r\n\r\n**Explanation**\r\n\r\n- `-p` processes, then prints `&lt;&gt;` line by line\r\n- `-i` activates in-place editing. Files are backed up using the `.bak` extension\r\n- The regex substitution acts on the implicit variable, which are the contents of the file, line-by-line\r\n",
        "body": "<p>Use a one-liner:<\/p>\n<pre><code>$ perl -pi.bak -e 's\/blue\/red\/g' *_classification.dat\n<\/code><\/pre>\n<hr \/>\n<p><strong>Explanation<\/strong><\/p>\n<ul>\n<li><code>-p<\/code> processes, then prints <code>&lt;&gt;<\/code> line by line<\/li>\n<li><code>-i<\/code> activates in-place editing. Files are backed up using the <code>.bak<\/code> extension<\/li>\n<li>The regex substitution acts on the implicit variable, which are the contents of the file, line-by-line<\/li>\n<\/ul>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 3533386,
            "reputation": 1959,
            "user_id": 2952291,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/V1h5f.png?s=256&g=1",
            "display_name": "artemn",
            "link": "https:\/\/stackoverflow.com\/users\/2952291\/artemn"
        },
        "is_accepted": false,
        "score": 184,
        "last_activity_date": 1575463945,
        "last_edit_date": 1575463945.0,
        "creation_date": 1395062747,
        "answer_id": 22455572,
        "question_id": 2499794,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Use:\r\n\r\n    export LANGUAGE=en_US.UTF-8\r\n    export LC_ALL=en_US.UTF-8\r\n    export LANG=en_US.UTF-8\r\n    export LC_CTYPE=en_US.UTF-8\r\n\r\nIt works for [Debian][1]. I don&#39;t know why - but locale-gen had not results.\r\n\r\nImportant! It&#39;s a temporary solution. It has to be run for each session.\r\n\r\n  [1]: http:\/\/en.wikipedia.org\/wiki\/Debian\r\n",
        "body": "<p>Use:<\/p>\n\n<pre><code>export LANGUAGE=en_US.UTF-8\nexport LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8\nexport LC_CTYPE=en_US.UTF-8\n<\/code><\/pre>\n\n<p>It works for <a href=\"http:\/\/en.wikipedia.org\/wiki\/Debian\" rel=\"noreferrer\">Debian<\/a>. I don't know why - but locale-gen had not results.<\/p>\n\n<p>Important! It's a temporary solution. It has to be run for each session.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 24020,
            "reputation": 73831,
            "user_id": 60777,
            "user_type": "registered",
            "accept_rate": 77,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/4e698bea14e1d5f5c86d0359e5f24d28?s=256&d=identicon&r=PG",
            "display_name": "Chris Lutz",
            "link": "https:\/\/stackoverflow.com\/users\/60777\/chris-lutz"
        },
        "is_accepted": true,
        "score": 183,
        "last_activity_date": 1236627248,
        "last_edit_date": null,
        "creation_date": 1236627248,
        "answer_id": 627672,
        "question_id": 627661,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "`use utf8;` does not enable Unicode _output_ - it enables you to type Unicode in your program. Add this to the program, before your `print()` statement:\r\n\r\n    binmode(STDOUT, &quot;:utf8&quot;);\r\n\r\nSee if that helps. That should make `STDOUT` output in UTF-8 instead of ordinary ASCII.",
        "body": "<p><code>use utf8;<\/code> does not enable Unicode <em>output<\/em> - it enables you to type Unicode in your program. Add this to the program, before your <code>print()<\/code> statement:<\/p>\n\n<pre><code>binmode(STDOUT, \":utf8\");\n<\/code><\/pre>\n\n<p>See if that helps. That should make <code>STDOUT<\/code> output in UTF-8 instead of ordinary ASCII.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 8291,
            "reputation": 861385,
            "user_id": 14860,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/i.stack.imgur.com\/vXG1F.png?s=256&g=1",
            "display_name": "paxdiablo",
            "link": "https:\/\/stackoverflow.com\/users\/14860\/paxdiablo"
        },
        "is_accepted": true,
        "score": 180,
        "last_activity_date": 1650076797,
        "last_edit_date": 1650076797.0,
        "creation_date": 1307680863,
        "answer_id": 6302045,
        "question_id": 6302025,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Yes, Google is notoriously difficult for looking up punctuation and, unfortunately, Perl _does_ seem to be mostly made up of punctuation :-)\r\n\r\nThe command line switches are all detailed in [perlrun][1] (available from the command line by calling `perldoc perlrun`). Going into the options briefly, one-by-one:\r\n\r\n  - `-p`: Places a printing loop around your command so that it acts on each line of standard input. Used mostly so Perl can beat the pants off Awk in terms of power AND simplicity :-)\r\n  - `-n`: Places a non-printing loop around your command.\r\n  - `-e`: Allows you to provide the program as an argument rather than in a file. You don&#39;t want to have to create a script file for every little Perl one-liner.\r\n  - `-i`: Modifies your input file in-place (making a backup of the original). Handy to modify files without the `{copy, delete-original, rename}` process.\r\n  - `-w`: Activates some warnings. Any good Perl coder will use this.\r\n  - `-d`: Runs under the Perl debugger. For debugging your Perl code, obviously.\r\n  - `-t`: Treats certain &quot;tainted&quot; (dubious) code as warnings (proper taint mode will error on this dubious code). Used to beef up Perl security, especially when running code for other users, such as setuid scripts or web stuff.\r\n\r\n  [1]: http:\/\/perldoc.perl.org\/perlrun.html",
        "body": "<p>Yes, Google is notoriously difficult for looking up punctuation and, unfortunately, Perl <em>does<\/em> seem to be mostly made up of punctuation :-)<\/p>\n<p>The command line switches are all detailed in <a href=\"http:\/\/perldoc.perl.org\/perlrun.html\" rel=\"noreferrer\">perlrun<\/a> (available from the command line by calling <code>perldoc perlrun<\/code>). Going into the options briefly, one-by-one:<\/p>\n<ul>\n<li><code>-p<\/code>: Places a printing loop around your command so that it acts on each line of standard input. Used mostly so Perl can beat the pants off Awk in terms of power AND simplicity :-)<\/li>\n<li><code>-n<\/code>: Places a non-printing loop around your command.<\/li>\n<li><code>-e<\/code>: Allows you to provide the program as an argument rather than in a file. You don't want to have to create a script file for every little Perl one-liner.<\/li>\n<li><code>-i<\/code>: Modifies your input file in-place (making a backup of the original). Handy to modify files without the <code>{copy, delete-original, rename}<\/code> process.<\/li>\n<li><code>-w<\/code>: Activates some warnings. Any good Perl coder will use this.<\/li>\n<li><code>-d<\/code>: Runs under the Perl debugger. For debugging your Perl code, obviously.<\/li>\n<li><code>-t<\/code>: Treats certain &quot;tainted&quot; (dubious) code as warnings (proper taint mode will error on this dubious code). Used to beef up Perl security, especially when running code for other users, such as setuid scripts or web stuff.<\/li>\n<\/ul>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 680,
            "reputation": 961801,
            "user_id": 893,
            "user_type": "registered",
            "accept_rate": 84,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/747ffa5da3538e66840ebc0548b8fd58?s=256&d=identicon&r=PG",
            "display_name": "Greg Hewgill",
            "link": "https:\/\/stackoverflow.com\/users\/893\/greg-hewgill"
        },
        "is_accepted": true,
        "score": 179,
        "last_activity_date": 1403314769,
        "last_edit_date": 1403314769.0,
        "creation_date": 1218449782,
        "answer_id": 7657,
        "question_id": 7651,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "You can do something like this as demonstrated in [perlfaq4](http:\/\/perldoc.perl.org\/perlfaq4.html#How-can-I-remove-duplicate-elements-from-a-list-or-array%3f):\r\n\r\n    sub uniq {\r\n        my %seen;\r\n        grep !$seen{$_}++, @_;\r\n    }\r\n\r\n    my @array = qw(one two three two three);\r\n    my @filtered = uniq(@array);\r\n\r\n    print &quot;@filtered\\n&quot;;\r\n\r\nOutputs:\r\n\r\n    one two three\r\n\r\nIf you want to use a module, try the `uniq` function from [`List::MoreUtils`](https:\/\/metacpan.org\/pod\/List::MoreUtils)",
        "body": "<p>You can do something like this as demonstrated in <a href=\"http:\/\/perldoc.perl.org\/perlfaq4.html#How-can-I-remove-duplicate-elements-from-a-list-or-array%3f\" rel=\"noreferrer\">perlfaq4<\/a>:<\/p>\n\n<pre><code>sub uniq {\n    my %seen;\n    grep !$seen{$_}++, @_;\n}\n\nmy @array = qw(one two three two three);\nmy @filtered = uniq(@array);\n\nprint \"@filtered\\n\";\n<\/code><\/pre>\n\n<p>Outputs:<\/p>\n\n<pre><code>one two three\n<\/code><\/pre>\n\n<p>If you want to use a module, try the <code>uniq<\/code> function from <a href=\"https:\/\/metacpan.org\/pod\/List::MoreUtils\" rel=\"noreferrer\"><code>List::MoreUtils<\/code><\/a><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 8615,
            "reputation": 56604,
            "user_id": 15614,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/7455fbe2cde016f6cd36b4352be52eaf?s=256&d=identicon&r=PG",
            "display_name": "Kent Fredric",
            "link": "https:\/\/stackoverflow.com\/users\/15614\/kent-fredric"
        },
        "is_accepted": false,
        "score": 178,
        "last_activity_date": 1395001701,
        "last_edit_date": 1395001701.0,
        "creation_date": 1227126828,
        "answer_id": 303261,
        "question_id": 303216,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Additional data (in case you have more questions):\r\n\r\n    FOO: {\r\n           for my $i ( @listone ){\r\n              for my $j ( @listtwo ){\r\n                     if ( cond( $i,$j ) ){\r\n\r\n                        last FOO;  # ---&gt;\r\n                                       # |\r\n                     }                 # |\r\n              }                        # |\r\n           }                           # |\r\n     } # &lt;-------------------------------\r\n",
        "body": "<p>Additional data (in case you have more questions):<\/p>\n\n<pre><code>FOO: {\n       for my $i ( @listone ){\n          for my $j ( @listtwo ){\n                 if ( cond( $i,$j ) ){\n\n                    last FOO;  # ---&gt;\n                                   # |\n                 }                 # |\n          }                        # |\n       }                           # |\n } # &lt;-------------------------------\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1860156,
            "reputation": 16546,
            "user_id": 1684868,
            "user_type": "registered",
            "accept_rate": 71,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/dab2875ba0868842943b778ecd75c588?s=256&d=identicon&r=PG",
            "display_name": "Guru",
            "link": "https:\/\/stackoverflow.com\/users\/1684868\/guru"
        },
        "is_accepted": true,
        "score": 178,
        "last_activity_date": 1364889849,
        "last_edit_date": null,
        "creation_date": 1364889849,
        "answer_id": 15759052,
        "question_id": 15758814,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Using paste command:\r\n\r\n    paste -d, -s file",
        "body": "<p>Using paste command:<\/p>\n\n<pre><code>paste -d, -s file\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1321719,
            "reputation": 6696,
            "user_id": 1267409,
            "user_type": "registered",
            "accept_rate": 80,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/3168dfc93f141a9af17e62cbcc2d683f?s=256&d=identicon&r=PG",
            "display_name": "jpschroeder",
            "link": "https:\/\/stackoverflow.com\/users\/1267409\/jpschroeder"
        },
        "is_accepted": true,
        "score": 178,
        "last_activity_date": 1461336499,
        "last_edit_date": null,
        "creation_date": 1461336499,
        "answer_id": 36796941,
        "question_id": 5972516,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "In PHP 7 we finally have a way to do this elegantly. It is called the [Null coalescing operator](http:\/\/php.net\/manual\/en\/migration70.new-features.php#migration70.new-features.null-coalesce-op). You can use it like this:\r\n\r\n    $name = $_GET[&#39;name&#39;] ?? &#39;john doe&#39;;\r\n\r\nThis is equivalent to\r\n\r\n    $name = isset($_GET[&#39;name&#39;]) ? $_GET[&#39;name&#39;]:&#39;john doe&#39;;",
        "body": "<p>In PHP 7 we finally have a way to do this elegantly. It is called the <a href=\"http:\/\/php.net\/manual\/en\/migration70.new-features.php#migration70.new-features.null-coalesce-op\">Null coalescing operator<\/a>. You can use it like this:<\/p>\n\n<pre><code>$name = $_GET['name'] ?? 'john doe';\n<\/code><\/pre>\n\n<p>This is equivalent to<\/p>\n\n<pre><code>$name = isset($_GET['name']) ? $_GET['name']:'john doe';\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1582,
            "reputation": 110982,
            "user_id": 2119,
            "user_type": "registered",
            "accept_rate": 71,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/2c56a82b6d13e243848a55fedca24b71?s=256&d=identicon&r=PG",
            "display_name": "Can Berk G&#252;der",
            "link": "https:\/\/stackoverflow.com\/users\/2119\/can-berk-g%c3%bcder"
        },
        "is_accepted": true,
        "score": 174,
        "last_activity_date": 1305888220,
        "last_edit_date": 1305888220.0,
        "creation_date": 1236884383,
        "answer_id": 640016,
        "question_id": 640001,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "    s\/\\([^)]*\\)\/\/\r\n\r\nSo in Python, you&#39;d do:\r\n\r\n    re.sub(r&#39;\\([^)]*\\)&#39;, &#39;&#39;, filename)",
        "body": "<pre><code>s\/\\([^)]*\\)\/\/\n<\/code><\/pre>\n\n<p>So in Python, you'd do:<\/p>\n\n<pre><code>re.sub(r'\\([^)]*\\)', '', filename)\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 29074,
            "reputation": 64398,
            "user_id": 78259,
            "user_type": "registered",
            "accept_rate": 53,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/844c572938eaad1e44eb084fb39416f9?s=256&d=identicon&r=PG",
            "display_name": "Chas. Owens",
            "link": "https:\/\/stackoverflow.com\/users\/78259\/chas-owens"
        },
        "is_accepted": false,
        "score": 174,
        "last_activity_date": 1300721811,
        "last_edit_date": 1300721811.0,
        "creation_date": 1240957964,
        "answer_id": 800105,
        "question_id": 799968,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "In general I use `system`, `open`, `IPC::Open2`, or `IPC::Open3` depending on what I want to do.  The `qx\/\/` operator, while simple, is too constraining in its functionality to be very useful outside of quick hacks.  I find `open` to much handier.\r\n\r\n##[`system`][1]: run a command and wait for it to return\r\n\r\nUse `system` when you want to run a command, don&#39;t care about its output, and don&#39;t want the Perl script to do anything until the command finishes.\r\n\r\n    #doesn&#39;t spawn a shell, arguments are passed as they are\r\n    system(&quot;command&quot;, &quot;arg1&quot;, &quot;arg2&quot;, &quot;arg3&quot;);\r\n\r\nor\r\n\r\n    #spawns a shell, arguments are interpreted by the shell, use only if you\r\n    #want the shell to do globbing (e.g. *.txt) for you or you want to redirect\r\n    #output\r\n    system(&quot;command arg1 arg2 arg3&quot;);\r\n\r\n##[`qx\/\/` or ``][2]: run a command and capture its STDOUT\r\n\r\nUse `qx\/\/` when you want to run a command, capture what it writes to STDOUT, and don&#39;t want the Perl script to do anything until the command finishes.\r\n\r\n    #arguments are always processed by the shell\r\n\r\n    #in list context it returns the output as a list of lines\r\n    my @lines = qx\/command arg1 arg2 arg3\/;\r\n\r\n    #in scalar context it returns the output as one string\r\n    my $output = qx\/command arg1 arg2 arg3\/;\r\n\r\n##[`exec`][3]: replace the current process with another process.\r\n\r\nUse `exec` along with [`fork`][4] when you want to run a command, don&#39;t care about its output, and don&#39;t want to wait for it to return.  `system` is really just \r\n\r\n    sub my_system {\r\n        die &quot;could not fork\\n&quot; unless defined(my $pid = fork);\r\n        return waitpid $pid, 0 if $pid; #parent waits for child\r\n        exec @_; #replace child with new process\r\n    }\r\n\r\nYou may also want to read the [`waitpid`][5] and [`perlipc`][6] manuals.\r\n\r\n##[`open`][7]: run a process and create a pipe to its STDIN or STDERR\r\n\r\nUse `open` when you want to write data to a process&#39;s STDIN or read data from a process&#39;s STDOUT (but not both at the same time).\r\n\r\n    #read from a gzip file as if it were a normal file\r\n    open my $read_fh, &quot;-|&quot;, &quot;gzip&quot;, &quot;-d&quot;, $filename\r\n        or die &quot;could not open $filename: $!&quot;;\r\n\r\n    #write to a gzip compressed file as if were a normal file\r\n    open my $write_fh, &quot;|-&quot;, &quot;gzip&quot;, $filename\r\n        or die &quot;could not open $filename: $!&quot;;\r\n\r\n##[IPC::Open2][8]: run a process and create a pipe to both STDIN and STDOUT\r\n\r\nUse `IPC::Open2` when you need to read from and write to a process&#39;s STDIN and STDOUT.\r\n\r\n    use IPC::Open2;\r\n    \r\n    open2 my $out, my $in, &quot;\/usr\/bin\/bc&quot;\r\n        or die &quot;could not run bc&quot;;\r\n    \r\n    print $in &quot;5+6\\n&quot;;\r\n    \r\n    my $answer = &lt;$out&gt;;\r\n\r\n##[IPC::Open3][9]: run a process and create a pipe to STDIN, STDOUT, and STDERR\r\n\r\nuse `IPC::Open3` when you need to capture all three standard file handles of the process. I would write an example, but it works mostly the same way IPC::Open2 does, but with a slightly different order to the arguments and a third file handle.\r\n\r\n\r\n  [1]: http:\/\/perldoc.perl.org\/functions\/system.html\r\n  [2]: http:\/\/perldoc.perl.org\/perlop.html#qx\/STRING\/\r\n  [3]: http:\/\/perldoc.perl.org\/functions\/exec.html\r\n  [4]: http:\/\/perldoc.perl.org\/functions\/fork.html\r\n  [5]: http:\/\/perldoc.perl.org\/functions\/waitpid.html\r\n  [6]: http:\/\/perldoc.perl.org\/perlipc.html\r\n  [7]: http:\/\/perldoc.perl.org\/functions\/open.html\r\n  [8]: http:\/\/perldoc.perl.org\/IPC\/Open2.html\r\n  [9]: http:\/\/perldoc.perl.org\/IPC\/Open3.html",
        "body": "<p>In general I use <code>system<\/code>, <code>open<\/code>, <code>IPC::Open2<\/code>, or <code>IPC::Open3<\/code> depending on what I want to do.  The <code>qx\/\/<\/code> operator, while simple, is too constraining in its functionality to be very useful outside of quick hacks.  I find <code>open<\/code> to much handier.<\/p>\n\n<h2><a href=\"http:\/\/perldoc.perl.org\/functions\/system.html\" rel=\"noreferrer\"><code>system<\/code><\/a>: run a command and wait for it to return<\/h2>\n\n<p>Use <code>system<\/code> when you want to run a command, don't care about its output, and don't want the Perl script to do anything until the command finishes.<\/p>\n\n<pre><code>#doesn't spawn a shell, arguments are passed as they are\nsystem(\"command\", \"arg1\", \"arg2\", \"arg3\");\n<\/code><\/pre>\n\n<p>or<\/p>\n\n<pre><code>#spawns a shell, arguments are interpreted by the shell, use only if you\n#want the shell to do globbing (e.g. *.txt) for you or you want to redirect\n#output\nsystem(\"command arg1 arg2 arg3\");\n<\/code><\/pre>\n\n<h2><a href=\"http:\/\/perldoc.perl.org\/perlop.html#qx\/STRING\/\" rel=\"noreferrer\"><code>qx\/\/<\/code> or ``<\/a>: run a command and capture its STDOUT<\/h2>\n\n<p>Use <code>qx\/\/<\/code> when you want to run a command, capture what it writes to STDOUT, and don't want the Perl script to do anything until the command finishes.<\/p>\n\n<pre><code>#arguments are always processed by the shell\n\n#in list context it returns the output as a list of lines\nmy @lines = qx\/command arg1 arg2 arg3\/;\n\n#in scalar context it returns the output as one string\nmy $output = qx\/command arg1 arg2 arg3\/;\n<\/code><\/pre>\n\n<h2><a href=\"http:\/\/perldoc.perl.org\/functions\/exec.html\" rel=\"noreferrer\"><code>exec<\/code><\/a>: replace the current process with another process.<\/h2>\n\n<p>Use <code>exec<\/code> along with <a href=\"http:\/\/perldoc.perl.org\/functions\/fork.html\" rel=\"noreferrer\"><code>fork<\/code><\/a> when you want to run a command, don't care about its output, and don't want to wait for it to return.  <code>system<\/code> is really just <\/p>\n\n<pre><code>sub my_system {\n    die \"could not fork\\n\" unless defined(my $pid = fork);\n    return waitpid $pid, 0 if $pid; #parent waits for child\n    exec @_; #replace child with new process\n}\n<\/code><\/pre>\n\n<p>You may also want to read the <a href=\"http:\/\/perldoc.perl.org\/functions\/waitpid.html\" rel=\"noreferrer\"><code>waitpid<\/code><\/a> and <a href=\"http:\/\/perldoc.perl.org\/perlipc.html\" rel=\"noreferrer\"><code>perlipc<\/code><\/a> manuals.<\/p>\n\n<h2><a href=\"http:\/\/perldoc.perl.org\/functions\/open.html\" rel=\"noreferrer\"><code>open<\/code><\/a>: run a process and create a pipe to its STDIN or STDERR<\/h2>\n\n<p>Use <code>open<\/code> when you want to write data to a process's STDIN or read data from a process's STDOUT (but not both at the same time).<\/p>\n\n<pre><code>#read from a gzip file as if it were a normal file\nopen my $read_fh, \"-|\", \"gzip\", \"-d\", $filename\n    or die \"could not open $filename: $!\";\n\n#write to a gzip compressed file as if were a normal file\nopen my $write_fh, \"|-\", \"gzip\", $filename\n    or die \"could not open $filename: $!\";\n<\/code><\/pre>\n\n<h2><a href=\"http:\/\/perldoc.perl.org\/IPC\/Open2.html\" rel=\"noreferrer\">IPC::Open2<\/a>: run a process and create a pipe to both STDIN and STDOUT<\/h2>\n\n<p>Use <code>IPC::Open2<\/code> when you need to read from and write to a process's STDIN and STDOUT.<\/p>\n\n<pre><code>use IPC::Open2;\n\nopen2 my $out, my $in, \"\/usr\/bin\/bc\"\n    or die \"could not run bc\";\n\nprint $in \"5+6\\n\";\n\nmy $answer = &lt;$out&gt;;\n<\/code><\/pre>\n\n<h2><a href=\"http:\/\/perldoc.perl.org\/IPC\/Open3.html\" rel=\"noreferrer\">IPC::Open3<\/a>: run a process and create a pipe to STDIN, STDOUT, and STDERR<\/h2>\n\n<p>use <code>IPC::Open3<\/code> when you need to capture all three standard file handles of the process. I would write an example, but it works mostly the same way IPC::Open2 does, but with a slightly different order to the arguments and a third file handle.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2397,
            "reputation": 179977,
            "user_id": 3333,
            "user_type": "registered",
            "accept_rate": 80,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/99660662e89949a4b53cd97bc199ead1?s=256&d=identicon&r=PG",
            "display_name": "Paul Tomblin",
            "link": "https:\/\/stackoverflow.com\/users\/3333\/paul-tomblin"
        },
        "is_accepted": false,
        "score": 171,
        "last_activity_date": 1269357866,
        "last_edit_date": 1269357866.0,
        "creation_date": 1269347599,
        "answer_id": 2499826,
        "question_id": 2499794,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "This generally means you haven&#39;t properly set up locales on your Linux box.  \r\n\r\nOn Debian or Ubuntu, that means you need to do\r\n\r\n&lt;pre&gt;$ sudo locale-gen\r\n$ sudo dpkg-reconfigure locales&lt;\/pre&gt;\r\n\r\nSee also [man locale-gen](http:\/\/manpages.ubuntu.com\/manpages\/karmic\/man8\/locale-gen.8.html).",
        "body": "<p>This generally means you haven't properly set up locales on your Linux box.  <\/p>\n\n<p>On Debian or Ubuntu, that means you need to do<\/p>\n\n<pre>$ sudo locale-gen\n$ sudo dpkg-reconfigure locales<\/pre>\n\n<p>See also <a href=\"http:\/\/manpages.ubuntu.com\/manpages\/karmic\/man8\/locale-gen.8.html\" rel=\"noreferrer\">man locale-gen<\/a>.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 112362,
            "reputation": 8242,
            "user_id": 296418,
            "user_type": "registered",
            "accept_rate": 75,
            "profile_image": "https:\/\/i.stack.imgur.com\/zZyu2.jpg?s=256&g=1",
            "display_name": "Nikhil Jain",
            "link": "https:\/\/stackoverflow.com\/users\/296418\/nikhil-jain"
        },
        "is_accepted": true,
        "score": 165,
        "last_activity_date": 1691627360,
        "last_edit_date": 1691627360.0,
        "creation_date": 1285828199,
        "answer_id": 3828297,
        "question_id": 3828205,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "POD is the official way to do multi line comments in Perl. See:\r\n\r\n* **[Multi-line comments in perl\r\n   code][1]** and\r\n* **[Better ways to make multi-line comments in Perl][2]** for more\r\n   detail.\r\n* [How can I comment out a large block of Perl code?](https:\/\/perldoc.perl.org\/perlfaq7#How-can-I-comment-out-a-large-block-of-Perl-code?)\r\n\r\n&gt; The quick-and-dirty way to comment out more than one line of Perl is\r\n&gt; to surround those lines with Pod directives. You have to put these\r\n&gt; directives at the beginning of the line and somewhere where Perl\r\n&gt; expects a new statement (so not in the middle of statements like the #\r\n&gt; comments). You end the comment with `=cut`, ending the Pod section:\r\n\r\n\t=pod\r\n\r\n\tmy $object = NotGonnaHappen-&gt;new();\r\n\r\n\tignored_sub();\r\n\r\n\t$wont_be_assigned = 37;\r\n\r\n\t=cut\r\n\r\n&gt; The quick-and-dirty method only works well when you don&#39;t plan to\r\n&gt; leave the commented code in the source. If a Pod parser comes along,\r\n&gt; your multiline comment is going to show up in the Pod translation. A\r\n&gt; better way hides it from Pod parsers as well.\r\n&gt; \r\n&gt; The `=begin` directive can mark a section for a particular purpose. If\r\n&gt; the Pod parser doesn&#39;t want to handle it, it just ignores it. Label\r\n&gt; the comments with `comment`. End the comment using `=end` with the\r\n&gt; same label. You still need the `=cut` to go back to Perl code from the\r\n&gt; Pod comment:\r\n\r\n\t=begin comment\r\n\r\n\tmy $object = NotGonnaHappen-&gt;new();\r\n\r\n\tignored_sub();\r\n\r\n\t$wont_be_assigned = 37;\r\n\r\n\t=end comment\r\n\r\n\t=cut\r\n\r\n\r\n  [1]: http:\/\/www.perlmonks.org\/?node_id=560985\r\n  [2]: http:\/\/www.perlmonks.org\/?node_id=100344\r\n  [3]: https:\/\/perldoc.perl.org\/perlfaq7",
        "body": "<p>POD is the official way to do multi line comments in Perl. See:<\/p>\n<ul>\n<li><strong><a href=\"http:\/\/www.perlmonks.org\/?node_id=560985\" rel=\"nofollow noreferrer\">Multi-line comments in perl\ncode<\/a><\/strong> and<\/li>\n<li><strong><a href=\"http:\/\/www.perlmonks.org\/?node_id=100344\" rel=\"nofollow noreferrer\">Better ways to make multi-line comments in Perl<\/a><\/strong> for more\ndetail.<\/li>\n<li><a href=\"https:\/\/perldoc.perl.org\/perlfaq7#How-can-I-comment-out-a-large-block-of-Perl-code?\" rel=\"nofollow noreferrer\">How can I comment out a large block of Perl code?<\/a><\/li>\n<\/ul>\n<blockquote>\n<p>The quick-and-dirty way to comment out more than one line of Perl is\nto surround those lines with Pod directives. You have to put these\ndirectives at the beginning of the line and somewhere where Perl\nexpects a new statement (so not in the middle of statements like the #\ncomments). You end the comment with <code>=cut<\/code>, ending the Pod section:<\/p>\n<\/blockquote>\n<pre><code>=pod\n\nmy $object = NotGonnaHappen-&gt;new();\n\nignored_sub();\n\n$wont_be_assigned = 37;\n\n=cut\n<\/code><\/pre>\n<blockquote>\n<p>The quick-and-dirty method only works well when you don't plan to\nleave the commented code in the source. If a Pod parser comes along,\nyour multiline comment is going to show up in the Pod translation. A\nbetter way hides it from Pod parsers as well.<\/p>\n<p>The <code>=begin<\/code> directive can mark a section for a particular purpose. If\nthe Pod parser doesn't want to handle it, it just ignores it. Label\nthe comments with <code>comment<\/code>. End the comment using <code>=end<\/code> with the\nsame label. You still need the <code>=cut<\/code> to go back to Perl code from the\nPod comment:<\/p>\n<\/blockquote>\n<pre><code>=begin comment\n\nmy $object = NotGonnaHappen-&gt;new();\n\nignored_sub();\n\n$wont_be_assigned = 37;\n\n=end comment\n\n=cut\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1932818,
            "reputation": 46103,
            "user_id": 1741864,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/04838a0abfc158546d97d37e1cba4a36?s=256&d=identicon&r=PG",
            "display_name": "sampson-chen",
            "link": "https:\/\/stackoverflow.com\/users\/1741864\/sampson-chen"
        },
        "is_accepted": false,
        "score": 164,
        "last_activity_date": 1416291011,
        "last_edit_date": 1416291011.0,
        "creation_date": 1353286101,
        "answer_id": 13446273,
        "question_id": 13446255,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "You can do it with `cut`:\r\n\r\n    cut -d &quot; &quot; -f 3- input_filename &gt; output_filename\r\n\r\n**Explanation:**\r\n\r\n- `cut`: invoke the cut command\r\n- `-d &quot; &quot;`: use a single space as the delimiter (`cut` uses TAB by default)\r\n- `-f`: specify fields to keep\r\n- `3-`: all the fields starting with field 3\r\n- `input_filename`: use this file as the input\r\n- `&gt; output_filename`: write the output to this file.\r\n\r\nAlternatively, you can do it with `awk`:\r\n\r\n    awk &#39;{$1=&quot;&quot;; $2=&quot;&quot;; sub(&quot;  &quot;, &quot; &quot;); print}&#39; input_filename &gt; output_filename\r\n\r\n**Explanation:**\r\n\r\n- `awk`: invoke the awk command\r\n- `$1=&quot;&quot;; $2=&quot;&quot;;`: set field 1 and 2 to the empty string\r\n- `sub(...);`: clean up the output fields because fields 1 &amp; 2 will still be delimited by &quot; &quot;\r\n- `print`: print the modified line\r\n- `input_filename &gt; output_filename`: same as above.",
        "body": "<p>You can do it with <code>cut<\/code>:<\/p>\n\n<pre><code>cut -d \" \" -f 3- input_filename &gt; output_filename\n<\/code><\/pre>\n\n<p><strong>Explanation:<\/strong><\/p>\n\n<ul>\n<li><code>cut<\/code>: invoke the cut command<\/li>\n<li><code>-d \" \"<\/code>: use a single space as the delimiter (<code>cut<\/code> uses TAB by default)<\/li>\n<li><code>-f<\/code>: specify fields to keep<\/li>\n<li><code>3-<\/code>: all the fields starting with field 3<\/li>\n<li><code>input_filename<\/code>: use this file as the input<\/li>\n<li><code>&gt; output_filename<\/code>: write the output to this file.<\/li>\n<\/ul>\n\n<p>Alternatively, you can do it with <code>awk<\/code>:<\/p>\n\n<pre><code>awk '{$1=\"\"; $2=\"\"; sub(\"  \", \" \"); print}' input_filename &gt; output_filename\n<\/code><\/pre>\n\n<p><strong>Explanation:<\/strong><\/p>\n\n<ul>\n<li><code>awk<\/code>: invoke the awk command<\/li>\n<li><code>$1=\"\"; $2=\"\";<\/code>: set field 1 and 2 to the empty string<\/li>\n<li><code>sub(...);<\/code>: clean up the output fields because fields 1 &amp; 2 will still be delimited by \" \"<\/li>\n<li><code>print<\/code>: print the modified line<\/li>\n<li><code>input_filename &gt; output_filename<\/code>: same as above.<\/li>\n<\/ul>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 7105,
            "reputation": 22469,
            "user_id": 12195,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/29cb106071d163d703484e63839d89cb?s=256&d=identicon&r=PG",
            "display_name": "draegtun",
            "link": "https:\/\/stackoverflow.com\/users\/12195\/draegtun"
        },
        "is_accepted": true,
        "score": 161,
        "last_activity_date": 1541486915,
        "last_edit_date": 1541486915.0,
        "creation_date": 1284649816,
        "answer_id": 3728027,
        "question_id": 3727795,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "An alternative method to using `upgrade` from the default CPAN shell is to use [`cpanminus`][cpanm] and [`cpan-outdated`][cpan-outdated].\r\n\r\nThese are so easy and nimble to use that I hardly ever go back to CPAN shell. To upgrade all of your modules in one go, the command is:\r\n\r\n    cpan-outdated -p | cpanm\r\n\r\nI recommend you install `cpanminus` like the docs describe:\r\n\r\n    curl -L https:\/\/cpanmin.us | perl - App::cpanminus\r\n\r\nAnd then install `cpan-outdated` along with all other CPAN modules using `cpanm`:\r\n\r\n    cpanm App::cpanoutdated\r\n\r\nBTW: If you are using `perlbrew` then you will need to repeat this for every Perl you have installed under it.\r\n\r\nYou can find out more about `cpanminus` and `cpan-outdated` at the Github repos here:\r\n\r\n* https:\/\/github.com\/miyagawa\/cpanminus\r\n* https:\/\/github.com\/tokuhirom\/cpan-outdated\r\n\r\n[cpanm]:https:\/\/search.cpan.org\/dist\/App-cpanminus\/lib\/App\/cpanminus.pm\r\n[cpan-outdated]:https:\/\/search.cpan.org\/dist\/App-cpanoutdated\/bin\/cpan-outdated",
        "body": "<p>An alternative method to using <code>upgrade<\/code> from the default CPAN shell is to use <a href=\"https:\/\/search.cpan.org\/dist\/App-cpanminus\/lib\/App\/cpanminus.pm\" rel=\"noreferrer\"><code>cpanminus<\/code><\/a> and <a href=\"https:\/\/search.cpan.org\/dist\/App-cpanoutdated\/bin\/cpan-outdated\" rel=\"noreferrer\"><code>cpan-outdated<\/code><\/a>.<\/p>\n\n<p>These are so easy and nimble to use that I hardly ever go back to CPAN shell. To upgrade all of your modules in one go, the command is:<\/p>\n\n<pre><code>cpan-outdated -p | cpanm\n<\/code><\/pre>\n\n<p>I recommend you install <code>cpanminus<\/code> like the docs describe:<\/p>\n\n<pre><code>curl -L https:\/\/cpanmin.us | perl - App::cpanminus\n<\/code><\/pre>\n\n<p>And then install <code>cpan-outdated<\/code> along with all other CPAN modules using <code>cpanm<\/code>:<\/p>\n\n<pre><code>cpanm App::cpanoutdated\n<\/code><\/pre>\n\n<p>BTW: If you are using <code>perlbrew<\/code> then you will need to repeat this for every Perl you have installed under it.<\/p>\n\n<p>You can find out more about <code>cpanminus<\/code> and <code>cpan-outdated<\/code> at the Github repos here:<\/p>\n\n<ul>\n<li><a href=\"https:\/\/github.com\/miyagawa\/cpanminus\" rel=\"noreferrer\">https:\/\/github.com\/miyagawa\/cpanminus<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/tokuhirom\/cpan-outdated\" rel=\"noreferrer\">https:\/\/github.com\/tokuhirom\/cpan-outdated<\/a><\/li>\n<\/ul>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 71221,
            "reputation": 64656,
            "user_id": 205930,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/i.stack.imgur.com\/5Uk5W.jpg?s=256&g=1",
            "display_name": "Alex",
            "link": "https:\/\/stackoverflow.com\/users\/205930\/alex"
        },
        "is_accepted": true,
        "score": 161,
        "last_activity_date": 1303372348,
        "last_edit_date": null,
        "creation_date": 1303372348,
        "answer_id": 5741144,
        "question_id": 5741101,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Just use [`join()`][1]:\r\n\r\n    # assuming @array is your array:\r\n    print join(&quot;, &quot;, @array);\r\n\r\n\r\n  [1]: http:\/\/perldoc.perl.org\/functions\/join.html",
        "body": "<p>Just use <a href=\"http:\/\/perldoc.perl.org\/functions\/join.html\" rel=\"noreferrer\"><code>join()<\/code><\/a>:<\/p>\n\n<pre><code># assuming @array is your array:\nprint join(\", \", @array);\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 11856,
            "reputation": 26254,
            "user_id": 23071,
            "user_type": "registered",
            "accept_rate": 85,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/46eb2903f467ed15b080c0e89e856b36?s=256&d=identicon&r=PG",
            "display_name": "Gordon Wilson",
            "link": "https:\/\/stackoverflow.com\/users\/23071\/gordon-wilson"
        },
        "is_accepted": true,
        "score": 156,
        "last_activity_date": 1230152792,
        "last_edit_date": 1495540486.0,
        "creation_date": 1230148689,
        "answer_id": 392146,
        "question_id": 392135,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "In general, &lt;code&gt;bless&lt;\/code&gt; associates an object with a class.\r\n\r\n    package MyClass;\r\n    my $object = { };\r\n    bless $object, &quot;MyClass&quot;;\r\n\r\nNow when you invoke a method on &lt;code&gt;$object&lt;\/code&gt;, Perl know which package to search for the method.\r\n\r\nIf the second argument is omitted, as in your example, the current package\/class is used.\r\n\r\nFor the sake of clarity, your example might be written as follows:\r\n\r\n    sub new { \r\n      my $class = shift; \r\n      my $self = { }; \r\n      bless $self, $class; \r\n    } \r\n\r\nEDIT: See [kixx][1]&#39;s good [answer][2] for a little more detail.\r\n\r\n\r\n  [1]: https:\/\/stackoverflow.com\/users\/11260\/kixx\r\n  [2]: https:\/\/stackoverflow.com\/questions\/392135\/what-exactly-does-perls-bless-do#392194",
        "body": "<p>In general, <code>bless<\/code> associates an object with a class.<\/p>\n\n<pre><code>package MyClass;\nmy $object = { };\nbless $object, \"MyClass\";\n<\/code><\/pre>\n\n<p>Now when you invoke a method on <code>$object<\/code>, Perl know which package to search for the method.<\/p>\n\n<p>If the second argument is omitted, as in your example, the current package\/class is used.<\/p>\n\n<p>For the sake of clarity, your example might be written as follows:<\/p>\n\n<pre><code>sub new { \n  my $class = shift; \n  my $self = { }; \n  bless $self, $class; \n} \n<\/code><\/pre>\n\n<p>EDIT: See <a href=\"https:\/\/stackoverflow.com\/users\/11260\/kixx\">kixx<\/a>'s good <a href=\"https:\/\/stackoverflow.com\/questions\/392135\/what-exactly-does-perls-bless-do#392194\">answer<\/a> for a little more detail.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1255572,
            "reputation": 42870,
            "user_id": 1215106,
            "user_type": "registered",
            "accept_rate": 82,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/615ff12525dbd5868b7c78d9754aed72?s=256&d=identicon&r=PG",
            "display_name": "\u2126mega",
            "link": "https:\/\/stackoverflow.com\/users\/1215106\/%e2%84%a6mega"
        },
        "is_accepted": true,
        "score": 155,
        "last_activity_date": 1352155735,
        "last_edit_date": 1592644375.0,
        "creation_date": 1352155735,
        "answer_id": 13241658,
        "question_id": 13241615,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "### It is not a good idea to use regex for HTML\/XML parsing...\n\nHowever, if you want to do it anyway, search for regex pattern \n\n    &lt;primaryAddress&gt;[\\s\\S]*?&lt;\\\/primaryAddress&gt;\n\nand replace it with empty string...\n",
        "body": "<h3>It is not a good idea to use regex for HTML\/XML parsing...<\/h3>\n<p>However, if you want to do it anyway, search for regex pattern<\/p>\n<pre><code>&lt;primaryAddress&gt;[\\s\\S]*?&lt;\\\/primaryAddress&gt;\n<\/code><\/pre>\n<p>and replace it with empty string...<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 8245,
            "reputation": 9120,
            "user_id": 14750,
            "user_type": "registered",
            "accept_rate": 50,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/1259cb9901b6d9caf5aeda812927d111?s=256&d=identicon&r=PG",
            "display_name": "RET",
            "link": "https:\/\/stackoverflow.com\/users\/14750\/ret"
        },
        "is_accepted": false,
        "score": 154,
        "last_activity_date": 1489606795,
        "last_edit_date": 1489606795.0,
        "creation_date": 1250198765,
        "answer_id": 1274692,
        "question_id": 178539,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Whilst not disagreeing with the complex answers about half-way marks and so on, for the more common (and possibly trivial) use-case:\r\n\r\n`my $rounded = int($float + 0.5);`\r\n\r\n**UPDATE**\r\n\r\nIf it&#39;s possible for your `$float` to be negative, the following variation will produce the correct result:\r\n\r\n`my $rounded = int($float + $float\/abs($float*2 || 1));`\r\n\r\nWith this calculation -1.4 is rounded to -1, and -1.6 to -2, and zero won&#39;t explode.",
        "body": "<p>Whilst not disagreeing with the complex answers about half-way marks and so on, for the more common (and possibly trivial) use-case:<\/p>\n\n<p><code>my $rounded = int($float + 0.5);<\/code><\/p>\n\n<p><strong>UPDATE<\/strong><\/p>\n\n<p>If it's possible for your <code>$float<\/code> to be negative, the following variation will produce the correct result:<\/p>\n\n<p><code>my $rounded = int($float + $float\/abs($float*2 || 1));<\/code><\/p>\n\n<p>With this calculation -1.4 is rounded to -1, and -1.6 to -2, and zero won't explode.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 680,
            "reputation": 961801,
            "user_id": 893,
            "user_type": "registered",
            "accept_rate": 84,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/747ffa5da3538e66840ebc0548b8fd58?s=256&d=identicon&r=PG",
            "display_name": "Greg Hewgill",
            "link": "https:\/\/stackoverflow.com\/users\/893\/greg-hewgill"
        },
        "is_accepted": true,
        "score": 154,
        "last_activity_date": 1263252007,
        "last_edit_date": null,
        "creation_date": 1263252007,
        "answer_id": 2045663,
        "question_id": 2045644,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "For string comparisons in Perl, use `eq` or `ne`:\r\n\r\n    if ($str eq &quot;&quot;)\r\n    {\r\n      \/\/ ...\r\n    }\r\n\r\nThe `==` and `!=` operators are *numeric* comparison operators. They will attempt to convert both operands to integers before comparing them.\r\n\r\nSee the [perlop](http:\/\/perldoc.perl.org\/perlop.html) man page for more information.",
        "body": "<p>For string comparisons in Perl, use <code>eq<\/code> or <code>ne<\/code>:<\/p>\n\n<pre><code>if ($str eq \"\")\n{\n  \/\/ ...\n}\n<\/code><\/pre>\n\n<p>The <code>==<\/code> and <code>!=<\/code> operators are <em>numeric<\/em> comparison operators. They will attempt to convert both operands to integers before comparing them.<\/p>\n\n<p>See the <a href=\"http:\/\/perldoc.perl.org\/perlop.html\" rel=\"noreferrer\">perlop<\/a> man page for more information.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 289134,
            "reputation": 372786,
            "user_id": 589924,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/b2cf53d5a3d25f95c0db4e025aed4153?s=256&d=identicon&r=PG",
            "display_name": "ikegami",
            "link": "https:\/\/stackoverflow.com\/users\/589924\/ikegami"
        },
        "is_accepted": true,
        "score": 154,
        "last_activity_date": 1420908040,
        "last_edit_date": 1495541429.0,
        "creation_date": 1388692805,
        "answer_id": 20890822,
        "question_id": 20889609,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "`my` restricts the [scope](http:\/\/en.wikipedia.org\/wiki\/Scope_%28computer_science%29) of a variable. The scope of a variable is where it can be seen. Reducing a variable&#39;s scope to where the variable is needed is a fundamental aspect of good programming. It makes the code more readable and less error-prone, and results in a slew of derived benefits.\r\n\r\nIf you don&#39;t declare a variable using `my`, a global variable will be created instead. This is to be avoided. Using `use strict;` tells Perl you want to be prevented from implicitly creating global variables, which is why you should always use `use strict;` (and `use warnings;`) in your programs.\r\n\r\n---\r\n\r\nRelated reading: [Why use `use strict;` and `use warnings;`?](https:\/\/stackoverflow.com\/a\/8024241\/589924)\r\n\r\n",
        "body": "<p><code>my<\/code> restricts the <a href=\"http:\/\/en.wikipedia.org\/wiki\/Scope_%28computer_science%29\" rel=\"noreferrer\">scope<\/a> of a variable. The scope of a variable is where it can be seen. Reducing a variable's scope to where the variable is needed is a fundamental aspect of good programming. It makes the code more readable and less error-prone, and results in a slew of derived benefits.<\/p>\n\n<p>If you don't declare a variable using <code>my<\/code>, a global variable will be created instead. This is to be avoided. Using <code>use strict;<\/code> tells Perl you want to be prevented from implicitly creating global variables, which is why you should always use <code>use strict;<\/code> (and <code>use warnings;<\/code>) in your programs.<\/p>\n\n<hr>\n\n<p>Related reading: <a href=\"https:\/\/stackoverflow.com\/a\/8024241\/589924\">Why use <code>use strict;<\/code> and <code>use warnings;<\/code>?<\/a><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2246,
            "reputation": 7151,
            "user_id": 3101,
            "user_type": "registered",
            "accept_rate": 62,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/b64d136a3822a2e8194a583bb597ed99?s=256&d=identicon&r=PG",
            "display_name": "nohat",
            "link": "https:\/\/stackoverflow.com\/users\/3101\/nohat"
        },
        "is_accepted": true,
        "score": 151,
        "last_activity_date": 1543241041,
        "last_edit_date": 1543241041.0,
        "creation_date": 1219769614,
        "answer_id": 28589,
        "question_id": 12647,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Use `Scalar::Util::looks_like_number()` which uses the internal Perl C API&#39;s looks_like_number() function, which is probably the most efficient way to do this.\r\nNote that the strings &quot;inf&quot; and &quot;infinity&quot; are treated as numbers.\r\n\r\n##Example:\r\n\r\n    #!\/usr\/bin\/perl\r\n\r\n    use warnings;\r\n    use strict;\r\n\r\n    use Scalar::Util qw(looks_like_number);\r\n\r\n    my @exprs = qw(1 5.25 0.001 1.3e8 foo bar 1dd inf infinity);\r\n\r\n    foreach my $expr (@exprs) {\r\n        print &quot;$expr is&quot;, looks_like_number($expr) ? &#39;&#39; : &#39; not&#39;, &quot; a number\\n&quot;;\r\n    }\r\n\r\nGives this output:\r\n\r\n    1 is a number\r\n    5.25 is a number\r\n    0.001 is a number\r\n    1.3e8 is a number\r\n    foo is not a number\r\n    bar is not a number\r\n    1dd is not a number\r\n    inf is a number\r\n    infinity is a number\r\n\r\n\r\n##See also:\r\n\r\n- [perldoc Scalar::Util][1]\r\n- [perldoc perlapi][2] for `looks_like_number`\r\n\r\n\r\n  [1]: http:\/\/perldoc.perl.org\/Scalar\/Util.html\r\n  [2]: http:\/\/perldoc.perl.org\/perlapi.html#SV-Body-Allocation",
        "body": "<p>Use <code>Scalar::Util::looks_like_number()<\/code> which uses the internal Perl C API's looks_like_number() function, which is probably the most efficient way to do this.\nNote that the strings \"inf\" and \"infinity\" are treated as numbers.<\/p>\n\n<h2>Example:<\/h2>\n\n<pre><code>#!\/usr\/bin\/perl\n\nuse warnings;\nuse strict;\n\nuse Scalar::Util qw(looks_like_number);\n\nmy @exprs = qw(1 5.25 0.001 1.3e8 foo bar 1dd inf infinity);\n\nforeach my $expr (@exprs) {\n    print \"$expr is\", looks_like_number($expr) ? '' : ' not', \" a number\\n\";\n}\n<\/code><\/pre>\n\n<p>Gives this output:<\/p>\n\n<pre><code>1 is a number\n5.25 is a number\n0.001 is a number\n1.3e8 is a number\nfoo is not a number\nbar is not a number\n1dd is not a number\ninf is a number\ninfinity is a number\n<\/code><\/pre>\n\n<h2>See also:<\/h2>\n\n<ul>\n<li><a href=\"http:\/\/perldoc.perl.org\/Scalar\/Util.html\" rel=\"noreferrer\">perldoc Scalar::Util<\/a><\/li>\n<li><a href=\"http:\/\/perldoc.perl.org\/perlapi.html#SV-Body-Allocation\" rel=\"noreferrer\">perldoc perlapi<\/a> for <code>looks_like_number<\/code><\/li>\n<\/ul>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5089,
            "reputation": 11600,
            "user_id": 8003,
            "user_type": "registered",
            "accept_rate": 65,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/7f633daa0796788b31b868b5ffe98157?s=256&d=identicon&r=PG",
            "display_name": "Ovid",
            "link": "https:\/\/stackoverflow.com\/users\/8003\/ovid"
        },
        "is_accepted": false,
        "score": 150,
        "last_activity_date": 1562208467,
        "last_edit_date": 1562208467.0,
        "creation_date": 1221668388,
        "answer_id": 84959,
        "question_id": 84932,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "&lt;tt&gt;$0&lt;\/tt&gt; is typically the name of your program, so how about this?\r\n\r\n    use Cwd &#39;abs_path&#39;;\r\n    print abs_path($0);\r\n\r\nSeems to me that this should work as &lt;tt&gt;abs_path&lt;\/tt&gt; knows if you are using a relative or absolute path.\r\n\r\n&lt;strong&gt;Update&lt;\/strong&gt; For anyone reading this years later, you should read [Drew&#39;s answer][1]. It&#39;s much better than mine.\r\n\r\n\r\n  [1]: https:\/\/stackoverflow.com\/a\/90721\/2877364",
        "body": "<p>$0 is typically the name of your program, so how about this?<\/p>\n\n<pre><code>use Cwd 'abs_path';\nprint abs_path($0);\n<\/code><\/pre>\n\n<p>Seems to me that this should work as abs_path knows if you are using a relative or absolute path.<\/p>\n\n<p><strong>Update<\/strong> For anyone reading this years later, you should read <a href=\"https:\/\/stackoverflow.com\/a\/90721\/2877364\">Drew's answer<\/a>. It's much better than mine.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1007,
            "reputation": 33924,
            "user_id": 1337,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/72de240484e389dbedb6a3e428b9f0c1?s=256&d=identicon&r=PG",
            "display_name": "Brad Gilbert",
            "link": "https:\/\/stackoverflow.com\/users\/1337\/brad-gilbert"
        },
        "is_accepted": false,
        "score": 150,
        "last_activity_date": 1429972364,
        "last_edit_date": 1429972364.0,
        "creation_date": 1248400044,
        "answer_id": 1175418,
        "question_id": 1175390,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "- `cmp` Compare\r\n\r\n        &#39;a&#39; cmp &#39;b&#39; # -1\r\n        &#39;b&#39; cmp &#39;a&#39; #  1\r\n        &#39;a&#39; cmp &#39;a&#39; #  0\r\n\r\n- `eq` Equal to\r\n\r\n        &#39;a&#39; eq  &#39;b&#39; #  0\r\n        &#39;b&#39; eq  &#39;a&#39; #  0\r\n        &#39;a&#39; eq  &#39;a&#39; #  1\r\n\r\n- `ne` Not-Equal to\r\n\r\n        &#39;a&#39; ne  &#39;b&#39; #  1\r\n        &#39;b&#39; ne  &#39;a&#39; #  1\r\n        &#39;a&#39; ne  &#39;a&#39; #  0\r\n\r\n- `lt` Less than\r\n\r\n        &#39;a&#39; lt  &#39;b&#39; #  1\r\n        &#39;b&#39; lt  &#39;a&#39; #  0\r\n        &#39;a&#39; lt  &#39;a&#39; #  0\r\n\r\n- `le` Less than or equal to\r\n\r\n        &#39;a&#39; le  &#39;b&#39; #  1\r\n        &#39;b&#39; le  &#39;a&#39; #  0\r\n        &#39;a&#39; le  &#39;a&#39; #  1\r\n\r\n- `gt` Greater than\r\n\r\n        &#39;a&#39; gt  &#39;b&#39; #  0\r\n        &#39;b&#39; gt  &#39;a&#39; #  1\r\n        &#39;a&#39; gt  &#39;a&#39; #  0\r\n\r\n- `ge` Greater than or equal to\r\n\r\n        &#39;a&#39; ge  &#39;b&#39; #  0\r\n        &#39;b&#39; ge  &#39;a&#39; #  1\r\n        &#39;a&#39; ge  &#39;a&#39; #  1\r\n\r\n\r\nSee [`perldoc perlop`][perlop] for more information.\r\n\r\n[perlop]: http:\/\/perldoc.perl.org\/perlop.html#Equality-Operators\r\n\r\n( I&#39;m simplifying this a little bit as all but `cmp` return a value that is both an empty string, and a numerically zero value instead of `0`, and a value that is both the string `&#39;1&#39;` and the numeric value `1`. These are the same values you will always get from boolean operators in Perl. You should really only be using the return values for boolean or numeric operations, in which case the difference doesn&#39;t really matter. )",
        "body": "<ul>\n<li><p><code>cmp<\/code> Compare<\/p>\n\n<pre><code>'a' cmp 'b' # -1\n'b' cmp 'a' #  1\n'a' cmp 'a' #  0\n<\/code><\/pre><\/li>\n<li><p><code>eq<\/code> Equal to<\/p>\n\n<pre><code>'a' eq  'b' #  0\n'b' eq  'a' #  0\n'a' eq  'a' #  1\n<\/code><\/pre><\/li>\n<li><p><code>ne<\/code> Not-Equal to<\/p>\n\n<pre><code>'a' ne  'b' #  1\n'b' ne  'a' #  1\n'a' ne  'a' #  0\n<\/code><\/pre><\/li>\n<li><p><code>lt<\/code> Less than<\/p>\n\n<pre><code>'a' lt  'b' #  1\n'b' lt  'a' #  0\n'a' lt  'a' #  0\n<\/code><\/pre><\/li>\n<li><p><code>le<\/code> Less than or equal to<\/p>\n\n<pre><code>'a' le  'b' #  1\n'b' le  'a' #  0\n'a' le  'a' #  1\n<\/code><\/pre><\/li>\n<li><p><code>gt<\/code> Greater than<\/p>\n\n<pre><code>'a' gt  'b' #  0\n'b' gt  'a' #  1\n'a' gt  'a' #  0\n<\/code><\/pre><\/li>\n<li><p><code>ge<\/code> Greater than or equal to<\/p>\n\n<pre><code>'a' ge  'b' #  0\n'b' ge  'a' #  1\n'a' ge  'a' #  1\n<\/code><\/pre><\/li>\n<\/ul>\n\n<p>See <a href=\"http:\/\/perldoc.perl.org\/perlop.html#Equality-Operators\" rel=\"noreferrer\"><code>perldoc perlop<\/code><\/a> for more information.<\/p>\n\n<p>( I'm simplifying this a little bit as all but <code>cmp<\/code> return a value that is both an empty string, and a numerically zero value instead of <code>0<\/code>, and a value that is both the string <code>'1'<\/code> and the numeric value <code>1<\/code>. These are the same values you will always get from boolean operators in Perl. You should really only be using the return values for boolean or numeric operations, in which case the difference doesn't really matter. )<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2251762,
            "reputation": 278990,
            "user_id": 1983854,
            "user_type": "registered",
            "accept_rate": 96,
            "profile_image": "https:\/\/i.stack.imgur.com\/KiqLo.png?s=256&g=1",
            "display_name": "fedorqui",
            "link": "https:\/\/stackoverflow.com\/users\/1983854\/fedorqui"
        },
        "is_accepted": true,
        "score": 149,
        "last_activity_date": 1471618090,
        "last_edit_date": 1495541891.0,
        "creation_date": 1471344013,
        "answer_id": 38972737,
        "question_id": 38972736,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "# Print lines between PAT1 and PAT2\r\n\r\n    $ awk &#39;\/PAT1\/,\/PAT2\/&#39; file\r\n    PAT1\r\n    3    - first block\r\n    4\r\n    PAT2\r\n    PAT1\r\n    7    - second block\r\n    PAT2\r\n    PAT1\r\n    10    - third block\r\n\r\nOr, using variables:\r\n\r\n\tawk &#39;\/PAT1\/{flag=1} flag; \/PAT2\/{flag=0}&#39; file\r\n\r\nHow does this work?\r\n\r\n - `\/PAT1\/` matches lines having this text, as well as `\/PAT2\/` does.  \r\n - `\/PAT1\/{flag=1}` sets the `flag` when the text `PAT1` is found in a line.\r\n - `\/PAT2\/{flag=0}` unsets the `flag` when the text `PAT2` is found in a line.\r\n - `flag` is a pattern with the default action, which is to `print $0`: if `flag` is equal 1 the line is printed. This way, it will print all those lines occurring from the time `PAT1` occurs and up to the next `PAT2` is seen. This will also print the lines from the last match of `PAT1` up to the end of the file.\r\n\r\n# Print lines between PAT1 and PAT2 - not including PAT1 and PAT2\r\n\r\n    $ awk &#39;\/PAT1\/{flag=1; next} \/PAT2\/{flag=0} flag&#39; file\r\n    3    - first block\r\n    4\r\n    7    - second block\r\n    10    - third block\r\n\r\nThis uses `next` to skip the line that contains `PAT1` in order to avoid this being printed.\r\n\r\nThis call to `next` can be dropped by reshuffling the blocks: `awk &#39;\/PAT2\/{flag=0} flag; \/PAT1\/{flag=1}&#39; file`.\r\n\r\n# Print lines between PAT1 and PAT2 - including PAT1\r\n\r\n    $ awk &#39;\/PAT1\/{flag=1} \/PAT2\/{flag=0} flag&#39; file\r\n    PAT1\r\n    3    - first block\r\n    4\r\n    PAT1\r\n    7    - second block\r\n    PAT1\r\n    10    - third block\r\n\r\nBy placing `flag` at the very end, it triggers the action that was set on either PAT1 or PAT2: to print on PAT1, not to print on PAT2.\r\n\r\n# Print lines between PAT1 and PAT2 - including PAT2\r\n\r\n    $ awk &#39;flag; \/PAT1\/{flag=1} \/PAT2\/{flag=0}&#39; file\r\n    3    - first block\r\n    4\r\n    PAT2\r\n    7    - second block\r\n    PAT2\r\n    10    - third block\r\n\r\nBy placing `flag` at the very beginning, it triggers the action that was set previously and hence print the closing pattern but not the starting one.\r\n\r\n# Print lines between PAT1 and PAT2 - excluding lines from the last PAT1 to the end of file if no other PAT2 occurs\r\n\r\nThis is based on [a solution by Ed Morton][1].\r\n\r\n    awk &#39;flag{\r\n            if (\/PAT2\/)\r\n               {printf &quot;%s&quot;, buf; flag=0; buf=&quot;&quot;}\r\n            else\r\n                buf = buf $0 ORS\r\n         }\r\n         \/PAT1\/ {flag=1}&#39; file\r\n\r\nAs a one-liner:\r\n\r\n    $ awk &#39;flag{ if (\/PAT2\/){printf &quot;%s&quot;, buf; flag=0; buf=&quot;&quot;} else buf = buf $0 ORS}; \/PAT1\/{flag=1}&#39; file\r\n    3    - first block\r\n    4\r\n    7    - second block\r\n\r\n    # note the lack of third block, since no other PAT2 happens after it\r\n\r\nThis keeps all the selected lines in a buffer that gets populated from the moment PAT1 is found. Then, it keeps being filled with the following lines until PAT2 is found. In that point, it prints the stored content and empties the buffer.\r\n\r\n\r\n  [1]: https:\/\/stackoverflow.com\/a\/39018573\/1983854",
        "body": "<h1>Print lines between PAT1 and PAT2<\/h1>\n\n<pre><code>$ awk '\/PAT1\/,\/PAT2\/' file\nPAT1\n3    - first block\n4\nPAT2\nPAT1\n7    - second block\nPAT2\nPAT1\n10    - third block\n<\/code><\/pre>\n\n<p>Or, using variables:<\/p>\n\n<pre><code>awk '\/PAT1\/{flag=1} flag; \/PAT2\/{flag=0}' file\n<\/code><\/pre>\n\n<p>How does this work?<\/p>\n\n<ul>\n<li><code>\/PAT1\/<\/code> matches lines having this text, as well as <code>\/PAT2\/<\/code> does.  <\/li>\n<li><code>\/PAT1\/{flag=1}<\/code> sets the <code>flag<\/code> when the text <code>PAT1<\/code> is found in a line.<\/li>\n<li><code>\/PAT2\/{flag=0}<\/code> unsets the <code>flag<\/code> when the text <code>PAT2<\/code> is found in a line.<\/li>\n<li><code>flag<\/code> is a pattern with the default action, which is to <code>print $0<\/code>: if <code>flag<\/code> is equal 1 the line is printed. This way, it will print all those lines occurring from the time <code>PAT1<\/code> occurs and up to the next <code>PAT2<\/code> is seen. This will also print the lines from the last match of <code>PAT1<\/code> up to the end of the file.<\/li>\n<\/ul>\n\n<h1>Print lines between PAT1 and PAT2 - not including PAT1 and PAT2<\/h1>\n\n<pre><code>$ awk '\/PAT1\/{flag=1; next} \/PAT2\/{flag=0} flag' file\n3    - first block\n4\n7    - second block\n10    - third block\n<\/code><\/pre>\n\n<p>This uses <code>next<\/code> to skip the line that contains <code>PAT1<\/code> in order to avoid this being printed.<\/p>\n\n<p>This call to <code>next<\/code> can be dropped by reshuffling the blocks: <code>awk '\/PAT2\/{flag=0} flag; \/PAT1\/{flag=1}' file<\/code>.<\/p>\n\n<h1>Print lines between PAT1 and PAT2 - including PAT1<\/h1>\n\n<pre><code>$ awk '\/PAT1\/{flag=1} \/PAT2\/{flag=0} flag' file\nPAT1\n3    - first block\n4\nPAT1\n7    - second block\nPAT1\n10    - third block\n<\/code><\/pre>\n\n<p>By placing <code>flag<\/code> at the very end, it triggers the action that was set on either PAT1 or PAT2: to print on PAT1, not to print on PAT2.<\/p>\n\n<h1>Print lines between PAT1 and PAT2 - including PAT2<\/h1>\n\n<pre><code>$ awk 'flag; \/PAT1\/{flag=1} \/PAT2\/{flag=0}' file\n3    - first block\n4\nPAT2\n7    - second block\nPAT2\n10    - third block\n<\/code><\/pre>\n\n<p>By placing <code>flag<\/code> at the very beginning, it triggers the action that was set previously and hence print the closing pattern but not the starting one.<\/p>\n\n<h1>Print lines between PAT1 and PAT2 - excluding lines from the last PAT1 to the end of file if no other PAT2 occurs<\/h1>\n\n<p>This is based on <a href=\"https:\/\/stackoverflow.com\/a\/39018573\/1983854\">a solution by Ed Morton<\/a>.<\/p>\n\n<pre><code>awk 'flag{\n        if (\/PAT2\/)\n           {printf \"%s\", buf; flag=0; buf=\"\"}\n        else\n            buf = buf $0 ORS\n     }\n     \/PAT1\/ {flag=1}' file\n<\/code><\/pre>\n\n<p>As a one-liner:<\/p>\n\n<pre><code>$ awk 'flag{ if (\/PAT2\/){printf \"%s\", buf; flag=0; buf=\"\"} else buf = buf $0 ORS}; \/PAT1\/{flag=1}' file\n3    - first block\n4\n7    - second block\n\n# note the lack of third block, since no other PAT2 happens after it\n<\/code><\/pre>\n\n<p>This keeps all the selected lines in a buffer that gets populated from the moment PAT1 is found. Then, it keeps being filled with the following lines until PAT2 is found. In that point, it prints the stored content and empties the buffer.<\/p>\n",
        "community_owned_date": 1471344013.0
    },
    {
        "owner": {
            "account_id": 23236,
            "reputation": 17542,
            "user_id": 58089,
            "user_type": "registered",
            "accept_rate": 89,
            "profile_image": "https:\/\/i.stack.imgur.com\/27DPo.jpg?s=256&g=1",
            "display_name": "Eric Johnson",
            "link": "https:\/\/stackoverflow.com\/users\/58089\/eric-johnson"
        },
        "is_accepted": true,
        "score": 147,
        "last_activity_date": 1618313986,
        "last_edit_date": 1618313986.0,
        "creation_date": 1295924788,
        "answer_id": 4789615,
        "question_id": 4789605,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "To allow folds based on syntax add something like the following to your `.vimrc`:\r\n\r\n    set foldmethod=syntax\r\n    set foldlevelstart=1\r\n\r\n    let javaScript_fold=1         &quot; JavaScript\r\n    let perl_fold=1               &quot; Perl\r\n    let php_folding=1             &quot; PHP\r\n    let r_syntax_folding=1        &quot; R\r\n    let ruby_fold=1               &quot; Ruby\r\n    let sh_fold_enabled=1         &quot; sh\r\n    let vimsyn_folding=&#39;af&#39;       &quot; Vim script\r\n    let xml_syntax_folding=1      &quot; XML\r\n\r\nSyntax based folding is defined in the syntax files of the language which are located in `$VIM\/syntax` or `\/usr\/share\/vim\/vimXX\/syntax\/`.  But some languages do not have folding rules built into their syntax files; for example Python.  For those languages you need to download something from &lt;http:\/\/vim.sf.net&gt; that does folds.  Otherwise you will need to use folds based on indents.  To do this effectively you will likely want to add the following to your `.vimrc` file: \r\n\r\n    set foldmethod=indent\r\n    set foldnestmax=2\r\n\r\n\r\n# Other kinds of folding\r\n\r\nThere are 6 types of folds:\r\n\r\n    manual          manually define folds\r\n    indent          more indent means a higher fold level\r\n    expr            specify an expression to define folds\r\n    syntax          folds defined by syntax highlighting\r\n    diff            folds for unchanged text\r\n    marker          folds defined by markers in the text\r\n\r\nPersonally, I only use syntax folds.  Usually, I just want to fold the method and not fold every indent level.  Inconsistent indenting and weirdly formatted legacy code at work often makes indent folding difficult or impossible.  Adding marks to the document is tedious and people who do not use Vim will not maintain them when they edit the document.  Manual folds work great until someone edits your code in source control and all your folds are now in the wrong place.  \r\n\r\n\r\n# More reading\r\n\r\n1. See `:help fold-methods` to learn the details of different fold methods.\r\n2. See `:help folding` to learn the keyboard commands for manipulate folds.\r\n3. See `:help folds` for help on the entire topic of folding.",
        "body": "<p>To allow folds based on syntax add something like the following to your <code>.vimrc<\/code>:<\/p>\n<pre><code>set foldmethod=syntax\nset foldlevelstart=1\n\nlet javaScript_fold=1         &quot; JavaScript\nlet perl_fold=1               &quot; Perl\nlet php_folding=1             &quot; PHP\nlet r_syntax_folding=1        &quot; R\nlet ruby_fold=1               &quot; Ruby\nlet sh_fold_enabled=1         &quot; sh\nlet vimsyn_folding='af'       &quot; Vim script\nlet xml_syntax_folding=1      &quot; XML\n<\/code><\/pre>\n<p>Syntax based folding is defined in the syntax files of the language which are located in <code>$VIM\/syntax<\/code> or <code>\/usr\/share\/vim\/vimXX\/syntax\/<\/code>.  But some languages do not have folding rules built into their syntax files; for example Python.  For those languages you need to download something from <a href=\"http:\/\/vim.sf.net\" rel=\"noreferrer\">http:\/\/vim.sf.net<\/a> that does folds.  Otherwise you will need to use folds based on indents.  To do this effectively you will likely want to add the following to your <code>.vimrc<\/code> file:<\/p>\n<pre><code>set foldmethod=indent\nset foldnestmax=2\n<\/code><\/pre>\n<h1>Other kinds of folding<\/h1>\n<p>There are 6 types of folds:<\/p>\n<pre><code>manual          manually define folds\nindent          more indent means a higher fold level\nexpr            specify an expression to define folds\nsyntax          folds defined by syntax highlighting\ndiff            folds for unchanged text\nmarker          folds defined by markers in the text\n<\/code><\/pre>\n<p>Personally, I only use syntax folds.  Usually, I just want to fold the method and not fold every indent level.  Inconsistent indenting and weirdly formatted legacy code at work often makes indent folding difficult or impossible.  Adding marks to the document is tedious and people who do not use Vim will not maintain them when they edit the document.  Manual folds work great until someone edits your code in source control and all your folds are now in the wrong place.<\/p>\n<h1>More reading<\/h1>\n<ol>\n<li>See <code>:help fold-methods<\/code> to learn the details of different fold methods.<\/li>\n<li>See <code>:help folding<\/code> to learn the keyboard commands for manipulate folds.<\/li>\n<li>See <code>:help folds<\/code> for help on the entire topic of folding.<\/li>\n<\/ol>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 184675,
            "reputation": 14610,
            "user_id": 420867,
            "user_type": "registered",
            "accept_rate": 68,
            "profile_image": "https:\/\/i.stack.imgur.com\/d3eFg.jpg?s=256&g=1",
            "display_name": "drevicko",
            "link": "https:\/\/stackoverflow.com\/users\/420867\/drevicko"
        },
        "is_accepted": false,
        "score": 146,
        "last_activity_date": 1573780413,
        "last_edit_date": 1573780413.0,
        "creation_date": 1395981882,
        "answer_id": 22704387,
        "question_id": 16658333,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "If your scripts are for your use only, you can install `grep` from [`homebrew-core`][1] using [`brew`][2]:\r\n\r\n    brew install grep \r\n\r\nThen it&#39;s available as `ggrep` (GNU `grep`).\r\n  [1]: https:\/\/github.com\/Homebrew\/homebrew-core\r\n  [2]: http:\/\/brew.sh\/\r\n\r\nit doesn&#39;t replaces the system `grep` (you need to put the installed grep before the system one on the `PATH`). \r\n\r\nThe version installed by `brew` includes the `-P` option, so you don&#39;t need to change your scripts.\r\n\r\nIf you need to use these commands with their normal names, you\r\ncan add a &quot;gnubin&quot; directory to your PATH from your bashrc like:\r\n\r\n    PATH=&quot;\/usr\/local\/opt\/grep\/libexec\/gnubin:$PATH&quot;\r\n    \r\nYou can export this line on your ~\/.bashrc or ~\/.zshrc to keep it for new sessions.\r\n\r\nPlease see [here](https:\/\/stackoverflow.com\/users\/6368697\/patrick-mevzek) for a discussion of the pro-s and cons of the old `--with-default-names` option and it&#39;s (recent) removal.",
        "body": "<p>If your scripts are for your use only, you can install <code>grep<\/code> from <a href=\"https:\/\/github.com\/Homebrew\/homebrew-core\" rel=\"noreferrer\"><code>homebrew-core<\/code><\/a> using <a href=\"http:\/\/brew.sh\/\" rel=\"noreferrer\"><code>brew<\/code><\/a>:<\/p>\n\n<pre><code>brew install grep \n<\/code><\/pre>\n\n<p>Then it's available as <code>ggrep<\/code> (GNU <code>grep<\/code>).\nit doesn't replaces the system <code>grep<\/code> (you need to put the installed grep before the system one on the <code>PATH<\/code>). <\/p>\n\n<p>The version installed by <code>brew<\/code> includes the <code>-P<\/code> option, so you don't need to change your scripts.<\/p>\n\n<p>If you need to use these commands with their normal names, you\ncan add a \"gnubin\" directory to your PATH from your bashrc like:<\/p>\n\n<pre><code>PATH=\"\/usr\/local\/opt\/grep\/libexec\/gnubin:$PATH\"\n<\/code><\/pre>\n\n<p>You can export this line on your ~\/.bashrc or ~\/.zshrc to keep it for new sessions.<\/p>\n\n<p>Please see <a href=\"https:\/\/stackoverflow.com\/users\/6368697\/patrick-mevzek\">here<\/a> for a discussion of the pro-s and cons of the old <code>--with-default-names<\/code> option and it's (recent) removal.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 136706,
            "reputation": 12452,
            "user_id": 340390,
            "user_type": "registered",
            "accept_rate": 81,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/3d573d54c8181cdfafaacc5615087d1c?s=256&d=identicon&r=PG",
            "display_name": "Bitmap",
            "link": "https:\/\/stackoverflow.com\/users\/340390\/bitmap"
        },
        "is_accepted": false,
        "score": 145,
        "last_activity_date": 1446484652,
        "last_edit_date": 1446484652.0,
        "creation_date": 1386950083,
        "answer_id": 20570606,
        "question_id": 2860226,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "You can use smartmatch feature in *Perl 5.10* as follows:\r\n\r\nFor literal value lookup doing below will do the trick.\r\n\r\n    if ( &quot;value&quot; ~~ @array ) \r\n\r\nFor scalar lookup, doing below will work as above.\r\n\r\n    if ($val ~~ @array)\r\n\r\nFor inline array doing below, will work as above.\r\n\r\n    if ( $var ~~ [&#39;bar&#39;, &#39;value&#39;, &#39;foo&#39;] ) \r\n\r\nIn *Perl 5.18* smartmatch is flagged as experimental therefore you need to turn off the warnings by turning on [experimental][1] pragma by adding below to your script\/module:\r\n\r\n    use experimental &#39;smartmatch&#39;;\r\n\r\nAlternatively if you want to avoid the use of smartmatch - then as Aaron said use:\r\n\r\n    if ( grep( \/^$value$\/, @array ) ) {\r\n      #TODO:\r\n    }\r\n\r\n  [1]: https:\/\/metacpan.org\/pod\/experimental\r\n",
        "body": "<p>You can use smartmatch feature in <em>Perl 5.10<\/em> as follows:<\/p>\n\n<p>For literal value lookup doing below will do the trick.<\/p>\n\n<pre><code>if ( \"value\" ~~ @array ) \n<\/code><\/pre>\n\n<p>For scalar lookup, doing below will work as above.<\/p>\n\n<pre><code>if ($val ~~ @array)\n<\/code><\/pre>\n\n<p>For inline array doing below, will work as above.<\/p>\n\n<pre><code>if ( $var ~~ ['bar', 'value', 'foo'] ) \n<\/code><\/pre>\n\n<p>In <em>Perl 5.18<\/em> smartmatch is flagged as experimental therefore you need to turn off the warnings by turning on <a href=\"https:\/\/metacpan.org\/pod\/experimental\">experimental<\/a> pragma by adding below to your script\/module:<\/p>\n\n<pre><code>use experimental 'smartmatch';\n<\/code><\/pre>\n\n<p>Alternatively if you want to avoid the use of smartmatch - then as Aaron said use:<\/p>\n\n<pre><code>if ( grep( \/^$value$\/, @array ) ) {\n  #TODO:\n}\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 29074,
            "reputation": 64398,
            "user_id": 78259,
            "user_type": "registered",
            "accept_rate": 53,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/844c572938eaad1e44eb084fb39416f9?s=256&d=identicon&r=PG",
            "display_name": "Chas. Owens",
            "link": "https:\/\/stackoverflow.com\/users\/78259\/chas-owens"
        },
        "is_accepted": true,
        "score": 144,
        "last_activity_date": 1413397372,
        "last_edit_date": 1413397372.0,
        "creation_date": 1275747815,
        "answer_id": 2980715,
        "question_id": 2980297,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "The easiest method I have found so far is to say\r\n\r\n    wget -O- http:\/\/cpanmin.us | perl - -l ~\/perl5 App::cpanminus local::lib\r\n    eval `perl -I ~\/perl5\/lib\/perl5 -Mlocal::lib`\r\n    echo &#39;eval `perl -I ~\/perl5\/lib\/perl5 -Mlocal::lib`&#39; &gt;&gt; ~\/.profile\r\n    echo &#39;export MANPATH=$HOME\/perl5\/man:$MANPATH&#39; &gt;&gt; ~\/.profile\r\n\r\nThis assumes your profile is named `.profile`, you may need to change that to be `.bash_profile`, `.bashrc`, etc.  After that you can install modules by saying\r\n\r\n    cpanm Module::Name\r\n\r\nand simply use them the same way you would if the were installed in the root directories.\r\n\r\n----------\r\n\r\nWhat follows is a brief explanation of what the commands above do.\r\n\r\n`wget -O- http:\/\/cpanmin.us` fetches the latest version of `cpanm` and prints it to `STDOUT` which is then piped to `perl - -l ~\/perl5 App::cpanminus local::lib`.  The first `-` tells `perl` to expect the program to come in on `STDIN`, this makes `perl` run the version of `cpanm` we just downloaded.  `perl` passes the rest of the arguments to `cpanm`.  The `-l ~\/perl5` argument tells `cpanm` where to install Perl modules, and the other two arguments are two modules to install.  `[App::cpanmins`][1] is the package that installs `cpanm`.  [`local::lib`][2] is a helper module that manages the environment variables needed to run modules in local directory.\r\n\r\nAfter those modules are installed we run \r\n\r\n    eval `perl -I ~\/perl5\/lib\/perl5 -Mlocal::lib`\r\n\r\nto set the environment variables needed to use the local modules and then\r\n\r\n    echo &#39;eval `perl -I ~\/perl5\/lib\/perl5 -Mlocal::lib`&#39; &gt;&gt; ~\/.profile\r\n\r\nto ensure we will be able to use them the next time we log in.\r\n\r\n    echo &#39;export MANPATH=$HOME\/perl5\/man:$MANPATH&#39; &gt;&gt; ~\/.profile\r\n\r\nwill hopefully cause man to find the man pages for your local modules.\r\n\r\n  [1]: http:\/\/search.cpan.org\/dist\/App-cpanminus\/lib\/App\/cpanminus.pm\r\n  [2]: http:\/\/search.cpan.org\/dist\/local-lib\/lib\/local\/lib.pm",
        "body": "<p>The easiest method I have found so far is to say<\/p>\n\n<pre><code>wget -O- http:\/\/cpanmin.us | perl - -l ~\/perl5 App::cpanminus local::lib\neval `perl -I ~\/perl5\/lib\/perl5 -Mlocal::lib`\necho 'eval `perl -I ~\/perl5\/lib\/perl5 -Mlocal::lib`' &gt;&gt; ~\/.profile\necho 'export MANPATH=$HOME\/perl5\/man:$MANPATH' &gt;&gt; ~\/.profile\n<\/code><\/pre>\n\n<p>This assumes your profile is named <code>.profile<\/code>, you may need to change that to be <code>.bash_profile<\/code>, <code>.bashrc<\/code>, etc.  After that you can install modules by saying<\/p>\n\n<pre><code>cpanm Module::Name\n<\/code><\/pre>\n\n<p>and simply use them the same way you would if the were installed in the root directories.<\/p>\n\n<hr>\n\n<p>What follows is a brief explanation of what the commands above do.<\/p>\n\n<p><code>wget -O- http:\/\/cpanmin.us<\/code> fetches the latest version of <code>cpanm<\/code> and prints it to <code>STDOUT<\/code> which is then piped to <code>perl - -l ~\/perl5 App::cpanminus local::lib<\/code>.  The first <code>-<\/code> tells <code>perl<\/code> to expect the program to come in on <code>STDIN<\/code>, this makes <code>perl<\/code> run the version of <code>cpanm<\/code> we just downloaded.  <code>perl<\/code> passes the rest of the arguments to <code>cpanm<\/code>.  The <code>-l ~\/perl5<\/code> argument tells <code>cpanm<\/code> where to install Perl modules, and the other two arguments are two modules to install.  <code>[App::cpanmins<\/code>]<a href=\"http:\/\/search.cpan.org\/dist\/App-cpanminus\/lib\/App\/cpanminus.pm\" rel=\"noreferrer\">1<\/a> is the package that installs <code>cpanm<\/code>.  <a href=\"http:\/\/search.cpan.org\/dist\/local-lib\/lib\/local\/lib.pm\" rel=\"noreferrer\"><code>local::lib<\/code><\/a> is a helper module that manages the environment variables needed to run modules in local directory.<\/p>\n\n<p>After those modules are installed we run <\/p>\n\n<pre><code>eval `perl -I ~\/perl5\/lib\/perl5 -Mlocal::lib`\n<\/code><\/pre>\n\n<p>to set the environment variables needed to use the local modules and then<\/p>\n\n<pre><code>echo 'eval `perl -I ~\/perl5\/lib\/perl5 -Mlocal::lib`' &gt;&gt; ~\/.profile\n<\/code><\/pre>\n\n<p>to ensure we will be able to use them the next time we log in.<\/p>\n\n<pre><code>echo 'export MANPATH=$HOME\/perl5\/man:$MANPATH' &gt;&gt; ~\/.profile\n<\/code><\/pre>\n\n<p>will hopefully cause man to find the man pages for your local modules.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2577836,
            "reputation": 119664,
            "user_id": 2235132,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/6OtIV.jpg?s=256&g=1",
            "display_name": "devnull",
            "link": "https:\/\/stackoverflow.com\/users\/2235132\/devnull"
        },
        "is_accepted": false,
        "score": 140,
        "last_activity_date": 1665679266,
        "last_edit_date": 1665679266.0,
        "creation_date": 1386394062,
        "answer_id": 20437994,
        "question_id": 2702564,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "None of the solution thus far use `paste`.  Here&#39;s one:\r\n\r\n    paste -sd+ filename | bc\r\n\r\nIf the file has a trailing newline, a trailing `+` will incur a syntax error. Fix the error by removing the trailing `+`:\r\n\r\n    paste -sd+ fiilename | sed &#39;s\/+$\/\/g&#39; | bc\r\n\r\nAs an example, calculate \u03a3n where 1&lt;=n&lt;=100000:\r\n\r\n    $ seq 100000 | paste -sd+ | bc -l\r\n    5000050000\r\n\r\n(For the curious, `seq n` would print a sequence of numbers from `1` to `n` given a positive number `n`.)",
        "body": "<p>None of the solution thus far use <code>paste<\/code>.  Here's one:<\/p>\n<pre><code>paste -sd+ filename | bc\n<\/code><\/pre>\n<p>If the file has a trailing newline, a trailing <code>+<\/code> will incur a syntax error. Fix the error by removing the trailing <code>+<\/code>:<\/p>\n<pre><code>paste -sd+ fiilename | sed 's\/+$\/\/g' | bc\n<\/code><\/pre>\n<p>As an example, calculate \u03a3n where 1&lt;=n&lt;=100000:<\/p>\n<pre><code>$ seq 100000 | paste -sd+ | bc -l\n5000050000\n<\/code><\/pre>\n<p>(For the curious, <code>seq n<\/code> would print a sequence of numbers from <code>1<\/code> to <code>n<\/code> given a positive number <code>n<\/code>.)<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 10879,
            "reputation": 66077,
            "user_id": 20745,
            "user_type": "registered",
            "accept_rate": 94,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/dc5d9e7efea07afc78d5408680438507?s=256&d=identicon&r=PG",
            "display_name": "friedo",
            "link": "https:\/\/stackoverflow.com\/users\/20745\/friedo"
        },
        "is_accepted": true,
        "score": 135,
        "last_activity_date": 1403378403,
        "last_edit_date": 1403378403.0,
        "creation_date": 1259957364,
        "answer_id": 1849356,
        "question_id": 1849329,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "That puts the regex itself in scalar context, which isn&#39;t what you want. Instead, put the regex in list context (to get the number of matches) and put *that* into scalar context.\r\n\r\n     my $number = () = $string =~ \/\\.\/gi;\r\n\r\n\r\n",
        "body": "<p>That puts the regex itself in scalar context, which isn't what you want. Instead, put the regex in list context (to get the number of matches) and put <em>that<\/em> into scalar context.<\/p>\n\n<pre><code> my $number = () = $string =~ \/\\.\/gi;\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5473,
            "reputation": 130134,
            "user_id": 2766176,
            "user_type": "registered",
            "accept_rate": 61,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/edd8638efe875601bfe394a8aea5b16d?s=256&d=identicon&r=PG",
            "display_name": "brian d foy",
            "link": "https:\/\/stackoverflow.com\/users\/2766176\/brian-d-foy"
        },
        "is_accepted": true,
        "score": 135,
        "last_activity_date": 1535861858,
        "last_edit_date": 1535861858.0,
        "creation_date": 1264798023,
        "answer_id": 2165040,
        "question_id": 2165022,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "This answer is intended as a general framework for working through\r\nproblems with Perl CGI scripts and originally appeared on Perlmonks as [Troubleshooting Perl CGI Scripts](http:\/\/www.perlmonks.org\/?node_id=380424).  It is not a complete guide to every\r\nproblem that you may encounter, nor a tutorial on bug squashing.  It\r\nis just the culmination of my experience debugging CGI scripts for twenty (plus!) years.  This page seems to have had many different homes, and I seem\r\nto forget it exists, so I&#39;m adding it to the StackOverflow. You\r\ncan send any comments or suggestions to me at \r\nbdfoy@cpan.org. It&#39;s also community wiki, but don&#39;t go too nuts. :)\r\n\r\n&lt;hr&gt;\r\n\r\n### Are you using Perl&#39;s built in features to help you find problems?\r\n\r\nTurn on warnings to let Perl warn you about questionable parts of your code. You can do this from the command line with the `-w` switch so you don&#39;t have to change any code or add a pragma to every file:\r\n\r\n     % perl -w program.pl\r\n\r\nHowever, you should force yourself to always clear up questionable code by adding the `warnings` pragma to all of your files:\r\n\r\n     use warnings;\r\n\r\nIf you need more information than the short warning message, use the `diagnostics` pragma to get more information, or look in the [perldiag](http:\/\/perldoc.perl.org\/perldiag.html) documentation:\r\n\r\n     use diagnostics;\r\n\r\n### Did you output a valid CGI header first?\r\n\r\nThe server is expecting the first output from a CGI script to be the CGI header.  Typically that might be as simple as `print &quot;Content-type: text\/plain\\n\\n&quot;;` or with [CGI.pm][1] and its derivatives, `print header()`.  Some servers are sensitive to error output (on `STDERR`) showing up before standard output (on `STDOUT`).\r\n\r\n### Try sending errors to the browser\r\n\r\nAdd this line\r\n\r\n     use CGI::Carp &#39;fatalsToBrowser&#39;;\r\n\r\nto your script. This also sends compilation errors to the browser window. Be sure to remove this before moving to a production environment, as the extra information can be a security risk.\r\n\r\n### What did the error log say?\r\n\r\nServers keep error logs (or they should, at least). \r\nError output from the server and from your script should\r\nshow up there.  Find the error log and see what it says.\r\nThere isn&#39;t a standard place for log files.  Look in the \r\nserver configuration for their location, or ask the server\r\nadmin.  You can also use tools such as [CGI::Carp][5]\r\nto keep your own log files. \r\n\r\n### What are the script&#39;s permissions?\r\n\r\nIf you see errors like &amp;quot;Permission denied&amp;quot; or &amp;quot;Method not\r\nimplemented&amp;quot;, it probably means that your script is not\r\nreadable and executable by the web server user.  On flavors\r\nof Unix, changing the mode to 755 is recommended:\r\n`chmod 755 filename`. &lt;font\r\ncolor=&quot;#FF0000&quot;&gt;Never set a mode to 777!&lt;\/font&gt;\r\n\r\n### Are you using `use strict`?\r\n\r\nRemember that Perl automatically creates variables when\r\nyou first use them.  This is a feature, but sometimes can\r\ncause bugs if you mistype a variable name.  The pragma\r\n[`use strict`][6] will help you find those sorts of\r\nerrors.  It&#39;s annoying until you get used to it, but your\r\nprogramming will improve significantly after awhile and\r\nyou will be free to make different mistakes.\r\n\r\n### Does the script compile?\r\n\r\nYou can check for compilation errors by using the `-c`\r\nswitch.  Concentrate on the first errors reported.  Rinse,\r\nrepeat. If you are getting really strange errors, check to\r\nensure that your script has the right line endings.  If you\r\nFTP in binary mode, checkout from CVS, or something else that\r\ndoes not handle line end translation, the web server may see\r\nyour script as one big line.  Transfer Perl scripts in ASCII\r\nmode.\r\n\r\n### Is the script complaining about insecure dependencies?\r\n\r\nIf your script complains about insecure dependencies, you \r\nare probably using the `-T` switch to turn on taint mode, which is\r\na good thing since it keeps you have passing unchecked data to the shell. If\r\nit is complaining it is doing its job to help us write more secure scripts. Any\r\ndata originating from outside of the program (i.e. the environment)\r\nis considered tainted.  Environment variables such as `PATH` and\r\n`LD_LIBRARY_PATH`\r\nare particularly troublesome.  You have to set these to a safe value\r\nor unset them completely, as I recommend.  You should be using absolute\r\npaths anyway.  If taint checking complains about something else,\r\nmake sure that you have untainted the data.  See [perlsec][7]\r\nman page for details.\r\n\r\n### What happens when you run it from the command line?\r\n\r\nDoes the script output what you expect when run from the\r\ncommand line?  Is the header output first, followed by a\r\nblank line?  Remember that `STDERR` may be merged with `STDOUT`\r\nif you are on a terminal (e.g. an interactive session), and\r\ndue to buffering may show up in a jumbled order.  Turn on\r\nPerl&#39;s autoflush feature by setting `$|` to a\r\ntrue value. Typically you might see `$|++;` in\r\nCGI programs.  Once set, every print and write will\r\nimmediately go to the output rather than being buffered.\r\nYou have to set this for each filehandle.  Use `select` to\r\nchange the default filehandle, like so:\r\n\r\n    $|++;                            #sets $| for STDOUT\r\n    $old_handle = select( STDERR );  #change to STDERR\r\n    $|++;                            #sets $| for STDERR\r\n    select( $old_handle );           #change back to STDOUT\r\n\r\nEither way, the first thing output should be the CGI header\r\nfollowed by a blank line.\r\n\r\n### What happens when you run it from the command line with a CGI-like environment?\r\n\r\nThe web server environment is usually a lot more limited\r\nthan your command line environment, and has extra\r\ninformation about the request.  If your script runs fine\r\nfrom the command line, you might try simulating a web server\r\nenvironment.  If the problem appears, you have an\r\nenvironment problem.\r\n\r\nUnset or remove these variables\r\n\r\n- `PATH`\r\n- `LD_LIBRARY_PATH`\r\n- all `ORACLE_*` variables\r\n\t\r\nSet these variables\r\n\r\n- `REQUEST_METHOD` (set to `GET`, `HEAD`, or `POST` as appropriate)\r\n- `SERVER_PORT` (set to 80, usually)\r\n- `REMOTE_USER` (if you are doing protected access stuff)\r\n\r\nRecent versions of `CGI.pm` ( &gt; 2.75 ) require the `-debug` flag to \r\nget the old (useful) behavior, so you might have to add it to\r\nyour `CGI.pm` imports.\r\n\r\n\tuse CGI qw(-debug)\r\n\r\n### Are you using `die()` or `warn`?\r\n\r\nThose functions print to `STDERR` unless you have redefined \r\nthem.  They don&#39;t output a CGI header, either.  You can get\r\nthe same functionality with packages such as [CGI::Carp][5]\r\n\r\n### What happens after you clear the browser cache?\r\n\r\nIf you think your script is doing the right thing, and\r\nwhen you perform the request manually you get the right\r\noutput, the browser might be the culprit.  Clear the cache\r\nand set the cache size to zero while testing.  Remember that\r\nsome browsers are really stupid and won&#39;t actually reload\r\nnew content even though you tell it to do so.  This is\r\nespecially prevalent in cases where the URL path is the\r\nsame, but the content changes (e.g. dynamic images).\r\n\r\n### Is the script where you think it is?\r\n\r\nThe file system path to a script is not necessarily\r\ndirectly related to the URL path to the script.  Make sure\r\nyou have the right directory, even if you have to write a\r\nshort test script to test this.  Furthermore, are you sure\r\nthat you are modifying the correct file?  If you don&#39;t see\r\nany effect with your changes, you might be modifying a\r\ndifferent file, or uploading a file to the wrong place. \r\n(This is, by the way, my most frequent cause of such trouble\r\n;)\r\n\r\n### Are you using [`CGI.pm`][1], or a derivative of it?\r\n\r\nIf your problem is related to parsing the CGI input and you\r\naren&#39;t using a widely tested module like `CGI.pm`, [`CGI::Request`][2],\r\n[`CGI::Simple`][3] or [`CGI::Lite`][4], use the module and get on with life.\r\n`CGI.pm` has a `cgi-lib.pl` compatibility mode which can help you solve input\r\nproblems due to older CGI parser implementations.\r\n\r\n### Did you use absolute paths?\r\n\r\nIf you are running external commands with\r\n`system`, back ticks, or other IPC facilities,\r\nyou should use an absolute path to the external program. \r\nNot only do you know exactly what you are running, but you\r\navoid some security problems as well.  If you are opening\r\nfiles for either reading or writing, use an absolute path. \r\nThe CGI script may have a different idea about the current\r\ndirectory than you do.  Alternatively, you can do an\r\nexplicit `chdir()` to put you in the right place.\r\n\r\n### Did you check your return values?\r\n\r\nMost Perl functions will tell you if they worked or not\r\nand will set `$!` on failure.  Did you check the\r\nreturn value and examine `$!` for error messages? Did you check\r\n`$@` if you were using `eval`?\r\n\r\n### Which version of Perl are you using?\r\n\r\nThe latest stable version of Perl is 5.28 (or not, depending on when this was last edited).  Are you using an older version?  Different versions of Perl may have different ideas of warnings.\r\n\r\n### Which web server are you using?\r\n\r\nDifferent servers may act differently in the same\r\nsituation.  The same server product may act differently with\r\ndifferent configurations. Include as much of this\r\ninformation as you can in any request for help.\r\n\r\n### Did you check the server documentation?\r\n\r\nSerious CGI programmers should know as much about the\r\nserver as possible - including not only the server features\r\nand behavior, but also the local configuration. The\r\ndocumentation for your server might not be available to you\r\nif you are using a commercial product.  Otherwise, the\r\ndocumentation should be on your server.  If it isn&#39;t, look\r\nfor it on the web. \r\n\r\n### Did you search the archives of [`comp.infosystems.www.authoring.cgi`](http:\/\/groups.google.com\/group\/comp.infosystems.www.authoring.cgi)?\r\n\r\n_This use to be useful but all the good posters have either died or wandered off._\r\n\r\nIt&#39;s likely that someone has had your problem before,\r\nand that someone (possibly me) has answered it in this\r\nnewsgroup. Although this newsgroup has passed its heyday, the collected wisdom from the past can sometimes be useful.\r\n\r\n### Can you reproduce the problem with a short test script?\r\n\r\nIn large systems, it may be difficult to track down a bug\r\nsince so many things are happening.  Try to reproduce the problem\r\nbehavior with the shortest possible script.  Knowing the problem\r\nis most of the fix.  This may be certainly time-consuming, but you\r\nhaven&#39;t found the problem yet and you&#39;re running out of options. :)\r\n\r\n### Did you decide to go see a movie?\r\n\r\nSeriously.  Sometimes we can get so wrapped up in the problem that we\r\ndevelop &amp;quot;perceptual narrowing&amp;quot; (tunnel vision).  Taking a break,\r\ngetting a cup of coffee, or blasting some bad guys in [Duke Nukem,Quake,Doom,Halo,COD] might give you\r\nthe fresh perspective that you need to re-approach the problem.\r\n\r\n### Have you vocalized the problem?\r\n\r\nSeriously again.  Sometimes explaining the problem aloud\r\nleads us to our own answers.  Talk to the penguin (plush toy) because\r\nyour co-workers aren&#39;t listening.  If you are interested in this\r\nas a serious debugging tool (and I do recommend it if you haven&#39;t \r\nfound the problem by now), you might also like to read [The Psychology\r\nof Computer Programming](http:\/\/www.amazon.com\/exec\/obidos\/ASIN\/0932633420\/).\r\n\r\n [1]: http:\/\/search.cpan.org\/perldoc\/CGI\r\n [2]: http:\/\/search.cpan.org\/perldoc\/CGI::Request\r\n [3]: http:\/\/search.cpan.org\/perldoc\/CGI::Simple\r\n [4]: http:\/\/search.cpan.org\/perldoc\/CGI::Lite\r\n [5]: http:\/\/search.cpan.org\/perldoc\/CGI::Carp\r\n [6]: http:\/\/perldoc.perl.org\/strict.html\r\n [7]: http:\/\/perldoc.perl.org\/perlsec.html\r\n\r\n",
        "body": "<p>This answer is intended as a general framework for working through\nproblems with Perl CGI scripts and originally appeared on Perlmonks as <a href=\"http:\/\/www.perlmonks.org\/?node_id=380424\" rel=\"noreferrer\">Troubleshooting Perl CGI Scripts<\/a>.  It is not a complete guide to every\nproblem that you may encounter, nor a tutorial on bug squashing.  It\nis just the culmination of my experience debugging CGI scripts for twenty (plus!) years.  This page seems to have had many different homes, and I seem\nto forget it exists, so I'm adding it to the StackOverflow. You\ncan send any comments or suggestions to me at \nbdfoy@cpan.org. It's also community wiki, but don't go too nuts. :)<\/p>\n\n<hr>\n\n<h3>Are you using Perl's built in features to help you find problems?<\/h3>\n\n<p>Turn on warnings to let Perl warn you about questionable parts of your code. You can do this from the command line with the <code>-w<\/code> switch so you don't have to change any code or add a pragma to every file:<\/p>\n\n<pre><code> % perl -w program.pl\n<\/code><\/pre>\n\n<p>However, you should force yourself to always clear up questionable code by adding the <code>warnings<\/code> pragma to all of your files:<\/p>\n\n<pre><code> use warnings;\n<\/code><\/pre>\n\n<p>If you need more information than the short warning message, use the <code>diagnostics<\/code> pragma to get more information, or look in the <a href=\"http:\/\/perldoc.perl.org\/perldiag.html\" rel=\"noreferrer\">perldiag<\/a> documentation:<\/p>\n\n<pre><code> use diagnostics;\n<\/code><\/pre>\n\n<h3>Did you output a valid CGI header first?<\/h3>\n\n<p>The server is expecting the first output from a CGI script to be the CGI header.  Typically that might be as simple as <code>print \"Content-type: text\/plain\\n\\n\";<\/code> or with <a href=\"http:\/\/search.cpan.org\/perldoc\/CGI\" rel=\"noreferrer\">CGI.pm<\/a> and its derivatives, <code>print header()<\/code>.  Some servers are sensitive to error output (on <code>STDERR<\/code>) showing up before standard output (on <code>STDOUT<\/code>).<\/p>\n\n<h3>Try sending errors to the browser<\/h3>\n\n<p>Add this line<\/p>\n\n<pre><code> use CGI::Carp 'fatalsToBrowser';\n<\/code><\/pre>\n\n<p>to your script. This also sends compilation errors to the browser window. Be sure to remove this before moving to a production environment, as the extra information can be a security risk.<\/p>\n\n<h3>What did the error log say?<\/h3>\n\n<p>Servers keep error logs (or they should, at least). \nError output from the server and from your script should\nshow up there.  Find the error log and see what it says.\nThere isn't a standard place for log files.  Look in the \nserver configuration for their location, or ask the server\nadmin.  You can also use tools such as <a href=\"http:\/\/search.cpan.org\/perldoc\/CGI::Carp\" rel=\"noreferrer\">CGI::Carp<\/a>\nto keep your own log files. <\/p>\n\n<h3>What are the script's permissions?<\/h3>\n\n<p>If you see errors like &quot;Permission denied&quot; or &quot;Method not\nimplemented&quot;, it probably means that your script is not\nreadable and executable by the web server user.  On flavors\nof Unix, changing the mode to 755 is recommended:\n<code>chmod 755 filename<\/code>. Never set a mode to 777!<\/p>\n\n<h3>Are you using <code>use strict<\/code>?<\/h3>\n\n<p>Remember that Perl automatically creates variables when\nyou first use them.  This is a feature, but sometimes can\ncause bugs if you mistype a variable name.  The pragma\n<a href=\"http:\/\/perldoc.perl.org\/strict.html\" rel=\"noreferrer\"><code>use strict<\/code><\/a> will help you find those sorts of\nerrors.  It's annoying until you get used to it, but your\nprogramming will improve significantly after awhile and\nyou will be free to make different mistakes.<\/p>\n\n<h3>Does the script compile?<\/h3>\n\n<p>You can check for compilation errors by using the <code>-c<\/code>\nswitch.  Concentrate on the first errors reported.  Rinse,\nrepeat. If you are getting really strange errors, check to\nensure that your script has the right line endings.  If you\nFTP in binary mode, checkout from CVS, or something else that\ndoes not handle line end translation, the web server may see\nyour script as one big line.  Transfer Perl scripts in ASCII\nmode.<\/p>\n\n<h3>Is the script complaining about insecure dependencies?<\/h3>\n\n<p>If your script complains about insecure dependencies, you \nare probably using the <code>-T<\/code> switch to turn on taint mode, which is\na good thing since it keeps you have passing unchecked data to the shell. If\nit is complaining it is doing its job to help us write more secure scripts. Any\ndata originating from outside of the program (i.e. the environment)\nis considered tainted.  Environment variables such as <code>PATH<\/code> and\n<code>LD_LIBRARY_PATH<\/code>\nare particularly troublesome.  You have to set these to a safe value\nor unset them completely, as I recommend.  You should be using absolute\npaths anyway.  If taint checking complains about something else,\nmake sure that you have untainted the data.  See <a href=\"http:\/\/perldoc.perl.org\/perlsec.html\" rel=\"noreferrer\">perlsec<\/a>\nman page for details.<\/p>\n\n<h3>What happens when you run it from the command line?<\/h3>\n\n<p>Does the script output what you expect when run from the\ncommand line?  Is the header output first, followed by a\nblank line?  Remember that <code>STDERR<\/code> may be merged with <code>STDOUT<\/code>\nif you are on a terminal (e.g. an interactive session), and\ndue to buffering may show up in a jumbled order.  Turn on\nPerl's autoflush feature by setting <code>$|<\/code> to a\ntrue value. Typically you might see <code>$|++;<\/code> in\nCGI programs.  Once set, every print and write will\nimmediately go to the output rather than being buffered.\nYou have to set this for each filehandle.  Use <code>select<\/code> to\nchange the default filehandle, like so:<\/p>\n\n<pre><code>$|++;                            #sets $| for STDOUT\n$old_handle = select( STDERR );  #change to STDERR\n$|++;                            #sets $| for STDERR\nselect( $old_handle );           #change back to STDOUT\n<\/code><\/pre>\n\n<p>Either way, the first thing output should be the CGI header\nfollowed by a blank line.<\/p>\n\n<h3>What happens when you run it from the command line with a CGI-like environment?<\/h3>\n\n<p>The web server environment is usually a lot more limited\nthan your command line environment, and has extra\ninformation about the request.  If your script runs fine\nfrom the command line, you might try simulating a web server\nenvironment.  If the problem appears, you have an\nenvironment problem.<\/p>\n\n<p>Unset or remove these variables<\/p>\n\n<ul>\n<li><code>PATH<\/code><\/li>\n<li><code>LD_LIBRARY_PATH<\/code><\/li>\n<li>all <code>ORACLE_*<\/code> variables<\/li>\n<\/ul>\n\n<p>Set these variables<\/p>\n\n<ul>\n<li><code>REQUEST_METHOD<\/code> (set to <code>GET<\/code>, <code>HEAD<\/code>, or <code>POST<\/code> as appropriate)<\/li>\n<li><code>SERVER_PORT<\/code> (set to 80, usually)<\/li>\n<li><code>REMOTE_USER<\/code> (if you are doing protected access stuff)<\/li>\n<\/ul>\n\n<p>Recent versions of <code>CGI.pm<\/code> ( > 2.75 ) require the <code>-debug<\/code> flag to \nget the old (useful) behavior, so you might have to add it to\nyour <code>CGI.pm<\/code> imports.<\/p>\n\n<pre><code>use CGI qw(-debug)\n<\/code><\/pre>\n\n<h3>Are you using <code>die()<\/code> or <code>warn<\/code>?<\/h3>\n\n<p>Those functions print to <code>STDERR<\/code> unless you have redefined \nthem.  They don't output a CGI header, either.  You can get\nthe same functionality with packages such as <a href=\"http:\/\/search.cpan.org\/perldoc\/CGI::Carp\" rel=\"noreferrer\">CGI::Carp<\/a><\/p>\n\n<h3>What happens after you clear the browser cache?<\/h3>\n\n<p>If you think your script is doing the right thing, and\nwhen you perform the request manually you get the right\noutput, the browser might be the culprit.  Clear the cache\nand set the cache size to zero while testing.  Remember that\nsome browsers are really stupid and won't actually reload\nnew content even though you tell it to do so.  This is\nespecially prevalent in cases where the URL path is the\nsame, but the content changes (e.g. dynamic images).<\/p>\n\n<h3>Is the script where you think it is?<\/h3>\n\n<p>The file system path to a script is not necessarily\ndirectly related to the URL path to the script.  Make sure\nyou have the right directory, even if you have to write a\nshort test script to test this.  Furthermore, are you sure\nthat you are modifying the correct file?  If you don't see\nany effect with your changes, you might be modifying a\ndifferent file, or uploading a file to the wrong place. \n(This is, by the way, my most frequent cause of such trouble\n;)<\/p>\n\n<h3>Are you using <a href=\"http:\/\/search.cpan.org\/perldoc\/CGI\" rel=\"noreferrer\"><code>CGI.pm<\/code><\/a>, or a derivative of it?<\/h3>\n\n<p>If your problem is related to parsing the CGI input and you\naren't using a widely tested module like <code>CGI.pm<\/code>, <a href=\"http:\/\/search.cpan.org\/perldoc\/CGI::Request\" rel=\"noreferrer\"><code>CGI::Request<\/code><\/a>,\n<a href=\"http:\/\/search.cpan.org\/perldoc\/CGI::Simple\" rel=\"noreferrer\"><code>CGI::Simple<\/code><\/a> or <a href=\"http:\/\/search.cpan.org\/perldoc\/CGI::Lite\" rel=\"noreferrer\"><code>CGI::Lite<\/code><\/a>, use the module and get on with life.\n<code>CGI.pm<\/code> has a <code>cgi-lib.pl<\/code> compatibility mode which can help you solve input\nproblems due to older CGI parser implementations.<\/p>\n\n<h3>Did you use absolute paths?<\/h3>\n\n<p>If you are running external commands with\n<code>system<\/code>, back ticks, or other IPC facilities,\nyou should use an absolute path to the external program. \nNot only do you know exactly what you are running, but you\navoid some security problems as well.  If you are opening\nfiles for either reading or writing, use an absolute path. \nThe CGI script may have a different idea about the current\ndirectory than you do.  Alternatively, you can do an\nexplicit <code>chdir()<\/code> to put you in the right place.<\/p>\n\n<h3>Did you check your return values?<\/h3>\n\n<p>Most Perl functions will tell you if they worked or not\nand will set <code>$!<\/code> on failure.  Did you check the\nreturn value and examine <code>$!<\/code> for error messages? Did you check\n<code>$@<\/code> if you were using <code>eval<\/code>?<\/p>\n\n<h3>Which version of Perl are you using?<\/h3>\n\n<p>The latest stable version of Perl is 5.28 (or not, depending on when this was last edited).  Are you using an older version?  Different versions of Perl may have different ideas of warnings.<\/p>\n\n<h3>Which web server are you using?<\/h3>\n\n<p>Different servers may act differently in the same\nsituation.  The same server product may act differently with\ndifferent configurations. Include as much of this\ninformation as you can in any request for help.<\/p>\n\n<h3>Did you check the server documentation?<\/h3>\n\n<p>Serious CGI programmers should know as much about the\nserver as possible - including not only the server features\nand behavior, but also the local configuration. The\ndocumentation for your server might not be available to you\nif you are using a commercial product.  Otherwise, the\ndocumentation should be on your server.  If it isn't, look\nfor it on the web. <\/p>\n\n<h3>Did you search the archives of <a href=\"http:\/\/groups.google.com\/group\/comp.infosystems.www.authoring.cgi\" rel=\"noreferrer\"><code>comp.infosystems.www.authoring.cgi<\/code><\/a>?<\/h3>\n\n<p><em>This use to be useful but all the good posters have either died or wandered off.<\/em><\/p>\n\n<p>It's likely that someone has had your problem before,\nand that someone (possibly me) has answered it in this\nnewsgroup. Although this newsgroup has passed its heyday, the collected wisdom from the past can sometimes be useful.<\/p>\n\n<h3>Can you reproduce the problem with a short test script?<\/h3>\n\n<p>In large systems, it may be difficult to track down a bug\nsince so many things are happening.  Try to reproduce the problem\nbehavior with the shortest possible script.  Knowing the problem\nis most of the fix.  This may be certainly time-consuming, but you\nhaven't found the problem yet and you're running out of options. :)<\/p>\n\n<h3>Did you decide to go see a movie?<\/h3>\n\n<p>Seriously.  Sometimes we can get so wrapped up in the problem that we\ndevelop &quot;perceptual narrowing&quot; (tunnel vision).  Taking a break,\ngetting a cup of coffee, or blasting some bad guys in [Duke Nukem,Quake,Doom,Halo,COD] might give you\nthe fresh perspective that you need to re-approach the problem.<\/p>\n\n<h3>Have you vocalized the problem?<\/h3>\n\n<p>Seriously again.  Sometimes explaining the problem aloud\nleads us to our own answers.  Talk to the penguin (plush toy) because\nyour co-workers aren't listening.  If you are interested in this\nas a serious debugging tool (and I do recommend it if you haven't \nfound the problem by now), you might also like to read <a href=\"https:\/\/rads.stackoverflow.com\/amzn\/click\/com\/0932633420\" rel=\"noreferrer\" rel=\"nofollow noreferrer\">The Psychology\nof Computer Programming<\/a>.<\/p>\n",
        "community_owned_date": 1264804516.0
    },
    {
        "owner": {
            "account_id": 4739783,
            "reputation": 613309,
            "user_id": 3832970,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/IFOp5.jpg?s=256&g=1",
            "display_name": "Wiktor Stribi\u017cew",
            "link": "https:\/\/stackoverflow.com\/users\/3832970\/wiktor-stribi%c5%bcew"
        },
        "is_accepted": false,
        "score": 130,
        "last_activity_date": 1644919377,
        "last_edit_date": 1644919377.0,
        "creation_date": 1479251274,
        "answer_id": 40621332,
        "question_id": 640001,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "The pattern that matches substrings in parentheses *having no other `(` and `)` characters in between* (like `(xyz 123)` in `Text (abc(xyz 123)`) is\r\n\r\n    \\([^()]*\\)\r\n\r\n**Details**:\r\n\r\n - `\\(` - an opening round bracket (note that in POSIX BRE, `(` should be used, see `sed` example below)\r\n - `[^()]*` - zero or more (due to the `*` [Kleene star quantifier](http:\/\/www.regular-expressions.info\/repeat.html)) characters *other than* those defined in the [*negated character class*\/*POSIX bracket expression*][1], that is, any chars other than `(` and `)`\r\n - `\\)` - a closing round bracket (no escaping in POSIX BRE allowed)\r\n\r\nRemoving code snippets:\r\n\r\n - **JavaScript**: `string.replace(\/\\([^()]*\\)\/g, &#39;&#39;)`\r\n - **PHP**: `preg_replace(&#39;~\\([^()]*\\)~&#39;, &#39;&#39;, $string)`\r\n - **Perl**: `$s =~ s\/\\([^()]*\\)\/\/g`\r\n - **Python**: `re.sub(r&#39;\\([^()]*\\)&#39;, &#39;&#39;, s)`\r\n - **C#**: `Regex.Replace(str, @&quot;\\([^()]*\\)&quot;, string.Empty)`\r\n - **VB.NET**: `Regex.Replace(str, &quot;\\([^()]*\\)&quot;, &quot;&quot;)`\r\n - **Java**: `s.replaceAll(&quot;\\\\([^()]*\\\\)&quot;, &quot;&quot;)`\r\n - **Ruby**: `s.gsub(\/\\([^()]*\\)\/, &#39;&#39;)`\r\n - **R**: `gsub(&quot;\\\\([^()]*\\\\)&quot;, &quot;&quot;, x)`\r\n - **Lua**: `string.gsub(s, &quot;%([^()]*%)&quot;, &quot;&quot;)`\r\n - **Bash\/sed**: `sed &#39;s\/([^()]*)\/\/g&#39;`\r\n - **Tcl**: `regsub -all {\\([^()]*\\)} $s &quot;&quot; result`\r\n - **C++ `std::regex`**: `std::regex_replace(s, std::regex(R&quot;(\\([^()]*\\))&quot;), &quot;&quot;)`\r\n - **Objective-C**: &lt;br\/&gt;`NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:@&quot;\\\\([^()]*\\\\)&quot; options:NSRegularExpressionCaseInsensitive error:&amp;error];\r\nNSString *modifiedString = [regex stringByReplacingMatchesInString:string options:0 range:NSMakeRange(0, [string length]) withTemplate:@&quot;&quot;];`\r\n - **Swift**: `s.replacingOccurrences(of: &quot;\\\\([^()]*\\\\)&quot;, with: &quot;&quot;, options: [.regularExpression])`\r\n - **Google BigQuery**: `REGEXP_REPLACE(col, &quot;\\\\([^()]*\\\\)&quot; , &quot;&quot;)`\r\n\r\n  [1]: http:\/\/www.regular-expressions.info\/charclass.html#negated",
        "body": "<p>The pattern that matches substrings in parentheses <em>having no other <code>(<\/code> and <code>)<\/code> characters in between<\/em> (like <code>(xyz 123)<\/code> in <code>Text (abc(xyz 123)<\/code>) is<\/p>\n<pre><code>\\([^()]*\\)\n<\/code><\/pre>\n<p><strong>Details<\/strong>:<\/p>\n<ul>\n<li><code>\\(<\/code> - an opening round bracket (note that in POSIX BRE, <code>(<\/code> should be used, see <code>sed<\/code> example below)<\/li>\n<li><code>[^()]*<\/code> - zero or more (due to the <code>*<\/code> <a href=\"http:\/\/www.regular-expressions.info\/repeat.html\" rel=\"noreferrer\">Kleene star quantifier<\/a>) characters <em>other than<\/em> those defined in the <a href=\"http:\/\/www.regular-expressions.info\/charclass.html#negated\" rel=\"noreferrer\"><em>negated character class<\/em>\/<em>POSIX bracket expression<\/em><\/a>, that is, any chars other than <code>(<\/code> and <code>)<\/code><\/li>\n<li><code>\\)<\/code> - a closing round bracket (no escaping in POSIX BRE allowed)<\/li>\n<\/ul>\n<p>Removing code snippets:<\/p>\n<ul>\n<li><strong>JavaScript<\/strong>: <code>string.replace(\/\\([^()]*\\)\/g, '')<\/code><\/li>\n<li><strong>PHP<\/strong>: <code>preg_replace('~\\([^()]*\\)~', '', $string)<\/code><\/li>\n<li><strong>Perl<\/strong>: <code>$s =~ s\/\\([^()]*\\)\/\/g<\/code><\/li>\n<li><strong>Python<\/strong>: <code>re.sub(r'\\([^()]*\\)', '', s)<\/code><\/li>\n<li><strong>C#<\/strong>: <code>Regex.Replace(str, @&quot;\\([^()]*\\)&quot;, string.Empty)<\/code><\/li>\n<li><strong>VB.NET<\/strong>: <code>Regex.Replace(str, &quot;\\([^()]*\\)&quot;, &quot;&quot;)<\/code><\/li>\n<li><strong>Java<\/strong>: <code>s.replaceAll(&quot;\\\\([^()]*\\\\)&quot;, &quot;&quot;)<\/code><\/li>\n<li><strong>Ruby<\/strong>: <code>s.gsub(\/\\([^()]*\\)\/, '')<\/code><\/li>\n<li><strong>R<\/strong>: <code>gsub(&quot;\\\\([^()]*\\\\)&quot;, &quot;&quot;, x)<\/code><\/li>\n<li><strong>Lua<\/strong>: <code>string.gsub(s, &quot;%([^()]*%)&quot;, &quot;&quot;)<\/code><\/li>\n<li><strong>Bash\/sed<\/strong>: <code>sed 's\/([^()]*)\/\/g'<\/code><\/li>\n<li><strong>Tcl<\/strong>: <code>regsub -all {\\([^()]*\\)} $s &quot;&quot; result<\/code><\/li>\n<li><strong>C++ <code>std::regex<\/code><\/strong>: <code>std::regex_replace(s, std::regex(R&quot;(\\([^()]*\\))&quot;), &quot;&quot;)<\/code><\/li>\n<li><strong>Objective-C<\/strong>: <br\/><code>NSRegularExpression *regex = [NSRegularExpression regularExpressionWithPattern:@&quot;\\\\([^()]*\\\\)&quot; options:NSRegularExpressionCaseInsensitive error:&amp;error]; NSString *modifiedString = [regex stringByReplacingMatchesInString:string options:0 range:NSMakeRange(0, [string length]) withTemplate:@&quot;&quot;];<\/code><\/li>\n<li><strong>Swift<\/strong>: <code>s.replacingOccurrences(of: &quot;\\\\([^()]*\\\\)&quot;, with: &quot;&quot;, options: [.regularExpression])<\/code><\/li>\n<li><strong>Google BigQuery<\/strong>: <code>REGEXP_REPLACE(col, &quot;\\\\([^()]*\\\\)&quot; , &quot;&quot;)<\/code><\/li>\n<\/ul>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4901,
            "reputation": 21544,
            "user_id": 7598,
            "user_type": "registered",
            "accept_rate": 89,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/bc6d2f9377bc2714b40716f3a2258426?s=256&d=identicon&r=PG",
            "display_name": "raldi",
            "link": "https:\/\/stackoverflow.com\/users\/7598\/raldi"
        },
        "is_accepted": true,
        "score": 129,
        "last_activity_date": 1222020273,
        "last_edit_date": 1222020273.0,
        "creation_date": 1221764918,
        "answer_id": 95826,
        "question_id": 95820,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "    %hash = map { $_ =&gt; 1 } @array;\r\n\r\nIt&#39;s not as short as the &quot;@hash{@array} = ...&quot; solutions, but those ones require the hash and array to already be defined somewhere else, whereas this one can take an anonymous array and return an anonymous hash.\r\n\r\nWhat this does is take each element in the array and pair it up with a &quot;1&quot;. When this list of (key, 1, key, 1, key 1) pairs get assigned to a hash, the odd-numbered ones become the hash&#39;s keys, and the even-numbered ones become the respective values.\r\n",
        "body": "<pre><code>%hash = map { $_ =&gt; 1 } @array;\n<\/code><\/pre>\n\n<p>It's not as short as the \"@hash{@array} = ...\" solutions, but those ones require the hash and array to already be defined somewhere else, whereas this one can take an anonymous array and return an anonymous hash.<\/p>\n\n<p>What this does is take each element in the array and pair it up with a \"1\". When this list of (key, 1, key, 1, key 1) pairs get assigned to a hash, the odd-numbered ones become the hash's keys, and the even-numbered ones become the respective values.<\/p>\n",
        "community_owned_date": 1221895160.0
    },
    {
        "owner": {
            "account_id": 135,
            "reputation": 15091,
            "user_id": 164,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/afb1af7924cbadd912a8b5b2f1308bba?s=256&d=identicon&r=PG",
            "display_name": "John Siracusa",
            "link": "https:\/\/stackoverflow.com\/users\/164\/john-siracusa"
        },
        "is_accepted": false,
        "score": 128,
        "last_activity_date": 1638556879,
        "last_edit_date": 1638556879.0,
        "creation_date": 1218464866,
        "answer_id": 7829,
        "question_id": 7651,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "The Perl documentation comes with a nice collection of FAQs.  Your question is frequently asked:\r\n\r\n    % perldoc -q duplicate\r\n\r\nThe answer, copy and pasted from the output of the command above, appears below:\r\n\r\n&lt;hr&gt;\r\nFound in \/usr\/local\/lib\/perl5\/5.10.0\/pods\/perlfaq4.pod\r\n\r\n**How can I remove duplicate elements from a list or array?**\r\n(contributed by brian d foy)\r\n\r\n   Use a hash. When you think the words &quot;unique&quot; or &quot;duplicated&quot;, think\r\n   &quot;hash keys&quot;.\r\n\r\nIf you don&#39;t care about the order of the elements, you could just create the hash then extract the keys. It&#39;s not important how you create that hash: just that you use &quot;keys&quot; to get the unique elements.\r\n\r\n       my %hash   = map { $_, 1 } @array;\r\n       # or a hash slice: @hash{ @array } = ();\r\n       # or a foreach: $hash{$_} = 1 foreach ( @array );\r\n  \r\n       my @unique = keys %hash;\r\n\r\nIf you want to use a module, try the &quot;uniq&quot; function from\r\n&quot;List::MoreUtils&quot;. In list context it returns the unique elements, preserving their order in the list. In scalar context, it returns the number of unique elements.\r\n\r\n       use List::MoreUtils qw(uniq);\r\n  \r\n       my @unique = uniq( 1, 2, 3, 4, 4, 5, 6, 5, 7 ); # 1,2,3,4,5,6,7\r\n       my $unique = uniq( 1, 2, 3, 4, 4, 5, 6, 5, 7 ); # 7\r\n\r\nYou can also go through each element and skip the ones you&#39;ve seen\r\nbefore. Use a hash to keep track. The first time the loop sees an\r\nelement, that element has no key in %Seen. The &quot;next&quot; statement creates\r\nthe key and immediately uses its value, which is &quot;undef&quot;, so the loop\r\ncontinues to the &quot;push&quot; and increments the value for that key. The next\r\ntime the loop sees that same element, its key exists in the hash and\r\nthe value for that key is true (since it&#39;s not 0 or &quot;undef&quot;), so the\r\nnext skips that iteration and the loop goes to the next element.\r\n\r\n       my @unique = ();\r\n       my %seen   = ();\r\n  \r\n       foreach my $elem ( @array )\r\n       {\r\n         next if $seen{ $elem }++;\r\n         push @unique, $elem;\r\n       }\r\n\r\nYou can write this more briefly using a grep, which does the same thing.\r\n\r\n       my %seen = ();\r\n       my @unique = grep { ! $seen{ $_ }++ } @array;\r\n",
        "body": "<p>The Perl documentation comes with a nice collection of FAQs.  Your question is frequently asked:<\/p>\n<pre><code>% perldoc -q duplicate\n<\/code><\/pre>\n<p>The answer, copy and pasted from the output of the command above, appears below:<\/p>\n<hr>\nFound in \/usr\/local\/lib\/perl5\/5.10.0\/pods\/perlfaq4.pod\n<p><strong>How can I remove duplicate elements from a list or array?<\/strong>\n(contributed by brian d foy)<\/p>\n<p>Use a hash. When you think the words &quot;unique&quot; or &quot;duplicated&quot;, think\n&quot;hash keys&quot;.<\/p>\n<p>If you don't care about the order of the elements, you could just create the hash then extract the keys. It's not important how you create that hash: just that you use &quot;keys&quot; to get the unique elements.<\/p>\n<pre><code>   my %hash   = map { $_, 1 } @array;\n   # or a hash slice: @hash{ @array } = ();\n   # or a foreach: $hash{$_} = 1 foreach ( @array );\n\n   my @unique = keys %hash;\n<\/code><\/pre>\n<p>If you want to use a module, try the &quot;uniq&quot; function from\n&quot;List::MoreUtils&quot;. In list context it returns the unique elements, preserving their order in the list. In scalar context, it returns the number of unique elements.<\/p>\n<pre><code>   use List::MoreUtils qw(uniq);\n\n   my @unique = uniq( 1, 2, 3, 4, 4, 5, 6, 5, 7 ); # 1,2,3,4,5,6,7\n   my $unique = uniq( 1, 2, 3, 4, 4, 5, 6, 5, 7 ); # 7\n<\/code><\/pre>\n<p>You can also go through each element and skip the ones you've seen\nbefore. Use a hash to keep track. The first time the loop sees an\nelement, that element has no key in %Seen. The &quot;next&quot; statement creates\nthe key and immediately uses its value, which is &quot;undef&quot;, so the loop\ncontinues to the &quot;push&quot; and increments the value for that key. The next\ntime the loop sees that same element, its key exists in the hash and\nthe value for that key is true (since it's not 0 or &quot;undef&quot;), so the\nnext skips that iteration and the loop goes to the next element.<\/p>\n<pre><code>   my @unique = ();\n   my %seen   = ();\n\n   foreach my $elem ( @array )\n   {\n     next if $seen{ $elem }++;\n     push @unique, $elem;\n   }\n<\/code><\/pre>\n<p>You can write this more briefly using a grep, which does the same thing.<\/p>\n<pre><code>   my %seen = ();\n   my @unique = grep { ! $seen{ $_ }++ } @array;\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 41067,
            "reputation": 127534,
            "user_id": 119280,
            "user_type": "registered",
            "accept_rate": 73,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/47b88555c03aad35b076726767fcfa35?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "DVK",
            "link": "https:\/\/stackoverflow.com\/users\/119280\/dvk"
        },
        "is_accepted": true,
        "score": 128,
        "last_activity_date": 1293722336,
        "last_edit_date": 1293722336.0,
        "creation_date": 1293720442,
        "answer_id": 4563516,
        "question_id": 4563485,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "[perldoc perlvar][1] is the first place to check for any special-named Perl variable info. \r\n\r\nQuoting:\r\n\r\n&gt; `@_`: Within a subroutine the array `@_` contains the parameters passed to that subroutine.\r\n\r\nMore details can be found in [perldoc perlsub (Perl subroutines)][2] linked from the perlvar:\r\n\r\n&gt; Any arguments passed in show up in the\r\n&gt; array `@_` . \r\n\r\n&gt; Therefore, if you called a function with two arguments, those\r\n&gt; would be stored in `$_[0]` and `$_[1]`.\r\n&gt;\r\n&gt; The array `@_` is a **local array**, but its\r\n&gt; elements are **aliases for the actual scalar parameters**. \r\n&gt; In particular, if\r\n&gt; an element $_[0] is updated, the\r\n&gt; corresponding argument is updated (or\r\n&gt; an error occurs if it is not\r\n&gt; updatable). \r\n\r\n&gt; If an argument is an array\r\n&gt; or hash element which did not exist\r\n&gt; when the function was called, that\r\n&gt; element is created only when (and if)\r\n&gt; it is modified or a reference to it is\r\n&gt; taken. (Some earlier versions of Perl\r\n&gt; created the element whether or not the\r\n&gt; element was assigned to.) Assigning to\r\n&gt; the whole array @_ removes that\r\n&gt; aliasing, and does not update any\r\n&gt; arguments.\r\n\r\n\r\n  [1]: http:\/\/perldoc.perl.org\/perlvar.html#@ARG\r\n  [2]: http:\/\/perldoc.perl.org\/perlsub.html",
        "body": "<p><a href=\"http:\/\/perldoc.perl.org\/perlvar.html#@ARG\" rel=\"noreferrer\">perldoc perlvar<\/a> is the first place to check for any special-named Perl variable info. <\/p>\n\n<p>Quoting:<\/p>\n\n<blockquote>\n  <p><code>@_<\/code>: Within a subroutine the array <code>@_<\/code> contains the parameters passed to that subroutine.<\/p>\n<\/blockquote>\n\n<p>More details can be found in <a href=\"http:\/\/perldoc.perl.org\/perlsub.html\" rel=\"noreferrer\">perldoc perlsub (Perl subroutines)<\/a> linked from the perlvar:<\/p>\n\n<blockquote>\n  <p>Any arguments passed in show up in the\n  array <code>@_<\/code> . <\/p>\n  \n  <p>Therefore, if you called a function with two arguments, those\n  would be stored in <code>$_[0]<\/code> and <code>$_[1]<\/code>.<\/p>\n  \n  <p>The array <code>@_<\/code> is a <strong>local array<\/strong>, but its\n  elements are <strong>aliases for the actual scalar parameters<\/strong>. \n  In particular, if\n  an element $_[0] is updated, the\n  corresponding argument is updated (or\n  an error occurs if it is not\n  updatable). <\/p>\n  \n  <p>If an argument is an array\n  or hash element which did not exist\n  when the function was called, that\n  element is created only when (and if)\n  it is modified or a reference to it is\n  taken. (Some earlier versions of Perl\n  created the element whether or not the\n  element was assigned to.) Assigning to\n  the whole array @_ removes that\n  aliasing, and does not update any\n  arguments.<\/p>\n<\/blockquote>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5191,
            "reputation": 30711,
            "user_id": 8233,
            "user_type": "registered",
            "accept_rate": 69,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/5ed2571484765d12fcb3230f235a8ecc?s=256&d=identicon&r=PG",
            "display_name": "Michael Carman",
            "link": "https:\/\/stackoverflow.com\/users\/8233\/michael-carman"
        },
        "is_accepted": true,
        "score": 126,
        "last_activity_date": 1456418268,
        "last_edit_date": 1456418268.0,
        "creation_date": 1226962449,
        "answer_id": 297265,
        "question_id": 297034,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Prototypes aren&#39;t bad if used correctly. The difficulty is that Perl&#39;s prototypes don&#39;t work the way people often expect them to. People with a background in other programming languages tend to expect prototypes to provide a mechanism for checking that function calls are correct: that is, that they have the right number and type of arguments. Perl&#39;s prototypes are not well-suited for this task. It&#39;s the *misuse* that&#39;s bad. Perl&#39;s prototypes have a singular and very different purpose:\r\n\r\n**Prototypes allow you to define functions that behave like built-in functions.**\r\n\r\n  - Parentheses are optional.\r\n  - Context is imposed on the arguments.\r\n\r\nFor example, you could define a function like this:\r\n\r\n    sub mypush(\\@@) { ... }\r\n\r\nand call it as\r\n\r\n    mypush @array, 1, 2, 3;\r\n\r\nwithout needing to write the `\\` to take a reference to the array.\r\n\r\nIn a nutshell, prototypes let you create your own syntactic sugar. For example the Moose framework uses them to emulate a more typical OO syntax.\r\n\r\nThis is very useful but prototypes are very limited:\r\n\r\n  - They have to be visible at compile-time.\r\n  - They can be bypassed.\r\n  - Propagating context to arguments can cause unexpected behavior.\r\n  - They can make it difficult to call functions using anything other than the\r\n    strictly prescribed form.\r\n\r\nSee [Prototypes](http:\/\/perldoc.perl.org\/perlsub.html#Prototypes) in perlsub for all the gory details.",
        "body": "<p>Prototypes aren't bad if used correctly. The difficulty is that Perl's prototypes don't work the way people often expect them to. People with a background in other programming languages tend to expect prototypes to provide a mechanism for checking that function calls are correct: that is, that they have the right number and type of arguments. Perl's prototypes are not well-suited for this task. It's the <em>misuse<\/em> that's bad. Perl's prototypes have a singular and very different purpose:<\/p>\n\n<p><strong>Prototypes allow you to define functions that behave like built-in functions.<\/strong><\/p>\n\n<ul>\n<li>Parentheses are optional.<\/li>\n<li>Context is imposed on the arguments.<\/li>\n<\/ul>\n\n<p>For example, you could define a function like this:<\/p>\n\n<pre><code>sub mypush(\\@@) { ... }\n<\/code><\/pre>\n\n<p>and call it as<\/p>\n\n<pre><code>mypush @array, 1, 2, 3;\n<\/code><\/pre>\n\n<p>without needing to write the <code>\\<\/code> to take a reference to the array.<\/p>\n\n<p>In a nutshell, prototypes let you create your own syntactic sugar. For example the Moose framework uses them to emulate a more typical OO syntax.<\/p>\n\n<p>This is very useful but prototypes are very limited:<\/p>\n\n<ul>\n<li>They have to be visible at compile-time.<\/li>\n<li>They can be bypassed.<\/li>\n<li>Propagating context to arguments can cause unexpected behavior.<\/li>\n<li>They can make it difficult to call functions using anything other than the\nstrictly prescribed form.<\/li>\n<\/ul>\n\n<p>See <a href=\"http:\/\/perldoc.perl.org\/perlsub.html#Prototypes\" rel=\"noreferrer\">Prototypes<\/a> in perlsub for all the gory details.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1316918,
            "reputation": 2818,
            "user_id": 1263565,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/b1e6c86371a1756d9f67a04fee48b63c?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "Hayden",
            "link": "https:\/\/stackoverflow.com\/users\/1263565\/hayden"
        },
        "is_accepted": true,
        "score": 125,
        "last_activity_date": 1442649250,
        "last_edit_date": 1495535249.0,
        "creation_date": 1442648664,
        "answer_id": 32665687,
        "question_id": 32665616,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "This *secret* syntax is known as the [ornate double-bladed sword][1], and is typically denoted as:\r\n\r\n    &lt;&lt;m=~m&gt;&gt;\r\n\r\n    Comments here\r\n\r\n    m\r\n    ;\r\n\r\nIt is a hack for multi-line comments, making use of the [heredoc][2] syntax and match operator (`=~`) with `&gt;` as delimiter. \r\n\r\nNote, as slashes, `\/`, aren&#39;t being used as the delimiter for matching, the &#39;m&#39; operator is required. For example `$my_var =~ \/test\/` is equivalent to `$my_var =~ m&gt;test&gt;`, whereas `$my_var =~ &gt;test&gt;` would be invalid.\r\n\r\nPay attention to the fact that the first `m` character in your snippet is enclosed by single quotes, meaning the `$a` and `$b` variables won&#39;t be interpolated. Had these quotes been omitted (as per my provided code example) perl would automatically add double quotes to the end marker and any subsequent variables would be interpolated. This would cause problems if `$a` and `$b` are no longer defined and you&#39;re using `use warnings;`.\r\n\r\nTo make the ornate double-blade example above easier to understand (but still not recommended), we could write:\r\n\r\n    &lt;&lt;&quot;END&quot; =~ \/\/\r\n\r\n    Comments here\r\n\r\n    END\r\n    ;\r\n\r\nNote that the `=~ \/\/` is redundant, so this is equivalent to:\r\n\r\n    &lt;&lt;&quot;END&quot;;\r\n\r\n    Comments here\r\n\r\n    END\r\n\r\nWhich is just standard heredoc syntax in void context.\r\n\r\nI would not recommend using this in production code as having a string in void context can cause problems. Plus this code is a head scratcher for even the most experienced perl programmers and is pointlessly difficult to read and maintain! If you want to create proper multi-line comments then I would suggest sticking to pod as explained here https:\/\/stackoverflow.com\/questions\/3828205\/how-do-i-enter-a-multi-line-comment-in-perl\r\n\r\nHope this clears it up.\r\n\r\n  [1]: http:\/\/search.cpan.org\/dist\/perlsecret\/lib\/perlsecret.pod#Ornate_double-bladed_sword\r\n  [2]: http:\/\/perlmaven.com\/here-documents",
        "body": "<p>This <em>secret<\/em> syntax is known as the <a href=\"http:\/\/search.cpan.org\/dist\/perlsecret\/lib\/perlsecret.pod#Ornate_double-bladed_sword\" rel=\"nofollow noreferrer\">ornate double-bladed sword<\/a>, and is typically denoted as:<\/p>\n\n<pre><code>&lt;&lt;m=~m&gt;&gt;\n\nComments here\n\nm\n;\n<\/code><\/pre>\n\n<p>It is a hack for multi-line comments, making use of the <a href=\"http:\/\/perlmaven.com\/here-documents\" rel=\"nofollow noreferrer\">heredoc<\/a> syntax and match operator (<code>=~<\/code>) with <code>&gt;<\/code> as delimiter. <\/p>\n\n<p>Note, as slashes, <code>\/<\/code>, aren't being used as the delimiter for matching, the 'm' operator is required. For example <code>$my_var =~ \/test\/<\/code> is equivalent to <code>$my_var =~ m&gt;test&gt;<\/code>, whereas <code>$my_var =~ &gt;test&gt;<\/code> would be invalid.<\/p>\n\n<p>Pay attention to the fact that the first <code>m<\/code> character in your snippet is enclosed by single quotes, meaning the <code>$a<\/code> and <code>$b<\/code> variables won't be interpolated. Had these quotes been omitted (as per my provided code example) perl would automatically add double quotes to the end marker and any subsequent variables would be interpolated. This would cause problems if <code>$a<\/code> and <code>$b<\/code> are no longer defined and you're using <code>use warnings;<\/code>.<\/p>\n\n<p>To make the ornate double-blade example above easier to understand (but still not recommended), we could write:<\/p>\n\n<pre><code>&lt;&lt;\"END\" =~ \/\/\n\nComments here\n\nEND\n;\n<\/code><\/pre>\n\n<p>Note that the <code>=~ \/\/<\/code> is redundant, so this is equivalent to:<\/p>\n\n<pre><code>&lt;&lt;\"END\";\n\nComments here\n\nEND\n<\/code><\/pre>\n\n<p>Which is just standard heredoc syntax in void context.<\/p>\n\n<p>I would not recommend using this in production code as having a string in void context can cause problems. Plus this code is a head scratcher for even the most experienced perl programmers and is pointlessly difficult to read and maintain! If you want to create proper multi-line comments then I would suggest sticking to pod as explained here <a href=\"https:\/\/stackoverflow.com\/questions\/3828205\/how-do-i-enter-a-multi-line-comment-in-perl\">How do I enter a multi-line comment in Perl?<\/a><\/p>\n\n<p>Hope this clears it up.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1007,
            "reputation": 33924,
            "user_id": 1337,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/72de240484e389dbedb6a3e428b9f0c1?s=256&d=identicon&r=PG",
            "display_name": "Brad Gilbert",
            "link": "https:\/\/stackoverflow.com\/users\/1337\/brad-gilbert"
        },
        "is_accepted": true,
        "score": 121,
        "last_activity_date": 1502884111,
        "last_edit_date": 1502884111.0,
        "creation_date": 1267778294,
        "answer_id": 2385454,
        "question_id": 2383505,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "##UPDATE:\r\n\r\n&gt;[The smartmatch family of features are now experimental][1]\r\n\r\n&gt;Smart match, added in v5.10.0 and significantly revised in v5.10.1, has been a regular point of complaint. Although there are a number of ways in which it is useful, it has also proven problematic and confusing for both users and implementors of Perl. There have been a number of proposals on how to best address the problem. It is clear that smartmatch is almost certainly either going to change or go away in the future. Relying on its current behavior is not recommended.\r\n\r\n&gt;Warnings will now be issued when the parser sees ~~, given, or when. \r\n\r\n---\r\n\r\n---\r\n\r\n---\r\n\r\n## If you can get away with requiring Perl v5.10, then you can use any of the following examples.\r\n\r\n- The [smart match `~~`][smart match] operator.\r\n\r\n        if( $element ~~ @list ){ ... }\r\n        if( $element ~~ [ 1, 2, 3 ] ){ ... }\r\n\r\n- You could also use the [`given`\/`when`][given\/when] construct. Which uses the smart match functionality internally.\r\n    \r\n        given( $element ){\r\n           when( @list ){ ... }\r\n        }\r\n\r\n- You can also use a `for` loop as a &quot;topicalizer&quot; ( meaning it sets `$_` ).\r\n\r\n        for( @elements ){\r\n           when( @list ){ ... }\r\n        }\r\n\r\nOne thing that will come out in Perl 5.12 is the ability to use the post-fix version of `when`. Which makes it even more like `if` and `unless`.\r\n\r\n    given( $element ){\r\n      ... when @list;\r\n    }\r\n\r\n---\r\n\r\n## If you have to be able to run on older versions of Perl, there still are several options.\r\n\r\n- You might think you can get away with using [List::Util::first][], but there are some edge conditions that make it problematic.\r\n\r\n    In this example it is fairly obvious that we want to successfully match against `0`. Unfortunately this code will print `failure` every time.\r\n    \r\n        use List::Util qw&#39;first&#39;;\r\n        my $element = 0;\r\n        if( first { $element eq $_ } 0..9 ){\r\n          print &quot;success\\n&quot;;\r\n        } else {\r\n          print &quot;failure\\n&quot;;\r\n        }\r\n    \r\n    You could check the return value of [`first`][List::Util::first] for defined-ness, but that will fail if we actually want a match against `undef` to succeed.\r\n\r\n- You can safely use [`grep`][grep] however.\r\n\r\n        if( grep { $element eq $_ } 0..9 ){ ... }\r\n\r\n    This is safe because `grep` gets called in a scalar context. Arrays return the number of elements when called in scalar context. So this will continue to work even if we try to match against `undef`.\r\n    \r\n- You could use an enclosing `for` loop. Just make sure you call `last`, to exit out of the loop on a successful match. Otherwise you might end up running your code more than once.\r\n\r\n        for( @array ){\r\n          if( $element eq $_ ){\r\n            ...\r\n            last;\r\n          }\r\n        }\r\n\r\n- You could put the `for` loop inside the condition of the `if` statement ...\r\n    \r\n        if(\r\n          do{\r\n            my $match = 0;\r\n            for( @list ){\r\n              if( $element eq $_ ){\r\n                $match = 1;\r\n                last;\r\n              }\r\n            }\r\n            $match; # the return value of the do block\r\n          }\r\n        ){\r\n          ...\r\n        }\r\n\r\n- ... but it might be more clear to put the `for` loop before the `if` statement.\r\n    \r\n        my $match = 0;\r\n        for( @list ){\r\n          if( $_ eq $element ){\r\n            $match = 1;\r\n            last;\r\n          }\r\n        }\r\n    \r\n        if( $match ){ ... }\r\n\r\n- If you&#39;re only matching against strings, you could also use a hash. This can speed up your program if `@list` is large **and**, you are going to match against `%hash` several times. Especially if `@array` doesn&#39;t change, because then you only have to load up `%hash` once.\r\n\r\n        my %hash = map { $_, 1 } @array;\r\n        if( $hash{ $element } ){ ... }\r\n\r\n- You could also make your own subroutine. This is one of the cases where it is useful to use [prototypes][].\r\n\r\n        sub in(&amp;@){\r\n          local $_;\r\n          my $code = shift;\r\n          for( @_ ){ # sets $_\r\n            if( $code-&gt;() ){\r\n              return 1;\r\n            }\r\n          }\r\n          return 0;\r\n        }\r\n\r\n        if( in { $element eq $_ } @list ){ ... }\r\n\r\n[smart match]:\r\n  http:\/\/perldoc.perl.org\/perlsyn.html#Smart-matching-in-detail\r\n[given\/when]:\r\n  http:\/\/perldoc.perl.org\/perlsyn.html#Switch-statements &quot;Perl 5 &amp; 6 version of switch\/case&quot;\r\n[grep]:\r\n  http:\/\/perldoc.perl.org\/functions\/grep.html\r\n\r\n[List::Util]: http:\/\/perldoc.perl.org\/List\/Util.html\r\n[List::Util::first]: http:\/\/perldoc.perl.org\/List\/Util.html#first-BLOCK-LIST\r\n[prototypes]: http:\/\/perldoc.perl.org\/perlsub.html#Prototypes\r\n\r\n\r\n  [1]: https:\/\/metacpan.org\/pod\/release\/RJBS\/perl-5.18.0\/pod\/perldelta.pod#The-smartmatch-family-of-features-are-now-experimental",
        "body": "<h2>UPDATE:<\/h2>\n\n<blockquote>\n  <p><a href=\"https:\/\/metacpan.org\/pod\/release\/RJBS\/perl-5.18.0\/pod\/perldelta.pod#The-smartmatch-family-of-features-are-now-experimental\" rel=\"noreferrer\">The smartmatch family of features are now experimental<\/a><\/p>\n  \n  <p>Smart match, added in v5.10.0 and significantly revised in v5.10.1, has been a regular point of complaint. Although there are a number of ways in which it is useful, it has also proven problematic and confusing for both users and implementors of Perl. There have been a number of proposals on how to best address the problem. It is clear that smartmatch is almost certainly either going to change or go away in the future. Relying on its current behavior is not recommended.<\/p>\n  \n  <p>Warnings will now be issued when the parser sees ~~, given, or when. <\/p>\n<\/blockquote>\n\n<hr>\n\n<hr>\n\n<hr>\n\n<h2>If you can get away with requiring Perl v5.10, then you can use any of the following examples.<\/h2>\n\n<ul>\n<li><p>The <a href=\"http:\/\/perldoc.perl.org\/perlsyn.html#Smart-matching-in-detail\" rel=\"noreferrer\">smart match <code>~~<\/code><\/a> operator.<\/p>\n\n<pre><code>if( $element ~~ @list ){ ... }\nif( $element ~~ [ 1, 2, 3 ] ){ ... }\n<\/code><\/pre><\/li>\n<li><p>You could also use the <a href=\"http:\/\/perldoc.perl.org\/perlsyn.html#Switch-statements\" rel=\"noreferrer\" title=\"Perl 5 &amp; 6 version of switch\/case\"><code>given<\/code>\/<code>when<\/code><\/a> construct. Which uses the smart match functionality internally.<\/p>\n\n<pre><code>given( $element ){\n   when( @list ){ ... }\n}\n<\/code><\/pre><\/li>\n<li><p>You can also use a <code>for<\/code> loop as a \"topicalizer\" ( meaning it sets <code>$_<\/code> ).<\/p>\n\n<pre><code>for( @elements ){\n   when( @list ){ ... }\n}\n<\/code><\/pre><\/li>\n<\/ul>\n\n<p>One thing that will come out in Perl 5.12 is the ability to use the post-fix version of <code>when<\/code>. Which makes it even more like <code>if<\/code> and <code>unless<\/code>.<\/p>\n\n<pre><code>given( $element ){\n  ... when @list;\n}\n<\/code><\/pre>\n\n<hr>\n\n<h2>If you have to be able to run on older versions of Perl, there still are several options.<\/h2>\n\n<ul>\n<li><p>You might think you can get away with using <a href=\"http:\/\/perldoc.perl.org\/List\/Util.html#first-BLOCK-LIST\" rel=\"noreferrer\">List::Util::first<\/a>, but there are some edge conditions that make it problematic.<\/p>\n\n<p>In this example it is fairly obvious that we want to successfully match against <code>0<\/code>. Unfortunately this code will print <code>failure<\/code> every time.<\/p>\n\n<pre><code>use List::Util qw'first';\nmy $element = 0;\nif( first { $element eq $_ } 0..9 ){\n  print \"success\\n\";\n} else {\n  print \"failure\\n\";\n}\n<\/code><\/pre>\n\n<p>You could check the return value of <a href=\"http:\/\/perldoc.perl.org\/List\/Util.html#first-BLOCK-LIST\" rel=\"noreferrer\"><code>first<\/code><\/a> for defined-ness, but that will fail if we actually want a match against <code>undef<\/code> to succeed.<\/p><\/li>\n<li><p>You can safely use <a href=\"http:\/\/perldoc.perl.org\/functions\/grep.html\" rel=\"noreferrer\"><code>grep<\/code><\/a> however.<\/p>\n\n<pre><code>if( grep { $element eq $_ } 0..9 ){ ... }\n<\/code><\/pre>\n\n<p>This is safe because <code>grep<\/code> gets called in a scalar context. Arrays return the number of elements when called in scalar context. So this will continue to work even if we try to match against <code>undef<\/code>.<\/p><\/li>\n<li><p>You could use an enclosing <code>for<\/code> loop. Just make sure you call <code>last<\/code>, to exit out of the loop on a successful match. Otherwise you might end up running your code more than once.<\/p>\n\n<pre><code>for( @array ){\n  if( $element eq $_ ){\n    ...\n    last;\n  }\n}\n<\/code><\/pre><\/li>\n<li><p>You could put the <code>for<\/code> loop inside the condition of the <code>if<\/code> statement ...<\/p>\n\n<pre><code>if(\n  do{\n    my $match = 0;\n    for( @list ){\n      if( $element eq $_ ){\n        $match = 1;\n        last;\n      }\n    }\n    $match; # the return value of the do block\n  }\n){\n  ...\n}\n<\/code><\/pre><\/li>\n<li><p>... but it might be more clear to put the <code>for<\/code> loop before the <code>if<\/code> statement.<\/p>\n\n<pre><code>my $match = 0;\nfor( @list ){\n  if( $_ eq $element ){\n    $match = 1;\n    last;\n  }\n}\n\nif( $match ){ ... }\n<\/code><\/pre><\/li>\n<li><p>If you're only matching against strings, you could also use a hash. This can speed up your program if <code>@list<\/code> is large <strong>and<\/strong>, you are going to match against <code>%hash<\/code> several times. Especially if <code>@array<\/code> doesn't change, because then you only have to load up <code>%hash<\/code> once.<\/p>\n\n<pre><code>my %hash = map { $_, 1 } @array;\nif( $hash{ $element } ){ ... }\n<\/code><\/pre><\/li>\n<li><p>You could also make your own subroutine. This is one of the cases where it is useful to use <a href=\"http:\/\/perldoc.perl.org\/perlsub.html#Prototypes\" rel=\"noreferrer\">prototypes<\/a>.<\/p>\n\n<pre><code>sub in(&amp;@){\n  local $_;\n  my $code = shift;\n  for( @_ ){ # sets $_\n    if( $code-&gt;() ){\n      return 1;\n    }\n  }\n  return 0;\n}\n\nif( in { $element eq $_ } @list ){ ... }\n<\/code><\/pre><\/li>\n<\/ul>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 24020,
            "reputation": 73831,
            "user_id": 60777,
            "user_type": "registered",
            "accept_rate": 77,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/4e698bea14e1d5f5c86d0359e5f24d28?s=256&d=identicon&r=PG",
            "display_name": "Chris Lutz",
            "link": "https:\/\/stackoverflow.com\/users\/60777\/chris-lutz"
        },
        "is_accepted": true,
        "score": 120,
        "last_activity_date": 1243006453,
        "last_edit_date": 1243006453.0,
        "creation_date": 1242981859,
        "answer_id": 896928,
        "question_id": 896904,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "From the Perldoc page on [sleep][1]:\r\n\r\n&gt; For delays of finer granularity than one second, the [Time::HiRes][2] module (from CPAN, and starting from Perl 5.8 part of the standard distribution) provides usleep().\r\n\r\nActually, it provides `usleep()` (which sleeps in microseconds) and `nanosleep()` (which sleeps in nanoseconds). You may want `usleep()`, which should let you deal with easier numbers. 1 millisecond sleep (using each):\r\n\r\n    use strict;\r\n    use warnings;\r\n\r\n    use Time::HiRes qw(usleep nanosleep);\r\n\r\n    # 1 millisecond == 1000 microseconds\r\n    usleep(1000);\r\n    # 1 microsecond == 1000 nanoseconds\r\n    nanosleep(1000000);\r\n\r\nIf you don&#39;t want to (or can&#39;t) load a module to do this, you may also be able to use the built-in &lt;a href=&quot;http:\/\/perldoc.perl.org\/functions\/select.html&quot;&gt;`select()`&lt;\/a&gt; function:\r\n\r\n    # Sleep for 250 milliseconds\r\n    select(undef, undef, undef, 0.25);\r\n\r\n  [1]: http:\/\/perldoc.perl.org\/functions\/sleep.html\r\n  [2]: http:\/\/perldoc.perl.org\/Time\/HiRes.html",
        "body": "<p>From the Perldoc page on <a href=\"http:\/\/perldoc.perl.org\/functions\/sleep.html\" rel=\"noreferrer\">sleep<\/a>:<\/p>\n\n<blockquote>\n  <p>For delays of finer granularity than one second, the <a href=\"http:\/\/perldoc.perl.org\/Time\/HiRes.html\" rel=\"noreferrer\">Time::HiRes<\/a> module (from CPAN, and starting from Perl 5.8 part of the standard distribution) provides usleep().<\/p>\n<\/blockquote>\n\n<p>Actually, it provides <code>usleep()<\/code> (which sleeps in microseconds) and <code>nanosleep()<\/code> (which sleeps in nanoseconds). You may want <code>usleep()<\/code>, which should let you deal with easier numbers. 1 millisecond sleep (using each):<\/p>\n\n<pre><code>use strict;\nuse warnings;\n\nuse Time::HiRes qw(usleep nanosleep);\n\n# 1 millisecond == 1000 microseconds\nusleep(1000);\n# 1 microsecond == 1000 nanoseconds\nnanosleep(1000000);\n<\/code><\/pre>\n\n<p>If you don't want to (or can't) load a module to do this, you may also be able to use the built-in <a href=\"http:\/\/perldoc.perl.org\/functions\/select.html\" rel=\"noreferrer\"><code>select()<\/code><\/a> function:<\/p>\n\n<pre><code># Sleep for 250 milliseconds\nselect(undef, undef, undef, 0.25);\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5473,
            "reputation": 130134,
            "user_id": 2766176,
            "user_type": "registered",
            "accept_rate": 61,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/edd8638efe875601bfe394a8aea5b16d?s=256&d=identicon&r=PG",
            "display_name": "brian d foy",
            "link": "https:\/\/stackoverflow.com\/users\/2766176\/brian-d-foy"
        },
        "is_accepted": true,
        "score": 120,
        "last_activity_date": 1272281235,
        "last_edit_date": 1495541900.0,
        "creation_date": 1272066571,
        "answer_id": 2702614,
        "question_id": 2702564,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "For a Perl one-liner, it&#39;s basically the same thing as the `awk` solution in [Ayman Hourieh&#39;s answer](https:\/\/stackoverflow.com\/questions\/2702564\/script-to-sum-all-numbers-in-a-file-linux\/2702577#2702577):\r\n\r\n     % perl -nle &#39;$sum += $_ } END { print $sum&#39;\r\n\r\nIf you&#39;re curious what Perl one-liners do, you can deparse them:\r\n\r\n     %  perl -MO=Deparse -nle &#39;$sum += $_ } END { print $sum&#39;\r\n\r\nThe result is a more verbose version of the program, in a form that no one would ever write on their own:\r\n\r\n\tBEGIN { $\/ = &quot;\\n&quot;; $\\ = &quot;\\n&quot;; }\r\n\tLINE: while (defined($_ = &lt;ARGV&gt;)) {\r\n\t\tchomp $_;\r\n\t\t$sum += $_;\r\n\t}\r\n\tsub END {\r\n\t\tprint $sum;\r\n\t}\r\n\t-e syntax OK\r\n\r\nJust for giggles, I tried this with a file containing 1,000,000 numbers (in the range 0 - 9,999). On my Mac Pro, it returns virtually instantaneously. That&#39;s too bad, because I was hoping using `mmap` would be really fast, but it&#39;s just the same time:\r\n\r\n\tuse 5.010;\r\n\tuse File::Map qw(map_file);\r\n\t\r\n\tmap_file my $map, $ARGV[0];\r\n\t\r\n\t$sum += $1 while $map =~ m\/(\\d+)\/g;\r\n\t\r\n\tsay $sum;\r\n",
        "body": "<p>For a Perl one-liner, it's basically the same thing as the <code>awk<\/code> solution in <a href=\"https:\/\/stackoverflow.com\/questions\/2702564\/script-to-sum-all-numbers-in-a-file-linux\/2702577#2702577\">Ayman Hourieh's answer<\/a>:<\/p>\n\n<pre><code> % perl -nle '$sum += $_ } END { print $sum'\n<\/code><\/pre>\n\n<p>If you're curious what Perl one-liners do, you can deparse them:<\/p>\n\n<pre><code> %  perl -MO=Deparse -nle '$sum += $_ } END { print $sum'\n<\/code><\/pre>\n\n<p>The result is a more verbose version of the program, in a form that no one would ever write on their own:<\/p>\n\n<pre><code>BEGIN { $\/ = \"\\n\"; $\\ = \"\\n\"; }\nLINE: while (defined($_ = &lt;ARGV&gt;)) {\n    chomp $_;\n    $sum += $_;\n}\nsub END {\n    print $sum;\n}\n-e syntax OK\n<\/code><\/pre>\n\n<p>Just for giggles, I tried this with a file containing 1,000,000 numbers (in the range 0 - 9,999). On my Mac Pro, it returns virtually instantaneously. That's too bad, because I was hoping using <code>mmap<\/code> would be really fast, but it's just the same time:<\/p>\n\n<pre><code>use 5.010;\nuse File::Map qw(map_file);\n\nmap_file my $map, $ARGV[0];\n\n$sum += $1 while $map =~ m\/(\\d+)\/g;\n\nsay $sum;\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 877428,
            "reputation": 4747,
            "user_id": 119341,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/d0f10dea14485baab0404fbdc635c646?s=256&d=identicon&r=PG",
            "display_name": "trendels",
            "link": "https:\/\/stackoverflow.com\/users\/119341\/trendels"
        },
        "is_accepted": true,
        "score": 119,
        "last_activity_date": 1574254617,
        "last_edit_date": 1574254617.0,
        "creation_date": 1244630536,
        "answer_id": 974819,
        "question_id": 974656,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Like [codehead said][1], you&#39;d have to iterate over the array indices instead of its elements. I prefer this variant over the C-style `for` loop:\r\n\r\n&lt;!-- language: lang-perl --&gt;\r\n\r\n    for my $i (0 .. $#x) {\r\n        print &quot;$i: $x[$i]\\n&quot;;\r\n    }\r\n\r\n  [1]: https:\/\/stackoverflow.com\/questions\/974656\/automatically-get-loop-index-in-foreach-loop-in-perl\/974679#974679\r\n",
        "body": "<p>Like <a href=\"https:\/\/stackoverflow.com\/questions\/974656\/automatically-get-loop-index-in-foreach-loop-in-perl\/974679#974679\">codehead said<\/a>, you'd have to iterate over the array indices instead of its elements. I prefer this variant over the C-style <code>for<\/code> loop:<\/p>\n\n<pre class=\"lang-perl prettyprint-override\"><code>for my $i (0 .. $#x) {\n    print \"$i: $x[$i]\\n\";\n}\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 62058,
            "reputation": 32244,
            "user_id": 184595,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/d6jGq.jpg?s=256&g=1",
            "display_name": "CrayonViolent",
            "link": "https:\/\/stackoverflow.com\/users\/184595\/crayonviolent"
        },
        "is_accepted": true,
        "score": 118,
        "last_activity_date": 1437711601,
        "last_edit_date": 1437711601.0,
        "creation_date": 1305916737,
        "answer_id": 6076269,
        "question_id": 6076229,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "What context\/language?  Some languages use `\/` as the pattern delimiter, so yes, you need to escape it, depending on which language\/context.  You escape it by putting a backward slash in front of it: `\\\/` For some languages (like PHP) you can use other characters as the delimiter and therefore you don&#39;t need to escape it. But AFAIK in all languages, the only special significance the `\/` has is it may be the designated pattern delimiter. ",
        "body": "<p>What context\/language?  Some languages use <code>\/<\/code> as the pattern delimiter, so yes, you need to escape it, depending on which language\/context.  You escape it by putting a backward slash in front of it: <code>\\\/<\/code> For some languages (like PHP) you can use other characters as the delimiter and therefore you don't need to escape it. But AFAIK in all languages, the only special significance the <code>\/<\/code> has is it may be the designated pattern delimiter. <\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 185247,
            "reputation": 3498,
            "user_id": 421825,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/4f24a58553a9ad985a39b4e3ac91bf46?s=256&d=identicon&r=PG",
            "display_name": "pavel",
            "link": "https:\/\/stackoverflow.com\/users\/421825\/pavel"
        },
        "is_accepted": false,
        "score": 118,
        "last_activity_date": 1386337737,
        "last_edit_date": 1386337737.0,
        "creation_date": 1343420815,
        "answer_id": 11695199,
        "question_id": 11695110,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "I don&#39;t know why, but this is what Perl makes of it:\r\n\r\n    perl -MO=Deparse -w yuck\r\n    BEGIN { $^W = 1; }\r\n    use warnings;\r\n    use strict &#39;refs&#39;;\r\n    &#39;error&#39;-&gt;Syntax(!exit(0));\r\n    yuck syntax OK\r\n\r\nIt seems that the parser thinks you&#39;re calling the method `Syntax` on the `error`-object... Strange indeed!\r\n",
        "body": "<p>I don't know why, but this is what Perl makes of it:<\/p>\n\n<pre><code>perl -MO=Deparse -w yuck\nBEGIN { $^W = 1; }\nuse warnings;\nuse strict 'refs';\n'error'-&gt;Syntax(!exit(0));\nyuck syntax OK\n<\/code><\/pre>\n\n<p>It seems that the parser thinks you're calling the method <code>Syntax<\/code> on the <code>error<\/code>-object... Strange indeed!<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4721,
            "reputation": 68421,
            "user_id": 7231,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/81b76985f3985e35492e25880493d045?s=256&d=identicon&r=PG",
            "display_name": "Dave Cross",
            "link": "https:\/\/stackoverflow.com\/users\/7231\/dave-cross"
        },
        "is_accepted": true,
        "score": 116,
        "last_activity_date": 1507841994,
        "last_edit_date": 1507841994.0,
        "creation_date": 1362480987,
        "answer_id": 15222005,
        "question_id": 15210532,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Without `use utf8` Perl interprets your string as a sequence of single byte characters. There are four bytes in your string as you can see from this:\r\n\r\n    $ perl -E &#39;say join &quot;:&quot;, map { ord } split \/\/, &quot;\u9e21\\n&quot;;&#39;\r\n    233:184:161:10\r\n\r\nThe first three bytes make up your character, the last one is the line-feed.\r\n\r\nThe call to `print` sends these four characters to STDOUT. Your console then works out how to display these characters. If your console is set to use UTF8, then it will interpret those three bytes as your single character and that is what is displayed.\r\n\r\nIf we add in the `utf8` module, things are different. In this case, Perl interprets your string as just two characters.\r\n\r\n    $ perl -Mutf8 -E &#39;say join &quot;:&quot;, map { ord } split \/\/, &quot;\u9e21\\n&quot;;&#39;\r\n    40481:10\r\n\r\nBy default, Perl&#39;s IO layer assumes that it is working with single-byte characters. So when you try to print a multi-byte character, Perl thinks that something is wrong and gives you a warning. As ever, you can get more explanation for this error by including `use diagnostics`. It will say this:\r\n\r\n&gt; (S utf8) Perl met a wide character (&gt;255) when it wasn&#39;t expecting\r\n&gt; one.  This warning is by default on for I\/O (like print).  The easiest\r\n&gt; way to quiet this warning is simply to add the :utf8 layer to the\r\n&gt; output, e.g. binmode STDOUT, &#39;:utf8&#39;.  Another way to turn off the\r\n&gt; warning is to add no warnings &#39;utf8&#39;; but that is often closer to\r\n&gt; cheating.  In general, you are supposed to explicitly mark the\r\n&gt; filehandle with an encoding, see open and perlfunc\/binmode.\r\n\r\nAs others have pointed out you need to tell Perl to accept multi-byte output. There are many ways to do this (see the [Perl Unicode Tutorial][1] for some examples). One of the simplest ways is to use the `-CS` command line flag - which tells the three standard filehandles (STDIN, STDOUT and STDERR) to deal with UTF8.\r\n\r\n    $ perl -Mutf8 -e &#39;print &quot;\u9e21\\n&quot;;&#39;\r\n    Wide character in print at -e line 1.\r\n    \u9e21\r\n\r\nvs\r\n\r\n    $ perl -Mutf8 -CS -e &#39;print &quot;\u9e21\\n&quot;;&#39;\r\n    \u9e21\r\n\r\nUnicode is a big and complex area. As you&#39;ve seen, many simple programs appear to do the right thing, but for the wrong reasons. When you start to fix part of the program, things will often get worse until you&#39;ve fixed *all* of the program.\r\n\r\n  [1]: http:\/\/perldoc.perl.org\/perlunitut.html",
        "body": "<p>Without <code>use utf8<\/code> Perl interprets your string as a sequence of single byte characters. There are four bytes in your string as you can see from this:<\/p>\n\n<pre><code>$ perl -E 'say join \":\", map { ord } split \/\/, \"\u9e21\\n\";'\n233:184:161:10\n<\/code><\/pre>\n\n<p>The first three bytes make up your character, the last one is the line-feed.<\/p>\n\n<p>The call to <code>print<\/code> sends these four characters to STDOUT. Your console then works out how to display these characters. If your console is set to use UTF8, then it will interpret those three bytes as your single character and that is what is displayed.<\/p>\n\n<p>If we add in the <code>utf8<\/code> module, things are different. In this case, Perl interprets your string as just two characters.<\/p>\n\n<pre><code>$ perl -Mutf8 -E 'say join \":\", map { ord } split \/\/, \"\u9e21\\n\";'\n40481:10\n<\/code><\/pre>\n\n<p>By default, Perl's IO layer assumes that it is working with single-byte characters. So when you try to print a multi-byte character, Perl thinks that something is wrong and gives you a warning. As ever, you can get more explanation for this error by including <code>use diagnostics<\/code>. It will say this:<\/p>\n\n<blockquote>\n  <p>(S utf8) Perl met a wide character (>255) when it wasn't expecting\n  one.  This warning is by default on for I\/O (like print).  The easiest\n  way to quiet this warning is simply to add the :utf8 layer to the\n  output, e.g. binmode STDOUT, ':utf8'.  Another way to turn off the\n  warning is to add no warnings 'utf8'; but that is often closer to\n  cheating.  In general, you are supposed to explicitly mark the\n  filehandle with an encoding, see open and perlfunc\/binmode.<\/p>\n<\/blockquote>\n\n<p>As others have pointed out you need to tell Perl to accept multi-byte output. There are many ways to do this (see the <a href=\"http:\/\/perldoc.perl.org\/perlunitut.html\" rel=\"noreferrer\">Perl Unicode Tutorial<\/a> for some examples). One of the simplest ways is to use the <code>-CS<\/code> command line flag - which tells the three standard filehandles (STDIN, STDOUT and STDERR) to deal with UTF8.<\/p>\n\n<pre><code>$ perl -Mutf8 -e 'print \"\u9e21\\n\";'\nWide character in print at -e line 1.\n\u9e21\n<\/code><\/pre>\n\n<p>vs<\/p>\n\n<pre><code>$ perl -Mutf8 -CS -e 'print \"\u9e21\\n\";'\n\u9e21\n<\/code><\/pre>\n\n<p>Unicode is a big and complex area. As you've seen, many simple programs appear to do the right thing, but for the wrong reasons. When you start to fix part of the program, things will often get worse until you've fixed <em>all<\/em> of the program.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 24323,
            "reputation": 24669,
            "user_id": 2533756,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/4823eb250d0d12390cfa8939da4dae0f?s=256&d=identicon&r=PG",
            "display_name": "aks",
            "link": "https:\/\/stackoverflow.com\/users\/2533756\/aks"
        },
        "is_accepted": true,
        "score": 114,
        "last_activity_date": 1245757645,
        "last_edit_date": 1495540958.0,
        "creation_date": 1245736649,
        "answer_id": 1030819,
        "question_id": 1030787,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "This kind of search and replace can be accomplished with a one-liner such as -\r\n\r\n    perl -i -pe &#39;s\/START.*STOP\/replace_string\/g&#39; file_to_change\r\n\r\nFor more ways to accomplish the same thing check out this [thread][1]. To handle multi-line searches use the following command - \r\n\r\n    perl -i -pe &#39;BEGIN{undef $\/;} s\/START.*STOP\/replace_string\/smg&#39; file_to_change\r\n\r\nIn order to convert the following code from a one-liner to a perl program have a look at the [perlrun documentation][2].\r\n\r\nIf you really find the need to convert this into a working program then just let Perl handle the file opening\/closing for you.\r\n\r\n    #!\/usr\/bin\/perl -pi\r\n    #multi-line in place substitute - subs.pl\r\n    use strict;\r\n    use warnings;\r\n    \r\n    BEGIN {undef $\/;}\r\n    \r\n    s\/START.*STOP\/replace_string\/smg;\r\n\r\nYou can then call the script with the filename as the first argument\r\n\r\n    $perl subs.pl file_to_change\r\n\r\nIf you want a more meatier script where you get to handle the file open\/close operations(don&#39;t we love all those &#39;die&#39; statements) then have a look at the example in perlrun under the -i[extension] switch.\r\n\r\n  [1]: https:\/\/stackoverflow.com\/questions\/934733\/perl-loop-through-a-file-and-substitute\r\n  [2]: http:\/\/perldoc.perl.org\/perlrun.html\r\n",
        "body": "<p>This kind of search and replace can be accomplished with a one-liner such as -<\/p>\n\n<pre><code>perl -i -pe 's\/START.*STOP\/replace_string\/g' file_to_change\n<\/code><\/pre>\n\n<p>For more ways to accomplish the same thing check out this <a href=\"https:\/\/stackoverflow.com\/questions\/934733\/perl-loop-through-a-file-and-substitute\">thread<\/a>. To handle multi-line searches use the following command - <\/p>\n\n<pre><code>perl -i -pe 'BEGIN{undef $\/;} s\/START.*STOP\/replace_string\/smg' file_to_change\n<\/code><\/pre>\n\n<p>In order to convert the following code from a one-liner to a perl program have a look at the <a href=\"http:\/\/perldoc.perl.org\/perlrun.html\" rel=\"noreferrer\">perlrun documentation<\/a>.<\/p>\n\n<p>If you really find the need to convert this into a working program then just let Perl handle the file opening\/closing for you.<\/p>\n\n<pre><code>#!\/usr\/bin\/perl -pi\n#multi-line in place substitute - subs.pl\nuse strict;\nuse warnings;\n\nBEGIN {undef $\/;}\n\ns\/START.*STOP\/replace_string\/smg;\n<\/code><\/pre>\n\n<p>You can then call the script with the filename as the first argument<\/p>\n\n<pre><code>$perl subs.pl file_to_change\n<\/code><\/pre>\n\n<p>If you want a more meatier script where you get to handle the file open\/close operations(don't we love all those 'die' statements) then have a look at the example in perlrun under the -i[extension] switch.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 289134,
            "reputation": 372786,
            "user_id": 589924,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/b2cf53d5a3d25f95c0db4e025aed4153?s=256&d=identicon&r=PG",
            "display_name": "ikegami",
            "link": "https:\/\/stackoverflow.com\/users\/589924\/ikegami"
        },
        "is_accepted": true,
        "score": 114,
        "last_activity_date": 1519841599,
        "last_edit_date": 1519841599.0,
        "creation_date": 1428675908,
        "answer_id": 29563961,
        "question_id": 29563832,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "From [perlrun](http:\/\/perldoc.perl.org\/perlrun.html),\r\n\r\n&gt; If the `#!` line does not contain the word &quot;perl&quot; nor the word &quot;indir&quot; the program named after the `#!` is executed instead of the Perl interpreter. This is slightly bizarre, but it helps people on machines that don&#39;t do `#!` , because they can tell a program that their SHELL is *\/usr\/bin\/perl*, and Perl will then dispatch the program to the correct interpreter for them.\r\n\r\nFor example,\r\n\r\n    $ cat a\r\n    #!\/bin\/cat\r\n    meow\r\n    \r\n    $ perl a\r\n    #!\/bin\/cat\r\n    meow\r\n",
        "body": "<p>From <a href=\"http:\/\/perldoc.perl.org\/perlrun.html\" rel=\"nofollow noreferrer\">perlrun<\/a>,<\/p>\n\n<blockquote>\n  <p>If the <code>#!<\/code> line does not contain the word \"perl\" nor the word \"indir\" the program named after the <code>#!<\/code> is executed instead of the Perl interpreter. This is slightly bizarre, but it helps people on machines that don't do <code>#!<\/code> , because they can tell a program that their SHELL is <em>\/usr\/bin\/perl<\/em>, and Perl will then dispatch the program to the correct interpreter for them.<\/p>\n<\/blockquote>\n\n<p>For example,<\/p>\n\n<pre><code>$ cat a\n#!\/bin\/cat\nmeow\n\n$ perl a\n#!\/bin\/cat\nmeow\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 25722,
            "reputation": 73090,
            "user_id": 66353,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/b56a740041997df881354ef8c97496d7?s=256&d=identicon&r=PG",
            "display_name": "Alan Haggai Alavi",
            "link": "https:\/\/stackoverflow.com\/users\/66353\/alan-haggai-alavi"
        },
        "is_accepted": true,
        "score": 112,
        "last_activity_date": 1245857546,
        "last_edit_date": null,
        "creation_date": 1245857546,
        "answer_id": 1039122,
        "question_id": 1039107,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "You can check for a module&#39;s installation path by:\r\n\r\n    perldoc -l XML::Simple\r\n\r\nThe problem with your one-liner is that, it is not recursively traversing directories\/sub-directories. Hence, you get only pragmatic module names as output.",
        "body": "<p>You can check for a module's installation path by:<\/p>\n\n<pre><code>perldoc -l XML::Simple\n<\/code><\/pre>\n\n<p>The problem with your one-liner is that, it is not recursively traversing directories\/sub-directories. Hence, you get only pragmatic module names as output.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1841772,
            "reputation": 7309,
            "user_id": 1671032,
            "user_type": "registered",
            "accept_rate": 82,
            "profile_image": "https:\/\/i.stack.imgur.com\/FfJD4.jpg?s=256&g=1",
            "display_name": "Galimov Albert",
            "link": "https:\/\/stackoverflow.com\/users\/1671032\/galimov-albert"
        },
        "is_accepted": true,
        "score": 112,
        "last_activity_date": 1412988836,
        "last_edit_date": 1412988836.0,
        "creation_date": 1356558849,
        "answer_id": 14046720,
        "question_id": 14046669,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "First, **eq** is for comparing strings; **==** is for comparing numbers.\r\n\r\n&gt; Even if the &quot;if&quot; condition is satisfied, it doesn&#39;t evaluate the &quot;then&quot; block.\r\n\r\nI think your problem is that your variables don&#39;t contain what you think they do. I think your `$str1` or `$str2` contains something like &quot;taste\\n&quot; or so. Check them by printing before your **if**: `print &quot;str1=&#39;$str1&#39;\\n&quot;;`.\r\n\r\nThe trailing newline can be removed with the `chomp($str1);` function.",
        "body": "<p>First, <strong>eq<\/strong> is for comparing strings; <strong>==<\/strong> is for comparing numbers.<\/p>\n\n<blockquote>\n  <p>Even if the \"if\" condition is satisfied, it doesn't evaluate the \"then\" block.<\/p>\n<\/blockquote>\n\n<p>I think your problem is that your variables don't contain what you think they do. I think your <code>$str1<\/code> or <code>$str2<\/code> contains something like \"taste\\n\" or so. Check them by printing before your <strong>if<\/strong>: <code>print \"str1='$str1'\\n\";<\/code>.<\/p>\n\n<p>The trailing newline can be removed with the <code>chomp($str1);<\/code> function.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 13705,
            "reputation": 4725,
            "user_id": 27687,
            "user_type": "registered",
            "accept_rate": 95,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/a83572382e18c7f160bb1c0ea43f98ee?s=256&d=identicon&r=PG",
            "display_name": "Kurt W. Leucht",
            "link": "https:\/\/stackoverflow.com\/users\/27687\/kurt-w-leucht"
        },
        "is_accepted": true,
        "score": 111,
        "last_activity_date": 1551405647,
        "last_edit_date": 1551405647.0,
        "creation_date": 1234291090,
        "answer_id": 533577,
        "question_id": 533553,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "It took me a while and it also took me taking small snippets from a number of different sources and melting them together, but I think I have a small working example that sufficiently demonstrates to a Perl newbie the Perl build process including unit testing and code coverage analysis &amp; reporting.  (I&#39;m using [ActiveState ActivePerl][1] v5.10.0 on a Windows XP Pro PC, [Module::Build][2], [Test::More][3], [Devel::Cover][4])\r\n\r\nStart out with a directory for your Perl project and then create a &quot;lib&quot; directory and a &quot;t&quot; directory under your project directory:\r\n\r\n    HelloPerlBuildWorld\r\n            |\r\n            |----------&gt; lib\r\n            |\r\n            |----------&gt; t\r\n\r\n\r\nIn the &quot;lib&quot; directory, create a text file named &quot;HelloPerlBuildWorld.pm&quot;.  This file is your Perl module that you will be building and testing.  Paste the following content into this file:\r\n\r\n    use strict;\r\n    use warnings;\r\n    package HelloPerlBuildWorld;\r\n    \r\n    $HelloPerlBuildWorld::VERSION = &#39;0.1&#39;;\r\n    \r\n    sub hello {\r\n       return &quot;Hello, Perl Build World!&quot;;\r\n    }\r\n    \r\n    sub bye {\r\n       return &quot;Goodbye, cruel world!&quot;;\r\n    }\r\n    \r\n    sub repeat {\r\n       return 1;\r\n    }\r\n    \r\n    sub argumentTest {\r\n    \tmy ($booleanArg) = @_;\r\n    \t\r\n    \tif (!defined($booleanArg)) {\r\n    \t\treturn &quot;null&quot;;\r\n    \t}\r\n    \telsif ($booleanArg eq &quot;false&quot;) {\r\n    \t\treturn &quot;false&quot;;\r\n    \t}\r\n    \telsif ($booleanArg eq &quot;true&quot;) {\r\n    \t\treturn &quot;true&quot;;\r\n    \t}\r\n    \telse {\r\n    \t\treturn &quot;unknown&quot;;\r\n    \t}\r\n    \t\r\n       return &quot;Unreachable code: cannot be covered&quot;;\r\n    }\r\n    \r\n    1;\r\n\r\n\t\r\nIn the &quot;t&quot; directory, create a text file named &quot;HelloPerlBuildWorld.t&quot;.  This file is your unit test script that will attempt to fully test your Perl module above.  Paste the following content into this file:\r\n\r\n    use strict;\r\n    use warnings;\r\n    use Test::More qw(no_plan);\r\n    \r\n    # Verify module can be included via &quot;use&quot; pragma\r\n    BEGIN { use_ok(&#39;HelloPerlBuildWorld&#39;) };\r\n    \r\n    # Verify module can be included via &quot;require&quot; pragma\r\n    require_ok( &#39;HelloPerlBuildWorld&#39; );\r\n    \r\n    # Test hello() routine using a regular expression\r\n    my $helloCall = HelloPerlBuildWorld::hello();\r\n    like($helloCall, qr\/Hello, .*World\/, &quot;hello() RE test&quot;);\r\n    \r\n    # Test hello_message() routine using a got\/expected routine\r\n    is($helloCall, &quot;Hello, Perl Build World!&quot;, &quot;hello() IS test&quot;);\r\n    \r\n    # Do not test bye() routine\r\n    \r\n    # Test repeat() routine using a got\/expected routine\r\n    for (my $ctr=1; $ctr&lt;=10; $ctr++) {\r\n    \tmy $repeatCall = HelloPerlBuildWorld::repeat();\r\n    \tis($repeatCall, 1, &quot;repeat() IS test&quot;);\r\n    }\r\n    \r\n    # Test argumentTest() \r\n    my $argumentTestCall1 = HelloPerlBuildWorld::argumentTest();\r\n    is($argumentTestCall1, &quot;null&quot;, &quot;argumentTest() IS null test&quot;);\r\n    \r\n    # Test argumentTest(&quot;true&quot;) \r\n    my $argumentTestCall2 = HelloPerlBuildWorld::argumentTest(&quot;true&quot;);\r\n    is($argumentTestCall2, &quot;true&quot;, &quot;argumentTest() IS true test&quot;);\r\n    \r\n    # Test argumentTest(&quot;false&quot;) \r\n    my $argumentTestCall3 = HelloPerlBuildWorld::argumentTest(&quot;false&quot;);\r\n    is($argumentTestCall3, &quot;false&quot;, &quot;argumentTest() IS false test&quot;);\r\n    \r\n    # Test argumentTest(123) \r\n    my $argumentTestCall4 = HelloPerlBuildWorld::argumentTest(123);\r\n    is($argumentTestCall4, &quot;unknown&quot;, &quot;argumentTest() IS unknown test&quot;);\r\n\r\nNow back up in your top level project directory, create a text file named &quot;Build.PL&quot;.  This file will create your build scripts that you will use later.  Paste the following content into this file:\r\n\r\n    use strict;\r\n    use warnings;\r\n    use Module::Build;\r\n    \r\n    my $builder = Module::Build-&gt;new(\r\n        module_name         =&gt; &#39;HelloPerlBuildWorld&#39;,\r\n        license             =&gt; &#39;perl&#39;,\r\n        dist_abstract       =&gt; &#39;HelloPerlBuildWorld short description&#39;,\r\n        dist_author         =&gt; &#39;Author Name &lt;email_addy@goes.here&gt;&#39;,\r\n        build_requires =&gt; {\r\n            &#39;Test::More&#39; =&gt; &#39;0.10&#39;,\r\n        },\r\n    );\r\n    \r\n    $builder-&gt;create_build_script();\r\n\r\nThat&#39;s all the files you need.  Now from the command line in the top level project directory, type the following command:  \r\n\r\n    perl Build.PL\r\n\r\nYou will see something similar to the following:\r\n\r\n    Checking prerequisites...\r\n    Looks good\r\n    \r\n    Creating new &#39;Build&#39; script for &#39;HelloPerlBuildWorld&#39; version &#39;0.1&#39;\r\n\r\nNow you should be able to run your unit tests with the following command:\r\n\r\n    Build test\r\n\r\nAnd see something similar to this:\r\n\r\n    Copying lib\\HelloPerlBuildWorld.pm -&gt; blib\\lib\\HelloPerlBuildWorld.pm\r\n    t\\HelloPerlBuildWorld....ok\r\n    All tests successful.\r\n    Files=1, Tests=18,  0 wallclock secs ( 0.00 cusr +  0.00 csys =  0.00 CPU)\r\n\r\nTo run your unit tests with code coverage analysis, try this:\r\n\r\n    Build testcover\r\n\r\nAnd you&#39;ll see something on the order of this:\r\n\r\n    t\\HelloPerlBuildWorld....ok\r\n    All tests successful.\r\n    Files=1, Tests=18, 12 wallclock secs ( 0.00 cusr +  0.00 csys =  0.00 CPU)\r\n    cover\r\n    Reading database from D:\/Documents and Settings\/LeuchKW\/workspace\/HelloPerlBuildWorld\/cover_db\r\n    \r\n    \r\n    ----------------------------------- ------ ------ ------ ------ ------ ------\r\n    File                                  stmt   bran   cond    sub   time  total\r\n    ----------------------------------- ------ ------ ------ ------ ------ ------\r\n    D:\/Perl\/lib\/ActivePerl\/Config.pm       0.0    0.0    0.0    0.0    n\/a    0.0\r\n    D:\/Perl\/lib\/ActiveState\/Path.pm        0.0    0.0    0.0    0.0    n\/a    0.0\r\n    D:\/Perl\/lib\/AutoLoader.pm              0.0    0.0    0.0    0.0    n\/a    0.0\r\n    D:\/Perl\/lib\/B.pm                      18.6   16.7   13.3   19.2   96.4   17.6\r\n     ...\r\n    [SNIP]\r\n     ...\r\n    D:\/Perl\/lib\/re.pm                      0.0    0.0    0.0    0.0    n\/a    0.0\r\n    D:\/Perl\/lib\/strict.pm                 84.6   50.0   50.0  100.0    0.0   73.1\r\n    D:\/Perl\/lib\/vars.pm                   44.4   36.4    0.0  100.0    0.0   36.2\r\n    D:\/Perl\/lib\/warnings.pm               15.3   12.1    0.0   11.1    0.0   12.0\r\n    D:\/Perl\/lib\/warnings\/register.pm       0.0    0.0    n\/a    0.0    n\/a    0.0\r\n    blib\/lib\/HelloPerlBuildWorld.pm       87.5  100.0    n\/a   83.3    0.0   89.3\r\n    Total                                  9.9    4.6    2.8   11.3  100.0    7.6\r\n    ----------------------------------- ------ ------ ------ ------ ------ ------\r\n    \r\n    \r\n    Writing HTML output to D:\/Documents and Settings\/LeuchKW\/workspace\/HelloPerlBuildWorld\/cover_db\/coverage.html ...\r\n    done.\r\n\r\n*(Someone please tell me how to configure Cover to ignore all the Perl libraries except and just report back to me on my single file that I wrote.  I could not get Cover filtering to work according to the CPAN documentation!)*\r\n\r\nNow if you refresh your top level directory, you can see a new subdirectory called &quot;cover_db&quot;.  Go into that directory and double click on the &quot;coverage.html&quot; file to open the code coverage report in your favorite web browser.  It gives you a nice color coded hypertext report where you can click on your file name and see detailed statement, branch, condition, subroutine coverage statistics for your Perl module right there in the report next to the actual source code.  You can see in this report that we did not cover the &quot;bye()&quot; routine at all and also there is a line of code that is unreachable that was not covered as we expected.\r\n\r\n[![snapshot of code coverage report][5]][5]  \n&lt;sub&gt;(source: [leucht.com](http:\/\/www.leucht.com\/images\/CodeCoverageExample.jpg))&lt;\/sub&gt;  \r\n\r\nOne more thing you can do to help automate this process in your IDE is to make some more &quot;Build.PL&quot; type files that explicitly perform some of the build targets that we did above manually from the command line.  For example, I use a &quot;BuildTest.PL&quot; file with the following content:\r\n\r\n    use strict;\r\n    use warnings;\r\n    use Module::Build;\r\n    \r\n    my $build = Module::Build-&gt;resume (\r\n      properties =&gt; {\r\n        config_dir =&gt; &#39;_build&#39;,\r\n      },\r\n    );\r\n    \r\n    $build-&gt;dispatch(&#39;build&#39;);\r\n    $build-&gt;dispatch(&#39;test&#39;);\r\n\r\n\r\nThen I set up my IDE to execute this file (via &quot;perl BuiltTest.PL&quot;) with a single mouse click and it automatically runs my unit test code from the IDE instead of me doing it manually from the command line.  Replace the &quot;dispatch(&#39;test&#39;)&quot; with &quot;dispatch(&#39;testcover&#39;)&quot; for automated code coverage execution.  Type &quot;Build help&quot; for a complete list of build targets that are available from Module::Build.  \r\n\r\n  [1]: http:\/\/www.activestate.com\/activeperl\/\r\n  [2]: http:\/\/search.cpan.org\/~ewilhelm\/Module-Build-0.31012\/lib\/Module\/Build.pm\r\n  [3]: http:\/\/search.cpan.org\/dist\/Test-Simple\/lib\/Test\/More.pm\r\n  [4]: http:\/\/search.cpan.org\/dist\/Devel-Cover\/lib\/Devel\/Cover.pm\r\n  [5]: https:\/\/i.stack.imgur.com\/bW6cH.jpg",
        "body": "<p>It took me a while and it also took me taking small snippets from a number of different sources and melting them together, but I think I have a small working example that sufficiently demonstrates to a Perl newbie the Perl build process including unit testing and code coverage analysis &amp; reporting.  (I'm using <a href=\"http:\/\/www.activestate.com\/activeperl\/\" rel=\"noreferrer\">ActiveState ActivePerl<\/a> v5.10.0 on a Windows XP Pro PC, <a href=\"http:\/\/search.cpan.org\/~ewilhelm\/Module-Build-0.31012\/lib\/Module\/Build.pm\" rel=\"noreferrer\">Module::Build<\/a>, <a href=\"http:\/\/search.cpan.org\/dist\/Test-Simple\/lib\/Test\/More.pm\" rel=\"noreferrer\">Test::More<\/a>, <a href=\"http:\/\/search.cpan.org\/dist\/Devel-Cover\/lib\/Devel\/Cover.pm\" rel=\"noreferrer\">Devel::Cover<\/a>)<\/p>\n\n<p>Start out with a directory for your Perl project and then create a \"lib\" directory and a \"t\" directory under your project directory:<\/p>\n\n<pre><code>HelloPerlBuildWorld\n        |\n        |----------&gt; lib\n        |\n        |----------&gt; t\n<\/code><\/pre>\n\n<p>In the \"lib\" directory, create a text file named \"HelloPerlBuildWorld.pm\".  This file is your Perl module that you will be building and testing.  Paste the following content into this file:<\/p>\n\n<pre><code>use strict;\nuse warnings;\npackage HelloPerlBuildWorld;\n\n$HelloPerlBuildWorld::VERSION = '0.1';\n\nsub hello {\n   return \"Hello, Perl Build World!\";\n}\n\nsub bye {\n   return \"Goodbye, cruel world!\";\n}\n\nsub repeat {\n   return 1;\n}\n\nsub argumentTest {\n    my ($booleanArg) = @_;\n\n    if (!defined($booleanArg)) {\n        return \"null\";\n    }\n    elsif ($booleanArg eq \"false\") {\n        return \"false\";\n    }\n    elsif ($booleanArg eq \"true\") {\n        return \"true\";\n    }\n    else {\n        return \"unknown\";\n    }\n\n   return \"Unreachable code: cannot be covered\";\n}\n\n1;\n<\/code><\/pre>\n\n<p>In the \"t\" directory, create a text file named \"HelloPerlBuildWorld.t\".  This file is your unit test script that will attempt to fully test your Perl module above.  Paste the following content into this file:<\/p>\n\n<pre><code>use strict;\nuse warnings;\nuse Test::More qw(no_plan);\n\n# Verify module can be included via \"use\" pragma\nBEGIN { use_ok('HelloPerlBuildWorld') };\n\n# Verify module can be included via \"require\" pragma\nrequire_ok( 'HelloPerlBuildWorld' );\n\n# Test hello() routine using a regular expression\nmy $helloCall = HelloPerlBuildWorld::hello();\nlike($helloCall, qr\/Hello, .*World\/, \"hello() RE test\");\n\n# Test hello_message() routine using a got\/expected routine\nis($helloCall, \"Hello, Perl Build World!\", \"hello() IS test\");\n\n# Do not test bye() routine\n\n# Test repeat() routine using a got\/expected routine\nfor (my $ctr=1; $ctr&lt;=10; $ctr++) {\n    my $repeatCall = HelloPerlBuildWorld::repeat();\n    is($repeatCall, 1, \"repeat() IS test\");\n}\n\n# Test argumentTest() \nmy $argumentTestCall1 = HelloPerlBuildWorld::argumentTest();\nis($argumentTestCall1, \"null\", \"argumentTest() IS null test\");\n\n# Test argumentTest(\"true\") \nmy $argumentTestCall2 = HelloPerlBuildWorld::argumentTest(\"true\");\nis($argumentTestCall2, \"true\", \"argumentTest() IS true test\");\n\n# Test argumentTest(\"false\") \nmy $argumentTestCall3 = HelloPerlBuildWorld::argumentTest(\"false\");\nis($argumentTestCall3, \"false\", \"argumentTest() IS false test\");\n\n# Test argumentTest(123) \nmy $argumentTestCall4 = HelloPerlBuildWorld::argumentTest(123);\nis($argumentTestCall4, \"unknown\", \"argumentTest() IS unknown test\");\n<\/code><\/pre>\n\n<p>Now back up in your top level project directory, create a text file named \"Build.PL\".  This file will create your build scripts that you will use later.  Paste the following content into this file:<\/p>\n\n<pre><code>use strict;\nuse warnings;\nuse Module::Build;\n\nmy $builder = Module::Build-&gt;new(\n    module_name         =&gt; 'HelloPerlBuildWorld',\n    license             =&gt; 'perl',\n    dist_abstract       =&gt; 'HelloPerlBuildWorld short description',\n    dist_author         =&gt; 'Author Name &lt;email_addy@goes.here&gt;',\n    build_requires =&gt; {\n        'Test::More' =&gt; '0.10',\n    },\n);\n\n$builder-&gt;create_build_script();\n<\/code><\/pre>\n\n<p>That's all the files you need.  Now from the command line in the top level project directory, type the following command:  <\/p>\n\n<pre><code>perl Build.PL\n<\/code><\/pre>\n\n<p>You will see something similar to the following:<\/p>\n\n<pre><code>Checking prerequisites...\nLooks good\n\nCreating new 'Build' script for 'HelloPerlBuildWorld' version '0.1'\n<\/code><\/pre>\n\n<p>Now you should be able to run your unit tests with the following command:<\/p>\n\n<pre><code>Build test\n<\/code><\/pre>\n\n<p>And see something similar to this:<\/p>\n\n<pre><code>Copying lib\\HelloPerlBuildWorld.pm -&gt; blib\\lib\\HelloPerlBuildWorld.pm\nt\\HelloPerlBuildWorld....ok\nAll tests successful.\nFiles=1, Tests=18,  0 wallclock secs ( 0.00 cusr +  0.00 csys =  0.00 CPU)\n<\/code><\/pre>\n\n<p>To run your unit tests with code coverage analysis, try this:<\/p>\n\n<pre><code>Build testcover\n<\/code><\/pre>\n\n<p>And you'll see something on the order of this:<\/p>\n\n<pre><code>t\\HelloPerlBuildWorld....ok\nAll tests successful.\nFiles=1, Tests=18, 12 wallclock secs ( 0.00 cusr +  0.00 csys =  0.00 CPU)\ncover\nReading database from D:\/Documents and Settings\/LeuchKW\/workspace\/HelloPerlBuildWorld\/cover_db\n\n\n----------------------------------- ------ ------ ------ ------ ------ ------\nFile                                  stmt   bran   cond    sub   time  total\n----------------------------------- ------ ------ ------ ------ ------ ------\nD:\/Perl\/lib\/ActivePerl\/Config.pm       0.0    0.0    0.0    0.0    n\/a    0.0\nD:\/Perl\/lib\/ActiveState\/Path.pm        0.0    0.0    0.0    0.0    n\/a    0.0\nD:\/Perl\/lib\/AutoLoader.pm              0.0    0.0    0.0    0.0    n\/a    0.0\nD:\/Perl\/lib\/B.pm                      18.6   16.7   13.3   19.2   96.4   17.6\n ...\n[SNIP]\n ...\nD:\/Perl\/lib\/re.pm                      0.0    0.0    0.0    0.0    n\/a    0.0\nD:\/Perl\/lib\/strict.pm                 84.6   50.0   50.0  100.0    0.0   73.1\nD:\/Perl\/lib\/vars.pm                   44.4   36.4    0.0  100.0    0.0   36.2\nD:\/Perl\/lib\/warnings.pm               15.3   12.1    0.0   11.1    0.0   12.0\nD:\/Perl\/lib\/warnings\/register.pm       0.0    0.0    n\/a    0.0    n\/a    0.0\nblib\/lib\/HelloPerlBuildWorld.pm       87.5  100.0    n\/a   83.3    0.0   89.3\nTotal                                  9.9    4.6    2.8   11.3  100.0    7.6\n----------------------------------- ------ ------ ------ ------ ------ ------\n\n\nWriting HTML output to D:\/Documents and Settings\/LeuchKW\/workspace\/HelloPerlBuildWorld\/cover_db\/coverage.html ...\ndone.\n<\/code><\/pre>\n\n<p><em>(Someone please tell me how to configure Cover to ignore all the Perl libraries except and just report back to me on my single file that I wrote.  I could not get Cover filtering to work according to the CPAN documentation!)<\/em><\/p>\n\n<p>Now if you refresh your top level directory, you can see a new subdirectory called \"cover_db\".  Go into that directory and double click on the \"coverage.html\" file to open the code coverage report in your favorite web browser.  It gives you a nice color coded hypertext report where you can click on your file name and see detailed statement, branch, condition, subroutine coverage statistics for your Perl module right there in the report next to the actual source code.  You can see in this report that we did not cover the \"bye()\" routine at all and also there is a line of code that is unreachable that was not covered as we expected.<\/p>\n\n<p><a href=\"https:\/\/i.stack.imgur.com\/bW6cH.jpg\" rel=\"noreferrer\"><img src=\"https:\/\/i.stack.imgur.com\/bW6cH.jpg\" alt=\"snapshot of code coverage report\"><\/a><br>\n<sub>(source: <a href=\"http:\/\/www.leucht.com\/images\/CodeCoverageExample.jpg\" rel=\"noreferrer\">leucht.com<\/a>)<\/sub>  <\/p>\n\n<p>One more thing you can do to help automate this process in your IDE is to make some more \"Build.PL\" type files that explicitly perform some of the build targets that we did above manually from the command line.  For example, I use a \"BuildTest.PL\" file with the following content:<\/p>\n\n<pre><code>use strict;\nuse warnings;\nuse Module::Build;\n\nmy $build = Module::Build-&gt;resume (\n  properties =&gt; {\n    config_dir =&gt; '_build',\n  },\n);\n\n$build-&gt;dispatch('build');\n$build-&gt;dispatch('test');\n<\/code><\/pre>\n\n<p>Then I set up my IDE to execute this file (via \"perl BuiltTest.PL\") with a single mouse click and it automatically runs my unit test code from the IDE instead of me doing it manually from the command line.  Replace the \"dispatch('test')\" with \"dispatch('testcover')\" for automated code coverage execution.  Type \"Build help\" for a complete list of build targets that are available from Module::Build.  <\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 51201,
            "reputation": 227108,
            "user_id": 152948,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/194ef8f807c34a9d7aab0e11a8674768?s=256&d=identicon&r=PG",
            "display_name": "hobbs",
            "link": "https:\/\/stackoverflow.com\/users\/152948\/hobbs"
        },
        "is_accepted": false,
        "score": 111,
        "last_activity_date": 1263254272,
        "last_edit_date": null,
        "creation_date": 1263254272,
        "answer_id": 2045818,
        "question_id": 2045644,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "1. Due to the way that strings are stored in Perl, getting the length of a string is optimized.  \r\n`if (length $str)` is a good way of checking that a string is non-empty.\r\n\r\n2. If you&#39;re in a situation where you haven&#39;t already guarded against `undef`, then the catch-all for &quot;non-empty&quot; that won&#39;t warn is `if (defined $str and length $str)`.",
        "body": "<ol>\n<li><p>Due to the way that strings are stored in Perl, getting the length of a string is optimized.<br>\n<code>if (length $str)<\/code> is a good way of checking that a string is non-empty.<\/p><\/li>\n<li><p>If you're in a situation where you haven't already guarded against <code>undef<\/code>, then the catch-all for \"non-empty\" that won't warn is <code>if (defined $str and length $str)<\/code>.<\/p><\/li>\n<\/ol>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 216196,
            "reputation": 79164,
            "user_id": 471272,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/i.stack.imgur.com\/jSlyx.gif?s=256&g=1",
            "display_name": "tchrist",
            "link": "https:\/\/stackoverflow.com\/users\/471272\/tchrist"
        },
        "is_accepted": true,
        "score": 109,
        "last_activity_date": 1296425649,
        "last_edit_date": 1296425649.0,
        "creation_date": 1296400071,
        "answer_id": 4843579,
        "question_id": 4840988,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "Pattern Recursion\r\n=====\r\n With recursive patterns, you have a form of recursive descent *matching*. \r\n\r\nThis is fine for a variety of problems, but once you want to actually do recursive descent *parsing*, you need to insert capture groups here and there, and it is awkward to recover the full parse structure in this way.  Damian Conway\u2019s [Regexp::Grammars](http:\/\/search.cpan.org\/~dconway\/Regexp-Grammars-1.012\/lib\/Regexp\/Grammars.pm) module for Perl transforms the simple pattern into an equivalent one that automatically does all that named capturing into a recursive data structure, making for far easier retrieval of the parsed structure.  I have a sample comparing these two approaches at end of this posting.\r\n\r\nRestrictions on Recursion\r\n======\r\n\r\nThe question was what kinds of grammars that recursive patterns can match. Well, they\u2019re certainly [recursive descent](http:\/\/en.wikipedia.org\/wiki\/Recursive_descent_parser) type matchers. The only thing that comes to mind is that **recursive patterns cannot handle [left recursion](http:\/\/en.wikipedia.org\/wiki\/Left_recursion).** This puts a constraint on the sorts of grammars that you can apply them to. Sometimes you can reorder your productions to eliminate left recursion.\r\n\r\nBTW, PCRE and Perl differ slightly on how you\u2019re allowed to phrase the recursion. See the sections on \u201cRECURSIVE PATTERNS\u201d and \u201cRecursion difference from Perl\u201d in the *pcrepattern* manpage. eg: Perl can handle `^(.|(.)(?1)\\2)$` where PCRE requires `^((.)(?1)\\2|.)$` instead.\r\n\r\nRecursion Demos\r\n====\r\nThe need for recursive patterns arises surprisingly frequently.  One well-visited example is when you need to match something that can nest, such as balanced parentheses, quotes, or even HTML\/XML tags.  Here\u2019s the match for balenced parens:\r\n\r\n    \\((?:[^()]*+|(?0))*\\)\r\n\r\nI find that trickier to read because of its compact nature.  This is easily curable with `\/x` mode to make whitespace no longer significant:\r\n\r\n    \\( (?: [^()] *+ | (?0) )* \\)\r\n\r\nThen again, since we\u2019re using parens for our recursion, a clearer example would be matching nested single quotes:\r\n\r\n    \u2018 (?: [^\u2018\u2019] *+ | (?0) )* \u2019\r\n\r\nAnother recursively defined thing you may wish to match would be a palindrome.  This simple pattern works in Perl:\r\n\r\n    ^((.)(?1)\\2|.?)$\r\n\r\nwhich you can test on most systems using something like this:\r\n\r\n    $ perl -nle &#39;print if \/^((.)(?1)\\2|.?)$\/i&#39; \/usr\/share\/dict\/words\r\n\r\nNote that PCRE\u2019s implementation of recursion requires the more elaborate\r\n\r\n    ^(?:((.)(?1)\\2|)|((.)(?3)\\4|.))\r\n\r\nThis is because of restrictions on how PCRE recursion works.\r\n\r\nProper Parsing\r\n=====\r\n\r\nTo me, the examples above are mostly toy matches, not all *that* interesting, really. When it becomes interesting is when you have a real grammar you\u2019re trying to parse. For example, RFC 5322 defines a mail address rather elaborately.  Here\u2019s a \u201cgrammatical\u201d pattern to match it:\r\n\r\n    $rfc5322 = qr{\r\n    \r\n       (?(DEFINE)\r\n    \r\n         (?&lt;address&gt;         (?&amp;mailbox) | (?&amp;group))\r\n         (?&lt;mailbox&gt;         (?&amp;name_addr) | (?&amp;addr_spec))\r\n         (?&lt;name_addr&gt;       (?&amp;display_name)? (?&amp;angle_addr))\r\n         (?&lt;angle_addr&gt;      (?&amp;CFWS)? &lt; (?&amp;addr_spec) &gt; (?&amp;CFWS)?)\r\n         (?&lt;group&gt;           (?&amp;display_name) : (?:(?&amp;mailbox_list) | (?&amp;CFWS))? ; (?&amp;CFWS)?)\r\n         (?&lt;display_name&gt;    (?&amp;phrase))\r\n         (?&lt;mailbox_list&gt;    (?&amp;mailbox) (?: , (?&amp;mailbox))*)\r\n    \r\n         (?&lt;addr_spec&gt;       (?&amp;local_part) \\@ (?&amp;domain))\r\n         (?&lt;local_part&gt;      (?&amp;dot_atom) | (?&amp;quoted_string))\r\n         (?&lt;domain&gt;          (?&amp;dot_atom) | (?&amp;domain_literal))\r\n         (?&lt;domain_literal&gt;  (?&amp;CFWS)? \\[ (?: (?&amp;FWS)? (?&amp;dcontent))* (?&amp;FWS)?\r\n                                       \\] (?&amp;CFWS)?)\r\n         (?&lt;dcontent&gt;        (?&amp;dtext) | (?&amp;quoted_pair))\r\n         (?&lt;dtext&gt;           (?&amp;NO_WS_CTL) | [\\x21-\\x5a\\x5e-\\x7e])\r\n    \r\n         (?&lt;atext&gt;           (?&amp;ALPHA) | (?&amp;DIGIT) | [!#\\$%&amp;&#39;*+-\/=?^_`{|}~])\r\n         (?&lt;atom&gt;            (?&amp;CFWS)? (?&amp;atext)+ (?&amp;CFWS)?)\r\n         (?&lt;dot_atom&gt;        (?&amp;CFWS)? (?&amp;dot_atom_text) (?&amp;CFWS)?)\r\n         (?&lt;dot_atom_text&gt;   (?&amp;atext)+ (?: \\. (?&amp;atext)+)*)\r\n    \r\n         (?&lt;text&gt;            [\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])\r\n         (?&lt;quoted_pair&gt;     \\\\ (?&amp;text))\r\n    \r\n         (?&lt;qtext&gt;           (?&amp;NO_WS_CTL) | [\\x21\\x23-\\x5b\\x5d-\\x7e])\r\n         (?&lt;qcontent&gt;        (?&amp;qtext) | (?&amp;quoted_pair))\r\n         (?&lt;quoted_string&gt;   (?&amp;CFWS)? (?&amp;DQUOTE) (?:(?&amp;FWS)? (?&amp;qcontent))*\r\n                              (?&amp;FWS)? (?&amp;DQUOTE) (?&amp;CFWS)?)\r\n    \r\n         (?&lt;word&gt;            (?&amp;atom) | (?&amp;quoted_string))\r\n         (?&lt;phrase&gt;          (?&amp;word)+)\r\n    \r\n         # Folding white space\r\n         (?&lt;FWS&gt;             (?: (?&amp;WSP)* (?&amp;CRLF))? (?&amp;WSP)+)\r\n         (?&lt;ctext&gt;           (?&amp;NO_WS_CTL) | [\\x21-\\x27\\x2a-\\x5b\\x5d-\\x7e])\r\n         (?&lt;ccontent&gt;        (?&amp;ctext) | (?&amp;quoted_pair) | (?&amp;comment))\r\n         (?&lt;comment&gt;         \\( (?: (?&amp;FWS)? (?&amp;ccontent))* (?&amp;FWS)? \\) )\r\n         (?&lt;CFWS&gt;            (?: (?&amp;FWS)? (?&amp;comment))*\r\n                             (?: (?:(?&amp;FWS)? (?&amp;comment)) | (?&amp;FWS)))\r\n    \r\n         # No whitespace control\r\n         (?&lt;NO_WS_CTL&gt;       [\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f])\r\n    \r\n         (?&lt;ALPHA&gt;           [A-Za-z])\r\n         (?&lt;DIGIT&gt;           [0-9])\r\n         (?&lt;CRLF&gt;            \\x0d \\x0a)\r\n         (?&lt;DQUOTE&gt;          &quot;)\r\n         (?&lt;WSP&gt;             [\\x20\\x09])\r\n       )\r\n    \r\n       (?&amp;address)\r\n    \r\n    }x;\r\n\r\nAs you see, that\u2019s very BNF-like.  The problem is it is just a match, not a capture. And you really don\u2019t want to just surround the whole thing with capturing parens because that doesn\u2019t tell you which production matched which part.  Using the previously mentioned Regexp::Grammars module, we can.  \r\n\r\n    #!\/usr\/bin\/env perl\r\n    \r\n    use strict;\r\n    use warnings;\r\n    use 5.010;\r\n    use Data::Dumper &quot;Dumper&quot;;\r\n    \r\n    my $rfc5322 = do {\r\n        use Regexp::Grammars;    # ...the magic is lexically scoped\r\n        qr{\r\n    \r\n        # Keep the big stick handy, just in case...\r\n        # &lt;debug:on&gt;\r\n    \r\n        # Match this...\r\n        &lt;address&gt;\r\n    \r\n        # As defined by these...\r\n        &lt;token: address&gt;         &lt;mailbox&gt; | &lt;group&gt;\r\n        &lt;token: mailbox&gt;         &lt;name_addr&gt; | &lt;addr_spec&gt;\r\n        &lt;token: name_addr&gt;       &lt;display_name&gt;? &lt;angle_addr&gt;\r\n        &lt;token: angle_addr&gt;      &lt;CFWS&gt;? \\&lt; &lt;addr_spec&gt; \\&gt; &lt;CFWS&gt;?\r\n        &lt;token: group&gt;           &lt;display_name&gt; : (?:&lt;mailbox_list&gt; | &lt;CFWS&gt;)? ; &lt;CFWS&gt;?\r\n        &lt;token: display_name&gt;    &lt;phrase&gt;\r\n        &lt;token: mailbox_list&gt;    &lt;[mailbox]&gt; ** (,)\r\n    \r\n        &lt;token: addr_spec&gt;       &lt;local_part&gt; \\@ &lt;domain&gt;\r\n        &lt;token: local_part&gt;      &lt;dot_atom&gt; | &lt;quoted_string&gt;\r\n        &lt;token: domain&gt;          &lt;dot_atom&gt; | &lt;domain_literal&gt;\r\n        &lt;token: domain_literal&gt;  &lt;CFWS&gt;? \\[ (?: &lt;FWS&gt;? &lt;[dcontent]&gt;)* &lt;FWS&gt;?\r\n    \r\n        &lt;token: dcontent&gt;        &lt;dtext&gt; | &lt;quoted_pair&gt;\r\n        &lt;token: dtext&gt;           &lt;.NO_WS_CTL&gt; | [\\x21-\\x5a\\x5e-\\x7e]\r\n    \r\n        &lt;token: atext&gt;           &lt;.ALPHA&gt; | &lt;.DIGIT&gt; | [!#\\$%&amp;&#39;*+-\/=?^_`{|}~]\r\n        &lt;token: atom&gt;            &lt;.CFWS&gt;? &lt;.atext&gt;+ &lt;.CFWS&gt;?\r\n        &lt;token: dot_atom&gt;        &lt;.CFWS&gt;? &lt;.dot_atom_text&gt; &lt;.CFWS&gt;?\r\n        &lt;token: dot_atom_text&gt;   &lt;.atext&gt;+ (?: \\. &lt;.atext&gt;+)*\r\n    \r\n        &lt;token: text&gt;            [\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f]\r\n        &lt;token: quoted_pair&gt;     \\\\ &lt;.text&gt;\r\n    \r\n        &lt;token: qtext&gt;           &lt;.NO_WS_CTL&gt; | [\\x21\\x23-\\x5b\\x5d-\\x7e]\r\n        &lt;token: qcontent&gt;        &lt;.qtext&gt; | &lt;.quoted_pair&gt;\r\n        &lt;token: quoted_string&gt;   &lt;.CFWS&gt;? &lt;.DQUOTE&gt; (?:&lt;.FWS&gt;? &lt;.qcontent&gt;)*\r\n                                 &lt;.FWS&gt;? &lt;.DQUOTE&gt; &lt;.CFWS&gt;?\r\n    \r\n        &lt;token: word&gt;            &lt;.atom&gt; | &lt;.quoted_string&gt;\r\n        &lt;token: phrase&gt;          &lt;.word&gt;+\r\n    \r\n        # Folding white space\r\n        &lt;token: FWS&gt;             (?: &lt;.WSP&gt;* &lt;.CRLF&gt;)? &lt;.WSP&gt;+\r\n        &lt;token: ctext&gt;           &lt;.NO_WS_CTL&gt; | [\\x21-\\x27\\x2a-\\x5b\\x5d-\\x7e]\r\n        &lt;token: ccontent&gt;        &lt;.ctext&gt; | &lt;.quoted_pair&gt; | &lt;.comment&gt;\r\n        &lt;token: comment&gt;         \\( (?: &lt;.FWS&gt;? &lt;.ccontent&gt;)* &lt;.FWS&gt;? \\)\r\n        &lt;token: CFWS&gt;            (?: &lt;.FWS&gt;? &lt;.comment&gt;)*\r\n                                 (?: (?:&lt;.FWS&gt;? &lt;.comment&gt;) | &lt;.FWS&gt;)\r\n    \r\n        # No whitespace control\r\n        &lt;token: NO_WS_CTL&gt;       [\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]\r\n        &lt;token: ALPHA&gt;           [A-Za-z]\r\n        &lt;token: DIGIT&gt;           [0-9]\r\n        &lt;token: CRLF&gt;            \\x0d \\x0a\r\n        &lt;token: DQUOTE&gt;          &quot;\r\n        &lt;token: WSP&gt;             [\\x20\\x09]\r\n        }x;\r\n    };\r\n\r\n    while (my $input = &lt;&gt;) {\r\n        if ($input =~ $rfc5322) {\r\n            say Dumper \\%\/;       # ...the parse tree of any successful match\r\n                                  # appears in this punctuation variable\r\n        }\r\n    }\r\n\r\nAs you see, by using a very slightly different notation in the pattern, you now get something which stores the entire parse tree away for you in the `%\/` variable, with everything neatly labelled. The result of the transformation is still a pattern, as you can see by the `=~` operator. It\u2019s just a bit magical.",
        "body": "<h1>Pattern Recursion<\/h1>\n\n<p>With recursive patterns, you have a form of recursive descent <em>matching<\/em>. <\/p>\n\n<p>This is fine for a variety of problems, but once you want to actually do recursive descent <em>parsing<\/em>, you need to insert capture groups here and there, and it is awkward to recover the full parse structure in this way.  Damian Conway\u2019s <a href=\"http:\/\/search.cpan.org\/~dconway\/Regexp-Grammars-1.012\/lib\/Regexp\/Grammars.pm\" rel=\"noreferrer\">Regexp::Grammars<\/a> module for Perl transforms the simple pattern into an equivalent one that automatically does all that named capturing into a recursive data structure, making for far easier retrieval of the parsed structure.  I have a sample comparing these two approaches at end of this posting.<\/p>\n\n<h1>Restrictions on Recursion<\/h1>\n\n<p>The question was what kinds of grammars that recursive patterns can match. Well, they\u2019re certainly <a href=\"http:\/\/en.wikipedia.org\/wiki\/Recursive_descent_parser\" rel=\"noreferrer\">recursive descent<\/a> type matchers. The only thing that comes to mind is that <strong>recursive patterns cannot handle <a href=\"http:\/\/en.wikipedia.org\/wiki\/Left_recursion\" rel=\"noreferrer\">left recursion<\/a>.<\/strong> This puts a constraint on the sorts of grammars that you can apply them to. Sometimes you can reorder your productions to eliminate left recursion.<\/p>\n\n<p>BTW, PCRE and Perl differ slightly on how you\u2019re allowed to phrase the recursion. See the sections on \u201cRECURSIVE PATTERNS\u201d and \u201cRecursion difference from Perl\u201d in the <em>pcrepattern<\/em> manpage. eg: Perl can handle <code>^(.|(.)(?1)\\2)$<\/code> where PCRE requires <code>^((.)(?1)\\2|.)$<\/code> instead.<\/p>\n\n<h1>Recursion Demos<\/h1>\n\n<p>The need for recursive patterns arises surprisingly frequently.  One well-visited example is when you need to match something that can nest, such as balanced parentheses, quotes, or even HTML\/XML tags.  Here\u2019s the match for balenced parens:<\/p>\n\n<pre><code>\\((?:[^()]*+|(?0))*\\)\n<\/code><\/pre>\n\n<p>I find that trickier to read because of its compact nature.  This is easily curable with <code>\/x<\/code> mode to make whitespace no longer significant:<\/p>\n\n<pre><code>\\( (?: [^()] *+ | (?0) )* \\)\n<\/code><\/pre>\n\n<p>Then again, since we\u2019re using parens for our recursion, a clearer example would be matching nested single quotes:<\/p>\n\n<pre><code>\u2018 (?: [^\u2018\u2019] *+ | (?0) )* \u2019\n<\/code><\/pre>\n\n<p>Another recursively defined thing you may wish to match would be a palindrome.  This simple pattern works in Perl:<\/p>\n\n<pre><code>^((.)(?1)\\2|.?)$\n<\/code><\/pre>\n\n<p>which you can test on most systems using something like this:<\/p>\n\n<pre><code>$ perl -nle 'print if \/^((.)(?1)\\2|.?)$\/i' \/usr\/share\/dict\/words\n<\/code><\/pre>\n\n<p>Note that PCRE\u2019s implementation of recursion requires the more elaborate<\/p>\n\n<pre><code>^(?:((.)(?1)\\2|)|((.)(?3)\\4|.))\n<\/code><\/pre>\n\n<p>This is because of restrictions on how PCRE recursion works.<\/p>\n\n<h1>Proper Parsing<\/h1>\n\n<p>To me, the examples above are mostly toy matches, not all <em>that<\/em> interesting, really. When it becomes interesting is when you have a real grammar you\u2019re trying to parse. For example, RFC 5322 defines a mail address rather elaborately.  Here\u2019s a \u201cgrammatical\u201d pattern to match it:<\/p>\n\n<pre><code>$rfc5322 = qr{\n\n   (?(DEFINE)\n\n     (?&lt;address&gt;         (?&amp;mailbox) | (?&amp;group))\n     (?&lt;mailbox&gt;         (?&amp;name_addr) | (?&amp;addr_spec))\n     (?&lt;name_addr&gt;       (?&amp;display_name)? (?&amp;angle_addr))\n     (?&lt;angle_addr&gt;      (?&amp;CFWS)? &lt; (?&amp;addr_spec) &gt; (?&amp;CFWS)?)\n     (?&lt;group&gt;           (?&amp;display_name) : (?:(?&amp;mailbox_list) | (?&amp;CFWS))? ; (?&amp;CFWS)?)\n     (?&lt;display_name&gt;    (?&amp;phrase))\n     (?&lt;mailbox_list&gt;    (?&amp;mailbox) (?: , (?&amp;mailbox))*)\n\n     (?&lt;addr_spec&gt;       (?&amp;local_part) \\@ (?&amp;domain))\n     (?&lt;local_part&gt;      (?&amp;dot_atom) | (?&amp;quoted_string))\n     (?&lt;domain&gt;          (?&amp;dot_atom) | (?&amp;domain_literal))\n     (?&lt;domain_literal&gt;  (?&amp;CFWS)? \\[ (?: (?&amp;FWS)? (?&amp;dcontent))* (?&amp;FWS)?\n                                   \\] (?&amp;CFWS)?)\n     (?&lt;dcontent&gt;        (?&amp;dtext) | (?&amp;quoted_pair))\n     (?&lt;dtext&gt;           (?&amp;NO_WS_CTL) | [\\x21-\\x5a\\x5e-\\x7e])\n\n     (?&lt;atext&gt;           (?&amp;ALPHA) | (?&amp;DIGIT) | [!#\\$%&amp;'*+-\/=?^_`{|}~])\n     (?&lt;atom&gt;            (?&amp;CFWS)? (?&amp;atext)+ (?&amp;CFWS)?)\n     (?&lt;dot_atom&gt;        (?&amp;CFWS)? (?&amp;dot_atom_text) (?&amp;CFWS)?)\n     (?&lt;dot_atom_text&gt;   (?&amp;atext)+ (?: \\. (?&amp;atext)+)*)\n\n     (?&lt;text&gt;            [\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])\n     (?&lt;quoted_pair&gt;     \\\\ (?&amp;text))\n\n     (?&lt;qtext&gt;           (?&amp;NO_WS_CTL) | [\\x21\\x23-\\x5b\\x5d-\\x7e])\n     (?&lt;qcontent&gt;        (?&amp;qtext) | (?&amp;quoted_pair))\n     (?&lt;quoted_string&gt;   (?&amp;CFWS)? (?&amp;DQUOTE) (?:(?&amp;FWS)? (?&amp;qcontent))*\n                          (?&amp;FWS)? (?&amp;DQUOTE) (?&amp;CFWS)?)\n\n     (?&lt;word&gt;            (?&amp;atom) | (?&amp;quoted_string))\n     (?&lt;phrase&gt;          (?&amp;word)+)\n\n     # Folding white space\n     (?&lt;FWS&gt;             (?: (?&amp;WSP)* (?&amp;CRLF))? (?&amp;WSP)+)\n     (?&lt;ctext&gt;           (?&amp;NO_WS_CTL) | [\\x21-\\x27\\x2a-\\x5b\\x5d-\\x7e])\n     (?&lt;ccontent&gt;        (?&amp;ctext) | (?&amp;quoted_pair) | (?&amp;comment))\n     (?&lt;comment&gt;         \\( (?: (?&amp;FWS)? (?&amp;ccontent))* (?&amp;FWS)? \\) )\n     (?&lt;CFWS&gt;            (?: (?&amp;FWS)? (?&amp;comment))*\n                         (?: (?:(?&amp;FWS)? (?&amp;comment)) | (?&amp;FWS)))\n\n     # No whitespace control\n     (?&lt;NO_WS_CTL&gt;       [\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f])\n\n     (?&lt;ALPHA&gt;           [A-Za-z])\n     (?&lt;DIGIT&gt;           [0-9])\n     (?&lt;CRLF&gt;            \\x0d \\x0a)\n     (?&lt;DQUOTE&gt;          \")\n     (?&lt;WSP&gt;             [\\x20\\x09])\n   )\n\n   (?&amp;address)\n\n}x;\n<\/code><\/pre>\n\n<p>As you see, that\u2019s very BNF-like.  The problem is it is just a match, not a capture. And you really don\u2019t want to just surround the whole thing with capturing parens because that doesn\u2019t tell you which production matched which part.  Using the previously mentioned Regexp::Grammars module, we can.  <\/p>\n\n<pre><code>#!\/usr\/bin\/env perl\n\nuse strict;\nuse warnings;\nuse 5.010;\nuse Data::Dumper \"Dumper\";\n\nmy $rfc5322 = do {\n    use Regexp::Grammars;    # ...the magic is lexically scoped\n    qr{\n\n    # Keep the big stick handy, just in case...\n    # &lt;debug:on&gt;\n\n    # Match this...\n    &lt;address&gt;\n\n    # As defined by these...\n    &lt;token: address&gt;         &lt;mailbox&gt; | &lt;group&gt;\n    &lt;token: mailbox&gt;         &lt;name_addr&gt; | &lt;addr_spec&gt;\n    &lt;token: name_addr&gt;       &lt;display_name&gt;? &lt;angle_addr&gt;\n    &lt;token: angle_addr&gt;      &lt;CFWS&gt;? \\&lt; &lt;addr_spec&gt; \\&gt; &lt;CFWS&gt;?\n    &lt;token: group&gt;           &lt;display_name&gt; : (?:&lt;mailbox_list&gt; | &lt;CFWS&gt;)? ; &lt;CFWS&gt;?\n    &lt;token: display_name&gt;    &lt;phrase&gt;\n    &lt;token: mailbox_list&gt;    &lt;[mailbox]&gt; ** (,)\n\n    &lt;token: addr_spec&gt;       &lt;local_part&gt; \\@ &lt;domain&gt;\n    &lt;token: local_part&gt;      &lt;dot_atom&gt; | &lt;quoted_string&gt;\n    &lt;token: domain&gt;          &lt;dot_atom&gt; | &lt;domain_literal&gt;\n    &lt;token: domain_literal&gt;  &lt;CFWS&gt;? \\[ (?: &lt;FWS&gt;? &lt;[dcontent]&gt;)* &lt;FWS&gt;?\n\n    &lt;token: dcontent&gt;        &lt;dtext&gt; | &lt;quoted_pair&gt;\n    &lt;token: dtext&gt;           &lt;.NO_WS_CTL&gt; | [\\x21-\\x5a\\x5e-\\x7e]\n\n    &lt;token: atext&gt;           &lt;.ALPHA&gt; | &lt;.DIGIT&gt; | [!#\\$%&amp;'*+-\/=?^_`{|}~]\n    &lt;token: atom&gt;            &lt;.CFWS&gt;? &lt;.atext&gt;+ &lt;.CFWS&gt;?\n    &lt;token: dot_atom&gt;        &lt;.CFWS&gt;? &lt;.dot_atom_text&gt; &lt;.CFWS&gt;?\n    &lt;token: dot_atom_text&gt;   &lt;.atext&gt;+ (?: \\. &lt;.atext&gt;+)*\n\n    &lt;token: text&gt;            [\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f]\n    &lt;token: quoted_pair&gt;     \\\\ &lt;.text&gt;\n\n    &lt;token: qtext&gt;           &lt;.NO_WS_CTL&gt; | [\\x21\\x23-\\x5b\\x5d-\\x7e]\n    &lt;token: qcontent&gt;        &lt;.qtext&gt; | &lt;.quoted_pair&gt;\n    &lt;token: quoted_string&gt;   &lt;.CFWS&gt;? &lt;.DQUOTE&gt; (?:&lt;.FWS&gt;? &lt;.qcontent&gt;)*\n                             &lt;.FWS&gt;? &lt;.DQUOTE&gt; &lt;.CFWS&gt;?\n\n    &lt;token: word&gt;            &lt;.atom&gt; | &lt;.quoted_string&gt;\n    &lt;token: phrase&gt;          &lt;.word&gt;+\n\n    # Folding white space\n    &lt;token: FWS&gt;             (?: &lt;.WSP&gt;* &lt;.CRLF&gt;)? &lt;.WSP&gt;+\n    &lt;token: ctext&gt;           &lt;.NO_WS_CTL&gt; | [\\x21-\\x27\\x2a-\\x5b\\x5d-\\x7e]\n    &lt;token: ccontent&gt;        &lt;.ctext&gt; | &lt;.quoted_pair&gt; | &lt;.comment&gt;\n    &lt;token: comment&gt;         \\( (?: &lt;.FWS&gt;? &lt;.ccontent&gt;)* &lt;.FWS&gt;? \\)\n    &lt;token: CFWS&gt;            (?: &lt;.FWS&gt;? &lt;.comment&gt;)*\n                             (?: (?:&lt;.FWS&gt;? &lt;.comment&gt;) | &lt;.FWS&gt;)\n\n    # No whitespace control\n    &lt;token: NO_WS_CTL&gt;       [\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]\n    &lt;token: ALPHA&gt;           [A-Za-z]\n    &lt;token: DIGIT&gt;           [0-9]\n    &lt;token: CRLF&gt;            \\x0d \\x0a\n    &lt;token: DQUOTE&gt;          \"\n    &lt;token: WSP&gt;             [\\x20\\x09]\n    }x;\n};\n\nwhile (my $input = &lt;&gt;) {\n    if ($input =~ $rfc5322) {\n        say Dumper \\%\/;       # ...the parse tree of any successful match\n                              # appears in this punctuation variable\n    }\n}\n<\/code><\/pre>\n\n<p>As you see, by using a very slightly different notation in the pattern, you now get something which stores the entire parse tree away for you in the <code>%\/<\/code> variable, with everything neatly labelled. The result of the transformation is still a pattern, as you can see by the <code>=~<\/code> operator. It\u2019s just a bit magical.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 8799,
            "reputation": 7914,
            "user_id": 15996,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/3a5a1d5793577861297924e0c3a53266?s=256&d=identicon&r=PG",
            "display_name": "MattJ",
            "link": "https:\/\/stackoverflow.com\/users\/15996\/mattj"
        },
        "is_accepted": false,
        "score": 108,
        "last_activity_date": 1458083209,
        "last_edit_date": 1458083209.0,
        "creation_date": 1232674917,
        "answer_id": 471560,
        "question_id": 471183,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "This appears to be what you want, based on the example you gave:\r\n\r\n    sed -i &#39;s\/foo\/bar\/g&#39; *\r\n\r\nIt is not recursive (it will not descend into subdirectories). For a nice solution replacing in selected files throughout a tree I would use find:\r\n\r\n    find . -name &#39;*.html&#39; -print -exec sed -i.bak &#39;s\/foo\/bar\/g&#39; {} \\;\r\n\r\nThe `*.html` is the expression that files must match, the `.bak` after the `-i` makes a copy of the original file, with a .bak extension (it can be any extension you like) and the `g` at the end of the sed expression tells sed to replace multiple copies on one line (rather than only the first one). The `-print` to find is a convenience to show which files were being matched. All this depends on the exact versions of these tools on your system.",
        "body": "<p>This appears to be what you want, based on the example you gave:<\/p>\n\n<pre><code>sed -i 's\/foo\/bar\/g' *\n<\/code><\/pre>\n\n<p>It is not recursive (it will not descend into subdirectories). For a nice solution replacing in selected files throughout a tree I would use find:<\/p>\n\n<pre><code>find . -name '*.html' -print -exec sed -i.bak 's\/foo\/bar\/g' {} \\;\n<\/code><\/pre>\n\n<p>The <code>*.html<\/code> is the expression that files must match, the <code>.bak<\/code> after the <code>-i<\/code> makes a copy of the original file, with a .bak extension (it can be any extension you like) and the <code>g<\/code> at the end of the sed expression tells sed to replace multiple copies on one line (rather than only the first one). The <code>-print<\/code> to find is a convenience to show which files were being matched. All this depends on the exact versions of these tools on your system.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 153821,
            "reputation": 2743,
            "user_id": 369350,
            "user_type": "registered",
            "accept_rate": 78,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/b09238b791bd864abe522693f2f6ec90?s=256&d=identicon&r=PG",
            "display_name": "fire.eagle",
            "link": "https:\/\/stackoverflow.com\/users\/369350\/fire-eagle"
        },
        "is_accepted": true,
        "score": 107,
        "last_activity_date": 1588261051,
        "last_edit_date": 1588261051.0,
        "creation_date": 1278565894,
        "answer_id": 3200810,
        "question_id": 3200801,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "[How to run a shell script from a Perl program][1]\r\n\r\n&gt; **1\\. Using system `system($command, @arguments);`**\r\n&gt; \r\n&gt; For example: \r\n&gt;\r\n&gt;     system(&quot;sh&quot;, &quot;script.sh&quot;, &quot;--help&quot; );\r\n&gt;\r\n&gt;     system(&quot;sh script.sh --help&quot;);\r\n&gt;\r\n&gt; System will execute the $command with\r\n&gt; @arguments and return to your script when finished. You may check $!\r\n&gt; for certain errors passed to the OS by the external application. Read\r\n&gt; the documentation for system for the nuances of how various\r\n&gt; invocations are slightly different.\r\n&gt; \r\n&gt; **2\\. Using `exec`** \r\n&gt;\r\n&gt; This is very similar to the use of [system][2], but it will\r\n&gt; terminate your script upon execution. Again, read the documentation\r\n&gt; for [exec][4] for more.\r\n&gt; \r\n&gt; **3\\. Using backticks or `qx\/\/`** \r\n\r\n&gt;     my $output = `script.sh --option`;\r\n\r\n&gt;     my $output = qx\/script.sh --option\/;\r\n\r\n&gt; The backtick operator and it&#39;s equivalent `qx\/\/`, excute the command and options inside the operator and return that commands output to STDOUT when it finishes. \r\n\r\n&gt; There are also ways to run external applications through creative use of [open][3], but this is advanced use; read the documentation for more.\r\n\r\n\r\n  [1]: http:\/\/www.perlmonks.org\/?node_id=78523\r\n  [2]: http:\/\/perldoc.perl.org\/functions\/system.html\r\n  [3]: http:\/\/perldoc.perl.org\/functions\/open.html\r\n  [4]: http:\/\/perldoc.perl.org\/functions\/exec.html",
        "body": "<p><a href=\"http:\/\/www.perlmonks.org\/?node_id=78523\" rel=\"noreferrer\">How to run a shell script from a Perl program<\/a><\/p>\n\n<blockquote>\n  <p><strong>1. Using system <code>system($command, @arguments);<\/code><\/strong><\/p>\n  \n  <p>For example: <\/p>\n\n<pre><code>system(\"sh\", \"script.sh\", \"--help\" );\n\nsystem(\"sh script.sh --help\");\n<\/code><\/pre>\n  \n  <p>System will execute the $command with\n  @arguments and return to your script when finished. You may check $!\n  for certain errors passed to the OS by the external application. Read\n  the documentation for system for the nuances of how various\n  invocations are slightly different.<\/p>\n  \n  <p><strong>2. Using <code>exec<\/code><\/strong> <\/p>\n  \n  <p>This is very similar to the use of <a href=\"http:\/\/perldoc.perl.org\/functions\/system.html\" rel=\"noreferrer\">system<\/a>, but it will\n  terminate your script upon execution. Again, read the documentation\n  for <a href=\"http:\/\/perldoc.perl.org\/functions\/exec.html\" rel=\"noreferrer\">exec<\/a> for more.<\/p>\n  \n  <p><strong>3. Using backticks or <code>qx\/\/<\/code><\/strong> <\/p>\n\n<pre><code>my $output = `script.sh --option`;\n\nmy $output = qx\/script.sh --option\/;\n<\/code><\/pre>\n  \n  <p>The backtick operator and it's equivalent <code>qx\/\/<\/code>, excute the command and options inside the operator and return that commands output to STDOUT when it finishes. <\/p>\n  \n  <p>There are also ways to run external applications through creative use of <a href=\"http:\/\/perldoc.perl.org\/functions\/open.html\" rel=\"noreferrer\">open<\/a>, but this is advanced use; read the documentation for more.<\/p>\n<\/blockquote>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 619679,
            "reputation": 1077,
            "user_id": 350032,
            "user_type": "unregistered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/f3184dfe201ce8dc48b9ac3587cc8774?s=256&d=identicon&r=PG",
            "display_name": "Charlie",
            "link": "https:\/\/stackoverflow.com\/users\/350032\/charlie"
        },
        "is_accepted": false,
        "score": 106,
        "last_activity_date": 1682533519,
        "last_edit_date": 1682533519.0,
        "creation_date": 1274799119,
        "answer_id": 2905791,
        "question_id": 366980,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "After mastering a few dozen languages, one gets tired of absolute recommendations against tools, like in [this answer](https:\/\/stackoverflow.com\/a\/367082\/2057969) regarding `sed` and `awk`.\r\n\r\nSed is the best tool for extremely simple command-line pipelines.  In the hands of a sed master, it&#39;s suitable for one-offs of arbitrary complexity, but it should not be used in production code except in very simple substitution pipelines.  Stuff like &#39;s\/this\/that\/.&#39;\r\n\r\nGawk (the GNU awk) is by far the best choice for complex data reformatting when there is only a single input source and a single output (or, multiple outputs sequentially written).  Since a great deal of real-world work conforms to this description, and a good programmer can learn gawk in two hours, it is the best choice.  On this planet, simpler and faster is better!\r\n\r\nPerl or Python are far better than any version of awk or sed when you have very complex input\/output scenarios.  The more complex the problem is, the better off you are using python, from a maintenance and readability standpoint.  Note, however, that a good programmer can write readable code in any language, and a bad programmer can write unmaintainable crap in any useful language, so the choice of perl or python can safely be left to the preferences of the programmer if said programmer is skilled and clever.\r\n",
        "body": "<p>After mastering a few dozen languages, one gets tired of absolute recommendations against tools, like in <a href=\"https:\/\/stackoverflow.com\/a\/367082\/2057969\">this answer<\/a> regarding <code>sed<\/code> and <code>awk<\/code>.<\/p>\n<p>Sed is the best tool for extremely simple command-line pipelines.  In the hands of a sed master, it's suitable for one-offs of arbitrary complexity, but it should not be used in production code except in very simple substitution pipelines.  Stuff like 's\/this\/that\/.'<\/p>\n<p>Gawk (the GNU awk) is by far the best choice for complex data reformatting when there is only a single input source and a single output (or, multiple outputs sequentially written).  Since a great deal of real-world work conforms to this description, and a good programmer can learn gawk in two hours, it is the best choice.  On this planet, simpler and faster is better!<\/p>\n<p>Perl or Python are far better than any version of awk or sed when you have very complex input\/output scenarios.  The more complex the problem is, the better off you are using python, from a maintenance and readability standpoint.  Note, however, that a good programmer can write readable code in any language, and a bad programmer can write unmaintainable crap in any useful language, so the choice of perl or python can safely be left to the preferences of the programmer if said programmer is skilled and clever.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 12850,
            "reputation": 56847,
            "user_id": 25507,
            "user_type": "registered",
            "accept_rate": 84,
            "profile_image": "https:\/\/i.stack.imgur.com\/DqZPI.png?s=256&g=1",
            "display_name": "Josh Kelley",
            "link": "https:\/\/stackoverflow.com\/users\/25507\/josh-kelley"
        },
        "is_accepted": true,
        "score": 103,
        "last_activity_date": 1653659616,
        "last_edit_date": 1653659616.0,
        "creation_date": 1274726870,
        "answer_id": 2899405,
        "question_id": 2899367,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Raku (Perl 6) has the [`say`](https:\/\/docs.raku.org\/language\/5to6-perlfunc#index-entry-say_-_perlfunc) function that automatically appends `\\n`.\r\n\r\nYou can also use `say` in Perl 5.10 or 5.12 if you add\r\n\r\n    use feature qw(say);\r\n\r\nto the beginning of your program.  Or you can use [Modern::Perl](http:\/\/search.cpan.org\/~chromatic\/Modern-Perl-1.03\/lib\/Modern\/Perl.pm) to get this and other features.\r\n\r\nSee [perldoc feature](http:\/\/perldoc.perl.org\/feature.html#The-%27say%27-feature) for more details.",
        "body": "<p>Raku (Perl 6) has the <a href=\"https:\/\/docs.raku.org\/language\/5to6-perlfunc#index-entry-say_-_perlfunc\" rel=\"nofollow noreferrer\"><code>say<\/code><\/a> function that automatically appends <code>\\n<\/code>.<\/p>\n<p>You can also use <code>say<\/code> in Perl 5.10 or 5.12 if you add<\/p>\n<pre><code>use feature qw(say);\n<\/code><\/pre>\n<p>to the beginning of your program.  Or you can use <a href=\"http:\/\/search.cpan.org\/%7Echromatic\/Modern-Perl-1.03\/lib\/Modern\/Perl.pm\" rel=\"nofollow noreferrer\">Modern::Perl<\/a> to get this and other features.<\/p>\n<p>See <a href=\"http:\/\/perldoc.perl.org\/feature.html#The-%27say%27-feature\" rel=\"nofollow noreferrer\">perldoc feature<\/a> for more details.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 29074,
            "reputation": 64398,
            "user_id": 78259,
            "user_type": "registered",
            "accept_rate": 53,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/844c572938eaad1e44eb084fb39416f9?s=256&d=identicon&r=PG",
            "display_name": "Chas. Owens",
            "link": "https:\/\/stackoverflow.com\/users\/78259\/chas-owens"
        },
        "is_accepted": false,
        "score": 102,
        "last_activity_date": 1443749195,
        "last_edit_date": 1443749195.0,
        "creation_date": 1244165329,
        "answer_id": 953885,
        "question_id": 953707,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "I would do it like this:\r\n\r\n    my $file = &quot;index.html&quot;;\r\n    my $document = do {\r\n        local $\/ = undef;\r\n        open my $fh, &quot;&lt;&quot;, $file\r\n            or die &quot;could not open $file: $!&quot;;\r\n        &lt;$fh&gt;;\r\n    };\r\n\r\nNote the use of the three-argument version of open. It is much safer than the old two- (or one-) argument versions. Also note the use of a lexical filehandle. Lexical filehandles are nicer than the old bareword variants, for many reasons. We are taking advantage of one of them here: they close when they go out of scope.\r\n",
        "body": "<p>I would do it like this:<\/p>\n\n<pre><code>my $file = \"index.html\";\nmy $document = do {\n    local $\/ = undef;\n    open my $fh, \"&lt;\", $file\n        or die \"could not open $file: $!\";\n    &lt;$fh&gt;;\n};\n<\/code><\/pre>\n\n<p>Note the use of the three-argument version of open. It is much safer than the old two- (or one-) argument versions. Also note the use of a lexical filehandle. Lexical filehandles are nicer than the old bareword variants, for many reasons. We are taking advantage of one of them here: they close when they go out of scope.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 109965,
            "reputation": 2132,
            "user_id": 291154,
            "user_type": "registered",
            "accept_rate": 50,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/fdb260a0aa7960ec326a9661d01f973f?s=256&d=identicon&r=PG",
            "display_name": "Robert Menteer",
            "link": "https:\/\/stackoverflow.com\/users\/291154\/robert-menteer"
        },
        "is_accepted": true,
        "score": 101,
        "last_activity_date": 1335974034,
        "last_edit_date": 1335974034.0,
        "creation_date": 1268297093,
        "answer_id": 2423550,
        "question_id": 525247,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": " You can daemonize any executable in Unix by using nohup and the &amp; operator:\r\n\r\n    nohup yourScript.sh script args&amp;\r\n\r\nThe nohup command allows you to shut down your shell session without it killing your script, while the &amp; places your script in the background so you get a shell prompt to continue your session. The only minor problem with this is standard out and standard error both get sent to .\/nohup.out, so if you start several scripts in this manor their output will be intertwined. A better command would be:\r\n\r\n    nohup yourScript.sh script args &gt;script.out 2&gt;script.error&amp;\r\n\r\nThis will send standard out to the file of your choice and standard error to a different file of your choice. If you want to use just one file for both standard out and standard error you can us this:\r\n\r\n    nohup yourScript.sh script args &gt;script.out 2&gt;&amp;1 &amp;\r\n\r\nThe 2&gt;&amp;1 tells the shell to redirect standard error (file descriptor 2) to the same file as standard out (file descriptor 1).\r\n\r\nTo run a command only once and restart it if it dies you can use this script:\r\n\r\n    #!\/bin\/bash\r\n    \r\n    if [[ $# &lt; 1 ]]; then\r\n        echo &quot;Name of pid file not given.&quot;\r\n        exit\r\n    fi\r\n    \r\n    # Get the pid file&#39;s name.\r\n    PIDFILE=$1\r\n    shift\r\n    \r\n    if [[ $# &lt; 1 ]]; then\r\n        echo &quot;No command given.&quot;\r\n        exit\r\n    fi\r\n    \r\n    echo &quot;Checking pid in file $PIDFILE.&quot;\r\n    \r\n    #Check to see if process running.\r\n    PID=$(cat $PIDFILE 2&gt;\/dev\/null)\r\n    if [[ $? = 0 ]]; then\r\n        ps -p $PID &gt;\/dev\/null 2&gt;&amp;1\r\n        if [[ $? = 0 ]]; then\r\n            echo &quot;Command $1 already running.&quot;\r\n            exit\r\n        fi\r\n    fi\r\n    \r\n    # Write our pid to file.\r\n    echo $$ &gt;$PIDFILE\r\n    \r\n    # Get command.\r\n    COMMAND=$1\r\n    shift\r\n    \r\n    # Run command until we&#39;re killed.\r\n    while true; do\r\n        $COMMAND &quot;$@&quot;\r\n        sleep 10 # if command dies immediately, don&#39;t go into un-ctrl-c-able loop\r\n    done\r\n\r\nThe first argument is the name of the pid file to use. The second argument is the command. And all other arguments are the command&#39;s arguments.\r\n\r\nIf you name this script restart.sh this is how you would call it:\r\n\r\n    nohup restart.sh pidFileName yourScript.sh script args &gt;script.out 2&gt;&amp;1 &amp;",
        "body": "<p>You can daemonize any executable in Unix by using nohup and the &amp; operator:<\/p>\n\n<pre><code>nohup yourScript.sh script args&amp;\n<\/code><\/pre>\n\n<p>The nohup command allows you to shut down your shell session without it killing your script, while the &amp; places your script in the background so you get a shell prompt to continue your session. The only minor problem with this is standard out and standard error both get sent to .\/nohup.out, so if you start several scripts in this manor their output will be intertwined. A better command would be:<\/p>\n\n<pre><code>nohup yourScript.sh script args &gt;script.out 2&gt;script.error&amp;\n<\/code><\/pre>\n\n<p>This will send standard out to the file of your choice and standard error to a different file of your choice. If you want to use just one file for both standard out and standard error you can us this:<\/p>\n\n<pre><code>nohup yourScript.sh script args &gt;script.out 2&gt;&amp;1 &amp;\n<\/code><\/pre>\n\n<p>The 2>&amp;1 tells the shell to redirect standard error (file descriptor 2) to the same file as standard out (file descriptor 1).<\/p>\n\n<p>To run a command only once and restart it if it dies you can use this script:<\/p>\n\n<pre><code>#!\/bin\/bash\n\nif [[ $# &lt; 1 ]]; then\n    echo \"Name of pid file not given.\"\n    exit\nfi\n\n# Get the pid file's name.\nPIDFILE=$1\nshift\n\nif [[ $# &lt; 1 ]]; then\n    echo \"No command given.\"\n    exit\nfi\n\necho \"Checking pid in file $PIDFILE.\"\n\n#Check to see if process running.\nPID=$(cat $PIDFILE 2&gt;\/dev\/null)\nif [[ $? = 0 ]]; then\n    ps -p $PID &gt;\/dev\/null 2&gt;&amp;1\n    if [[ $? = 0 ]]; then\n        echo \"Command $1 already running.\"\n        exit\n    fi\nfi\n\n# Write our pid to file.\necho $$ &gt;$PIDFILE\n\n# Get command.\nCOMMAND=$1\nshift\n\n# Run command until we're killed.\nwhile true; do\n    $COMMAND \"$@\"\n    sleep 10 # if command dies immediately, don't go into un-ctrl-c-able loop\ndone\n<\/code><\/pre>\n\n<p>The first argument is the name of the pid file to use. The second argument is the command. And all other arguments are the command's arguments.<\/p>\n\n<p>If you name this script restart.sh this is how you would call it:<\/p>\n\n<pre><code>nohup restart.sh pidFileName yourScript.sh script args &gt;script.out 2&gt;&amp;1 &amp;\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 31576,
            "reputation": 46577,
            "user_id": 86837,
            "user_type": "registered",
            "accept_rate": 91,
            "profile_image": "https:\/\/i.stack.imgur.com\/lWW13.jpg?s=256&g=1",
            "display_name": "ennuikiller",
            "link": "https:\/\/stackoverflow.com\/users\/86837\/ennuikiller"
        },
        "is_accepted": true,
        "score": 101,
        "last_activity_date": 1499519475,
        "last_edit_date": 1499519475.0,
        "creation_date": 1277796536,
        "answer_id": 3138692,
        "question_id": 3138649,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "    while (&lt;&gt;) {\r\n    print;\r\n    }\r\n\r\nwill read either from a file specified on the command line or from stdin if no file is given\r\n\r\nIf you are required this loop construction in command line, then you may use [`-n`](http:\/\/perldoc.perl.org\/perlrun.html#*-n*) option:\r\n\r\n    $ perl -ne &#39;print;&#39;\r\n\r\nHere you just put code between `{}` from first example into `&#39;&#39;` in second",
        "body": "<pre><code>while (&lt;&gt;) {\nprint;\n}\n<\/code><\/pre>\n\n<p>will read either from a file specified on the command line or from stdin if no file is given<\/p>\n\n<p>If you are required this loop construction in command line, then you may use <a href=\"http:\/\/perldoc.perl.org\/perlrun.html#*-n*\" rel=\"noreferrer\"><code>-n<\/code><\/a> option:<\/p>\n\n<pre><code>$ perl -ne 'print;'\n<\/code><\/pre>\n\n<p>Here you just put code between <code>{}<\/code> from first example into <code>''<\/code> in second<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5303,
            "reputation": 42286,
            "user_id": 8457,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/cfc5e6808a7e7cf74768be0adc766452?s=256&d=identicon&r=PG",
            "display_name": "jrockway",
            "link": "https:\/\/stackoverflow.com\/users\/8457\/jrockway"
        },
        "is_accepted": false,
        "score": 101,
        "last_activity_date": 1501669648,
        "last_edit_date": 1501669648.0,
        "creation_date": 1306867718,
        "answer_id": 6192088,
        "question_id": 6162484,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "There are two stages to processing Unicode text. The first is &quot;how can I input it and output it without losing information&quot;. The second is &quot;how do I treat text according to local language conventions&quot;.\r\n\r\ntchrist&#39;s post covers both, but the second part is where 99% of the text in his post comes from. Most programs don&#39;t even handle I\/O correctly, so it&#39;s important to understand that before you even begin to worry about normalization and collation.\r\n\r\nThis post aims to solve that first problem\r\n\r\nWhen you read data into Perl, it doesn&#39;t care what encoding it is. It allocates some memory and stashes the bytes away there. If you say `print $str`, it just blits those bytes out to your terminal, which is probably set to assume everything that is written to it is UTF-8, and your text shows up.\r\n\r\nMarvelous.\r\n\r\nExcept, it&#39;s not. If you try to treat the data as text, you&#39;ll see that Something Bad is happening. You need go no further than `length` to see that what Perl thinks about your string and what you think about your string disagree. Write a one-liner like: `perl -E &#39;while(&lt;&gt;){ chomp; say length }&#39;` and type in `\u6587\u5b57\u5316\u3051` and you get 12... not the correct answer, 4.\r\n\r\nThat&#39;s because Perl assumes your string is not text. You have to tell it that it&#39;s text before it will give you the right answer.\r\n\r\nThat&#39;s easy enough; the Encode module has the functions to do that. The generic entry point is `Encode::decode` (or `use Encode qw(decode)`, of course). That function takes some string from the outside world (what we&#39;ll call &quot;octets&quot;, a fancy of way of saying &quot;8-bit bytes&quot;), and turns it into some text that Perl will understand. The first argument is a character encoding name, like &quot;UTF-8&quot; or &quot;ASCII&quot; or &quot;EUC-JP&quot;. The second argument is the string. The return value is the Perl scalar containing the text.\r\n\r\n(There is also `Encode::decode_utf8`, which assumes UTF-8 for the encoding.)\r\n\r\nIf we rewrite our one-liner:\r\n\r\n    perl -MEncode=decode -E &#39;while(&lt;&gt;){ chomp; say length decode(&quot;UTF-8&quot;, $_) }&#39;\r\n\r\nWe type in \u6587\u5b57\u5316\u3051 and get &quot;4&quot; as the result. Success.\r\n\r\nThat, right there, is the solution to 99% of Unicode problems in Perl.\r\n\r\nThe key is, whenever any text comes into your program, you must decode it. The Internet cannot transmit characters. Files cannot store characters. There are no characters in your database. There are only octets, and you can&#39;t treat octets as characters in Perl. You must decode the encoded octets into Perl characters with the Encode module.\r\n\r\nThe other half of the problem is getting data out of your program. That&#39;s easy to; you just say `use Encode qw(encode)`, decide what the encoding your data will be in (UTF-8 to terminals that understand UTF-8, UTF-16 for files on Windows, etc.), and then output the result of `encode($encoding, $data)` instead of just outputting `$data`.\r\n\r\nThis operation converts Perl&#39;s characters, which is what your program operates on, to octets that can be used by the outside world. It would be a lot easier if we could just send characters over the Internet or to our terminals, but we can&#39;t: octets only. So we have to convert characters to octets, otherwise the results are undefined.\r\n\r\nTo summarize: encode all outputs and decode all inputs.\r\n\r\nNow we&#39;ll talk about three issues that make this a little challenging. The first is libraries. Do they handle text correctly? The answer is... they try. If you download a web page, LWP will give you your result back as text. If you call the right method on the result, that is (and that happens to be `decoded_content`, not `content`, which is just the octet stream that it got from the server.) Database drivers can be flaky; if you use DBD::SQLite with just Perl, it will work out, but if some other tool has put text stored as some encoding other than UTF-8 in your database... well... it&#39;s not going to be handled correctly until you write code to handle it correctly.\r\n\r\nOutputting data is usually easier, but if you see &quot;wide character in print&quot;, then you know you&#39;re messing up the encoding somewhere. That warning means &quot;hey, you&#39;re trying to leak Perl characters to the outside world and that doesn&#39;t make any sense&quot;. Your program appears to work (because the other end usually handles the raw Perl characters correctly), but it is very broken and could stop working at any moment. Fix it with an explicit `Encode::encode`!\r\n\r\nThe second problem is UTF-8 encoded source code. Unless you say `use utf8` at the top of each file, Perl will not assume that your source code is UTF-8. This means that each time you say something like `my $var = &#39;\u307b\u3052&#39;`, you&#39;re injecting garbage into your program that will totally break everything horribly. You don&#39;t have to &quot;use utf8&quot;, but if you don&#39;t, you *must* not use any non-ASCII characters in your program.\r\n\r\nThe third problem is how Perl handles The Past. A long time ago, there was no such thing as Unicode, and Perl assumed that everything was Latin-1 text or binary. So when data comes into your program and you start treating it as text, Perl treats each octet as a Latin-1 character. That&#39;s why, when we asked for the length of &quot;\u6587\u5b57\u5316\u3051&quot;, we got 12. Perl assumed that we were operating on the  Latin-1 string &quot;&#230;&#229;&#173;&#229;&#227;&quot; (which is 12 characters, some of which are non-printing).\r\n\r\nThis is called an &quot;implicit upgrade&quot;, and it&#39;s a perfectly reasonable thing to do, but it&#39;s not what you want if your text is not Latin-1. That&#39;s why it&#39;s critical to explicitly decode input: if you don&#39;t do it, Perl will, and it might do it wrong.\r\n\r\nPeople run into trouble where half their data is a proper character string, and some is still binary. Perl will interpret the part that&#39;s still binary as though it&#39;s Latin-1 text and then combine it with the correct character data. This will make it look like handling your characters correctly broke your program, but in reality, you just haven&#39;t fixed it enough.\r\n\r\nHere&#39;s an example: you have a program that reads a UTF-8-encoded text file, you tack on a Unicode `PILE OF POO` to each line, and you print it out. You write it like:\r\n\r\n    while(&lt;&gt;){\r\n        chomp;\r\n        say &quot;$_ &#128169;&quot;;\r\n    }\r\n\r\nAnd then run on some UTF-8 encoded data, like:\r\n\r\n    perl poo.pl input-data.txt\r\n\r\nIt prints the UTF-8 data with a poo at the end of each line. Perfect, my program works!\r\n\r\nBut nope, you&#39;re just doing binary concatenation. You&#39;re reading octets from the file, removing a `\\n` with chomp, and then tacking on the bytes in the UTF-8 representation of the `PILE OF POO` character. When you revise your program to decode the data from the file and encode the output, you&#39;ll notice that you get garbage (&quot;&#240;&#169;&quot;) instead of the poo. This will lead you to believe that decoding the input file is the wrong thing to do. It&#39;s not.\r\n\r\nThe problem is that the poo is being implicitly upgraded as latin-1. If you `use utf8` to make the literal text instead of binary, then it will work again!\r\n\r\n(That&#39;s the number one problem I see when helping people with Unicode. They did part right and that broke their program. That&#39;s what&#39;s sad about undefined results: you can have a working program for a long time, but when you start to repair it, it breaks. Don&#39;t worry; if you are adding encode\/decode statements to your program and it breaks, it just means you have more work to do. Next time, when you design with Unicode in mind from the beginning, it will be much easier!)\r\n\r\nThat&#39;s really all you need to know about Perl and Unicode. If you tell Perl what your data is, it has the best Unicode support among all popular programming languages. If you assume it will magically know what sort of text you are feeding it, though, then you&#39;re going to trash your data irrevocably. Just because your program works today on your UTF-8 terminal doesn&#39;t mean it will work tomorrow on a UTF-16 encoded file. So make it safe now, and save yourself the headache of trashing your users&#39; data!\r\n\r\nThe easy part of handling Unicode is encoding output and decoding input. The hard part is finding all your input and output, and determining which encoding it is. But that&#39;s why you get the big bucks :)",
        "body": "<p>There are two stages to processing Unicode text. The first is \"how can I input it and output it without losing information\". The second is \"how do I treat text according to local language conventions\".<\/p>\n\n<p>tchrist's post covers both, but the second part is where 99% of the text in his post comes from. Most programs don't even handle I\/O correctly, so it's important to understand that before you even begin to worry about normalization and collation.<\/p>\n\n<p>This post aims to solve that first problem<\/p>\n\n<p>When you read data into Perl, it doesn't care what encoding it is. It allocates some memory and stashes the bytes away there. If you say <code>print $str<\/code>, it just blits those bytes out to your terminal, which is probably set to assume everything that is written to it is UTF-8, and your text shows up.<\/p>\n\n<p>Marvelous.<\/p>\n\n<p>Except, it's not. If you try to treat the data as text, you'll see that Something Bad is happening. You need go no further than <code>length<\/code> to see that what Perl thinks about your string and what you think about your string disagree. Write a one-liner like: <code>perl -E 'while(&lt;&gt;){ chomp; say length }'<\/code> and type in <code>\u6587\u5b57\u5316\u3051<\/code> and you get 12... not the correct answer, 4.<\/p>\n\n<p>That's because Perl assumes your string is not text. You have to tell it that it's text before it will give you the right answer.<\/p>\n\n<p>That's easy enough; the Encode module has the functions to do that. The generic entry point is <code>Encode::decode<\/code> (or <code>use Encode qw(decode)<\/code>, of course). That function takes some string from the outside world (what we'll call \"octets\", a fancy of way of saying \"8-bit bytes\"), and turns it into some text that Perl will understand. The first argument is a character encoding name, like \"UTF-8\" or \"ASCII\" or \"EUC-JP\". The second argument is the string. The return value is the Perl scalar containing the text.<\/p>\n\n<p>(There is also <code>Encode::decode_utf8<\/code>, which assumes UTF-8 for the encoding.)<\/p>\n\n<p>If we rewrite our one-liner:<\/p>\n\n<pre><code>perl -MEncode=decode -E 'while(&lt;&gt;){ chomp; say length decode(\"UTF-8\", $_) }'\n<\/code><\/pre>\n\n<p>We type in \u6587\u5b57\u5316\u3051 and get \"4\" as the result. Success.<\/p>\n\n<p>That, right there, is the solution to 99% of Unicode problems in Perl.<\/p>\n\n<p>The key is, whenever any text comes into your program, you must decode it. The Internet cannot transmit characters. Files cannot store characters. There are no characters in your database. There are only octets, and you can't treat octets as characters in Perl. You must decode the encoded octets into Perl characters with the Encode module.<\/p>\n\n<p>The other half of the problem is getting data out of your program. That's easy to; you just say <code>use Encode qw(encode)<\/code>, decide what the encoding your data will be in (UTF-8 to terminals that understand UTF-8, UTF-16 for files on Windows, etc.), and then output the result of <code>encode($encoding, $data)<\/code> instead of just outputting <code>$data<\/code>.<\/p>\n\n<p>This operation converts Perl's characters, which is what your program operates on, to octets that can be used by the outside world. It would be a lot easier if we could just send characters over the Internet or to our terminals, but we can't: octets only. So we have to convert characters to octets, otherwise the results are undefined.<\/p>\n\n<p>To summarize: encode all outputs and decode all inputs.<\/p>\n\n<p>Now we'll talk about three issues that make this a little challenging. The first is libraries. Do they handle text correctly? The answer is... they try. If you download a web page, LWP will give you your result back as text. If you call the right method on the result, that is (and that happens to be <code>decoded_content<\/code>, not <code>content<\/code>, which is just the octet stream that it got from the server.) Database drivers can be flaky; if you use DBD::SQLite with just Perl, it will work out, but if some other tool has put text stored as some encoding other than UTF-8 in your database... well... it's not going to be handled correctly until you write code to handle it correctly.<\/p>\n\n<p>Outputting data is usually easier, but if you see \"wide character in print\", then you know you're messing up the encoding somewhere. That warning means \"hey, you're trying to leak Perl characters to the outside world and that doesn't make any sense\". Your program appears to work (because the other end usually handles the raw Perl characters correctly), but it is very broken and could stop working at any moment. Fix it with an explicit <code>Encode::encode<\/code>!<\/p>\n\n<p>The second problem is UTF-8 encoded source code. Unless you say <code>use utf8<\/code> at the top of each file, Perl will not assume that your source code is UTF-8. This means that each time you say something like <code>my $var = '\u307b\u3052'<\/code>, you're injecting garbage into your program that will totally break everything horribly. You don't have to \"use utf8\", but if you don't, you <em>must<\/em> not use any non-ASCII characters in your program.<\/p>\n\n<p>The third problem is how Perl handles The Past. A long time ago, there was no such thing as Unicode, and Perl assumed that everything was Latin-1 text or binary. So when data comes into your program and you start treating it as text, Perl treats each octet as a Latin-1 character. That's why, when we asked for the length of \"\u6587\u5b57\u5316\u3051\", we got 12. Perl assumed that we were operating on the  Latin-1 string \"\u00e6\u00e5\u00ad\u00e5\u00e3\" (which is 12 characters, some of which are non-printing).<\/p>\n\n<p>This is called an \"implicit upgrade\", and it's a perfectly reasonable thing to do, but it's not what you want if your text is not Latin-1. That's why it's critical to explicitly decode input: if you don't do it, Perl will, and it might do it wrong.<\/p>\n\n<p>People run into trouble where half their data is a proper character string, and some is still binary. Perl will interpret the part that's still binary as though it's Latin-1 text and then combine it with the correct character data. This will make it look like handling your characters correctly broke your program, but in reality, you just haven't fixed it enough.<\/p>\n\n<p>Here's an example: you have a program that reads a UTF-8-encoded text file, you tack on a Unicode <code>PILE OF POO<\/code> to each line, and you print it out. You write it like:<\/p>\n\n<pre><code>while(&lt;&gt;){\n    chomp;\n    say \"$_ \ud83d\udca9\";\n}\n<\/code><\/pre>\n\n<p>And then run on some UTF-8 encoded data, like:<\/p>\n\n<pre><code>perl poo.pl input-data.txt\n<\/code><\/pre>\n\n<p>It prints the UTF-8 data with a poo at the end of each line. Perfect, my program works!<\/p>\n\n<p>But nope, you're just doing binary concatenation. You're reading octets from the file, removing a <code>\\n<\/code> with chomp, and then tacking on the bytes in the UTF-8 representation of the <code>PILE OF POO<\/code> character. When you revise your program to decode the data from the file and encode the output, you'll notice that you get garbage (\"\u00f0\u00a9\") instead of the poo. This will lead you to believe that decoding the input file is the wrong thing to do. It's not.<\/p>\n\n<p>The problem is that the poo is being implicitly upgraded as latin-1. If you <code>use utf8<\/code> to make the literal text instead of binary, then it will work again!<\/p>\n\n<p>(That's the number one problem I see when helping people with Unicode. They did part right and that broke their program. That's what's sad about undefined results: you can have a working program for a long time, but when you start to repair it, it breaks. Don't worry; if you are adding encode\/decode statements to your program and it breaks, it just means you have more work to do. Next time, when you design with Unicode in mind from the beginning, it will be much easier!)<\/p>\n\n<p>That's really all you need to know about Perl and Unicode. If you tell Perl what your data is, it has the best Unicode support among all popular programming languages. If you assume it will magically know what sort of text you are feeding it, though, then you're going to trash your data irrevocably. Just because your program works today on your UTF-8 terminal doesn't mean it will work tomorrow on a UTF-16 encoded file. So make it safe now, and save yourself the headache of trashing your users' data!<\/p>\n\n<p>The easy part of handling Unicode is encoding output and decoding input. The hard part is finding all your input and output, and determining which encoding it is. But that's why you get the big bucks :)<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4383791,
            "reputation": 8754,
            "user_id": 3672465,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/PAHIc.gif?s=256&g=1",
            "display_name": "Beejor",
            "link": "https:\/\/stackoverflow.com\/users\/3672465\/beejor"
        },
        "is_accepted": false,
        "score": 100,
        "last_activity_date": 1511853435,
        "last_edit_date": null,
        "creation_date": 1511853435,
        "answer_id": 47525973,
        "question_id": 1030787,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Pulling the short answer from the comments, for anyone looking for a quick one-liner, and the reason Perl is ignoring their RegEx options from the command line.\r\n\r\n`perl -0pe &#39;s\/search\/replace\/gms&#39; file`\r\n\r\nWithout the `-0` argument, Perl processes data &lt;a href=&quot;https:\/\/perlmaven.com\/slurp&quot;&gt;line-by-line&lt;\/a&gt;, which causes multiline searches to fail.",
        "body": "<p>Pulling the short answer from the comments, for anyone looking for a quick one-liner, and the reason Perl is ignoring their RegEx options from the command line.<\/p>\n\n<p><code>perl -0pe 's\/search\/replace\/gms' file<\/code><\/p>\n\n<p>Without the <code>-0<\/code> argument, Perl processes data <a href=\"https:\/\/perlmaven.com\/slurp\" rel=\"noreferrer\">line-by-line<\/a>, which causes multiline searches to fail.<\/p>\n",
        "community_owned_date": null
    }
]

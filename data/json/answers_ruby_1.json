[
    {
        "owner": {
            "account_id": 21006,
            "reputation": 235023,
            "user_id": 50742,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/03cdad7329f1a13d2b2f3d9c8a08813d?s=256&d=identicon&r=PG",
            "display_name": "Chuck",
            "link": "https:\/\/stackoverflow.com\/users\/50742\/chuck"
        },
        "is_accepted": true,
        "score": 2952,
        "last_activity_date": 1682440828,
        "last_edit_date": 1682440828.0,
        "creation_date": 1244078577,
        "answer_id": 948157,
        "question_id": 948135,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Ruby uses the [`case` expression][1] instead.\r\n\r\n    case x\r\n    when 1..5\r\n      &quot;It&#39;s between 1 and 5&quot;\r\n    when 6\r\n      &quot;It&#39;s 6&quot;\r\n    when &quot;foo&quot;, &quot;bar&quot;\r\n      &quot;It&#39;s either foo or bar&quot;\r\n    when String\r\n      &quot;You passed a string&quot;\r\n    else\r\n      &quot;You gave me #{x} -- I have no idea what to do with that.&quot;\r\n    end\r\n\r\nRuby compares the object in the `when` clause with the object in the `case` clause using the `===` operator. For example, `(1..5) === x`, and not `x === (1..5)`. \r\n\r\nThis allows for sophisticated `when` clauses as seen above. Ranges, classes and all sorts of things can be tested for rather than just equality.\r\n\r\nUnlike `switch` statements in many other languages, Ruby\u2019s `case` does not have [fall-through][2], so there is no need to end each `when` with a `break`. You can also specify multiple matches in a single `when` clause like `when &quot;foo&quot;, &quot;bar&quot;`.\r\n\r\n\r\n  [1]: http:\/\/ruby-doc.com\/docs\/ProgrammingRuby\/html\/tut_expressions.html#S5\r\n  [2]: https:\/\/en.wikipedia.org\/wiki\/Switch_statement#Fallthrough",
        "body": "<p>Ruby uses the <a href=\"http:\/\/ruby-doc.com\/docs\/ProgrammingRuby\/html\/tut_expressions.html#S5\" rel=\"noreferrer\"><code>case<\/code> expression<\/a> instead.<\/p>\n<pre><code>case x\nwhen 1..5\n  &quot;It's between 1 and 5&quot;\nwhen 6\n  &quot;It's 6&quot;\nwhen &quot;foo&quot;, &quot;bar&quot;\n  &quot;It's either foo or bar&quot;\nwhen String\n  &quot;You passed a string&quot;\nelse\n  &quot;You gave me #{x} -- I have no idea what to do with that.&quot;\nend\n<\/code><\/pre>\n<p>Ruby compares the object in the <code>when<\/code> clause with the object in the <code>case<\/code> clause using the <code>===<\/code> operator. For example, <code>(1..5) === x<\/code>, and not <code>x === (1..5)<\/code>.<\/p>\n<p>This allows for sophisticated <code>when<\/code> clauses as seen above. Ranges, classes and all sorts of things can be tested for rather than just equality.<\/p>\n<p>Unlike <code>switch<\/code> statements in many other languages, Ruby\u2019s <code>case<\/code> does not have <a href=\"https:\/\/en.wikipedia.org\/wiki\/Switch_statement#Fallthrough\" rel=\"noreferrer\">fall-through<\/a>, so there is no need to end each <code>when<\/code> with a <code>break<\/code>. You can also specify multiple matches in a single <code>when<\/code> clause like <code>when &quot;foo&quot;, &quot;bar&quot;<\/code>.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 51990,
            "reputation": 37135,
            "user_id": 155351,
            "user_type": "registered",
            "accept_rate": 83,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/57b2095f392671dcb5d1852aae98dcb3?s=256&d=identicon&r=PG",
            "display_name": "Max Chernyak",
            "link": "https:\/\/stackoverflow.com\/users\/155351\/max-chernyak"
        },
        "is_accepted": true,
        "score": 2569,
        "last_activity_date": 1486762126,
        "last_edit_date": 1486762126.0,
        "creation_date": 1291673517,
        "answer_id": 4371458,
        "question_id": 4370960,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Let&#39;s say you have a class `Person`.\r\n\r\n    class Person\r\n    end\r\n\r\n    person = Person.new\r\n    person.name # =&gt; no method error\r\n\r\nObviously we never defined method `name`. Let&#39;s do that.\r\n\r\n    class Person\r\n      def name\r\n        @name # simply returning an instance variable @name\r\n      end\r\n    end\r\n\r\n    person = Person.new\r\n    person.name # =&gt; nil\r\n    person.name = &quot;Dennis&quot; # =&gt; no method error\r\n\r\nAha, we can read the name, but that doesn&#39;t mean we can assign the name. Those are two different methods. The former is called *reader* and latter is called *writer*. We didn&#39;t create the writer yet so let&#39;s do that.\r\n\r\n    class Person\r\n      def name\r\n        @name\r\n      end\r\n\r\n      def name=(str)\r\n        @name = str\r\n      end\r\n    end\r\n\r\n    person = Person.new\r\n    person.name = &#39;Dennis&#39;\r\n    person.name # =&gt; &quot;Dennis&quot;\r\n\r\nAwesome. Now we can write and read instance variable `@name` using reader and writer methods. Except, this is done so frequently, why waste time writing these methods every time? We can do it easier.\r\n\r\n    class Person\r\n      attr_reader :name\r\n      attr_writer :name\r\n    end\r\n\r\nEven this can get repetitive. When you want both reader and writer just use accessor!\r\n\r\n    class Person\r\n      attr_accessor :name\r\n    end\r\n\r\n    person = Person.new\r\n    person.name = &quot;Dennis&quot;\r\n    person.name # =&gt; &quot;Dennis&quot;\r\n\r\nWorks the same way! And guess what: the instance variable `@name` in our person object will be set just like when we did it manually, so you can use it in other methods.\r\n\r\n    class Person\r\n      attr_accessor :name\r\n\r\n      def greeting\r\n        &quot;Hello #{@name}&quot;\r\n      end\r\n    end\r\n\r\n    person = Person.new\r\n    person.name = &quot;Dennis&quot;\r\n    person.greeting # =&gt; &quot;Hello Dennis&quot;\r\n\r\nThat&#39;s it. In order to understand how `attr_reader`, `attr_writer`, and `attr_accessor` methods actually generate methods for you, read other answers, books, ruby docs. ",
        "body": "<p>Let's say you have a class <code>Person<\/code>.<\/p>\n\n<pre><code>class Person\nend\n\nperson = Person.new\nperson.name # =&gt; no method error\n<\/code><\/pre>\n\n<p>Obviously we never defined method <code>name<\/code>. Let's do that.<\/p>\n\n<pre><code>class Person\n  def name\n    @name # simply returning an instance variable @name\n  end\nend\n\nperson = Person.new\nperson.name # =&gt; nil\nperson.name = \"Dennis\" # =&gt; no method error\n<\/code><\/pre>\n\n<p>Aha, we can read the name, but that doesn't mean we can assign the name. Those are two different methods. The former is called <em>reader<\/em> and latter is called <em>writer<\/em>. We didn't create the writer yet so let's do that.<\/p>\n\n<pre><code>class Person\n  def name\n    @name\n  end\n\n  def name=(str)\n    @name = str\n  end\nend\n\nperson = Person.new\nperson.name = 'Dennis'\nperson.name # =&gt; \"Dennis\"\n<\/code><\/pre>\n\n<p>Awesome. Now we can write and read instance variable <code>@name<\/code> using reader and writer methods. Except, this is done so frequently, why waste time writing these methods every time? We can do it easier.<\/p>\n\n<pre><code>class Person\n  attr_reader :name\n  attr_writer :name\nend\n<\/code><\/pre>\n\n<p>Even this can get repetitive. When you want both reader and writer just use accessor!<\/p>\n\n<pre><code>class Person\n  attr_accessor :name\nend\n\nperson = Person.new\nperson.name = \"Dennis\"\nperson.name # =&gt; \"Dennis\"\n<\/code><\/pre>\n\n<p>Works the same way! And guess what: the instance variable <code>@name<\/code> in our person object will be set just like when we did it manually, so you can use it in other methods.<\/p>\n\n<pre><code>class Person\n  attr_accessor :name\n\n  def greeting\n    \"Hello #{@name}\"\n  end\nend\n\nperson = Person.new\nperson.name = \"Dennis\"\nperson.greeting # =&gt; \"Hello Dennis\"\n<\/code><\/pre>\n\n<p>That's it. In order to understand how <code>attr_reader<\/code>, <code>attr_writer<\/code>, and <code>attr_accessor<\/code> methods actually generate methods for you, read other answers, books, ruby docs. <\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 26707,
            "reputation": 325317,
            "user_id": 69755,
            "user_type": "registered",
            "accept_rate": 92,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/6aa87e056bd2ee342fbd56eb2110603c?s=256&d=identicon&r=PG",
            "display_name": "Brian Campbell",
            "link": "https:\/\/stackoverflow.com\/users\/69755\/brian-campbell"
        },
        "is_accepted": true,
        "score": 2221,
        "last_activity_date": 1461931324,
        "last_edit_date": 1461931324.0,
        "creation_date": 1262281879,
        "answer_id": 1986398,
        "question_id": 1986386,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "You&#39;re looking for [`include?`][1]:\r\n\r\n    &gt;&gt; [&#39;Cat&#39;, &#39;Dog&#39;, &#39;Bird&#39;].include? &#39;Dog&#39;\r\n    =&gt; true\r\n\r\n\r\n  [1]: http:\/\/ruby-doc.org\/core-2.3.1\/Array.html#method-i-include-3F",
        "body": "<p>You're looking for <a href=\"http:\/\/ruby-doc.org\/core-2.3.1\/Array.html#method-i-include-3F\" rel=\"noreferrer\"><code>include?<\/code><\/a>:<\/p>\n\n<pre><code>&gt;&gt; ['Cat', 'Dog', 'Bird'].include? 'Dog'\n=&gt; true\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 20630,
            "reputation": 140665,
            "user_id": 49485,
            "user_type": "registered",
            "accept_rate": 72,
            "profile_image": "https:\/\/i.stack.imgur.com\/NQ87b.jpg?s=256&g=1",
            "display_name": "Sophie Alpert",
            "link": "https:\/\/stackoverflow.com\/users\/49485\/sophie-alpert"
        },
        "is_accepted": true,
        "score": 1771,
        "last_activity_date": 1626211847,
        "last_edit_date": 1626211847.0,
        "creation_date": 1245457015,
        "answer_id": 1020571,
        "question_id": 1020568,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Ruby has a few methods for changing the case of strings. To convert to lowercase, use `downcase`:\r\n\r\n    &quot;hello James!&quot;.downcase    #=&gt; &quot;hello james!&quot;\r\n\r\nSimilarly, `upcase` capitalizes every letter and `capitalize` capitalizes the first letter of the string but lowercases the rest:\r\n\r\n    &quot;hello James!&quot;.upcase      #=&gt; &quot;HELLO JAMES!&quot;\r\n    &quot;hello James!&quot;.capitalize  #=&gt; &quot;Hello james!&quot;\r\n    &quot;hello James!&quot;.titleize    #=&gt; &quot;Hello James!&quot; (Rails\/ActiveSupport only)\r\n\r\nIf you want to modify a string in place, you can add an exclamation point to any of those methods:\r\n\r\n    string = &quot;hello James!&quot;\r\n    string.downcase!\r\n    string   #=&gt; &quot;hello james!&quot;\r\n\r\nRefer to the [documentation for String][1] for more information.\r\n\r\n\r\n  [1]: http:\/\/www.ruby-doc.org\/core\/String.html",
        "body": "<p>Ruby has a few methods for changing the case of strings. To convert to lowercase, use <code>downcase<\/code>:<\/p>\n<pre><code>&quot;hello James!&quot;.downcase    #=&gt; &quot;hello james!&quot;\n<\/code><\/pre>\n<p>Similarly, <code>upcase<\/code> capitalizes every letter and <code>capitalize<\/code> capitalizes the first letter of the string but lowercases the rest:<\/p>\n<pre><code>&quot;hello James!&quot;.upcase      #=&gt; &quot;HELLO JAMES!&quot;\n&quot;hello James!&quot;.capitalize  #=&gt; &quot;Hello james!&quot;\n&quot;hello James!&quot;.titleize    #=&gt; &quot;Hello James!&quot; (Rails\/ActiveSupport only)\n<\/code><\/pre>\n<p>If you want to modify a string in place, you can add an exclamation point to any of those methods:<\/p>\n<pre><code>string = &quot;hello James!&quot;\nstring.downcase!\nstring   #=&gt; &quot;hello james!&quot;\n<\/code><\/pre>\n<p>Refer to the <a href=\"http:\/\/www.ruby-doc.org\/core\/String.html\" rel=\"noreferrer\">documentation for String<\/a> for more information.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 37099,
            "reputation": 38281,
            "user_id": 105971,
            "user_type": "moderator",
            "accept_rate": 92,
            "profile_image": "https:\/\/i.stack.imgur.com\/A8wSd.jpg?s=256&g=1",
            "display_name": "Adam Lear",
            "link": "https:\/\/stackoverflow.com\/users\/105971\/adam-lear"
        },
        "is_accepted": true,
        "score": 1608,
        "last_activity_date": 1564693527,
        "last_edit_date": 1564693527.0,
        "creation_date": 1322144687,
        "answer_id": 8258571,
        "question_id": 8258517,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "You can use the [`include?`][1] method:\r\n\r\n    my_string = &quot;abcdefg&quot;\r\n    if my_string.include? &quot;cde&quot;\r\n       puts &quot;String includes &#39;cde&#39;&quot;\r\n    end\r\n\r\n\r\n  [1]: https:\/\/ruby-doc.org\/core-1.9.3\/String.html#method-i-include-3F",
        "body": "<p>You can use the <a href=\"https:\/\/ruby-doc.org\/core-1.9.3\/String.html#method-i-include-3F\" rel=\"noreferrer\"><code>include?<\/code><\/a> method:<\/p>\n\n<pre><code>my_string = \"abcdefg\"\nif my_string.include? \"cde\"\n   puts \"String includes 'cde'\"\nend\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 59287,
            "reputation": 18908,
            "user_id": 177420,
            "user_type": "registered",
            "accept_rate": 82,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/1dbcb945ab4ed7d6bf2ea38cd70afaaf?s=256&d=identicon&r=PG",
            "display_name": "Faisal",
            "link": "https:\/\/stackoverflow.com\/users\/177420\/faisal"
        },
        "is_accepted": true,
        "score": 1535,
        "last_activity_date": 1655636766,
        "last_edit_date": 1655636766.0,
        "creation_date": 1255607549,
        "answer_id": 1571900,
        "question_id": 941594,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "**What happens**\r\n\r\nWhen the user views a form to create, update, or destroy a resource, the Rails app creates a random `authenticity_token`, stores this token in the session, and places it in a hidden field in the form. When the user submits the form, Rails looks for the `authenticity_token`, compares it to the one stored in the session, and if they match the request is allowed to continue.\r\n\r\n**Why it happens**\r\n\r\nSince the authenticity token is stored in the session, the client cannot know its value. This prevents people from submitting forms to a Rails app without viewing the form within that app itself.\r\nImagine that you are using service A, you logged into the service and everything is OK. Now imagine that you went to use service B, and you saw a picture you like, and pressed on the picture to view a larger size of it. Now, if some evil code was there at service B, it might send a request to service A (which you are logged into), and ask to delete your account, by sending a request to `http:\/\/serviceA.example\/close_account`. This is what is known as [CSRF (Cross Site Request Forgery)](http:\/\/en.wikipedia.org\/wiki\/Cross-site_request_forgery).\r\n\r\nIf service A is using authenticity tokens, this attack vector is no longer applicable, since the request from service B would not contain the correct authenticity token, and will not be allowed to continue.\r\n\r\n[API docs](http:\/\/api.rubyonrails.org\/classes\/ActionController\/RequestForgeryProtection.html) describes details about meta tag:\r\n\r\n&gt; CSRF protection is turned on with the `protect_from_forgery` method,\r\n&gt; which checks the token and resets the session if it doesn&#39;t match what\r\n&gt; was expected. A call to this method is generated for new Rails\r\n&gt; applications by default.\r\n&gt; The token parameter is named `authenticity_token` by default. The name\r\n&gt; and value of this token must be added to every layout that renders\r\n&gt; forms by including `csrf_meta_tags` in the HTML head.\r\n\r\n**Notes**\r\n\r\nKeep in mind, Rails only verifies not idempotent methods (POST, PUT\/PATCH and DELETE). GET request are not checked for authenticity token. Why? because the HTTP specification states that GET requests is idempotent and should **not** create, alter, or destroy resources at the server, and the request should be idempotent (if you run the same command multiple times, you should get the same result every time).\r\n\r\nAlso the real implementation is a bit more complicated as defined in the beginning, ensuring better security. Rails does not issue the same stored token with every form. Neither does it generate and store a different token every time. It generates and stores a cryptographic hash in a session and issues new cryptographic tokens, which can be matched against the stored one, every time a page is rendered. See [request_forgery_protection.rb](https:\/\/github.com\/rails\/rails\/blob\/master\/actionpack\/lib\/action_controller\/metal\/request_forgery_protection.rb#L329).\r\n\r\n**Lessons**\r\n\r\nUse `authenticity_token` to protect your not idempotent methods (POST, PUT\/PATCH, and DELETE). Also make sure not to allow any GET requests that could potentially modify resources on the server.\r\n\r\n---------\r\n\r\nCheck [the comment by @erturne](https:\/\/stackoverflow.com\/questions\/941594\/understand-rails-authenticity-token#comment16039314_1571900) regarding GET requests being idempotent. He explains it in a better way than I have done here.\r\n\r\n",
        "body": "<p><strong>What happens<\/strong><\/p>\n<p>When the user views a form to create, update, or destroy a resource, the Rails app creates a random <code>authenticity_token<\/code>, stores this token in the session, and places it in a hidden field in the form. When the user submits the form, Rails looks for the <code>authenticity_token<\/code>, compares it to the one stored in the session, and if they match the request is allowed to continue.<\/p>\n<p><strong>Why it happens<\/strong><\/p>\n<p>Since the authenticity token is stored in the session, the client cannot know its value. This prevents people from submitting forms to a Rails app without viewing the form within that app itself.\nImagine that you are using service A, you logged into the service and everything is OK. Now imagine that you went to use service B, and you saw a picture you like, and pressed on the picture to view a larger size of it. Now, if some evil code was there at service B, it might send a request to service A (which you are logged into), and ask to delete your account, by sending a request to <code>http:\/\/serviceA.example\/close_account<\/code>. This is what is known as <a href=\"http:\/\/en.wikipedia.org\/wiki\/Cross-site_request_forgery\" rel=\"noreferrer\">CSRF (Cross Site Request Forgery)<\/a>.<\/p>\n<p>If service A is using authenticity tokens, this attack vector is no longer applicable, since the request from service B would not contain the correct authenticity token, and will not be allowed to continue.<\/p>\n<p><a href=\"http:\/\/api.rubyonrails.org\/classes\/ActionController\/RequestForgeryProtection.html\" rel=\"noreferrer\">API docs<\/a> describes details about meta tag:<\/p>\n<blockquote>\n<p>CSRF protection is turned on with the <code>protect_from_forgery<\/code> method,\nwhich checks the token and resets the session if it doesn't match what\nwas expected. A call to this method is generated for new Rails\napplications by default.\nThe token parameter is named <code>authenticity_token<\/code> by default. The name\nand value of this token must be added to every layout that renders\nforms by including <code>csrf_meta_tags<\/code> in the HTML head.<\/p>\n<\/blockquote>\n<p><strong>Notes<\/strong><\/p>\n<p>Keep in mind, Rails only verifies not idempotent methods (POST, PUT\/PATCH and DELETE). GET request are not checked for authenticity token. Why? because the HTTP specification states that GET requests is idempotent and should <strong>not<\/strong> create, alter, or destroy resources at the server, and the request should be idempotent (if you run the same command multiple times, you should get the same result every time).<\/p>\n<p>Also the real implementation is a bit more complicated as defined in the beginning, ensuring better security. Rails does not issue the same stored token with every form. Neither does it generate and store a different token every time. It generates and stores a cryptographic hash in a session and issues new cryptographic tokens, which can be matched against the stored one, every time a page is rendered. See <a href=\"https:\/\/github.com\/rails\/rails\/blob\/master\/actionpack\/lib\/action_controller\/metal\/request_forgery_protection.rb#L329\" rel=\"noreferrer\">request_forgery_protection.rb<\/a>.<\/p>\n<p><strong>Lessons<\/strong><\/p>\n<p>Use <code>authenticity_token<\/code> to protect your not idempotent methods (POST, PUT\/PATCH, and DELETE). Also make sure not to allow any GET requests that could potentially modify resources on the server.<\/p>\n<hr \/>\n<p>Check <a href=\"https:\/\/stackoverflow.com\/questions\/941594\/understand-rails-authenticity-token#comment16039314_1571900\">the comment by @erturne<\/a> regarding GET requests being idempotent. He explains it in a better way than I have done here.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 143521,
            "reputation": 25587,
            "user_id": 351909,
            "user_type": "registered",
            "accept_rate": 89,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/71a6b8a36a63c2cb9de678c07be6d8a4?s=256&d=identicon&r=PG",
            "display_name": "moritz",
            "link": "https:\/\/stackoverflow.com\/users\/351909\/moritz"
        },
        "is_accepted": true,
        "score": 1518,
        "last_activity_date": 1655195969,
        "last_edit_date": 1655195969.0,
        "creation_date": 1335286126,
        "answer_id": 10302357,
        "question_id": 10301794,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "- **db:migrate** runs (single) migrations that have not run yet.\r\n- **db:create** creates the database\r\n- **db:drop** deletes the database\r\n- **db:schema:load** creates tables and columns within the existing database following schema.rb. This will delete existing data.\r\n\r\n- **db:setup** does db:create, db:schema:load, db:seed\r\n- **db:reset** does db:drop, db:setup\r\n- **db:migrate:reset** does db:drop, db:create, db:migrate\r\n\r\nTypically, you would use db:migrate after having made changes to the schema via new migration files (this makes sense only if there is already data in the database). db:schema:load is used when you setup a new instance of your app.\r\n\r\n---\r\n\r\n## For rails 3.2.12:\r\n\r\nI just checked the source and the dependencies are like this now:\r\n\r\n- **db:create** creates the database for the current env\r\n- **db:create:all** creates the databases for all envs\r\n- **db:drop** drops the database for the current env\r\n- **db:drop:all** drops the databases for all envs\r\n- **db:migrate** runs migrations for the current env that have not run yet\r\n- **db:migrate:up** runs one specific migration\r\n- **db:migrate:down** rolls back one specific migration\r\n- **db:migrate:status** shows current migration status\r\n- **db:rollback** rolls back the last migration\r\n- **db:forward** advances the current schema version to the next one\r\n- **db:seed** (only) runs the db\/seed.rb file\r\n- **db:schema:load** loads the schema into the current env&#39;s database\r\n- **db:schema:dump** dumps the current env&#39;s schema (and seems to create the db as well)\r\n\r\n- **db:setup** runs db:create db:schema:load db:seed\r\n- **db:reset** runs db:drop db:setup\r\n- **db:migrate:redo** runs (db:migrate:down db:migrate:up) or (db:rollback db:migrate) depending on the specified migration\r\n- **db:migrate:reset** runs db:drop db:create db:migrate\r\n\r\nFor further information please have a look at https:\/\/github.com\/rails\/rails\/blob\/v3.2.12\/activerecord\/lib\/active_record\/railties\/databases.rake (for Rails 3.2.x) and https:\/\/github.com\/rails\/rails\/blob\/v4.0.5\/activerecord\/lib\/active_record\/railties\/databases.rake (for Rails 4.0.x)\r\n",
        "body": "<ul>\n<li><p><strong>db:migrate<\/strong> runs (single) migrations that have not run yet.<\/p>\n<\/li>\n<li><p><strong>db:create<\/strong> creates the database<\/p>\n<\/li>\n<li><p><strong>db:drop<\/strong> deletes the database<\/p>\n<\/li>\n<li><p><strong>db:schema:load<\/strong> creates tables and columns within the existing database following schema.rb. This will delete existing data.<\/p>\n<\/li>\n<li><p><strong>db:setup<\/strong> does db:create, db:schema:load, db:seed<\/p>\n<\/li>\n<li><p><strong>db:reset<\/strong> does db:drop, db:setup<\/p>\n<\/li>\n<li><p><strong>db:migrate:reset<\/strong> does db:drop, db:create, db:migrate<\/p>\n<\/li>\n<\/ul>\n<p>Typically, you would use db:migrate after having made changes to the schema via new migration files (this makes sense only if there is already data in the database). db:schema:load is used when you setup a new instance of your app.<\/p>\n<hr \/>\n<h2>For rails 3.2.12:<\/h2>\n<p>I just checked the source and the dependencies are like this now:<\/p>\n<ul>\n<li><p><strong>db:create<\/strong> creates the database for the current env<\/p>\n<\/li>\n<li><p><strong>db:create:all<\/strong> creates the databases for all envs<\/p>\n<\/li>\n<li><p><strong>db:drop<\/strong> drops the database for the current env<\/p>\n<\/li>\n<li><p><strong>db:drop:all<\/strong> drops the databases for all envs<\/p>\n<\/li>\n<li><p><strong>db:migrate<\/strong> runs migrations for the current env that have not run yet<\/p>\n<\/li>\n<li><p><strong>db:migrate:up<\/strong> runs one specific migration<\/p>\n<\/li>\n<li><p><strong>db:migrate:down<\/strong> rolls back one specific migration<\/p>\n<\/li>\n<li><p><strong>db:migrate:status<\/strong> shows current migration status<\/p>\n<\/li>\n<li><p><strong>db:rollback<\/strong> rolls back the last migration<\/p>\n<\/li>\n<li><p><strong>db:forward<\/strong> advances the current schema version to the next one<\/p>\n<\/li>\n<li><p><strong>db:seed<\/strong> (only) runs the db\/seed.rb file<\/p>\n<\/li>\n<li><p><strong>db:schema:load<\/strong> loads the schema into the current env's database<\/p>\n<\/li>\n<li><p><strong>db:schema:dump<\/strong> dumps the current env's schema (and seems to create the db as well)<\/p>\n<\/li>\n<li><p><strong>db:setup<\/strong> runs db:create db:schema:load db:seed<\/p>\n<\/li>\n<li><p><strong>db:reset<\/strong> runs db:drop db:setup<\/p>\n<\/li>\n<li><p><strong>db:migrate:redo<\/strong> runs (db:migrate:down db:migrate:up) or (db:rollback db:migrate) depending on the specified migration<\/p>\n<\/li>\n<li><p><strong>db:migrate:reset<\/strong> runs db:drop db:create db:migrate<\/p>\n<\/li>\n<\/ul>\n<p>For further information please have a look at <a href=\"https:\/\/github.com\/rails\/rails\/blob\/v3.2.12\/activerecord\/lib\/active_record\/railties\/databases.rake\" rel=\"noreferrer\">https:\/\/github.com\/rails\/rails\/blob\/v3.2.12\/activerecord\/lib\/active_record\/railties\/databases.rake<\/a> (for Rails 3.2.x) and <a href=\"https:\/\/github.com\/rails\/rails\/blob\/v4.0.5\/activerecord\/lib\/active_record\/railties\/databases.rake\" rel=\"noreferrer\">https:\/\/github.com\/rails\/rails\/blob\/v4.0.5\/activerecord\/lib\/active_record\/railties\/databases.rake<\/a> (for Rails 4.0.x)<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 91851,
            "reputation": 23141,
            "user_id": 252014,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/i.stack.imgur.com\/60ARJ.jpg?s=256&g=1",
            "display_name": "Jaime Bellmyer",
            "link": "https:\/\/stackoverflow.com\/users\/252014\/jaime-bellmyer"
        },
        "is_accepted": true,
        "score": 1506,
        "last_activity_date": 1625531068,
        "last_edit_date": 1625531068.0,
        "creation_date": 1264805048,
        "answer_id": 2165727,
        "question_id": 2165665,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "### For Rails 3.2 or Rails 4+\r\n\r\nYou should use `request.original_url` to get the current URL.  Source code on current repo found [here][1].\r\n\r\nThis method is documented at [original_url method](http:\/\/api.rubyonrails.org\/classes\/ActionDispatch\/Request.html#method-i-original_url), but if you&#39;re curious, the implementation is:\r\n\r\n    def original_url\r\n      base_url + original_fullpath\r\n    end\r\n\r\n-----\r\n\r\n### For Rails 3:\r\n\r\n\r\nYou can write `&quot;#{request.protocol}#{request.host_with_port}#{request.fullpath}&quot;`, since `request.url` is now deprecated.\r\n\r\n----------\r\n\r\n\r\n### For Rails 2:\r\n\r\nYou  can write `request.url` instead of `request.request_uri`.  This combines the protocol (usually http:\/\/) with the host, and request_uri to give you the full address.\r\n\r\n\r\n  [1]: https:\/\/pix.realquadrant.com\/original_url",
        "body": "<h3>For Rails 3.2 or Rails 4+<\/h3>\n<p>You should use <code>request.original_url<\/code> to get the current URL.  Source code on current repo found <a href=\"https:\/\/pix.realquadrant.com\/original_url\" rel=\"noreferrer\">here<\/a>.<\/p>\n<p>This method is documented at <a href=\"http:\/\/api.rubyonrails.org\/classes\/ActionDispatch\/Request.html#method-i-original_url\" rel=\"noreferrer\">original_url method<\/a>, but if you're curious, the implementation is:<\/p>\n<pre><code>def original_url\n  base_url + original_fullpath\nend\n<\/code><\/pre>\n<hr \/>\n<h3>For Rails 3:<\/h3>\n<p>You can write <code>&quot;#{request.protocol}#{request.host_with_port}#{request.fullpath}&quot;<\/code>, since <code>request.url<\/code> is now deprecated.<\/p>\n<hr \/>\n<h3>For Rails 2:<\/h3>\n<p>You  can write <code>request.url<\/code> instead of <code>request.request_uri<\/code>.  This combines the protocol (usually http:\/\/) with the host, and request_uri to give you the full address.<\/p>\n",
        "community_owned_date": 1344925246.0
    },
    {
        "owner": {
            "account_id": 115013,
            "reputation": 25743,
            "user_id": 302187,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/c28713f646f419aee51405c6d04d3a4b?s=256&d=identicon&r=PG",
            "display_name": "Konstantin Haase",
            "link": "https:\/\/stackoverflow.com\/users\/302187\/konstantin-haase"
        },
        "is_accepted": true,
        "score": 1501,
        "last_activity_date": 1641458540,
        "last_edit_date": 1641458540.0,
        "creation_date": 1275927940,
        "answer_id": 2991254,
        "question_id": 2989762,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "&lt;!-- language: lang-ruby --&gt;\r\n\r\n    #!\/usr\/bin\/env ruby\r\n    \r\n    =begin\r\n    Every body mentioned this way\r\n    to have multiline comments.\r\n\r\n    The =begin and =end must be at the beginning of the line or\r\n    it will be a syntax error.\r\n    =end\r\n    \r\n    puts &quot;Hello world!&quot;\r\n    \r\n    &lt;&lt;-DOC\r\n    Also, you could create a docstring.\r\n    which...\r\n    DOC\r\n    \r\n    puts &quot;Hello world!&quot;\r\n    \r\n    &quot;..is kinda ugly and creates\r\n    a String instance, but I know one guy\r\n    with a Smalltalk background, who\r\n    does this.&quot;\r\n    \r\n    puts &quot;Hello world!&quot;\r\n    \r\n    ##\r\n    # most\r\n    # people\r\n    # do\r\n    # this\r\n\r\n    \r\n    __END__\r\n    \r\n    But all forgot there is another option.\r\n    Only at the end of a file, of course.\r\n\r\n* This is how it looks (via screenshot) - otherwise it&#39;s hard to interpret how the above comments will look. **Click to Zoom-in**:\r\n\r\n[![Comments in a text-editor][1]][1]\r\n\r\n\r\n  [1]: https:\/\/i.stack.imgur.com\/AnchE.png",
        "body": "<pre class=\"lang-ruby prettyprint-override\"><code>#!\/usr\/bin\/env ruby\n\n=begin\nEvery body mentioned this way\nto have multiline comments.\n\nThe =begin and =end must be at the beginning of the line or\nit will be a syntax error.\n=end\n\nputs &quot;Hello world!&quot;\n\n&lt;&lt;-DOC\nAlso, you could create a docstring.\nwhich...\nDOC\n\nputs &quot;Hello world!&quot;\n\n&quot;..is kinda ugly and creates\na String instance, but I know one guy\nwith a Smalltalk background, who\ndoes this.&quot;\n\nputs &quot;Hello world!&quot;\n\n##\n# most\n# people\n# do\n# this\n\n\n__END__\n\nBut all forgot there is another option.\nOnly at the end of a file, of course.\n<\/code><\/pre>\n<ul>\n<li>This is how it looks (via screenshot) - otherwise it's hard to interpret how the above comments will look. <strong>Click to Zoom-in<\/strong>:<\/li>\n<\/ul>\n<p><a href=\"https:\/\/i.stack.imgur.com\/AnchE.png\" rel=\"noreferrer\"><img src=\"https:\/\/i.stack.imgur.com\/AnchE.png\" alt=\"Comments in a text-editor\" \/><\/a><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 26774,
            "reputation": 21310,
            "user_id": 69959,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/2fb9c31cbd26f8bdfa26485cb7da6a84?s=256&d=identicon&r=PG",
            "display_name": "Corban Brook",
            "link": "https:\/\/stackoverflow.com\/users\/69959\/corban-brook"
        },
        "is_accepted": true,
        "score": 1493,
        "last_activity_date": 1444131564,
        "last_edit_date": 1444131564.0,
        "creation_date": 1242836098,
        "answer_id": 888877,
        "question_id": 885414,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "`.nil?` can be used on any object and is true if the object is nil.\r\n\r\n`.empty?` can be used on strings, arrays and hashes and returns true if:\r\n\r\n - String length == 0\r\n - Array length == 0\r\n - Hash length == 0\r\n\r\nRunning `.empty?` on something that is nil will throw a `NoMethodError`.\r\n\r\nThat is where `.blank?` comes in. It is [implemented by Rails][1] and will operate on any object as well as work like `.empty?` on strings, arrays and hashes.\r\n\r\n    nil.blank? == true\r\n    false.blank? == true\r\n    [].blank? == true\r\n    {}.blank? == true\r\n    &quot;&quot;.blank? == true\r\n    5.blank? == false\r\n    0.blank? == false\r\n\r\n`.blank?` also evaluates true on strings which are non-empty but contain only whitespace:\r\n\r\n    &quot;  &quot;.blank? == true\r\n    &quot;  &quot;.empty? == false\r\n\r\n[Rails also provides][2] `.present?`, which returns the negation of `.blank?`.\r\n\r\nArray gotcha: `blank?` will return `false` even if all *elements* of an array are blank. To determine blankness in this case, use `all?` with `blank?`, for example:\r\n\r\n    [ nil, &#39;&#39; ].blank? == false\r\n    [ nil, &#39;&#39; ].all? &amp;:blank? == true \r\n\r\n\r\n  [1]: http:\/\/apidock.com\/rails\/Object\/blank%3F\r\n  [2]: http:\/\/apidock.com\/rails\/Object\/presence",
        "body": "<p><code>.nil?<\/code> can be used on any object and is true if the object is nil.<\/p>\n\n<p><code>.empty?<\/code> can be used on strings, arrays and hashes and returns true if:<\/p>\n\n<ul>\n<li>String length == 0<\/li>\n<li>Array length == 0<\/li>\n<li>Hash length == 0<\/li>\n<\/ul>\n\n<p>Running <code>.empty?<\/code> on something that is nil will throw a <code>NoMethodError<\/code>.<\/p>\n\n<p>That is where <code>.blank?<\/code> comes in. It is <a href=\"http:\/\/apidock.com\/rails\/Object\/blank%3F\" rel=\"noreferrer\">implemented by Rails<\/a> and will operate on any object as well as work like <code>.empty?<\/code> on strings, arrays and hashes.<\/p>\n\n<pre><code>nil.blank? == true\nfalse.blank? == true\n[].blank? == true\n{}.blank? == true\n\"\".blank? == true\n5.blank? == false\n0.blank? == false\n<\/code><\/pre>\n\n<p><code>.blank?<\/code> also evaluates true on strings which are non-empty but contain only whitespace:<\/p>\n\n<pre><code>\"  \".blank? == true\n\"  \".empty? == false\n<\/code><\/pre>\n\n<p><a href=\"http:\/\/apidock.com\/rails\/Object\/presence\" rel=\"noreferrer\">Rails also provides<\/a> <code>.present?<\/code>, which returns the negation of <code>.blank?<\/code>.<\/p>\n\n<p>Array gotcha: <code>blank?<\/code> will return <code>false<\/code> even if all <em>elements<\/em> of an array are blank. To determine blankness in this case, use <code>all?<\/code> with <code>blank?<\/code>, for example:<\/p>\n\n<pre><code>[ nil, '' ].blank? == false\n[ nil, '' ].all? &amp;:blank? == true \n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 321,
            "reputation": 16647,
            "user_id": 402,
            "user_type": "registered",
            "accept_rate": 40,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/5c571dd74ce91c8affad3dc0564a3c59?s=256&d=identicon&r=PG",
            "display_name": "Steve Willard",
            "link": "https:\/\/stackoverflow.com\/users\/402\/steve-willard"
        },
        "is_accepted": true,
        "score": 1467,
        "last_activity_date": 1588857075,
        "last_edit_date": 1588857075.0,
        "creation_date": 1217947365,
        "answer_id": 2400,
        "question_id": 2232,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "This explanation is based on a commented [Ruby script][1] from a friend of mine. If you want to improve the script, feel free to update it at the link.\r\n\r\nFirst, note that when Ruby calls out to a shell, it typically calls `\/bin\/sh`, *not* Bash. Some Bash syntax is not supported by `\/bin\/sh` on all systems.\r\n\r\nHere are ways to execute a shell script:\r\n\r\n    cmd = &quot;echo &#39;hi&#39;&quot; # Sample string that can be used\r\n\r\n1. &lt;code&gt;Kernel#\\`&lt;\/code&gt; , commonly called backticks \u2013 &lt;code&gt;\\`cmd\\`&lt;\/code&gt;\r\n\r\n  This is like many other languages, including Bash, PHP, and Perl.\r\n  \r\n  Returns the result (i.e. standard output) of the shell command.\r\n  \r\n  Docs: http:\/\/ruby-doc.org\/core\/Kernel.html#method-i-60\r\n    \r\n        value = `echo &#39;hi&#39;`\r\n        value = `#{cmd}`\r\n\r\n\r\n2. Built-in syntax, `%x( cmd )`\r\n\r\n  Following the `x` character is a delimiter, which can be any character.\r\n  If the delimiter is one of the characters `(`, `[`, `{`, or `&lt;`,\r\n  the literal consists of the characters up to the matching closing delimiter,\r\n  taking account of nested delimiter pairs. For all other delimiters, the\r\n  literal comprises the characters up to the next occurrence of the\r\n  delimiter character.  String interpolation `#{ ... }` is allowed.\r\n  \r\n  Returns the result (i.e. standard output) of the shell command, just like the backticks.\r\n  \r\n  Docs: https:\/\/docs.ruby-lang.org\/en\/master\/syntax\/literals_rdoc.html#label-Percent+Strings\r\n  \r\n        value = %x( echo &#39;hi&#39; )\r\n        value = %x[ #{cmd} ]\r\n\r\n\r\n3. `Kernel#system`\r\n\r\n  Executes the given command in a subshell. \r\n\r\n  Returns `true` if the command was found and run successfully, `false` otherwise.\r\n\r\n  Docs: http:\/\/ruby-doc.org\/core\/Kernel.html#method-i-system\r\n\r\n        wasGood = system( &quot;echo &#39;hi&#39;&quot; )\r\n        wasGood = system( cmd )\r\n\r\n\r\n4. `Kernel#exec`\r\n\r\n  Replaces the current process by running the given external command.\r\n\r\n  Returns none, the current process is replaced and never continues.\r\n\r\n  Docs: http:\/\/ruby-doc.org\/core\/Kernel.html#method-i-exec\r\n\r\n        exec( &quot;echo &#39;hi&#39;&quot; )\r\n        exec( cmd ) # Note: this will never be reached because of the line above\r\n\r\n\r\nHere&#39;s some extra advice:\r\n`$?`, which is the same as `$CHILD_STATUS`, accesses the status of the last system executed command if you use the backticks, `system()` or `%x{}`.\r\nYou can then access the `exitstatus` and `pid` properties:\r\n\r\n    $?.exitstatus\r\n\r\nFor more reading see:\r\n\r\n* http:\/\/www.elctech.com\/blog\/i-m-in-ur-commandline-executin-ma-commands\r\n* http:\/\/blog.jayfields.com\/2006\/06\/ruby-kernel-system-exec-and-x.html\r\n* http:\/\/tech.natemurray.com\/2007\/03\/ruby-shell-commands.html\r\n\r\n\r\n  [1]: http:\/\/gist.github.com\/4069",
        "body": "<p>This explanation is based on a commented <a href=\"http:\/\/gist.github.com\/4069\" rel=\"noreferrer\">Ruby script<\/a> from a friend of mine. If you want to improve the script, feel free to update it at the link.<\/p>\n\n<p>First, note that when Ruby calls out to a shell, it typically calls <code>\/bin\/sh<\/code>, <em>not<\/em> Bash. Some Bash syntax is not supported by <code>\/bin\/sh<\/code> on all systems.<\/p>\n\n<p>Here are ways to execute a shell script:<\/p>\n\n<pre><code>cmd = \"echo 'hi'\" # Sample string that can be used\n<\/code><\/pre>\n\n<ol>\n<li><p><code>Kernel#`<\/code> , commonly called backticks \u2013 <code>`cmd`<\/code><\/p>\n\n<p>This is like many other languages, including Bash, PHP, and Perl.<\/p>\n\n<p>Returns the result (i.e. standard output) of the shell command.<\/p>\n\n<p>Docs: <a href=\"http:\/\/ruby-doc.org\/core\/Kernel.html#method-i-60\" rel=\"noreferrer\">http:\/\/ruby-doc.org\/core\/Kernel.html#method-i-60<\/a><\/p>\n\n<pre><code>value = `echo 'hi'`\nvalue = `#{cmd}`\n<\/code><\/pre><\/li>\n<li><p>Built-in syntax, <code>%x( cmd )<\/code><\/p>\n\n<p>Following the <code>x<\/code> character is a delimiter, which can be any character.\nIf the delimiter is one of the characters <code>(<\/code>, <code>[<\/code>, <code>{<\/code>, or <code>&lt;<\/code>,\nthe literal consists of the characters up to the matching closing delimiter,\ntaking account of nested delimiter pairs. For all other delimiters, the\nliteral comprises the characters up to the next occurrence of the\ndelimiter character.  String interpolation <code>#{ ... }<\/code> is allowed.<\/p>\n\n<p>Returns the result (i.e. standard output) of the shell command, just like the backticks.<\/p>\n\n<p>Docs: <a href=\"https:\/\/docs.ruby-lang.org\/en\/master\/syntax\/literals_rdoc.html#label-Percent+Strings\" rel=\"noreferrer\">https:\/\/docs.ruby-lang.org\/en\/master\/syntax\/literals_rdoc.html#label-Percent+Strings<\/a><\/p>\n\n<pre><code>value = %x( echo 'hi' )\nvalue = %x[ #{cmd} ]\n<\/code><\/pre><\/li>\n<li><p><code>Kernel#system<\/code><\/p>\n\n<p>Executes the given command in a subshell. <\/p>\n\n<p>Returns <code>true<\/code> if the command was found and run successfully, <code>false<\/code> otherwise.<\/p>\n\n<p>Docs: <a href=\"http:\/\/ruby-doc.org\/core\/Kernel.html#method-i-system\" rel=\"noreferrer\">http:\/\/ruby-doc.org\/core\/Kernel.html#method-i-system<\/a><\/p>\n\n<pre><code>wasGood = system( \"echo 'hi'\" )\nwasGood = system( cmd )\n<\/code><\/pre><\/li>\n<li><p><code>Kernel#exec<\/code><\/p>\n\n<p>Replaces the current process by running the given external command.<\/p>\n\n<p>Returns none, the current process is replaced and never continues.<\/p>\n\n<p>Docs: <a href=\"http:\/\/ruby-doc.org\/core\/Kernel.html#method-i-exec\" rel=\"noreferrer\">http:\/\/ruby-doc.org\/core\/Kernel.html#method-i-exec<\/a><\/p>\n\n<pre><code>exec( \"echo 'hi'\" )\nexec( cmd ) # Note: this will never be reached because of the line above\n<\/code><\/pre><\/li>\n<\/ol>\n\n<p>Here's some extra advice:\n<code>$?<\/code>, which is the same as <code>$CHILD_STATUS<\/code>, accesses the status of the last system executed command if you use the backticks, <code>system()<\/code> or <code>%x{}<\/code>.\nYou can then access the <code>exitstatus<\/code> and <code>pid<\/code> properties:<\/p>\n\n<pre><code>$?.exitstatus\n<\/code><\/pre>\n\n<p>For more reading see:<\/p>\n\n<ul>\n<li><a href=\"http:\/\/www.elctech.com\/blog\/i-m-in-ur-commandline-executin-ma-commands\" rel=\"noreferrer\">http:\/\/www.elctech.com\/blog\/i-m-in-ur-commandline-executin-ma-commands<\/a><\/li>\n<li><a href=\"http:\/\/blog.jayfields.com\/2006\/06\/ruby-kernel-system-exec-and-x.html\" rel=\"noreferrer\">http:\/\/blog.jayfields.com\/2006\/06\/ruby-kernel-system-exec-and-x.html<\/a><\/li>\n<li><a href=\"http:\/\/tech.natemurray.com\/2007\/03\/ruby-shell-commands.html\" rel=\"noreferrer\">http:\/\/tech.natemurray.com\/2007\/03\/ruby-shell-commands.html<\/a><\/li>\n<\/ul>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 73470,
            "reputation": 95649,
            "user_id": 211563,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/d32a10a2f047dec1e5582e74cba6b3ec?s=256&d=identicon&r=PG",
            "display_name": "Andrew Marshall",
            "link": "https:\/\/stackoverflow.com\/users\/211563\/andrew-marshall"
        },
        "is_accepted": true,
        "score": 1464,
        "last_activity_date": 1676819198,
        "last_edit_date": 1676819198.0,
        "creation_date": 1333741081,
        "answer_id": 10048406,
        "question_id": 10048173,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "**TL;DR**: Use `StandardError` instead for general exception catching. When the original exception is re-raised (e.g. when rescuing to log the exception only), rescuing `Exception` is probably okay.\r\n\r\n---\r\n\r\n`Exception` is the root of [Ruby&#39;s exception hierarchy](https:\/\/web.archive.org\/web\/20200527195436\/http:\/\/rubylearning.com\/images\/exception.jpg), so when you `rescue Exception` you rescue from *everything*, including subclasses such as `SyntaxError`, `LoadError`, and `Interrupt`.\r\n\r\nRescuing `Interrupt` prevents the user from using &lt;kbd&gt;CTRL&lt;\/kbd&gt;&lt;kbd&gt;C&lt;\/kbd&gt; to exit the program.\r\n\r\nRescuing `SignalException` prevents the program from responding correctly to signals. It will be unkillable except by `kill -9`.\r\n\r\nRescuing `SyntaxError` means that `eval`s that fail will do so silently.\r\n\r\nAll of these can be shown by running this program, and trying to &lt;kbd&gt;CTRL&lt;\/kbd&gt;&lt;kbd&gt;C&lt;\/kbd&gt; or `kill` it:\r\n\r\n    loop do\r\n      begin\r\n        sleep 1\r\n        eval &quot;djsakru3924r9eiuorwju3498 += 5u84fior8u8t4ruyf8ihiure&quot;\r\n      rescue Exception\r\n        puts &quot;I refuse to fail or be stopped!&quot;\r\n      end\r\n    end\r\n\r\nRescuing from `Exception` isn&#39;t even the default. Doing\r\n\r\n    begin\r\n      # iceberg!\r\n    rescue\r\n      # lifeboats\r\n    end\r\n\r\ndoes not rescue from `Exception`, it rescues from `StandardError`. You should generally specify something more specific than the default `StandardError`, but rescuing from `Exception` *broadens* the scope rather than narrowing it, and can have catastrophic results and make bug-hunting extremely difficult.\r\n\r\n----------\r\n\r\nIf you have a situation where you do want to rescue from `StandardError` and you need a variable with the exception, you can use this form:\r\n\r\n    begin\r\n      # iceberg!\r\n    rescue =&gt; e\r\n      # lifeboats\r\n    end\r\n\r\nwhich is equivalent to:\r\n\r\n    begin\r\n      # iceberg!\r\n    rescue StandardError =&gt; e\r\n      # lifeboats\r\n    end\r\n\r\n----------\r\n\r\nOne of the few common cases where it\u2019s sane to rescue from `Exception` is for logging\/reporting purposes, in which case you should immediately re-raise the exception:\r\n\r\n    begin\r\n      # iceberg?\r\n    rescue Exception =&gt; e\r\n      # do some logging\r\n      raise # not enough lifeboats ;)\r\n    end",
        "body": "<p><strong>TL;DR<\/strong>: Use <code>StandardError<\/code> instead for general exception catching. When the original exception is re-raised (e.g. when rescuing to log the exception only), rescuing <code>Exception<\/code> is probably okay.<\/p>\n<hr \/>\n<p><code>Exception<\/code> is the root of <a href=\"https:\/\/web.archive.org\/web\/20200527195436\/http:\/\/rubylearning.com\/images\/exception.jpg\" rel=\"noreferrer\">Ruby's exception hierarchy<\/a>, so when you <code>rescue Exception<\/code> you rescue from <em>everything<\/em>, including subclasses such as <code>SyntaxError<\/code>, <code>LoadError<\/code>, and <code>Interrupt<\/code>.<\/p>\n<p>Rescuing <code>Interrupt<\/code> prevents the user from using <kbd>CTRL<\/kbd><kbd>C<\/kbd> to exit the program.<\/p>\n<p>Rescuing <code>SignalException<\/code> prevents the program from responding correctly to signals. It will be unkillable except by <code>kill -9<\/code>.<\/p>\n<p>Rescuing <code>SyntaxError<\/code> means that <code>eval<\/code>s that fail will do so silently.<\/p>\n<p>All of these can be shown by running this program, and trying to <kbd>CTRL<\/kbd><kbd>C<\/kbd> or <code>kill<\/code> it:<\/p>\n<pre><code>loop do\n  begin\n    sleep 1\n    eval &quot;djsakru3924r9eiuorwju3498 += 5u84fior8u8t4ruyf8ihiure&quot;\n  rescue Exception\n    puts &quot;I refuse to fail or be stopped!&quot;\n  end\nend\n<\/code><\/pre>\n<p>Rescuing from <code>Exception<\/code> isn't even the default. Doing<\/p>\n<pre><code>begin\n  # iceberg!\nrescue\n  # lifeboats\nend\n<\/code><\/pre>\n<p>does not rescue from <code>Exception<\/code>, it rescues from <code>StandardError<\/code>. You should generally specify something more specific than the default <code>StandardError<\/code>, but rescuing from <code>Exception<\/code> <em>broadens<\/em> the scope rather than narrowing it, and can have catastrophic results and make bug-hunting extremely difficult.<\/p>\n<hr \/>\n<p>If you have a situation where you do want to rescue from <code>StandardError<\/code> and you need a variable with the exception, you can use this form:<\/p>\n<pre><code>begin\n  # iceberg!\nrescue =&gt; e\n  # lifeboats\nend\n<\/code><\/pre>\n<p>which is equivalent to:<\/p>\n<pre><code>begin\n  # iceberg!\nrescue StandardError =&gt; e\n  # lifeboats\nend\n<\/code><\/pre>\n<hr \/>\n<p>One of the few common cases where it\u2019s sane to rescue from <code>Exception<\/code> is for logging\/reporting purposes, in which case you should immediately re-raise the exception:<\/p>\n<pre><code>begin\n  # iceberg?\nrescue Exception =&gt; e\n  # do some logging\n  raise # not enough lifeboats ;)\nend\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 50123,
            "reputation": 365613,
            "user_id": 149392,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/7a561ec0875fcbbe3066ea8fe288ec77?s=256&d=identicon&r=PG",
            "display_name": "sepp2k",
            "link": "https:\/\/stackoverflow.com\/users\/149392\/sepp2k"
        },
        "is_accepted": true,
        "score": 1425,
        "last_activity_date": 1504034054,
        "last_edit_date": 1504034054.0,
        "creation_date": 1250198894,
        "answer_id": 1274703,
        "question_id": 1274675,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "`%w(foo bar)` is a shortcut for `[&quot;foo&quot;, &quot;bar&quot;]`. Meaning it&#39;s a notation to write an array of strings separated by spaces instead of commas and without quotes around them. You can find a list of ways of writing literals in [zenspider&#39;s quickref][1].\r\n\r\n\r\n  [1]: http:\/\/www.zenspider.com\/ruby\/quickref.html#types",
        "body": "<p><code>%w(foo bar)<\/code> is a shortcut for <code>[\"foo\", \"bar\"]<\/code>. Meaning it's a notation to write an array of strings separated by spaces instead of commas and without quotes around them. You can find a list of ways of writing literals in <a href=\"http:\/\/www.zenspider.com\/ruby\/quickref.html#types\" rel=\"noreferrer\">zenspider's quickref<\/a>.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 6792,
            "reputation": 63993,
            "user_id": 11543,
            "user_type": "registered",
            "accept_rate": 71,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/3928085cafc1e496fb3d990a9959f233?s=256&d=identicon&r=PG",
            "display_name": "mjs",
            "link": "https:\/\/stackoverflow.com\/users\/11543\/mjs"
        },
        "is_accepted": true,
        "score": 1346,
        "last_activity_date": 1370875035,
        "last_edit_date": null,
        "creation_date": 1370875035,
        "answer_id": 17026442,
        "question_id": 17026441,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Use the `-v` flag:\r\n\r\n    $ gem install fog -v 1.8",
        "body": "<p>Use the <code>-v<\/code> flag:<\/p>\n\n<pre><code>$ gem install fog -v 1.8\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2172,
            "reputation": 365278,
            "user_id": 2988,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/ed181f8c80df53d2b67a4f4fff088ed4?s=256&d=identicon&r=PG",
            "display_name": "J&#246;rg W Mittag",
            "link": "https:\/\/stackoverflow.com\/users\/2988\/j%c3%b6rg-w-mittag"
        },
        "is_accepted": true,
        "score": 1323,
        "last_activity_date": 1690509633,
        "last_edit_date": 1690509633.0,
        "creation_date": 1265202275,
        "answer_id": 2192010,
        "question_id": 2191632,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Yes, `ensure` ensures that the code is always evaluated. That&#39;s why it&#39;s called `ensure`. So, it is equivalent to Java&#39;s and C#&#39;s `finally`.\r\n\r\nThe general flow of `begin`\/`rescue`\/`else`\/`ensure`\/`end` looks like this:\r\n\r\n    begin\r\n      # something which might raise an exception\r\n    rescue SomeExceptionClass =&gt; some_variable\r\n      # code that deals with some exception\r\n    rescue SomeOtherException =&gt; some_other_variable\r\n      # code that deals with some other exception\r\n    else\r\n      # code that runs only if *no* exception was raised\r\n    ensure\r\n      # ensure that this code always runs, no matter what\r\n      # does not change the final value of the block\r\n    end\r\n\r\nYou can leave out `rescue`, `ensure` or `else`. You can also leave out the variables in which case you won&#39;t be able to inspect the exception in your exception handling code. (Well, you can always use the global exception variable to access the last exception that was raised, but that&#39;s a little bit hacky.) And you can leave out the exception class, in which case all exceptions that inherit from `StandardError` will be caught. (Please note that this does not mean that *all* exceptions are caught, because there are exceptions which are instances of `Exception` but not `StandardError`. Mostly very severe exceptions that compromise the integrity of the program such as `SystemStackError`, `NoMemoryError`, `SecurityError`, `NotImplementedError`, `LoadError`, `SyntaxError`, `ScriptError`, `Interrupt`, `SignalException` or `SystemExit`.)\r\n\r\nSome blocks form implicit exception blocks. For example, method definitions are implicitly also exception blocks, so instead of writing\r\n\r\n    def foo\r\n      begin\r\n        # ...\r\n      rescue\r\n        # ...\r\n      end\r\n    end\r\n\r\nyou write just\r\n\r\n    def foo\r\n      # ...\r\n    rescue\r\n      # ...\r\n    end\r\n\r\nor\r\n\r\n    def foo\r\n      # ...\r\n    ensure\r\n      # ...\r\n    end\r\n\r\nThe same applies to `class` definitions and `module` definitions.\r\n\r\nHowever, in the specific case you are asking about, there is actually a much better idiom. In general, when you work with some resource which you need to clean up at the end, you do that by passing a block to a method which does all the cleanup for you. It&#39;s similar to a `using` block in C#, except that Ruby is actually powerful enough that you don&#39;t have to wait for the high priests of Microsoft to come down from the mountain and graciously change their compiler for you. In Ruby, you can just implement it yourself:\r\n\r\n    # This is what you want to do:\r\n    File.open(&#39;myFile.txt&#39;, &#39;w&#39;) do |file|\r\n      file.puts content\r\n    end\r\n\r\n    # And this is how you might implement it:\r\n    def File.open(filename, mode=&#39;r&#39;, perm=nil, opt=nil)\r\n      yield filehandle = new(filename, mode, perm, opt)\r\n    ensure\r\n      filehandle&amp;.close\r\n    end\r\n\r\nAnd what do you know: this is *already* available in the core library as `File.open`. But it is a general pattern that you can use in your own code as well, for implementing any kind of resource cleanup (&#224; la `using` in C#) or transactions or whatever else you might think of.\r\n\r\nThe only case where this doesn&#39;t work, if acquiring and releasing the resource are distributed over different parts of the program. But if it is localized, as in your example, then you can easily use these resource blocks.\r\n\r\n---\r\nBTW: in modern C#, `using` is actually superfluous, because you can implement Ruby-style resource blocks yourself:\r\n\r\n```lang-csharp\r\nclass File\r\n{\r\n    static T open&lt;T&gt;(string filename, string mode, Func&lt;File, T&gt; block)\r\n    {\r\n        var handle = new File(filename, mode);\r\n        try\r\n        {\r\n            return block(handle);\r\n        }\r\n        finally\r\n        {\r\n            handle.Dispose();\r\n        }\r\n    }\r\n}\r\n\r\n\/\/ Usage:\r\n\r\nFile.open(&quot;myFile.txt&quot;, &quot;w&quot;, (file) =&gt;\r\n{\r\n    file.WriteLine(contents);\r\n});\r\n```",
        "body": "<p>Yes, <code>ensure<\/code> ensures that the code is always evaluated. That's why it's called <code>ensure<\/code>. So, it is equivalent to Java's and C#'s <code>finally<\/code>.<\/p>\n<p>The general flow of <code>begin<\/code>\/<code>rescue<\/code>\/<code>else<\/code>\/<code>ensure<\/code>\/<code>end<\/code> looks like this:<\/p>\n<pre><code>begin\n  # something which might raise an exception\nrescue SomeExceptionClass =&gt; some_variable\n  # code that deals with some exception\nrescue SomeOtherException =&gt; some_other_variable\n  # code that deals with some other exception\nelse\n  # code that runs only if *no* exception was raised\nensure\n  # ensure that this code always runs, no matter what\n  # does not change the final value of the block\nend\n<\/code><\/pre>\n<p>You can leave out <code>rescue<\/code>, <code>ensure<\/code> or <code>else<\/code>. You can also leave out the variables in which case you won't be able to inspect the exception in your exception handling code. (Well, you can always use the global exception variable to access the last exception that was raised, but that's a little bit hacky.) And you can leave out the exception class, in which case all exceptions that inherit from <code>StandardError<\/code> will be caught. (Please note that this does not mean that <em>all<\/em> exceptions are caught, because there are exceptions which are instances of <code>Exception<\/code> but not <code>StandardError<\/code>. Mostly very severe exceptions that compromise the integrity of the program such as <code>SystemStackError<\/code>, <code>NoMemoryError<\/code>, <code>SecurityError<\/code>, <code>NotImplementedError<\/code>, <code>LoadError<\/code>, <code>SyntaxError<\/code>, <code>ScriptError<\/code>, <code>Interrupt<\/code>, <code>SignalException<\/code> or <code>SystemExit<\/code>.)<\/p>\n<p>Some blocks form implicit exception blocks. For example, method definitions are implicitly also exception blocks, so instead of writing<\/p>\n<pre><code>def foo\n  begin\n    # ...\n  rescue\n    # ...\n  end\nend\n<\/code><\/pre>\n<p>you write just<\/p>\n<pre><code>def foo\n  # ...\nrescue\n  # ...\nend\n<\/code><\/pre>\n<p>or<\/p>\n<pre><code>def foo\n  # ...\nensure\n  # ...\nend\n<\/code><\/pre>\n<p>The same applies to <code>class<\/code> definitions and <code>module<\/code> definitions.<\/p>\n<p>However, in the specific case you are asking about, there is actually a much better idiom. In general, when you work with some resource which you need to clean up at the end, you do that by passing a block to a method which does all the cleanup for you. It's similar to a <code>using<\/code> block in C#, except that Ruby is actually powerful enough that you don't have to wait for the high priests of Microsoft to come down from the mountain and graciously change their compiler for you. In Ruby, you can just implement it yourself:<\/p>\n<pre><code># This is what you want to do:\nFile.open('myFile.txt', 'w') do |file|\n  file.puts content\nend\n\n# And this is how you might implement it:\ndef File.open(filename, mode='r', perm=nil, opt=nil)\n  yield filehandle = new(filename, mode, perm, opt)\nensure\n  filehandle&amp;.close\nend\n<\/code><\/pre>\n<p>And what do you know: this is <em>already<\/em> available in the core library as <code>File.open<\/code>. But it is a general pattern that you can use in your own code as well, for implementing any kind of resource cleanup (\u00e0 la <code>using<\/code> in C#) or transactions or whatever else you might think of.<\/p>\n<p>The only case where this doesn't work, if acquiring and releasing the resource are distributed over different parts of the program. But if it is localized, as in your example, then you can easily use these resource blocks.<\/p>\n<hr \/>\n<p>BTW: in modern C#, <code>using<\/code> is actually superfluous, because you can implement Ruby-style resource blocks yourself:<\/p>\n<pre class=\"lang-csharp prettyprint-override\"><code>class File\n{\n    static T open&lt;T&gt;(string filename, string mode, Func&lt;File, T&gt; block)\n    {\n        var handle = new File(filename, mode);\n        try\n        {\n            return block(handle);\n        }\n        finally\n        {\n            handle.Dispose();\n        }\n    }\n}\n\n\/\/ Usage:\n\nFile.open(&quot;myFile.txt&quot;, &quot;w&quot;, (file) =&gt;\n{\n    file.WriteLine(contents);\n});\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1468834,
            "reputation": 89000,
            "user_id": 1380918,
            "user_type": "registered",
            "accept_rate": 98,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/6e7c96a05fdd3ab2a61d07e78cc0f59c?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "hexacyanide",
            "link": "https:\/\/stackoverflow.com\/users\/1380918\/hexacyanide"
        },
        "is_accepted": false,
        "score": 1303,
        "last_activity_date": 1699603547,
        "last_edit_date": 1699603547.0,
        "creation_date": 1387310544,
        "answer_id": 20643568,
        "question_id": 20643470,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "For even newer version of Node.js (v8.1.4), the events and calls are similar or identical to older versions, but it&#39;s encouraged to use the standard newer language features. Examples:\r\n\r\nFor buffered, non-stream formatted output (you get it all at once), use [`child_process.exec`][1]:\r\n\r\n    const { exec } = require(&#39;child_process&#39;);\r\n    exec(&#39;cat *.js bad_file | wc -l&#39;, (err, stdout, stderr) =&gt; {\r\n      if (err) {\r\n        \/\/ node couldn&#39;t execute the command\r\n        return;\r\n      }\r\n\r\n      \/\/ the *entire* stdout and stderr (buffered)\r\n      console.log(`stdout: ${stdout}`);\r\n      console.log(`stderr: ${stderr}`);\r\n    });\r\n\r\nYou can also use it with Promises:\r\n\r\n    const util = require(&#39;util&#39;);\r\n    const exec = util.promisify(require(&#39;child_process&#39;).exec);\r\n    \r\n    async function ls() {\r\n      const { stdout, stderr } = await exec(&#39;ls&#39;);\r\n      console.log(&#39;stdout:&#39;, stdout);\r\n      console.log(&#39;stderr:&#39;, stderr);\r\n    }\r\n    ls();\r\n\r\nIf you wish to receive the data gradually in chunks (output as a stream), use [`child_process.spawn`][2]:\r\n\r\n    const { spawn } = require(&#39;child_process&#39;);\r\n    const child = spawn(&#39;ls&#39;, [&#39;-lh&#39;, &#39;\/usr&#39;]);\r\n    \r\n    \/\/ use child.stdout.setEncoding(&#39;utf8&#39;); if you want text chunks\r\n    child.stdout.on(&#39;data&#39;, (chunk) =&gt; {\r\n      \/\/ data from standard output is here as buffers\r\n    });\r\n    \r\n    \/\/ since these are streams, you can pipe them elsewhere\r\n    child.stderr.pipe(dest);\r\n    \r\n    child.on(&#39;close&#39;, (code) =&gt; {\r\n      console.log(`child process exited with code ${code}`);\r\n    });\r\n\r\nBoth of these functions have a synchronous counterpart. An example for [`child_process.execSync`][3]:\r\n\r\n    const { execSync } = require(&#39;child_process&#39;);\r\n    \/\/ stderr is sent to stderr of parent process\r\n    \/\/ you can set options.stdio if you want it to go elsewhere\r\n    let stdout = execSync(&#39;ls&#39;);\r\n\r\nAs well as [`child_process.spawnSync`][4]:\r\n\r\n    const { spawnSync} = require(&#39;child_process&#39;);\r\n    const child = spawnSync(&#39;ls&#39;, [&#39;-lh&#39;, &#39;\/usr&#39;]);\r\n\r\n    console.log(&#39;error&#39;, child.error);\r\n    console.log(&#39;stdout &#39;, child.stdout);\r\n    console.log(&#39;stderr &#39;, child.stderr);\r\n\r\n----------\r\n**Note:** The following code is still functional, but is primarily targeted at users of ES5 and before.\r\n\r\nThe module for spawning child processes with Node.js is well documented in the [documentation][5] (v5.0.0). To execute a command and fetch its complete output as a buffer, use [`child_process.exec`][6]:\r\n\r\n    var exec = require(&#39;child_process&#39;).exec;\r\n    var cmd = &#39;prince -v builds\/pdf\/book.html -o builds\/pdf\/book.pdf&#39;;\r\n\r\n    exec(cmd, function(error, stdout, stderr) {\r\n      \/\/ command output is in stdout\r\n    });\r\n\r\nIf you need to use handle process I\/O with streams, such as when you are expecting large amounts of output, use [`child_process.spawn`][7]:\r\n\r\n    var spawn = require(&#39;child_process&#39;).spawn;\r\n    var child = spawn(&#39;prince&#39;, [\r\n      &#39;-v&#39;, &#39;builds\/pdf\/book.html&#39;,\r\n      &#39;-o&#39;, &#39;builds\/pdf\/book.pdf&#39;\r\n    ]);\r\n\r\n    child.stdout.on(&#39;data&#39;, function(chunk) {\r\n      \/\/ output will be here in chunks\r\n    });\r\n\r\n    \/\/ or if you want to send output elsewhere\r\n    child.stdout.pipe(dest);\r\n\r\nIf you are executing a file rather than a command, you might want to use [`child_process.execFile`][8], which parameters which are almost identical to `spawn`, but has a fourth callback parameter like `exec` for retrieving output buffers. That might look a bit like this:\r\n\r\n    var execFile = require(&#39;child_process&#39;).execFile;\r\n    execFile(file, args, options, function(error, stdout, stderr) {\r\n      \/\/ command output is in stdout\r\n    });\r\n\r\n\r\n----------\r\n\r\nAs of [v0.11.12][9], Node now supports synchronous `spawn` and `exec`. All of the methods described above are asynchronous, and have a synchronous counterpart. Documentation for them can be found [here][10]. While they are useful for scripting, do note that unlike the methods used to spawn child processes asynchronously, the synchronous methods do not return an instance of [`ChildProcess`][11].\r\n\r\n\r\n  [1]: https:\/\/nodejs.org\/docs\/latest-v8.x\/api\/child_process.html#child_process_child_process_exec_command_options_callback\r\n  [2]: https:\/\/nodejs.org\/docs\/latest-v8.x\/api\/child_process.html#child_process_child_process_spawn_command_args_options\r\n  [3]: https:\/\/nodejs.org\/docs\/latest-v8.x\/api\/child_process.html#child_process_child_process_execsync_command_options\r\n  [4]: https:\/\/nodejs.org\/docs\/latest-v8.x\/api\/child_process.html#child_process_child_process_spawnsync_command_args_options\r\n  [5]: http:\/\/nodejs.org\/docs\/latest-v5.x\/api\/child_process.html\r\n  [6]: https:\/\/nodejs.org\/docs\/latest-v5.x\/api\/child_process.html#child_process_child_process_exec_command_options_callback\r\n  [7]: https:\/\/nodejs.org\/docs\/latest-v5.x\/api\/child_process.html#child_process_child_process_spawn_command_args_options\r\n  [8]: https:\/\/nodejs.org\/docs\/latest-v5.x\/api\/child_process.html#child_process_child_process_execfile_file_args_options_callback\r\n  [9]: https:\/\/nodejs.org\/en\/blog\/release\/v0.11.12\/\r\n  [10]: https:\/\/nodejs.org\/docs\/latest-v5.x\/api\/child_process.html#child_process_synchronous_process_creation\r\n  [11]: https:\/\/nodejs.org\/docs\/latest-v5.x\/api\/child_process.html#child_process_class_childprocess",
        "body": "<p>For even newer version of Node.js (v8.1.4), the events and calls are similar or identical to older versions, but it's encouraged to use the standard newer language features. Examples:<\/p>\n<p>For buffered, non-stream formatted output (you get it all at once), use <a href=\"https:\/\/nodejs.org\/docs\/latest-v8.x\/api\/child_process.html#child_process_child_process_exec_command_options_callback\" rel=\"noreferrer\"><code>child_process.exec<\/code><\/a>:<\/p>\n<pre><code>const { exec } = require('child_process');\nexec('cat *.js bad_file | wc -l', (err, stdout, stderr) =&gt; {\n  if (err) {\n    \/\/ node couldn't execute the command\n    return;\n  }\n\n  \/\/ the *entire* stdout and stderr (buffered)\n  console.log(`stdout: ${stdout}`);\n  console.log(`stderr: ${stderr}`);\n});\n<\/code><\/pre>\n<p>You can also use it with Promises:<\/p>\n<pre><code>const util = require('util');\nconst exec = util.promisify(require('child_process').exec);\n\nasync function ls() {\n  const { stdout, stderr } = await exec('ls');\n  console.log('stdout:', stdout);\n  console.log('stderr:', stderr);\n}\nls();\n<\/code><\/pre>\n<p>If you wish to receive the data gradually in chunks (output as a stream), use <a href=\"https:\/\/nodejs.org\/docs\/latest-v8.x\/api\/child_process.html#child_process_child_process_spawn_command_args_options\" rel=\"noreferrer\"><code>child_process.spawn<\/code><\/a>:<\/p>\n<pre><code>const { spawn } = require('child_process');\nconst child = spawn('ls', ['-lh', '\/usr']);\n\n\/\/ use child.stdout.setEncoding('utf8'); if you want text chunks\nchild.stdout.on('data', (chunk) =&gt; {\n  \/\/ data from standard output is here as buffers\n});\n\n\/\/ since these are streams, you can pipe them elsewhere\nchild.stderr.pipe(dest);\n\nchild.on('close', (code) =&gt; {\n  console.log(`child process exited with code ${code}`);\n});\n<\/code><\/pre>\n<p>Both of these functions have a synchronous counterpart. An example for <a href=\"https:\/\/nodejs.org\/docs\/latest-v8.x\/api\/child_process.html#child_process_child_process_execsync_command_options\" rel=\"noreferrer\"><code>child_process.execSync<\/code><\/a>:<\/p>\n<pre><code>const { execSync } = require('child_process');\n\/\/ stderr is sent to stderr of parent process\n\/\/ you can set options.stdio if you want it to go elsewhere\nlet stdout = execSync('ls');\n<\/code><\/pre>\n<p>As well as <a href=\"https:\/\/nodejs.org\/docs\/latest-v8.x\/api\/child_process.html#child_process_child_process_spawnsync_command_args_options\" rel=\"noreferrer\"><code>child_process.spawnSync<\/code><\/a>:<\/p>\n<pre><code>const { spawnSync} = require('child_process');\nconst child = spawnSync('ls', ['-lh', '\/usr']);\n\nconsole.log('error', child.error);\nconsole.log('stdout ', child.stdout);\nconsole.log('stderr ', child.stderr);\n<\/code><\/pre>\n<hr \/>\n<p><strong>Note:<\/strong> The following code is still functional, but is primarily targeted at users of ES5 and before.<\/p>\n<p>The module for spawning child processes with Node.js is well documented in the <a href=\"http:\/\/nodejs.org\/docs\/latest-v5.x\/api\/child_process.html\" rel=\"noreferrer\">documentation<\/a> (v5.0.0). To execute a command and fetch its complete output as a buffer, use <a href=\"https:\/\/nodejs.org\/docs\/latest-v5.x\/api\/child_process.html#child_process_child_process_exec_command_options_callback\" rel=\"noreferrer\"><code>child_process.exec<\/code><\/a>:<\/p>\n<pre><code>var exec = require('child_process').exec;\nvar cmd = 'prince -v builds\/pdf\/book.html -o builds\/pdf\/book.pdf';\n\nexec(cmd, function(error, stdout, stderr) {\n  \/\/ command output is in stdout\n});\n<\/code><\/pre>\n<p>If you need to use handle process I\/O with streams, such as when you are expecting large amounts of output, use <a href=\"https:\/\/nodejs.org\/docs\/latest-v5.x\/api\/child_process.html#child_process_child_process_spawn_command_args_options\" rel=\"noreferrer\"><code>child_process.spawn<\/code><\/a>:<\/p>\n<pre><code>var spawn = require('child_process').spawn;\nvar child = spawn('prince', [\n  '-v', 'builds\/pdf\/book.html',\n  '-o', 'builds\/pdf\/book.pdf'\n]);\n\nchild.stdout.on('data', function(chunk) {\n  \/\/ output will be here in chunks\n});\n\n\/\/ or if you want to send output elsewhere\nchild.stdout.pipe(dest);\n<\/code><\/pre>\n<p>If you are executing a file rather than a command, you might want to use <a href=\"https:\/\/nodejs.org\/docs\/latest-v5.x\/api\/child_process.html#child_process_child_process_execfile_file_args_options_callback\" rel=\"noreferrer\"><code>child_process.execFile<\/code><\/a>, which parameters which are almost identical to <code>spawn<\/code>, but has a fourth callback parameter like <code>exec<\/code> for retrieving output buffers. That might look a bit like this:<\/p>\n<pre><code>var execFile = require('child_process').execFile;\nexecFile(file, args, options, function(error, stdout, stderr) {\n  \/\/ command output is in stdout\n});\n<\/code><\/pre>\n<hr \/>\n<p>As of <a href=\"https:\/\/nodejs.org\/en\/blog\/release\/v0.11.12\/\" rel=\"noreferrer\">v0.11.12<\/a>, Node now supports synchronous <code>spawn<\/code> and <code>exec<\/code>. All of the methods described above are asynchronous, and have a synchronous counterpart. Documentation for them can be found <a href=\"https:\/\/nodejs.org\/docs\/latest-v5.x\/api\/child_process.html#child_process_synchronous_process_creation\" rel=\"noreferrer\">here<\/a>. While they are useful for scripting, do note that unlike the methods used to spawn child processes asynchronously, the synchronous methods do not return an instance of <a href=\"https:\/\/nodejs.org\/docs\/latest-v5.x\/api\/child_process.html#child_process_class_childprocess\" rel=\"noreferrer\"><code>ChildProcess<\/code><\/a>.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 14143,
            "reputation": 24126,
            "user_id": 28843,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/i.stack.imgur.com\/wz4i5.png?s=256&g=1",
            "display_name": "Jirapong",
            "link": "https:\/\/stackoverflow.com\/users\/28843\/jirapong"
        },
        "is_accepted": true,
        "score": 1299,
        "last_activity_date": 1636102559,
        "last_edit_date": 1636102559.0,
        "creation_date": 1252253423,
        "answer_id": 1386014,
        "question_id": 1381725,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "You just add the following line to your local ``~\/.gemrc`` file (it is in your *home* folder):\r\n    \r\n    gem: --no-document\r\n\r\nby\r\n\r\n    echo &#39;gem: --no-document&#39; &gt;&gt; ~\/.gemrc\r\n\r\nor you can add this line to the global `gemrc` config file.  \r\n\r\nHere is how to find it (in Linux):\r\n\r\n    strace gem source 2&gt;&amp;1 | grep gemrc\r\n\r\nThe `--no-document` option is documented in [the RubyGems CLI Reference](https:\/\/guides.rubygems.org\/command-reference\/#installupdate-options).",
        "body": "<p>You just add the following line to your local <code>~\/.gemrc<\/code> file (it is in your <em>home<\/em> folder):<\/p>\n<pre><code>gem: --no-document\n<\/code><\/pre>\n<p>by<\/p>\n<pre><code>echo 'gem: --no-document' &gt;&gt; ~\/.gemrc\n<\/code><\/pre>\n<p>or you can add this line to the global <code>gemrc<\/code> config file.<\/p>\n<p>Here is how to find it (in Linux):<\/p>\n<pre><code>strace gem source 2&gt;&amp;1 | grep gemrc\n<\/code><\/pre>\n<p>The <code>--no-document<\/code> option is documented in <a href=\"https:\/\/guides.rubygems.org\/command-reference\/#installupdate-options\" rel=\"noreferrer\">the RubyGems CLI Reference<\/a>.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5211,
            "reputation": 78606,
            "user_id": 8279,
            "user_type": "registered",
            "accept_rate": 55,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/d4758ccc3cc586f01e740733f3fd8b7e?s=256&d=identicon&r=PG",
            "display_name": "Marc-Andr&#233; Lafortune",
            "link": "https:\/\/stackoverflow.com\/users\/8279\/marc-andr%c3%a9-lafortune"
        },
        "is_accepted": true,
        "score": 1268,
        "last_activity_date": 1422306642,
        "last_edit_date": 1422306642.0,
        "creation_date": 1281796775,
        "answer_id": 3483802,
        "question_id": 3482149,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Just use [`Array#sample`][1]:\r\n\r\n    [:foo, :bar].sample # =&gt; :foo, or :bar :-)\r\n\r\nIt is available in Ruby 1.9.1+. To be also able to use it with an earlier version of Ruby, you could  [`require &quot;backports\/1.9.1\/array\/sample&quot;`][2].\r\n\r\nNote that in Ruby 1.8.7 it exists under the unfortunate name `choice`; it was renamed in later version so you shouldn&#39;t use that.\r\n\r\nAlthough not useful in this case, `sample` accepts a number argument in case you want a number of distinct samples.\r\n\r\n\r\n  [1]: http:\/\/ruby-doc.org\/core-1.9.3\/Array.html#method-i-sample\r\n  [2]: https:\/\/github.com\/marcandre\/backports",
        "body": "<p>Just use <a href=\"http:\/\/ruby-doc.org\/core-1.9.3\/Array.html#method-i-sample\" rel=\"noreferrer\"><code>Array#sample<\/code><\/a>:<\/p>\n\n<pre><code>[:foo, :bar].sample # =&gt; :foo, or :bar :-)\n<\/code><\/pre>\n\n<p>It is available in Ruby 1.9.1+. To be also able to use it with an earlier version of Ruby, you could  <a href=\"https:\/\/github.com\/marcandre\/backports\" rel=\"noreferrer\"><code>require \"backports\/1.9.1\/array\/sample\"<\/code><\/a>.<\/p>\n\n<p>Note that in Ruby 1.8.7 it exists under the unfortunate name <code>choice<\/code>; it was renamed in later version so you shouldn't use that.<\/p>\n\n<p>Although not useful in this case, <code>sample<\/code> accepts a number argument in case you want a number of distinct samples.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2172,
            "reputation": 365278,
            "user_id": 2988,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/ed181f8c80df53d2b67a4f4fff088ed4?s=256&d=identicon&r=PG",
            "display_name": "J&#246;rg W Mittag",
            "link": "https:\/\/stackoverflow.com\/users\/2988\/j%c3%b6rg-w-mittag"
        },
        "is_accepted": true,
        "score": 1266,
        "last_activity_date": 1554364502,
        "last_edit_date": 1554364502.0,
        "creation_date": 1292594923,
        "answer_id": 4471202,
        "question_id": 4470108,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "**EDIT**: It has been 9 years since I originally wrote this answer, and it deserves some cosmetic surgery to keep it current.\r\n\r\nYou can see the last version before the edit [here](http:\/\/StackOverflow.Com\/revisions\/4471202\/8).\r\n\r\n---\r\n\r\nYou can\u2019t call the *overwritten* method by name or keyword. That\u2019s one of the many reasons why monkey patching should be avoided and inheritance be preferred instead, since obviously you *can* call the *overridden* method.\r\n\r\n# Avoiding Monkey Patching\r\n## Inheritance\r\n\r\nSo, if at all possible, you should prefer something like this:\r\n\r\n    class Foo\r\n      def bar\r\n        &#39;Hello&#39;\r\n      end\r\n    end \r\n\r\n    class ExtendedFoo &lt; Foo\r\n      def bar\r\n        super + &#39; World&#39;\r\n      end\r\n    end\r\n\r\n    ExtendedFoo.new.bar # =&gt; &#39;Hello World&#39;\r\n\r\nThis works, if you control creation of the `Foo` objects. Just change every place which creates a `Foo` to instead create an `ExtendedFoo`. This works even better if you use the [Dependency Injection Design Pattern](http:\/\/c2.com\/cgi\/wiki?DependencyInjection), the [Factory Method Design Pattern](http:\/\/c2.com\/cgi\/wiki?FactoryMethodPattern), the [ Abstract Factory Design Pattern](http:\/\/c2.com\/cgi\/wiki?AbstractFactoryPattern) or something along those lines, because in that case, there is only place you need to change.\r\n\r\n## Delegation\r\n\r\nIf you *do not* control creation of the `Foo` objects, for example because they are created by a framework that is outside of your control (like [tag:ruby-on-rails] for example), then you could use the [Wrapper Design Pattern](http:\/\/c2.com\/cgi\/wiki?HandleBodyPattern):\r\n\r\n    require &#39;delegate&#39;\r\n\r\n    class Foo\r\n      def bar\r\n        &#39;Hello&#39;\r\n      end\r\n    end \r\n\r\n    class WrappedFoo &lt; DelegateClass(Foo)\r\n      def initialize(wrapped_foo)\r\n        super\r\n      end\r\n\r\n      def bar\r\n        super + &#39; World&#39;\r\n      end\r\n    end\r\n\r\n    foo = Foo.new # this is not actually in your code, it comes from somewhere else\r\n\r\n    wrapped_foo = WrappedFoo.new(foo) # this is under your control\r\n\r\n    wrapped_foo.bar # =&gt; &#39;Hello World&#39;\r\n\r\nBasically, at the boundary of the system, where the `Foo` object comes into your code, you wrap it into another object, and then use *that* object instead of the original one everywhere else in your code.\r\n\r\nThis uses the [`Object#DelegateClass`](http:\/\/Ruby-Doc.Org\/stdlib\/libdoc\/delegate\/rdoc\/Object.html#method-i-DelegateClass) helper method from the [`delegate`](http:\/\/Ruby-Doc.Org\/stdlib\/libdoc\/delegate\/rdoc\/) library in the stdlib.\r\n\r\n# \u201cClean\u201d Monkey Patching\r\n## [`Module#prepend`](http:\/\/Ruby-Doc.Org\/core\/Module.html#method-i-prepend): Mixin Prepending\r\n\r\nThe two methods above require changing the system to avoid monkey patching. This section shows the preferred and least invasive method of monkey patching, should changing the system not be an option.\r\n\r\n[`Module#prepend`](http:\/\/Ruby-Doc.Org\/core\/Module.html#method-i-prepend) was added to support more or less exactly this use case. `Module#prepend` does the same thing as `Module#include`, except it mixes in the mixin directly *below* the class:\r\n\r\n    class Foo\r\n      def bar\r\n        &#39;Hello&#39;\r\n      end\r\n    end \r\n\r\n    module FooExtensions\r\n      def bar\r\n        super + &#39; World&#39;\r\n      end\r\n    end\r\n\r\n    class Foo\r\n      prepend FooExtensions\r\n    end\r\n\r\n    Foo.new.bar # =&gt; &#39;Hello World&#39;\r\n\r\nNote: I also wrote a little bit about `Module#prepend` in this question: [Ruby module prepend vs derivation](http:\/\/StackOverflow.Com\/a\/24912554\/2988#24912554)\r\n\r\n### Mixin Inheritance (broken)\r\n\r\nI have seen some people try (and ask about why it doesn\u2019t work here on StackOverflow) something like this, i.e. `include`ing a mixin instead of `prepend`ing it:\r\n\r\n    class Foo\r\n      def bar\r\n        &#39;Hello&#39;\r\n      end\r\n    end \r\n\r\n    module FooExtensions\r\n      def bar\r\n        super + &#39; World&#39;\r\n      end\r\n    end\r\n\r\n    class Foo\r\n      include FooExtensions\r\n    end\r\n\r\nUnfortunately, that won\u2019t work. It\u2019s a good idea, because it uses inheritance, which means that you can use `super`. However, [`Module#include`](http:\/\/Ruby-Doc.Org\/core\/Module.html#method-i-include) inserts the mixin *above* the class in the inheritance hierarchy, which means that `FooExtensions#bar` will never be called (and if it *were* called, the `super` would not actually refer to `Foo#bar` but rather to `Object#bar` which doesn\u2019t exist), since `Foo#bar` will always be found first.\r\n\r\n## Method Wrapping\r\n\r\nThe big question is: how can we hold on to the `bar` method, without actually keeping around an *actual method*? The answer lies, as it does so often, in functional programming. We get a hold of the method as an actual *object*, and we use a closure (i.e. a block) to make sure that we *and only we* hold on to that object:\r\n\r\n    class Foo\r\n      def bar\r\n        &#39;Hello&#39;\r\n      end\r\n    end \r\n\r\n    class Foo\r\n      old_bar = instance_method(:bar)\r\n\r\n      define_method(:bar) do\r\n        old_bar.bind(self).() + &#39; World&#39;\r\n      end\r\n    end\r\n\r\n    Foo.new.bar # =&gt; &#39;Hello World&#39;\r\n\r\nThis is very clean: since `old_bar` is just a local variable, it will go out of scope at the end of the class body, and it is impossible to access it from anywhere, *even* using reflection! And since [`Module#define_method`](http:\/\/Ruby-Doc.Org\/core\/Module.html#method-i-define_method) takes a block, and blocks close over their surrounding lexical environment (which is *why* we are using `define_method` instead of `def` here), *it* (and *only* it) will still have access to `old_bar`, even after it has gone out of scope.\r\n\r\nShort explanation:\r\n\r\n    old_bar = instance_method(:bar)\r\n\r\nHere we are wrapping the `bar` method into an [`UnboundMethod`](http:\/\/Ruby-Doc.Org\/core\/UnboundMethod.html) method object and assigning it to the local variable `old_bar`. This means, we now have a way to hold on to `bar` even after it has been overwritten.\r\n\r\n    old_bar.bind(self)\r\n\r\nThis is a bit tricky. Basically, in Ruby (and in pretty much all single-dispatch based OO languages), a method is bound to a specific receiver object, called `self` in Ruby. In other words: a method always knows what object it was called on, it knows what its `self` is. But, we grabbed the method directly from a class, how does it know what its `self` is?\r\n\r\nWell, it doesn\u2019t, which is why we need to [`bind`](http:\/\/Ruby-Doc.Org\/core\/UnboundMethod.html#method-i-bind) our `UnboundMethod` to an object first, which will return a [`Method`](http:\/\/Ruby-Doc.Org\/core\/Method.html) object that we can then call. (`UnboundMethod`s cannot be called, because they don\u2019t know what to do without knowing their `self`.)\r\n\r\nAnd what do we `bind` it to? We simply `bind` it to ourselves, that way it will behave *exactly* like the original `bar` would have!\r\n\r\nLastly, we need to call the `Method` that is returned from `bind`. In Ruby 1.9, there is some nifty new syntax for that (`.()`), but if you are on 1.8, you can simply use the [`call`](http:\/\/Ruby-Doc.Org\/core\/Method.html#method-i-call) method; that\u2019s what `.()` gets translated to anyway.\r\n\r\nHere are a couple of other questions, where some of those concepts are explained:\r\n\r\n* [How do I reference a function in Ruby?](http:\/\/StackOverflow.Com\/a\/4294660\/2988#4294660)\r\n* [Is Ruby\u2019s code block same as C\u266f\u2019s lambda expression?](http:\/\/StackOverflow.Com\/a\/4334217\/2988#4334217)\r\n\r\n# \u201cDirty\u201d Monkey Patching\r\n## [`alias_method`](http:\/\/Ruby-Doc.Org\/core\/Module.html#method-i-alias_method) chain\r\n\r\nThe problem we are having with our monkey patching is that when we overwrite the method, the method is gone, so we cannot call it anymore. So, let\u2019s just make a backup copy!\r\n\r\n    class Foo\r\n      def bar\r\n        &#39;Hello&#39;\r\n      end\r\n    end \r\n\r\n    class Foo\r\n      alias_method :old_bar, :bar\r\n\r\n      def bar\r\n        old_bar + &#39; World&#39;\r\n      end\r\n    end\r\n\r\n    Foo.new.bar # =&gt; &#39;Hello World&#39;\r\n    Foo.new.old_bar # =&gt; &#39;Hello&#39;\r\n\r\nThe problem with this is that we have now polluted the namespace with a superfluous `old_bar` method. This method will show up in our documentation, it will show up in code completion in our IDEs, it will show up during reflection. Also, it still can be called, but presumably we monkey patched it, because we didn\u2019t like its behavior in the first place, so we might not want other people to call it.\r\n\r\nDespite the fact that this has some undesirable properties, it has unfortunately become popularized through AciveSupport\u2019s [`Module#alias_method_chain`](http:\/\/API.RubyOnRails.Org\/classes\/Module.html#method-i-alias_method_chain).\r\n\r\n\r\n## An aside: [Refinements](http:\/\/Ruby-Doc.Org\/core\/doc\/syntax\/refinements_rdoc.html)\r\n\r\nIn case you only need the different behavior in a few specific places and not throughout the whole system, you can use Refinements to restrict the monkey patch to a specific scope. I am going to demonstrate it here using the `Module#prepend` example from above:\r\n\r\n    class Foo\r\n      def bar\r\n        &#39;Hello&#39;\r\n      end\r\n    end \r\n\r\n    module ExtendedFoo\r\n      module FooExtensions\r\n        def bar\r\n          super + &#39; World&#39;\r\n        end\r\n      end\r\n\r\n      refine Foo do\r\n        prepend FooExtensions\r\n      end\r\n    end\r\n\r\n    Foo.new.bar # =&gt; &#39;Hello&#39;\r\n    # We haven\u2019t activated our Refinement yet!\r\n\r\n    using ExtendedFoo\r\n    # Activate our Refinement\r\n\r\n    Foo.new.bar # =&gt; &#39;Hello World&#39;\r\n    # There it is!\r\n\r\nYou can see a more sophisticated example of using Refinements in this question: [How to enable monkey patch for specific method?](http:\/\/StackOverflow.Com\/a\/32988220\/2988#32988220)\r\n\r\n---\r\n\r\n# Abandoned ideas\r\n\r\nBefore the Ruby community settled on `Module#prepend`, there were multiple different ideas floating around that you may occasionally see referenced in older discussions. All of these are subsumed by `Module#prepend`.\r\n\r\n## Method Combinators\r\n\r\nOne idea was the idea of method combinators from CLOS. This is basically a very lightweight version of a subset of Aspect-Oriented Programming.\r\n\r\nUsing syntax like\r\n\r\n    class Foo\r\n      def bar:before\r\n        # will always run before bar, when bar is called\r\n      end\r\n\r\n      def bar:after\r\n        # will always run after bar, when bar is called\r\n        # may or may not be able to access and\/or change bar\u2019s return value\r\n      end\r\n    end\r\n\r\nyou would be able to \u201chook into\u201d the execution of the `bar` method.\r\n\r\nIt is however not quite clear if and how you get access to `bar`\u2019s return value within `bar:after`. Maybe we could (ab)use the `super` keyword?\r\n\r\n    class Foo\r\n      def bar\r\n        &#39;Hello&#39;\r\n      end\r\n    end \r\n\r\n    class Foo\r\n      def bar:after\r\n        super + &#39; World&#39;\r\n      end\r\n    end\r\n\r\n### Replacement\r\n\r\nThe before combinator is equivalent to `prepend`ing a mixin with an overriding method that calls `super` at the very *end* of the method. Likewise, the after combinator is equivalent to `prepend`ing a mixin with an overriding method that calls `super` at the very *beginning* of the method.\r\n\r\nYou can also do stuff before *and* after calling `super`, you can call `super` multiple times, and both retrieve and manipulate `super`\u2019s return value, making `prepend` more powerful than method combinators.\r\n\r\n    class Foo\r\n      def bar:before\r\n        # will always run before bar, when bar is called\r\n      end\r\n    end\r\n\r\n    # is the same as\r\n\r\n    module BarBefore\r\n      def bar\r\n        # will always run before bar, when bar is called\r\n        super\r\n      end\r\n    end\r\n\r\n    class Foo\r\n      prepend BarBefore\r\n    end\r\n\r\nand \r\n\r\n    class Foo\r\n      def bar:after\r\n        # will always run after bar, when bar is called\r\n        # may or may not be able to access and\/or change bar\u2019s return value\r\n      end\r\n    end\r\n\r\n    # is the same as\r\n\r\n    class BarAfter\r\n      def bar\r\n        original_return_value = super\r\n        # will always run after bar, when bar is called\r\n        # has access to and can change bar\u2019s return value\r\n      end\r\n    end\r\n\r\n    class Foo\r\n      prepend BarAfter\r\n    end\r\n\r\n## `old` keyword\r\n\r\nThis idea adds a new keyword similar to `super`, which allows you to call the *overwritten* method the same way `super` lets you call the *overridden* method:\r\n\r\n    class Foo\r\n      def bar\r\n        &#39;Hello&#39;\r\n      end\r\n    end \r\n\r\n    class Foo\r\n      def bar\r\n        old + &#39; World&#39;\r\n      end\r\n    end\r\n\r\n    Foo.new.bar # =&gt; &#39;Hello World&#39;\r\n\r\nThe main problem with this is that it is backwards incompatible: if you have method called `old`, you will no longer be able to call it!\r\n\r\n### Replacement\r\n\r\n`super` in an overriding method in a `prepend`ed mixin is essentially the same as `old` in this proposal.\r\n\r\n## `redef` keyword\r\n\r\nSimilar to above, but instead of adding a new keyword for *calling* the overwritten method and leaving `def` alone, we add a new keyword for *redefining* methods. This is backwards compatible, since the syntax currently is illegal anyway:\r\n\r\n    class Foo\r\n      def bar\r\n        &#39;Hello&#39;\r\n      end\r\n    end \r\n\r\n    class Foo\r\n      redef bar\r\n        old + &#39; World&#39;\r\n      end\r\n    end\r\n\r\n    Foo.new.bar # =&gt; &#39;Hello World&#39;\r\n\r\nInstead of adding *two* new keywords, we could also redefine the meaning of `super` inside `redef`:\r\n\r\n    class Foo\r\n      def bar\r\n        &#39;Hello&#39;\r\n      end\r\n    end \r\n\r\n    class Foo\r\n      redef bar\r\n        super + &#39; World&#39;\r\n      end\r\n    end\r\n\r\n    Foo.new.bar # =&gt; &#39;Hello World&#39;\r\n\r\n### Replacement\r\n\r\n`redef`ining a method is equivalent to overriding the method in a `prepend`ed mixin. `super` in the overriding method behaves like `super` or `old` in this proposal.",
        "body": "<p><strong>EDIT<\/strong>: It has been 9 years since I originally wrote this answer, and it deserves some cosmetic surgery to keep it current.<\/p>\n\n<p>You can see the last version before the edit <a href=\"http:\/\/StackOverflow.Com\/revisions\/4471202\/8\">here<\/a>.<\/p>\n\n<hr>\n\n<p>You can\u2019t call the <em>overwritten<\/em> method by name or keyword. That\u2019s one of the many reasons why monkey patching should be avoided and inheritance be preferred instead, since obviously you <em>can<\/em> call the <em>overridden<\/em> method.<\/p>\n\n<h1>Avoiding Monkey Patching<\/h1>\n\n<h2>Inheritance<\/h2>\n\n<p>So, if at all possible, you should prefer something like this:<\/p>\n\n<pre><code>class Foo\n  def bar\n    'Hello'\n  end\nend \n\nclass ExtendedFoo &lt; Foo\n  def bar\n    super + ' World'\n  end\nend\n\nExtendedFoo.new.bar # =&gt; 'Hello World'\n<\/code><\/pre>\n\n<p>This works, if you control creation of the <code>Foo<\/code> objects. Just change every place which creates a <code>Foo<\/code> to instead create an <code>ExtendedFoo<\/code>. This works even better if you use the <a href=\"http:\/\/c2.com\/cgi\/wiki?DependencyInjection\" rel=\"noreferrer\">Dependency Injection Design Pattern<\/a>, the <a href=\"http:\/\/c2.com\/cgi\/wiki?FactoryMethodPattern\" rel=\"noreferrer\">Factory Method Design Pattern<\/a>, the <a href=\"http:\/\/c2.com\/cgi\/wiki?AbstractFactoryPattern\" rel=\"noreferrer\"> Abstract Factory Design Pattern<\/a> or something along those lines, because in that case, there is only place you need to change.<\/p>\n\n<h2>Delegation<\/h2>\n\n<p>If you <em>do not<\/em> control creation of the <code>Foo<\/code> objects, for example because they are created by a framework that is outside of your control (like <a href=\"\/questions\/tagged\/ruby-on-rails\" class=\"post-tag\" title=\"show questions tagged &#39;ruby-on-rails&#39;\" rel=\"tag\">ruby-on-rails<\/a> for example), then you could use the <a href=\"http:\/\/c2.com\/cgi\/wiki?HandleBodyPattern\" rel=\"noreferrer\">Wrapper Design Pattern<\/a>:<\/p>\n\n<pre><code>require 'delegate'\n\nclass Foo\n  def bar\n    'Hello'\n  end\nend \n\nclass WrappedFoo &lt; DelegateClass(Foo)\n  def initialize(wrapped_foo)\n    super\n  end\n\n  def bar\n    super + ' World'\n  end\nend\n\nfoo = Foo.new # this is not actually in your code, it comes from somewhere else\n\nwrapped_foo = WrappedFoo.new(foo) # this is under your control\n\nwrapped_foo.bar # =&gt; 'Hello World'\n<\/code><\/pre>\n\n<p>Basically, at the boundary of the system, where the <code>Foo<\/code> object comes into your code, you wrap it into another object, and then use <em>that<\/em> object instead of the original one everywhere else in your code.<\/p>\n\n<p>This uses the <a href=\"http:\/\/Ruby-Doc.Org\/stdlib\/libdoc\/delegate\/rdoc\/Object.html#method-i-DelegateClass\" rel=\"noreferrer\"><code>Object#DelegateClass<\/code><\/a> helper method from the <a href=\"http:\/\/Ruby-Doc.Org\/stdlib\/libdoc\/delegate\/rdoc\/\" rel=\"noreferrer\"><code>delegate<\/code><\/a> library in the stdlib.<\/p>\n\n<h1>\u201cClean\u201d Monkey Patching<\/h1>\n\n<h2><a href=\"http:\/\/Ruby-Doc.Org\/core\/Module.html#method-i-prepend\" rel=\"noreferrer\"><code>Module#prepend<\/code><\/a>: Mixin Prepending<\/h2>\n\n<p>The two methods above require changing the system to avoid monkey patching. This section shows the preferred and least invasive method of monkey patching, should changing the system not be an option.<\/p>\n\n<p><a href=\"http:\/\/Ruby-Doc.Org\/core\/Module.html#method-i-prepend\" rel=\"noreferrer\"><code>Module#prepend<\/code><\/a> was added to support more or less exactly this use case. <code>Module#prepend<\/code> does the same thing as <code>Module#include<\/code>, except it mixes in the mixin directly <em>below<\/em> the class:<\/p>\n\n<pre><code>class Foo\n  def bar\n    'Hello'\n  end\nend \n\nmodule FooExtensions\n  def bar\n    super + ' World'\n  end\nend\n\nclass Foo\n  prepend FooExtensions\nend\n\nFoo.new.bar # =&gt; 'Hello World'\n<\/code><\/pre>\n\n<p>Note: I also wrote a little bit about <code>Module#prepend<\/code> in this question: <a href=\"http:\/\/StackOverflow.Com\/a\/24912554\/2988#24912554\">Ruby module prepend vs derivation<\/a><\/p>\n\n<h3>Mixin Inheritance (broken)<\/h3>\n\n<p>I have seen some people try (and ask about why it doesn\u2019t work here on StackOverflow) something like this, i.e. <code>include<\/code>ing a mixin instead of <code>prepend<\/code>ing it:<\/p>\n\n<pre><code>class Foo\n  def bar\n    'Hello'\n  end\nend \n\nmodule FooExtensions\n  def bar\n    super + ' World'\n  end\nend\n\nclass Foo\n  include FooExtensions\nend\n<\/code><\/pre>\n\n<p>Unfortunately, that won\u2019t work. It\u2019s a good idea, because it uses inheritance, which means that you can use <code>super<\/code>. However, <a href=\"http:\/\/Ruby-Doc.Org\/core\/Module.html#method-i-include\" rel=\"noreferrer\"><code>Module#include<\/code><\/a> inserts the mixin <em>above<\/em> the class in the inheritance hierarchy, which means that <code>FooExtensions#bar<\/code> will never be called (and if it <em>were<\/em> called, the <code>super<\/code> would not actually refer to <code>Foo#bar<\/code> but rather to <code>Object#bar<\/code> which doesn\u2019t exist), since <code>Foo#bar<\/code> will always be found first.<\/p>\n\n<h2>Method Wrapping<\/h2>\n\n<p>The big question is: how can we hold on to the <code>bar<\/code> method, without actually keeping around an <em>actual method<\/em>? The answer lies, as it does so often, in functional programming. We get a hold of the method as an actual <em>object<\/em>, and we use a closure (i.e. a block) to make sure that we <em>and only we<\/em> hold on to that object:<\/p>\n\n<pre><code>class Foo\n  def bar\n    'Hello'\n  end\nend \n\nclass Foo\n  old_bar = instance_method(:bar)\n\n  define_method(:bar) do\n    old_bar.bind(self).() + ' World'\n  end\nend\n\nFoo.new.bar # =&gt; 'Hello World'\n<\/code><\/pre>\n\n<p>This is very clean: since <code>old_bar<\/code> is just a local variable, it will go out of scope at the end of the class body, and it is impossible to access it from anywhere, <em>even<\/em> using reflection! And since <a href=\"http:\/\/Ruby-Doc.Org\/core\/Module.html#method-i-define_method\" rel=\"noreferrer\"><code>Module#define_method<\/code><\/a> takes a block, and blocks close over their surrounding lexical environment (which is <em>why<\/em> we are using <code>define_method<\/code> instead of <code>def<\/code> here), <em>it<\/em> (and <em>only<\/em> it) will still have access to <code>old_bar<\/code>, even after it has gone out of scope.<\/p>\n\n<p>Short explanation:<\/p>\n\n<pre><code>old_bar = instance_method(:bar)\n<\/code><\/pre>\n\n<p>Here we are wrapping the <code>bar<\/code> method into an <a href=\"http:\/\/Ruby-Doc.Org\/core\/UnboundMethod.html\" rel=\"noreferrer\"><code>UnboundMethod<\/code><\/a> method object and assigning it to the local variable <code>old_bar<\/code>. This means, we now have a way to hold on to <code>bar<\/code> even after it has been overwritten.<\/p>\n\n<pre><code>old_bar.bind(self)\n<\/code><\/pre>\n\n<p>This is a bit tricky. Basically, in Ruby (and in pretty much all single-dispatch based OO languages), a method is bound to a specific receiver object, called <code>self<\/code> in Ruby. In other words: a method always knows what object it was called on, it knows what its <code>self<\/code> is. But, we grabbed the method directly from a class, how does it know what its <code>self<\/code> is?<\/p>\n\n<p>Well, it doesn\u2019t, which is why we need to <a href=\"http:\/\/Ruby-Doc.Org\/core\/UnboundMethod.html#method-i-bind\" rel=\"noreferrer\"><code>bind<\/code><\/a> our <code>UnboundMethod<\/code> to an object first, which will return a <a href=\"http:\/\/Ruby-Doc.Org\/core\/Method.html\" rel=\"noreferrer\"><code>Method<\/code><\/a> object that we can then call. (<code>UnboundMethod<\/code>s cannot be called, because they don\u2019t know what to do without knowing their <code>self<\/code>.)<\/p>\n\n<p>And what do we <code>bind<\/code> it to? We simply <code>bind<\/code> it to ourselves, that way it will behave <em>exactly<\/em> like the original <code>bar<\/code> would have!<\/p>\n\n<p>Lastly, we need to call the <code>Method<\/code> that is returned from <code>bind<\/code>. In Ruby 1.9, there is some nifty new syntax for that (<code>.()<\/code>), but if you are on 1.8, you can simply use the <a href=\"http:\/\/Ruby-Doc.Org\/core\/Method.html#method-i-call\" rel=\"noreferrer\"><code>call<\/code><\/a> method; that\u2019s what <code>.()<\/code> gets translated to anyway.<\/p>\n\n<p>Here are a couple of other questions, where some of those concepts are explained:<\/p>\n\n<ul>\n<li><a href=\"http:\/\/StackOverflow.Com\/a\/4294660\/2988#4294660\">How do I reference a function in Ruby?<\/a><\/li>\n<li><a href=\"http:\/\/StackOverflow.Com\/a\/4334217\/2988#4334217\">Is Ruby\u2019s code block same as C\u266f\u2019s lambda expression?<\/a><\/li>\n<\/ul>\n\n<h1>\u201cDirty\u201d Monkey Patching<\/h1>\n\n<h2><a href=\"http:\/\/Ruby-Doc.Org\/core\/Module.html#method-i-alias_method\" rel=\"noreferrer\"><code>alias_method<\/code><\/a> chain<\/h2>\n\n<p>The problem we are having with our monkey patching is that when we overwrite the method, the method is gone, so we cannot call it anymore. So, let\u2019s just make a backup copy!<\/p>\n\n<pre><code>class Foo\n  def bar\n    'Hello'\n  end\nend \n\nclass Foo\n  alias_method :old_bar, :bar\n\n  def bar\n    old_bar + ' World'\n  end\nend\n\nFoo.new.bar # =&gt; 'Hello World'\nFoo.new.old_bar # =&gt; 'Hello'\n<\/code><\/pre>\n\n<p>The problem with this is that we have now polluted the namespace with a superfluous <code>old_bar<\/code> method. This method will show up in our documentation, it will show up in code completion in our IDEs, it will show up during reflection. Also, it still can be called, but presumably we monkey patched it, because we didn\u2019t like its behavior in the first place, so we might not want other people to call it.<\/p>\n\n<p>Despite the fact that this has some undesirable properties, it has unfortunately become popularized through AciveSupport\u2019s <a href=\"http:\/\/API.RubyOnRails.Org\/classes\/Module.html#method-i-alias_method_chain\" rel=\"noreferrer\"><code>Module#alias_method_chain<\/code><\/a>.<\/p>\n\n<h2>An aside: <a href=\"http:\/\/Ruby-Doc.Org\/core\/doc\/syntax\/refinements_rdoc.html\" rel=\"noreferrer\">Refinements<\/a><\/h2>\n\n<p>In case you only need the different behavior in a few specific places and not throughout the whole system, you can use Refinements to restrict the monkey patch to a specific scope. I am going to demonstrate it here using the <code>Module#prepend<\/code> example from above:<\/p>\n\n<pre><code>class Foo\n  def bar\n    'Hello'\n  end\nend \n\nmodule ExtendedFoo\n  module FooExtensions\n    def bar\n      super + ' World'\n    end\n  end\n\n  refine Foo do\n    prepend FooExtensions\n  end\nend\n\nFoo.new.bar # =&gt; 'Hello'\n# We haven\u2019t activated our Refinement yet!\n\nusing ExtendedFoo\n# Activate our Refinement\n\nFoo.new.bar # =&gt; 'Hello World'\n# There it is!\n<\/code><\/pre>\n\n<p>You can see a more sophisticated example of using Refinements in this question: <a href=\"http:\/\/StackOverflow.Com\/a\/32988220\/2988#32988220\">How to enable monkey patch for specific method?<\/a><\/p>\n\n<hr>\n\n<h1>Abandoned ideas<\/h1>\n\n<p>Before the Ruby community settled on <code>Module#prepend<\/code>, there were multiple different ideas floating around that you may occasionally see referenced in older discussions. All of these are subsumed by <code>Module#prepend<\/code>.<\/p>\n\n<h2>Method Combinators<\/h2>\n\n<p>One idea was the idea of method combinators from CLOS. This is basically a very lightweight version of a subset of Aspect-Oriented Programming.<\/p>\n\n<p>Using syntax like<\/p>\n\n<pre><code>class Foo\n  def bar:before\n    # will always run before bar, when bar is called\n  end\n\n  def bar:after\n    # will always run after bar, when bar is called\n    # may or may not be able to access and\/or change bar\u2019s return value\n  end\nend\n<\/code><\/pre>\n\n<p>you would be able to \u201chook into\u201d the execution of the <code>bar<\/code> method.<\/p>\n\n<p>It is however not quite clear if and how you get access to <code>bar<\/code>\u2019s return value within <code>bar:after<\/code>. Maybe we could (ab)use the <code>super<\/code> keyword?<\/p>\n\n<pre><code>class Foo\n  def bar\n    'Hello'\n  end\nend \n\nclass Foo\n  def bar:after\n    super + ' World'\n  end\nend\n<\/code><\/pre>\n\n<h3>Replacement<\/h3>\n\n<p>The before combinator is equivalent to <code>prepend<\/code>ing a mixin with an overriding method that calls <code>super<\/code> at the very <em>end<\/em> of the method. Likewise, the after combinator is equivalent to <code>prepend<\/code>ing a mixin with an overriding method that calls <code>super<\/code> at the very <em>beginning<\/em> of the method.<\/p>\n\n<p>You can also do stuff before <em>and<\/em> after calling <code>super<\/code>, you can call <code>super<\/code> multiple times, and both retrieve and manipulate <code>super<\/code>\u2019s return value, making <code>prepend<\/code> more powerful than method combinators.<\/p>\n\n<pre><code>class Foo\n  def bar:before\n    # will always run before bar, when bar is called\n  end\nend\n\n# is the same as\n\nmodule BarBefore\n  def bar\n    # will always run before bar, when bar is called\n    super\n  end\nend\n\nclass Foo\n  prepend BarBefore\nend\n<\/code><\/pre>\n\n<p>and <\/p>\n\n<pre><code>class Foo\n  def bar:after\n    # will always run after bar, when bar is called\n    # may or may not be able to access and\/or change bar\u2019s return value\n  end\nend\n\n# is the same as\n\nclass BarAfter\n  def bar\n    original_return_value = super\n    # will always run after bar, when bar is called\n    # has access to and can change bar\u2019s return value\n  end\nend\n\nclass Foo\n  prepend BarAfter\nend\n<\/code><\/pre>\n\n<h2><code>old<\/code> keyword<\/h2>\n\n<p>This idea adds a new keyword similar to <code>super<\/code>, which allows you to call the <em>overwritten<\/em> method the same way <code>super<\/code> lets you call the <em>overridden<\/em> method:<\/p>\n\n<pre><code>class Foo\n  def bar\n    'Hello'\n  end\nend \n\nclass Foo\n  def bar\n    old + ' World'\n  end\nend\n\nFoo.new.bar # =&gt; 'Hello World'\n<\/code><\/pre>\n\n<p>The main problem with this is that it is backwards incompatible: if you have method called <code>old<\/code>, you will no longer be able to call it!<\/p>\n\n<h3>Replacement<\/h3>\n\n<p><code>super<\/code> in an overriding method in a <code>prepend<\/code>ed mixin is essentially the same as <code>old<\/code> in this proposal.<\/p>\n\n<h2><code>redef<\/code> keyword<\/h2>\n\n<p>Similar to above, but instead of adding a new keyword for <em>calling<\/em> the overwritten method and leaving <code>def<\/code> alone, we add a new keyword for <em>redefining<\/em> methods. This is backwards compatible, since the syntax currently is illegal anyway:<\/p>\n\n<pre><code>class Foo\n  def bar\n    'Hello'\n  end\nend \n\nclass Foo\n  redef bar\n    old + ' World'\n  end\nend\n\nFoo.new.bar # =&gt; 'Hello World'\n<\/code><\/pre>\n\n<p>Instead of adding <em>two<\/em> new keywords, we could also redefine the meaning of <code>super<\/code> inside <code>redef<\/code>:<\/p>\n\n<pre><code>class Foo\n  def bar\n    'Hello'\n  end\nend \n\nclass Foo\n  redef bar\n    super + ' World'\n  end\nend\n\nFoo.new.bar # =&gt; 'Hello World'\n<\/code><\/pre>\n\n<h3>Replacement<\/h3>\n\n<p><code>redef<\/code>ining a method is equivalent to overriding the method in a <code>prepend<\/code>ed mixin. <code>super<\/code> in the overriding method behaves like <code>super<\/code> or <code>old<\/code> in this proposal.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 35800,
            "reputation": 12854,
            "user_id": 101697,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/8e8a6227f9358b5932962c1d81371e42?s=256&d=identicon&r=PG",
            "display_name": "Nick Desjardins",
            "link": "https:\/\/stackoverflow.com\/users\/101697\/nick-desjardins"
        },
        "is_accepted": false,
        "score": 1188,
        "last_activity_date": 1583603004,
        "last_edit_date": 1583603004.0,
        "creation_date": 1241541925,
        "answer_id": 825832,
        "question_id": 825748,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "You can specify formal arguments in rake by adding symbol arguments to the task call.  For example:\r\n\r\n    require &#39;rake&#39;\r\n    \r\n    task :my_task, [:arg1, :arg2] do |t, args|\r\n      puts &quot;Args were: #{args} of class #{args.class}&quot;\r\n      puts &quot;arg1 was: &#39;#{args[:arg1]}&#39; of class #{args[:arg1].class}&quot;\r\n      puts &quot;arg2 was: &#39;#{args[:arg2]}&#39; of class #{args[:arg2].class}&quot;\r\n    end\r\n    \r\n    task :invoke_my_task do\r\n      Rake.application.invoke_task(&quot;my_task[1, 2]&quot;)\r\n    end\r\n    \r\n    # or if you prefer this syntax...\r\n    task :invoke_my_task_2 do\r\n      Rake::Task[:my_task].invoke(3, 4)\r\n    end\r\n    \r\n    # a task with prerequisites passes its \r\n    # arguments to it prerequisites\r\n    task :with_prerequisite, [:arg1, :arg2] =&gt; :my_task #&lt;- name of prerequisite task\r\n    \r\n    # to specify default values, \r\n    # we take advantage of args being a Rake::TaskArguments object\r\n    task :with_defaults, :arg1, :arg2 do |t, args|\r\n      args.with_defaults(:arg1 =&gt; :default_1, :arg2 =&gt; :default_2)\r\n      puts &quot;Args with defaults were: #{args}&quot;\r\n    end\r\n\r\n\r\nThen, from the command line:\r\n\r\n&lt;pre&gt;\r\n&gt; rake my_task[1,false]\r\nArgs were: {:arg1=&gt;&quot;1&quot;, :arg2=&gt;&quot;false&quot;} of class Rake::TaskArguments\r\narg1 was: &#39;1&#39; of class String\r\narg2 was: &#39;false&#39; of class String\r\n\r\n&gt; rake &quot;my_task[1, 2]&quot;\r\nArgs were: {:arg1=&gt;&quot;1&quot;, :arg2=&gt;&quot;2&quot;}\r\n\r\n&gt; rake invoke_my_task\r\nArgs were: {:arg1=&gt;&quot;1&quot;, :arg2=&gt;&quot;2&quot;}\r\n\r\n&gt; rake invoke_my_task_2\r\nArgs were: {:arg1=&gt;3, :arg2=&gt;4}\r\n\r\n&gt; rake with_prerequisite[5,6]\r\nArgs were: {:arg1=&gt;&quot;5&quot;, :arg2=&gt;&quot;6&quot;}\r\n\r\n&gt; rake with_defaults\r\nArgs with defaults were: {:arg1=&gt;:default_1, :arg2=&gt;:default_2}\r\n\r\n&gt; rake with_defaults[&#39;x&#39;,&#39;y&#39;]\r\nArgs with defaults were: {:arg1=&gt;&quot;x&quot;, :arg2=&gt;&quot;y&quot;}\r\n&lt;\/pre&gt;\r\n\r\nAs demonstrated in the second example, if you want to use spaces, the quotes around the target name are necessary to keep the shell from splitting up the arguments at the space.\r\n\r\nLooking at the code in **rake.rb**, it appears that rake does not parse task strings to extract arguments for prerequisites, so you can&#39;t do `task :t1 =&gt; &quot;dep[1,2]&quot;`.  The only way to specify different arguments for a prerequisite would be to invoke it explicitly within the dependent task action, as in `:invoke_my_task` and `:invoke_my_task_2`.\r\n\r\nNote that some shells (like zsh) require you to escape the brackets: `rake my_task\\[&#39;arg1&#39;\\]`\r\n",
        "body": "<p>You can specify formal arguments in rake by adding symbol arguments to the task call.  For example:<\/p>\n\n<pre><code>require 'rake'\n\ntask :my_task, [:arg1, :arg2] do |t, args|\n  puts \"Args were: #{args} of class #{args.class}\"\n  puts \"arg1 was: '#{args[:arg1]}' of class #{args[:arg1].class}\"\n  puts \"arg2 was: '#{args[:arg2]}' of class #{args[:arg2].class}\"\nend\n\ntask :invoke_my_task do\n  Rake.application.invoke_task(\"my_task[1, 2]\")\nend\n\n# or if you prefer this syntax...\ntask :invoke_my_task_2 do\n  Rake::Task[:my_task].invoke(3, 4)\nend\n\n# a task with prerequisites passes its \n# arguments to it prerequisites\ntask :with_prerequisite, [:arg1, :arg2] =&gt; :my_task #&lt;- name of prerequisite task\n\n# to specify default values, \n# we take advantage of args being a Rake::TaskArguments object\ntask :with_defaults, :arg1, :arg2 do |t, args|\n  args.with_defaults(:arg1 =&gt; :default_1, :arg2 =&gt; :default_2)\n  puts \"Args with defaults were: #{args}\"\nend\n<\/code><\/pre>\n\n<p>Then, from the command line:<\/p>\n\n<pre>\n> rake my_task[1,false]\nArgs were: {:arg1=>\"1\", :arg2=>\"false\"} of class Rake::TaskArguments\narg1 was: '1' of class String\narg2 was: 'false' of class String\n\n> rake \"my_task[1, 2]\"\nArgs were: {:arg1=>\"1\", :arg2=>\"2\"}\n\n> rake invoke_my_task\nArgs were: {:arg1=>\"1\", :arg2=>\"2\"}\n\n> rake invoke_my_task_2\nArgs were: {:arg1=>3, :arg2=>4}\n\n> rake with_prerequisite[5,6]\nArgs were: {:arg1=>\"5\", :arg2=>\"6\"}\n\n> rake with_defaults\nArgs with defaults were: {:arg1=>:default_1, :arg2=>:default_2}\n\n> rake with_defaults['x','y']\nArgs with defaults were: {:arg1=>\"x\", :arg2=>\"y\"}\n<\/pre>\n\n<p>As demonstrated in the second example, if you want to use spaces, the quotes around the target name are necessary to keep the shell from splitting up the arguments at the space.<\/p>\n\n<p>Looking at the code in <strong>rake.rb<\/strong>, it appears that rake does not parse task strings to extract arguments for prerequisites, so you can't do <code>task :t1 =&gt; \"dep[1,2]\"<\/code>.  The only way to specify different arguments for a prerequisite would be to invoke it explicitly within the dependent task action, as in <code>:invoke_my_task<\/code> and <code>:invoke_my_task_2<\/code>.<\/p>\n\n<p>Note that some shells (like zsh) require you to escape the brackets: <code>rake my_task\\['arg1'\\]<\/code><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 76198,
            "reputation": 22642,
            "user_id": 218340,
            "user_type": "registered",
            "accept_rate": 91,
            "profile_image": "https:\/\/i.stack.imgur.com\/b7qJk.gif?s=256&g=1",
            "display_name": "lambshaanxy",
            "link": "https:\/\/stackoverflow.com\/users\/218340\/lambshaanxy"
        },
        "is_accepted": true,
        "score": 1157,
        "last_activity_date": 1469486007,
        "last_edit_date": 1469486007.0,
        "creation_date": 1259639435,
        "answer_id": 1823885,
        "question_id": 86653,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Use the `pretty_generate()` function, built into later versions of JSON. For example:\r\n\r\n    require &#39;json&#39;\r\n    my_object = { :array =&gt; [1, 2, 3, { :sample =&gt; &quot;hash&quot;} ], :foo =&gt; &quot;bar&quot; }\r\n    puts JSON.pretty_generate(my_object)\r\n\r\nWhich gets you:\r\n\r\n    {\r\n      &quot;array&quot;: [\r\n        1,\r\n        2,\r\n        3,\r\n        {\r\n          &quot;sample&quot;: &quot;hash&quot;\r\n        }\r\n      ],\r\n      &quot;foo&quot;: &quot;bar&quot;\r\n    }\r\n\r\n",
        "body": "<p>Use the <code>pretty_generate()<\/code> function, built into later versions of JSON. For example:<\/p>\n\n<pre><code>require 'json'\nmy_object = { :array =&gt; [1, 2, 3, { :sample =&gt; \"hash\"} ], :foo =&gt; \"bar\" }\nputs JSON.pretty_generate(my_object)\n<\/code><\/pre>\n\n<p>Which gets you:<\/p>\n\n<pre><code>{\n  \"array\": [\n    1,\n    2,\n    3,\n    {\n      \"sample\": \"hash\"\n    }\n  ],\n  \"foo\": \"bar\"\n}\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 50123,
            "reputation": 365613,
            "user_id": 149392,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/7a561ec0875fcbbe3066ea8fe288ec77?s=256&d=identicon&r=PG",
            "display_name": "sepp2k",
            "link": "https:\/\/stackoverflow.com\/users\/149392\/sepp2k"
        },
        "is_accepted": true,
        "score": 1130,
        "last_activity_date": 1457472754,
        "last_edit_date": 1457472754.0,
        "creation_date": 1293228593,
        "answer_id": 4528522,
        "question_id": 4528506,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "`Hash`&#39;s `key?` method tells you whether a given key is present or not.\r\n\r\n    session.key?(&quot;user&quot;)",
        "body": "<p><code>Hash<\/code>'s <code>key?<\/code> method tells you whether a given key is present or not.<\/p>\n\n<pre><code>session.key?(\"user\")\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 52070,
            "reputation": 19532,
            "user_id": 155585,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/b3bdacd9384d4e7a9335e22cf40473dc?s=256&d=identicon&r=PG",
            "display_name": "Steven Soroka",
            "link": "https:\/\/stackoverflow.com\/users\/155585\/steven-soroka"
        },
        "is_accepted": true,
        "score": 1096,
        "last_activity_date": 1538045197,
        "last_edit_date": 1538045197.0,
        "creation_date": 1297588166,
        "answer_id": 4983354,
        "question_id": 2385799,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Don&#39;t render 404 yourself, there&#39;s no reason to; Rails has this functionality built in already. If you want to show a 404 page, create a `render_404` method (or `not_found` as I called it) in `ApplicationController` like this: \r\n\r\n    def not_found\r\n      raise ActionController::RoutingError.new(&#39;Not Found&#39;)\r\n    end\r\n\r\nRails also handles `AbstractController::ActionNotFound`, and `ActiveRecord::RecordNotFound` the same way.\r\n\r\nThis does two things better: \r\n\r\n1) It uses Rails&#39; built in `rescue_from` handler to render the 404 page, and\r\n2) it interrupts the execution of your code, letting you do nice things like:\r\n\r\n      user = User.find_by_email(params[:email]) or not_found\r\n      user.do_something!\r\n\r\nwithout having to write ugly conditional statements.\r\n\r\nAs a bonus, it&#39;s also super easy to handle in tests.  For example, in an rspec integration test:\r\n\r\n    # RSpec 1\r\n\r\n    lambda {\r\n      visit &#39;\/something\/you\/want\/to\/404&#39;\r\n    }.should raise_error(ActionController::RoutingError)\r\n\r\n    # RSpec 2+\r\n\r\n    expect {\r\n      get &#39;\/something\/you\/want\/to\/404&#39;\r\n    }.to raise_error(ActionController::RoutingError)\r\n\r\nAnd minitest:\r\n\r\n    assert_raises(ActionController::RoutingError) do \r\n      get &#39;\/something\/you\/want\/to\/404&#39;\r\n    end\r\nOR refer more info from [Rails render 404 not found from a controller action][1]\r\n\r\n\r\n  [1]: https:\/\/rubyinrails.com\/2018\/02\/26\/rails-render-404-not-found-from-controller-action\/",
        "body": "<p>Don't render 404 yourself, there's no reason to; Rails has this functionality built in already. If you want to show a 404 page, create a <code>render_404<\/code> method (or <code>not_found<\/code> as I called it) in <code>ApplicationController<\/code> like this: <\/p>\n\n<pre><code>def not_found\n  raise ActionController::RoutingError.new('Not Found')\nend\n<\/code><\/pre>\n\n<p>Rails also handles <code>AbstractController::ActionNotFound<\/code>, and <code>ActiveRecord::RecordNotFound<\/code> the same way.<\/p>\n\n<p>This does two things better: <\/p>\n\n<p>1) It uses Rails' built in <code>rescue_from<\/code> handler to render the 404 page, and\n2) it interrupts the execution of your code, letting you do nice things like:<\/p>\n\n<pre><code>  user = User.find_by_email(params[:email]) or not_found\n  user.do_something!\n<\/code><\/pre>\n\n<p>without having to write ugly conditional statements.<\/p>\n\n<p>As a bonus, it's also super easy to handle in tests.  For example, in an rspec integration test:<\/p>\n\n<pre><code># RSpec 1\n\nlambda {\n  visit '\/something\/you\/want\/to\/404'\n}.should raise_error(ActionController::RoutingError)\n\n# RSpec 2+\n\nexpect {\n  get '\/something\/you\/want\/to\/404'\n}.to raise_error(ActionController::RoutingError)\n<\/code><\/pre>\n\n<p>And minitest:<\/p>\n\n<pre><code>assert_raises(ActionController::RoutingError) do \n  get '\/something\/you\/want\/to\/404'\nend\n<\/code><\/pre>\n\n<p>OR refer more info from <a href=\"https:\/\/rubyinrails.com\/2018\/02\/26\/rails-render-404-not-found-from-controller-action\/\" rel=\"noreferrer\">Rails render 404 not found from a controller action<\/a><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 43866,
            "reputation": 159182,
            "user_id": 128421,
            "user_type": "registered",
            "accept_rate": 50,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/71770d043c0f7e3c7bc5f74190015c26?s=256&d=identicon&r=PG",
            "display_name": "the Tin Man",
            "link": "https:\/\/stackoverflow.com\/users\/128421\/the-tin-man"
        },
        "is_accepted": false,
        "score": 1094,
        "last_activity_date": 1565126689,
        "last_edit_date": 1565126689.0,
        "creation_date": 1353465055,
        "answer_id": 13485482,
        "question_id": 13485468,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "You could use [`compact`][1]:\r\n\r\n    [1, nil, 3, nil, nil].compact\r\n    =&gt; [1, 3] \r\n\r\n---\r\n\r\nI&#39;d like to remind people that if you&#39;re getting an array containing nils as the output of a `map` block, and that block tries to conditionally return values, then you&#39;ve got code smell and need to rethink your logic. \r\n\r\nFor instance, if you&#39;re doing something that does this:\r\n\r\n    [1,2,3].map{ |i|\r\n      if i % 2 == 0\r\n        i\r\n      end\r\n    }\r\n    # =&gt; [nil, 2, nil]\r\n\r\nThen don&#39;t. Instead, prior to the `map`, `reject` the stuff you don&#39;t want or `select` what you do want:\r\n\r\n    [1,2,3].select{ |i| i % 2 == 0 }.map{ |i|\r\n      i\r\n    }\r\n    # =&gt; [2]\r\n\r\nI consider using `compact` to clean up a mess as a last-ditch effort to get rid of things we didn&#39;t handle correctly, usually because we didn&#39;t know what was coming at us. We should always know what sort of data is being thrown around in our program; Unexpected\/unknown data is bad. Anytime I see nils in an array I&#39;m working on, I dig into why they exist, and see if I can improve the code generating the array, rather than allow Ruby to waste time and memory generating nils then sifting through the array to remove them later. \r\n\r\n    &#39;Just my $%0.2f.&#39; % [2.to_f\/100]\r\n\r\n[1]: https:\/\/ruby-doc.org\/core-1.9.3\/Array.html#method-i-compact",
        "body": "<p>You could use <a href=\"https:\/\/ruby-doc.org\/core-1.9.3\/Array.html#method-i-compact\" rel=\"noreferrer\"><code>compact<\/code><\/a>:<\/p>\n\n<pre><code>[1, nil, 3, nil, nil].compact\n=&gt; [1, 3] \n<\/code><\/pre>\n\n<hr>\n\n<p>I'd like to remind people that if you're getting an array containing nils as the output of a <code>map<\/code> block, and that block tries to conditionally return values, then you've got code smell and need to rethink your logic. <\/p>\n\n<p>For instance, if you're doing something that does this:<\/p>\n\n<pre><code>[1,2,3].map{ |i|\n  if i % 2 == 0\n    i\n  end\n}\n# =&gt; [nil, 2, nil]\n<\/code><\/pre>\n\n<p>Then don't. Instead, prior to the <code>map<\/code>, <code>reject<\/code> the stuff you don't want or <code>select<\/code> what you do want:<\/p>\n\n<pre><code>[1,2,3].select{ |i| i % 2 == 0 }.map{ |i|\n  i\n}\n# =&gt; [2]\n<\/code><\/pre>\n\n<p>I consider using <code>compact<\/code> to clean up a mess as a last-ditch effort to get rid of things we didn't handle correctly, usually because we didn't know what was coming at us. We should always know what sort of data is being thrown around in our program; Unexpected\/unknown data is bad. Anytime I see nils in an array I'm working on, I dig into why they exist, and see if I can improve the code generating the array, rather than allow Ruby to waste time and memory generating nils then sifting through the array to remove them later. <\/p>\n\n<pre><code>'Just my $%0.2f.' % [2.to_f\/100]\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 206702,
            "reputation": 15521,
            "user_id": 456144,
            "user_type": "registered",
            "accept_rate": 17,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/57b4852b8bc6e8084c1592aabf199f70?s=256&d=identicon&r=PG",
            "display_name": "Ian Purton",
            "link": "https:\/\/stackoverflow.com\/users\/456144\/ian-purton"
        },
        "is_accepted": true,
        "score": 1072,
        "last_activity_date": 1460126135,
        "last_edit_date": 1460126135.0,
        "creation_date": 1287949269,
        "answer_id": 4010063,
        "question_id": 4010039,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Yes, it&#39;s called `next`.\r\n\r\n    for i in 0..5\r\n       if i &lt; 2\r\n         next\r\n       end\r\n       puts &quot;Value of local variable is #{i}&quot;\r\n    end\r\n\r\nThis outputs the following:\r\n\r\n    Value of local variable is 2\r\n    Value of local variable is 3\r\n    Value of local variable is 4\r\n    Value of local variable is 5\r\n     =&gt; 0..5 ",
        "body": "<p>Yes, it's called <code>next<\/code>.<\/p>\n\n<pre><code>for i in 0..5\n   if i &lt; 2\n     next\n   end\n   puts \"Value of local variable is #{i}\"\nend\n<\/code><\/pre>\n\n<p>This outputs the following:<\/p>\n\n<pre><code>Value of local variable is 2\nValue of local variable is 3\nValue of local variable is 4\nValue of local variable is 5\n =&gt; 0..5 \n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 268938,
            "reputation": 12767,
            "user_id": 557995,
            "user_type": "registered",
            "accept_rate": 50,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/f435761416eb58084c5b44cdde8e3454?s=256&d=identicon&r=PG",
            "display_name": "Mukesh Singh Rathaur",
            "link": "https:\/\/stackoverflow.com\/users\/557995\/mukesh-singh-rathaur"
        },
        "is_accepted": true,
        "score": 1066,
        "last_activity_date": 1553943569,
        "last_edit_date": 1553943569.0,
        "creation_date": 1295527055,
        "answer_id": 4747195,
        "question_id": 3950260,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "It\u2019s easy; just do the following:\r\n\r\n    rvm implode\r\n\r\nor\r\n\r\n    rm -rf ~\/.rvm\r\n\r\nAnd don\u2019t forget to remove the script calls in the following files: \r\n\r\n - `~\/.bashrc` \r\n - `~\/.bash_profile` \r\n - `~\/.profile`\r\n\r\nAnd maybe others depending on whatever shell you\u2019re using.",
        "body": "<p>It\u2019s easy; just do the following:<\/p>\n\n<pre><code>rvm implode\n<\/code><\/pre>\n\n<p>or<\/p>\n\n<pre><code>rm -rf ~\/.rvm\n<\/code><\/pre>\n\n<p>And don\u2019t forget to remove the script calls in the following files: <\/p>\n\n<ul>\n<li><code>~\/.bashrc<\/code> <\/li>\n<li><code>~\/.bash_profile<\/code> <\/li>\n<li><code>~\/.profile<\/code><\/li>\n<\/ul>\n\n<p>And maybe others depending on whatever shell you\u2019re using.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 48847,
            "reputation": 11298,
            "user_id": 145282,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/894f0f13d92ad2e7554ccdef7b705ecf?s=256&d=identicon&r=PG",
            "display_name": "Nick Hammond",
            "link": "https:\/\/stackoverflow.com\/users\/145282\/nick-hammond"
        },
        "is_accepted": true,
        "score": 1059,
        "last_activity_date": 1489071793,
        "last_edit_date": 1489071793.0,
        "creation_date": 1275544157,
        "answer_id": 2963582,
        "question_id": 2831059,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "    remove_column :table_name, :column_name\r\n\r\nFor instance:\r\n\r\n    remove_column :users, :hobby\r\n\r\nwould remove the hobby Column from the users table.\r\n",
        "body": "<pre><code>remove_column :table_name, :column_name\n<\/code><\/pre>\n\n<p>For instance:<\/p>\n\n<pre><code>remove_column :users, :hobby\n<\/code><\/pre>\n\n<p>would remove the hobby Column from the users table.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 31679,
            "reputation": 209622,
            "user_id": 87189,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/98e7d6edce863e7a1bf8199b082eb25e?s=256&d=identicon&r=PG",
            "display_name": "tadman",
            "link": "https:\/\/stackoverflow.com\/users\/87189\/tadman"
        },
        "is_accepted": true,
        "score": 1050,
        "last_activity_date": 1622899240,
        "last_edit_date": 1622899240.0,
        "creation_date": 1282667922,
        "answer_id": 3558763,
        "question_id": 3558656,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "There&#39;s a simple command built-in that will pull it:\r\n\r\n    rvm implode\r\n\r\nThis will remove the `rvm\/` directory and all the rubies built within it. In order to remove the final trace of rvm, you need to remove the rvm gem, too, if you installed that:\r\n\r\n    gem uninstall rvm\r\n\r\nThere may be elements left over from a Homebrew, Apt or DNF install of it that require removal as well. This depends on how you installed it in the first place. That clean-up step is optional, as RVM will no longer be involved in Ruby, but can help keep things organized.\r\n\r\n\r\nIf you&#39;ve made modifications to your `PATH` you might want to pull those, too. Check your `.bashrc`, `.profile` and `.bash_profile` files, among other things.\r\n\r\nYou may also have an `\/etc\/rvmrc` file, or one in your home directory `~\/.rvmrc` that may need to be removed as well.",
        "body": "<p>There's a simple command built-in that will pull it:<\/p>\n<pre><code>rvm implode\n<\/code><\/pre>\n<p>This will remove the <code>rvm\/<\/code> directory and all the rubies built within it. In order to remove the final trace of rvm, you need to remove the rvm gem, too, if you installed that:<\/p>\n<pre><code>gem uninstall rvm\n<\/code><\/pre>\n<p>There may be elements left over from a Homebrew, Apt or DNF install of it that require removal as well. This depends on how you installed it in the first place. That clean-up step is optional, as RVM will no longer be involved in Ruby, but can help keep things organized.<\/p>\n<p>If you've made modifications to your <code>PATH<\/code> you might want to pull those, too. Check your <code>.bashrc<\/code>, <code>.profile<\/code> and <code>.bash_profile<\/code> files, among other things.<\/p>\n<p>You may also have an <code>\/etc\/rvmrc<\/code> file, or one in your home directory <code>~\/.rvmrc<\/code> that may need to be removed as well.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 8615,
            "reputation": 56604,
            "user_id": 15614,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/7455fbe2cde016f6cd36b4352be52eaf?s=256&d=identicon&r=PG",
            "display_name": "Kent Fredric",
            "link": "https:\/\/stackoverflow.com\/users\/15614\/kent-fredric"
        },
        "is_accepted": true,
        "score": 1040,
        "last_activity_date": 1620991555,
        "last_edit_date": 1620991555.0,
        "creation_date": 1221690545,
        "answer_id": 88341,
        "question_id": 88311,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "    (0...8).map { (65 + rand(26)).chr }.join\r\n\r\nI spend too much time golfing.\r\n\r\n    (0...50).map { (&#39;a&#39;..&#39;z&#39;).to_a[rand(26)] }.join\r\n\r\n\r\nAnd a last one that&#39;s even more confusing, but more flexible and wastes fewer cycles:\r\n\r\n    o = [(&#39;a&#39;..&#39;z&#39;), (&#39;A&#39;..&#39;Z&#39;)].map(&amp;:to_a).flatten\r\n    string = (0...50).map { o[rand(o.length)] }.join\r\n\r\n\r\nIf you want to generate some random text then use the following:\r\n\r\n    50.times.map { (0...(rand(10))).map { (&#39;a&#39;..&#39;z&#39;).to_a[rand(26)] }.join }.join(&quot; &quot;)\r\n\r\nthis code generates 50 random word string with words length less than 10 characters and then join with space",
        "body": "<pre><code>(0...8).map { (65 + rand(26)).chr }.join\n<\/code><\/pre>\n<p>I spend too much time golfing.<\/p>\n<pre><code>(0...50).map { ('a'..'z').to_a[rand(26)] }.join\n<\/code><\/pre>\n<p>And a last one that's even more confusing, but more flexible and wastes fewer cycles:<\/p>\n<pre><code>o = [('a'..'z'), ('A'..'Z')].map(&amp;:to_a).flatten\nstring = (0...50).map { o[rand(o.length)] }.join\n<\/code><\/pre>\n<p>If you want to generate some random text then use the following:<\/p>\n<pre><code>50.times.map { (0...(rand(10))).map { ('a'..'z').to_a[rand(26)] }.join }.join(&quot; &quot;)\n<\/code><\/pre>\n<p>this code generates 50 random word string with words length less than 10 characters and then join with space<\/p>\n",
        "community_owned_date": 1341325436.0
    },
    {
        "owner": {
            "account_id": 9,
            "reputation": 220393,
            "user_id": 13,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/i.stack.imgur.com\/1XtZi.jpg?s=256&g=1",
            "display_name": "C. K. Young",
            "link": "https:\/\/stackoverflow.com\/users\/13\/c-k-young"
        },
        "is_accepted": true,
        "score": 1006,
        "last_activity_date": 1428340522,
        "last_edit_date": 1428340522.0,
        "creation_date": 1269399937,
        "answer_id": 2505077,
        "question_id": 2505067,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "First, the `class &lt;&lt; foo` syntax opens up `foo`&#39;s singleton class (eigenclass). This allows you to specialise the behaviour of methods called on that specific object.\r\n\r\n    a = &#39;foo&#39;\r\n    class &lt;&lt; a\r\n      def inspect\r\n        &#39;&quot;bar&quot;&#39;\r\n      end\r\n    end\r\n    a.inspect   # =&gt; &quot;bar&quot;\r\n\r\n    a = &#39;foo&#39;   # new object, new singleton class\r\n    a.inspect   # =&gt; &quot;foo&quot;\r\n\r\n---\r\n\r\nNow, to answer the question: `class &lt;&lt; self` opens up `self`&#39;s singleton class, so that methods can be redefined for the current `self` object (which inside a class or module body is the class or module *itself*). Usually, this is used to define class\/module (&quot;static&quot;) methods:\r\n\r\n    class String\r\n      class &lt;&lt; self\r\n        def value_of obj\r\n          obj.to_s\r\n        end\r\n      end\r\n    end\r\n\r\n    String.value_of 42   # =&gt; &quot;42&quot;\r\n\r\nThis can also be written as a shorthand:\r\n\r\n    class String\r\n      def self.value_of obj\r\n        obj.to_s\r\n      end\r\n    end\r\n\r\nOr even shorter:\r\n\r\n    def String.value_of obj\r\n      obj.to_s\r\n    end\r\n\r\n---\r\n\r\nWhen inside a function definition, `self` refers to the object the function is being called with. In this case, `class &lt;&lt; self` opens the singleton class for that object; one use of that is to implement a poor man&#39;s state machine:\r\n\r\n    class StateMachineExample\r\n      def process obj\r\n        process_hook obj\r\n      end\r\n\r\n    private\r\n      def process_state_1 obj\r\n        # ...\r\n        class &lt;&lt; self\r\n          alias process_hook process_state_2\r\n        end\r\n      end\r\n\r\n      def process_state_2 obj\r\n        # ...\r\n        class &lt;&lt; self\r\n          alias process_hook process_state_1\r\n        end\r\n      end\r\n\r\n      # Set up initial state\r\n      alias process_hook process_state_1\r\n    end\r\n\r\nSo, in the example above, each instance of `StateMachineExample` has `process_hook` aliased to `process_state_1`, but note how in the latter, it can redefine `process_hook` (for `self` only, not affecting other `StateMachineExample` instances) to `process_state_2`. So, each time a caller calls the `process` method (which calls the redefinable `process_hook`), the behaviour changes depending on what state it&#39;s in.",
        "body": "<p>First, the <code>class &lt;&lt; foo<\/code> syntax opens up <code>foo<\/code>'s singleton class (eigenclass). This allows you to specialise the behaviour of methods called on that specific object.<\/p>\n\n<pre><code>a = 'foo'\nclass &lt;&lt; a\n  def inspect\n    '\"bar\"'\n  end\nend\na.inspect   # =&gt; \"bar\"\n\na = 'foo'   # new object, new singleton class\na.inspect   # =&gt; \"foo\"\n<\/code><\/pre>\n\n<hr>\n\n<p>Now, to answer the question: <code>class &lt;&lt; self<\/code> opens up <code>self<\/code>'s singleton class, so that methods can be redefined for the current <code>self<\/code> object (which inside a class or module body is the class or module <em>itself<\/em>). Usually, this is used to define class\/module (\"static\") methods:<\/p>\n\n<pre><code>class String\n  class &lt;&lt; self\n    def value_of obj\n      obj.to_s\n    end\n  end\nend\n\nString.value_of 42   # =&gt; \"42\"\n<\/code><\/pre>\n\n<p>This can also be written as a shorthand:<\/p>\n\n<pre><code>class String\n  def self.value_of obj\n    obj.to_s\n  end\nend\n<\/code><\/pre>\n\n<p>Or even shorter:<\/p>\n\n<pre><code>def String.value_of obj\n  obj.to_s\nend\n<\/code><\/pre>\n\n<hr>\n\n<p>When inside a function definition, <code>self<\/code> refers to the object the function is being called with. In this case, <code>class &lt;&lt; self<\/code> opens the singleton class for that object; one use of that is to implement a poor man's state machine:<\/p>\n\n<pre><code>class StateMachineExample\n  def process obj\n    process_hook obj\n  end\n\nprivate\n  def process_state_1 obj\n    # ...\n    class &lt;&lt; self\n      alias process_hook process_state_2\n    end\n  end\n\n  def process_state_2 obj\n    # ...\n    class &lt;&lt; self\n      alias process_hook process_state_1\n    end\n  end\n\n  # Set up initial state\n  alias process_hook process_state_1\nend\n<\/code><\/pre>\n\n<p>So, in the example above, each instance of <code>StateMachineExample<\/code> has <code>process_hook<\/code> aliased to <code>process_state_1<\/code>, but note how in the latter, it can redefine <code>process_hook<\/code> (for <code>self<\/code> only, not affecting other <code>StateMachineExample<\/code> instances) to <code>process_state_2<\/code>. So, each time a caller calls the <code>process<\/code> method (which calls the redefinable <code>process_hook<\/code>), the behaviour changes depending on what state it's in.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 110595,
            "reputation": 25130,
            "user_id": 292586,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/60d2823f63ddd4de8742be5a36d74565?s=256&d=identicon&r=PG",
            "display_name": "F&#225;bio Batista",
            "link": "https:\/\/stackoverflow.com\/users\/292586\/f%c3%a1bio-batista"
        },
        "is_accepted": true,
        "score": 1004,
        "last_activity_date": 1328589480,
        "last_edit_date": 1328589480.0,
        "creation_date": 1289532562,
        "answer_id": 4161385,
        "question_id": 4161357,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "    rails destroy controller lalala\r\n    rails destroy model yadayada\r\n    rails destroy scaffold hohoho\r\n\r\nRails 3.2 adds a new `d` shortcut to the command, so now you can write:\r\n\r\n    rails d controller lalala\r\n    rails d model yadayada\r\n    rails d scaffold hohoho",
        "body": "<pre><code>rails destroy controller lalala\nrails destroy model yadayada\nrails destroy scaffold hohoho\n<\/code><\/pre>\n\n<p>Rails 3.2 adds a new <code>d<\/code> shortcut to the command, so now you can write:<\/p>\n\n<pre><code>rails d controller lalala\nrails d model yadayada\nrails d scaffold hohoho\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4243,
            "reputation": 1306727,
            "user_id": 6309,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/i.stack.imgur.com\/I4fiW.jpg?s=256&g=1",
            "display_name": "VonC",
            "link": "https:\/\/stackoverflow.com\/users\/6309\/vonc"
        },
        "is_accepted": true,
        "score": 993,
        "last_activity_date": 1523025356,
        "last_edit_date": 1523025356.0,
        "creation_date": 1223921425,
        "answer_id": 198470,
        "question_id": 198460,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Use [`rand(range)`][1]\r\n\r\nFrom [Ruby Random Numbers][2]:\r\n\r\n&gt; If you needed a random integer to simulate a roll of a six-sided die, you&#39;d use: `1 + rand(6)`. A roll in craps could be simulated with `2 + rand(6) + rand(6)`.\r\n&gt;\r\n&gt; Finally, if you just need a random float, just call `rand` with no arguments.\r\n\r\n----------\r\n\r\nAs [Marc-Andr&#233; Lafortune][3] mentions in [his answer below (go upvote it)][4], [Ruby 1.9.2 has its own `Random` class][5] (that Marc-Andr&#233; himself [helped to debug][6], hence the [1.9.2 target][7] for that feature).\r\n\r\nFor instance, in this [game where you need to guess 10 numbers][8], you can initialize them with:\r\n\r\n    10.times.map{ 20 + Random.rand(11) } \r\n    #=&gt; [26, 26, 22, 20, 30, 26, 23, 23, 25, 22]\r\n\r\nNote: \r\n\r\n- Using `Random.new.rand(20..30)` (using `Random.new`) generally would not be a good idea, as explained in detail (again) by [Marc-Andr&#233; Lafortune][9], in [his answer][10] (again).\r\n\r\n- But if you don&#39;t use `Random.new`, then the [class method `rand`][11] only takes a `max` value, not a `Range`, as [banister][12] (energetically) points out in the comment (and as documented in the [docs for `Random`][13]).  Only the [instance method][14] can take a `Range`, as illustrated by https:\/\/stackoverflow.com\/questions\/5722881\/generate-a-random-number-with-7-digits\/5723105#5723105.\r\n\r\nThis is why the equivalent of `Random.new.rand(20..30)` would be `20 + Random.rand(11)`, since `Random.rand(int)` returns \u201ca random integer greater than or equal to zero and *less than the argument*.\u201d `20..30` includes 30, I need to come up with a random number between 0 and 11, excluding 11.\r\n\r\n\r\n  [1]: http:\/\/www.ruby-doc.org\/core-2.1.3\/Kernel.html#method-i-rand\r\n  [2]: http:\/\/www.codeodor.com\/index.cfm\/2007\/3\/25\/Ruby-random-numbers\/1042\r\n  [3]: https:\/\/stackoverflow.com\/users\/8279\/marc-andre-lafortune\r\n  [4]: https:\/\/stackoverflow.com\/questions\/198460\/how-to-get-a-random-number-in-ruby\/2773866#2773866\r\n  [5]: http:\/\/www.ruby-lang.org\/en\/news\/2009\/07\/20\/ruby-1-9-2-preview-1-released\/\r\n  [6]: http:\/\/redmine.ruby-lang.org\/issues\/show\/3104\r\n  [7]: http:\/\/redmine.ruby-lang.org\/versions\/show\/11\r\n  [8]: http:\/\/www.eggheadcafe.com\/software\/aspnet\/35817496\/random-integer-within-a-r.aspx\r\n  [9]: https:\/\/stackoverflow.com\/users\/8279\/marc-andre-lafortune\r\n  [10]: https:\/\/stackoverflow.com\/questions\/198460\/how-to-get-a-random-number-in-ruby\/2773866#2773866\r\n  [11]: http:\/\/www.ruby-doc.org\/core\/classes\/Random.src\/M000693.html\r\n  [12]: https:\/\/stackoverflow.com\/users\/66725\/banister\r\n  [13]: http:\/\/www.ruby-doc.org\/core\/classes\/Random.html\r\n  [14]: http:\/\/www.ruby-doc.org\/core\/classes\/Random.src\/M000688.html",
        "body": "<p>Use <a href=\"http:\/\/www.ruby-doc.org\/core-2.1.3\/Kernel.html#method-i-rand\" rel=\"noreferrer\"><code>rand(range)<\/code><\/a><\/p>\n\n<p>From <a href=\"http:\/\/www.codeodor.com\/index.cfm\/2007\/3\/25\/Ruby-random-numbers\/1042\" rel=\"noreferrer\">Ruby Random Numbers<\/a>:<\/p>\n\n<blockquote>\n  <p>If you needed a random integer to simulate a roll of a six-sided die, you'd use: <code>1 + rand(6)<\/code>. A roll in craps could be simulated with <code>2 + rand(6) + rand(6)<\/code>.<\/p>\n  \n  <p>Finally, if you just need a random float, just call <code>rand<\/code> with no arguments.<\/p>\n<\/blockquote>\n\n<hr>\n\n<p>As <a href=\"https:\/\/stackoverflow.com\/users\/8279\/marc-andre-lafortune\">Marc-Andr\u00e9 Lafortune<\/a> mentions in <a href=\"https:\/\/stackoverflow.com\/questions\/198460\/how-to-get-a-random-number-in-ruby\/2773866#2773866\">his answer below (go upvote it)<\/a>, <a href=\"http:\/\/www.ruby-lang.org\/en\/news\/2009\/07\/20\/ruby-1-9-2-preview-1-released\/\" rel=\"noreferrer\">Ruby 1.9.2 has its own <code>Random<\/code> class<\/a> (that Marc-Andr\u00e9 himself <a href=\"http:\/\/redmine.ruby-lang.org\/issues\/show\/3104\" rel=\"noreferrer\">helped to debug<\/a>, hence the <a href=\"http:\/\/redmine.ruby-lang.org\/versions\/show\/11\" rel=\"noreferrer\">1.9.2 target<\/a> for that feature).<\/p>\n\n<p>For instance, in this <a href=\"http:\/\/www.eggheadcafe.com\/software\/aspnet\/35817496\/random-integer-within-a-r.aspx\" rel=\"noreferrer\">game where you need to guess 10 numbers<\/a>, you can initialize them with:<\/p>\n\n<pre><code>10.times.map{ 20 + Random.rand(11) } \n#=&gt; [26, 26, 22, 20, 30, 26, 23, 23, 25, 22]\n<\/code><\/pre>\n\n<p>Note: <\/p>\n\n<ul>\n<li><p>Using <code>Random.new.rand(20..30)<\/code> (using <code>Random.new<\/code>) generally would not be a good idea, as explained in detail (again) by <a href=\"https:\/\/stackoverflow.com\/users\/8279\/marc-andre-lafortune\">Marc-Andr\u00e9 Lafortune<\/a>, in <a href=\"https:\/\/stackoverflow.com\/questions\/198460\/how-to-get-a-random-number-in-ruby\/2773866#2773866\">his answer<\/a> (again).<\/p><\/li>\n<li><p>But if you don't use <code>Random.new<\/code>, then the <a href=\"http:\/\/www.ruby-doc.org\/core\/classes\/Random.src\/M000693.html\" rel=\"noreferrer\">class method <code>rand<\/code><\/a> only takes a <code>max<\/code> value, not a <code>Range<\/code>, as <a href=\"https:\/\/stackoverflow.com\/users\/66725\/banister\">banister<\/a> (energetically) points out in the comment (and as documented in the <a href=\"http:\/\/www.ruby-doc.org\/core\/classes\/Random.html\" rel=\"noreferrer\">docs for <code>Random<\/code><\/a>).  Only the <a href=\"http:\/\/www.ruby-doc.org\/core\/classes\/Random.src\/M000688.html\" rel=\"noreferrer\">instance method<\/a> can take a <code>Range<\/code>, as illustrated by <a href=\"https:\/\/stackoverflow.com\/questions\/5722881\/generate-a-random-number-with-7-digits\/5723105#5723105\">generate a random number with 7 digits<\/a>.<\/p><\/li>\n<\/ul>\n\n<p>This is why the equivalent of <code>Random.new.rand(20..30)<\/code> would be <code>20 + Random.rand(11)<\/code>, since <code>Random.rand(int)<\/code> returns \u201ca random integer greater than or equal to zero and <em>less than the argument<\/em>.\u201d <code>20..30<\/code> includes 30, I need to come up with a random number between 0 and 11, excluding 11.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 24259,
            "reputation": 18316,
            "user_id": 61592,
            "user_type": "registered",
            "accept_rate": 62,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/55ff1426273f950b43135f619d025476?s=256&d=identicon&r=PG",
            "display_name": "Todd R",
            "link": "https:\/\/stackoverflow.com\/users\/61592\/todd-r"
        },
        "is_accepted": false,
        "score": 986,
        "last_activity_date": 1399329140,
        "last_edit_date": 1399329140.0,
        "creation_date": 1273109395,
        "answer_id": 2777863,
        "question_id": 2777802,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Are you looking for the following?\r\n\r\n    File.open(yourfile, &#39;w&#39;) { |file| file.write(&quot;your text&quot;) }\r\n",
        "body": "<p>Are you looking for the following?<\/p>\n\n<pre><code>File.open(yourfile, 'w') { |file| file.write(\"your text\") }\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 104325,
            "reputation": 19734,
            "user_id": 278984,
            "user_type": "registered",
            "accept_rate": 79,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/29a6c77c187f2a5d02d2b79df4b31223?s=256&d=identicon&r=PG",
            "display_name": "spacemonkey",
            "link": "https:\/\/stackoverflow.com\/users\/278984\/spacemonkey"
        },
        "is_accepted": true,
        "score": 978,
        "last_activity_date": 1554841433,
        "last_edit_date": 1554841433.0,
        "creation_date": 1283256021,
        "answer_id": 3608756,
        "question_id": 3608287,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "On Ubuntu\/Debian and other distributions using aptitude:\r\n\r\n    sudo apt-get install libmysql-ruby libmysqlclient-dev\r\n\r\nPackage `libmysql-ruby` has been phased out and replaced by `ruby-mysql`. [This][1] is where I found the solution.\r\n\r\nIf the above command doesn&#39;t work because `libmysql-ruby` cannot be found, the following should be sufficient:\r\n\r\n    sudo apt-get install libmysqlclient-dev\r\n\r\nOn Red Hat\/CentOS and other distributions using yum:\r\n\r\n    sudo yum install mysql-devel\r\n\r\nOn Mac OS X with [Homebrew][2]:\r\n\r\n    brew install mysql\r\n\r\n\r\n  [1]: https:\/\/askubuntu.com\/a\/641953\r\n  [2]: https:\/\/brew.sh\/",
        "body": "<p>On Ubuntu\/Debian and other distributions using aptitude:<\/p>\n\n<pre><code>sudo apt-get install libmysql-ruby libmysqlclient-dev\n<\/code><\/pre>\n\n<p>Package <code>libmysql-ruby<\/code> has been phased out and replaced by <code>ruby-mysql<\/code>. <a href=\"https:\/\/askubuntu.com\/a\/641953\">This<\/a> is where I found the solution.<\/p>\n\n<p>If the above command doesn't work because <code>libmysql-ruby<\/code> cannot be found, the following should be sufficient:<\/p>\n\n<pre><code>sudo apt-get install libmysqlclient-dev\n<\/code><\/pre>\n\n<p>On Red Hat\/CentOS and other distributions using yum:<\/p>\n\n<pre><code>sudo yum install mysql-devel\n<\/code><\/pre>\n\n<p>On Mac OS X with <a href=\"https:\/\/brew.sh\/\" rel=\"noreferrer\">Homebrew<\/a>:<\/p>\n\n<pre><code>brew install mysql\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2318915,
            "reputation": 119212,
            "user_id": 2035262,
            "user_type": "registered",
            "accept_rate": 78,
            "profile_image": "https:\/\/i.stack.imgur.com\/pPtKA.jpg?s=256&g=1",
            "display_name": "Aleksei Matiushkin",
            "link": "https:\/\/stackoverflow.com\/users\/2035262\/aleksei-matiushkin"
        },
        "is_accepted": true,
        "score": 933,
        "last_activity_date": 1585623691,
        "last_edit_date": 1585623691.0,
        "creation_date": 1386921164,
        "answer_id": 20561594,
        "question_id": 20559255,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Modern era update, as [stated by mimoralea][1]:\r\n\r\n\r\n&gt; In case that you are using ruby 2.0 or 2.2 (thanks @patrick-davey).\r\n&gt; \r\n&gt;     sudo apt-get install ruby2.0-dev\r\n&gt;     sudo apt-get install ruby2.2-dev\r\n&gt;     sudo apt-get install ruby2.3-dev\r\n\r\nor, generic way:\r\n\r\n&gt;     sudo apt-get install ruby-dev\r\nor\r\n\r\n&gt;     sudo apt-get install ruby`ruby -e &#39;puts RUBY_VERSION[\/\\d+\\.\\d+\/]&#39;`-dev\r\n\r\n---\r\n\r\nThe first link you\u2019ve posted is _exactly_ your case: there is no ruby development environment installed. Development env is needed to compile ruby extensions, which are mostly written in `C`. Proxy has nothing to do with the problem: everything is downloaded fine, just compilation fails.\r\n\r\nI would suggest you to install `ruby-dev` (`ruby-devel` for rpm-based distros) package onto you target machine.\r\n\r\n`gcc` package might be needed as well.\r\n\r\nTry:\r\n\r\n    $ sudo apt-get install ruby-dev\r\n\r\nOr, for Redhat distro:\r\n\r\n    $ sudo yum install ruby-devel\r\n\r\nOr, for [open]SuSE:\r\n\r\n    $ sudo zypper install ruby-devel\r\n\r\n\r\n  [1]: https:\/\/stackoverflow.com\/questions\/20559255\/error-while-installing-json-gem-mkmf-rb-cant-find-header-files-for-ruby\/26225468#26225468",
        "body": "<p>Modern era update, as <a href=\"https:\/\/stackoverflow.com\/questions\/20559255\/error-while-installing-json-gem-mkmf-rb-cant-find-header-files-for-ruby\/26225468#26225468\">stated by mimoralea<\/a>:<\/p>\n\n<blockquote>\n  <p>In case that you are using ruby 2.0 or 2.2 (thanks @patrick-davey).<\/p>\n\n<pre><code>sudo apt-get install ruby2.0-dev\nsudo apt-get install ruby2.2-dev\nsudo apt-get install ruby2.3-dev\n<\/code><\/pre>\n<\/blockquote>\n\n<p>or, generic way:<\/p>\n\n<blockquote>\n<pre><code>sudo apt-get install ruby-dev\n<\/code><\/pre>\n  \n  <p>or<\/p>\n\n<pre><code>sudo apt-get install ruby`ruby -e 'puts RUBY_VERSION[\/\\d+\\.\\d+\/]'`-dev\n<\/code><\/pre>\n<\/blockquote>\n\n<hr>\n\n<p>The first link you\u2019ve posted is <em>exactly<\/em> your case: there is no ruby development environment installed. Development env is needed to compile ruby extensions, which are mostly written in <code>C<\/code>. Proxy has nothing to do with the problem: everything is downloaded fine, just compilation fails.<\/p>\n\n<p>I would suggest you to install <code>ruby-dev<\/code> (<code>ruby-devel<\/code> for rpm-based distros) package onto you target machine.<\/p>\n\n<p><code>gcc<\/code> package might be needed as well.<\/p>\n\n<p>Try:<\/p>\n\n<pre><code>$ sudo apt-get install ruby-dev\n<\/code><\/pre>\n\n<p>Or, for Redhat distro:<\/p>\n\n<pre><code>$ sudo yum install ruby-devel\n<\/code><\/pre>\n\n<p>Or, for [open]SuSE:<\/p>\n\n<pre><code>$ sudo zypper install ruby-devel\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 2529,
            "reputation": 30795,
            "user_id": 3525,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/c3ae6a1b8d708b79b6b85ecc365266a4?s=256&d=identicon&r=PG",
            "display_name": "joel.neely",
            "link": "https:\/\/stackoverflow.com\/users\/3525\/joel-neely"
        },
        "is_accepted": false,
        "score": 927,
        "last_activity_date": 1256695980,
        "last_edit_date": null,
        "creation_date": 1256695980,
        "answer_id": 1634814,
        "question_id": 1634750,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "If you want to remove only leading and trailing whitespace (like PHP&#39;s trim) you can use `.strip`, but if you want to remove ***all*** whitespace, you can use `.gsub(\/\\s+\/, &quot;&quot;)` instead .",
        "body": "<p>If you want to remove only leading and trailing whitespace (like PHP's trim) you can use <code>.strip<\/code>, but if you want to remove <strong><em>all<\/em><\/strong> whitespace, you can use <code>.gsub(\/\\s+\/, \"\")<\/code> instead .<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 50123,
            "reputation": 365613,
            "user_id": 149392,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/7a561ec0875fcbbe3066ea8fe288ec77?s=256&d=identicon&r=PG",
            "display_name": "sepp2k",
            "link": "https:\/\/stackoverflow.com\/users\/149392\/sepp2k"
        },
        "is_accepted": true,
        "score": 922,
        "last_activity_date": 1295056029,
        "last_edit_date": 1295056029.0,
        "creation_date": 1295055443,
        "answer_id": 4697573,
        "question_id": 4697557,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "If you&#39;re using ruby 1.8.7 or 1.9, you can use the fact that iterator methods like `each_with_index`, when called without a block, return an `Enumerator` object, which you can call `Enumerable` methods like `map` on. So you can do:\r\n\r\n    arr.each_with_index.map { |x,i| [x, i+2] }\r\n\r\nIn 1.8.6 you can do:\r\n\r\n    require &#39;enumerator&#39;\r\n    arr.enum_for(:each_with_index).map { |x,i| [x, i+2] }",
        "body": "<p>If you're using ruby 1.8.7 or 1.9, you can use the fact that iterator methods like <code>each_with_index<\/code>, when called without a block, return an <code>Enumerator<\/code> object, which you can call <code>Enumerable<\/code> methods like <code>map<\/code> on. So you can do:<\/p>\n\n<pre><code>arr.each_with_index.map { |x,i| [x, i+2] }\n<\/code><\/pre>\n\n<p>In 1.8.6 you can do:<\/p>\n\n<pre><code>require 'enumerator'\narr.enum_for(:each_with_index).map { |x,i| [x, i+2] }\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 8679058,
            "reputation": 9833,
            "user_id": 6495570,
            "user_type": "registered",
            "accept_rate": 80,
            "profile_image": "https:\/\/i.stack.imgur.com\/nDPog.jpg?s=256&g=1",
            "display_name": "Abhinay Reddy Keesara",
            "link": "https:\/\/stackoverflow.com\/users\/6495570\/abhinay-reddy-keesara"
        },
        "is_accepted": true,
        "score": 915,
        "last_activity_date": 1700588812,
        "last_edit_date": 1700588812.0,
        "creation_date": 1467683486,
        "answer_id": 38194139,
        "question_id": 38194032,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Open your terminal and run\r\n\r\n```lang-none\r\ncurl -sSL https:\/\/raw.githubusercontent.com\/rvm\/rvm\/master\/binscripts\/rvm-installer | bash -s stable\r\n```\r\n\r\nFor the `rvm` command to work, you need to run:\r\n\r\n```lang-none\r\nsource ~\/.rvm\/scripts\/rvm\r\n```\r\n\r\nNow, run `rvm list known`\r\n\r\nThis shows the list of versions of the Ruby interpreter.\r\n\r\nNow, run `rvm install ruby@latest` to get the latest Ruby version.\r\n\r\nIf you type `ruby -v` in the terminal, you should see `ruby X.X.X`.\r\n\r\nIf it still shows you `ruby 2.0.`, run `rvm use ruby-X.X.X --default`.\r\n\r\n**Prerequisites for Windows&amp;nbsp;10:**\r\n\r\n- C compiler. You can use http:\/\/www.mingw.org\/\r\n- `make` command available otherwise it will complain that &quot;bash: make: command not found&quot;. You can install it by running `mingw-get install msys-make`\r\n- Add &quot;C:\\MinGW\\msys\\1.0\\bin&quot; and &quot;C:\\MinGW\\bin&quot; to your path environment variable\r\n\r\n",
        "body": "<p>Open your terminal and run<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>curl -sSL https:\/\/raw.githubusercontent.com\/rvm\/rvm\/master\/binscripts\/rvm-installer | bash -s stable\n<\/code><\/pre>\n<p>For the <code>rvm<\/code> command to work, you need to run:<\/p>\n<pre class=\"lang-none prettyprint-override\"><code>source ~\/.rvm\/scripts\/rvm\n<\/code><\/pre>\n<p>Now, run <code>rvm list known<\/code><\/p>\n<p>This shows the list of versions of the Ruby interpreter.<\/p>\n<p>Now, run <code>rvm install ruby@latest<\/code> to get the latest Ruby version.<\/p>\n<p>If you type <code>ruby -v<\/code> in the terminal, you should see <code>ruby X.X.X<\/code>.<\/p>\n<p>If it still shows you <code>ruby 2.0.<\/code>, run <code>rvm use ruby-X.X.X --default<\/code>.<\/p>\n<p><strong>Prerequisites for Windows\u00a010:<\/strong><\/p>\n<ul>\n<li>C compiler. You can use <a href=\"http:\/\/www.mingw.org\/\" rel=\"nofollow noreferrer\">http:\/\/www.mingw.org\/<\/a><\/li>\n<li><code>make<\/code> command available otherwise it will complain that &quot;bash: make: command not found&quot;. You can install it by running <code>mingw-get install msys-make<\/code><\/li>\n<li>Add &quot;C:\\MinGW\\msys\\1.0\\bin&quot; and &quot;C:\\MinGW\\bin&quot; to your path environment variable<\/li>\n<\/ul>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 235949,
            "reputation": 10553,
            "user_id": 1879373,
            "user_type": "registered",
            "profile_image": "https:\/\/i.stack.imgur.com\/LZ6LH.jpg?s=256&g=1",
            "display_name": "NSMutableString",
            "link": "https:\/\/stackoverflow.com\/users\/1879373\/nsmutablestring"
        },
        "is_accepted": true,
        "score": 913,
        "last_activity_date": 1501273224,
        "last_edit_date": 1501273224.0,
        "creation_date": 1386664246,
        "answer_id": 20489489,
        "question_id": 20487849,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "to remove your current version you could just run:\r\n\r\n    sudo gem uninstall cocoapods\r\n\r\nyou can install a specific version of cocoa pods via the following command:\r\n\r\n    sudo gem install cocoapods -v 0.25.0\r\n\r\nYou can use older installed versions with following command:\r\n\r\n    pod _0.25.0_ setup\r\n",
        "body": "<p>to remove your current version you could just run:<\/p>\n\n<pre><code>sudo gem uninstall cocoapods\n<\/code><\/pre>\n\n<p>you can install a specific version of cocoa pods via the following command:<\/p>\n\n<pre><code>sudo gem install cocoapods -v 0.25.0\n<\/code><\/pre>\n\n<p>You can use older installed versions with following command:<\/p>\n\n<pre><code>pod _0.25.0_ setup\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5040,
            "reputation": 21375,
            "user_id": 7898,
            "user_type": "registered",
            "accept_rate": 92,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/acfc954b00b2fab98555a08d7c254204?s=256&d=identicon&r=PG",
            "display_name": "Jean",
            "link": "https:\/\/stackoverflow.com\/users\/7898\/jean"
        },
        "is_accepted": true,
        "score": 896,
        "last_activity_date": 1337322201,
        "last_edit_date": 1337322201.0,
        "creation_date": 1221630790,
        "answer_id": 80387,
        "question_id": 80357,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Using [`scan`][1] should do the trick:\r\n    \r\n    string.scan(\/regex\/)\r\n\r\n\r\n  [1]: http:\/\/ruby-doc.org\/core-1.9.3\/String.html#method-i-scan",
        "body": "<p>Using <a href=\"http:\/\/ruby-doc.org\/core-1.9.3\/String.html#method-i-scan\" rel=\"noreferrer\"><code>scan<\/code><\/a> should do the trick:<\/p>\n\n<pre><code>string.scan(\/regex\/)\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 55940,
            "reputation": 51196,
            "user_id": 167614,
            "user_type": "registered",
            "accept_rate": 95,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/45b75f9f866d240362c0d7fa125025ba?s=256&d=identicon&r=PG",
            "display_name": "Peter Brown",
            "link": "https:\/\/stackoverflow.com\/users\/167614\/peter-brown"
        },
        "is_accepted": true,
        "score": 885,
        "last_activity_date": 1682670334,
        "last_edit_date": 1682670334.0,
        "creation_date": 1340125430,
        "answer_id": 11105831,
        "question_id": 6227600,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "For those of you who just came here to know how to delete a key\/value pair from a hash, you can use:&lt;br&gt;\r\n`hash.delete(key)`\r\n\r\nFor the rest of you who came here to read a wall of text about something entirely different, you can read the rest of this answer:\r\n\r\n[Rails has an except\/except! method][1] that returns the hash with those keys removed. If you&#39;re already using Rails, there&#39;s no sense in creating your own version of this. \r\n\r\n    class Hash\r\n      # Returns a hash that includes everything but the given keys.\r\n      #   hash = { a: true, b: false, c: nil}\r\n      #   hash.except(:c) # =&gt; { a: true, b: false}\r\n      #   hash # =&gt; { a: true, b: false, c: nil}\r\n      #\r\n      # This is useful for limiting a set of parameters to everything but a few known toggles:\r\n      #   @person.update(params[:person].except(:admin))\r\n      def except(*keys)\r\n        dup.except!(*keys)\r\n      end\r\n    \r\n      # Replaces the hash without the given keys.\r\n      #   hash = { a: true, b: false, c: nil}\r\n      #   hash.except!(:c) # =&gt; { a: true, b: false}\r\n      #   hash # =&gt; { a: true, b: false }\r\n      def except!(*keys)\r\n        keys.each { |key| delete(key) }\r\n        self\r\n      end\r\n    end\r\n\r\n[1]: http:\/\/api.rubyonrails.org\/classes\/Hash.html#method-i-except\r\n",
        "body": "<p>For those of you who just came here to know how to delete a key\/value pair from a hash, you can use:<br>\n<code>hash.delete(key)<\/code><\/p>\n<p>For the rest of you who came here to read a wall of text about something entirely different, you can read the rest of this answer:<\/p>\n<p><a href=\"http:\/\/api.rubyonrails.org\/classes\/Hash.html#method-i-except\" rel=\"noreferrer\">Rails has an except\/except! method<\/a> that returns the hash with those keys removed. If you're already using Rails, there's no sense in creating your own version of this.<\/p>\n<pre><code>class Hash\n  # Returns a hash that includes everything but the given keys.\n  #   hash = { a: true, b: false, c: nil}\n  #   hash.except(:c) # =&gt; { a: true, b: false}\n  #   hash # =&gt; { a: true, b: false, c: nil}\n  #\n  # This is useful for limiting a set of parameters to everything but a few known toggles:\n  #   @person.update(params[:person].except(:admin))\n  def except(*keys)\n    dup.except!(*keys)\n  end\n\n  # Replaces the hash without the given keys.\n  #   hash = { a: true, b: false, c: nil}\n  #   hash.except!(:c) # =&gt; { a: true, b: false}\n  #   hash # =&gt; { a: true, b: false }\n  def except!(*keys)\n    keys.each { |key| delete(key) }\n    self\n  end\nend\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 110194,
            "reputation": 16839,
            "user_id": 291700,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/39e784d62dbda680c5c2ac6d9b9738aa?s=256&d=identicon&r=PG",
            "display_name": "Charles Caldwell",
            "link": "https:\/\/stackoverflow.com\/users\/291700\/charles-caldwell"
        },
        "is_accepted": true,
        "score": 866,
        "last_activity_date": 1334689223,
        "last_edit_date": null,
        "creation_date": 1334689223,
        "answer_id": 10197397,
        "question_id": 10197254,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "In a `case` statement, a `,` is the equivalent of `||` in an `if` statement. \r\n\r\n    case car\r\n       when &#39;toyota&#39;, &#39;lexus&#39;\r\n          # code\r\n    end\r\n\r\n[Some other things you can do with a Ruby case statement][1]\r\n\r\n\r\n  [1]: http:\/\/www.skorks.com\/2009\/08\/how-a-ruby-case-statement-works-and-what-you-can-do-with-it\/",
        "body": "<p>In a <code>case<\/code> statement, a <code>,<\/code> is the equivalent of <code>||<\/code> in an <code>if<\/code> statement. <\/p>\n\n<pre><code>case car\n   when 'toyota', 'lexus'\n      # code\nend\n<\/code><\/pre>\n\n<p><a href=\"http:\/\/www.skorks.com\/2009\/08\/how-a-ruby-case-statement-works-and-what-you-can-do-with-it\/\" rel=\"noreferrer\">Some other things you can do with a Ruby case statement<\/a><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 877010,
            "reputation": 1423,
            "user_id": 131852,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/5bf3dc5d4c764657636ea91b21999629?s=256&d=identicon&r=PG",
            "display_name": "christopherstyles",
            "link": "https:\/\/stackoverflow.com\/users\/131852\/christopherstyles"
        },
        "is_accepted": false,
        "score": 864,
        "last_activity_date": 1433448467,
        "last_edit_date": 1433448467.0,
        "creation_date": 1256430777,
        "answer_id": 1619602,
        "question_id": 88311,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Why not use SecureRandom?\r\n\r\n    require &#39;securerandom&#39;\r\n    random_string = SecureRandom.hex\r\n\r\n    # outputs: 5b5cd0da3121fc53b4bc84d0c8af2e81 (i.e. 32 chars of 0..9, a..f)\r\n\r\nSecureRandom also has methods for:\r\n\r\n - base64\r\n - random_bytes\r\n - random_number\r\n\r\nsee: [http:\/\/ruby-doc.org\/stdlib-1.9.2\/libdoc\/securerandom\/rdoc\/SecureRandom.html][1]\r\n\r\n\r\n  [1]: http:\/\/ruby-doc.org\/stdlib-1.9.2\/libdoc\/securerandom\/rdoc\/SecureRandom.html\r\n",
        "body": "<p>Why not use SecureRandom?<\/p>\n\n<pre><code>require 'securerandom'\nrandom_string = SecureRandom.hex\n\n# outputs: 5b5cd0da3121fc53b4bc84d0c8af2e81 (i.e. 32 chars of 0..9, a..f)\n<\/code><\/pre>\n\n<p>SecureRandom also has methods for:<\/p>\n\n<ul>\n<li>base64<\/li>\n<li>random_bytes<\/li>\n<li>random_number<\/li>\n<\/ul>\n\n<p>see: <a href=\"http:\/\/ruby-doc.org\/stdlib-1.9.2\/libdoc\/securerandom\/rdoc\/SecureRandom.html\" rel=\"noreferrer\">http:\/\/ruby-doc.org\/stdlib-1.9.2\/libdoc\/securerandom\/rdoc\/SecureRandom.html<\/a><\/p>\n",
        "community_owned_date": 1341325436.0
    },
    {
        "owner": {
            "account_id": 61504,
            "reputation": 8719,
            "user_id": 183273,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/b8b6a33a6e5146d7b1bffa5508666ba4?s=256&d=identicon&r=PG",
            "display_name": "jomey",
            "link": "https:\/\/stackoverflow.com\/users\/183273\/jomey"
        },
        "is_accepted": false,
        "score": 861,
        "last_activity_date": 1635953499,
        "last_edit_date": 1635953499.0,
        "creation_date": 1255019293,
        "answer_id": 1538949,
        "question_id": 1538789,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "**For ruby &gt;= 2.4** you can use [sum][1]:\r\n\r\n`array.sum` \r\n\r\n**For ruby &lt; 2.4** you can use [inject][2]:\r\n\r\n    array.inject(0, :+)\r\n\r\nNote: the `0` base case is needed otherwise `nil` will be returned on empty arrays:\r\n\r\n    &gt; [].inject(:+)\r\n    nil\r\n    &gt; [].inject(0, :+)\r\n    0\r\n\r\n\r\n  [1]: https:\/\/apidock.com\/ruby\/Array\/sum\r\n  [2]: https:\/\/apidock.com\/ruby\/Enumerable\/inject",
        "body": "<p><strong>For ruby &gt;= 2.4<\/strong> you can use <a href=\"https:\/\/apidock.com\/ruby\/Array\/sum\" rel=\"noreferrer\">sum<\/a>:<\/p>\n<p><code>array.sum<\/code><\/p>\n<p><strong>For ruby &lt; 2.4<\/strong> you can use <a href=\"https:\/\/apidock.com\/ruby\/Enumerable\/inject\" rel=\"noreferrer\">inject<\/a>:<\/p>\n<pre><code>array.inject(0, :+)\n<\/code><\/pre>\n<p>Note: the <code>0<\/code> base case is needed otherwise <code>nil<\/code> will be returned on empty arrays:<\/p>\n<pre><code>&gt; [].inject(:+)\nnil\n&gt; [].inject(0, :+)\n0\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 42758,
            "reputation": 25504,
            "user_id": 124674,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/80534d1ff6252825aa4c30e0cb157099?s=256&d=identicon&r=PG",
            "display_name": "theIV",
            "link": "https:\/\/stackoverflow.com\/users\/124674\/theiv"
        },
        "is_accepted": true,
        "score": 831,
        "last_activity_date": 1684956352,
        "last_edit_date": 1684956352.0,
        "creation_date": 1251752188,
        "answer_id": 1359386,
        "question_id": 1359370,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "### `.min`\r\n\r\n```ruby\r\n[5, 10].min\r\n```\r\n\r\n### `.max`\r\n\r\n```ruby\r\n[4, 7].max\r\n```\r\n\r\nThey come from the [Enumerable module][1], so anything that includes `Enumerable` will have those methods available.\r\n\r\nv2.4 introduces own `Array#min` and `Array#max`, which are way faster than Enumerable&#39;s methods because they skip calling `#each`.\r\n\r\n### `.minmax`\r\n\r\n@nicholasklick mentions another option, [`Enumerable#minmax`][2], but this time returning an array of `[min, max]`.\r\n\r\n```ruby\r\n[4, 5, 7, 10].minmax\r\n#=&gt; [4, 10]\r\n```\r\n\r\n  [1]: http:\/\/www.ruby-doc.org\/core\/classes\/Enumerable.html\r\n  [2]: http:\/\/www.ruby-doc.org\/core-2.0\/Enumerable.html#method-i-minmax",
        "body": "<h3><code>.min<\/code><\/h3>\n<pre class=\"lang-rb prettyprint-override\"><code>[5, 10].min\n<\/code><\/pre>\n<h3><code>.max<\/code><\/h3>\n<pre class=\"lang-rb prettyprint-override\"><code>[4, 7].max\n<\/code><\/pre>\n<p>They come from the <a href=\"http:\/\/www.ruby-doc.org\/core\/classes\/Enumerable.html\" rel=\"noreferrer\">Enumerable module<\/a>, so anything that includes <code>Enumerable<\/code> will have those methods available.<\/p>\n<p>v2.4 introduces own <code>Array#min<\/code> and <code>Array#max<\/code>, which are way faster than Enumerable's methods because they skip calling <code>#each<\/code>.<\/p>\n<h3><code>.minmax<\/code><\/h3>\n<p>@nicholasklick mentions another option, <a href=\"http:\/\/www.ruby-doc.org\/core-2.0\/Enumerable.html#method-i-minmax\" rel=\"noreferrer\"><code>Enumerable#minmax<\/code><\/a>, but this time returning an array of <code>[min, max]<\/code>.<\/p>\n<pre class=\"lang-rb prettyprint-override\"><code>[4, 5, 7, 10].minmax\n#=&gt; [4, 10]\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 481218,
            "reputation": 14692,
            "user_id": 894892,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/9221d4b770f28febff48a9305959fc17?s=256&d=identicon&r=PG",
            "display_name": "defvol",
            "link": "https:\/\/stackoverflow.com\/users\/894892\/defvol"
        },
        "is_accepted": true,
        "score": 831,
        "last_activity_date": 1593192740,
        "last_edit_date": 1593192740.0,
        "creation_date": 1346107221,
        "answer_id": 12150580,
        "question_id": 10940736,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Check that PATH contains `$HOME\/.rbenv\/shims` and `$HOME\/.rbenv\/bin`\r\n\r\n    $ env | grep PATH\r\n\r\nAlso check that you have the following in your ~\/.bash_profile if using bash or ~\/.zshenv if using zsh\r\n\r\n    export PATH=&quot;$HOME\/.rbenv\/bin:$PATH&quot;\r\n    eval &quot;$(rbenv init -)&quot;\r\n\r\nNOTE:\r\nMake sure it&#39;s the last setting in your ~\/.bash_profile . I ran into an issue where I installed a program that updated my .bash_profile and reset PATH.\r\n\r\nFinally, make sure your `$HOME` folder doesn&#39;t have a `.ruby-version` file that you may have created by accident if you were to have done `$ rbenv local &lt;ruby-version&gt;` in your `$HOME` folder. Doing `$ rbenv global &lt;ruby-version&gt;` modifies the `$HOME\/.rbenv\/version` file, and the existence of a `.ruby-version` file in the `$HOME` folder would override the version set by `$HOME\/.rbenv\/version`.\r\n\r\n\r\nFrom the docs:\r\n\r\n&gt; Choosing the Ruby Version\r\nWhen you execute a shim, rbenv determines which Ruby version to use by reading it from the following sources, in this order:\r\n\r\n&gt; The RBENV_VERSION environment variable, if specified. You can use the rbenv shell command to set this environment variable in your current shell session.\r\n\r\n&gt; The first .ruby-version file found by searching the directory of the script you are executing and each of its parent directories until reaching the root of your filesystem.\r\n\r\n&gt; The first .ruby-version file found by searching the current working directory and each of its parent directories until reaching the root of your filesystem. You can modify the .ruby-version file in the current working directory with the rbenv local command.\r\n\r\n&gt; The global ~\/.rbenv\/version file. You can modify this file using the rbenv global command. If the global version file is not present, rbenv assumes you want to use the &quot;system&quot; Ruby\u2014i.e. whatever version would be run if rbenv weren&#39;t in your path.",
        "body": "<p>Check that PATH contains <code>$HOME\/.rbenv\/shims<\/code> and <code>$HOME\/.rbenv\/bin<\/code><\/p>\n<pre><code>$ env | grep PATH\n<\/code><\/pre>\n<p>Also check that you have the following in your ~\/.bash_profile if using bash or ~\/.zshenv if using zsh<\/p>\n<pre><code>export PATH=&quot;$HOME\/.rbenv\/bin:$PATH&quot;\neval &quot;$(rbenv init -)&quot;\n<\/code><\/pre>\n<p>NOTE:\nMake sure it's the last setting in your ~\/.bash_profile . I ran into an issue where I installed a program that updated my .bash_profile and reset PATH.<\/p>\n<p>Finally, make sure your <code>$HOME<\/code> folder doesn't have a <code>.ruby-version<\/code> file that you may have created by accident if you were to have done <code>$ rbenv local &lt;ruby-version&gt;<\/code> in your <code>$HOME<\/code> folder. Doing <code>$ rbenv global &lt;ruby-version&gt;<\/code> modifies the <code>$HOME\/.rbenv\/version<\/code> file, and the existence of a <code>.ruby-version<\/code> file in the <code>$HOME<\/code> folder would override the version set by <code>$HOME\/.rbenv\/version<\/code>.<\/p>\n<p>From the docs:<\/p>\n<blockquote>\n<p>Choosing the Ruby Version\nWhen you execute a shim, rbenv determines which Ruby version to use by reading it from the following sources, in this order:<\/p>\n<\/blockquote>\n<blockquote>\n<p>The RBENV_VERSION environment variable, if specified. You can use the rbenv shell command to set this environment variable in your current shell session.<\/p>\n<\/blockquote>\n<blockquote>\n<p>The first .ruby-version file found by searching the directory of the script you are executing and each of its parent directories until reaching the root of your filesystem.<\/p>\n<\/blockquote>\n<blockquote>\n<p>The first .ruby-version file found by searching the current working directory and each of its parent directories until reaching the root of your filesystem. You can modify the .ruby-version file in the current working directory with the rbenv local command.<\/p>\n<\/blockquote>\n<blockquote>\n<p>The global ~\/.rbenv\/version file. You can modify this file using the rbenv global command. If the global version file is not present, rbenv assumes you want to use the &quot;system&quot; Ruby\u2014i.e. whatever version would be run if rbenv weren't in your path.<\/p>\n<\/blockquote>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 45005,
            "reputation": 56951,
            "user_id": 132382,
            "user_type": "registered",
            "accept_rate": 98,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/20fc7ee8f405aa42e36eb73e841e5a36?s=256&d=identicon&r=PG",
            "display_name": "pilcrow",
            "link": "https:\/\/stackoverflow.com\/users\/132382\/pilcrow"
        },
        "is_accepted": false,
        "score": 825,
        "last_activity_date": 1406142623,
        "last_edit_date": 1406142623.0,
        "creation_date": 1259212144,
        "answer_id": 1801652,
        "question_id": 1801516,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "You&#39;ve got a workable idea, but the `#flatten!` is in the wrong place -- it flattens its receiver, so you could use it to turn `[1, 2, [&#39;foo&#39;, &#39;bar&#39;]]` into `[1,2,&#39;foo&#39;,&#39;bar&#39;]`.\r\n\r\nI&#39;m doubtless forgetting some approaches, but you can **concatenate**:\r\n\r\n    a1.concat a2\r\n    a1 + a2              # creates a new array, as does a1 += a2\r\n\r\nor **prepend\/append**:\r\n\r\n    a1.push(*a2)         # note the asterisk\r\n    a2.unshift(*a1)      # note the asterisk, and that a2 is the receiver\r\n\r\nor **splice**:\r\n\r\n    a1[a1.length, 0] = a2\r\n    a1[a1.length..0] = a2\r\n    a1.insert(a1.length, *a2)\r\n\r\nor **append and flatten**:\r\n\r\n    (a1 &lt;&lt; a2).flatten!  # a call to #flatten instead would return a new array",
        "body": "<p>You've got a workable idea, but the <code>#flatten!<\/code> is in the wrong place -- it flattens its receiver, so you could use it to turn <code>[1, 2, ['foo', 'bar']]<\/code> into <code>[1,2,'foo','bar']<\/code>.<\/p>\n\n<p>I'm doubtless forgetting some approaches, but you can <strong>concatenate<\/strong>:<\/p>\n\n<pre><code>a1.concat a2\na1 + a2              # creates a new array, as does a1 += a2\n<\/code><\/pre>\n\n<p>or <strong>prepend\/append<\/strong>:<\/p>\n\n<pre><code>a1.push(*a2)         # note the asterisk\na2.unshift(*a1)      # note the asterisk, and that a2 is the receiver\n<\/code><\/pre>\n\n<p>or <strong>splice<\/strong>:<\/p>\n\n<pre><code>a1[a1.length, 0] = a2\na1[a1.length..0] = a2\na1.insert(a1.length, *a2)\n<\/code><\/pre>\n\n<p>or <strong>append and flatten<\/strong>:<\/p>\n\n<pre><code>(a1 &lt;&lt; a2).flatten!  # a call to #flatten instead would return a new array\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 12095,
            "reputation": 116419,
            "user_id": 23649,
            "user_type": "registered",
            "accept_rate": 88,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/7e9f543f0ffdb7c9a899e628fe76e7f3?s=256&d=identicon&r=PG",
            "display_name": "jtbandes",
            "link": "https:\/\/stackoverflow.com\/users\/23649\/jtbandes"
        },
        "is_accepted": true,
        "score": 824,
        "last_activity_date": 1537502449,
        "last_edit_date": 1592644375.0,
        "creation_date": 1314080726,
        "answer_id": 7157051,
        "question_id": 7156955,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "I&#39;m going to heavily quote [the Object documentation](http:\/\/ruby-doc.org\/core\/Object.html#method-i-eql-3F) here, because I think it has some great explanations. I encourage you to read it, and also the documentation for these methods as they&#39;re overridden in other classes, like [String](http:\/\/ruby-doc.org\/core\/classes\/String.html).\n\n*Side note: if you want to try these out for yourself on different objects, use something like this:*\n\n    class Object\n      def all_equals(o)\n        ops = [:==, :===, :eql?, :equal?]\n        Hash[ops.map(&amp;:to_s).zip(ops.map {|s| send(s, o) })]\n      end\n    end\n    \n    &quot;a&quot;.all_equals &quot;a&quot; # =&gt; {&quot;==&quot;=&gt;true, &quot;===&quot;=&gt;true, &quot;eql?&quot;=&gt;true, &quot;equal?&quot;=&gt;false}\n\n\n----------\n\n\n## `==` \u2014 generic &quot;equality&quot;\n&gt; At the Object level, `==` returns true only if `obj` and `other` are the same object. Typically, this method is overridden in descendant classes to provide class-specific meaning.\n\nThis is the most common comparison, and thus the most fundamental place where you (as the author of a class) get to decide if two objects are &quot;equal&quot; or not.\n\n## `===` \u2014 case equality\n\n&gt; For class Object, effectively the same as calling `#==`, but typically overridden by descendants to provide meaningful semantics in case statements.\n\nThis is incredibly useful. Examples of things which have interesting `===` implementations:\n\n- Range\n- Regex\n- Proc (in Ruby 1.9)\n\nSo you can do things like:\n\n    case some_object\n    when \/a regex\/\n      # The regex matches\n    when 2..4\n      # some_object is in the range 2..4\n    when lambda {|x| some_crazy_custom_predicate }\n      # the lambda returned true\n    end\n\nSee [my answer here](https:\/\/stackoverflow.com\/questions\/1735717\/help-refactoring-this-nasty-ruby-if-else-statement\/1735777#1735777) for a neat example of how `case`+`Regex` can make code a lot cleaner. And of course, by providing your own `===` implementation, you can get custom `case` semantics.\n\n## `eql?` \u2014 `Hash` equality\n&gt; The `eql?` method returns true if `obj` and `other` refer to the same hash key. This is used by `Hash` to test members for equality. **For objects of class `Object`, `eql?` is synonymous with `==`.** Subclasses normally continue this tradition by aliasing `eql?` to their overridden `==` method, but there are exceptions. `Numeric` types, for example, perform type conversion across `==`, but not across `eql?`, so:\n&gt;\n&gt;     1 == 1.0     #=&gt; true\n&gt;     1.eql? 1.0   #=&gt; false\n\nSo you&#39;re free to override this for your own uses, or you can override `==` and use `alias :eql? :==` so the two methods behave the same way.\n\n## `equal?` \u2014 identity comparison\n&gt; Unlike `==`, the `equal?` method should never be overridden by subclasses: it is used to determine object identity (that is, `a.equal?(b)` iff `a` is the same object as `b`).\n\nThis is effectively pointer comparison.",
        "body": "<p>I'm going to heavily quote <a href=\"http:\/\/ruby-doc.org\/core\/Object.html#method-i-eql-3F\" rel=\"noreferrer\">the Object documentation<\/a> here, because I think it has some great explanations. I encourage you to read it, and also the documentation for these methods as they're overridden in other classes, like <a href=\"http:\/\/ruby-doc.org\/core\/classes\/String.html\" rel=\"noreferrer\">String<\/a>.<\/p>\n<p><em>Side note: if you want to try these out for yourself on different objects, use something like this:<\/em><\/p>\n<pre><code>class Object\n  def all_equals(o)\n    ops = [:==, :===, :eql?, :equal?]\n    Hash[ops.map(&amp;:to_s).zip(ops.map {|s| send(s, o) })]\n  end\nend\n\n&quot;a&quot;.all_equals &quot;a&quot; # =&gt; {&quot;==&quot;=&gt;true, &quot;===&quot;=&gt;true, &quot;eql?&quot;=&gt;true, &quot;equal?&quot;=&gt;false}\n<\/code><\/pre>\n<hr \/>\n<h2><code>==<\/code> \u2014 generic &quot;equality&quot;<\/h2>\n<blockquote>\n<p>At the Object level, <code>==<\/code> returns true only if <code>obj<\/code> and <code>other<\/code> are the same object. Typically, this method is overridden in descendant classes to provide class-specific meaning.<\/p>\n<\/blockquote>\n<p>This is the most common comparison, and thus the most fundamental place where you (as the author of a class) get to decide if two objects are &quot;equal&quot; or not.<\/p>\n<h2><code>===<\/code> \u2014 case equality<\/h2>\n<blockquote>\n<p>For class Object, effectively the same as calling <code>#==<\/code>, but typically overridden by descendants to provide meaningful semantics in case statements.<\/p>\n<\/blockquote>\n<p>This is incredibly useful. Examples of things which have interesting <code>===<\/code> implementations:<\/p>\n<ul>\n<li>Range<\/li>\n<li>Regex<\/li>\n<li>Proc (in Ruby 1.9)<\/li>\n<\/ul>\n<p>So you can do things like:<\/p>\n<pre><code>case some_object\nwhen \/a regex\/\n  # The regex matches\nwhen 2..4\n  # some_object is in the range 2..4\nwhen lambda {|x| some_crazy_custom_predicate }\n  # the lambda returned true\nend\n<\/code><\/pre>\n<p>See <a href=\"https:\/\/stackoverflow.com\/questions\/1735717\/help-refactoring-this-nasty-ruby-if-else-statement\/1735777#1735777\">my answer here<\/a> for a neat example of how <code>case<\/code>+<code>Regex<\/code> can make code a lot cleaner. And of course, by providing your own <code>===<\/code> implementation, you can get custom <code>case<\/code> semantics.<\/p>\n<h2><code>eql?<\/code> \u2014 <code>Hash<\/code> equality<\/h2>\n<blockquote>\n<p>The <code>eql?<\/code> method returns true if <code>obj<\/code> and <code>other<\/code> refer to the same hash key. This is used by <code>Hash<\/code> to test members for equality. <strong>For objects of class <code>Object<\/code>, <code>eql?<\/code> is synonymous with <code>==<\/code>.<\/strong> Subclasses normally continue this tradition by aliasing <code>eql?<\/code> to their overridden <code>==<\/code> method, but there are exceptions. <code>Numeric<\/code> types, for example, perform type conversion across <code>==<\/code>, but not across <code>eql?<\/code>, so:<\/p>\n<pre><code>1 == 1.0     #=&gt; true\n1.eql? 1.0   #=&gt; false\n<\/code><\/pre>\n<\/blockquote>\n<p>So you're free to override this for your own uses, or you can override <code>==<\/code> and use <code>alias :eql? :==<\/code> so the two methods behave the same way.<\/p>\n<h2><code>equal?<\/code> \u2014 identity comparison<\/h2>\n<blockquote>\n<p>Unlike <code>==<\/code>, the <code>equal?<\/code> method should never be overridden by subclasses: it is used to determine object identity (that is, <code>a.equal?(b)<\/code> iff <code>a<\/code> is the same object as <code>b<\/code>).<\/p>\n<\/blockquote>\n<p>This is effectively pointer comparison.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 10232,
            "reputation": 35964,
            "user_id": 19224,
            "user_type": "registered",
            "accept_rate": 86,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/39b1a174518e200696acd7249daa0bf6?s=256&d=identicon&r=PG",
            "display_name": "Ricardo Acras",
            "link": "https:\/\/stackoverflow.com\/users\/19224\/ricardo-acras"
        },
        "is_accepted": true,
        "score": 816,
        "last_activity_date": 1368823573,
        "last_edit_date": 1368823573.0,
        "creation_date": 1226618547,
        "answer_id": 288726,
        "question_id": 288715,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Use the `defined?` keyword ([documentation][defined-doc]). It will return a String with the kind of the item, or `nil` if it doesn\u2019t exist.\r\n\r\n    &gt;&gt; a = 1\r\n     =&gt; 1\r\n    &gt;&gt; defined? a\r\n     =&gt; &quot;local-variable&quot;\r\n    &gt;&gt; defined? b\r\n     =&gt; nil\r\n    &gt;&gt; defined? nil\r\n     =&gt; &quot;nil&quot;\r\n    &gt;&gt; defined? String\r\n     =&gt; &quot;constant&quot;\r\n    &gt;&gt; defined? 1\r\n     =&gt; &quot;expression&quot;\r\n\r\nAs skalee commented: &quot;It is worth noting that variable which is set to nil is initialized.&quot;\r\n\r\n    &gt;&gt; n = nil  \r\n    &gt;&gt; defined? n\r\n     =&gt; &quot;local-variable&quot;\r\n\r\n[defined-doc]: http:\/\/ruby-doc.org\/docs\/keywords\/1.9\/Object.html#method-i-defined-3F",
        "body": "<p>Use the <code>defined?<\/code> keyword (<a href=\"http:\/\/ruby-doc.org\/docs\/keywords\/1.9\/Object.html#method-i-defined-3F\" rel=\"noreferrer\">documentation<\/a>). It will return a String with the kind of the item, or <code>nil<\/code> if it doesn\u2019t exist.<\/p>\n\n<pre><code>&gt;&gt; a = 1\n =&gt; 1\n&gt;&gt; defined? a\n =&gt; \"local-variable\"\n&gt;&gt; defined? b\n =&gt; nil\n&gt;&gt; defined? nil\n =&gt; \"nil\"\n&gt;&gt; defined? String\n =&gt; \"constant\"\n&gt;&gt; defined? 1\n =&gt; \"expression\"\n<\/code><\/pre>\n\n<p>As skalee commented: \"It is worth noting that variable which is set to nil is initialized.\"<\/p>\n\n<pre><code>&gt;&gt; n = nil  \n&gt;&gt; defined? n\n =&gt; \"local-variable\"\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 7416,
            "reputation": 15483,
            "user_id": 12880,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/eb6902ea9867b497c0144d766057707c?s=256&d=identicon&r=PG",
            "display_name": "flicken",
            "link": "https:\/\/stackoverflow.com\/users\/12880\/flicken"
        },
        "is_accepted": true,
        "score": 816,
        "last_activity_date": 1565187970,
        "last_edit_date": 1565187970.0,
        "creation_date": 1241547323,
        "answer_id": 826227,
        "question_id": 826210,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "You want to call [.name][1] on the object&#39;s class:\r\n\r\n    result.class.name\r\n\r\n\r\n  [1]: https:\/\/www.ruby-doc.org\/core\/classes\/Module.html#M001699",
        "body": "<p>You want to call <a href=\"https:\/\/www.ruby-doc.org\/core\/classes\/Module.html#M001699\" rel=\"noreferrer\">.name<\/a> on the object's class:<\/p>\n\n<pre><code>result.class.name\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 25890,
            "reputation": 15494,
            "user_id": 66945,
            "user_type": "registered",
            "accept_rate": 80,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/9cfa271fb69f3c757657d10aa29fc65b?s=256&d=identicon&r=PG",
            "display_name": "Rishav Rastogi",
            "link": "https:\/\/stackoverflow.com\/users\/66945\/rishav-rastogi"
        },
        "is_accepted": true,
        "score": 813,
        "last_activity_date": 1486940007,
        "last_edit_date": 1486940007.0,
        "creation_date": 1244437527,
        "answer_id": 963485,
        "question_id": 963420,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "**First**, if you have already run the migrations generated by the `scaffold` command, you have to perform a rollback first.\r\n\r\n    rake db:rollback\r\n\r\nYou can create scaffolding using:\r\n\r\n    rails generate scaffold MyFoo \r\n\r\n(or similar), and **you can destroy\/undo** it using \r\n\r\n    rails destroy scaffold MyFoo\r\n\r\nThat will delete all the files created by `generate`, but not any additional changes you may have made manually.\r\n",
        "body": "<p><strong>First<\/strong>, if you have already run the migrations generated by the <code>scaffold<\/code> command, you have to perform a rollback first.<\/p>\n\n<pre><code>rake db:rollback\n<\/code><\/pre>\n\n<p>You can create scaffolding using:<\/p>\n\n<pre><code>rails generate scaffold MyFoo \n<\/code><\/pre>\n\n<p>(or similar), and <strong>you can destroy\/undo<\/strong> it using <\/p>\n\n<pre><code>rails destroy scaffold MyFoo\n<\/code><\/pre>\n\n<p>That will delete all the files created by <code>generate<\/code>, but not any additional changes you may have made manually.<\/p>\n",
        "community_owned_date": 1398254287.0
    },
    {
        "owner": {
            "account_id": 990854,
            "reputation": 20710,
            "user_id": 1008222,
            "user_type": "registered",
            "accept_rate": 84,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/281d6e83d7b8a7b1f46da66594a37c0b?s=256&d=identicon&r=PG",
            "display_name": "Mithun Sasidharan",
            "link": "https:\/\/stackoverflow.com\/users\/1008222\/mithun-sasidharan"
        },
        "is_accepted": true,
        "score": 811,
        "last_activity_date": 1589950625,
        "last_edit_date": 1589950625.0,
        "creation_date": 1322889843,
        "answer_id": 8365726,
        "question_id": 8365721,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "\r\n    array = array.uniq\r\n\r\n[`uniq`][1] removes all duplicate elements and retains all unique elements in the array.\r\n\r\nThis is one of many beauties of the Ruby language.\r\n\r\n\r\n  [1]: http:\/\/www.ruby-doc.org\/core-1.9.3\/Array.html#method-i-uniq",
        "body": "<pre><code>array = array.uniq\n<\/code><\/pre>\n\n<p><a href=\"http:\/\/www.ruby-doc.org\/core-1.9.3\/Array.html#method-i-uniq\" rel=\"noreferrer\"><code>uniq<\/code><\/a> removes all duplicate elements and retains all unique elements in the array.<\/p>\n\n<p>This is one of many beauties of the Ruby language.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 16366,
            "reputation": 77147,
            "user_id": 35501,
            "user_type": "registered",
            "accept_rate": 83,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/d155a73860f84fb9f1eb8652a534f3fd?s=256&d=identicon&r=PG",
            "display_name": "JRL",
            "link": "https:\/\/stackoverflow.com\/users\/35501\/jrl"
        },
        "is_accepted": true,
        "score": 801,
        "last_activity_date": 1494366918,
        "last_edit_date": 1494366918.0,
        "creation_date": 1252540977,
        "answer_id": 1402764,
        "question_id": 1402757,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Use the keyword  `next`. If you do not want to continue to the next item, use `break`.\r\n\r\nWhen `next` is used within a block, it causes the block to exit immediately, returning control to the iterator method, which may then begin a new iteration by invoking the block again:\r\n\r\n    f.each do |line|              # Iterate over the lines in file f\r\n      next if line[0,1] == &quot;#&quot;    # If this line is a comment, go to the next\r\n      puts eval(line)\r\n    end\r\n\r\nWhen used in a block, `break` transfers control out of the block, out of the iterator that invoked the block, and to the first expression following the invocation of the iterator:\r\n\r\n    f.each do |line|             # Iterate over the lines in file f\r\n      break if line == &quot;quit\\n&quot;  # If this break statement is executed...\r\n      puts eval(line)\r\n    end\r\n    puts &quot;Good bye&quot;              # ...then control is transferred here\r\n\r\n\r\nAnd finally, the usage of `return` in a block:\r\n\r\n`return` always causes the enclosing method to return, regardless of how deeply nested within blocks it is (except in the case of lambdas):\r\n\r\n    def find(array, target)\r\n      array.each_with_index do |element,index|\r\n        return index if (element == target)  # return from find\r\n      end\r\n      nil  # If we didn&#39;t find the element, return nil\r\n    end\r\n\r\n",
        "body": "<p>Use the keyword  <code>next<\/code>. If you do not want to continue to the next item, use <code>break<\/code>.<\/p>\n\n<p>When <code>next<\/code> is used within a block, it causes the block to exit immediately, returning control to the iterator method, which may then begin a new iteration by invoking the block again:<\/p>\n\n<pre><code>f.each do |line|              # Iterate over the lines in file f\n  next if line[0,1] == \"#\"    # If this line is a comment, go to the next\n  puts eval(line)\nend\n<\/code><\/pre>\n\n<p>When used in a block, <code>break<\/code> transfers control out of the block, out of the iterator that invoked the block, and to the first expression following the invocation of the iterator:<\/p>\n\n<pre><code>f.each do |line|             # Iterate over the lines in file f\n  break if line == \"quit\\n\"  # If this break statement is executed...\n  puts eval(line)\nend\nputs \"Good bye\"              # ...then control is transferred here\n<\/code><\/pre>\n\n<p>And finally, the usage of <code>return<\/code> in a block:<\/p>\n\n<p><code>return<\/code> always causes the enclosing method to return, regardless of how deeply nested within blocks it is (except in the case of lambdas):<\/p>\n\n<pre><code>def find(array, target)\n  array.each_with_index do |element,index|\n    return index if (element == target)  # return from find\n  end\n  nil  # If we didn't find the element, return nil\nend\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 51515,
            "reputation": 12469,
            "user_id": 153943,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/788622ab7e1f792ca653eeacbe5c1db3?s=256&d=identicon&r=PG",
            "display_name": "rcoder",
            "link": "https:\/\/stackoverflow.com\/users\/153943\/rcoder"
        },
        "is_accepted": true,
        "score": 786,
        "last_activity_date": 1546909000,
        "last_edit_date": 1546909000.0,
        "creation_date": 1251223949,
        "answer_id": 1329990,
        "question_id": 1329967,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Like this:\r\n\r\n    sleep(num_secs)\r\n\r\nThe `num_secs` value can be an integer or float.\r\n\r\nAlso, if you&#39;re writing this within a Rails app, or have included the ActiveSupport library in your project, you can construct longer intervals using the following convenience syntax:\r\n\r\n    sleep(4.minutes)\r\n    # or, even longer...\r\n    sleep(2.hours); sleep(3.days) # etc., etc.\r\n    # or shorter\r\n    sleep(0.5) # half a second",
        "body": "<p>Like this:<\/p>\n\n<pre><code>sleep(num_secs)\n<\/code><\/pre>\n\n<p>The <code>num_secs<\/code> value can be an integer or float.<\/p>\n\n<p>Also, if you're writing this within a Rails app, or have included the ActiveSupport library in your project, you can construct longer intervals using the following convenience syntax:<\/p>\n\n<pre><code>sleep(4.minutes)\n# or, even longer...\nsleep(2.hours); sleep(3.days) # etc., etc.\n# or shorter\nsleep(0.5) # half a second\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 85750,
            "reputation": 104475,
            "user_id": 238886,
            "user_type": "registered",
            "accept_rate": 90,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/8ca29123b5669b26f9b6ca2c62d9d215?s=256&d=identicon&r=PG",
            "display_name": "Wayne Conrad",
            "link": "https:\/\/stackoverflow.com\/users\/238886\/wayne-conrad"
        },
        "is_accepted": true,
        "score": 778,
        "last_activity_date": 1348830188,
        "last_edit_date": 1348830188.0,
        "creation_date": 1298065407,
        "answer_id": 5046915,
        "question_id": 5046831,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "You may use the different accessors to communicate your intent to someone reading your code, and make it easier to write classes which will work correctly no matter how their public API is called.\r\n\r\n    class Person\r\n      attr_accessor :age\r\n      ...\r\n    end\r\n\r\nHere, I can see that I may both read and write the age.\r\n\r\n    class Person\r\n      attr_reader :age\r\n      ...\r\n    end\r\n\r\nHere, I can see that I may only read the age.  Imagine that it is set by the constructor of this class and after that remains constant.  If there were a mutator (writer) for age and the class were written assuming that age, once set, does not change, then a bug could result from code calling that mutator.\r\n\r\nBut what is happening behind the scenes?\r\n\r\nIf you write:\r\n\r\n    attr_writer :age\r\n\r\nThat gets translated into:\r\n\r\n    def age=(value)\r\n      @age = value\r\n    end\r\n\r\nIf you write:\r\n\r\n    attr_reader :age\r\n\r\nThat gets translated into:\r\n\r\n    def age\r\n      @age\r\n    end\r\n\r\nIf you write:\r\n\r\n    attr_accessor :age\r\n\r\nThat gets translated into:\r\n\r\n    def age=(value)\r\n      @age = value\r\n    end\r\n\r\n    def age\r\n      @age\r\n    end\r\n\r\nKnowing that, here&#39;s another way to think about it: If you did not have the attr_... helpers, and had to write the accessors yourself, would you write any more accessors than your class needed?  For example, if age only needed to be read, would you also write a method allowing it to be written?\r\n",
        "body": "<p>You may use the different accessors to communicate your intent to someone reading your code, and make it easier to write classes which will work correctly no matter how their public API is called.<\/p>\n\n<pre><code>class Person\n  attr_accessor :age\n  ...\nend\n<\/code><\/pre>\n\n<p>Here, I can see that I may both read and write the age.<\/p>\n\n<pre><code>class Person\n  attr_reader :age\n  ...\nend\n<\/code><\/pre>\n\n<p>Here, I can see that I may only read the age.  Imagine that it is set by the constructor of this class and after that remains constant.  If there were a mutator (writer) for age and the class were written assuming that age, once set, does not change, then a bug could result from code calling that mutator.<\/p>\n\n<p>But what is happening behind the scenes?<\/p>\n\n<p>If you write:<\/p>\n\n<pre><code>attr_writer :age\n<\/code><\/pre>\n\n<p>That gets translated into:<\/p>\n\n<pre><code>def age=(value)\n  @age = value\nend\n<\/code><\/pre>\n\n<p>If you write:<\/p>\n\n<pre><code>attr_reader :age\n<\/code><\/pre>\n\n<p>That gets translated into:<\/p>\n\n<pre><code>def age\n  @age\nend\n<\/code><\/pre>\n\n<p>If you write:<\/p>\n\n<pre><code>attr_accessor :age\n<\/code><\/pre>\n\n<p>That gets translated into:<\/p>\n\n<pre><code>def age=(value)\n  @age = value\nend\n\ndef age\n  @age\nend\n<\/code><\/pre>\n\n<p>Knowing that, here's another way to think about it: If you did not have the attr_... helpers, and had to write the accessors yourself, would you write any more accessors than your class needed?  For example, if age only needed to be read, would you also write a method allowing it to be written?<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 42777,
            "reputation": 18855,
            "user_id": 124732,
            "user_type": "registered",
            "accept_rate": 94,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/7f2db3627f5fac081f9976faab0ad8d8?s=256&d=identicon&r=PG",
            "display_name": "Brian Lacy",
            "link": "https:\/\/stackoverflow.com\/users\/124732\/brian-lacy"
        },
        "is_accepted": true,
        "score": 764,
        "last_activity_date": 1502176836,
        "last_edit_date": 1502176836.0,
        "creation_date": 1292956442,
        "answer_id": 4502672,
        "question_id": 4304438,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "For those who may be confused by the accepted answer, as I was, you also need to have the ruby headers installed [**ruby-devel**].\r\n\r\nThe article that saved my hide is [here](http:\/\/web.archive.org\/web\/20130313162931\/http:\/\/www.fedora-tunisia.org\/?q=node\/44).\r\n\r\nAnd this is the revised solution (note that I&#39;m on Fedora 13):\r\n\r\n    yum -y install gcc mysql-devel ruby-devel rubygems\r\n    gem install -y mysql -- --with-mysql-config=\/usr\/bin\/mysql_config\r\n\r\nFor Debian, and other distributions using Debian style packaging the ruby development headers are installed by:\r\n\r\n    sudo apt-get install ruby-dev\r\n\r\nFor Ubuntu  the ruby development headers are installed by:\r\n\r\n    sudo apt-get install ruby-all-dev\r\n\r\nIf you are using a earlier version of ruby (such as 2.2), then you will need to run:\r\n\r\n    sudo apt-get install ruby2.2-dev\r\n\r\n(where 2.2 is your desired Ruby version)",
        "body": "<p>For those who may be confused by the accepted answer, as I was, you also need to have the ruby headers installed [<strong>ruby-devel<\/strong>].<\/p>\n\n<p>The article that saved my hide is <a href=\"http:\/\/web.archive.org\/web\/20130313162931\/http:\/\/www.fedora-tunisia.org\/?q=node\/44\" rel=\"noreferrer\">here<\/a>.<\/p>\n\n<p>And this is the revised solution (note that I'm on Fedora 13):<\/p>\n\n<pre><code>yum -y install gcc mysql-devel ruby-devel rubygems\ngem install -y mysql -- --with-mysql-config=\/usr\/bin\/mysql_config\n<\/code><\/pre>\n\n<p>For Debian, and other distributions using Debian style packaging the ruby development headers are installed by:<\/p>\n\n<pre><code>sudo apt-get install ruby-dev\n<\/code><\/pre>\n\n<p>For Ubuntu  the ruby development headers are installed by:<\/p>\n\n<pre><code>sudo apt-get install ruby-all-dev\n<\/code><\/pre>\n\n<p>If you are using a earlier version of ruby (such as 2.2), then you will need to run:<\/p>\n\n<pre><code>sudo apt-get install ruby2.2-dev\n<\/code><\/pre>\n\n<p>(where 2.2 is your desired Ruby version)<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 109199,
            "reputation": 26464,
            "user_id": 289466,
            "user_type": "registered",
            "accept_rate": 88,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/8844b6d46bc0f79ae61be9f9f05ce5e4?s=256&d=identicon&r=PG",
            "display_name": "S&#233;bastien Le Callonnec",
            "link": "https:\/\/stackoverflow.com\/users\/289466\/s%c3%a9bastien-le-callonnec"
        },
        "is_accepted": false,
        "score": 762,
        "last_activity_date": 1544281116,
        "last_edit_date": 1544281116.0,
        "creation_date": 1381600603,
        "answer_id": 19337403,
        "question_id": 2777802,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "You can use the short version:\r\n\r\n    File.write(&#39;\/path\/to\/file&#39;, &#39;Some glorious content&#39;)\r\n\r\nIt returns the length written; see [::write][1] for more details and options.\r\n\r\nTo append to the file, if it already exists, use:\r\n\r\n    File.write(&#39;\/path\/to\/file&#39;, &#39;Some glorious content&#39;, mode: &#39;a&#39;)\r\n\r\n\r\n  [1]: http:\/\/ruby-doc.org\/core-1.9.3\/IO.html#method-c-write",
        "body": "<p>You can use the short version:<\/p>\n\n<pre><code>File.write('\/path\/to\/file', 'Some glorious content')\n<\/code><\/pre>\n\n<p>It returns the length written; see <a href=\"http:\/\/ruby-doc.org\/core-1.9.3\/IO.html#method-c-write\" rel=\"noreferrer\">::write<\/a> for more details and options.<\/p>\n\n<p>To append to the file, if it already exists, use:<\/p>\n\n<pre><code>File.write('\/path\/to\/file', 'Some glorious content', mode: 'a')\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 31679,
            "reputation": 209622,
            "user_id": 87189,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/98e7d6edce863e7a1bf8199b082eb25e?s=256&d=identicon&r=PG",
            "display_name": "tadman",
            "link": "https:\/\/stackoverflow.com\/users\/87189\/tadman"
        },
        "is_accepted": true,
        "score": 756,
        "last_activity_date": 1510348244,
        "last_edit_date": 1510348244.0,
        "creation_date": 1364921619,
        "answer_id": 15769829,
        "question_id": 15769739,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "The proper way to determine the &quot;type&quot; of an object, which is a wobbly term in the Ruby world, is to call `object.class`.\r\n\r\nSince classes can inherit from other classes, if you want to determine if an object is &quot;of a particular type&quot; you might call `object.is_a?(ClassName)` to see if `object` is of type `ClassName` or derived from it.\r\n\r\nNormally type checking is not done in Ruby, but instead objects are assessed based on their ability to respond to particular methods, commonly called &quot;[Duck typing](http:\/\/en.wikipedia.org\/wiki\/Duck_typing)&quot;. In other words, if it responds to the methods you want, there&#39;s no reason to be particular about the type.\r\n\r\nFor example, `object.is_a?(String)` is too rigid since another class might implement methods that convert it into a string, or make it behave identically to how String behaves. `object.respond_to?(:to_s)` would be a better way to test that the object in question does what you want.",
        "body": "<p>The proper way to determine the \"type\" of an object, which is a wobbly term in the Ruby world, is to call <code>object.class<\/code>.<\/p>\n\n<p>Since classes can inherit from other classes, if you want to determine if an object is \"of a particular type\" you might call <code>object.is_a?(ClassName)<\/code> to see if <code>object<\/code> is of type <code>ClassName<\/code> or derived from it.<\/p>\n\n<p>Normally type checking is not done in Ruby, but instead objects are assessed based on their ability to respond to particular methods, commonly called \"<a href=\"http:\/\/en.wikipedia.org\/wiki\/Duck_typing\" rel=\"noreferrer\">Duck typing<\/a>\". In other words, if it responds to the methods you want, there's no reason to be particular about the type.<\/p>\n\n<p>For example, <code>object.is_a?(String)<\/code> is too rigid since another class might implement methods that convert it into a string, or make it behave identically to how String behaves. <code>object.respond_to?(:to_s)<\/code> would be a better way to test that the object in question does what you want.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 96955,
            "reputation": 117440,
            "user_id": 263268,
            "user_type": "registered",
            "accept_rate": 82,
            "profile_image": "https:\/\/i.stack.imgur.com\/vV6JS.jpg?s=256&g=1",
            "display_name": "Steve Bennett",
            "link": "https:\/\/stackoverflow.com\/users\/263268\/steve-bennett"
        },
        "is_accepted": false,
        "score": 754,
        "last_activity_date": 1631835612,
        "last_edit_date": 1631835612.0,
        "creation_date": 1360018816,
        "answer_id": 14697343,
        "question_id": 995593,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "`a ||= b` is a *conditional assignment operator*. It means:\r\n\r\n*  if `a` is undefined or [falsey](https:\/\/gist.github.com\/jfarmer\/2647362), then evaluate `b` and set `a` to the result.\r\n* Otherwise (if `a` is defined and evaluates to truthy), then `b` is not evaluated, and no assignment takes place. \r\n\r\nFor example:\r\n\r\n```ruby    \r\na ||= nil # =&gt; nil\r\na ||= 0 # =&gt; 0\r\na ||= 2 # =&gt; 0\r\n\r\nfoo = false # =&gt; false\r\nfoo ||= true # =&gt; true\r\nfoo ||= false # =&gt; true\r\n```\r\n\r\nConfusingly, it looks similar to other assignment operators (such as `+=`), but behaves differently.\r\n\r\n* `a += b` translates to `a = a + b`\r\n* `a ||= b` roughly translates to `a || a = b`\r\n\r\nIt is a near-shorthand for `a || a = b`. The difference is that, when `a` is undefined, `a || a = b` would raise `NameError`, whereas `a ||= b` sets `a` to `b`. This distinction is unimportant if `a` and `b` are both local variables, but is significant if either is a getter\/setter method of a class.\r\n\r\nFurther reading:\r\n\r\n* http:\/\/www.rubyinside.com\/what-rubys-double-pipe-or-equals-really-does-5488.html\r\n",
        "body": "<p><code>a ||= b<\/code> is a <em>conditional assignment operator<\/em>. It means:<\/p>\n<ul>\n<li>if <code>a<\/code> is undefined or <a href=\"https:\/\/gist.github.com\/jfarmer\/2647362\" rel=\"noreferrer\">falsey<\/a>, then evaluate <code>b<\/code> and set <code>a<\/code> to the result.<\/li>\n<li>Otherwise (if <code>a<\/code> is defined and evaluates to truthy), then <code>b<\/code> is not evaluated, and no assignment takes place.<\/li>\n<\/ul>\n<p>For example:<\/p>\n<pre class=\"lang-rb prettyprint-override\"><code>a ||= nil # =&gt; nil\na ||= 0 # =&gt; 0\na ||= 2 # =&gt; 0\n\nfoo = false # =&gt; false\nfoo ||= true # =&gt; true\nfoo ||= false # =&gt; true\n<\/code><\/pre>\n<p>Confusingly, it looks similar to other assignment operators (such as <code>+=<\/code>), but behaves differently.<\/p>\n<ul>\n<li><code>a += b<\/code> translates to <code>a = a + b<\/code><\/li>\n<li><code>a ||= b<\/code> roughly translates to <code>a || a = b<\/code><\/li>\n<\/ul>\n<p>It is a near-shorthand for <code>a || a = b<\/code>. The difference is that, when <code>a<\/code> is undefined, <code>a || a = b<\/code> would raise <code>NameError<\/code>, whereas <code>a ||= b<\/code> sets <code>a<\/code> to <code>b<\/code>. This distinction is unimportant if <code>a<\/code> and <code>b<\/code> are both local variables, but is significant if either is a getter\/setter method of a class.<\/p>\n<p>Further reading:<\/p>\n<ul>\n<li><a href=\"http:\/\/www.rubyinside.com\/what-rubys-double-pipe-or-equals-really-does-5488.html\" rel=\"noreferrer\">http:\/\/www.rubyinside.com\/what-rubys-double-pipe-or-equals-really-does-5488.html<\/a><\/li>\n<\/ul>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5604,
            "reputation": 58772,
            "user_id": 9122,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/8f17a68d55e7741045ad5d73207b5751?s=256&d=identicon&r=PG",
            "display_name": "Todd Gamblin",
            "link": "https:\/\/stackoverflow.com\/users\/9122\/todd-gamblin"
        },
        "is_accepted": true,
        "score": 742,
        "last_activity_date": 1510700062,
        "last_edit_date": 1510700062.0,
        "creation_date": 1236197081,
        "answer_id": 612196,
        "question_id": 612189,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "In general, methods that end in `!` indicate that the method will **modify the object it&#39;s called on**. Ruby calls these as &quot;**dangerous methods**&quot; because they change state that someone else might have a reference to. Here&#39;s a simple example for strings:\r\n\r\n    foo = &quot;A STRING&quot;  # a string called foo\r\n    foo.downcase!     # modifies foo itself\r\n    puts foo          # prints modified foo\r\n\r\nThis will output:\r\n\r\n    a string\r\n\r\nIn the standard libraries, there are a lot of places you&#39;ll see pairs of similarly named methods, one with the `!` and one without.  The ones without are called &quot;safe methods&quot;, and they return a copy of the original with changes applied to **the copy**, with the callee unchanged.  Here&#39;s the same example without the `!`:\r\n\r\n    foo = &quot;A STRING&quot;    # a string called foo\r\n    bar = foo.downcase  # doesn&#39;t modify foo; returns a modified string\r\n    puts foo            # prints unchanged foo\r\n    puts bar            # prints newly created bar\r\n\r\nThis outputs:\r\n\r\n    A STRING\r\n    a string\r\n\r\nKeep in mind this is just a convention, but a lot of Ruby classes follow it. It also helps you keep track of what&#39;s getting modified in your code.",
        "body": "<p>In general, methods that end in <code>!<\/code> indicate that the method will <strong>modify the object it's called on<\/strong>. Ruby calls these as \"<strong>dangerous methods<\/strong>\" because they change state that someone else might have a reference to. Here's a simple example for strings:<\/p>\n\n<pre><code>foo = \"A STRING\"  # a string called foo\nfoo.downcase!     # modifies foo itself\nputs foo          # prints modified foo\n<\/code><\/pre>\n\n<p>This will output:<\/p>\n\n<pre><code>a string\n<\/code><\/pre>\n\n<p>In the standard libraries, there are a lot of places you'll see pairs of similarly named methods, one with the <code>!<\/code> and one without.  The ones without are called \"safe methods\", and they return a copy of the original with changes applied to <strong>the copy<\/strong>, with the callee unchanged.  Here's the same example without the <code>!<\/code>:<\/p>\n\n<pre><code>foo = \"A STRING\"    # a string called foo\nbar = foo.downcase  # doesn't modify foo; returns a modified string\nputs foo            # prints unchanged foo\nputs bar            # prints newly created bar\n<\/code><\/pre>\n\n<p>This outputs:<\/p>\n\n<pre><code>A STRING\na string\n<\/code><\/pre>\n\n<p>Keep in mind this is just a convention, but a lot of Ruby classes follow it. It also helps you keep track of what's getting modified in your code.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 186722,
            "reputation": 123530,
            "user_id": 424300,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/d9d1b31a337f46ac5e4dd56b55404f58?s=256&d=identicon&r=PG",
            "display_name": "Dylan Markow",
            "link": "https:\/\/stackoverflow.com\/users\/424300\/dylan-markow"
        },
        "is_accepted": true,
        "score": 736,
        "last_activity_date": 1388273952,
        "last_edit_date": 1388273952.0,
        "creation_date": 1304620420,
        "answer_id": 5902518,
        "question_id": 5902488,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "    # remove all old versions of the gem\r\n    gem cleanup rjb\r\n\r\n    # choose which ones you want to remove\r\n    gem uninstall rjb\r\n\r\n    # remove version 1.1.9 only\r\n    gem uninstall rjb --version 1.1.9\r\n\r\n    # remove all versions less than 1.3.4\r\n    gem uninstall rjb --version &#39;&lt;1.3.4&#39;",
        "body": "<pre><code># remove all old versions of the gem\ngem cleanup rjb\n\n# choose which ones you want to remove\ngem uninstall rjb\n\n# remove version 1.1.9 only\ngem uninstall rjb --version 1.1.9\n\n# remove all versions less than 1.3.4\ngem uninstall rjb --version '&lt;1.3.4'\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 80211,
            "reputation": 59037,
            "user_id": 226958,
            "user_type": "registered",
            "accept_rate": 76,
            "profile_image": "https:\/\/i.stack.imgur.com\/F5gLZ.png?s=256&g=1",
            "display_name": "Nicolas Raoul",
            "link": "https:\/\/stackoverflow.com\/users\/226958\/nicolas-raoul"
        },
        "is_accepted": true,
        "score": 725,
        "last_activity_date": 1655983585,
        "last_edit_date": 1655983585.0,
        "creation_date": 1375082386,
        "answer_id": 17918118,
        "question_id": 17918117,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Here are all the Rails 4 (ActiveRecord migration) datatypes:\r\n\r\n- `:binary`\r\n- `:boolean`\r\n- `:date`\r\n- `:datetime`\r\n- `:decimal`\r\n- `:float`\r\n- `:integer`\r\n- `:bigint`\r\n- `:primary_key`\r\n- `:references`\r\n- `:string`\r\n- `:text`\r\n- `:time`\r\n- `:timestamp`\r\n\r\nSource: http:\/\/api.rubyonrails.org\/classes\/ActiveRecord\/ConnectionAdapters\/SchemaStatements.html#method-i-add_column  \r\nThese are the same as with [Rails 3][1].\r\n\r\nIf you use PostgreSQL, you can also take advantage of these:\r\n\r\n - `:hstore`\r\n - `:json`\r\n - `:jsonb`\r\n - `:array`\r\n - `:cidr_address`\r\n - `:ip_address`\r\n - `:mac_address`\r\n\r\nThey are stored as strings if you run your app with a not-PostgreSQL database.\r\n\r\n**More PostgreSQL data types**\r\n\r\n- [Rails 4](https:\/\/github.com\/rails\/rails\/blob\/4-2-stable\/activerecord\/lib\/active_record\/connection_adapters\/postgresql_adapter.rb#L76)\r\n- [Rails 5](https:\/\/github.com\/rails\/rails\/blob\/5-2-stable\/activerecord\/lib\/active_record\/connection_adapters\/postgresql_adapter.rb#L80)\r\n- [Rails 6](https:\/\/github.com\/rails\/rails\/blob\/6-1-stable\/activerecord\/lib\/active_record\/connection_adapters\/postgresql_adapter.rb#L101)\r\n- [Rails 7](https:\/\/github.com\/rails\/rails\/blob\/main\/activerecord\/lib\/active_record\/connection_adapters\/postgresql_adapter.rb#L123)\r\n\r\n  [1]: https:\/\/stackoverflow.com\/questions\/4685009\/rails-3-datatypes\r\n",
        "body": "<p>Here are all the Rails 4 (ActiveRecord migration) datatypes:<\/p>\n<ul>\n<li><code>:binary<\/code><\/li>\n<li><code>:boolean<\/code><\/li>\n<li><code>:date<\/code><\/li>\n<li><code>:datetime<\/code><\/li>\n<li><code>:decimal<\/code><\/li>\n<li><code>:float<\/code><\/li>\n<li><code>:integer<\/code><\/li>\n<li><code>:bigint<\/code><\/li>\n<li><code>:primary_key<\/code><\/li>\n<li><code>:references<\/code><\/li>\n<li><code>:string<\/code><\/li>\n<li><code>:text<\/code><\/li>\n<li><code>:time<\/code><\/li>\n<li><code>:timestamp<\/code><\/li>\n<\/ul>\n<p>Source: <a href=\"http:\/\/api.rubyonrails.org\/classes\/ActiveRecord\/ConnectionAdapters\/SchemaStatements.html#method-i-add_column\" rel=\"noreferrer\">http:\/\/api.rubyonrails.org\/classes\/ActiveRecord\/ConnectionAdapters\/SchemaStatements.html#method-i-add_column<\/a><br \/>\nThese are the same as with <a href=\"https:\/\/stackoverflow.com\/questions\/4685009\/rails-3-datatypes\">Rails 3<\/a>.<\/p>\n<p>If you use PostgreSQL, you can also take advantage of these:<\/p>\n<ul>\n<li><code>:hstore<\/code><\/li>\n<li><code>:json<\/code><\/li>\n<li><code>:jsonb<\/code><\/li>\n<li><code>:array<\/code><\/li>\n<li><code>:cidr_address<\/code><\/li>\n<li><code>:ip_address<\/code><\/li>\n<li><code>:mac_address<\/code><\/li>\n<\/ul>\n<p>They are stored as strings if you run your app with a not-PostgreSQL database.<\/p>\n<p><strong>More PostgreSQL data types<\/strong><\/p>\n<ul>\n<li><a href=\"https:\/\/github.com\/rails\/rails\/blob\/4-2-stable\/activerecord\/lib\/active_record\/connection_adapters\/postgresql_adapter.rb#L76\" rel=\"noreferrer\">Rails 4<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/rails\/rails\/blob\/5-2-stable\/activerecord\/lib\/active_record\/connection_adapters\/postgresql_adapter.rb#L80\" rel=\"noreferrer\">Rails 5<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/rails\/rails\/blob\/6-1-stable\/activerecord\/lib\/active_record\/connection_adapters\/postgresql_adapter.rb#L101\" rel=\"noreferrer\">Rails 6<\/a><\/li>\n<li><a href=\"https:\/\/github.com\/rails\/rails\/blob\/main\/activerecord\/lib\/active_record\/connection_adapters\/postgresql_adapter.rb#L123\" rel=\"noreferrer\">Rails 7<\/a><\/li>\n<\/ul>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 50123,
            "reputation": 365613,
            "user_id": 149392,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/7a561ec0875fcbbe3066ea8fe288ec77?s=256&d=identicon&r=PG",
            "display_name": "sepp2k",
            "link": "https:\/\/stackoverflow.com\/users\/149392\/sepp2k"
        },
        "is_accepted": true,
        "score": 721,
        "last_activity_date": 1572555464,
        "last_edit_date": 1572555464.0,
        "creation_date": 1286562659,
        "answer_id": 3893305,
        "question_id": 3893278,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "`kind_of?` and `is_a?` are synonymous.\r\n\r\n`instance_of?` is different from the other two in that it only returns `true` if the object is an instance of that exact class, not a subclass.\r\n\r\nExample:\r\n\r\n* `&quot;hello&quot;.is_a? Object` and `&quot;hello&quot;.kind_of? Object` return `true` because `&quot;hello&quot;` is a `String` and `String` is a subclass of `Object`.\r\n* However `&quot;hello&quot;.instance_of? Object` returns `false`.",
        "body": "<p><code>kind_of?<\/code> and <code>is_a?<\/code> are synonymous.<\/p>\n\n<p><code>instance_of?<\/code> is different from the other two in that it only returns <code>true<\/code> if the object is an instance of that exact class, not a subclass.<\/p>\n\n<p>Example:<\/p>\n\n<ul>\n<li><code>\"hello\".is_a? Object<\/code> and <code>\"hello\".kind_of? Object<\/code> return <code>true<\/code> because <code>\"hello\"<\/code> is a <code>String<\/code> and <code>String<\/code> is a subclass of <code>Object<\/code>.<\/li>\n<li>However <code>\"hello\".instance_of? Object<\/code> returns <code>false<\/code>.<\/li>\n<\/ul>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 19121,
            "reputation": 17411,
            "user_id": 44537,
            "user_type": "registered",
            "accept_rate": 74,
            "profile_image": "https:\/\/i.stack.imgur.com\/lxfXc.jpg?s=256&g=1",
            "display_name": "Julian Popov",
            "link": "https:\/\/stackoverflow.com\/users\/44537\/julian-popov"
        },
        "is_accepted": false,
        "score": 712,
        "last_activity_date": 1534090757,
        "last_edit_date": 1534090757.0,
        "creation_date": 1387384163,
        "answer_id": 20663389,
        "question_id": 885414,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "I made this useful table with all the cases:\r\n\r\n![enter image description here][1]\r\n\r\n`blank?`, `present?` are provided by Rails.\r\n\r\n  [1]: http:\/\/i.stack.imgur.com\/oXuhJ.png",
        "body": "<p>I made this useful table with all the cases:<\/p>\n\n<p><img src=\"https:\/\/i.stack.imgur.com\/oXuhJ.png\" alt=\"enter image description here\"><\/p>\n\n<p><code>blank?<\/code>, <code>present?<\/code> are provided by Rails.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 124675,
            "reputation": 14065,
            "user_id": 927844,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/i.stack.imgur.com\/TcNfr.jpg?s=256&g=1",
            "display_name": "Adam Eberlin",
            "link": "https:\/\/stackoverflow.com\/users\/927844\/adam-eberlin"
        },
        "is_accepted": false,
        "score": 708,
        "last_activity_date": 1459908754,
        "last_edit_date": 1459908754.0,
        "creation_date": 1318996590,
        "answer_id": 7816368,
        "question_id": 7816365,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Sorry, brief moment of synapse failure. Here&#39;s the real answer.\r\n\r\n    require &#39;date&#39;\r\n    \r\n    Time.at(seconds_since_epoch_integer).to_datetime\r\n\r\n**Brief example** (this takes into account the current system timezone):\r\n\r\n    $ date +%s\r\n    1318996912\r\n\r\n    $ irb\r\n\r\n    ruby-1.9.2-p180 :001 &gt; require &#39;date&#39;\r\n     =&gt; true \r\n\r\n    ruby-1.9.2-p180 :002 &gt; Time.at(1318996912).to_datetime\r\n     =&gt; #&lt;DateTime: 2011-10-18T23:01:52-05:00 (13261609807\/5400,-5\/24,2299161)&gt; \r\n\r\n**Further update** (for UTC):\r\n\r\n    ruby-1.9.2-p180 :003 &gt; Time.at(1318996912).utc.to_datetime\r\n     =&gt; #&lt;DateTime: 2011-10-19T04:01:52+00:00 (13261609807\/5400,0\/1,2299161)&gt;\r\n\r\n**Recent Update**: I benchmarked the top solutions in this thread while working on a HA service a week or two ago, and was surprised to find that `Time.at(..)` outperforms `DateTime.strptime(..)` (update: added more benchmarks).\r\n\r\n    # ~ % ruby -v\r\n    #  =&gt; ruby 2.1.5p273 (2014-11-13 revision 48405) [x86_64-darwin13.0]\r\n\r\n    irb(main):038:0&gt; Benchmark.measure do\r\n    irb(main):039:1*   [&quot;1318996912&quot;, &quot;1318496912&quot;].each do |s|\r\n    irb(main):040:2*     DateTime.strptime(s, &#39;%s&#39;)\r\n    irb(main):041:2&gt;   end\r\n    irb(main):042:1&gt; end\r\n\r\n    =&gt; #&lt;Benchmark ... @real=2.9e-05 ... @total=0.0&gt;\r\n\r\n    irb(main):044:0&gt; Benchmark.measure do\r\n    irb(main):045:1&gt;   [1318996912, 1318496912].each do |i|\r\n    irb(main):046:2&gt;     DateTime.strptime(i.to_s, &#39;%s&#39;)\r\n    irb(main):047:2&gt;   end\r\n    irb(main):048:1&gt; end\r\n\r\n    =&gt; #&lt;Benchmark ... @real=2.0e-05 ... @total=0.0&gt;\r\n\r\n    irb(main):050:0* Benchmark.measure do\r\n    irb(main):051:1*   [&quot;1318996912&quot;, &quot;1318496912&quot;].each do |s|\r\n    irb(main):052:2*     Time.at(s.to_i).to_datetime\r\n    irb(main):053:2&gt;   end\r\n    irb(main):054:1&gt; end\r\n\r\n    =&gt; #&lt;Benchmark ... @real=1.5e-05 ... @total=0.0&gt;\r\n\r\n    irb(main):056:0* Benchmark.measure do\r\n    irb(main):057:1*   [1318996912, 1318496912].each do |i|\r\n    irb(main):058:2*     Time.at(i).to_datetime\r\n    irb(main):059:2&gt;   end\r\n    irb(main):060:1&gt; end\r\n\r\n    =&gt; #&lt;Benchmark ... @real=2.0e-05 ... @total=0.0&gt;",
        "body": "<p>Sorry, brief moment of synapse failure. Here's the real answer.<\/p>\n\n<pre><code>require 'date'\n\nTime.at(seconds_since_epoch_integer).to_datetime\n<\/code><\/pre>\n\n<p><strong>Brief example<\/strong> (this takes into account the current system timezone):<\/p>\n\n<pre><code>$ date +%s\n1318996912\n\n$ irb\n\nruby-1.9.2-p180 :001 &gt; require 'date'\n =&gt; true \n\nruby-1.9.2-p180 :002 &gt; Time.at(1318996912).to_datetime\n =&gt; #&lt;DateTime: 2011-10-18T23:01:52-05:00 (13261609807\/5400,-5\/24,2299161)&gt; \n<\/code><\/pre>\n\n<p><strong>Further update<\/strong> (for UTC):<\/p>\n\n<pre><code>ruby-1.9.2-p180 :003 &gt; Time.at(1318996912).utc.to_datetime\n =&gt; #&lt;DateTime: 2011-10-19T04:01:52+00:00 (13261609807\/5400,0\/1,2299161)&gt;\n<\/code><\/pre>\n\n<p><strong>Recent Update<\/strong>: I benchmarked the top solutions in this thread while working on a HA service a week or two ago, and was surprised to find that <code>Time.at(..)<\/code> outperforms <code>DateTime.strptime(..)<\/code> (update: added more benchmarks).<\/p>\n\n<pre><code># ~ % ruby -v\n#  =&gt; ruby 2.1.5p273 (2014-11-13 revision 48405) [x86_64-darwin13.0]\n\nirb(main):038:0&gt; Benchmark.measure do\nirb(main):039:1*   [\"1318996912\", \"1318496912\"].each do |s|\nirb(main):040:2*     DateTime.strptime(s, '%s')\nirb(main):041:2&gt;   end\nirb(main):042:1&gt; end\n\n=&gt; #&lt;Benchmark ... @real=2.9e-05 ... @total=0.0&gt;\n\nirb(main):044:0&gt; Benchmark.measure do\nirb(main):045:1&gt;   [1318996912, 1318496912].each do |i|\nirb(main):046:2&gt;     DateTime.strptime(i.to_s, '%s')\nirb(main):047:2&gt;   end\nirb(main):048:1&gt; end\n\n=&gt; #&lt;Benchmark ... @real=2.0e-05 ... @total=0.0&gt;\n\nirb(main):050:0* Benchmark.measure do\nirb(main):051:1*   [\"1318996912\", \"1318496912\"].each do |s|\nirb(main):052:2*     Time.at(s.to_i).to_datetime\nirb(main):053:2&gt;   end\nirb(main):054:1&gt; end\n\n=&gt; #&lt;Benchmark ... @real=1.5e-05 ... @total=0.0&gt;\n\nirb(main):056:0* Benchmark.measure do\nirb(main):057:1*   [1318996912, 1318496912].each do |i|\nirb(main):058:2*     Time.at(i).to_datetime\nirb(main):059:2&gt;   end\nirb(main):060:1&gt; end\n\n=&gt; #&lt;Benchmark ... @real=2.0e-05 ... @total=0.0&gt;\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 4084,
            "reputation": 11255,
            "user_id": 6033,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/e443dca06ce161bb4cf5917eb00f5a4c?s=256&d=identicon&r=PG",
            "display_name": "Michael Sepcot",
            "link": "https:\/\/stackoverflow.com\/users\/6033\/michael-sepcot"
        },
        "is_accepted": true,
        "score": 706,
        "last_activity_date": 1646386420,
        "last_edit_date": 1646386420.0,
        "creation_date": 1221256604,
        "answer_id": 60053,
        "question_id": 60033,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "To get a copy, use the [dup](https:\/\/api.rubyonrails.org\/classes\/ActiveRecord\/Core.html#method-i-dup) (or clone for &lt; rails 3.1+) method:\r\n\r\n    #rails &gt;= 3.1\r\n    new_record = old_record.dup\r\n\r\n    # rails &lt; 3.1\r\n    new_record = old_record.clone\r\n  \r\n\r\nThen you can change whichever fields you want.\r\n\r\n[ActiveRecord overrides the built-in Object#clone](http:\/\/api.rubyonrails.com\/classes\/ActiveRecord\/Base.html#M001363) to give you a new (not saved to the DB) record with an unassigned ID.  \r\nNote that it does not copy associations, so you&#39;ll have to do this manually if you need to.\r\n\r\n[Rails 3.1 clone is a shallow copy, use dup instead...](https:\/\/gist.github.com\/994614)",
        "body": "<p>To get a copy, use the <a href=\"https:\/\/api.rubyonrails.org\/classes\/ActiveRecord\/Core.html#method-i-dup\" rel=\"noreferrer\">dup<\/a> (or clone for &lt; rails 3.1+) method:<\/p>\n<pre><code>#rails &gt;= 3.1\nnew_record = old_record.dup\n\n# rails &lt; 3.1\nnew_record = old_record.clone\n<\/code><\/pre>\n<p>Then you can change whichever fields you want.<\/p>\n<p><a href=\"http:\/\/api.rubyonrails.com\/classes\/ActiveRecord\/Base.html#M001363\" rel=\"noreferrer\">ActiveRecord overrides the built-in Object#clone<\/a> to give you a new (not saved to the DB) record with an unassigned ID.<br \/>\nNote that it does not copy associations, so you'll have to do this manually if you need to.<\/p>\n<p><a href=\"https:\/\/gist.github.com\/994614\" rel=\"noreferrer\">Rails 3.1 clone is a shallow copy, use dup instead...<\/a><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 200189,
            "reputation": 20296,
            "user_id": 445908,
            "user_type": "registered",
            "accept_rate": 79,
            "profile_image": "https:\/\/i.stack.imgur.com\/MwXTa.jpg?s=256&g=1",
            "display_name": "Siwei",
            "link": "https:\/\/stackoverflow.com\/users\/445908\/siwei"
        },
        "is_accepted": true,
        "score": 705,
        "last_activity_date": 1680245416,
        "last_edit_date": 1680245416.0,
        "creation_date": 1337750918,
        "answer_id": 10713963,
        "question_id": 136793,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "**CAUTION**:\r\n\r\nThe `begin &lt;code&gt; end while &lt;condition&gt;` is rejected by Ruby&#39;s author Matz. Instead he suggests using `Kernel#loop`, e.g.\r\n\r\n    loop do \r\n      # some code here\r\n      break if &lt;condition&gt;\r\n    end \r\n\r\nHere&#39;s [an email exchange][2] in 23 Nov 2005 where Matz states:\r\n\r\n    |&gt; Don&#39;t use it please.  I&#39;m regretting this feature, and I&#39;d like to\r\n    |&gt; remove it in the future if it&#39;s possible.\r\n    |\r\n    |I&#39;m surprised.  What do you regret about it?\r\n\r\n    Because it&#39;s hard for users to tell\r\n\r\n      begin &lt;code&gt; end while &lt;cond&gt;\r\n\r\n    works differently from\r\n\r\n      &lt;code&gt; while &lt;cond&gt;\r\n\r\n\r\n[RosettaCode wiki][3] has a similar story:\r\n&gt; During November 2005, Yukihiro Matsumoto, the creator of Ruby, regretted this loop feature and suggested using Kernel#loop.\r\n\r\n\r\n[2]:https:\/\/web.archive.org\/web\/20220322235418\/http:\/\/blade.nagaokaut.ac.jp\/cgi-bin\/scat.rb\/ruby\/ruby-core\/6745\r\n[3]:http:\/\/rosettacode.org\/wiki\/Loops\/Do-while#Ruby",
        "body": "<p><strong>CAUTION<\/strong>:<\/p>\n<p>The <code>begin &lt;code&gt; end while &lt;condition&gt;<\/code> is rejected by Ruby's author Matz. Instead he suggests using <code>Kernel#loop<\/code>, e.g.<\/p>\n<pre><code>loop do \n  # some code here\n  break if &lt;condition&gt;\nend \n<\/code><\/pre>\n<p>Here's <a href=\"https:\/\/web.archive.org\/web\/20220322235418\/http:\/\/blade.nagaokaut.ac.jp\/cgi-bin\/scat.rb\/ruby\/ruby-core\/6745\" rel=\"noreferrer\">an email exchange<\/a> in 23 Nov 2005 where Matz states:<\/p>\n<pre><code>|&gt; Don't use it please.  I'm regretting this feature, and I'd like to\n|&gt; remove it in the future if it's possible.\n|\n|I'm surprised.  What do you regret about it?\n\nBecause it's hard for users to tell\n\n  begin &lt;code&gt; end while &lt;cond&gt;\n\nworks differently from\n\n  &lt;code&gt; while &lt;cond&gt;\n<\/code><\/pre>\n<p><a href=\"http:\/\/rosettacode.org\/wiki\/Loops\/Do-while#Ruby\" rel=\"noreferrer\">RosettaCode wiki<\/a> has a similar story:<\/p>\n<blockquote>\n<p>During November 2005, Yukihiro Matsumoto, the creator of Ruby, regretted this loop feature and suggested using Kernel#loop.<\/p>\n<\/blockquote>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 192515,
            "reputation": 8644,
            "user_id": 433703,
            "user_type": "registered",
            "accept_rate": 88,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/51a2dc3edfb95f66291f64b244463153?s=256&d=identicon&r=PG",
            "display_name": "A. Wilson",
            "link": "https:\/\/stackoverflow.com\/users\/433703\/a-wilson"
        },
        "is_accepted": true,
        "score": 700,
        "last_activity_date": 1588109086,
        "last_edit_date": 1588109086.0,
        "creation_date": 1305644781,
        "answer_id": 6032910,
        "question_id": 2337510,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "There are pieces to this answer that helped me get what I needed (easy multi-line concatenation WITHOUT extra whitespace), but since none of the actual answers had it, I&#39;m compiling them here:\r\n\r\n    str = &#39;this is a multi-line string&#39;\\\r\n      &#39; using implicit concatenation&#39;\\\r\n      &#39; to prevent spare \\n\\&#39;s&#39;\r\n    \r\n    =&gt; &quot;this is a multi-line string using implicit concatenation to eliminate spare\r\n    \\\\n&#39;s&quot;\r\n\r\nAs a bonus, here&#39;s a version using funny HEREDOC syntax (via [this link][1]):\r\n\r\n    p &lt;&lt;END_SQL.gsub(\/\\s+\/, &quot; &quot;).strip\r\n    SELECT * FROM     users\r\n             ORDER BY users.id DESC\r\n    END_SQL\r\n    # &gt;&gt; &quot;SELECT * FROM users ORDER BY users.id DESC&quot;\r\n\r\nThe latter would mostly be for situations that required more flexibility in the processing. I personally don&#39;t like it, it puts the processing in a weird place w.r.t. the string (i.e., in front of it, but using instance methods that usually come afterward), but it&#39;s there. Note that if you are indenting the last `END_SQL` identifier (which is common, since this is probably inside a function or module), you will need to use the hyphenated syntax (that is, `p &lt;&lt;-END_SQL` instead of `p &lt;&lt;END_SQL`). Otherwise, the indenting whitespace causes the identifier to be interpreted as a continuation of the string.\r\n\r\nThis doesn&#39;t save much typing, but it looks nicer than using + signs, to me.\r\n\r\nAlso (I say in an edit, several years later), if you&#39;re using Ruby 2.3+, the operator &lt;&lt;~ [is also available][2], which removes extra indentation from the final string. You should be able to remove the `.gsub` invocation, in that case (although it might depend on both the starting indentation and your final needs).\r\n\r\nEDIT: Adding one more:\r\n\r\n    p %{\r\n    SELECT * FROM     users\r\n             ORDER BY users.id DESC\r\n    }.gsub(\/\\s+\/, &quot; &quot;).strip\r\n    # &gt;&gt; &quot;SELECT * FROM users ORDER BY users.id DESC&quot;\r\n\r\n\r\n  [1]: http:\/\/graysoftinc.com\/ruby-voodoo\/working-with-multiline-strings\r\n  [2]: https:\/\/www.rubyguides.com\/2018\/11\/ruby-heredoc\/",
        "body": "<p>There are pieces to this answer that helped me get what I needed (easy multi-line concatenation WITHOUT extra whitespace), but since none of the actual answers had it, I'm compiling them here:<\/p>\n\n<pre><code>str = 'this is a multi-line string'\\\n  ' using implicit concatenation'\\\n  ' to prevent spare \\n\\'s'\n\n=&gt; \"this is a multi-line string using implicit concatenation to eliminate spare\n\\\\n's\"\n<\/code><\/pre>\n\n<p>As a bonus, here's a version using funny HEREDOC syntax (via <a href=\"http:\/\/graysoftinc.com\/ruby-voodoo\/working-with-multiline-strings\" rel=\"noreferrer\">this link<\/a>):<\/p>\n\n<pre><code>p &lt;&lt;END_SQL.gsub(\/\\s+\/, \" \").strip\nSELECT * FROM     users\n         ORDER BY users.id DESC\nEND_SQL\n# &gt;&gt; \"SELECT * FROM users ORDER BY users.id DESC\"\n<\/code><\/pre>\n\n<p>The latter would mostly be for situations that required more flexibility in the processing. I personally don't like it, it puts the processing in a weird place w.r.t. the string (i.e., in front of it, but using instance methods that usually come afterward), but it's there. Note that if you are indenting the last <code>END_SQL<\/code> identifier (which is common, since this is probably inside a function or module), you will need to use the hyphenated syntax (that is, <code>p &lt;&lt;-END_SQL<\/code> instead of <code>p &lt;&lt;END_SQL<\/code>). Otherwise, the indenting whitespace causes the identifier to be interpreted as a continuation of the string.<\/p>\n\n<p>This doesn't save much typing, but it looks nicer than using + signs, to me.<\/p>\n\n<p>Also (I say in an edit, several years later), if you're using Ruby 2.3+, the operator &lt;&lt;~ <a href=\"https:\/\/www.rubyguides.com\/2018\/11\/ruby-heredoc\/\" rel=\"noreferrer\">is also available<\/a>, which removes extra indentation from the final string. You should be able to remove the <code>.gsub<\/code> invocation, in that case (although it might depend on both the starting indentation and your final needs).<\/p>\n\n<p>EDIT: Adding one more:<\/p>\n\n<pre><code>p %{\nSELECT * FROM     users\n         ORDER BY users.id DESC\n}.gsub(\/\\s+\/, \" \").strip\n# &gt;&gt; \"SELECT * FROM users ORDER BY users.id DESC\"\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 132846,
            "reputation": 40063,
            "user_id": 333786,
            "user_type": "registered",
            "accept_rate": 78,
            "profile_image": "https:\/\/i.stack.imgur.com\/UOdKp.jpg?s=256&g=1",
            "display_name": "Jakub Hampl",
            "link": "https:\/\/stackoverflow.com\/users\/333786\/jakub-hampl"
        },
        "is_accepted": true,
        "score": 682,
        "last_activity_date": 1290297676,
        "last_edit_date": 1290297676.0,
        "creation_date": 1290209932,
        "answer_id": 4230350,
        "question_id": 4230322,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "Use `next`: \r\n\r\n    (1..10).each do |a|\r\n      next if a.even?\r\n      puts a\r\n    end\r\n\r\nprints:\r\n\r\n    1\r\n    3   \r\n    5\r\n    7\r\n    9\r\n\r\nFor additional coolness check out also `redo` and `retry`.\r\n\r\nWorks also for friends like `times`, `upto`, `downto`, `each_with_index`, `select`, `map` and other iterators (and more generally blocks).\r\n\r\nFor more info see http:\/\/ruby-doc.org\/docs\/ProgrammingRuby\/html\/tut_expressions.html#UL.",
        "body": "<p>Use <code>next<\/code>: <\/p>\n\n<pre><code>(1..10).each do |a|\n  next if a.even?\n  puts a\nend\n<\/code><\/pre>\n\n<p>prints:<\/p>\n\n<pre><code>1\n3   \n5\n7\n9\n<\/code><\/pre>\n\n<p>For additional coolness check out also <code>redo<\/code> and <code>retry<\/code>.<\/p>\n\n<p>Works also for friends like <code>times<\/code>, <code>upto<\/code>, <code>downto<\/code>, <code>each_with_index<\/code>, <code>select<\/code>, <code>map<\/code> and other iterators (and more generally blocks).<\/p>\n\n<p>For more info see <a href=\"http:\/\/ruby-doc.org\/docs\/ProgrammingRuby\/html\/tut_expressions.html#UL\">http:\/\/ruby-doc.org\/docs\/ProgrammingRuby\/html\/tut_expressions.html#UL<\/a>.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 7934,
            "reputation": 78073,
            "user_id": 13989,
            "user_type": "registered",
            "accept_rate": 71,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/3b2b4aa0cbbb6bf3e3abc51becd918d6?s=256&d=identicon&r=PG",
            "display_name": "kch",
            "link": "https:\/\/stackoverflow.com\/users\/13989\/kch"
        },
        "is_accepted": false,
        "score": 669,
        "last_activity_date": 1591983715,
        "last_edit_date": 1591983715.0,
        "creation_date": 1250539541,
        "answer_id": 1290119,
        "question_id": 577944,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "### If you need the task to behave as a method, how about using an actual method?\r\n\r\n    task :build =&gt; [:some_other_tasks] do\r\n      build\r\n    end\r\n\r\n    task :build_all do\r\n      [:debug, :release].each { |t| build t }\r\n    end\r\n    \r\n    def build(type = :debug)\r\n      # ...\r\n    end\r\n\r\n### If you&#39;d rather stick to `rake`&#39;s idioms, here are your possibilities, compiled from past answers:\r\n\r\n-   This always executes the task, but it doesn&#39;t execute its dependencies:\r\n\r\n        Rake::Task[&quot;build&quot;].execute\r\n\r\n-   This one executes the dependencies, but it only executes the task if \r\n    it has not already been invoked:\r\n\r\n        Rake::Task[&quot;build&quot;].invoke\r\n\r\n-   This first resets the task&#39;s already_invoked state, allowing the task to\r\n    then be executed again, dependencies and all:\r\n\r\n        Rake::Task[&quot;build&quot;].reenable\r\n        Rake::Task[&quot;build&quot;].invoke\r\n\r\n-   Note that dependencies already invoked are not automatically re-executed unless they are re-enabled. In Rake &gt;= 10.3.2, you can use the following to re-enable those as well:\r\n\r\n        Rake::Task[&quot;build&quot;].all_prerequisite_tasks.each(&amp;:reenable)\r\n",
        "body": "<h3>If you need the task to behave as a method, how about using an actual method?<\/h3>\n\n<pre><code>task :build =&gt; [:some_other_tasks] do\n  build\nend\n\ntask :build_all do\n  [:debug, :release].each { |t| build t }\nend\n\ndef build(type = :debug)\n  # ...\nend\n<\/code><\/pre>\n\n<h3>If you'd rather stick to <code>rake<\/code>'s idioms, here are your possibilities, compiled from past answers:<\/h3>\n\n<ul>\n<li><p>This always executes the task, but it doesn't execute its dependencies:<\/p>\n\n<pre><code>Rake::Task[\"build\"].execute\n<\/code><\/pre><\/li>\n<li><p>This one executes the dependencies, but it only executes the task if \nit has not already been invoked:<\/p>\n\n<pre><code>Rake::Task[\"build\"].invoke\n<\/code><\/pre><\/li>\n<li><p>This first resets the task's already_invoked state, allowing the task to\nthen be executed again, dependencies and all:<\/p>\n\n<pre><code>Rake::Task[\"build\"].reenable\nRake::Task[\"build\"].invoke\n<\/code><\/pre><\/li>\n<li><p>Note that dependencies already invoked are not automatically re-executed unless they are re-enabled. In Rake >= 10.3.2, you can use the following to re-enable those as well:<\/p>\n\n<pre><code>Rake::Task[\"build\"].all_prerequisite_tasks.each(&amp;:reenable)\n<\/code><\/pre><\/li>\n<\/ul>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 87452,
            "reputation": 35954,
            "user_id": 242493,
            "user_type": "registered",
            "accept_rate": 88,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/8893e2e206c0377ff776d2535887d23f?s=256&d=identicon&r=PG",
            "display_name": "Jimmy",
            "link": "https:\/\/stackoverflow.com\/users\/242493\/jimmy"
        },
        "is_accepted": true,
        "score": 664,
        "last_activity_date": 1567623504,
        "last_edit_date": 1567623504.0,
        "creation_date": 1292835092,
        "answer_id": 4488110,
        "question_id": 4487948,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "I believe you can do this:\r\n\r\n    gem &quot;foo&quot;, path: &quot;\/path\/to\/foo&quot;",
        "body": "<p>I believe you can do this:<\/p>\n\n<pre><code>gem \"foo\", path: \"\/path\/to\/foo\"\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 503176,
            "reputation": 46390,
            "user_id": 1157054,
            "user_type": "registered",
            "accept_rate": 82,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/5c9d0ecbe3045579b72f96744c62735c?s=256&d=identicon&r=PG",
            "display_name": "Ajedi32",
            "link": "https:\/\/stackoverflow.com\/users\/1157054\/ajedi32"
        },
        "is_accepted": true,
        "score": 650,
        "last_activity_date": 1494432506,
        "last_edit_date": 1494432506.0,
        "creation_date": 1343930048,
        "answer_id": 11783090,
        "question_id": 6770350,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "I believe what you are looking for is [`assign_attributes`](http:\/\/api.rubyonrails.org\/classes\/ActiveModel\/AttributeAssignment.html#method-i-assign_attributes).\r\n\r\nIt&#39;s basically the same as update_attributes but it doesn&#39;t save the record:\r\n\r\n    class User &lt; ActiveRecord::Base\r\n      attr_accessible :name\r\n      attr_accessible :name, :is_admin, :as =&gt; :admin\r\n    end\r\n    \r\n    user = User.new\r\n    user.assign_attributes({ :name =&gt; &#39;Josh&#39;, :is_admin =&gt; true }) # Raises an ActiveModel::MassAssignmentSecurity::Error\r\n    user.assign_attributes({ :name =&gt; &#39;Bob&#39;})\r\n    user.name        # =&gt; &quot;Bob&quot;\r\n    user.is_admin?   # =&gt; false\r\n    user.new_record? # =&gt; true",
        "body": "<p>I believe what you are looking for is <a href=\"http:\/\/api.rubyonrails.org\/classes\/ActiveModel\/AttributeAssignment.html#method-i-assign_attributes\" rel=\"noreferrer\"><code>assign_attributes<\/code><\/a>.<\/p>\n\n<p>It's basically the same as update_attributes but it doesn't save the record:<\/p>\n\n<pre><code>class User &lt; ActiveRecord::Base\n  attr_accessible :name\n  attr_accessible :name, :is_admin, :as =&gt; :admin\nend\n\nuser = User.new\nuser.assign_attributes({ :name =&gt; 'Josh', :is_admin =&gt; true }) # Raises an ActiveModel::MassAssignmentSecurity::Error\nuser.assign_attributes({ :name =&gt; 'Bob'})\nuser.name        # =&gt; \"Bob\"\nuser.is_admin?   # =&gt; false\nuser.new_record? # =&gt; true\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 19841,
            "reputation": 14295,
            "user_id": 46848,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/1e8c4507c947e3cdb972976a756aed63?s=256&d=identicon&r=PG",
            "display_name": "zenazn",
            "link": "https:\/\/stackoverflow.com\/users\/46848\/zenazn"
        },
        "is_accepted": true,
        "score": 646,
        "last_activity_date": 1663044090,
        "last_edit_date": 1663044090.0,
        "creation_date": 1255018024,
        "answer_id": 1538801,
        "question_id": 1538789,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Try this:\r\n\r\n    array.inject(0){ |sum, x| sum + x }\r\n\r\n[See Ruby&#39;s Enumerable Documentation][1]\r\n\r\n\r\n  [1]: https:\/\/ruby-doc.org\/core\/Enumerable.html#method-i-inject\r\n\r\n(note: the `0` base case is needed so that `0` will be returned on an empty array instead of `nil`)",
        "body": "<p>Try this:<\/p>\n<pre><code>array.inject(0){ |sum, x| sum + x }\n<\/code><\/pre>\n<p><a href=\"https:\/\/ruby-doc.org\/core\/Enumerable.html#method-i-inject\" rel=\"nofollow noreferrer\">See Ruby's Enumerable Documentation<\/a><\/p>\n<p>(note: the <code>0<\/code> base case is needed so that <code>0<\/code> will be returned on an empty array instead of <code>nil<\/code>)<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 43171,
            "reputation": 251988,
            "user_id": 126042,
            "user_type": "registered",
            "accept_rate": 68,
            "profile_image": "https:\/\/i.stack.imgur.com\/rTmRA.jpg?s=256&g=1",
            "display_name": "Mark Rushakoff",
            "link": "https:\/\/stackoverflow.com\/users\/126042\/mark-rushakoff"
        },
        "is_accepted": true,
        "score": 644,
        "last_activity_date": 1269657237,
        "last_edit_date": null,
        "creation_date": 1269657237,
        "answer_id": 2527911,
        "question_id": 2527830,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "Rather than referring to the literal name of the class, inside an instance method you can just call `self.class.whatever`.\r\n\r\n    class Foo\r\n        def self.some_class_method\r\n            puts self\r\n        end\r\n    \r\n        def some_instance_method\r\n            self.class.some_class_method\r\n        end\r\n    end\r\n    \r\n    print &quot;Class method: &quot;\r\n    Foo.some_class_method\r\n    \r\n    print &quot;Instance method: &quot;\r\n    Foo.new.some_instance_method\r\n\r\nOutputs:\r\n&lt;pre&gt;\r\nClass method: Foo\r\nInstance method: Foo\r\n&lt;\/pre&gt;\r\n\r\n\r\n\r\n",
        "body": "<p>Rather than referring to the literal name of the class, inside an instance method you can just call <code>self.class.whatever<\/code>.<\/p>\n\n<pre><code>class Foo\n    def self.some_class_method\n        puts self\n    end\n\n    def some_instance_method\n        self.class.some_class_method\n    end\nend\n\nprint \"Class method: \"\nFoo.some_class_method\n\nprint \"Instance method: \"\nFoo.new.some_instance_method\n<\/code><\/pre>\n\n<p>Outputs:<\/p>\n\n<pre>\nClass method: Foo\nInstance method: Foo\n<\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 30313,
            "reputation": 43601,
            "user_id": 82592,
            "user_type": "registered",
            "accept_rate": 74,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/e1b105626dd9cfd15e543af82e470fd7?s=256&d=identicon&r=PG",
            "display_name": "Mladen Jablanovi\u0107",
            "link": "https:\/\/stackoverflow.com\/users\/82592\/mladen-jablanovi%c4%87"
        },
        "is_accepted": true,
        "score": 641,
        "last_activity_date": 1278398928,
        "last_edit_date": 1495542884.0,
        "creation_date": 1278398450,
        "answer_id": 3184039,
        "question_id": 3183786,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "One of the numerous niceties of Ruby is the possibility to extend existing classes with your own methods. That&#39;s called &quot;class reopening&quot; or monkey-patching (the meaning of the latter [can vary][1], though).\r\n\r\nSo, take a look here:\r\n\r\n    car = {:make =&gt; &quot;bmw&quot;, :year =&gt; &quot;2003&quot;}\r\n    # =&gt; {:make=&gt;&quot;bmw&quot;, :year=&gt;&quot;2003&quot;}\r\n    car.to_json\r\n    # NoMethodError: undefined method `to_json&#39; for {:make=&gt;&quot;bmw&quot;, :year=&gt;&quot;2003&quot;}:Hash\r\n    #\tfrom (irb):11\r\n    #\tfrom \/usr\/bin\/irb:12:in `&lt;main&gt;&#39;\r\n    require &#39;json&#39;\r\n    # =&gt; true\r\n    car.to_json\r\n    # =&gt; &quot;{&quot;make&quot;:&quot;bmw&quot;,&quot;year&quot;:&quot;2003&quot;}&quot;\r\n\r\nAs you can see, requiring `json` has magically brought method `to_json` to our `Hash`.\r\n\r\n\r\n  [1]: https:\/\/stackoverflow.com\/questions\/394144\/what-does-monkey-patching-exactly-mean-in-ruby",
        "body": "<p>One of the numerous niceties of Ruby is the possibility to extend existing classes with your own methods. That's called \"class reopening\" or monkey-patching (the meaning of the latter <a href=\"https:\/\/stackoverflow.com\/questions\/394144\/what-does-monkey-patching-exactly-mean-in-ruby\">can vary<\/a>, though).<\/p>\n\n<p>So, take a look here:<\/p>\n\n<pre><code>car = {:make =&gt; \"bmw\", :year =&gt; \"2003\"}\n# =&gt; {:make=&gt;\"bmw\", :year=&gt;\"2003\"}\ncar.to_json\n# NoMethodError: undefined method `to_json' for {:make=&gt;\"bmw\", :year=&gt;\"2003\"}:Hash\n#   from (irb):11\n#   from \/usr\/bin\/irb:12:in `&lt;main&gt;'\nrequire 'json'\n# =&gt; true\ncar.to_json\n# =&gt; \"{\"make\":\"bmw\",\"year\":\"2003\"}\"\n<\/code><\/pre>\n\n<p>As you can see, requiring <code>json<\/code> has magically brought method <code>to_json<\/code> to our <code>Hash<\/code>.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 146892,
            "reputation": 33550,
            "user_id": 357641,
            "user_type": "registered",
            "accept_rate": 55,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/4230b4ffee31124df3c2b76ce429e2f8?s=256&d=identicon&r=PG",
            "display_name": "Greg",
            "link": "https:\/\/stackoverflow.com\/users\/357641\/greg"
        },
        "is_accepted": true,
        "score": 641,
        "last_activity_date": 1538538204,
        "last_edit_date": 1538538204.0,
        "creation_date": 1300909302,
        "answer_id": 5410713,
        "question_id": 5410682,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "This looks like [JavaScript Object Notation (JSON)][1]. You can parse JSON that resides in some variable, e.g. `json_string`, like so:\r\n\r\n    require &#39;json&#39;\r\n    JSON.parse(json_string)\r\n\r\nIf you\u2019re using an older Ruby, you may need to install the [json gem][2].\r\n\r\n---\r\n\r\nThere are also other implementations of JSON for Ruby that may fit some use-cases better:\r\n\r\n- [YAJL C Bindings for Ruby][3]\r\n- [JSON::Stream][4]\r\n\r\n\r\n  [1]: http:\/\/www.json.org\r\n  [2]: https:\/\/rubygems.org\/gems\/json\r\n  [3]: https:\/\/rubygems.org\/gems\/yajl-ruby\r\n  [4]: https:\/\/rubygems.org\/gems\/json-stream",
        "body": "<p>This looks like <a href=\"http:\/\/www.json.org\" rel=\"noreferrer\">JavaScript Object Notation (JSON)<\/a>. You can parse JSON that resides in some variable, e.g. <code>json_string<\/code>, like so:<\/p>\n\n<pre><code>require 'json'\nJSON.parse(json_string)\n<\/code><\/pre>\n\n<p>If you\u2019re using an older Ruby, you may need to install the <a href=\"https:\/\/rubygems.org\/gems\/json\" rel=\"noreferrer\">json gem<\/a>.<\/p>\n\n<hr>\n\n<p>There are also other implementations of JSON for Ruby that may fit some use-cases better:<\/p>\n\n<ul>\n<li><a href=\"https:\/\/rubygems.org\/gems\/yajl-ruby\" rel=\"noreferrer\">YAJL C Bindings for Ruby<\/a><\/li>\n<li><a href=\"https:\/\/rubygems.org\/gems\/json-stream\" rel=\"noreferrer\">JSON::Stream<\/a><\/li>\n<\/ul>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 12732,
            "reputation": 107102,
            "user_id": 25222,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/df9dc984d0eede2df0cd514195c461f2?s=256&d=identicon&r=PG",
            "display_name": "Robert Gamble",
            "link": "https:\/\/stackoverflow.com\/users\/25222\/robert-gamble"
        },
        "is_accepted": true,
        "score": 640,
        "last_activity_date": 1645825332,
        "last_edit_date": 1645825332.0,
        "creation_date": 1227314450,
        "answer_id": 310638,
        "question_id": 310634,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "This will iterate through all the elements:\r\n\r\n```rb\r\narray = [1, 2, 3, 4, 5, 6]\r\narray.each { |x| puts x }\r\n\r\n# Output:\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n```\r\n\r\nThis will iterate through all the elements giving you the value and the index:\r\n\r\n```rb\r\narray = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]\r\narray.each_with_index {|val, index| puts &quot;#{val} =&gt; #{index}&quot; }\r\n\r\n# Output:\r\n\r\nA =&gt; 0\r\nB =&gt; 1\r\nC =&gt; 2\r\n```\r\n\r\nI&#39;m not quite sure from your question which one you are looking for.\r\n",
        "body": "<p>This will iterate through all the elements:<\/p>\n<pre class=\"lang-rb prettyprint-override\"><code>array = [1, 2, 3, 4, 5, 6]\narray.each { |x| puts x }\n\n# Output:\n\n1\n2\n3\n4\n5\n6\n<\/code><\/pre>\n<p>This will iterate through all the elements giving you the value and the index:<\/p>\n<pre class=\"lang-rb prettyprint-override\"><code>array = [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;]\narray.each_with_index {|val, index| puts &quot;#{val} =&gt; #{index}&quot; }\n\n# Output:\n\nA =&gt; 0\nB =&gt; 1\nC =&gt; 2\n<\/code><\/pre>\n<p>I'm not quite sure from your question which one you are looking for.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 14283,
            "reputation": 21542,
            "user_id": 29262,
            "user_type": "registered",
            "accept_rate": 62,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/42d4590355a1404230fbc9aff4dd377b?s=256&d=identicon&r=PG",
            "display_name": "Myron Marston",
            "link": "https:\/\/stackoverflow.com\/users\/29262\/myron-marston"
        },
        "is_accepted": true,
        "score": 632,
        "last_activity_date": 1547150878,
        "last_edit_date": 1547150878.0,
        "creation_date": 1300507470,
        "answer_id": 5359979,
        "question_id": 5359558,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "I always prefer `let` to an instance variable for a couple of reasons:\r\n\r\n - Instance variables spring into existence when referenced.  This means that if you fat finger the spelling of the instance variable, a new one will be created and initialized to `nil`, which can lead to subtle bugs and false positives.  Since `let` creates a method, you&#39;ll get a `NameError` when you misspell it, which I find preferable.  It makes it easier to refactor specs, too.\r\n - A `before(:each)` hook will run before each example, even if the example doesn&#39;t use any of the instance variables defined in the hook.  This isn&#39;t usually a big deal, but if the setup of the instance variable takes a long time, then you&#39;re wasting cycles.  For the method defined by `let`, the initialization code only runs if the example calls it.\r\n - You can refactor from a local variable in an example directly into a let without changing the\r\nreferencing syntax in the example.  If you refactor to an instance variable, you have to change\r\nhow you reference the object in the example (e.g. add an `@`).\r\n - This is a bit subjective, but as Mike Lewis pointed out, I think it makes the spec easier to read.  I like the organization of defining all my dependent objects with `let` and keeping my `it` block nice and short.\r\n\r\n*A related link can be found here: [http:\/\/www.betterspecs.org\/#let][1]* \r\n\r\n  [1]: http:\/\/www.betterspecs.org\/#let",
        "body": "<p>I always prefer <code>let<\/code> to an instance variable for a couple of reasons:<\/p>\n\n<ul>\n<li>Instance variables spring into existence when referenced.  This means that if you fat finger the spelling of the instance variable, a new one will be created and initialized to <code>nil<\/code>, which can lead to subtle bugs and false positives.  Since <code>let<\/code> creates a method, you'll get a <code>NameError<\/code> when you misspell it, which I find preferable.  It makes it easier to refactor specs, too.<\/li>\n<li>A <code>before(:each)<\/code> hook will run before each example, even if the example doesn't use any of the instance variables defined in the hook.  This isn't usually a big deal, but if the setup of the instance variable takes a long time, then you're wasting cycles.  For the method defined by <code>let<\/code>, the initialization code only runs if the example calls it.<\/li>\n<li>You can refactor from a local variable in an example directly into a let without changing the\nreferencing syntax in the example.  If you refactor to an instance variable, you have to change\nhow you reference the object in the example (e.g. add an <code>@<\/code>).<\/li>\n<li>This is a bit subjective, but as Mike Lewis pointed out, I think it makes the spec easier to read.  I like the organization of defining all my dependent objects with <code>let<\/code> and keeping my <code>it<\/code> block nice and short.<\/li>\n<\/ul>\n\n<p><em>A related link can be found here: <a href=\"http:\/\/www.betterspecs.org\/#let\" rel=\"noreferrer\">http:\/\/www.betterspecs.org\/#let<\/a><\/em> <\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 73712,
            "reputation": 7297,
            "user_id": 212130,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/f3c806d26f49880b29d818c6a5d1a05e?s=256&d=identicon&r=PG",
            "display_name": "Ian Eccles",
            "link": "https:\/\/stackoverflow.com\/users\/212130\/ian-eccles"
        },
        "is_accepted": true,
        "score": 629,
        "last_activity_date": 1258549349,
        "last_edit_date": 1258549349.0,
        "creation_date": 1258548249,
        "answer_id": 1755713,
        "question_id": 1755665,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "You also have the shortcut option of \r\n\r\n    Dir[&quot;\/path\/to\/search\/*&quot;]\r\n\r\nand if you want to find all Ruby files in any folder or sub-folder: \r\n\r\n    Dir[&quot;\/path\/to\/search\/**\/*.rb&quot;]",
        "body": "<p>You also have the shortcut option of <\/p>\n\n<pre><code>Dir[\"\/path\/to\/search\/*\"]\n<\/code><\/pre>\n\n<p>and if you want to find all Ruby files in any folder or sub-folder: <\/p>\n\n<pre><code>Dir[\"\/path\/to\/search\/**\/*.rb\"]\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 8863,
            "reputation": 14575,
            "user_id": 16143,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/20ad5ab3b19da198bde2d3d66c3eef70?s=256&d=identicon&r=PG",
            "display_name": "Keltia",
            "link": "https:\/\/stackoverflow.com\/users\/16143\/keltia"
        },
        "is_accepted": true,
        "score": 624,
        "last_activity_date": 1451679297,
        "last_edit_date": 1451679297.0,
        "creation_date": 1229605746,
        "answer_id": 377787,
        "question_id": 377768,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "You can do that in several ways:\r\n\r\n 1. As you shown with `&lt;&lt;` but that is not the *usual* way\r\n 2. With string interpolation\r\n\r\n        source = &quot;#{ROOT_DIR}\/#{project}\/App.config&quot;\r\n\r\n 3. with `+`\r\n\r\n        source = &quot;#{ROOT_DIR}\/&quot; + project + &quot;\/App.config&quot;\r\n\r\nThe second method seems to be more efficient in term of memory\/speed from what I&#39;ve seen (not measured though). All three methods will throw an uninitialized constant error when ROOT_DIR is nil.\r\n\r\nWhen dealing with pathnames, you may want to use `File.join` to avoid messing up with pathname separator.\r\n\r\nIn the end, it is a matter of taste.\r\n",
        "body": "<p>You can do that in several ways:<\/p>\n\n<ol>\n<li>As you shown with <code>&lt;&lt;<\/code> but that is not the <em>usual<\/em> way<\/li>\n<li><p>With string interpolation<\/p>\n\n<pre><code>source = \"#{ROOT_DIR}\/#{project}\/App.config\"\n<\/code><\/pre><\/li>\n<li><p>with <code>+<\/code><\/p>\n\n<pre><code>source = \"#{ROOT_DIR}\/\" + project + \"\/App.config\"\n<\/code><\/pre><\/li>\n<\/ol>\n\n<p>The second method seems to be more efficient in term of memory\/speed from what I've seen (not measured though). All three methods will throw an uninitialized constant error when ROOT_DIR is nil.<\/p>\n\n<p>When dealing with pathnames, you may want to use <code>File.join<\/code> to avoid messing up with pathname separator.<\/p>\n\n<p>In the end, it is a matter of taste.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 42403,
            "reputation": 174355,
            "user_id": 123527,
            "user_type": "registered",
            "accept_rate": 86,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/99e0b39c091e10d9c7d4452a34ca52dc?s=256&d=identicon&r=PG",
            "display_name": "Simone Carletti",
            "link": "https:\/\/stackoverflow.com\/users\/123527\/simone-carletti"
        },
        "is_accepted": true,
        "score": 617,
        "last_activity_date": 1396529460,
        "last_edit_date": 1495540955.0,
        "creation_date": 1386177412,
        "answer_id": 20381730,
        "question_id": 20361428,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "**Important**: Make sure your app is not using I18n 0.6.8, it has a [bug that prevents the configuration to be set correctly][1].\r\n\r\n---\r\n\r\n## Short answer\r\n\r\nIn order to silence the warning edit the application.rb file and include the following line inside the `Rails::Application` body\r\n\r\n    config.i18n.enforce_available_locales = true\r\n\r\n\r\nThe possible values are:\r\n\r\n- **false**: if you\r\n    - want to skip the locale validation\r\n    - don&#39;t care about locales\r\n- **true**: if you\r\n    - want the application to raise an error if an invalid locale is passed (or)\r\n    - want to default to the new Rails behaviors (or)\r\n    - care about locale validation\r\n\r\nNote:\r\n\r\n- The old default behavior corresponds to `false`, not `true`.\r\n- If you are setting the `config.i18n.default_locale` configuration or other i18n settings, make sure to do it after setting the `config.i18n.enforce_available_locales` setting.\r\n- If your use third party gems that include I18n features, setting the variable through the Application `config` object, may not have an effect. In this case, set it directly to `I18n` using `I18n.config.enforce_available_locales`.\r\n### Caveats\r\n\r\n### Example\r\n\r\n    require File.expand_path(&#39;..\/boot&#39;, __FILE__)\r\n\r\n    # ...\r\n\r\n    module YouApplication\r\n      class Application &lt; Rails::Application\r\n\r\n        # ...\r\n\r\n        config.i18n.enforce_available_locales = true\r\n        # or if one of your gem compete for pre-loading, use\r\n        I18n.config.enforce_available_locales = true\r\n\r\n        # ...\r\n\r\n      end\r\n    end\r\n\r\n\r\n## Long answer\r\n\r\nThe deprecation warning is now displayed both in Rails 4 (&gt;= 4.0.2) and Rails 3.2 (&gt;= 3.2.14). The reason is explained in [this commit][2].\r\n\r\n&gt; Enforce available locales\r\n&gt; \r\n&gt; When `I18n.config.enforce_available_locales` is true we&#39;ll raise an\r\n&gt; I18n::InvalidLocale exception if the passed locale is unavailable.\r\n&gt; \r\n&gt; The default is set to `nil` which will display a deprecation error.\r\n&gt; \r\n&gt; If set to `false` we&#39;ll skip enforcing available locales altogether (old behaviour).\r\n&gt; \r\n&gt; This has been implemented in the following methods :\r\n&gt; \r\n&gt; - I18n.config.default_locale=\r\n&gt; - I18n.config.locale=\r\n&gt; - I18n.translate\r\n&gt; - I18n.localize\r\n&gt; - I18n.transliterate\r\n\r\nBefore this change, if you passed an unsupported locale, Rails would silently switch to it if the locale is valid (i.e. if there is a corresponding locale file in the `\/config\/locales` folder), otherwise the locale would default to the `config.i18n.default_locale` configuration (which defaults to :en).\r\n\r\nThe new version of the I18n gem, forces developers to be a little bit more conscious of the locale management.\r\n\r\nIn the future, the behavior will change and if a locale is invalid, the Rails app will raise an error. \r\n\r\nIn preparation of such change (that may potentially break several applications that until today were relying on silent defaults), the warning is forcing you to explicitly declare which validation you want to perform, during the current transition period.\r\n\r\nTo restore the previous behavior, simply set the following configuration to `false`\r\n\r\n    config.i18n.enforce_available_locales = false\r\n\r\notherwise, set it to true to match the new Rails defaults or if you want to be more rigid on domain validation and avoid switching to the default in case of invalid locale.\r\n\r\n    config.i18n.enforce_available_locales = true\r\n\r\n### Caveat\r\n\r\n1. If you are setting the `config.i18n.default_locale` configuration or using any of the previously mentioned methods (`default_locale=`, `locale=`, `translate`, etc), make sure to do it after setting the `config.i18n.enforce_available_locales` setting. Otherwise, the deprecation warning will keep on popping up. (Thanks [F&#225;bio Batista][3]).\r\n\r\n2. If you use third party gems that include I18n features, setting the variable through may not have effect. In fact, the issue is the same as described in the previous point, just a little bit harder to debug. \r\n\r\n   This issue is a matter of precedence. When you set the config in your Rails app, the value is not immediately assigned to the I18n gem. Rails stores each config in an internal object, loads the dependencies (Railties and third party gems) and then it passes the configuration to the target classes. If you use a gem (or Rails plugin) that calls any of the I18n methods before the config is assigned to I18n, then you&#39;ll get the warning.\r\n\r\n   In this case, you need to skip the Rails stack and set the config immediately to the I18n gem by calling\r\n\r\n        I18n.config.enforce_available_locales = true\r\n\r\n    instead of\r\n\r\n        config.i18n.enforce_available_locales = true\r\n\r\n    The issue is easy to prove. Try to generate a new empty Rails app and you will see that setting `config.i18n` in the `application.rb` works fine.\r\n\r\n    If in your app it does not, there is an easy way to debug the culprit. Locate the i18n gem in your system, open the `i18n.rb` file and edit the method `enforce_available_locales!` to include the statement `puts caller.inspect`.\r\n\r\n    ![][4]\r\n\r\n    This will cause the method to print the stacktrace whenever invoked. You will be able to determine which gem is calling it by inspecting the stacktrace (in my case it was Authlogic).\r\n\r\n        [&quot;\/Users\/weppos\/.rvm\/gems\/ruby-2.0.0-p247@application\/gems\/i18n-0.6.9\/lib\/i18n.rb:150:in `translate&#39;&quot;,\r\n         &quot;\/Users\/weppos\/.rvm\/gems\/ruby-2.0.0-p247@application\/gems\/authlogic-3.1.0\/lib\/authlogic\/i18n\/translator.rb:8:in `translate&#39;&quot;,\r\n         &quot;\/Users\/weppos\/.rvm\/gems\/ruby-2.0.0-p247@application\/gems\/authlogic-3.1.0\/lib\/authlogic\/i18n.rb:79:in `translate&#39;&quot;,\r\n         &quot;\/Users\/weppos\/.rvm\/gems\/ruby-2.0.0-p247@application\/gems\/authlogic-3.1.0\/lib\/authlogic\/acts_as_authentic\/email.rb:68:in `validates_format_of_email_field_options&#39;&quot;,\r\n         &quot;\/Users\/weppos\/.rvm\/gems\/ruby-2.0.0-p247@application\/gems\/authlogic-3.1.0\/lib\/authlogic\/acts_as_authentic\/email.rb:102:in `block in included&#39;&quot;,\r\n         &quot;\/Users\/weppos\/.rvm\/gems\/ruby-2.0.0-p247@application\/gems\/authlogic-3.1.0\/lib\/authlogic\/acts_as_authentic\/email.rb:99:in `class_eval&#39;&quot;,\r\n         &quot;\/Users\/weppos\/.rvm\/gems\/ruby-2.0.0-p247@application\/gems\/authlogic-3.1.0\/lib\/authlogic\/acts_as_authentic\/email.rb:99:in `included&#39;&quot;,\r\n         &quot;\/Users\/weppos\/.rvm\/gems\/ruby-2.0.0-p247@application\/gems\/authlogic-3.1.0\/lib\/authlogic\/acts_as_authentic\/base.rb:37:in `include&#39;&quot;,\r\n         &quot;\/Users\/weppos\/.rvm\/gems\/ruby-2.0.0-p247@application\/gems\/authlogic-3.1.0\/lib\/authlogic\/acts_as_authentic\/base.rb:37:in `block in acts_as_authentic&#39;&quot;,\r\n         &quot;\/Users\/weppos\/.rvm\/gems\/ruby-2.0.0-p247@application\/gems\/authlogic-3.1.0\/lib\/authlogic\/acts_as_authentic\/base.rb:37:in `each&#39;&quot;,\r\n         &quot;\/Users\/weppos\/.rvm\/gems\/ruby-2.0.0-p247@application\/gems\/authlogic-3.1.0\/lib\/authlogic\/acts_as_authentic\/base.rb:37:in `acts_as_authentic&#39;&quot;,\r\n         &quot;\/Users\/weppos\/Projects\/application\/app\/models\/user.rb:8:in `&lt;class:User&gt;&#39;&quot;,\r\n         &quot;\/Users\/weppos\/Projects\/application\/app\/models\/user.rb:1:in `&lt;top (required)&gt;&#39;&quot;,\r\n\r\n\r\n  [1]: https:\/\/github.com\/svenfuchs\/i18n\/commit\/2893ebf4674a12fcded5779ad13fa05dc74dbf5e\r\n  [2]: https:\/\/github.com\/svenfuchs\/i18n\/commit\/3b6e56e06fd70f6e4507996b017238505e66608c\r\n  [3]: https:\/\/stackoverflow.com\/users\/292586\/fabio-batista\r\n  [4]: http:\/\/i.stack.imgur.com\/qukFy.png\r\n",
        "body": "<p><strong>Important<\/strong>: Make sure your app is not using I18n 0.6.8, it has a <a href=\"https:\/\/github.com\/svenfuchs\/i18n\/commit\/2893ebf4674a12fcded5779ad13fa05dc74dbf5e\" rel=\"noreferrer\">bug that prevents the configuration to be set correctly<\/a>.<\/p>\n\n<hr>\n\n<h2>Short answer<\/h2>\n\n<p>In order to silence the warning edit the application.rb file and include the following line inside the <code>Rails::Application<\/code> body<\/p>\n\n<pre><code>config.i18n.enforce_available_locales = true\n<\/code><\/pre>\n\n<p>The possible values are:<\/p>\n\n<ul>\n<li><strong>false<\/strong>: if you\n\n<ul>\n<li>want to skip the locale validation<\/li>\n<li>don't care about locales<\/li>\n<\/ul><\/li>\n<li><strong>true<\/strong>: if you\n\n<ul>\n<li>want the application to raise an error if an invalid locale is passed (or)<\/li>\n<li>want to default to the new Rails behaviors (or)<\/li>\n<li>care about locale validation<\/li>\n<\/ul><\/li>\n<\/ul>\n\n<p>Note:<\/p>\n\n<ul>\n<li>The old default behavior corresponds to <code>false<\/code>, not <code>true<\/code>.<\/li>\n<li>If you are setting the <code>config.i18n.default_locale<\/code> configuration or other i18n settings, make sure to do it after setting the <code>config.i18n.enforce_available_locales<\/code> setting.<\/li>\n<li>If your use third party gems that include I18n features, setting the variable through the Application <code>config<\/code> object, may not have an effect. In this case, set it directly to <code>I18n<\/code> using <code>I18n.config.enforce_available_locales<\/code>.\n\n<h3>Caveats<\/h3><\/li>\n<\/ul>\n\n<h3>Example<\/h3>\n\n<pre><code>require File.expand_path('..\/boot', __FILE__)\n\n# ...\n\nmodule YouApplication\n  class Application &lt; Rails::Application\n\n    # ...\n\n    config.i18n.enforce_available_locales = true\n    # or if one of your gem compete for pre-loading, use\n    I18n.config.enforce_available_locales = true\n\n    # ...\n\n  end\nend\n<\/code><\/pre>\n\n<h2>Long answer<\/h2>\n\n<p>The deprecation warning is now displayed both in Rails 4 (>= 4.0.2) and Rails 3.2 (>= 3.2.14). The reason is explained in <a href=\"https:\/\/github.com\/svenfuchs\/i18n\/commit\/3b6e56e06fd70f6e4507996b017238505e66608c\" rel=\"noreferrer\">this commit<\/a>.<\/p>\n\n<blockquote>\n  <p>Enforce available locales<\/p>\n  \n  <p>When <code>I18n.config.enforce_available_locales<\/code> is true we'll raise an\n  I18n::InvalidLocale exception if the passed locale is unavailable.<\/p>\n  \n  <p>The default is set to <code>nil<\/code> which will display a deprecation error.<\/p>\n  \n  <p>If set to <code>false<\/code> we'll skip enforcing available locales altogether (old behaviour).<\/p>\n  \n  <p>This has been implemented in the following methods :<\/p>\n  \n  <ul>\n  <li>I18n.config.default_locale=<\/li>\n  <li>I18n.config.locale=<\/li>\n  <li>I18n.translate<\/li>\n  <li>I18n.localize<\/li>\n  <li>I18n.transliterate<\/li>\n  <\/ul>\n<\/blockquote>\n\n<p>Before this change, if you passed an unsupported locale, Rails would silently switch to it if the locale is valid (i.e. if there is a corresponding locale file in the <code>\/config\/locales<\/code> folder), otherwise the locale would default to the <code>config.i18n.default_locale<\/code> configuration (which defaults to :en).<\/p>\n\n<p>The new version of the I18n gem, forces developers to be a little bit more conscious of the locale management.<\/p>\n\n<p>In the future, the behavior will change and if a locale is invalid, the Rails app will raise an error. <\/p>\n\n<p>In preparation of such change (that may potentially break several applications that until today were relying on silent defaults), the warning is forcing you to explicitly declare which validation you want to perform, during the current transition period.<\/p>\n\n<p>To restore the previous behavior, simply set the following configuration to <code>false<\/code><\/p>\n\n<pre><code>config.i18n.enforce_available_locales = false\n<\/code><\/pre>\n\n<p>otherwise, set it to true to match the new Rails defaults or if you want to be more rigid on domain validation and avoid switching to the default in case of invalid locale.<\/p>\n\n<pre><code>config.i18n.enforce_available_locales = true\n<\/code><\/pre>\n\n<h3>Caveat<\/h3>\n\n<ol>\n<li><p>If you are setting the <code>config.i18n.default_locale<\/code> configuration or using any of the previously mentioned methods (<code>default_locale=<\/code>, <code>locale=<\/code>, <code>translate<\/code>, etc), make sure to do it after setting the <code>config.i18n.enforce_available_locales<\/code> setting. Otherwise, the deprecation warning will keep on popping up. (Thanks <a href=\"https:\/\/stackoverflow.com\/users\/292586\/fabio-batista\">F\u00e1bio Batista<\/a>).<\/p><\/li>\n<li><p>If you use third party gems that include I18n features, setting the variable through may not have effect. In fact, the issue is the same as described in the previous point, just a little bit harder to debug. <\/p>\n\n<p>This issue is a matter of precedence. When you set the config in your Rails app, the value is not immediately assigned to the I18n gem. Rails stores each config in an internal object, loads the dependencies (Railties and third party gems) and then it passes the configuration to the target classes. If you use a gem (or Rails plugin) that calls any of the I18n methods before the config is assigned to I18n, then you'll get the warning.<\/p>\n\n<p>In this case, you need to skip the Rails stack and set the config immediately to the I18n gem by calling<\/p>\n\n<pre><code>I18n.config.enforce_available_locales = true\n<\/code><\/pre>\n\n<p>instead of<\/p>\n\n<pre><code>config.i18n.enforce_available_locales = true\n<\/code><\/pre>\n\n<p>The issue is easy to prove. Try to generate a new empty Rails app and you will see that setting <code>config.i18n<\/code> in the <code>application.rb<\/code> works fine.<\/p>\n\n<p>If in your app it does not, there is an easy way to debug the culprit. Locate the i18n gem in your system, open the <code>i18n.rb<\/code> file and edit the method <code>enforce_available_locales!<\/code> to include the statement <code>puts caller.inspect<\/code>.<\/p>\n\n<p><img src=\"https:\/\/i.stack.imgur.com\/qukFy.png\" alt=\"\"><\/p>\n\n<p>This will cause the method to print the stacktrace whenever invoked. You will be able to determine which gem is calling it by inspecting the stacktrace (in my case it was Authlogic).<\/p>\n\n<pre><code>[\"\/Users\/weppos\/.rvm\/gems\/ruby-2.0.0-p247@application\/gems\/i18n-0.6.9\/lib\/i18n.rb:150:in `translate'\",\n \"\/Users\/weppos\/.rvm\/gems\/ruby-2.0.0-p247@application\/gems\/authlogic-3.1.0\/lib\/authlogic\/i18n\/translator.rb:8:in `translate'\",\n \"\/Users\/weppos\/.rvm\/gems\/ruby-2.0.0-p247@application\/gems\/authlogic-3.1.0\/lib\/authlogic\/i18n.rb:79:in `translate'\",\n \"\/Users\/weppos\/.rvm\/gems\/ruby-2.0.0-p247@application\/gems\/authlogic-3.1.0\/lib\/authlogic\/acts_as_authentic\/email.rb:68:in `validates_format_of_email_field_options'\",\n \"\/Users\/weppos\/.rvm\/gems\/ruby-2.0.0-p247@application\/gems\/authlogic-3.1.0\/lib\/authlogic\/acts_as_authentic\/email.rb:102:in `block in included'\",\n \"\/Users\/weppos\/.rvm\/gems\/ruby-2.0.0-p247@application\/gems\/authlogic-3.1.0\/lib\/authlogic\/acts_as_authentic\/email.rb:99:in `class_eval'\",\n \"\/Users\/weppos\/.rvm\/gems\/ruby-2.0.0-p247@application\/gems\/authlogic-3.1.0\/lib\/authlogic\/acts_as_authentic\/email.rb:99:in `included'\",\n \"\/Users\/weppos\/.rvm\/gems\/ruby-2.0.0-p247@application\/gems\/authlogic-3.1.0\/lib\/authlogic\/acts_as_authentic\/base.rb:37:in `include'\",\n \"\/Users\/weppos\/.rvm\/gems\/ruby-2.0.0-p247@application\/gems\/authlogic-3.1.0\/lib\/authlogic\/acts_as_authentic\/base.rb:37:in `block in acts_as_authentic'\",\n \"\/Users\/weppos\/.rvm\/gems\/ruby-2.0.0-p247@application\/gems\/authlogic-3.1.0\/lib\/authlogic\/acts_as_authentic\/base.rb:37:in `each'\",\n \"\/Users\/weppos\/.rvm\/gems\/ruby-2.0.0-p247@application\/gems\/authlogic-3.1.0\/lib\/authlogic\/acts_as_authentic\/base.rb:37:in `acts_as_authentic'\",\n \"\/Users\/weppos\/Projects\/application\/app\/models\/user.rb:8:in `&lt;class:User&gt;'\",\n \"\/Users\/weppos\/Projects\/application\/app\/models\/user.rb:1:in `&lt;top (required)&gt;'\",\n<\/code><\/pre><\/li>\n<\/ol>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5211,
            "reputation": 78606,
            "user_id": 8279,
            "user_type": "registered",
            "accept_rate": 55,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/d4758ccc3cc586f01e740733f3fd8b7e?s=256&d=identicon&r=PG",
            "display_name": "Marc-Andr&#233; Lafortune",
            "link": "https:\/\/stackoverflow.com\/users\/8279\/marc-andr%c3%a9-lafortune"
        },
        "is_accepted": false,
        "score": 610,
        "last_activity_date": 1423762707,
        "last_edit_date": 1423762707.0,
        "creation_date": 1273068110,
        "answer_id": 2773866,
        "question_id": 198460,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "While you can use `rand(42-10) + 10` to get a random number between `10` and `42` (where 10 is inclusive and 42 exclusive), there&#39;s a better way since Ruby 1.9.3, where you are able to call:\r\n\r\n    rand(10...42) # =&gt; 13\r\n\r\nAvailable for all versions of Ruby by requiring my [`backports`][1] gem.\r\n\r\nRuby 1.9.2 also introduced the `Random` class so you can create your own random number generator objects and has a nice API:\r\n\r\n    r = Random.new\r\n    r.rand(10...42) # =&gt; 22\r\n    r.bytes(3) # =&gt; &quot;rnd&quot;\r\n\r\nThe `Random` class itself acts as a random generator, so you call directly:\r\n\r\n    Random.rand(10...42) # =&gt; same as rand(10...42)\r\n\r\n**_Notes on `Random.new`_**\r\n\r\nIn most cases, the simplest is to use `rand` or `Random.rand`. Creating a new random generator each time you want a random number is a *really bad idea*. If you do this, you will get the random properties of the initial seeding algorithm which are atrocious compared to the properties of the [random generator itself][2].\r\n\r\nIf you use `Random.new`, you should thus call it *as rarely as possible*, for example once as `MyApp::Random = Random.new` and use it everywhere else.\r\n\r\nThe cases where `Random.new` is helpful are the following:\r\n\r\n- you are writing a gem and don&#39;t want to interfere with the sequence of `rand`\/`Random.rand` that the main programs might be relying on\r\n- you want separate reproducible sequences of random numbers (say one per thread)\r\n- you want to be able to save and resume a reproducible sequence of random numbers (easy as `Random` objects can marshalled)\r\n\r\n\r\n  [1]: http:\/\/github.com\/marcandre\/backports\r\n  [2]: http:\/\/en.wikipedia.org\/wiki\/Mersenne_twister",
        "body": "<p>While you can use <code>rand(42-10) + 10<\/code> to get a random number between <code>10<\/code> and <code>42<\/code> (where 10 is inclusive and 42 exclusive), there's a better way since Ruby 1.9.3, where you are able to call:<\/p>\n\n<pre><code>rand(10...42) # =&gt; 13\n<\/code><\/pre>\n\n<p>Available for all versions of Ruby by requiring my <a href=\"http:\/\/github.com\/marcandre\/backports\" rel=\"noreferrer\"><code>backports<\/code><\/a> gem.<\/p>\n\n<p>Ruby 1.9.2 also introduced the <code>Random<\/code> class so you can create your own random number generator objects and has a nice API:<\/p>\n\n<pre><code>r = Random.new\nr.rand(10...42) # =&gt; 22\nr.bytes(3) # =&gt; \"rnd\"\n<\/code><\/pre>\n\n<p>The <code>Random<\/code> class itself acts as a random generator, so you call directly:<\/p>\n\n<pre><code>Random.rand(10...42) # =&gt; same as rand(10...42)\n<\/code><\/pre>\n\n<p><strong><em>Notes on <code>Random.new<\/code><\/em><\/strong><\/p>\n\n<p>In most cases, the simplest is to use <code>rand<\/code> or <code>Random.rand<\/code>. Creating a new random generator each time you want a random number is a <em>really bad idea<\/em>. If you do this, you will get the random properties of the initial seeding algorithm which are atrocious compared to the properties of the <a href=\"http:\/\/en.wikipedia.org\/wiki\/Mersenne_twister\" rel=\"noreferrer\">random generator itself<\/a>.<\/p>\n\n<p>If you use <code>Random.new<\/code>, you should thus call it <em>as rarely as possible<\/em>, for example once as <code>MyApp::Random = Random.new<\/code> and use it everywhere else.<\/p>\n\n<p>The cases where <code>Random.new<\/code> is helpful are the following:<\/p>\n\n<ul>\n<li>you are writing a gem and don't want to interfere with the sequence of <code>rand<\/code>\/<code>Random.rand<\/code> that the main programs might be relying on<\/li>\n<li>you want separate reproducible sequences of random numbers (say one per thread)<\/li>\n<li>you want to be able to save and resume a reproducible sequence of random numbers (easy as <code>Random<\/code> objects can marshalled)<\/li>\n<\/ul>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 189983,
            "reputation": 14517,
            "user_id": 429649,
            "user_type": "registered",
            "accept_rate": 71,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/d84446b0d088d367c85e1a289a8745ec?s=256&d=identicon&r=PG",
            "display_name": "Tamik Soziev",
            "link": "https:\/\/stackoverflow.com\/users\/429649\/tamik-soziev"
        },
        "is_accepted": true,
        "score": 603,
        "last_activity_date": 1580412829,
        "last_edit_date": 1580412829.0,
        "creation_date": 1333653759,
        "answer_id": 10034720,
        "question_id": 10034678,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "I think I&#39;ve figured it out:\r\n\r\n    a = [3, 2, 4, 6, 3, 8]\r\n    a.delete(3)\r\n    #=&gt; 3\r\n    a\r\n    #=&gt; [2, 4, 6, 8]",
        "body": "<p>I think I've figured it out:<\/p>\n\n<pre><code>a = [3, 2, 4, 6, 3, 8]\na.delete(3)\n#=&gt; 3\na\n#=&gt; [2, 4, 6, 8]\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 54975,
            "reputation": 21318,
            "user_id": 164552,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/2c83da9f629326fa55fe7e8b6a4b8cee?s=256&d=identicon&r=PG",
            "display_name": "rwilliams",
            "link": "https:\/\/stackoverflow.com\/users\/164552\/rwilliams"
        },
        "is_accepted": false,
        "score": 598,
        "last_activity_date": 1653210878,
        "last_edit_date": 1653210878.0,
        "creation_date": 1289452388,
        "answer_id": 4151540,
        "question_id": 4151495,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "**Update for 2022** from [TrinitronX\r\n ][1]\r\n\r\n&gt; Fast-forward to 2021 and now [Bundler docs][2] [\\[web archive\\]][3] now say to commit the Gemfile.lock inside a gem... &#175;\\_(\u30c4)_\/&#175; I guess it makes sense for developers and ease of use when starting on a project. However, now CI jobs need to be sure to remove any stray Gemfile.lock files to test against other versions.\r\n\r\n\r\n**Legacy answer ~2010**\r\n\r\nAssuming you&#39;re not writing a rubygem, Gemfile.lock should be in your repository. It&#39;s used as a snapshot of all your required gems and their dependencies. This way bundler doesn&#39;t have to recalculate all the gem dependencies each time you deploy, etc.\r\n\r\nFrom cowboycoded&#39;s comment below:\r\n&gt; If you are working on a gem, then DO NOT check in your Gemfile.lock. If you are working on a Rails app, then DO check in your Gemfile.lock.\r\n\r\nHere&#39;s a nice [article][4] explaining what the lock file is.\r\n\r\n\r\n  [1]: https:\/\/stackoverflow.com\/users\/645491\/trinitronx\r\n  [2]: https:\/\/bundler.io\/v2.2\/guides\/faq.html#using-gemfiles-inside-gems\r\n  [3]: https:\/\/web.archive.org\/web\/20211223201450\/https:\/\/bundler.io\/v2.2\/guides\/faq.html#using-gemfiles-inside-gems\r\n  [4]: https:\/\/yehudakatz.com\/2010\/12\/16\/clarifying-the-roles-of-the-gemspec-and-gemfile\/",
        "body": "<p><strong>Update for 2022<\/strong> from <a href=\"https:\/\/stackoverflow.com\/users\/645491\/trinitronx\">TrinitronX\n<\/a><\/p>\n<blockquote>\n<p>Fast-forward to 2021 and now <a href=\"https:\/\/bundler.io\/v2.2\/guides\/faq.html#using-gemfiles-inside-gems\" rel=\"noreferrer\">Bundler docs<\/a> <a href=\"https:\/\/web.archive.org\/web\/20211223201450\/https:\/\/bundler.io\/v2.2\/guides\/faq.html#using-gemfiles-inside-gems\" rel=\"noreferrer\">[web archive]<\/a> now say to commit the Gemfile.lock inside a gem... \u00af_(\u30c4)_\/\u00af I guess it makes sense for developers and ease of use when starting on a project. However, now CI jobs need to be sure to remove any stray Gemfile.lock files to test against other versions.<\/p>\n<\/blockquote>\n<p><strong>Legacy answer ~2010<\/strong><\/p>\n<p>Assuming you're not writing a rubygem, Gemfile.lock should be in your repository. It's used as a snapshot of all your required gems and their dependencies. This way bundler doesn't have to recalculate all the gem dependencies each time you deploy, etc.<\/p>\n<p>From cowboycoded's comment below:<\/p>\n<blockquote>\n<p>If you are working on a gem, then DO NOT check in your Gemfile.lock. If you are working on a Rails app, then DO check in your Gemfile.lock.<\/p>\n<\/blockquote>\n<p>Here's a nice <a href=\"https:\/\/yehudakatz.com\/2010\/12\/16\/clarifying-the-roles-of-the-gemspec-and-gemfile\/\" rel=\"noreferrer\">article<\/a> explaining what the lock file is.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 812,
            "reputation": 51960,
            "user_id": 1060,
            "user_type": "registered",
            "accept_rate": 86,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/5978e2ed3a31f1bd2361dbb919d92012?s=256&d=identicon&r=PG",
            "display_name": "Mike Woodhouse",
            "link": "https:\/\/stackoverflow.com\/users\/1060\/mike-woodhouse"
        },
        "is_accepted": false,
        "score": 584,
        "last_activity_date": 1628940166,
        "last_edit_date": 1628940166.0,
        "creation_date": 1250204799,
        "answer_id": 1275147,
        "question_id": 1274675,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "I think of `%w()` as a &quot;word array&quot; - the elements are delimited by spaces and it returns an array of strings.\r\n\r\n[Here are all % literals][1]:\r\n\r\n  - `%w()` array of strings\r\n  - `%r()` regular expression.\r\n  - `%q()` string\r\n  - `%x()` a shell command (returning the output string)\r\n  - `%i()` array of symbols (Ruby &gt;= 2.0.0)\r\n  - `%s()` symbol\r\n  - `%()` (without letter) shortcut for `%Q()`\r\n\r\nThe delimiters `(` and `)` can be replaced with a lot of variations, like `[` and `]`, `|`, `!`, etc.\r\n\r\nWhen using a capital letter `%W()` you can use string interpolation `#{variable}`, similar to the `&quot;` and `&#39;` string delimiters. This rule works for all the other % literals as well.\r\n\r\n    abc = &#39;a b c&#39;\r\n    %w[1 2#{abc} d] #=&gt; [&quot;1&quot;, &quot;2\\#{abc}&quot;, &quot;d&quot;]\r\n    %W[1 2#{abc} d] #=&gt; [&quot;1&quot;, &quot;2a b c&quot;, &quot;d&quot;]\r\n\r\n\r\n  [1]: https:\/\/docs.ruby-lang.org\/en\/3.0.0\/doc\/syntax\/literals_rdoc.html#label-Percent+Strings",
        "body": "<p>I think of <code>%w()<\/code> as a &quot;word array&quot; - the elements are delimited by spaces and it returns an array of strings.<\/p>\n<p><a href=\"https:\/\/docs.ruby-lang.org\/en\/3.0.0\/doc\/syntax\/literals_rdoc.html#label-Percent+Strings\" rel=\"noreferrer\">Here are all % literals<\/a>:<\/p>\n<ul>\n<li><code>%w()<\/code> array of strings<\/li>\n<li><code>%r()<\/code> regular expression.<\/li>\n<li><code>%q()<\/code> string<\/li>\n<li><code>%x()<\/code> a shell command (returning the output string)<\/li>\n<li><code>%i()<\/code> array of symbols (Ruby &gt;= 2.0.0)<\/li>\n<li><code>%s()<\/code> symbol<\/li>\n<li><code>%()<\/code> (without letter) shortcut for <code>%Q()<\/code><\/li>\n<\/ul>\n<p>The delimiters <code>(<\/code> and <code>)<\/code> can be replaced with a lot of variations, like <code>[<\/code> and <code>]<\/code>, <code>|<\/code>, <code>!<\/code>, etc.<\/p>\n<p>When using a capital letter <code>%W()<\/code> you can use string interpolation <code>#{variable}<\/code>, similar to the <code>&quot;<\/code> and <code>'<\/code> string delimiters. This rule works for all the other % literals as well.<\/p>\n<pre><code>abc = 'a b c'\n%w[1 2#{abc} d] #=&gt; [&quot;1&quot;, &quot;2\\#{abc}&quot;, &quot;d&quot;]\n%W[1 2#{abc} d] #=&gt; [&quot;1&quot;, &quot;2a b c&quot;, &quot;d&quot;]\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 13421,
            "reputation": 9441,
            "user_id": 26933,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/bc5651438b426a54d5a3b5d6c575c051?s=256&d=identicon&r=PG",
            "display_name": "HanClinto",
            "link": "https:\/\/stackoverflow.com\/users\/26933\/hanclinto"
        },
        "is_accepted": true,
        "score": 583,
        "last_activity_date": 1484495274,
        "last_edit_date": 1484495274.0,
        "creation_date": 1227633568,
        "answer_id": 318170,
        "question_id": 318144,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "\r\n&gt;   *What&#39;s the difference between\r\n&gt; &quot;include&quot; and &quot;require&quot; in Ruby?*\r\n&gt; \r\n&gt; **Answer:**\r\n&gt; \r\n&gt; The include and require methods do\r\n&gt; very different things.\r\n&gt; \r\n&gt; The require method does what include\r\n&gt; does in most other programming\r\n&gt; languages: run another file. It also\r\n&gt; tracks what you&#39;ve required in the\r\n&gt; past and won&#39;t require the same file\r\n&gt; twice. To run another file without\r\n&gt; this added functionality, you can use\r\n&gt; the load method.\r\n&gt; \r\n&gt; The include method takes all the\r\n&gt; methods from another module and\r\n&gt; includes them into the current module.\r\n&gt; This is a language-level thing as\r\n&gt; opposed to a file-level thing as with\r\n&gt; require. The include method is the\r\n&gt; primary way to &quot;extend&quot; classes with\r\n&gt; other modules (usually referred to as\r\n&gt; mix-ins). For example, if your class\r\n&gt; defines the method &quot;each&quot;, you can\r\n&gt; include the mixin module Enumerable\r\n&gt; and it can act as a collection. This\r\n&gt; can be confusing as the include verb\r\n&gt; is used very differently in other\r\n&gt; languages.\r\n\r\n[Source](https:\/\/web.archive.org\/web\/20150405161656\/http:\/\/ruby.about.com\/b\/2008\/10\/23\/a-quick-peek-at-ruby-include-vs-require.htm)\r\n\r\nSo if you just want to use a module, rather than extend it or do a mix-in, then you&#39;ll want to use `require`.\r\n\r\nOddly enough, Ruby&#39;s `require` is analogous to C&#39;s `include`, while Ruby&#39;s `include` is almost nothing like C&#39;s `include`.",
        "body": "<blockquote>\n  <p><em>What's the difference between\n  \"include\" and \"require\" in Ruby?<\/em><\/p>\n  \n  <p><strong>Answer:<\/strong><\/p>\n  \n  <p>The include and require methods do\n  very different things.<\/p>\n  \n  <p>The require method does what include\n  does in most other programming\n  languages: run another file. It also\n  tracks what you've required in the\n  past and won't require the same file\n  twice. To run another file without\n  this added functionality, you can use\n  the load method.<\/p>\n  \n  <p>The include method takes all the\n  methods from another module and\n  includes them into the current module.\n  This is a language-level thing as\n  opposed to a file-level thing as with\n  require. The include method is the\n  primary way to \"extend\" classes with\n  other modules (usually referred to as\n  mix-ins). For example, if your class\n  defines the method \"each\", you can\n  include the mixin module Enumerable\n  and it can act as a collection. This\n  can be confusing as the include verb\n  is used very differently in other\n  languages.<\/p>\n<\/blockquote>\n\n<p><a href=\"https:\/\/web.archive.org\/web\/20150405161656\/http:\/\/ruby.about.com\/b\/2008\/10\/23\/a-quick-peek-at-ruby-include-vs-require.htm\" rel=\"noreferrer\">Source<\/a><\/p>\n\n<p>So if you just want to use a module, rather than extend it or do a mix-in, then you'll want to use <code>require<\/code>.<\/p>\n\n<p>Oddly enough, Ruby's <code>require<\/code> is analogous to C's <code>include<\/code>, while Ruby's <code>include<\/code> is almost nothing like C's <code>include<\/code>.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 142393,
            "reputation": 114803,
            "user_id": 350087,
            "user_type": "registered",
            "accept_rate": 92,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/808bec1c640143bd7091888d9edfb2f2?s=256&d=identicon&r=PG",
            "display_name": "apneadiving",
            "link": "https:\/\/stackoverflow.com\/users\/350087\/apneadiving"
        },
        "is_accepted": false,
        "score": 581,
        "last_activity_date": 1656576952,
        "last_edit_date": 1656576952.0,
        "creation_date": 1306270351,
        "answer_id": 6116744,
        "question_id": 6116668,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Usually I do:\r\n\r\n    rspec .\/spec\/controllers\/groups_controller_spec.rb:42\r\n\r\nWhere `42` represents the line of the test I want to run.\r\n\r\n\r\nYou can also use tags. See [here][1]. \r\n\r\nUsing `bundle exec`:\r\n\r\n    bundle exec rspec .\/spec\/controllers\/groups_controller_spec.rb:42\r\n\r\n\r\n\r\n  [1]: http:\/\/relishapp.com\/rspec\/rspec-core\/v\/2-3\/dir\/command-line\/tag-option",
        "body": "<p>Usually I do:<\/p>\n<pre><code>rspec .\/spec\/controllers\/groups_controller_spec.rb:42\n<\/code><\/pre>\n<p>Where <code>42<\/code> represents the line of the test I want to run.<\/p>\n<p>You can also use tags. See <a href=\"http:\/\/relishapp.com\/rspec\/rspec-core\/v\/2-3\/dir\/command-line\/tag-option\" rel=\"noreferrer\">here<\/a>.<\/p>\n<p>Using <code>bundle exec<\/code>:<\/p>\n<pre><code>bundle exec rspec .\/spec\/controllers\/groups_controller_spec.rb:42\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 806,
            "reputation": 123241,
            "user_id": 1053,
            "user_type": "registered",
            "accept_rate": 81,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/3f38c0e0cc4a1ca4656bfd8c78a581f2?s=256&d=identicon&r=PG",
            "display_name": "Ed S.",
            "link": "https:\/\/stackoverflow.com\/users\/1053\/ed-s"
        },
        "is_accepted": false,
        "score": 562,
        "last_activity_date": 1349386102,
        "last_edit_date": 1349386102.0,
        "creation_date": 1256694873,
        "answer_id": 1634754,
        "question_id": 1634750,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "    s = &quot;I have white space&quot;.delete(&#39; &#39;)\r\n\r\nAnd to emulate PHP&#39;s `trim()` function:\r\n\r\n    s = &quot;   I have leading and trailing white space   &quot;.strip",
        "body": "<pre><code>s = \"I have white space\".delete(' ')\n<\/code><\/pre>\n\n<p>And to emulate PHP's <code>trim()<\/code> function:<\/p>\n\n<pre><code>s = \"   I have leading and trailing white space   \".strip\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 10450,
            "reputation": 172840,
            "user_id": 19750,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/13b41b2620da0b1e630715e0c91a0b03?s=256&d=identicon&r=PG",
            "display_name": "Josh Lee",
            "link": "https:\/\/stackoverflow.com\/users\/19750\/josh-lee"
        },
        "is_accepted": true,
        "score": 550,
        "last_activity_date": 1330360992,
        "last_edit_date": 1330360992.0,
        "creation_date": 1249149037,
        "answer_id": 1217114,
        "question_id": 1217088,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "It&#39;s shorthand for `tags.map(&amp;:name.to_proc).join(&#39; &#39;)`\r\n\r\nIf `foo` is an object with a `to_proc` method, then you can pass it to a method as `&amp;foo`, which will call `foo.to_proc` and use that as the method&#39;s block.\r\n\r\nThe `Symbol#to_proc` method was originally added by ActiveSupport but has been integrated into Ruby 1.8.7. This is its implementation:\r\n\r\n    class Symbol\r\n      def to_proc\r\n        Proc.new do |obj, *args|\r\n          obj.send self, *args\r\n        end\r\n      end\r\n    end",
        "body": "<p>It's shorthand for <code>tags.map(&amp;:name.to_proc).join(' ')<\/code><\/p>\n\n<p>If <code>foo<\/code> is an object with a <code>to_proc<\/code> method, then you can pass it to a method as <code>&amp;foo<\/code>, which will call <code>foo.to_proc<\/code> and use that as the method's block.<\/p>\n\n<p>The <code>Symbol#to_proc<\/code> method was originally added by ActiveSupport but has been integrated into Ruby 1.8.7. This is its implementation:<\/p>\n\n<pre><code>class Symbol\n  def to_proc\n    Proc.new do |obj, *args|\n      obj.send self, *args\n    end\n  end\nend\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 1807807,
            "reputation": 14632,
            "user_id": 1644531,
            "user_type": "registered",
            "accept_rate": 66,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/0eb5bf6995005de4e15ed6c0042f7f0b?s=256&d=identicon&r=PG",
            "display_name": "freemanoid",
            "link": "https:\/\/stackoverflow.com\/users\/1644531\/freemanoid"
        },
        "is_accepted": true,
        "score": 546,
        "last_activity_date": 1617142168,
        "last_edit_date": 1617142168.0,
        "creation_date": 1368440824,
        "answer_id": 16519841,
        "question_id": 16519828,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "As we can [see][1] in ```ActionController::Base```, ```before_action``` is just a [new syntax][3] for ```before_filter```.\r\n\r\nHowever the ```before_filter``` syntax [is deprecated][2] in **Rails 5.0** and will be removed in **Rails 5.1**\r\n\r\n\r\n  [1]: https:\/\/github.com\/rails\/rails\/blob\/master\/actionpack\/lib\/abstract_controller\/callbacks.rb\r\n[2]: https:\/\/github.com\/rails\/rails\/blob\/v5.0.0.beta2\/actionpack\/lib\/abstract_controller\/callbacks.rb#L190-L193\r\n[3]: https:\/\/github.com\/rails\/rails\/commit\/9d62e04838f01f5589fa50b0baa480d60c815e2c",
        "body": "<p>As we can <a href=\"https:\/\/github.com\/rails\/rails\/blob\/master\/actionpack\/lib\/abstract_controller\/callbacks.rb\" rel=\"noreferrer\">see<\/a> in <code>ActionController::Base<\/code>, <code>before_action<\/code> is just a <a href=\"https:\/\/github.com\/rails\/rails\/commit\/9d62e04838f01f5589fa50b0baa480d60c815e2c\" rel=\"noreferrer\">new syntax<\/a> for <code>before_filter<\/code>.<\/p>\n<p>However the <code>before_filter<\/code> syntax <a href=\"https:\/\/github.com\/rails\/rails\/blob\/v5.0.0.beta2\/actionpack\/lib\/abstract_controller\/callbacks.rb#L190-L193\" rel=\"noreferrer\">is deprecated<\/a> in <strong>Rails 5.0<\/strong> and will be removed in <strong>Rails 5.1<\/strong><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 912782,
            "reputation": 38906,
            "user_id": 946224,
            "user_type": "registered",
            "accept_rate": 88,
            "profile_image": "https:\/\/i.stack.imgur.com\/j3vlZ.png?s=256&g=1",
            "display_name": "Sergii Shevchyk",
            "link": "https:\/\/stackoverflow.com\/users\/946224\/sergii-shevchyk"
        },
        "is_accepted": false,
        "score": 545,
        "last_activity_date": 1443417836,
        "last_edit_date": 1443417836.0,
        "creation_date": 1332191527,
        "answer_id": 9778021,
        "question_id": 151505,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "&lt;!-- language: none --&gt;\r\n\r\n    \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2566\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2566\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\r\n    \u2551               \u2551 class                     \u2551 module                          \u2551\r\n    \u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\r\n    \u2551 instantiation \u2551 can be instantiated       \u2551 can *not* be instantiated       \u2551\r\n    \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256b\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256b\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562\r\n    \u2551 usage         \u2551 object creation           \u2551 mixin facility. provide         \u2551\r\n    \u2551               \u2551                           \u2551   a namespace.                  \u2551\r\n    \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256b\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256b\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562\r\n    \u2551 superclass    \u2551 module                    \u2551 object                          \u2551\r\n    \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256b\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256b\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562\r\n    \u2551 methods       \u2551 class methods and         \u2551 module methods and              \u2551\r\n    \u2551               \u2551   instance methods        \u2551   instance methods              \u2551\r\n    \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256b\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256b\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562\r\n    \u2551 inheritance   \u2551 inherits behaviour and can\u2551 No inheritance                  \u2551\r\n    \u2551               \u2551   be base for inheritance \u2551                                 \u2551\r\n    \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256b\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256b\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562\r\n    \u2551 inclusion     \u2551 cannot be included        \u2551 can be included in classes and  \u2551\r\n    \u2551               \u2551                           \u2551   modules by using the include  \u2551\r\n    \u2551               \u2551                           \u2551   command (includes all         \u2551\r\n    \u2551               \u2551                           \u2551   instance methods as instance  \u2551\r\n    \u2551               \u2551                           \u2551   methods in a class\/module)    \u2551\r\n    \u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256b\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256b\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562\r\n    \u2551 extension     \u2551 can not extend with       \u2551 module can extend instance by   \u2551\r\n    \u2551               \u2551   extend command          \u2551   using extend command (extends \u2551\r\n    \u2551               \u2551   (only with inheritance) \u2551   given instance with singleton \u2551\r\n    \u2551               \u2551                           \u2551   methods from module)          \u2551\r\n    \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d",
        "body": "<pre class=\"lang-none prettyprint-override\"><code>\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2566\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2566\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551               \u2551 class                     \u2551 module                          \u2551\n\u2560\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256c\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563\n\u2551 instantiation \u2551 can be instantiated       \u2551 can *not* be instantiated       \u2551\n\u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256b\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256b\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562\n\u2551 usage         \u2551 object creation           \u2551 mixin facility. provide         \u2551\n\u2551               \u2551                           \u2551   a namespace.                  \u2551\n\u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256b\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256b\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562\n\u2551 superclass    \u2551 module                    \u2551 object                          \u2551\n\u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256b\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256b\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562\n\u2551 methods       \u2551 class methods and         \u2551 module methods and              \u2551\n\u2551               \u2551   instance methods        \u2551   instance methods              \u2551\n\u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256b\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256b\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562\n\u2551 inheritance   \u2551 inherits behaviour and can\u2551 No inheritance                  \u2551\n\u2551               \u2551   be base for inheritance \u2551                                 \u2551\n\u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256b\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256b\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562\n\u2551 inclusion     \u2551 cannot be included        \u2551 can be included in classes and  \u2551\n\u2551               \u2551                           \u2551   modules by using the include  \u2551\n\u2551               \u2551                           \u2551   command (includes all         \u2551\n\u2551               \u2551                           \u2551   instance methods as instance  \u2551\n\u2551               \u2551                           \u2551   methods in a class\/module)    \u2551\n\u255f\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256b\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256b\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2562\n\u2551 extension     \u2551 can not extend with       \u2551 module can extend instance by   \u2551\n\u2551               \u2551   extend command          \u2551   using extend command (extends \u2551\n\u2551               \u2551   (only with inheritance) \u2551   given instance with singleton \u2551\n\u2551               \u2551                           \u2551   methods from module)          \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2569\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 5014234,
            "reputation": 5974,
            "user_id": 4029489,
            "user_type": "registered",
            "accept_rate": 50,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/916133820d28ee5dbbbab617655e0989?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "nathanwhy",
            "link": "https:\/\/stackoverflow.com\/users\/4029489\/nathanwhy"
        },
        "is_accepted": false,
        "score": 536,
        "last_activity_date": 1523643693,
        "last_edit_date": 1523643693.0,
        "creation_date": 1467953746,
        "answer_id": 38259128,
        "question_id": 14607193,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "Try adding `--user-install` instead of using `sudo`:\r\n\r\n    gem install mygem --user-install",
        "body": "<p>Try adding <code>--user-install<\/code> instead of using <code>sudo<\/code>:<\/p>\n\n<pre><code>gem install mygem --user-install\n<\/code><\/pre>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 83453,
            "reputation": 8791,
            "user_id": 233978,
            "user_type": "registered",
            "accept_rate": 79,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/65f30a1438e46ad327370cddd663eac5?s=256&d=identicon&r=PG",
            "display_name": "auralbee",
            "link": "https:\/\/stackoverflow.com\/users\/233978\/auralbee"
        },
        "is_accepted": true,
        "score": 535,
        "last_activity_date": 1597136962,
        "last_edit_date": 1597136962.0,
        "creation_date": 1320331490,
        "answer_id": 7996827,
        "question_id": 7996695,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "    &lt;% %&gt;\r\n\r\nExecutes the ruby code within the brackets.\r\n\r\n    &lt;%= %&gt;\r\n\r\nPrints something into erb file.\r\n\r\n    &lt;%== %&gt;\r\n\r\nEquivalent to `&lt;%= raw %&gt;`. Prints something verbatim (i.e. w\/o escaping) into erb file. (Taken from [Ruby on Rails Guides](https:\/\/edgeguides.rubyonrails.org\/active_support_core_extensions.html#output-safety).)\r\n\r\n    &lt;% -%&gt;\r\n\r\nAvoids line break after expression.\r\n\r\n    &lt;%# %&gt;\r\n\r\nComments out code within brackets; not sent to client (as opposed to HTML comments).\r\n\r\nVisit [Ruby Doc][1] for more infos about ERB.\r\n\r\n\r\n  [1]: http:\/\/ruby-doc.org\/stdlib-1.9.3\/libdoc\/erb\/rdoc\/ERB.html",
        "body": "<pre><code>&lt;% %&gt;\n<\/code><\/pre>\n<p>Executes the ruby code within the brackets.<\/p>\n<pre><code>&lt;%= %&gt;\n<\/code><\/pre>\n<p>Prints something into erb file.<\/p>\n<pre><code>&lt;%== %&gt;\n<\/code><\/pre>\n<p>Equivalent to <code>&lt;%= raw %&gt;<\/code>. Prints something verbatim (i.e. w\/o escaping) into erb file. (Taken from <a href=\"https:\/\/edgeguides.rubyonrails.org\/active_support_core_extensions.html#output-safety\" rel=\"noreferrer\">Ruby on Rails Guides<\/a>.)<\/p>\n<pre><code>&lt;% -%&gt;\n<\/code><\/pre>\n<p>Avoids line break after expression.<\/p>\n<pre><code>&lt;%# %&gt;\n<\/code><\/pre>\n<p>Comments out code within brackets; not sent to client (as opposed to HTML comments).<\/p>\n<p>Visit <a href=\"http:\/\/ruby-doc.org\/stdlib-1.9.3\/libdoc\/erb\/rdoc\/ERB.html\" rel=\"noreferrer\">Ruby Doc<\/a> for more infos about ERB.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 305325,
            "reputation": 16624,
            "user_id": 615421,
            "user_type": "registered",
            "accept_rate": 85,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/00a80ff61ef21cf32b7d6511119561e9?s=256&d=identicon&r=PG",
            "display_name": "Peter Rasmussen",
            "link": "https:\/\/stackoverflow.com\/users\/615421\/peter-rasmussen"
        },
        "is_accepted": true,
        "score": 533,
        "last_activity_date": 1509533918,
        "last_edit_date": 1509533918.0,
        "creation_date": 1358170830,
        "answer_id": 14319518,
        "question_id": 14319347,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "`title` is a local variable. They only exists within its scope (current block)\r\n\r\n`@title` is an instance variable - and is available to all methods within the class.\r\n\r\nYou can read more here:\r\nhttp:\/\/strugglingwithruby.blogspot.dk\/2010\/03\/variables.html\r\n\r\nIn Ruby on Rails - declaring your variables in your controller as instance variables (`@title`) makes them available to your view.",
        "body": "<p><code>title<\/code> is a local variable. They only exists within its scope (current block)<\/p>\n\n<p><code>@title<\/code> is an instance variable - and is available to all methods within the class.<\/p>\n\n<p>You can read more here:\n<a href=\"http:\/\/strugglingwithruby.blogspot.dk\/2010\/03\/variables.html\" rel=\"noreferrer\">http:\/\/strugglingwithruby.blogspot.dk\/2010\/03\/variables.html<\/a><\/p>\n\n<p>In Ruby on Rails - declaring your variables in your controller as instance variables (<code>@title<\/code>) makes them available to your view.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 317733,
            "reputation": 36848,
            "user_id": 634576,
            "user_type": "registered",
            "accept_rate": 91,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/48891dab622b535f3c2b4ec1c8765bed?s=256&d=identicon&r=PG",
            "display_name": "Dave Schweisguth",
            "link": "https:\/\/stackoverflow.com\/users\/634576\/dave-schweisguth"
        },
        "is_accepted": true,
        "score": 525,
        "last_activity_date": 1680828496,
        "last_edit_date": 1680828496.0,
        "creation_date": 1465853168,
        "answer_id": 37799399,
        "question_id": 37799296,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "`# frozen_string_literal: true` is a magic comment, supported for the first time in Ruby 2.3, that tells Ruby that all string literals in the file are implicitly frozen, as if `#freeze` had been called on each of them. That is, if a string literal is defined in a file with this comment, and you call a method on that string which modifies it, such as `&lt;&lt;`, you&#39;ll get `RuntimeError: can&#39;t modify frozen String`.\r\n\r\nFreezing strings prevents bugs caused by accidentally modifying a string when you didn&#39;t intend to, and may improve performance.\r\n\r\n[Like any magic comment, the frozen_string_literal comment must be in the first comment section of the file.][1] Ironically, the frozen_string_literal comment in that binstub is not in the binstub&#39;s first comment section and will be ignored.\r\n\r\nIn Ruby 2.3, you can use this magic comment &lt;s&gt;to prepare for frozen string literals being the default in Ruby 3&lt;\/s&gt;.\r\n\r\nIn Ruby 2.3 run with the `--enable=frozen-string-literal` flag, &lt;s&gt;and in Ruby 3, &lt;\/s&gt;string literals are frozen in all files. You can override the global setting with `# frozen_string_literal: false`.\r\n\r\nIf you want a string literal to be mutable regardless of the global or per-file setting, you can prefix it with the unary `+` operator (being careful with operator precedence) or call `.dup` on it:\r\n\r\n    # frozen_string_literal: true\r\n    &quot;&quot;.frozen?\r\n    =&gt; true\r\n    (+&quot;&quot;).frozen?\r\n    =&gt; false\r\n    &quot;&quot;.dup.frozen?\r\n    =&gt; false\r\n\r\nYou can also freeze a mutable (unfrozen) string with unary `-`.\r\n\r\n\r\n[Source: magic_comment defined in ruby\/ruby][2]\r\n\r\n\r\n  [1]: https:\/\/docs.ruby-lang.org\/en\/3.1\/syntax\/comments_rdoc.html#label-Magic+Comments\r\n  [2]: https:\/\/github.com\/ruby\/ruby\/blob\/v3_0_0\/parse.y#L8085-L8094",
        "body": "<p><code># frozen_string_literal: true<\/code> is a magic comment, supported for the first time in Ruby 2.3, that tells Ruby that all string literals in the file are implicitly frozen, as if <code>#freeze<\/code> had been called on each of them. That is, if a string literal is defined in a file with this comment, and you call a method on that string which modifies it, such as <code>&lt;&lt;<\/code>, you'll get <code>RuntimeError: can't modify frozen String<\/code>.<\/p>\n<p>Freezing strings prevents bugs caused by accidentally modifying a string when you didn't intend to, and may improve performance.<\/p>\n<p><a href=\"https:\/\/docs.ruby-lang.org\/en\/3.1\/syntax\/comments_rdoc.html#label-Magic+Comments\" rel=\"noreferrer\">Like any magic comment, the frozen_string_literal comment must be in the first comment section of the file.<\/a> Ironically, the frozen_string_literal comment in that binstub is not in the binstub's first comment section and will be ignored.<\/p>\n<p>In Ruby 2.3, you can use this magic comment <s>to prepare for frozen string literals being the default in Ruby 3<\/s>.<\/p>\n<p>In Ruby 2.3 run with the <code>--enable=frozen-string-literal<\/code> flag, <s>and in Ruby 3, <\/s>string literals are frozen in all files. You can override the global setting with <code># frozen_string_literal: false<\/code>.<\/p>\n<p>If you want a string literal to be mutable regardless of the global or per-file setting, you can prefix it with the unary <code>+<\/code> operator (being careful with operator precedence) or call <code>.dup<\/code> on it:<\/p>\n<pre><code># frozen_string_literal: true\n&quot;&quot;.frozen?\n=&gt; true\n(+&quot;&quot;).frozen?\n=&gt; false\n&quot;&quot;.dup.frozen?\n=&gt; false\n<\/code><\/pre>\n<p>You can also freeze a mutable (unfrozen) string with unary <code>-<\/code>.<\/p>\n<p><a href=\"https:\/\/github.com\/ruby\/ruby\/blob\/v3_0_0\/parse.y#L8085-L8094\" rel=\"noreferrer\">Source: magic_comment defined in ruby\/ruby<\/a><\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 132846,
            "reputation": 40063,
            "user_id": 333786,
            "user_type": "registered",
            "accept_rate": 78,
            "profile_image": "https:\/\/i.stack.imgur.com\/UOdKp.jpg?s=256&g=1",
            "display_name": "Jakub Hampl",
            "link": "https:\/\/stackoverflow.com\/users\/333786\/jakub-hampl"
        },
        "is_accepted": true,
        "score": 523,
        "last_activity_date": 1333110782,
        "last_edit_date": 1333110782.0,
        "creation_date": 1299723874,
        "answer_id": 5254764,
        "question_id": 5254732,
        "content_license": "CC BY-SA 3.0",
        "body_markdown": "There&#39;s no difference, in fact `map` is implemented in C as `rb_ary_collect` and `enum_collect` (eg. there is a difference between `map` on an array and on any other enum, but no difference between `map` and `collect`).\r\n\r\n----\r\n\r\n**Why do both `map` and `collect` exist in Ruby?** The `map` function has many naming conventions in different languages. [Wikipedia provides an overview](http:\/\/en.wikipedia.org\/wiki\/Map_(higher-order_function)):\r\n\r\n&gt; The map function originated in functional programming languages but is today supported (or may be defined) in many procedural, object oriented, and multi-paradigm languages as well: In C++&#39;s Standard Template Library, it is called `transform`, in C# (3.0)&#39;s LINQ library, it is provided as an extension method called `Select`. Map is also a frequently used operation in high level languages such as Perl, Python and Ruby; the operation is called `map` in all three of these languages. *A `collect` alias for map is also provided in Ruby (from Smalltalk)* [emphasis mine]. Common Lisp provides a family of map-like functions; the one corresponding to the behavior described here is called `mapcar` (-car indicating access using the CAR operation). \r\n\r\nRuby provides an alias for programmers from the Smalltalk world to feel more at home.\r\n\r\n----\r\n\r\n**Why is there a different implementation for arrays and enums?** An enum is a generalized iteration structure, which means that there is no way in which Ruby can predict what the next element can be (you can define infinite enums, see [Prime](http:\/\/apidock.com\/ruby\/Prime) for an example). Therefore it must call a function to get each successive element (typically this will be the `each` method). \r\n\r\nArrays are the most common collection so it is reasonable to optimize their performance. Since Ruby knows a lot about how arrays work it doesn&#39;t have to call `each` but can only use simple [pointer manipulation](http:\/\/www.eskimo.com\/~scs\/cclass\/notes\/sx10b.html) which is significantly faster.\r\n\r\nSimilar optimizations exist for a number of Array methods like `zip` or `count`.",
        "body": "<p>There's no difference, in fact <code>map<\/code> is implemented in C as <code>rb_ary_collect<\/code> and <code>enum_collect<\/code> (eg. there is a difference between <code>map<\/code> on an array and on any other enum, but no difference between <code>map<\/code> and <code>collect<\/code>).<\/p>\n\n<hr>\n\n<p><strong>Why do both <code>map<\/code> and <code>collect<\/code> exist in Ruby?<\/strong> The <code>map<\/code> function has many naming conventions in different languages. <a href=\"http:\/\/en.wikipedia.org\/wiki\/Map_(higher-order_function)\" rel=\"noreferrer\">Wikipedia provides an overview<\/a>:<\/p>\n\n<blockquote>\n  <p>The map function originated in functional programming languages but is today supported (or may be defined) in many procedural, object oriented, and multi-paradigm languages as well: In C++'s Standard Template Library, it is called <code>transform<\/code>, in C# (3.0)'s LINQ library, it is provided as an extension method called <code>Select<\/code>. Map is also a frequently used operation in high level languages such as Perl, Python and Ruby; the operation is called <code>map<\/code> in all three of these languages. <em>A <code>collect<\/code> alias for map is also provided in Ruby (from Smalltalk)<\/em> [emphasis mine]. Common Lisp provides a family of map-like functions; the one corresponding to the behavior described here is called <code>mapcar<\/code> (-car indicating access using the CAR operation). <\/p>\n<\/blockquote>\n\n<p>Ruby provides an alias for programmers from the Smalltalk world to feel more at home.<\/p>\n\n<hr>\n\n<p><strong>Why is there a different implementation for arrays and enums?<\/strong> An enum is a generalized iteration structure, which means that there is no way in which Ruby can predict what the next element can be (you can define infinite enums, see <a href=\"http:\/\/apidock.com\/ruby\/Prime\" rel=\"noreferrer\">Prime<\/a> for an example). Therefore it must call a function to get each successive element (typically this will be the <code>each<\/code> method). <\/p>\n\n<p>Arrays are the most common collection so it is reasonable to optimize their performance. Since Ruby knows a lot about how arrays work it doesn't have to call <code>each<\/code> but can only use simple <a href=\"http:\/\/www.eskimo.com\/~scs\/cclass\/notes\/sx10b.html\" rel=\"noreferrer\">pointer manipulation<\/a> which is significantly faster.<\/p>\n\n<p>Similar optimizations exist for a number of Array methods like <code>zip<\/code> or <code>count<\/code>.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 12324,
            "reputation": 43364,
            "user_id": 24195,
            "user_type": "registered",
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/bb4bebe360045a2dce663ee875f13723?s=256&d=identicon&r=PG",
            "display_name": "Rob Di Marco",
            "link": "https:\/\/stackoverflow.com\/users\/24195\/rob-di-marco"
        },
        "is_accepted": true,
        "score": 522,
        "last_activity_date": 1671221193,
        "last_edit_date": 1671221193.0,
        "creation_date": 1296006663,
        "answer_id": 4800746,
        "question_id": 4800721,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "This [means][a] install the gem, but do not call require when you start Bundler. So you will need to manually call\r\n\r\n    require &quot;whenever&quot;\r\n\r\nif you want to use the library.\r\n\r\nIf you were to do\r\n\r\n    gem &quot;whenever&quot;, require: &quot;whereever&quot;\r\n\r\nthen bundler would download the gem named whenever, but would call\r\n\r\n    require &quot;whereever&quot;\r\n\r\nThis is often used if the name of library to require is different than the name of the gem.\r\n\r\n[a]: https:\/\/bundler.io\/v2.3\/man\/gemfile.5.html#REQUIRE-AS",
        "body": "<p>This <a href=\"https:\/\/bundler.io\/v2.3\/man\/gemfile.5.html#REQUIRE-AS\" rel=\"noreferrer\">means<\/a> install the gem, but do not call require when you start Bundler. So you will need to manually call<\/p>\n<pre><code>require &quot;whenever&quot;\n<\/code><\/pre>\n<p>if you want to use the library.<\/p>\n<p>If you were to do<\/p>\n<pre><code>gem &quot;whenever&quot;, require: &quot;whereever&quot;\n<\/code><\/pre>\n<p>then bundler would download the gem named whenever, but would call<\/p>\n<pre><code>require &quot;whereever&quot;\n<\/code><\/pre>\n<p>This is often used if the name of library to require is different than the name of the gem.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 43866,
            "reputation": 159182,
            "user_id": 128421,
            "user_type": "registered",
            "accept_rate": 50,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/71770d043c0f7e3c7bc5f74190015c26?s=256&d=identicon&r=PG",
            "display_name": "the Tin Man",
            "link": "https:\/\/stackoverflow.com\/users\/128421\/the-tin-man"
        },
        "is_accepted": true,
        "score": 521,
        "last_activity_date": 1631288968,
        "last_edit_date": 1631288968.0,
        "creation_date": 1380405886,
        "answer_id": 19072136,
        "question_id": 19072070,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "Use [`gem environment`][env] to find out about your gem environment:\r\n\r\n    RubyGems Environment:\r\n      - RUBYGEMS VERSION: 2.1.5\r\n      - RUBY VERSION: 2.0.0 (2013-06-27 patchlevel 247) [x86_64-darwin12.4.0]\r\n      - INSTALLATION DIRECTORY: \/Users\/ttm\/.rbenv\/versions\/2.0.0-p247\/lib\/ruby\/gems\/2.0.0\r\n      - RUBY EXECUTABLE: \/Users\/ttm\/.rbenv\/versions\/2.0.0-p247\/bin\/ruby\r\n      - EXECUTABLE DIRECTORY: \/Users\/ttm\/.rbenv\/versions\/2.0.0-p247\/bin\r\n      - SPEC CACHE DIRECTORY: \/Users\/ttm\/.gem\/specs\r\n      - RUBYGEMS PLATFORMS:\r\n        - ruby\r\n        - x86_64-darwin-12\r\n      - GEM PATHS:\r\n         - \/Users\/ttm\/.rbenv\/versions\/2.0.0-p247\/lib\/ruby\/gems\/2.0.0\r\n         - \/Users\/ttm\/.gem\/ruby\/2.0.0\r\n      - GEM CONFIGURATION:\r\n         - :update_sources =&gt; true\r\n         - :verbose =&gt; true\r\n         - :backtrace =&gt; false\r\n         - :bulk_threshold =&gt; 1000\r\n      - REMOTE SOURCES:\r\n         - https:\/\/rubygems.org\/\r\n      - SHELL PATH:\r\n         - \/Users\/ttm\/.rbenv\/versions\/2.0.0-p247\/bin\r\n         - \/Users\/ttm\/.rbenv\/libexec\r\n         - \/Users\/ttm\/.rbenv\/plugins\/ruby-build\/bin\r\n         - \/Users\/ttm\/perl5\/perlbrew\/bin\r\n         - \/Users\/ttm\/perl5\/perlbrew\/perls\/perl-5.18.1\/bin\r\n         - \/Users\/ttm\/.pyenv\/shims\r\n         - \/Users\/ttm\/.pyenv\/bin\r\n         - \/Users\/ttm\/.rbenv\/shims\r\n         - \/Users\/ttm\/.rbenv\/bin\r\n         - \/Users\/ttm\/bin\r\n         - \/usr\/local\/mysql-5.6.12-osx10.7-x86_64\/bin\r\n         - \/Users\/ttm\/libsmi\/bin\r\n         - \/usr\/local\/bin\r\n         - \/usr\/bin\r\n         - \/bin\r\n         - \/usr\/sbin\r\n         - \/sbin\r\n         - \/usr\/local\/bin\r\n\r\nNotice the two sections for:\r\n\r\n* `INSTALLATION DIRECTORY`\r\n* `GEM PATHS`\r\n\r\n[env]: http:\/\/guides.rubygems.org\/command-reference\/#gem-environment",
        "body": "<p>Use <a href=\"http:\/\/guides.rubygems.org\/command-reference\/#gem-environment\" rel=\"noreferrer\"><code>gem environment<\/code><\/a> to find out about your gem environment:<\/p>\n<pre><code>RubyGems Environment:\n  - RUBYGEMS VERSION: 2.1.5\n  - RUBY VERSION: 2.0.0 (2013-06-27 patchlevel 247) [x86_64-darwin12.4.0]\n  - INSTALLATION DIRECTORY: \/Users\/ttm\/.rbenv\/versions\/2.0.0-p247\/lib\/ruby\/gems\/2.0.0\n  - RUBY EXECUTABLE: \/Users\/ttm\/.rbenv\/versions\/2.0.0-p247\/bin\/ruby\n  - EXECUTABLE DIRECTORY: \/Users\/ttm\/.rbenv\/versions\/2.0.0-p247\/bin\n  - SPEC CACHE DIRECTORY: \/Users\/ttm\/.gem\/specs\n  - RUBYGEMS PLATFORMS:\n    - ruby\n    - x86_64-darwin-12\n  - GEM PATHS:\n     - \/Users\/ttm\/.rbenv\/versions\/2.0.0-p247\/lib\/ruby\/gems\/2.0.0\n     - \/Users\/ttm\/.gem\/ruby\/2.0.0\n  - GEM CONFIGURATION:\n     - :update_sources =&gt; true\n     - :verbose =&gt; true\n     - :backtrace =&gt; false\n     - :bulk_threshold =&gt; 1000\n  - REMOTE SOURCES:\n     - https:\/\/rubygems.org\/\n  - SHELL PATH:\n     - \/Users\/ttm\/.rbenv\/versions\/2.0.0-p247\/bin\n     - \/Users\/ttm\/.rbenv\/libexec\n     - \/Users\/ttm\/.rbenv\/plugins\/ruby-build\/bin\n     - \/Users\/ttm\/perl5\/perlbrew\/bin\n     - \/Users\/ttm\/perl5\/perlbrew\/perls\/perl-5.18.1\/bin\n     - \/Users\/ttm\/.pyenv\/shims\n     - \/Users\/ttm\/.pyenv\/bin\n     - \/Users\/ttm\/.rbenv\/shims\n     - \/Users\/ttm\/.rbenv\/bin\n     - \/Users\/ttm\/bin\n     - \/usr\/local\/mysql-5.6.12-osx10.7-x86_64\/bin\n     - \/Users\/ttm\/libsmi\/bin\n     - \/usr\/local\/bin\n     - \/usr\/bin\n     - \/bin\n     - \/usr\/sbin\n     - \/sbin\n     - \/usr\/local\/bin\n<\/code><\/pre>\n<p>Notice the two sections for:<\/p>\n<ul>\n<li><code>INSTALLATION DIRECTORY<\/code><\/li>\n<li><code>GEM PATHS<\/code><\/li>\n<\/ul>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 33529,
            "reputation": 11083,
            "user_id": 93947,
            "user_type": "registered",
            "accept_rate": 100,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/4cfa27623a7f68e3d297e786e2264d24?s=256&d=identicon&r=PG",
            "display_name": "gdelfino",
            "link": "https:\/\/stackoverflow.com\/users\/93947\/gdelfino"
        },
        "is_accepted": false,
        "score": 507,
        "last_activity_date": 1590318388,
        "last_edit_date": 1590318388.0,
        "creation_date": 1317822244,
        "answer_id": 7662245,
        "question_id": 1381725,
        "content_license": "CC BY-SA 4.0",
        "body_markdown": "From [RVM\u2019s documentation][1]:\r\n\r\n&gt; Just add this line to your `~\/.gemrc` or `\/etc\/gemrc`:\r\n\r\n    gem: --no-document\r\n\r\n  [1]: https:\/\/rvm.io\/gemsets\/basics\/\r\n\r\n---\r\n**Note:** The original answer was:\r\n\r\n    install: --no-rdoc --no-ri \r\n    update: --no-rdoc --no-ri \r\n\r\nThis is no longer valid; the RVM docs have since been updated, thus the current answer to only include the `gem` directive is the correct one.",
        "body": "<p>From <a href=\"https:\/\/rvm.io\/gemsets\/basics\/\" rel=\"noreferrer\">RVM\u2019s documentation<\/a>:<\/p>\n\n<blockquote>\n  <p>Just add this line to your <code>~\/.gemrc<\/code> or <code>\/etc\/gemrc<\/code>:<\/p>\n<\/blockquote>\n\n<pre><code>gem: --no-document\n<\/code><\/pre>\n\n<hr>\n\n<p><strong>Note:<\/strong> The original answer was:<\/p>\n\n<pre><code>install: --no-rdoc --no-ri \nupdate: --no-rdoc --no-ri \n<\/code><\/pre>\n\n<p>This is no longer valid; the RVM docs have since been updated, thus the current answer to only include the <code>gem<\/code> directive is the correct one.<\/p>\n",
        "community_owned_date": null
    },
    {
        "owner": {
            "account_id": 10612,
            "reputation": 14657,
            "user_id": 20131,
            "user_type": "registered",
            "accept_rate": 50,
            "profile_image": "https:\/\/www.gravatar.com\/avatar\/582b5bdd99cf7920ba1b14fc3bf175c8?s=256&d=identicon&r=PG&f=y&so-version=2",
            "display_name": "Sam Stokes",
            "link": "https:\/\/stackoverflow.com\/users\/20131\/sam-stokes"
        },
        "is_accepted": true,
        "score": 500,
        "last_activity_date": 1272370412,
        "last_edit_date": 1272370412.0,
        "creation_date": 1239297599,
        "answer_id": 735130,
        "question_id": 735073,
        "content_license": "CC BY-SA 2.5",
        "body_markdown": "How about:\r\n\r\n    Dir[&quot;\/path\/to\/directory\/*.rb&quot;].each {|file| require file }",
        "body": "<p>How about:<\/p>\n\n<pre><code>Dir[\"\/path\/to\/directory\/*.rb\"].each {|file| require file }\n<\/code><\/pre>\n",
        "community_owned_date": null
    }
]
